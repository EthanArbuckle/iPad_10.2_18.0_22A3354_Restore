uint64_t _GLOBAL__sub_I_MentionDetectorOverrides_cpp()
{
  marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME = 0;
  unk_1ED7B1B50 = 0;
  qword_1ED7B1B58 = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME, "overrides.json", "");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME, &dword_1C281A000);
}

void sub_1C281C670(_Unwind_Exception *exception_object)
{
  if (SHIBYTE(qword_1ED7B1B58) < 0)
    operator delete((void *)marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_GazeBasedFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
}

uint64_t _GLOBAL__sub_I_MentionKeywordFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
}

uint64_t _GLOBAL__sub_I_ProtocolFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
}

uint64_t _GLOBAL__sub_I_SpanTypeFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
}

uint64_t _GLOBAL__sub_I_UtteranceKeywordFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
  qword_1ED7B1CD0 = 0;
  unk_1ED7B1CD8 = 0;
  marrs::mrr::mr::keywordFilename = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::mr::keywordFilename, "keywords.json", "");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::keywordFilename, &dword_1C281A000);
}

void sub_1C281C824(_Unwind_Exception *exception_object)
{
  if (byte_1ED7B1CDF < 0)
    operator delete((void *)marrs::mrr::mr::keywordFilename);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_OrdinalFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(&marrs::mrr::mr::assetSubDirectoryPath, "ruleBased");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::assetSubDirectoryPath, &dword_1C281A000);
}

uint64_t _GLOBAL__sub_I_CbRPredictorPlugin_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(LOGISTIC_PARAMS, "sys_comb_logistic_regression_params");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], LOGISTIC_PARAMS, &dword_1C281A000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_1, "sys_comb_weight_1");
  __cxa_atexit(v0, SYS_COMB_WEIGHT_1, &dword_1C281A000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_2, "sys_comb_weight_2");
  return __cxa_atexit(v0, SYS_COMB_WEIGHT_2, &dword_1C281A000);
}

void _GLOBAL__sub_I_QueryRewrite_mm()
{
  void *v0;
  void (*v1)(void *);

  v0 = (void *)MEMORY[0x1C3BC5F58]();
  std::string::basic_string[abi:ne180100]<0>(LOGISTIC_PARAMS, "sys_comb_logistic_regression_params");
  v1 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], LOGISTIC_PARAMS, &dword_1C281A000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_1, "sys_comb_weight_1");
  __cxa_atexit(v1, SYS_COMB_WEIGHT_1, &dword_1C281A000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_2, "sys_comb_weight_2");
  __cxa_atexit(v1, SYS_COMB_WEIGHT_2, &dword_1C281A000);
  objc_autoreleasePoolPop(v0);
}

uint64_t _GLOBAL__sub_I_RuleBasedMR_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [7],void>(&marrs::mrr::mr::RuleBasedMR::ordinalFilterAssetPath, "verbal");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::RuleBasedMR::ordinalFilterAssetPath, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&marrs::mrr::mr::RuleBasedMR::verbKeywordsAssetPath, "verbKeywords");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::RuleBasedMR::verbKeywordsAssetPath, &dword_1C281A000);
}

uint64_t _GLOBAL__sub_I_ModelBasedMR_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C281A000);
  qword_1ED7B1C10 = 0;
  unk_1ED7B1C18 = 0;
  marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath, "modelBased", "");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath, &dword_1C281A000);
  qword_1ED7B1BF8 = 0;
  unk_1ED7B1C00 = 0;
  marrs::mrr::mr::ModelBasedMR::modelFolderName = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::mr::ModelBasedMR::modelFolderName, "converted_model.mlmodelc", "");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::ModelBasedMR::modelFolderName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&marrs::mrr::mr::ModelBasedMR::modelName, "model.espresso.net");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::ModelBasedMR::modelName, &dword_1C281A000);
}

void sub_1C281CBE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_MRRVisualAndScreenMentionDetector_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::md::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::configFileName, &dword_1C281A000);
  std::string::basic_string[abi:ne180100]<0>(&marrs::mrr::md::MRRVisualAndScreenMentionDetector::WORD_PIECE_SUFFIX_SYMBOL, "##");
  __cxa_atexit(MEMORY[0x1E0DE44D0], &marrs::mrr::md::MRRVisualAndScreenMentionDetector::WORD_PIECE_SUFFIX_SYMBOL, &dword_1C281A000);
  qword_1ED7B1B80 = 0;
  unk_1ED7B1B88 = 0;
  marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME, "classifier_model.mlmodelc", "");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FILE_NAME, "model.espresso.net");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FILE_NAME, &dword_1C281A000);
}

void sub_1C281CCE4(_Unwind_Exception *exception_object)
{
  if (byte_1ED7B1B8F < 0)
    operator delete((void *)marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_MROrchestrator_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [7],void>(&marrs::mrr::mr::MROrchestrator::modelMRAssetPath, "visual");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::MROrchestrator::modelMRAssetPath, &dword_1C281A000);
}

void _GLOBAL__sub_I_MultimodalReferenceResolution_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x1C3BC5F58]();
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::md::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::configFileName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C281A000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C281A000);
  objc_autoreleasePoolPop(v0);
}

void _GLOBAL__sub_I_MRREntityNLUGraphParsingUtil_mm()
{
  siri::ontology::oname::graph::ontology_init *v0;
  siri::ontology::oname::graph::ontology_init *v1;
  siri::ontology::oname::graph::ontology_init *v2;
  siri::ontology::oname::graph::ontology_init *v3;
  siri::ontology::oname::graph::ontology_init *v4;
  siri::ontology::oname::graph::ontology_init *v5;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  _DWORD *v23;
  int v24;
  void (*v25)(void *);
  _DWORD v26[12];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v0 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BC5F58]();
  v1 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_EmailAddress(v0);
  v26[0] = *((_DWORD *)v1 + 9);
  v2 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_PhoneNumber(v1);
  v26[1] = *((_DWORD *)v2 + 9);
  v3 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Uri(v2);
  v26[2] = *((_DWORD *)v3 + 9);
  v4 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_LocalisedString(v3);
  v26[3] = *((_DWORD *)v4 + 9);
  v5 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Group(v4);
  v26[4] = *((_DWORD *)v5 + 9);
  v6 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Person(v5);
  v26[5] = *((_DWORD *)v6 + 9);
  v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItem(v6);
  v26[6] = *((_DWORD *)v7 + 9);
  v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_SearchObject(v7);
  v26[7] = *((_DWORD *)v8 + 9);
  v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_UserEntity(v8);
  v26[8] = *((_DWORD *)v9 + 9);
  v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_App(v9);
  v26[9] = *((_DWORD *)v10 + 9);
  v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Window(v10);
  v26[10] = *((_DWORD *)v11 + 9);
  v12 = siri::ontology::oname::graph::ontology_init::common_Setting(v11);
  v13 = 0;
  v14 = 0;
  v26[11] = *(_DWORD *)(v12 + 36);
  qword_1ED7B1B38 = 0;
  v15 = &qword_1ED7B1B38;
  qword_1ED7B1B40 = 0;
  marrs::mrr::mr::directValueEntityTypes = (uint64_t)&qword_1ED7B1B38;
  while (1)
  {
    if (v15 == &qword_1ED7B1B38)
    {
      v17 = &qword_1ED7B1B38;
    }
    else
    {
      v16 = (uint64_t *)v13;
      if (v13)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)v16[1];
        }
        while (v16);
      }
      else
      {
        v18 = &qword_1ED7B1B38;
        do
        {
          v17 = (uint64_t *)v18[2];
          v19 = *v17 == (_QWORD)v18;
          v18 = v17;
        }
        while (v19);
      }
      v20 = v26[v14];
      if (*((_DWORD *)v17 + 7) >= v20)
      {
        if (v13)
        {
          v22 = &qword_1ED7B1B38;
          while (1)
          {
            while (1)
            {
              v21 = (uint64_t *)v13;
              v24 = *(_DWORD *)(v13 + 28);
              if (v20 >= v24)
                break;
              v13 = *v21;
              v22 = v21;
              if (!*v21)
                goto LABEL_17;
            }
            if (v24 >= v20)
              break;
            v22 = v21 + 1;
            v13 = v21[1];
            if (!v13)
              goto LABEL_17;
          }
        }
        else
        {
          v21 = &qword_1ED7B1B38;
          v22 = &qword_1ED7B1B38;
        }
        goto LABEL_16;
      }
    }
    v21 = v13 ? v17 : &qword_1ED7B1B38;
    v22 = v13 ? v17 + 1 : &qword_1ED7B1B38;
LABEL_16:
    if (!*v22)
    {
LABEL_17:
      v23 = operator new(0x20uLL);
      v23[7] = v26[v14];
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = v21;
      *v22 = (uint64_t)v23;
      if (*(_QWORD *)marrs::mrr::mr::directValueEntityTypes)
      {
        marrs::mrr::mr::directValueEntityTypes = *(_QWORD *)marrs::mrr::mr::directValueEntityTypes;
        v23 = (_DWORD *)*v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED7B1B38, (uint64_t *)v23);
      ++qword_1ED7B1B40;
    }
    if (++v14 == 12)
      break;
    v15 = (uint64_t *)marrs::mrr::mr::directValueEntityTypes;
    v13 = qword_1ED7B1B38;
  }
  __cxa_atexit((void (*)(void *))std::set<int>::~set[abi:ne180100], &marrs::mrr::mr::directValueEntityTypes, &dword_1C281A000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeKitEntityTypeString, (void *)objc_msgSend((id)*MEMORY[0x1E0DA2C88], "UTF8String"), objc_msgSend((id)*MEMORY[0x1E0DA2C88], "lengthOfBytesUsingEncoding:", 4));
  v25 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &marrs::mrr::mr::homeKitEntityTypeString, &dword_1C281A000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeAutomationRoomString, (void *)objc_msgSend((id)*MEMORY[0x1E0DA2CB0], "UTF8String"), objc_msgSend((id)*MEMORY[0x1E0DA2CB0], "lengthOfBytesUsingEncoding:", 4));
  __cxa_atexit(v25, &marrs::mrr::mr::homeAutomationRoomString, &dword_1C281A000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeAutomationAccessoryNameString, (void *)objc_msgSend((id)*MEMORY[0x1E0DA2CA8], "UTF8String"), objc_msgSend((id)*MEMORY[0x1E0DA2CA8], "lengthOfBytesUsingEncoding:", 4));
  __cxa_atexit(v25, &marrs::mrr::mr::homeAutomationAccessoryNameString, &dword_1C281A000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeAutomationServiceNameString, (void *)objc_msgSend((id)*MEMORY[0x1E0DA2CB8], "UTF8String"), objc_msgSend((id)*MEMORY[0x1E0DA2CB8], "lengthOfBytesUsingEncoding:", 4));
  __cxa_atexit(v25, &marrs::mrr::mr::homeAutomationServiceNameString, &dword_1C281A000);
  objc_autoreleasePoolPop(v0);
}

void sub_1C281D1FC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy((_QWORD *)qword_1ED7B1B38);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_MRREntity_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  _OWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const std::string::value_type **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  char *v23;
  std::string *v24;
  uint64_t i;
  _QWORD __dst[63];

  __dst[62] = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_1E7C67A48, 0x1E0uLL);
  std::map<marrs::mrr::mr::EntityType,char const*>::map[abi:ne180100]((uint64_t **)&marrs::mrr::mr::MRREntity::EntityTypeStr, (int *)__dst, 30);
  __cxa_atexit((void (*)(void *))std::map<marrs::mrr::mr::EntityType,char const*>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::EntityTypeStr, &dword_1C281A000);
  memcpy(__dst, &unk_1E7C67C28, 0x1F0uLL);
  std::map<marrs::mrr::mr::EntityType,char const*>::map[abi:ne180100]((uint64_t **)&marrs::mrr::mr::MRREntity::MatchingSpanLabelStr, (int *)__dst, 31);
  __cxa_atexit((void (*)(void *))std::map<marrs::mrr::mr::EntityType,char const*>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::MatchingSpanLabelStr, &dword_1C281A000);
  v0 = 0;
  v1 = 0;
  qword_1ED7B1C78 = 0;
  qword_1ED7B1C70 = 0;
  v2 = &qword_1ED7B1C70;
  marrs::mrr::mr::MRREntity::EntitySourceToStrMap = (uint64_t)&qword_1ED7B1C70;
  while (1)
  {
    v3 = (int *)((char *)&unk_1E7C67E18 + 16 * v1);
    if (v2 == &qword_1ED7B1C70)
    {
      v5 = &qword_1ED7B1C70;
    }
    else
    {
      v4 = (uint64_t *)v0;
      if (v0)
      {
        do
        {
          v5 = v4;
          v4 = (uint64_t *)v4[1];
        }
        while (v4);
      }
      else
      {
        v6 = &qword_1ED7B1C70;
        do
        {
          v5 = (uint64_t *)v6[2];
          v7 = *v5 == (_QWORD)v6;
          v6 = v5;
        }
        while (v7);
      }
      v8 = *v3;
      if (*((_DWORD *)v5 + 8) >= *v3)
      {
        if (v0)
        {
          v10 = &qword_1ED7B1C70;
          while (1)
          {
            while (1)
            {
              v9 = (uint64_t *)v0;
              v12 = *(_DWORD *)(v0 + 32);
              if (v8 >= v12)
                break;
              v0 = *v9;
              v10 = v9;
              if (!*v9)
                goto LABEL_17;
            }
            if (v12 >= v8)
              break;
            v10 = v9 + 1;
            v0 = v9[1];
            if (!v0)
              goto LABEL_17;
          }
        }
        else
        {
          v9 = &qword_1ED7B1C70;
          v10 = &qword_1ED7B1C70;
        }
        goto LABEL_16;
      }
    }
    v9 = v0 ? v5 : &qword_1ED7B1C70;
    v10 = v0 ? v5 + 1 : &qword_1ED7B1C70;
LABEL_16:
    if (!*v10)
    {
LABEL_17:
      v11 = operator new(0x30uLL);
      v11[2] = *(_OWORD *)v3;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v9;
      *v10 = (uint64_t)v11;
      if (*(_QWORD *)marrs::mrr::mr::MRREntity::EntitySourceToStrMap)
      {
        marrs::mrr::mr::MRREntity::EntitySourceToStrMap = *(_QWORD *)marrs::mrr::mr::MRREntity::EntitySourceToStrMap;
        v11 = (_OWORD *)*v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED7B1C70, (uint64_t *)v11);
      ++qword_1ED7B1C78;
    }
    if (++v1 == 6)
      break;
    v2 = (uint64_t *)marrs::mrr::mr::MRREntity::EntitySourceToStrMap;
    v0 = qword_1ED7B1C70;
  }
  __cxa_atexit((void (*)(void *))std::map<marrs::mrr::mr::EntitySource,char const*>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::EntitySourceToStrMap, &dword_1C281A000);
  std::string::basic_string[abi:ne180100]<0>(__dst, "book");
  LODWORD(__dst[3]) = 26;
  std::string::basic_string[abi:ne180100]<0>(&__dst[4], "album");
  LODWORD(__dst[7]) = 9;
  std::string::basic_string[abi:ne180100]<0>(&__dst[8], "landmark");
  LODWORD(__dst[11]) = 2;
  std::string::basic_string[abi:ne180100]<0>(&__dst[12], "dogs");
  LODWORD(__dst[15]) = 27;
  std::string::basic_string[abi:ne180100]<0>(&__dst[16], "cats");
  LODWORD(__dst[19]) = 27;
  std::string::basic_string[abi:ne180100]<0>(&__dst[20], "nature");
  LODWORD(__dst[23]) = 27;
  std::string::basic_string[abi:ne180100]<0>(&__dst[24], "packagedProducts");
  LODWORD(__dst[27]) = 28;
  std::string::basic_string[abi:ne180100]<0>(&__dst[28], "art");
  v13 = 0;
  v14 = 0;
  LODWORD(__dst[31]) = 29;
  qword_1ED7B1CA0 = 0;
  v15 = &qword_1ED7B1CA0;
  qword_1ED7B1CA8 = 0;
  for (marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap = (uint64_t)&qword_1ED7B1CA0;
        ;
        v15 = (uint64_t *)marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap)
  {
    v16 = (const std::string::value_type **)&__dst[4 * v14];
    if (v15 == &qword_1ED7B1CA0)
    {
      v18 = &qword_1ED7B1CA0;
LABEL_40:
      if (v13)
      {
        v20 = v18 + 1;
        if (v18[1])
          goto LABEL_58;
      }
      else
      {
LABEL_51:
        v18 = &qword_1ED7B1CA0;
        v20 = &qword_1ED7B1CA0;
      }
LABEL_52:
      v23 = (char *)operator new(0x40uLL);
      v24 = (std::string *)(v23 + 32);
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v24, *v16, (std::string::size_type)v16[1]);
      }
      else
      {
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
        *((_QWORD *)v23 + 6) = v16[2];
      }
      *((_DWORD *)v23 + 14) = __dst[4 * v14 + 3];
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = v18;
      *v20 = (uint64_t)v23;
      if (*(_QWORD *)marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap)
      {
        marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap = *(_QWORD *)marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap;
        v23 = (char *)*v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED7B1CA0, (uint64_t *)v23);
      v13 = qword_1ED7B1CA0;
      ++qword_1ED7B1CA8;
      goto LABEL_58;
    }
    v17 = (uint64_t *)v13;
    if (v13)
    {
      do
      {
        v18 = v17;
        v17 = (uint64_t *)v17[1];
      }
      while (v17);
    }
    else
    {
      v19 = &qword_1ED7B1CA0;
      do
      {
        v18 = (uint64_t *)v19[2];
        v7 = *v18 == (_QWORD)v19;
        v19 = v18;
      }
      while (v7);
    }
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v18 + 4, &__dst[4 * v14]))
      goto LABEL_40;
    if (!v13)
      goto LABEL_51;
    v21 = (uint64_t *)v13;
    while (1)
    {
      while (1)
      {
        v18 = v21;
        v22 = v21 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&__dst[4 * v14], v21 + 4))
          break;
        v21 = (uint64_t *)*v18;
        v20 = v18;
        if (!*v18)
          goto LABEL_52;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v22, &__dst[4 * v14]))
        break;
      v20 = v18 + 1;
      v21 = (uint64_t *)v18[1];
      if (!v21)
        goto LABEL_52;
    }
LABEL_58:
    if (++v14 == 8)
      break;
  }
  for (i = 0; i != -32; i -= 4)
  {
    if (SHIBYTE(__dst[i + 30]) < 0)
      operator delete((void *)__dst[i + 28]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,marrs::mrr::mr::EntityType>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap, &dword_1C281A000);
}

void sub_1C281D714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  char *v10;

  while (1)
  {
    if (*(v10 - 9) < 0)
      operator delete(*((void **)v10 - 4));
    v10 -= 32;
    if (v10 == &a10)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_1C281D7C4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v20 = a1;
  v21 = a2;
  v19 = sub_1C289C174();
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    sub_1C2825F18(0, v9, 0);
    v10 = v22;
    v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v11 = a3 + v18;
    v17 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      v20(v11);
      if (v4)
        break;
      v4 = 0;
      v22 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1C2825F18(v12 > 1, v13 + 1, 1);
        v10 = v22;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      v14 = v17;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v18 + v13 * v17, v8, v19);
      v11 += v14;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_1C281D924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = OUTLINED_FUNCTION_7();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  OUTLINED_FUNCTION_3();
  v4 = v3 - v2;
  v5 = MEMORY[0x1E0DEE9D8];
  v7 = MEMORY[0x1E0DEE9D8];
  sub_1C289C354();
  sub_1C281D9B8(v4, v5, &v7);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v7;
}

void sub_1C281D9B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD v62[2];
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v78 = a3;
  v83 = a2;
  v85 = *MEMORY[0x1E0C80C00];
  v4 = sub_1C289C264();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v70 = (char *)v62 - v9;
  v10 = sub_1C289C288();
  v68 = *(_QWORD *)(v10 - 8);
  v69 = v10;
  MEMORY[0x1E0C80A78](v10);
  v67 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1C289C24C();
  v81 = *(_QWORD *)(v12 - 8);
  v82 = v12;
  MEMORY[0x1E0C80A78](v12);
  v80 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
  v14 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v16 = (char *)v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860D0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v62 - v21;
  __swift_storeEnumTagSinglePayload((uint64_t)v62 - v21, 1, 1, v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v20, 1, 1, v4);
  v23 = sub_1C289C2C4();
  sub_1C281EF50((uint64_t)v20);
  sub_1C281EF50((uint64_t)v22);
  sub_1C2822ABC(v23);
  v25 = v24;
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v63 = v8;
    v64 = v5;
    v65 = v4;
    v66 = a1;
    v27 = v79;
    v28 = &v16[*(int *)(v79 + 48)];
    v29 = *(unsigned __int8 *)(v14 + 80);
    v30 = (v29 + 32) & ~v29;
    v62[1] = v25;
    v31 = v25 + v30;
    v32 = v82;
    v71 = *(_QWORD *)(v83 + 16);
    v72 = v71 + 1;
    v33 = *(_QWORD *)(v14 + 72);
    v84 = v30;
    v76 = v29 | 7;
    v77 = v33 + v30;
    v75 = xmmword_1C289DCE0;
    v35 = v80;
    v34 = v81;
    v73 = v28;
    v74 = v16;
    do
    {
      sub_1C281EF90(v31, (uint64_t)v16);
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v35, v16, v32);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860D8);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = v75;
      v37 = v36 + v84;
      v38 = v36 + v84 + *(int *)(v27 + 48);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v36 + v84, v35, v32);
      v39 = sub_1C289C2E8();
      v40 = *(_QWORD *)(v39 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v38, v28, v39);
      v41 = v83;
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native()
        || (v42 = *(_QWORD *)(v41 + 24) >> 1, v43 = v41, v42 <= v71))
      {
        sub_1C28247F0();
        v43 = v44;
        v42 = *(_QWORD *)(v44 + 24) >> 1;
      }
      v45 = *(_QWORD *)(v43 + 16);
      if (v42 <= v45)
        __break(1u);
      v46 = v43 + v84 + v45 * v33;
      if (v37 < v46 + v33 && v46 < v37 + v33)
      {
        sub_1C289C624();
        __break(1u);
        return;
      }
      v48 = v79;
      swift_arrayInitWithCopy();
      ++*(_QWORD *)(v43 + 16);
      swift_bridgeObjectRelease();
      v28 = v73;
      sub_1C281D9B8(v73, v43, v78);
      v27 = v48;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v39);
      v35 = v80;
      v34 = v81;
      v32 = v82;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);
      v31 += v33;
      --v26;
      v16 = v74;
    }
    while (v26);
    swift_bridgeObjectRelease();
    v49 = v83;
    v4 = v65;
    v5 = v64;
    v8 = v63;
  }
  else
  {
    swift_bridgeObjectRelease();
    v49 = v83;
  }
  v50 = v67;
  sub_1C289C2DC();
  v51 = v70;
  sub_1C289C270();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v50, v69);
  sub_1C289C258();
  sub_1C281EFD8();
  LOBYTE(v50) = sub_1C289C420();
  v52 = *(void (**)(char *, uint64_t))(v5 + 8);
  v52(v8, v4);
  v52(v51, v4);
  if ((v50 & 1) == 0)
  {
    v53 = sub_1C289C2B8();
    if (v54)
    {
      v55 = v53;
      v56 = v54;
      v57 = HIBYTE(v54) & 0xF;
      if ((v54 & 0x2000000000000000) == 0)
        v57 = v53 & 0xFFFFFFFFFFFFLL;
      if (v57)
      {
        swift_bridgeObjectRetain();
        v58 = v78;
        sub_1C281EBB4();
        v59 = *(_QWORD *)(*v58 + 16);
        sub_1C281EBFC(v59);
        v60 = *v58;
        *(_QWORD *)(v60 + 16) = v59 + 1;
        v61 = (_QWORD *)(v60 + 24 * v59);
        v61[4] = v55;
        v61[5] = v56;
        v61[6] = v49;
        *v58 = v60;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

void sub_1C281DF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_8();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_7();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = OUTLINED_FUNCTION_6();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v33[4] = v5;
    v34 = v2;
    OUTLINED_FUNCTION_14();
    v9 = v7 + v8;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v35 = *(_QWORD *)(v4 + 72);
    v36 = v10;
    v11 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v36(v0, v9, v3);
      v12 = sub_1C289C2A0();
      v13 = v4;
      OUTLINED_FUNCTION_19(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      v14 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v11 + 16);
      if (__OFADD__(v15, v14))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v15 + v14 > *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_1C2824934();
        v11 = v16;
      }
      if (*(_QWORD *)(v12 + 16))
      {
        v17 = *(_QWORD *)(v11 + 16);
        v18 = (*(_QWORD *)(v11 + 24) >> 1) - v17;
        v19 = OUTLINED_FUNCTION_17();
        if (v18 < v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v19 - 8);
        v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
        v22 = *(_QWORD *)(v20 + 72);
        v23 = v11 + v21 + v22 * v17;
        v24 = v12 + v21;
        v25 = v22 * v14;
        v26 = v23 + v25;
        v27 = v24 + v25;
        if (v24 < v26 && v23 < v27)
          goto LABEL_26;
        swift_arrayInitWithCopy();
        if (v14)
        {
          v29 = *(_QWORD *)(v11 + 16);
          v30 = __OFADD__(v29, v14);
          v31 = v29 + v14;
          if (v30)
            goto LABEL_25;
          *(_QWORD *)(v11 + 16) = v31;
        }
      }
      else if (v14)
      {
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_21();
      v9 += v35;
      --v6;
      v4 = v13;
      if (!v6)
      {
        v32 = swift_bridgeObjectRelease();
        v2 = v34;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2();
    __break(1u);
  }
  else
  {
    v32 = swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    MEMORY[0x1E0C80A78](v32);
    v33[2] = v2;
    sub_1C281D7C4((void (*)(uint64_t))sub_1C281EE9C, (uint64_t)v33, v11);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_1();
  }
}

uint64_t sub_1C281E1A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[4] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1C289C15C();
  v10[2] = v7;
  v10[3] = v6;
  v10[1] = sub_1C289C114();
  sub_1C289C168();
  sub_1C289C120();
  v8 = sub_1C289C12C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, a1, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v8);
  sub_1C289C108();
  sub_1C289C138();
  return sub_1C289C144();
}

void sub_1C281E2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  OUTLINED_FUNCTION_8();
  v2 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_17();
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_13();
  v6 = OUTLINED_FUNCTION_7();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_3();
  v10 = v9 - v8;
  v11 = *(_QWORD *)(sub_1C289C33C() + 16);
  v45 = v4;
  v46 = v2;
  v51 = v5;
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    v29 = *(_QWORD *)(v15 + 16);
    if (!v29)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_1();
      return;
    }
    OUTLINED_FUNCTION_14();
    v31 = v15 + v30;
    v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v50 = *(_QWORD *)(v32 + 72);
    v33 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v48(v0, v31, v5);
      if (sub_1C289C114() == v4 && v34 == v2)
        break;
      v36 = sub_1C289C648();
      OUTLINED_FUNCTION_21();
      if ((v36 & 1) != 0)
        goto LABEL_30;
LABEL_35:
      OUTLINED_FUNCTION_20(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
      v31 += v50;
      if (!--v29)
        goto LABEL_36;
    }
    swift_bridgeObjectRelease();
LABEL_30:
    v37 = sub_1C289C15C();
    v39 = v38;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_22();
      v33 = v42;
    }
    v40 = *(_QWORD *)(v33 + 16);
    if (v40 >= *(_QWORD *)(v33 + 24) >> 1)
    {
      OUTLINED_FUNCTION_22();
      v33 = v43;
    }
    *(_QWORD *)(v33 + 16) = v40 + 1;
    v41 = v33 + 16 * v40;
    *(_QWORD *)(v41 + 32) = v37;
    *(_QWORD *)(v41 + 40) = v39;
    v4 = v45;
    v2 = v46;
    v5 = v51;
    goto LABEL_35;
  }
  v44 = v0;
  OUTLINED_FUNCTION_14();
  v14 = v12 + v13;
  v47 = *(_QWORD *)(v7 + 72);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v15 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v49(v10, v14, v6);
    v16 = sub_1C289C2A0();
    v17 = v7;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    v18 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v15 + 16);
    if (__OFADD__(v19, v18))
      break;
    if (!swift_isUniquelyReferenced_nonNull_native() || v19 + v18 > *(_QWORD *)(v15 + 24) >> 1)
    {
      sub_1C2824934();
      v15 = v20;
    }
    if (*(_QWORD *)(v16 + 16))
    {
      v21 = *(_QWORD *)(v15 + 16);
      if ((*(_QWORD *)(v15 + 24) >> 1) - v21 < v18)
        goto LABEL_39;
      v22 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      v23 = *(_QWORD *)(v52 + 72);
      v24 = v15 + v22 + v23 * v21;
      if (v16 + v22 < v24 + v23 * v18 && v24 < v16 + v22 + v23 * v18)
        goto LABEL_41;
      swift_arrayInitWithCopy();
      if (v18)
      {
        v26 = *(_QWORD *)(v15 + 16);
        v27 = __OFADD__(v26, v18);
        v28 = v26 + v18;
        if (v27)
          goto LABEL_40;
        *(_QWORD *)(v15 + 16) = v28;
      }
    }
    else if (v18)
    {
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_21();
    v14 += v47;
    --v11;
    v7 = v17;
    if (!v11)
    {
      swift_bridgeObjectRelease();
      v2 = v46;
      v5 = v51;
      v0 = v44;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  __break(1u);
}

uint64_t sub_1C281E648()
{
  return sub_1C289C0F0();
}

void sub_1C281E688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_8();
  v2 = OUTLINED_FUNCTION_7();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = *(_QWORD *)(OUTLINED_FUNCTION_6() + 16);
  if (v4)
  {
    OUTLINED_FUNCTION_14();
    v7 = v5 + v6;
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v9(v1, v7, v2);
      OUTLINED_FUNCTION_16();
      sub_1C289C2B8();
      OUTLINED_FUNCTION_15();
      if (v0)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_16();
        swift_bridgeObjectRetain();
        sub_1C289C2D0();
      }
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_1();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_1C281E77C()
{
  uint64_t v0;
  void (*v1)(char *, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_8();
  v40 = v1;
  v38 = v2;
  v3 = sub_1C289C288();
  v4 = *(_QWORD *)(v3 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  OUTLINED_FUNCTION_3();
  v44 = v6 - v5;
  v7 = sub_1C289C24C();
  v42 = *(_QWORD *)(v7 - 8);
  v8 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v39 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v33 - v10;
  v12 = OUTLINED_FUNCTION_7();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_3();
  v16 = v15 - v14;
  sub_1C289C36C();
  swift_allocObject();
  v43 = sub_1C289C360();
  v17 = sub_1C289C33C();
  v18 = sub_1C281EA10(1, v17);
  v22 = (v21 >> 1) - v20;
  if (v21 >> 1 == v20)
  {
    swift_unknownObjectRelease();
  }
  else
  {
    if ((uint64_t)(v21 >> 1) <= v20)
    {
      __break(1u);
      return;
    }
    v33 = v18;
    v34 = v7;
    v35 = v0;
    v36 = v4;
    v37 = v3;
    v23 = *(_QWORD *)(v13 + 72);
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v24 = v19 + v20 * v23;
    do
    {
      v41(v16, v24, v12);
      sub_1C281EA9C();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
      v24 += v23;
      --v22;
    }
    while (v22);
    swift_unknownObjectRelease();
    v4 = v36;
    v7 = v34;
  }
  v25 = *(_QWORD *)(sub_1C289C330() + 16);
  if (v25)
  {
    OUTLINED_FUNCTION_14();
    v38 = v26;
    v28 = v26 + v27;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 72);
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    v41 = v30;
    v31 = v39;
    do
    {
      v40(v11, v28, v7);
      sub_1C289C228();
      sub_1C289C240();
      sub_1C289C234();
      sub_1C289C21C();
      sub_1C289C300();
      OUTLINED_FUNCTION_20(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      v32 = *(void (**)(char *, uint64_t))(v42 + 8);
      v32(v31, v7);
      v32(v11, v7);
      v28 += (uint64_t)v41;
      --v25;
    }
    while (v25);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1();
}

uint64_t sub_1C281EA10(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1C281EF04(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if (v3 < v5)
    goto LABEL_9;
  if ((v5 & 0x8000000000000000) == 0)
  {
    sub_1C289C2E8();
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_1C281EA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  OUTLINED_FUNCTION_8();
  v1 = v0;
  v2 = sub_1C289C288();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_3();
  v6 = v5 - v4;
  v7 = *(_QWORD *)(OUTLINED_FUNCTION_7() - 8);
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_13();
  sub_1C289C294();
  if ((v8 & 1) != 0)
  {
    sub_1C289C2B8();
    OUTLINED_FUNCTION_15();
    if (v1)
    {
      sub_1C289C324();
    }
    else
    {
      sub_1C289C2DC();
      sub_1C289C30C();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    }
  }
  else
  {
    sub_1C289C318();
  }
  sub_1C289C2A0();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_19(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  OUTLINED_FUNCTION_1();
}

void sub_1C281EBB4()
{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1C282474C();
    *v0 = v3;
  }
}

void sub_1C281EBFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 + 1 > *(_QWORD *)(*(_QWORD *)v1 + 24) >> 1)
  {
    sub_1C282474C();
    *(_QWORD *)v1 = v2;
  }
}

uint64_t sub_1C281EC38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_9();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
    OUTLINED_FUNCTION_12();
    if (!v6 && v5)
    {
      v5 = v4 >= a3;
      v6 = v4 == a3;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      OUTLINED_FUNCTION_18();
      return OUTLINED_FUNCTION_4();
    }
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_10();
  }
  result = OUTLINED_FUNCTION_2();
  __break(1u);
  return result;
}

uint64_t sub_1C281ECD4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_9();
  }
  else
  {
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_12();
    if (!v6 && v5)
    {
      v5 = v4 >= a3;
      v6 = v4 == a3;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      OUTLINED_FUNCTION_18();
      return OUTLINED_FUNCTION_4();
    }
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_10();
  }
  result = OUTLINED_FUNCTION_2();
  __break(1u);
  return result;
}

uint64_t sub_1C281ED68(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_9();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_10();
  }
  result = OUTLINED_FUNCTION_2();
  __break(1u);
  return result;
}

uint64_t sub_1C281EE00(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_9();
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_10();
  }
  result = OUTLINED_FUNCTION_2();
  __break(1u);
  return result;
}

uint64_t sub_1C281EE9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C281E1A8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BC624C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1C281EF04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t sub_1C281EF50(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C281EF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C281EFD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF7860E0;
  if (!qword_1EF7860E0)
  {
    v1 = sub_1C289C264();
    result = MEMORY[0x1C3BC6258](MEMORY[0x1E0DA2848], v1);
    atomic_store(result, (unint64_t *)&qword_1EF7860E0);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2()
{
  return sub_1C289C624();
}

uint64_t OUTLINED_FUNCTION_4()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_6()
{
  return sub_1C289C33C();
}

uint64_t OUTLINED_FUNCTION_7()
{
  return sub_1C289C2E8();
}

uint64_t OUTLINED_FUNCTION_11()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_15()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16()
{
  return sub_1C289C2AC();
}

uint64_t OUTLINED_FUNCTION_17()
{
  return sub_1C289C174();
}

uint64_t OUTLINED_FUNCTION_18()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_19@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_20@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_21()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_22()
{
  sub_1C2824A70();
}

uint64_t sub_1C281F16C(__int128 *a1, void *a2)
{
  char v2;
  unint64_t v3;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  id v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[25];
  uint64_t v90;
  char v91[8];
  uint64_t v92;
  char v93[8];
  __int128 v94;
  _BYTE v95[25];
  char v96[8];
  uint64_t v97;
  char v98[8];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860E8);
  MEMORY[0x1E0C80A78](v6);
  sub_1C281F954((uint64_t)a1 + 8, (uint64_t)v93, &qword_1EF7860F0);
  v92 = *((_QWORD *)a1 + 2);
  sub_1C281F954((uint64_t)a1 + 24, (uint64_t)v91, &qword_1EF7860F8);
  v90 = *((_QWORD *)a1 + 4);
  v7 = a1[1];
  v88 = *a1;
  *(_OWORD *)v89 = v7;
  *(_OWORD *)&v89[9] = *(__int128 *)((char *)a1 + 25);
  swift_retain();
  sub_1C281F998((uint64_t)&v92);
  sub_1C281F998((uint64_t)&v90);
  sub_1C281F998((uint64_t)v93);
  sub_1C281F998((uint64_t)v91);
  *(_QWORD *)&v87 = sub_1C28263B4(a2);
  *((_QWORD *)&v87 + 1) = v8;
  if (v8)
  {
    v9 = (uint64_t)&v88;
    v10 = sub_1C28273A4();
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = v10;
      v83 = OUTLINED_FUNCTION_10_0();
      v13 = (uint64_t *)(v12 + 48);
      v85 = MEMORY[0x1E0DEE9D8];
      do
      {
        v3 = *(v13 - 2);
        v14 = *(v13 - 1);
        v15 = *v13;
        v94 = v87;
        v16 = OUTLINED_FUNCTION_13_0((uint64_t)&v101);
        __swift_storeEnumTagSinglePayload(v16, v17, v18, v83);
        sub_1C281F9D8();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_0_0();
        v9 = sub_1C289C588();
        v20 = v19;
        OUTLINED_FUNCTION_15_0();
        if ((v2 & 1) == 0 && (v9 ^ v20) >> 14)
        {
          v21 = sub_1C2826824(v3, v14, v15);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_12_0();
          v2 = v89[24];
          v22 = OUTLINED_FUNCTION_2_0();
          if ((OUTLINED_FUNCTION_18_0() & 1) == 0)
          {
            OUTLINED_FUNCTION_4_0();
            OUTLINED_FUNCTION_11_0(v26);
          }
          v3 = *(_QWORD *)(v85 + 16);
          if (v3 >= *(_QWORD *)(v85 + 24) >> 1)
          {
            OUTLINED_FUNCTION_3_0();
            OUTLINED_FUNCTION_11_0(v27);
          }
          OUTLINED_FUNCTION_17_0();
          v25 = v23 + v3 * v24;
          *(_QWORD *)(v25 + 32) = v21;
          *(_QWORD *)(v25 + 40) = v22;
          *(_QWORD *)(v25 + 48) = v9;
          *(_QWORD *)(v25 + 56) = v20;
          *(_BYTE *)(v25 + 64) = 1;
          *(_BYTE *)(v25 + 65) = v2;
        }
        else
        {
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_12_0();
        }
        v13 += 3;
        --v11;
      }
      while (v11);
    }
    else
    {
      v85 = MEMORY[0x1E0DEE9D8];
    }
    OUTLINED_FUNCTION_6_0();
    v33 = *(_QWORD *)v89;
    v34 = *(_QWORD *)(*(_QWORD *)v89 + 16);
    if (v34)
    {
      v35 = OUTLINED_FUNCTION_10_0();
      swift_bridgeObjectRetain();
      v36 = v33 + 40;
      v32 = v85;
      v84 = v35;
      do
      {
        v37 = OUTLINED_FUNCTION_1_0();
        __swift_storeEnumTagSinglePayload(v37, v38, v39, v35);
        sub_1C281F9D8();
        OUTLINED_FUNCTION_14_0();
        OUTLINED_FUNCTION_0_0();
        sub_1C289C588();
        OUTLINED_FUNCTION_5();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0 && (v9 ^ v33) >> 14)
        {
          LOBYTE(v3) = v88;
          v2 = v89[24];
          OUTLINED_FUNCTION_2_0();
          OUTLINED_FUNCTION_19_0();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_7_0();
            v32 = v46;
          }
          OUTLINED_FUNCTION_16_0();
          if (v44)
          {
            OUTLINED_FUNCTION_8_0();
            v43 = v40;
          }
          OUTLINED_FUNCTION_9_0(v40, v41, v42, v43);
          *(_BYTE *)(v45 + 64) = 2;
          *(_BYTE *)(v45 + 65) = v2;
          v35 = v84;
        }
        v36 += 16;
        --v34;
      }
      while (v34);
      OUTLINED_FUNCTION_6_0();
    }
    else
    {
      v32 = v85;
    }
    sub_1C2827408();
    v48 = *(_QWORD *)(v47 + 16);
    if (v48)
    {
      v49 = v47;
      v50 = OUTLINED_FUNCTION_10_0();
      v51 = v49 + 40;
      OUTLINED_FUNCTION_11_0(v50);
      do
      {
        v52 = OUTLINED_FUNCTION_1_0();
        __swift_storeEnumTagSinglePayload(v52, v53, v54, v50);
        sub_1C281F9D8();
        OUTLINED_FUNCTION_14_0();
        OUTLINED_FUNCTION_0_0();
        sub_1C289C588();
        OUTLINED_FUNCTION_5();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0 && ((unint64_t)&v88 ^ v49) >> 14)
        {
          LOBYTE(v3) = v88;
          v2 = v89[24];
          OUTLINED_FUNCTION_2_0();
          OUTLINED_FUNCTION_19_0();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_7_0();
            v32 = v60;
          }
          OUTLINED_FUNCTION_16_0();
          if (v44)
          {
            OUTLINED_FUNCTION_8_0();
            v58 = v55;
          }
          OUTLINED_FUNCTION_9_0(v55, v56, v57, v58);
          *(_BYTE *)(v59 + 64) = 3;
          *(_BYTE *)(v59 + 65) = v2;
          v50 = v85;
        }
        v51 += 16;
        --v48;
      }
      while (v48);
    }
    OUTLINED_FUNCTION_6_0();
    v61 = *(_QWORD *)&v89[16];
    v62 = *(_QWORD *)(*(_QWORD *)&v89[16] + 16);
    if (v62)
    {
      v86 = v32;
      v63 = OUTLINED_FUNCTION_10_0();
      swift_bridgeObjectRetain();
      v64 = (uint64_t *)(v61 + 40);
      v82 = v63;
      do
      {
        v65 = *(v64 - 1);
        v66 = *v64;
        v67 = OUTLINED_FUNCTION_13_0((uint64_t)&v100);
        __swift_storeEnumTagSinglePayload(v67, v68, v69, v63);
        sub_1C281F9D8();
        swift_bridgeObjectRetain();
        v70 = sub_1C289C588();
        v72 = v71;
        OUTLINED_FUNCTION_15_0();
        if ((v2 & 1) == 0 && (v70 ^ v72) >> 14)
        {
          v94 = v88;
          *(_OWORD *)v95 = *(_OWORD *)v89;
          *(_OWORD *)&v95[9] = *(_OWORD *)&v89[9];
          v2 = v88;
          sub_1C281F954((uint64_t)&v94 + 8, (uint64_t)v96, &qword_1EF7860F0);
          v97 = *(_QWORD *)v95;
          sub_1C281F954((uint64_t)&v95[8], (uint64_t)v98, &qword_1EF7860F8);
          v99 = *(_QWORD *)&v95[16];
          swift_retain();
          sub_1C281F998((uint64_t)&v97);
          sub_1C281F998((uint64_t)&v99);
          sub_1C281F998((uint64_t)v96);
          sub_1C281F998((uint64_t)v98);
          v73 = sub_1C2826CF4(v65, v66, (uint64_t)&v94);
          swift_release();
          OUTLINED_FUNCTION_12_0();
          sub_1C281FA54((uint64_t)v96);
          sub_1C281FA54((uint64_t)&v97);
          sub_1C281FA54((uint64_t)v98);
          sub_1C281FA54((uint64_t)&v99);
          if (v73)
          {
            v2 = v95[24];
            v74 = OUTLINED_FUNCTION_2_0();
            swift_retain();
            if ((OUTLINED_FUNCTION_18_0() & 1) == 0)
            {
              OUTLINED_FUNCTION_4_0();
              OUTLINED_FUNCTION_11_0(v79);
            }
            v75 = *(_QWORD *)(v86 + 16);
            if (v75 >= *(_QWORD *)(v86 + 24) >> 1)
            {
              OUTLINED_FUNCTION_3_0();
              OUTLINED_FUNCTION_11_0(v80);
            }
            OUTLINED_FUNCTION_17_0();
            v78 = v76 + v75 * v77;
            *(_QWORD *)(v78 + 32) = v73;
            *(_QWORD *)(v78 + 40) = v74;
            *(_QWORD *)(v78 + 48) = v70;
            *(_QWORD *)(v78 + 56) = v72;
            *(_BYTE *)(v78 + 64) = 0;
            *(_BYTE *)(v78 + 65) = v2;
            swift_release();
            v63 = v82;
          }
        }
        else
        {
          OUTLINED_FUNCTION_12_0();
        }
        v64 += 2;
        --v62;
      }
      while (v62);
      OUTLINED_FUNCTION_6_0();
      OUTLINED_FUNCTION_6_0();
      v32 = v86;
    }
    else
    {
      OUTLINED_FUNCTION_6_0();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1EF7860A0 != -1)
      swift_once();
    v28 = sub_1C289C414();
    __swift_project_value_buffer(v28, (uint64_t)qword_1EF7866E8);
    v29 = sub_1C289C3FC();
    v30 = sub_1C289C504();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1C281A000, v29, v30, "Could not extract utterance from tokenChain, unable to generate matches", v31, 2u);
      MEMORY[0x1C3BC62B8](v31, -1, -1);
    }

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_1C281F954(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C281F998(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_1C281F9D8()
{
  unint64_t result;

  result = qword_1EF7860B8;
  if (!qword_1EF7860B8)
  {
    result = MEMORY[0x1C3BC6258](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF7860B8);
  }
  return result;
}

uint64_t sub_1C281FA14(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C281FA54(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  uint64_t v0;

  return v0 - 272;
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(v1 - 1);
  v4 = *v1;
  v5 = *(_QWORD *)(v2 - 296);
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 304);
  *(_QWORD *)(v2 - 168) = v5;
  *(_QWORD *)(v2 - 272) = v3;
  *(_QWORD *)(v2 - 264) = v4;
  return v0;
}

id OUTLINED_FUNCTION_2_0()
{
  uint64_t v0;

  return *(id *)(v0 - 312);
}

void OUTLINED_FUNCTION_3_0()
{
  sub_1C2824B2C();
}

void OUTLINED_FUNCTION_4_0()
{
  sub_1C2824B2C();
}

uint64_t OUTLINED_FUNCTION_5()
{
  uint64_t v0;

  return sub_1C281FA14(v0);
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_7_0()
{
  sub_1C2824B2C();
}

void OUTLINED_FUNCTION_8_0()
{
  sub_1C2824B2C();
}

void OUTLINED_FUNCTION_9_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)(a4 + 16) = v8;
  v10 = (_QWORD *)(a4 + 40 * v6);
  v10[4] = v7;
  v10[5] = v9;
  v10[6] = v5;
  v10[7] = v4;
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return sub_1C289C0D8();
}

uint64_t OUTLINED_FUNCTION_11_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 320) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 256) = v2;
  return v1;
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  uint64_t v0;

  return sub_1C281FA14(v0);
}

void OUTLINED_FUNCTION_17_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 - 320) + 16) = v0;
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return swift_retain();
}

uint64_t sub_1C281FC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1C289C660();
    sub_1C289C450();
    v6 = sub_1C289C66C();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1C289C648() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1C289C648() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1C281FD40(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = 0;
    v6 = result + 40;
    v7 = MEMORY[0x1E0DEE9D8];
    v16 = result + 40;
    do
    {
      v8 = (uint64_t *)(v6 + 16 * v5);
      v9 = v5;
      while (1)
      {
        if (v9 >= *(_QWORD *)(v3 + 16))
        {
          __break(1u);
          return result;
        }
        v11 = *(v8 - 1);
        v10 = *v8;
        v5 = v9 + 1;
        swift_bridgeObjectRetain();
        if ((sub_1C281FC0C(v11, v10, a2) & 1) != 0)
          break;
        result = swift_bridgeObjectRelease();
        v8 += 2;
        ++v9;
        if (v4 == v5)
          goto LABEL_15;
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = (uint64_t)sub_1C2825F34(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      v14 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        result = (uint64_t)sub_1C2825F34((char *)(v12 > 1), v13 + 1, 1);
        v14 = v13 + 1;
      }
      *(_QWORD *)(v7 + 16) = v14;
      v15 = v7 + 16 * v13;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v10;
      v6 = v16;
    }
    while (v4 - 1 != v9);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

void sub_1C281FEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786118);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_3();
  v4 = v3 - v2;
  v5 = sub_1C289C288();
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_3();
  v9 = v8 - v7;
  v10 = sub_1C289C2E8();
  v50 = *(_QWORD *)(v10 - 8);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_3();
  v14 = v13 - v12;
  v15 = *(_BYTE *)(v0 + 32);
  if (sub_1C2822064(v15) == 0x6156797469746E65 && v16 == 0xEB0000000065756CLL)
    goto LABEL_8;
  OUTLINED_FUNCTION_10_1();
  v18 = OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_14_1();
  if ((v18 & 1) != 0)
  {
LABEL_9:
    swift_retain();
LABEL_10:
    v20 = qword_1EF7860A0;
    swift_retain();
    if (v20 != -1)
      swift_once();
    v21 = sub_1C289C414();
    __swift_project_value_buffer(v21, (uint64_t)qword_1EF7866E8);
    swift_retain_n();
    v22 = sub_1C289C3FC();
    v23 = sub_1C289C4F8();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      v51 = OUTLINED_FUNCTION_4_1();
      *(_DWORD *)v24 = 136315138;
      v25 = sub_1C289C180();
      sub_1C2825794(v25, v26, &v51);
      sub_1C289C54C();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C281A000, v22, v23, "Generating span for graph: %s", v24, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }

    swift_release_n();
    goto LABEL_15;
  }
  if (sub_1C2822064(v15) == 0xD00000000000001ALL && v19 == 0x80000001C289EA00)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v27 = OUTLINED_FUNCTION_6_1();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
    goto LABEL_9;
  v28 = sub_1C28205E4((uint64_t)&unk_1E7C66030);
  v29 = *(_QWORD *)(sub_1C289C33C() + 16);
  if (v29)
  {
    v45 = v4;
    OUTLINED_FUNCTION_15_1();
    v32 = v30 + v31;
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v47 = *(_QWORD *)(v33 + 72);
    v34 = MEMORY[0x1E0DEE9D8];
    do
    {
      v46(v14, v32, v10);
      sub_1C289C2DC();
      v35 = sub_1C289C27C();
      v37 = v36;
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v9, v49);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v14, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_3_1();
        sub_1C2824A70();
        v34 = v40;
      }
      v38 = *(_QWORD *)(v34 + 16);
      if (v38 >= *(_QWORD *)(v34 + 24) >> 1)
      {
        sub_1C2824A70();
        v34 = v41;
      }
      *(_QWORD *)(v34 + 16) = v38 + 1;
      v39 = v34 + 16 * v38;
      *(_QWORD *)(v39 + 32) = v35;
      *(_QWORD *)(v39 + 40) = v37;
      v32 += v47;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    v4 = v45;
  }
  else
  {
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x1E0DEE9D8];
  }
  v42 = *(_QWORD *)(sub_1C281FD40(v34, v28) + 16);
  swift_bridgeObjectRelease();
  if (v42)
  {
    sub_1C2821AC0();
    sub_1C289C210();
    swift_allocObject();
    v43 = sub_1C289C204();
    sub_1C289C1F8();
    v44 = sub_1C289C1B0();
    __swift_storeEnumTagSinglePayload(v4, 1, 1, v44);
    MEMORY[0x1C3BC4E60](v43, v4);
    swift_release();
    sub_1C282186C(v4, &qword_1EF786118);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
LABEL_15:
  OUTLINED_FUNCTION_1();
}

void sub_1C2820350(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1C28203A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C282042C + 4 * byte_1C289DCFD[a2]))(0x6156797469746E65);
}

void sub_1C282042C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_10_1();
  if (v1 != v2 || v0 != 0xEB0000000065756CLL)
    OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_12_1();
}

void sub_1C28204C4(unsigned __int8 a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  v2 = 0xED0000797469746ELL;
  v3 = 0x45746E65696C6173;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x69446D6574737973;
    else
      v5 = 0x6E776F6E6B6E75;
    if (v4 == 1)
      v6 = 0xEF746341676F6C61;
    else
      v6 = 0xE700000000000000;
  }
  else
  {
    v5 = 0x45746E65696C6173;
    v6 = 0xED0000797469746ELL;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x69446D6574737973;
    else
      v3 = 0x6E776F6E6B6E75;
    if (a2 == 1)
      v2 = 0xEF746341676F6C61;
    else
      v2 = 0xE700000000000000;
  }
  if (v5 != v3 || v6 != v2)
    OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_12_1();
}

uint64_t sub_1C28205E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_1C289C4E0();
  v10 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1C2820D78(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void sub_1C2820694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_3();
  v4 = v3 - v2;
  v5 = sub_1C289C174();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_3();
  v43 = v7 - v6;
  v8 = sub_1C289C12C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_5_0();
  sub_1C281FEA4();
  if (!v10)
    goto LABEL_18;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9FA00]), sel_init);
  v12 = v11;
  if (!v11)
  {
    swift_release();
LABEL_18:
    OUTLINED_FUNCTION_1();
    return;
  }
  objc_msgSend(v11, sel_setInternalSpanData_, 0);
  v13 = sub_1C2821BB0();
  if ((v13 & 0x8000000000000000) == 0 && !HIDWORD(v13))
  {
    v15 = v14;
    objc_msgSend(v12, sel_setStartTokenIndex_, v13);
    if ((v15 & 0x8000000000000000) == 0)
    {
      v42 = v5;
      if (!HIDWORD(v15))
      {
        objc_msgSend(v12, sel_setEndTokenIndex_, v15);
        sub_1C2821AC0();
        OUTLINED_FUNCTION_11_1(v16, v17, v18, (SEL *)&selRef_setInput_);
        sub_1C2821AC0();
        OUTLINED_FUNCTION_11_1(v19, v20, v21, (SEL *)&selRef_setSemanticValue_);
        objc_msgSend(v12, sel_addMatcherNames_, 4);
        v22 = sub_1C2820C64();
        OUTLINED_FUNCTION_11_1(v22, v23, v24, (SEL *)&selRef_setLabel_);
        OUTLINED_FUNCTION_9_1(v0);
        sub_1C281DF74();
        v26 = v25;
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0, v8);
        OUTLINED_FUNCTION_9_1(v4);
        __swift_storeEnumTagSinglePayload(v4, 0, 1, v8);
        sub_1C289C150();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_3_1();
          sub_1C2824934();
          v26 = v40;
        }
        v27 = *(_QWORD *)(v26 + 16);
        if (v27 >= *(_QWORD *)(v26 + 24) >> 1)
        {
          sub_1C2824934();
          v26 = v41;
        }
        *(_QWORD *)(v26 + 16) = v27 + 1;
        OUTLINED_FUNCTION_15_1();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))(v26 + v28 + *(_QWORD *)(v29 + 72) * v27, v43, v42);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786100);
        sub_1C289C1D4();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C289DCE0;
        sub_1C2821950();
        sub_1C2822930(v30, v31);
        sub_1C281E688();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32 = sub_1C281E648();
        if (v32)
        {
          v33 = (void *)v32;
          objc_msgSend(v12, sel_setUsoGraph_, v32);
          if (qword_1EF7860A0 != -1)
            swift_once();
          v34 = sub_1C289C414();
          __swift_project_value_buffer(v34, (uint64_t)qword_1EF7866E8);
          swift_retain_n();
          v35 = sub_1C289C3FC();
          v36 = sub_1C289C4F8();
          if (os_log_type_enabled(v35, v36))
          {
            v37 = (uint8_t *)OUTLINED_FUNCTION_4_1();
            v44 = OUTLINED_FUNCTION_4_1();
            *(_DWORD *)v37 = 136315138;
            v38 = sub_1C289C180();
            sub_1C2825794(v38, v39, &v44);
            sub_1C289C54C();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C281A000, v35, v36, "Returning span with identifiers: %s", v37, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_1_1();
          }

          swift_release_n();
        }
        else
        {

          swift_release();
        }
        goto LABEL_18;
      }
    }
  }
  OUTLINED_FUNCTION_0();
  sub_1C289C60C();
  __break(1u);
}

uint64_t sub_1C2820C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786108);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_3();
  v4 = v3 - v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786110);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_5_0();
  v7 = sub_1C289C348();
  sub_1C28274BC(v7, v4);
  OUTLINED_FUNCTION_21();
  if (__swift_getEnumTagSinglePayload(v4, 1, v5) == 1)
  {
    sub_1C282186C(v4, &qword_1EF786108);
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v0, v4, v5);
  v8 = sub_1C289C0FC();
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  if (!v10)
    return 0;
  return v8;
}

uint64_t sub_1C2820D78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1C289C660();
  swift_bridgeObjectRetain();
  sub_1C289C450();
  v8 = sub_1C289C66C();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1C289C648() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1C289C648() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1C28211FC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1C2820F24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786120);
  v3 = sub_1C289C5AC();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      sub_1C289C660();
      sub_1C289C450();
      result = sub_1C289C66C();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                sub_1C2821394(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1C28211FC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1C2820F24();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1C28213B0();
      goto LABEL_22;
    }
    sub_1C2821560();
  }
  v11 = *v4;
  sub_1C289C660();
  sub_1C289C450();
  result = sub_1C289C66C();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1C289C648(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1C289C654();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1C289C648();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1C2821394(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void *sub_1C28213B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786120);
  v2 = *v0;
  v3 = sub_1C289C5A0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C2821560()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786120);
  v3 = sub_1C289C5AC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_1C289C660();
    swift_bridgeObjectRetain();
    sub_1C289C450();
    result = sub_1C289C66C();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1C2821808(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6;

  v6 = (id)sub_1C289C42C();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);

}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1C282186C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void OUTLINED_FUNCTION_1_1()
{
  JUMPOUT(0x1C3BC62B8);
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return sub_1C289C648();
}

uint64_t OUTLINED_FUNCTION_9_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

void OUTLINED_FUNCTION_11_1(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v4;

  sub_1C2821808(a1, a2, v4, a4);
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return swift_bridgeObjectRelease();
}

void sub_1C2821950()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;

  sub_1C28263B4(*(void **)(v1 + 8));
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1C289C45C();
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_14_1();
    swift_bridgeObjectRetain();
    sub_1C289C45C();
    OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_14_1();
  }
  else
  {
    if (qword_1EF7860A0 != -1)
      swift_once();
    v3 = OUTLINED_FUNCTION_8_1();
    OUTLINED_FUNCTION_7_2(v3, (uint64_t)qword_1EF7866E8);
    v4 = OUTLINED_FUNCTION_14_2();
    if (OUTLINED_FUNCTION_2_1(v4))
    {
      v5 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_12_2(v5);
      OUTLINED_FUNCTION_0_1(&dword_1C281A000, v6, v7, "Could not extract utterance from tokenChain, unable to generate UTF16 indices");
      OUTLINED_FUNCTION_1_2();
    }

  }
  OUTLINED_FUNCTION_9_2();
}

void sub_1C2821AC0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_1C28263B4(*(void **)(v1 + 8));
  if (v2)
  {
    v3 = sub_1C289C480();
    v5 = v4;
    v7 = v6;
    v9 = v8;
    OUTLINED_FUNCTION_14_1();
    MEMORY[0x1C3BC5100](v3, v5, v7, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1EF7860A0 != -1)
      swift_once();
    v10 = OUTLINED_FUNCTION_8_1();
    OUTLINED_FUNCTION_7_2(v10, (uint64_t)qword_1EF7866E8);
    v11 = OUTLINED_FUNCTION_14_2();
    if (OUTLINED_FUNCTION_2_1(v11))
    {
      v12 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_12_2(v12);
      OUTLINED_FUNCTION_0_1(&dword_1C281A000, v13, v14, "Could not extract utterance from tokenChain, unable to generate matches");
      OUTLINED_FUNCTION_1_2();
    }

  }
  OUTLINED_FUNCTION_9_2();
}

uint64_t sub_1C2821BB0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;

  sub_1C2821950();
  v2 = v1;
  v3 = objc_msgSend(*(id *)(v0 + 8), sel_tokens);
  if (v3)
  {
    v4 = v3;
    sub_1C28221AC();
    sub_1C289C4A4();

  }
  if (qword_1EF7860A0 != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_7_2(v5, (uint64_t)qword_1EF7866E8);
  v6 = OUTLINED_FUNCTION_14_2();
  if (OUTLINED_FUNCTION_2_1(v6))
  {
    v7 = (_WORD *)OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_12_2(v7);
    OUTLINED_FUNCTION_0_1(&dword_1C281A000, v8, v9, "Could not extract tokens from tokenChain, unable to generate token indices");
    OUTLINED_FUNCTION_1_2();
  }

  return 0;
}

uint64_t sub_1C2822020()
{
  unint64_t v0;

  v0 = sub_1C289C630();
  OUTLINED_FUNCTION_14_1();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1C2822064(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C282209C + 4 * byte_1C289DD04[a1]))(0xD00000000000001ALL, 0x80000001C289EA00);
}

uint64_t sub_1C282209C()
{
  return 0x6156797469746E65;
}

uint64_t sub_1C28220BC()
{
  return 0x646E756F72727573;
}

uint64_t sub_1C28220E0(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_1C28220F8()
{
  return 0x6E776F6E6B6E75;
}

void sub_1C2822110(char *a1)
{
  sub_1C2820350(*a1);
}

void sub_1C282211C()
{
  unsigned __int8 *v0;

  sub_1C28275AC(*v0);
}

void sub_1C2822124(uint64_t a1)
{
  char *v1;

  sub_1C28275F8(a1, *v1);
}

void sub_1C282212C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1C2827808(a1, *v1);
}

uint64_t sub_1C2822134@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1C2822020();
  *a1 = result;
  return result;
}

uint64_t sub_1C2822160@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1C2822064(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C2822188(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1C28221AC()
{
  unint64_t result;

  result = qword_1EF786128;
  if (!qword_1EF786128)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF786128);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MatchedEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for MatchedEntity(uint64_t a1)
{
  swift_release();

}

uint64_t initializeWithCopy for MatchedEntity(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_retain();
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for MatchedEntity(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MatchedEntity(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedEntity(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 34))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchedEntity()
{
  return &type metadata for MatchedEntity;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MatchSource(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C28224D0 + 4 * byte_1C289DD0E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C2822504 + 4 * byte_1C289DD09[v4]))();
}

uint64_t sub_1C2822504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C282250C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2822514);
  return result;
}

uint64_t sub_1C2822520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2822528);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C282252C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2822534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2822540(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1C282254C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MatchSource()
{
  return &type metadata for MatchSource;
}

unint64_t sub_1C2822568()
{
  unint64_t result;

  result = qword_1EF786130;
  if (!qword_1EF786130)
  {
    result = MEMORY[0x1C3BC6258](&unk_1C289DDAC, &type metadata for MatchSource);
    atomic_store(result, (unint64_t *)&qword_1EF786130);
  }
  return result;
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_1_2()
{
  JUMPOUT(0x1C3BC62B8);
}

BOOL OUTLINED_FUNCTION_2_1(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return swift_slowAlloc();
}

id OUTLINED_FUNCTION_5_1@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t OUTLINED_FUNCTION_7_2(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return sub_1C289C3FC();
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return sub_1C289C414();
}

void OUTLINED_FUNCTION_10_2()
{
  JUMPOUT(0x1C3BC5280);
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return swift_retain();
}

_WORD *OUTLINED_FUNCTION_12_2(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return sub_1C289C474();
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  return sub_1C289C504();
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2822658()
{
  uint64_t v0;

  v0 = sub_1C289C414();
  __swift_allocate_value_buffer(v0, qword_1EF7866E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF7866E8);
  return sub_1C289C408();
}

uint64_t sub_1C28226D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_1C289C414();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1C289C3B4();
  __swift_allocate_value_buffer(v4, qword_1EF7866D0);
  __swift_project_value_buffer(v4, (uint64_t)qword_1EF7866D0);
  if (qword_1EF7860A0 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)qword_1EF7866E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_1C289C39C();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

Swift::String __swiftcall SampleClass.getHelloWorld()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x6F57206F6C6C6548;
  v1 = (void *)0xEC00000021646C72;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

id SampleClass.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SampleClass.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SampleClass();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SampleClass()
{
  return objc_opt_self();
}

id SampleClass.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SampleClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C2822930(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = sub_1C289C198();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1) || (a2 & 0x8000000000000000) != 0 || HIDWORD(a2))
  {
    OUTLINED_FUNCTION_0();
    result = sub_1C289C60C();
    __break(1u);
  }
  else
  {
    sub_1C289C18C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786160);
    v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C289DCE0;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v9 + v8, v7, v4);
    sub_1C289C1C8();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

void sub_1C2822ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861B0);
  v3 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_13();
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1C2825EFC(0, v8, 0);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    v11 = v15;
    do
    {
      sub_1C282653C(v9, (uint64_t)v5);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C2825EFC(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v15;
      }
      v13 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1C2825EFC(v12 > 1, v13 + 1, 1);
        v11 = v15;
      }
      *(_QWORD *)(v11 + 16) = v13 + 1;
      sub_1C281F954(v1, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v13, &qword_1EF7860C8);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
  OUTLINED_FUNCTION_1();
}

char *sub_1C2822C50(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t i;
  id v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1C289C618();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return (char *)v3;
  v10 = MEMORY[0x1E0DEE9D8];
  result = sub_1C2825F50(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BC5280](i, a1);
      else
        v6 = *(id *)(a1 + 8 * i + 32);
      sub_1C28265C4(0, &qword_1EF786190);
      swift_dynamicCast();
      v3 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C2825F50(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v10;
      }
      v8 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1C2825F50((char *)(v7 > 1), v8 + 1, 1);
        v3 = v10;
      }
      *(_QWORD *)(v3 + 16) = v8 + 1;
      sub_1C282652C(&v9, (_OWORD *)(v3 + 32 * v8 + 32));
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C2822DF0(void *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_1C289C0B4();
  v12 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0DEE9D8];
  v8 = a1;
  sub_1C289C528();

  sub_1C2826584();
  OUTLINED_FUNCTION_16_1();
  while (v17)
  {
    sub_1C282652C(&v16, v15);
    sub_1C28264F0((uint64_t)v15, (uint64_t)v13);
    sub_1C28265C4(0, a2);
    if ((swift_dynamicCast() & 1) == 0)
      v14 = 0;
    v9 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    if (v14)
    {
      MEMORY[0x1C3BC5148](v9);
      if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1C289C4C8();
      sub_1C289C4D4();
      sub_1C289C4BC();
    }
    OUTLINED_FUNCTION_16_1();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v4);
  return v18;
}

void ContextualSpanMatcher.getSpans(request:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_signpost_type_t v68;
  uint8_t *v69;
  os_signpost_id_t v70;
  unint64_t v71;
  NSObject *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void **p_ivar_lyt;
  unint64_t v79;
  id v80;
  void *v81;
  BOOL v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_log_type_t v103;
  _WORD *v104;
  uint64_t v105;
  uint64_t v106;
  os_signpost_id_t v107;
  uint64_t v108;
  NSObject *v109;
  char *v110;
  int v111;
  char v112;
  uint8_t *v113;
  os_signpost_id_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  NSObject *v124;
  uint8_t *v125;
  os_signpost_id_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  __int16 v130;
  id v131;
  uint64_t v132;
  char *v133;
  os_signpost_type_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  const char *v138;
  uint8_t *v139;
  os_signpost_id_t v140;
  NSObject *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  os_signpost_id_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, NSObject *);
  unint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  id v157;
  os_log_type_t v158;
  _BOOL4 v159;
  void *v160;
  _WORD *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  id v172;
  Class isa;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  void (*v184)(uint64_t, char *, NSObject *);
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *v189;
  uint64_t v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, NSObject *);
  uint64_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  uint64_t v203;
  uint64_t v204[6];
  unint64_t v205;
  uint64_t v206;
  uint64_t v207[5];
  unsigned __int8 v208;
  __int128 v209;
  _OWORD v210[2];
  __int128 v211;
  _OWORD v212[2];
  char v213[8];
  uint64_t v214;
  char v215[8];
  _QWORD v216[3];
  __int128 v217;
  __int16 v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  char v223;

  v3 = sub_1C289C3C0();
  v176 = *(_QWORD *)(v3 - 8);
  v177 = v3;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_42();
  v166 = v5;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_28();
  v179 = v7;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v8);
  v167 = (char *)&v165 - v9;
  v10 = sub_1C289C390();
  isa = v10[-1].isa;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_42();
  v169 = v12;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_28();
  v182 = v14;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_28();
  v183 = v16;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_28();
  v171 = v18;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_28();
  v170 = v20;
  OUTLINED_FUNCTION_12_3();
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (uint64_t)&v165 - v23;
  MEMORY[0x1E0C80A78](v22);
  v180 = (char *)&v165 - v25;
  v26 = sub_1C289C414();
  v201 = *(_QWORD *)(v26 - 8);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78](v27);
  OUTLINED_FUNCTION_13();
  v202 = a1;
  v28 = sub_1C2826414(a1);
  if (v29 >> 60 != 15)
  {
    v30 = v28;
    v31 = v29;
    v200 = v1;
    v32 = sub_1C289C0C0();
    v34 = v33;
    sub_1C2826474(v30, v31);
    if (qword_1EF7860A0 != -1)
      goto LABEL_114;
    while (1)
    {
      v35 = __swift_project_value_buffer(v26, (uint64_t)qword_1EF7866E8);
      swift_bridgeObjectRetain_n();
      v178 = v35;
      sub_1C289C3FC();
      v36 = OUTLINED_FUNCTION_18_1();
      v37 = os_log_type_enabled(v35, v36);
      v191 = v10;
      v188 = v24;
      if (v37)
      {
        v38 = (uint8_t *)OUTLINED_FUNCTION_4_1();
        *(_QWORD *)&v219 = OUTLINED_FUNCTION_4_1();
        *(_DWORD *)v38 = 136315138;
        OUTLINED_FUNCTION_33();
        v39 = sub_1C2825794(v32, (unint64_t)v34, (uint64_t *)&v219);
        OUTLINED_FUNCTION_35(v39);
        sub_1C289C54C();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_50(&dword_1C281A000, v35, v36, "Base64 request: \n %s", v38);
        OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_1_1();
      }

      OUTLINED_FUNCTION_41();
      v40 = OUTLINED_FUNCTION_15_3();
      v41 = sub_1C289C4F8();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)OUTLINED_FUNCTION_4_2();
        *(_WORD *)v42 = 0;
        _os_log_impl(&dword_1C281A000, v40, v41, "Base64 request by line", v42, 2u);
        OUTLINED_FUNCTION_1_1();
      }

      *(_QWORD *)&v219 = v32;
      *((_QWORD *)&v219 + 1) = v34;
      sub_1C281F9D8();
      sub_1C289C564();
      swift_bridgeObjectRelease();
      v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9F9B8]), sel_init);
      if (!v43)
        break;
      v172 = v43;
      v44 = v202;
      v45 = objc_msgSend(v202, sel_tokenChain);
      if (!v45)
      {
        OUTLINED_FUNCTION_15_3();
        v60 = OUTLINED_FUNCTION_18_1();
        if (OUTLINED_FUNCTION_4_3(v60))
        {
          v61 = (_WORD *)OUTLINED_FUNCTION_4_2();
          OUTLINED_FUNCTION_40(v61);
          OUTLINED_FUNCTION_3_3(&dword_1C281A000, v62, v63, "Could not extract tokenChain from request, returning nil");
          OUTLINED_FUNCTION_1_1();
        }

LABEL_109:
        OUTLINED_FUNCTION_1();
        return;
      }
      v46 = v45;
      v48 = v200;
      v47 = v201;
      (*(void (**)(uint64_t, NSObject *, uint64_t))(v201 + 16))(v200, v178, v26);
      v24 = v46;
      v49 = sub_1C289C3FC();
      v50 = sub_1C289C4F8();
      v51 = os_log_type_enabled(v49, v50);
      v197 = (void *)v24;
      if (v51)
      {
        v52 = (uint8_t *)OUTLINED_FUNCTION_4_1();
        *(_QWORD *)&v219 = OUTLINED_FUNCTION_4_1();
        *(_DWORD *)v52 = 136315138;
        v53 = sub_1C28263B4((void *)v24);
        if (v54)
        {
          v55 = sub_1C2825794(v53, v54, (uint64_t *)&v219);
          OUTLINED_FUNCTION_35(v55);
          sub_1C289C54C();

          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_50(&dword_1C281A000, v49, v50, "Utterance: %s", v52);
          OUTLINED_FUNCTION_48();
          OUTLINED_FUNCTION_1_1();
        }
        goto LABEL_119;
      }

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v26);
      sub_1C289C1BC();
      sub_1C289C1EC();
      OUTLINED_FUNCTION_20_0();
      v32 = sub_1C289C1E0();
      v64 = v180;
      if (qword_1EF7860A8 != -1)
        swift_once();
      v65 = sub_1C289C3B4();
      v66 = __swift_project_value_buffer(v65, (uint64_t)qword_1EF7866D0);
      sub_1C289C3A8();
      sub_1C289C378();
      v190 = v66;
      v67 = sub_1C289C3A8();
      v68 = sub_1C289C51C();
      if ((sub_1C289C534() & 1) != 0)
      {
        v69 = (uint8_t *)OUTLINED_FUNCTION_4_2();
        *(_WORD *)v69 = 0;
        v70 = sub_1C289C384();
        OUTLINED_FUNCTION_19_1(&dword_1C281A000, v67, v68, v70, "CSMParseE2E", "", v69);
        OUTLINED_FUNCTION_1_1();
      }

      v184 = (void (*)(uint64_t, char *, NSObject *))*((_QWORD *)isa + 2);
      v184(v188, v64, v10);
      v181 = sub_1C289C3E4();
      swift_allocObject();
      v168 = sub_1C289C3D8();
      v71 = MEMORY[0x1E0DEE9D8];
      v206 = MEMORY[0x1E0DEE9D8];
      v72 = objc_msgSend(v44, sel_nlContext);
      v26 = (uint64_t)v64;
      if (v72)
      {
        v10 = v72;
        v73 = -[NSObject systemDialogActs](v72, sel_systemDialogActs);

        v34 = v197;
        if (v73)
        {
          v10 = 0;
          v74 = sub_1C2822DF0(v73, &qword_1EF7861C8);
          v189 = 0;

          v75 = v74;
        }
        else
        {
          v189 = 0;
          v75 = MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        v189 = 0;
        v34 = v197;
        v75 = v71;
      }
      v187 = v75;
      if (v75 >> 62)
      {
        swift_bridgeObjectRetain();
        v76 = OUTLINED_FUNCTION_51();
        swift_bridgeObjectRelease();
        v75 = v187;
      }
      else
      {
        v76 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v201 = v32;
      if (v76)
      {
        v77 = 0;
        v186 = v75 & 0xC000000000000001;
        v174 = v75 + 32;
        v175 = v75 & 0xFFFFFFFFFFFFFF8;
        v193 = (uint64_t)v212 + 8;
        v194 = (void (*)(uint64_t, NSObject *))((char *)&v211 + 8);
        p_ivar_lyt = &ContextualSpanMatcher__metaData.ivar_lyt;
        v200 = MEMORY[0x1E0DEE9D8];
        v185 = v76;
        while (1)
        {
          if (v186)
          {
            v79 = v77;
            v80 = (id)MEMORY[0x1C3BC5280](v77, v75);
          }
          else
          {
            if (v77 >= *(_QWORD *)(v175 + 16))
              goto LABEL_113;
            v79 = v77;
            v80 = *(id *)(v174 + 8 * v77);
          }
          v81 = v80;
          v82 = __OFADD__(v79, 1);
          v76 = v79 + 1;
          if (v82)
          {
            __break(1u);
            goto LABEL_111;
          }
          v192 = v76;
          v83 = objc_msgSend(v80, sel_gaveOptions);
          if (v83)
          {
            v84 = v83;
            v76 = (uint64_t)objc_msgSend(v83, sel_choices);

            if (!v76)
            {
              __break(1u);
              goto LABEL_118;
            }
            v10 = v189;
            v24 = sub_1C2822DF0((void *)v76, &qword_1EF7861C0);
            v189 = v10;

            if ((unint64_t)v24 >> 62)
            {
              if (v24 < 0)
                v76 = v24;
              else
                v76 = v24 & 0xFFFFFFFFFFFFFF8;
              OUTLINED_FUNCTION_49();
              v85 = OUTLINED_FUNCTION_51();
              OUTLINED_FUNCTION_12_0();
              if (v85)
              {
LABEL_40:
                if (v85 < 1)
                  goto LABEL_112;
                v86 = 0;
                v202 = (id)(v24 & 0xC000000000000001);
                v195 = v24;
                v196 = v81;
                v199 = v85;
                do
                {
                  if (v202)
                    v87 = (id)MEMORY[0x1C3BC5280](v86, v24);
                  else
                    v87 = *(id *)(v24 + 8 * v86 + 32);
                  v10 = v87;
                  swift_retain();
                  v88 = objc_msgSend(v10, (SEL)p_ivar_lyt[368]);
                  if (v88)
                  {
                    v76 = (uint64_t)v88;
                    v89 = objc_msgSend(v88, sel_task);

                    if (v89)
                    {
                      sub_1C2827C64(v89, v32, MEMORY[0x1E0DEE9D8], 1, 0, 1, (uint64_t)&unk_1E7C660F8, v207);
                      v90 = v207[0];
                      v91 = v207[1];
                      v93 = v207[2];
                      v92 = v207[3];
                      v94 = v207[4];
                      v76 = v208;

                      sub_1C281F954((uint64_t)v207, (uint64_t)&v209, &qword_1EF786170);
                      if ((_QWORD)v209)
                      {
                        LODWORD(v198) = v76;
                        v211 = v209;
                        v212[0] = v210[0];
                        *(_OWORD *)((char *)v212 + 9) = *(_OWORD *)((char *)v210 + 9);
                        OUTLINED_FUNCTION_38();
                        OUTLINED_FUNCTION_33();
                        swift_retain();
                        swift_bridgeObjectRetain();
                        OUTLINED_FUNCTION_49();
                        swift_release();
                        sub_1C281F954((uint64_t)v194, (uint64_t)v213, &qword_1EF7860F0);
                        sub_1C281FA54((uint64_t)v213);
                        v214 = *(_QWORD *)&v212[0];
                        sub_1C281FA54((uint64_t)&v214);
                        sub_1C281F954(v193, (uint64_t)v215, &qword_1EF7860F8);
                        sub_1C281FA54((uint64_t)v215);
                        v216[0] = *(_QWORD *)&v212[1];
                        sub_1C281FA54((uint64_t)v216);
                        swift_retain();
                        swift_bridgeObjectRetain();
                        OUTLINED_FUNCTION_49();
                        OUTLINED_FUNCTION_38();
                        OUTLINED_FUNCTION_33();
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                          v95 = (char *)v200;
                        else
                          v95 = sub_1C2824BD0(0, *(_QWORD *)(v200 + 16) + 1, 1, v200);
                        v97 = *((_QWORD *)v95 + 2);
                        v96 = *((_QWORD *)v95 + 3);
                        if (v97 >= v96 >> 1)
                          v95 = sub_1C2824BD0((char *)(v96 > 1), v97 + 1, 1, (uint64_t)v95);
                        *((_QWORD *)v95 + 2) = v97 + 1;
                        v98 = &v95[48 * v97];
                        *((_QWORD *)v98 + 4) = v90;
                        *((_QWORD *)v98 + 5) = v91;
                        *((_QWORD *)v98 + 6) = v93;
                        *((_QWORD *)v98 + 7) = v92;
                        *((_QWORD *)v98 + 8) = v94;
                        v98[72] = v198;
                        v76 = (uint64_t)v95;
                        swift_bridgeObjectRelease();
                        OUTLINED_FUNCTION_12_0();
                        swift_bridgeObjectRelease();
                        swift_release();

                        v200 = v76;
                        v206 = v76;
                        swift_bridgeObjectRelease();
                        v34 = v197;
                        v32 = v201;
                      }
                      else
                      {

                        v34 = v197;
                      }
                      p_ivar_lyt = (void **)(&ContextualSpanMatcher__metaData + 16);
                      v24 = v195;
                      v81 = v196;
                    }
                    else
                    {

                      OUTLINED_FUNCTION_36();
                    }
                    v85 = v199;
                  }
                  else
                  {

                    OUTLINED_FUNCTION_36();
                  }
                  ++v86;
                }
                while (v85 != v86);

                OUTLINED_FUNCTION_12_0();
                v26 = (uint64_t)v180;
                goto LABEL_67;
              }
            }
            else
            {
              v85 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v85)
                goto LABEL_40;
            }

            OUTLINED_FUNCTION_12_0();
          }
          else
          {

          }
LABEL_67:
          v77 = v192;
          v75 = v187;
          if (v192 == v185)
            goto LABEL_70;
        }
      }
      v200 = MEMORY[0x1E0DEE9D8];
LABEL_70:
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v200 + 16))
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_15_3();
        v103 = OUTLINED_FUNCTION_18_1();
        if (OUTLINED_FUNCTION_4_3(v103))
        {
          v104 = (_WORD *)OUTLINED_FUNCTION_4_2();
          OUTLINED_FUNCTION_40(v104);
          OUTLINED_FUNCTION_3_3(&dword_1C281A000, v105, v106, "Could not obtain Entities from request, returning nil");
          OUTLINED_FUNCTION_1_1();
        }
        swift_release();

        OUTLINED_FUNCTION_36();
        (*((void (**)(uint64_t, NSObject *))isa + 1))(v26, v191);
        goto LABEL_109;
      }
      v99 = (void *)OUTLINED_FUNCTION_23();
      v100 = v170;
      sub_1C289C3CC();
      sub_1C289C510();
      if ((OUTLINED_FUNCTION_22_0() & 1) != 0)
      {
        swift_retain();
        v101 = (uint64_t)v167;
        sub_1C289C3F0();
        swift_release();
        v102 = v176;
        if (OUTLINED_FUNCTION_46(v101, *(uint64_t (**)(uint64_t, uint64_t))(v176 + 88)) != *MEMORY[0x1E0DF2190])
          OUTLINED_FUNCTION_46(v101, *(uint64_t (**)(uint64_t, uint64_t))(v102 + 8));
        *(_WORD *)OUTLINED_FUNCTION_4_2() = 0;
        v107 = sub_1C289C384();
        OUTLINED_FUNCTION_17_1(&dword_1C281A000, v108, (os_signpost_type_t)v26, v107, "CSMParseE2E");
        OUTLINED_FUNCTION_1_1();
      }

      v24 = *((_QWORD *)isa + 1);
      v109 = v191;
      ((void (*)(uint64_t, NSObject *))v24)(v100, v191);
      OUTLINED_FUNCTION_23();
      v110 = v171;
      sub_1C289C378();
      v26 = v206;
      OUTLINED_FUNCTION_43();
      v10 = sub_1C289C3A8();
      v111 = sub_1C289C51C();
      v112 = sub_1C289C534();
      v194 = (void (*)(uint64_t, NSObject *))v24;
      if ((v112 & 1) != 0)
      {
        LODWORD(v202) = v111;
        v184(v188, v110, v109);
        v113 = (uint8_t *)OUTLINED_FUNCTION_4_1();
        *(_DWORD *)v113 = 134217984;
        *(_QWORD *)&v219 = *(_QWORD *)(v26 + 16);
        sub_1C289C54C();
        OUTLINED_FUNCTION_15_2();
        v114 = sub_1C289C384();
        _os_signpost_emit_with_name_impl(&dword_1C281A000, v10, (os_signpost_type_t)v202, v114, "CSMMatchE2E", "Entity count: %ld", v113, 0xCu);
        OUTLINED_FUNCTION_1_1();
      }
      OUTLINED_FUNCTION_15_2();

      v184(v188, v110, v109);
      OUTLINED_FUNCTION_20_0();
      v115 = OUTLINED_FUNCTION_24();
      v205 = MEMORY[0x1E0DEE9D8];
      OUTLINED_FUNCTION_34();
      v116 = v206;
      v32 = v201;
      v193 = *(_QWORD *)(v206 + 16);
      if (!v193)
      {
LABEL_98:
        swift_bridgeObjectRelease();
        v142 = (void *)OUTLINED_FUNCTION_23();
        v143 = v169;
        sub_1C289C3CC();
        sub_1C289C510();
        if ((OUTLINED_FUNCTION_22_0() & 1) != 0)
        {
          swift_retain();
          v144 = v166;
          sub_1C289C3F0();
          swift_release();
          v145 = v176;
          if (OUTLINED_FUNCTION_46(v144, *(uint64_t (**)(uint64_t, uint64_t))(v176 + 88)) != *MEMORY[0x1E0DF2190])
            OUTLINED_FUNCTION_46(v144, *(uint64_t (**)(uint64_t, uint64_t))(v145 + 8));
          *(_WORD *)OUTLINED_FUNCTION_4_2() = 0;
          v146 = sub_1C289C384();
          OUTLINED_FUNCTION_17_1(&dword_1C281A000, v147, (os_signpost_type_t)v26, v146, "CSMMatchE2E");
          OUTLINED_FUNCTION_1_1();
        }

        v148 = v143;
        v149 = v194;
        v194(v148, v191);
        v150 = v205;
        swift_bridgeObjectRetain_n();
        v151 = OUTLINED_FUNCTION_15_3();
        v152 = sub_1C289C4EC();
        if (os_log_type_enabled(v151, v152))
        {
          v153 = (uint8_t *)OUTLINED_FUNCTION_4_1();
          v204[0] = OUTLINED_FUNCTION_4_1();
          *(_DWORD *)v153 = 136315138;
          if (v150 >> 62)
          {
            OUTLINED_FUNCTION_43();
            v154 = OUTLINED_FUNCTION_51();
            OUTLINED_FUNCTION_15_2();
          }
          else
          {
            v154 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v203 = v154;
          v155 = sub_1C289C63C();
          v203 = sub_1C2825794(v155, v156, v204);
          sub_1C289C54C();
          OUTLINED_FUNCTION_41();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_50(&dword_1C281A000, v151, v152, "ContextualSpanMatcher: returning %s spans", v153);
          OUTLINED_FUNCTION_48();
          OUTLINED_FUNCTION_1_1();
        }

        OUTLINED_FUNCTION_41();
        sub_1C28265C4(0, &qword_1EF786168);
        OUTLINED_FUNCTION_34();
        sub_1C2822C50(v205);
        swift_bridgeObjectRelease();
        v157 = sub_1C282468C();
        objc_msgSend(v172, sel_setContextualSpans_, v157);

        OUTLINED_FUNCTION_15_3();
        v158 = OUTLINED_FUNCTION_18_1();
        v159 = OUTLINED_FUNCTION_4_3(v158);
        v160 = v197;
        if (v159)
        {
          v161 = (_WORD *)OUTLINED_FUNCTION_4_2();
          OUTLINED_FUNCTION_40(v161);
          OUTLINED_FUNCTION_3_3(&dword_1C281A000, v162, v163, "Returning ContextualSpanMatcher response from Swift");
          OUTLINED_FUNCTION_1_1();
        }
        swift_release();

        swift_release();
        swift_release();
        v164 = v191;
        v149((uint64_t)v171, v191);
        v149((uint64_t)v180, v164);
        goto LABEL_109;
      }
      v185 = v115;
      v117 = 0;
      v187 = v206 + 32;
      LODWORD(v186) = *MEMORY[0x1E0DF2190];
      v118 = v183;
      v192 = v206;
      while (v117 < *(_QWORD *)(v116 + 16))
      {
        v119 = v187 + 48 * v117;
        v120 = *(void **)v119;
        v121 = *(_QWORD *)(v119 + 8);
        v26 = *(_QWORD *)(v119 + 16);
        v122 = *(_QWORD *)(v119 + 24);
        v123 = *(void **)(v119 + 32);
        LOBYTE(v119) = *(_BYTE *)(v119 + 40);
        *(_QWORD *)&v219 = v120;
        *((_QWORD *)&v219 + 1) = v121;
        v220 = v26;
        v221 = v122;
        v222 = v123;
        v223 = v119;
        v198 = v122;
        swift_bridgeObjectRetain();
        v196 = v123;
        OUTLINED_FUNCTION_38();
        v202 = v120;
        swift_retain();
        v200 = v121;
        swift_bridgeObjectRetain();
        v199 = v26;
        OUTLINED_FUNCTION_43();
        OUTLINED_FUNCTION_23();
        sub_1C289C378();
        v124 = sub_1C289C3A8();
        sub_1C289C51C();
        if ((OUTLINED_FUNCTION_22_0() & 1) != 0)
        {
          v184(v188, v118, v191);
          v125 = (uint8_t *)OUTLINED_FUNCTION_4_2();
          *(_WORD *)v125 = 0;
          v126 = sub_1C289C384();
          OUTLINED_FUNCTION_19_1(&dword_1C281A000, v124, (os_signpost_type_t)v26, v126, "CSMMatchEntityCandidate", "", v125);
          OUTLINED_FUNCTION_1_1();
        }

        v184(v188, v118, v191);
        OUTLINED_FUNCTION_20_0();
        v195 = OUTLINED_FUNCTION_24();
        v127 = sub_1C281F16C(&v219, v34);
        v128 = *(_QWORD *)(v127 + 16);
        if (v128)
        {
          v26 = v127 + 65;
          do
          {
            v129 = *(void **)(v26 - 25);
            v130 = *(_WORD *)(v26 - 1);
            v216[1] = *(_QWORD *)(v26 - 33);
            v216[2] = v129;
            v217 = *(_OWORD *)(v26 - 17);
            v218 = v130;
            swift_retain();
            v131 = v129;
            sub_1C2820694();
            if (v132)
            {
              MEMORY[0x1C3BC5148]();
              if (*(_QWORD *)((v205 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v205 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                sub_1C289C4C8();
              sub_1C289C4D4();
              sub_1C289C4BC();
              v32 = v201;
            }

            swift_release();
            v26 += 40;
            --v128;
          }
          while (v128);
        }
        OUTLINED_FUNCTION_12_0();
        v24 = OUTLINED_FUNCTION_23();
        v133 = v182;
        sub_1C289C3CC();
        v134 = sub_1C289C510();
        if ((sub_1C289C534() & 1) != 0)
        {
          swift_retain();
          v135 = v179;
          sub_1C289C3F0();
          OUTLINED_FUNCTION_39();
          v136 = v176;
          v137 = OUTLINED_FUNCTION_46(v135, *(uint64_t (**)(uint64_t, uint64_t))(v176 + 88));
          v138 = "[Error] Interval already ended";
          if (v137 != (_DWORD)v186)
          {
            OUTLINED_FUNCTION_46(v179, *(uint64_t (**)(uint64_t, uint64_t))(v136 + 8));
            v138 = "";
          }
          v184(v188, v133, v191);
          v139 = (uint8_t *)OUTLINED_FUNCTION_4_2();
          *(_WORD *)v139 = 0;
          v140 = sub_1C289C384();
          OUTLINED_FUNCTION_19_1(&dword_1C281A000, v24, v134, v140, "CSMMatchEntityCandidate", v138, v139);
          OUTLINED_FUNCTION_1_1();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v141 = v191;
        v10 = v194;
        v194((uint64_t)v133, v191);
        v118 = v183;
        ((void (*)(char *, NSObject *))v10)(v183, v141);
        OUTLINED_FUNCTION_39();
        ++v117;
        v116 = v192;
        v34 = v197;
        if (v117 == v193)
          goto LABEL_98;
      }
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      swift_once();
    }
    OUTLINED_FUNCTION_15_3();
    v56 = OUTLINED_FUNCTION_18_1();
    if (OUTLINED_FUNCTION_4_3(v56))
    {
      v57 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_40(v57);
      OUTLINED_FUNCTION_3_3(&dword_1C281A000, v58, v59, "Unable to initialize response, returning nil");
      OUTLINED_FUNCTION_1_1();
    }

    goto LABEL_109;
  }
LABEL_118:
  __break(1u);
LABEL_119:

  __break(1u);
}

void sub_1C28244F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1EF7860A0 != -1)
    swift_once();
  v4 = sub_1C289C414();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EF7866E8);
  swift_bridgeObjectRetain_n();
  v5 = sub_1C289C3FC();
  v6 = sub_1C289C4F8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_1C2825794(a1, a2, &v9);
    sub_1C289C54C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C281A000, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BC62B8](v8, -1, -1);
    MEMORY[0x1C3BC62B8](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

id sub_1C282468C()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = (void *)sub_1C289C498();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithArray_, v1);

  return v2;
}

void sub_1C282474C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_32();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_10_3();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_31();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  OUTLINED_FUNCTION_30();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861A8);
    v7 = (char *)OUTLINED_FUNCTION_29();
    v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_13_2(v8 - 32);
  }
  else
  {
    v7 = (char *)MEMORY[0x1E0DEE9D8];
  }
  if ((v1 & 1) != 0)
  {
    sub_1C28252F0((char *)(v0 + 32), v2, v7 + 32);
    OUTLINED_FUNCTION_6_2();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_8_2();
    sub_1C2824CC4(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_9_2();
}

void sub_1C28247F0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_32();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_10_3();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_31();
      if (v7)
      {
        __break(1u);
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  else
  {
    v6 = v4;
  }
  v9 = *(_QWORD *)(v0 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(v0 + 16);
  else
    v10 = v6;
  if (!v10)
    goto LABEL_17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
  v11 = (const void *)OUTLINED_FUNCTION_5_2();
  v12 = _swift_stdlib_malloc_size(v11);
  if (!v2 || (v12 - v3 == 0x8000000000000000 ? (v13 = v2 == -1) : (v13 = 0), v13))
  {
LABEL_22:
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_45();
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_13_2(v12 - v3);
LABEL_17:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
  OUTLINED_FUNCTION_25();
  if ((v1 & 1) != 0)
  {
    sub_1C282537C(v0 + v15, v9, v14);
    OUTLINED_FUNCTION_6_2();
  }
  else
  {
    v16 = OUTLINED_FUNCTION_8_2();
    sub_1C2824DC0(v16, v17, v18, v19);
  }
  OUTLINED_FUNCTION_11_3();
}

void sub_1C2824934()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_32();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_10_3();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_31();
      if (v7)
      {
        __break(1u);
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  else
  {
    v6 = v4;
  }
  v9 = *(_QWORD *)(v0 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(v0 + 16);
  else
    v10 = v6;
  if (!v10)
    goto LABEL_17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786188);
  sub_1C289C174();
  v11 = (const void *)OUTLINED_FUNCTION_5_2();
  v12 = _swift_stdlib_malloc_size(v11);
  if (!v2 || (v12 - v3 == 0x8000000000000000 ? (v13 = v2 == -1) : (v13 = 0), v13))
  {
LABEL_22:
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_45();
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_13_2(v12 - v3);
LABEL_17:
  sub_1C289C174();
  OUTLINED_FUNCTION_25();
  if ((v1 & 1) != 0)
  {
    sub_1C2825480(v0 + v15, v9, v14);
    OUTLINED_FUNCTION_6_2();
  }
  else
  {
    v16 = OUTLINED_FUNCTION_8_2();
    sub_1C2824EE4(v16, v17, v18, v19);
  }
  OUTLINED_FUNCTION_11_3();
}

void sub_1C2824A70()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_32();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_10_3();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_31();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  OUTLINED_FUNCTION_30();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786180);
    v7 = swift_allocObject();
    v8 = _swift_stdlib_malloc_size((const void *)v7);
    *(_QWORD *)(v7 + 16) = v2;
    *(_QWORD *)(v7 + 24) = 2 * ((uint64_t)(v8 - 32) / 16);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  if ((v1 & 1) != 0)
  {
    sub_1C282557C((char *)(v0 + 32), v2, (char *)(v7 + 32));
    OUTLINED_FUNCTION_6_2();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_8_2();
    sub_1C2825004(v9, v10, v11, v12);
  }
}

void sub_1C2824B2C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_32();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_10_3();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_31();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  OUTLINED_FUNCTION_30();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861A0);
    v7 = (char *)OUTLINED_FUNCTION_29();
    v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_13_2(v8 - 32);
  }
  else
  {
    v7 = (char *)MEMORY[0x1E0DEE9D8];
  }
  if ((v1 & 1) != 0)
  {
    sub_1C2825600((char *)(v0 + 32), v2, v7 + 32);
    OUTLINED_FUNCTION_6_2();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_8_2();
    sub_1C28250F8(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_9_2();
}

char *sub_1C2824BD0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786178);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  if ((v5 & 1) != 0)
  {
    sub_1C282570C((char *)(a4 + 32), v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C28251F4(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

uint64_t sub_1C2824CC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_1C289C624();
  __break(1u);
  return result;
}

uint64_t sub_1C2824DC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  result = sub_1C289C624();
  __break(1u);
  return result;
}

uint64_t sub_1C2824EE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_1C289C174() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  result = sub_1C289C624();
  __break(1u);
  return result;
}

uint64_t sub_1C2825004(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_1C289C624();
  __break(1u);
  return result;
}

uint64_t sub_1C28250F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_1C289C624();
  __break(1u);
  return result;
}

uint64_t sub_1C28251F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_1C289C624();
  __break(1u);
  return result;
}

char *sub_1C28252F0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C289C624();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

uint64_t sub_1C282537C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_1C289C624();
    __break(1u);
  }
  else if (a3 < a1
         || (result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_1C2825480(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_1C289C624();
    __break(1u);
  }
  else if (a3 < a1 || (result = sub_1C289C174(), a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    sub_1C289C174();
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1C282557C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C289C624();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_1C2825600(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C289C624();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_1C2825688(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C289C624();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_1C282570C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C289C624();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

uint64_t sub_1C2825794(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = sub_1C2825864(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1C28264F0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1C28264F0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1C2825864(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1C28259B8((char *)__src, HIBYTE(a6) & 0xF, __dst);
      sub_1C289C558();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1C2825A7C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = sub_1C289C5D0();
    if (!v8)
    {
      result = sub_1C289C60C();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *sub_1C28259B8(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)sub_1C289C624();
  __break(1u);
  return result;
}

uint64_t sub_1C2825A7C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1C2825B10(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)sub_1C2825CE4(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)sub_1C2825CE4((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1C2825B10(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = sub_1C289C468();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x1E0DEE9D8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_6:
  v3 = sub_1C2825C80(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = sub_1C289C5B8();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  sub_1C289C624();
  __break(1u);
LABEL_14:
  result = sub_1C289C60C();
  __break(1u);
  return result;
}

_QWORD *sub_1C2825C80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860B0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_1C2825CE4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860B0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1C2825E7C(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C2825DB8(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1C2825DB8(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)sub_1C289C624();
  __break(1u);
  return result;
}

char *sub_1C2825E7C(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)sub_1C289C624();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

size_t sub_1C2825EFC(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_1C2825F6C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1C2825F18(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_1C28260B4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1C2825F34(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1C28261F4(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_1C2825F50(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1C28262D4(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

size_t sub_1C2825F6C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860D8);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_24;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8) - 8) + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (unint64_t)v13 + v16;
  v18 = a4 + v16;
  if ((v5 & 1) != 0)
  {
    sub_1C282537C(v18, v8, v17);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C281EC38(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

size_t sub_1C28260B4(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786188);
  v10 = *(_QWORD *)(sub_1C289C174() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_24;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(sub_1C289C174() - 8) + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (unint64_t)v13 + v16;
  v18 = a4 + v16;
  if ((v5 & 1) != 0)
  {
    sub_1C2825480(v18, v8, v17);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C281ECD4(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1C28261F4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786180);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1C282557C(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C281ED68((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

char *sub_1C28262D4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786198);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1C2825688(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C281EE00((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

uint64_t sub_1C28263B4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_stringValue);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1C289C438();

  return v3;
}

uint64_t sub_1C2826414(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_data);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1C289C0CC();

  return v3;
}

uint64_t sub_1C2826474(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1C2826488(a1, a2);
  return a1;
}

uint64_t sub_1C2826488(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1C28264F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_1C282652C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1C282653C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C2826584()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF7861B8;
  if (!qword_1EF7861B8)
  {
    v1 = sub_1C289C0B4();
    result = MEMORY[0x1C3BC6258](MEMORY[0x1E0CAFB80], v1);
    atomic_store(result, (unint64_t *)&qword_1EF7861B8);
  }
  return result;
}

uint64_t sub_1C28265C4(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void OUTLINED_FUNCTION_3_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

BOOL OUTLINED_FUNCTION_4_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_6_2()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return 0;
}

void OUTLINED_FUNCTION_13_2(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * (a1 / v3);
}

uint64_t OUTLINED_FUNCTION_15_3()
{
  return sub_1C289C3FC();
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  return sub_1C289C540();
}

void OUTLINED_FUNCTION_17_1(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;

  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v6, v7, 2u);
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return sub_1C289C4EC();
}

void OUTLINED_FUNCTION_19_1(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, a7, 2u);
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return sub_1C289C534();
}

uint64_t OUTLINED_FUNCTION_23()
{
  return sub_1C289C3A8();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return sub_1C289C3D8();
}

uint64_t OUTLINED_FUNCTION_29()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_33()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_34()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_35(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 480) = a1;
  return v1 + 480;
}

uint64_t OUTLINED_FUNCTION_36()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_38()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_39()
{
  return swift_release();
}

_WORD *OUTLINED_FUNCTION_40(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_41()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_43()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return sub_1C289C60C();
}

uint64_t OUTLINED_FUNCTION_46@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_48()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_49()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_50(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_51()
{
  return sub_1C289C618();
}

uint64_t sub_1C2826824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v4 = sub_1C289C288();
  v5 = *(_QWORD *)(v4 - 8);
  v74 = v4;
  v75 = v5;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_1_3();
  v61 = v6;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860C8);
  v57 = *(_QWORD *)(v68 - 8);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_1_3();
  v67 = v7;
  v77 = sub_1C289C24C();
  v73 = *(_QWORD *)(v77 - 8);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_42();
  v66 = v8;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78]();
  v76 = (char *)&v55 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861D0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_1_3();
  v56 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861D8);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_42();
  v70 = v12;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78]();
  v14 = (uint64_t *)((char *)&v55 - v13);
  v15 = sub_1C289C2E8();
  v78 = *(_QWORD *)(v15 - 8);
  v79 = v15;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_42();
  v59 = v16;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78]();
  v64 = (char *)&v55 - v17;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78]();
  v19 = (char *)&v55 - v18;
  sub_1C289C36C();
  swift_allocObject();
  v20 = sub_1C289C360();
  v69 = v19;
  sub_1C289C354();
  v21 = *(_QWORD *)(a3 + 16);
  v62 = v21 - 1;
  v58 = a3;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  v63 = v21;
  v60 = v10;
  v65 = v14;
  v72 = v20;
  while (1)
  {
    if (v23 == v21)
    {
      v24 = 1;
      v25 = v21;
      goto LABEL_6;
    }
    if (v23 >= v21)
      break;
    v25 = v23 + 1;
    v26 = v56 + *(int *)(v10 + 48);
    sub_1C281EF90(v58+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(_QWORD *)(v57 + 72) * v23, v26);
    v27 = (uint64_t)v70 + *(int *)(v10 + 48);
    *v70 = v23;
    sub_1C281F954(v26, v27, &qword_1EF7860C8);
    v24 = 0;
LABEL_6:
    v28 = v70;
    __swift_storeEnumTagSinglePayload((uint64_t)v70, v24, 1, v10);
    sub_1C281F954((uint64_t)v28, (uint64_t)v14, &qword_1EF7861D8);
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v10) == 1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v69, v79);
      return v20;
    }
    v29 = v74;
    v30 = v75;
    v31 = *v14;
    v32 = (char *)v14 + *(int *)(v10 + 48);
    v33 = v67;
    v34 = *(int *)(v68 + 48);
    v35 = &v32[v34];
    v36 = (char *)(v67 + v34);
    v37 = *(void (**)(uint64_t))(v73 + 32);
    v38 = v77;
    v37(v67);
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v78 + 32);
    v40 = v35;
    v41 = v79;
    v39((uint64_t)v36, v40, v79);
    ((void (*)(char *, uint64_t, uint64_t))v37)(v76, v33, v38);
    v42 = v64;
    v39((uint64_t)v64, v36, v41);
    v71 = v25;
    if (v31 == v62)
    {
      sub_1C289C2B8();
      v43 = v59;
      sub_1C289C324();
      swift_bridgeObjectRelease();
      v44 = v61;
    }
    else
    {
      v44 = v61;
      sub_1C289C2DC();
      v43 = v59;
      sub_1C289C30C();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v44, v29);
    }
    v10 = v60;
    sub_1C289C2A0();
    sub_1C289C2AC();
    v45 = v76;
    sub_1C289C228();
    v46 = v66;
    v47 = v69;
    sub_1C289C2F4();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v44, v74);
    v48 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v49 = v46;
    v50 = v77;
    v48(v49, v77);
    v51 = *(void (**)(char *, uint64_t))(v78 + 8);
    v52 = v43;
    v53 = v79;
    v51(v42, v79);
    v48((uint64_t)v45, v50);
    v51(v47, v53);
    v54 = v52;
    v20 = v72;
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v39)(v47, v54, v53);
    v14 = v65;
    v21 = v63;
    v23 = v71;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C2826CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  _BYTE v15[8];

  sub_1C281F954(a3 + 8, (uint64_t)v15, &qword_1EF7860F0);
  v14 = *(_QWORD *)(a3 + 16);
  sub_1C281F954(a3 + 24, (uint64_t)v13, &qword_1EF7860F8);
  v12 = *(_QWORD *)(a3 + 32);
  swift_retain();
  sub_1C281F998((uint64_t)v15);
  sub_1C281F998((uint64_t)&v14);
  sub_1C281F998((uint64_t)v13);
  sub_1C281F998((uint64_t)&v12);
  v4 = *(_QWORD *)(sub_1C28273A4() + 16);
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    swift_retain();
    sub_1C281E77C();
    v6 = v5;
    swift_release_n();
    swift_bridgeObjectRelease();
    sub_1C281FA54((uint64_t)&v14);
    sub_1C281FA54((uint64_t)v13);
    sub_1C281FA54((uint64_t)&v12);
  }
  else
  {
    if (qword_1EF7860A0 != -1)
      swift_once();
    v7 = sub_1C289C414();
    __swift_project_value_buffer(v7, (uint64_t)qword_1EF7866E8);
    v8 = sub_1C289C3FC();
    v9 = sub_1C289C4EC();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1C281A000, v8, v9, "Cannot generate UsoGraph for alternativeMatchableString due to original UsoGraph having more than one string values. Returning nil", v10, 2u);
      MEMORY[0x1C3BC62B8](v10, -1, -1);
    }

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

NSString __swiftcall SampleClassObjC.getHelloWorld()()
{
  id v0;
  void *v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SampleClass()), sel_init);
  v1 = (void *)sub_1C289C42C();

  return v1;
}

uint64_t sub_1C2826F84()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1C2826FAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_19_2();
}

_QWORD *sub_1C2826FE4(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1C282705C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C28270A0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C28270E0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for GraphString()
{
  OUTLINED_FUNCTION_18_2();
}

uint64_t sub_1C282712C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C282716C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C28271E0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1C28272A0(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sub_1C282730C(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C282734C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Entity()
{
  OUTLINED_FUNCTION_18_2();
}

uint64_t sub_1C28273A4()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 8))
  {
    v1 = *(_QWORD *)(v0 + 8);
  }
  else
  {
    swift_retain();
    v1 = sub_1C281D924();
    swift_release();
    *(_QWORD *)(v0 + 8) = v1;
    OUTLINED_FUNCTION_20_1();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1C2827408()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 24))
  {
    *(_QWORD *)(v0 + 24) = sub_1C2827900(v0);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_19_2();
}

uint64_t sub_1C282744C(char a1)
{
  if (!a1)
    return 0x45746E65696C6173;
  if (a1 == 1)
    return 0x69446D6574737973;
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1C28274BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF786110);
  v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v7, 1, v6);
}

uint64_t sub_1C2827538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861B0);
  v6 = v5;
  if (v4)
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
    sub_1C282653C(a1 + ((v7 + 32) & ~v7), a2);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v8, 1, v6);
}

void sub_1C28275AC(unsigned __int8 a1)
{
  sub_1C289C660();
  sub_1C2822064(a1);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_14_1();
  sub_1C289C66C();
  OUTLINED_FUNCTION_15_4();
}

uint64_t sub_1C28275EC()
{
  return sub_1C2827754();
}

void sub_1C28275F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C282763C()
{
  sub_1C289C450();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C28276C4()
{
  sub_1C289C450();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2827754()
{
  sub_1C289C660();
  sub_1C289C450();
  swift_bridgeObjectRelease();
  return sub_1C289C66C();
}

void sub_1C2827808(uint64_t a1, unsigned __int8 a2)
{
  sub_1C289C660();
  sub_1C2822064(a2);
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_14_1();
  sub_1C289C66C();
  OUTLINED_FUNCTION_15_4();
}

uint64_t sub_1C2827844()
{
  unint64_t v0;

  v0 = sub_1C289C630();
  OUTLINED_FUNCTION_14_1();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

void sub_1C2827888(unsigned __int8 *a1, char *a2)
{
  sub_1C28204C4(*a1, *a2);
}

uint64_t sub_1C2827894()
{
  return sub_1C28275EC();
}

uint64_t sub_1C282789C()
{
  return sub_1C28276C4();
}

uint64_t sub_1C28278A4()
{
  return sub_1C2827754();
}

uint64_t sub_1C28278AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1C2827844();
  *a1 = result;
  return result;
}

uint64_t sub_1C28278D8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1C282744C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C2827900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = sub_1C289C0A8();
  v44 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v42 = (char *)&v36 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - v7;
  v45 = a1;
  v9 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(v9 + 16);
  if (!v41)
    return MEMORY[0x1E0DEE9D8];
  v38 = v9 + 32;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  v36 = MEMORY[0x1E0DEE9D8];
  v39 = v8;
  v40 = v2;
  v37 = v9;
  while (v11 < *(_QWORD *)(v9 + 16))
  {
    v46 = v11;
    v12 = (uint64_t *)(v38 + 16 * v11);
    v14 = *v12;
    v13 = v12[1];
    swift_bridgeObjectRetain_n();
    v15 = sub_1C28273A4();
    v16 = *(_QWORD *)(v15 + 16);
    v47 = v14;
    v48 = v13;
    if (v16)
    {
      sub_1C281F9D8();
      v17 = (uint64_t *)(v15 + 40);
      v14 = v47;
      v18 = v48;
      do
      {
        v19 = *(v17 - 1);
        v20 = *v17;
        v53 = v14;
        v54 = v18;
        v51 = v19;
        v52 = v20;
        v49 = 0;
        v50 = 0xE000000000000000;
        v14 = sub_1C289C57C();
        v13 = v21;
        swift_bridgeObjectRelease();
        v17 += 3;
        v18 = v13;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    v22 = v42;
    sub_1C289C090();
    v23 = v43;
    sub_1C289C084();
    v24 = v39;
    sub_1C289C09C();
    v25 = *(void (**)(char *, uint64_t))(v44 + 8);
    v26 = v40;
    v25(v23, v40);
    v25(v22, v26);
    v53 = v14;
    v54 = v13;
    sub_1C281F9D8();
    v27 = sub_1C289C570();
    v29 = v28;
    swift_bridgeObjectRelease();
    if (v27 == v47 && v29 == v48)
      goto LABEL_20;
    v31 = sub_1C289C648();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
      goto LABEL_20;
    v32 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v32 = v27 & 0xFFFFFFFFFFFFLL;
    if (!v32)
    {
LABEL_20:
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v33 = v36;
      else
        sub_1C2824A70();
      v34 = *(_QWORD *)(v33 + 16);
      if (v34 >= *(_QWORD *)(v33 + 24) >> 1)
        sub_1C2824A70();
      *(_QWORD *)(v33 + 16) = v34 + 1;
      v36 = v33;
      v35 = v33 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v27;
      *(_QWORD *)(v35 + 40) = v29;
    }
    v9 = v37;
    v11 = v46 + 1;
    swift_bridgeObjectRelease();
    result = ((uint64_t (*)(char *, uint64_t))v25)(v24, v26);
    if (v11 == v41)
    {
      swift_bridgeObjectRelease();
      return v36;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C2827C64@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint8_t *a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_signpost_type_t v35;
  _WORD *v36;
  os_signpost_id_t v37;
  id v38;
  uint64_t v39;
  os_signpost_type_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  os_log_type_t v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  NSObject *v60;
  os_signpost_type_t v61;
  const char *v62;
  _WORD *v63;
  os_signpost_id_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_signpost_type_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _WORD *v82;
  os_signpost_id_t v83;
  uint8_t *v84;
  uint64_t result;
  char v86;
  uint8_t *v87;
  os_signpost_id_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  int v98;
  int v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  uint8_t *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111[3];

  v104 = a7;
  v98 = a4;
  v99 = a6;
  v107 = a3;
  v108 = a1;
  v106 = a8;
  v10 = sub_1C289C3C0();
  v101 = *(_QWORD *)(v10 - 8);
  v102 = v10;
  MEMORY[0x1E0C80A78](v10);
  v103 = (uint8_t *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_28();
  v96 = v13;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_28();
  v94 = v15;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v16);
  v97 = (char *)&v94 - v17;
  v18 = (uint8_t *)sub_1C289C390();
  v110 = *((_QWORD *)v18 - 1);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_28();
  v100 = v20;
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_28();
  v95 = v22;
  OUTLINED_FUNCTION_12_3();
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v94 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = ((char *)&v94 - v28);
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v94 - v30;
  if (qword_1EF7860A8 != -1)
    swift_once();
  v32 = sub_1C289C3B4();
  v33 = __swift_project_value_buffer(v32, (uint64_t)qword_1EF7866D0);
  sub_1C289C3A8();
  sub_1C289C378();
  v105 = (char *)v33;
  v34 = sub_1C289C3A8();
  v35 = sub_1C289C51C();
  if ((sub_1C289C534() & 1) != 0)
  {
    v36 = (_WORD *)OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_17_2(v36);
    v37 = sub_1C289C384();
    OUTLINED_FUNCTION_5_3(&dword_1C281A000, v34, v35, v37, "CSMParseUSOGraph", "");
    OUTLINED_FUNCTION_1_1();
  }

  (*(void (**)(NSObject *, char *, uint8_t *))(v110 + 16))(v29, v31, v18);
  sub_1C289C3E4();
  swift_allocObject();
  v109 = sub_1C289C3D8();
  v38 = v108;
  if ((a5 & 1) != 0 && !objc_msgSend(v108, sel_identifiersCount))
  {
    OUTLINED_FUNCTION_26();
    swift_bridgeObjectRelease();
    if (qword_1EF7860A0 != -1)
      swift_once();
    v52 = v18;
    v53 = OUTLINED_FUNCTION_8_1();
    v54 = __swift_project_value_buffer(v53, (uint64_t)qword_1EF7866E8);
    sub_1C289C3FC();
    v55 = OUTLINED_FUNCTION_23_0();
    v56 = OUTLINED_FUNCTION_2_1(v55);
    v57 = v109;
    v58 = (uint64_t)v97;
    if (v56)
    {
      v59 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_17_2(v59);
      _os_log_impl(&dword_1C281A000, v29, v54, "[CSMEntityInit] require USOGraph to have identifiers, but identifiers count is zero. Skipping initialization", v18, 2u);
      OUTLINED_FUNCTION_1_1();
    }

    v60 = OUTLINED_FUNCTION_8_3();
    sub_1C289C3CC();
    v61 = sub_1C289C510();
    if ((OUTLINED_FUNCTION_16_2() & 1) != 0)
    {
      OUTLINED_FUNCTION_7_3();
      sub_1C289C3F0();
      OUTLINED_FUNCTION_3_4();
      if (OUTLINED_FUNCTION_6_3() == *MEMORY[0x1E0DF2190])
      {
        v62 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_46(v58, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
        v62 = "";
      }
      v87 = (uint8_t *)OUTLINED_FUNCTION_4_2();
      *(_WORD *)v87 = 0;
      v88 = sub_1C289C384();
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v60, v61, v88, "CSMParseUSOGraph", v62, v87, 2u);
      OUTLINED_FUNCTION_1_1();
    }

    (*(void (**)(char *, uint8_t *))(v110 + 8))(v26, v52);
    goto LABEL_40;
  }
  v39 = a2;
  OUTLINED_FUNCTION_7_3();
  v42 = sub_1C289C0E4();
  OUTLINED_FUNCTION_13_3();
  if ((v99 & 1) != 0 && (sub_1C28286AC(v42, v104) & 1) == 0)
  {
    OUTLINED_FUNCTION_26();
    if (qword_1EF7860A0 != -1)
      swift_once();
    v73 = OUTLINED_FUNCTION_8_1();
    __swift_project_value_buffer(v73, (uint64_t)qword_1EF7866E8);
    swift_bridgeObjectRetain();
    sub_1C289C3FC();
    v74 = OUTLINED_FUNCTION_23_0();
    if (os_log_type_enabled(v29, v74))
    {
      v75 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      v76 = OUTLINED_FUNCTION_4_1();
      v103 = v18;
      v111[0] = v76;
      v107 = v75;
      *(_DWORD *)v75 = 136315138;
      v100 = v75 + 4;
      v77 = swift_bridgeObjectRetain();
      v78 = MEMORY[0x1C3BC516C](v77, MEMORY[0x1E0DEA968]);
      v80 = v79;
      swift_bridgeObjectRelease();
      v81 = sub_1C2825794(v78, v80, v111);
      OUTLINED_FUNCTION_27(v81);
      sub_1C289C54C();
      OUTLINED_FUNCTION_41();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C281A000, v29, v74, "[CSMEntityInit] parsing restrict graph types to be %s, but the graph type did not meet this criteria. Skipping initialization", v107, 0xCu);
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_41();
    v90 = v94;
    v91 = v95;
    v92 = OUTLINED_FUNCTION_8_3();
    v93 = v109;
    sub_1C289C3CC();
    v40 = sub_1C289C510();
    if ((OUTLINED_FUNCTION_16_2() & 1) != 0)
    {
      OUTLINED_FUNCTION_7_3();
      sub_1C289C3F0();
      OUTLINED_FUNCTION_3_4();
      if (OUTLINED_FUNCTION_6_3() == *MEMORY[0x1E0DF2190])
      {
        v41 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_46(v90, *(uint64_t (**)(uint64_t, uint64_t))(v93 + 8));
        v41 = "";
      }
      v63 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_17_2(v63);
      v64 = sub_1C289C384();
      OUTLINED_FUNCTION_5_3(&dword_1C281A000, v92, v40, v64, "CSMParseUSOGraph", v41);
      OUTLINED_FUNCTION_1_1();
    }

    (*(void (**)(uint64_t, uint8_t *))(v110 + 8))(v91, v18);
LABEL_40:

    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_3_4();
    result = OUTLINED_FUNCTION_24_0((uint64_t)v31);
    v42 = 0;
    v84 = 0;
    v67 = 0;
    v86 = 0;
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_3();
  v43 = sub_1C289C180();
  v45 = v44;
  if (qword_1EF7860A0 != -1)
    swift_once();
  v46 = OUTLINED_FUNCTION_8_1();
  __swift_project_value_buffer(v46, (uint64_t)qword_1EF7866E8);
  OUTLINED_FUNCTION_20_1();
  v47 = sub_1C289C3FC();
  v48 = sub_1C289C4F8();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    v50 = OUTLINED_FUNCTION_4_1();
    v103 = v18;
    v111[0] = v50;
    v104 = v39;
    *(_DWORD *)v49 = 136315138;
    OUTLINED_FUNCTION_20_1();
    v51 = sub_1C2825794(v43, v45, v111);
    OUTLINED_FUNCTION_27(v51);
    sub_1C289C54C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C281A000, v47, v48, "[CSMEntityInit] parsing graph: %s", v49, 0xCu);
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_1_1();
  }

  OUTLINED_FUNCTION_41();
  v65 = (uint64_t)v100;
  swift_bridgeObjectRetain();
  sub_1C281E2E8();
  v67 = v66;
  swift_bridgeObjectRetain();
  v68 = OUTLINED_FUNCTION_8_3();
  sub_1C289C3CC();
  v69 = sub_1C289C510();
  if ((OUTLINED_FUNCTION_16_2() & 1) != 0)
  {
    v105 = v31;
    swift_retain();
    v70 = v96;
    sub_1C289C3F0();
    swift_release();
    v71 = v101;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v101 + 88))(v70, v102) == *MEMORY[0x1E0DF2190])
    {
      v72 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_46(v70, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
      v72 = "";
    }
    v82 = (_WORD *)OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_17_2(v82);
    v83 = sub_1C289C384();
    OUTLINED_FUNCTION_5_3(&dword_1C281A000, v68, v69, v83, "CSMParseUSOGraph", v72);
    OUTLINED_FUNCTION_1_1();
  }

  OUTLINED_FUNCTION_24_0(v65);
  OUTLINED_FUNCTION_13_3();
  swift_release();
  OUTLINED_FUNCTION_24_0((uint64_t)v31);
  swift_bridgeObjectRelease();
  v84 = v107;
  OUTLINED_FUNCTION_14_1();
  result = OUTLINED_FUNCTION_3_4();
  v86 = v98;
LABEL_41:
  v89 = v106;
  *v106 = v42;
  v89[1] = 0;
  v89[2] = (uint64_t)v84;
  v89[3] = 0;
  v89[4] = v67;
  *((_BYTE *)v89 + 40) = v86;
  return result;
}

uint64_t sub_1C28286AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v34 = a2;
  v33 = sub_1C289C288();
  v2 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7860D0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v33 - v9;
  v11 = sub_1C289C2E8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861E0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C289C354();
  v18 = sub_1C289C264();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v18);
  v19 = sub_1C289C2C4();
  sub_1C28289A8((uint64_t)v8, &qword_1EF7860D0);
  sub_1C28289A8((uint64_t)v10, &qword_1EF7860D0);
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  sub_1C2827538(v19, (uint64_t)v17);
  swift_bridgeObjectRelease();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7861B0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v21) == 1)
  {
    sub_1C28289A8((uint64_t)v17, &qword_1EF7861E0);
    return 0;
  }
  v22 = &v17[*(int *)(v21 + 48)];
  sub_1C289C2DC();
  v20(v22, v11);
  v23 = sub_1C289C27C();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v33);
  v26 = sub_1C289C24C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v17, v26);
  v27 = v34;
  v28 = *(_QWORD *)(v34 + 16);
  if (!v28)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_1C281F9D8();
  swift_bridgeObjectRetain();
  v29 = (uint64_t *)(v27 + 40);
  while (1)
  {
    v31 = *(v29 - 1);
    v30 = *v29;
    v37 = v23;
    v38 = v25;
    v35 = v31;
    v36 = v30;
    if ((sub_1C289C594() & 1) != 0)
      break;
    v29 += 2;
    if (!--v28)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

void sub_1C28289A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_19_2();
}

uint64_t sub_1C28289E0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1C2828A68(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2828AB4 + 4 * byte_1C289DDFA[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2828AE8 + 4 * byte_1C289DDF5[v4]))();
}

uint64_t sub_1C2828AE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2828AF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2828AF8);
  return result;
}

uint64_t sub_1C2828B04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2828B0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2828B10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2828B18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for EntityType()
{
  OUTLINED_FUNCTION_18_2();
}

unint64_t sub_1C2828B34()
{
  unint64_t result;

  result = qword_1EF7861E8;
  if (!qword_1EF7861E8)
  {
    result = MEMORY[0x1C3BC6258](&unk_1C289DE98, &unk_1E7C66528);
    atomic_store(result, (unint64_t *)&qword_1EF7861E8);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return sub_1C289C450();
}

void OUTLINED_FUNCTION_5_3(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
  uint8_t *v6;

  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 192) + 88))(v0, *(_QWORD *)(v1 - 184));
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return sub_1C289C3A8();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return sub_1C289C534();
}

_WORD *OUTLINED_FUNCTION_17_2(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return sub_1C289C4EC();
}

uint64_t OUTLINED_FUNCTION_24_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

void marrs::qr::orchestration::AerOrchestrator::~AerOrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

void marrs::qr::orchestration::AerOrchestrator::predict(const QRRequest *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  (*(void (**)(const QRRequest *))(*(_QWORD *)&this->var0 + 24))(this);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, this, (uint64_t)a2, 1, 0);
}

uint64_t marrs::qr::orchestration::AerOrchestrator::validate(marrs::qr::orchestration::AerOrchestrator *this, const QRRequest *a2)
{
  QRInteraction *var1;
  _QWORD *exception;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD v10[3];

  if (!marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper((uint64_t *)a2->var1.var0, (uint64_t *)a2->var1.var1, 0))
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "Received empty ASR utterance / tokens in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v9, "QueryRewrite");
    IOContentError::IOContentError(exception, (uint64_t)v10, (uint64_t)v9, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 322);
  }
  if ((marrs::qr::orchestration::PreviousNLUtteranceChecker::verify((marrs::qr::orchestration::PreviousNLUtteranceChecker *)&v8, a2) & 1) == 0)
  {
    v6 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "Received empty inputs in QRRequest.prevQRUtterances");
    std::string::basic_string[abi:ne180100]<0>(v9, "QueryRewrite");
    IOContentError::IOContentError(v6, (uint64_t)v10, (uint64_t)v9, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 326);
  }
  var1 = a2->var1.var1;
  if (a2->var1.var0 != var1 && var1[-1].var2.var1 != var1[-1].var2.var2.var0)
  {
    v7 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "Received non-empty SiriResponse for current turn in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v9, "QueryRewrite");
    IOContentError::IOContentError(v7, (uint64_t)v10, (uint64_t)v9, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 331);
  }
  return 1;
}

void sub_1C2828E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void `non-virtual thunk to'marrs::qr::orchestration::AerOrchestrator::predict(marrs::qr::orchestration::AerOrchestrator *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  const QRRequest *v5;

  v5 = (const QRRequest *)((char *)this - 328);
  (*(void (**)(char *))(*((_QWORD *)this - 41) + 24))((char *)this - 328);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, v5, (uint64_t)a2, 1, 0);
}

void `non-virtual thunk to'marrs::qr::orchestration::AerOrchestrator::~AerOrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
}

{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t `non-virtual thunk to'marrs::qr::orchestration::AerOrchestrator::validate(marrs::qr::orchestration::AerOrchestrator *this, const QRRequest *a2)
{
  marrs::qr::orchestration::AerOrchestrator::validate(this, a2);
  return 1;
}

void marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(void **this)
{
  marrs::inference_engine::EspressoModule **v2;
  void **v3;

  *this = &off_1E7C665A0;
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  v3 = this + 22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)(this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v3 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)(this + 2));
  v2 = (marrs::inference_engine::EspressoModule **)this[1];
  this[1] = 0;
  if (v2)
    std::default_delete<marrs::qr::inference_engine::EspressoQueryRewriteModel>::operator()[abi:ne180100](v2);
}

{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::default_delete<marrs::qr::inference_engine::EspressoQueryRewriteModel>::operator()[abi:ne180100](marrs::inference_engine::EspressoModule **a1)
{
  marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType::~EspressoQueryRewriteTimingMetricsType((marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType *)(a1 + 4));
  std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100](a1 + 3, 0);
  std::unique_ptr<marrs::qr::inference_engine::LSTMDecoderwithAttentionModule>::reset[abi:ne180100](a1 + 2, 0);
  std::unique_ptr<marrs::qr::inference_engine::LSTMEncoderModule>::reset[abi:ne180100](a1 + 1, 0);
  std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100](a1, 0);
  JUMPOUT(0x1C3BC5C7CLL);
}

void marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType::~EspressoQueryRewriteTimingMetricsType(marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  marrs::inference_engine::EspressoModule *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1C3BC5C7CLL);
  }
  return result;
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::qr::inference_engine::LSTMDecoderwithAttentionModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  marrs::inference_engine::EspressoModule *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1C3BC5C7CLL);
  }
  return result;
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::qr::inference_engine::LSTMEncoderModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  marrs::inference_engine::EspressoModule *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1C3BC5C7CLL);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(marrs::qr::orchestration::QueryRewriteOrchestrator *this, const QRRequest *a2, uint64_t a3, int a4, int a5)
{
  NSObject *v8;
  os_signpost_id_t v9;
  std::chrono::steady_clock::time_point v10;
  NSObject *v11;
  int v12;
  int v13;
  unint64_t var0_high;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type size;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  std::string::size_type v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::string::size_type v42;
  std::string::size_type v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  std::string::size_type v70;
  uint64_t v71;
  std::string::size_type v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  NSObject *v105;
  NSObject *v106;
  NSObject *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  std::vector<std::string>::pointer v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  std::string *v123;
  std::string *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  std::string *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  std::string::__raw *v136;
  uint64_t v137;
  __int128 v138;
  float v139;
  std::string::size_type v140;
  std::string::size_type v141;
  char v142;
  int v143;
  const std::string::value_type *v144;
  std::string::size_type v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  std::string::size_type v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  os_signpost_id_t v164;
  std::string::size_type v165;
  unint64_t v166;
  std::string::size_type v167;
  uint64_t v168;
  unint64_t v169;
  unsigned __int8 *v170;
  unsigned __int8 **v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  int v175;
  unsigned __int8 *v176;
  int v177;
  NSObject *v178;
  marrs::qr::orchestration::QueryRewriteOrchestrator *v179;
  unint64_t v180;
  unint64_t v181;
  std::string *v182;
  __int128 v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  marrs::qr::orchestration::QueryRewriteOrchestrator *v191;
  std::string::size_type v192;
  std::string *v193;
  __int128 v194;
  double *v195;
  NSObject *v196;
  __int128 *v197;
  std::chrono::steady_clock::time_point v198;
  std::chrono::steady_clock::time_point v199;
  std::string *v200;
  __int128 v201;
  std::string *v202;
  __int128 v203;
  std::string *v204;
  __int128 v205;
  std::string *v206;
  std::string::size_type v207;
  std::string *v208;
  __int128 v209;
  std::string *v210;
  __int128 v211;
  std::string *v212;
  __int128 v213;
  std::string *v214;
  std::string::size_type v215;
  std::string *v216;
  __int128 v217;
  std::string *v218;
  __int128 v219;
  std::string *v220;
  __int128 v221;
  std::string *v222;
  std::string::size_type v223;
  std::string *v224;
  __int128 v225;
  std::string *v226;
  __int128 v227;
  std::string *v228;
  __int128 v229;
  std::string *v230;
  std::string::size_type v231;
  std::string *v232;
  __int128 v233;
  NSObject *v234;
  std::string *p_buf;
  std::chrono::steady_clock::time_point v236;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  int v238;
  int v239;
  std::chrono::steady_clock::time_point v240;
  const QRRequest *v241;
  std::chrono::steady_clock::time_point v242;
  NSObject *log;
  os_signpost_id_t spid;
  unint64_t v245;
  std::string::size_type v247;
  std::chrono::steady_clock::time_point v248;
  unint64_t var1_low;
  std::chrono::steady_clock::time_point v250;
  std::string::size_type v251;
  std::chrono::steady_clock::time_point v252;
  int v253;
  int v254;
  uint64_t v256;
  QRInteraction **p_var1;
  int var0_low;
  uint64_t v259;
  int v260[4];
  uint64_t *v261;
  std::string v262;
  std::string v263;
  std::string v264;
  std::string v265;
  std::string v266;
  std::string v267;
  std::string v268;
  std::string v269;
  std::string v270;
  std::string v271;
  std::string v272;
  __int128 v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  char *v277;
  void **v278;
  uint64_t *v279;
  uint64_t v280;
  _QWORD v281[3];
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  unint64_t *v286;
  uint64_t v287;
  _QWORD v288[3];
  std::string v289;
  std::string v290;
  std::string v291;
  std::string *v292;
  void *v293;
  unint64_t v294;
  void *v295;
  uint64_t *v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  _BYTE v302[32];
  std::string v303;
  unint64_t v304;
  char *v305;
  std::string v306;
  uint64_t v307;
  std::string buf;
  __int128 v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  char v317;
  __int128 __p;
  uint64_t v319;
  _BYTE v320[32];
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;

  v325 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 14) = 4;
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1)
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_4);
  v8 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  v9 = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4)) > 1)
  {
    rep = v10.__d_.__rep_;
    v245 = v9 - 1;
    if (v9 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v236.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    }
    else
    {
      if (os_signpost_enabled(v8))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C281A000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Total", "CCQRAer total duration", (uint8_t *)&buf, 2u);
      }
      v236.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (os_signpost_enabled(v8))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C281A000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "PreProcessDuration", "CCQRAer PreProcessing duration", (uint8_t *)&buf, 2u);
      }
    }
    v238 = a4;
    v239 = a5;
    spid = v9;
    v242.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    memset(v288, 0, sizeof(v288));
    v286 = 0;
    v285 = 0;
    v287 = 0;
    v283 = 0;
    v282 = 0;
    v284 = 0;
    memset(v281, 0, sizeof(v281));
    v279 = 0;
    v278 = 0;
    v280 = 0;
    var0_low = LOBYTE(a2[7].var1.var0);
    v12 = BYTE1(a2[7].var1.var0);
    v13 = BYTE2(a2[7].var1.var0);
    var0_high = SHIDWORD(a2[7].var1.var0);
    var1_low = SLODWORD(a2[7].var1.var1);
    std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::__optional_destruct_base[abi:ne180100]<marrs::qr::processing::Vocab&>((uint64_t)&v298, (uint64_t)&a2[4].var1);
    memset(&v303, 0, sizeof(v303));
    v296 = 0;
    v295 = 0;
    v297 = 0;
    v293 = 0;
    v292 = 0;
    v294 = 0;
    v15 = *(_QWORD *)(a3 + 8);
    v16 = *(_QWORD *)(a3 + 16) - v15;
    v241 = a2;
    log = v8;
    v253 = v13;
    v254 = v12;
    if (v16)
    {
      v17 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 4);
      marrs::qr::processing::filterTokensForAER((uint64_t *)&v291, *(marrs::qr::orchestration::QRToken **)(*(_QWORD *)(v15 + 112 * (v17 - 1)) + 40), *(marrs::qr::orchestration::QRToken **)(*(_QWORD *)(v15 + 112 * (v17 - 1)) + 48), v12 != 0, v13 != 0);
      std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v303, v303.__r_.__value_.__l.__size_, (std::string *)v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 5));
      std::string::basic_string[abi:ne180100]<0>(&v273, "[EOS]");
      std::string::basic_string[abi:ne180100]<0>(&v290, "[EOS]");
      std::string::basic_string[abi:ne180100]<0>(&v306, "[EOS]");
      memset(&v289, 0, sizeof(v289));
      v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      v272.__r_.__value_.__s.__data_[8] = 0;
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v289.__r_.__value_.__l.__size_ = v289.__r_.__value_.__r.__words[0];
      v289.__r_.__value_.__r.__words[2] = v289.__r_.__value_.__r.__words[0] + 24;
      v289.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289.__r_.__value_.__r.__words[2], (__int128 *)&v306, (__int128 *)&v307, (std::string *)v289.__r_.__value_.__l.__data_);
      marrs::qr::orchestration::QRToken::QRToken(&buf, &v273, (__int128 *)&v290, (__int128 **)&v289, 0, 0);
      size = v303.__r_.__value_.__l.__size_;
      if (v303.__r_.__value_.__l.__size_ >= v303.__r_.__value_.__r.__words[2])
      {
        v303.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v303, (__int128 *)&buf);
        if (SHIBYTE(v319) < 0)
          operator delete((void *)__p);
      }
      else
      {
        v19 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_QWORD *)(v303.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)size = v19;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        v20 = v310;
        *(_OWORD *)(size + 24) = v309;
        *(_QWORD *)(size + 40) = v20;
        *(_QWORD *)(size + 48) = 0;
        buf.__r_.__value_.__r.__words[2] = 0;
        v309 = 0uLL;
        v310 = 0;
        *(_QWORD *)(size + 56) = 0;
        *(_QWORD *)(size + 64) = 0;
        *(_OWORD *)(size + 48) = v311;
        *(_QWORD *)(size + 64) = v312;
        v311 = 0uLL;
        v21 = v313;
        *(_OWORD *)(size + 88) = v314;
        *(_OWORD *)(size + 72) = v21;
        v22 = v315;
        *(_QWORD *)(size + 120) = v316;
        *(_OWORD *)(size + 104) = v22;
        v316 = 0;
        v312 = 0;
        v315 = 0uLL;
        *(_BYTE *)(size + 128) = v317;
        v23 = __p;
        *(_QWORD *)(size + 152) = v319;
        *(_OWORD *)(size + 136) = v23;
        v319 = 0;
        __p = 0uLL;
        v303.__r_.__value_.__l.__size_ = size + 160;
      }
      if (SHIBYTE(v316) < 0)
        operator delete((void *)v315);
      v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
      if (SHIBYTE(v310) < 0)
        operator delete((void *)v309);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
      if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v306.__r_.__value_.__l.__data_);
      if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v290.__r_.__value_.__l.__data_);
      p_var1 = &a2->var1.var1;
      if (SHIBYTE(v274) < 0)
        operator delete((void *)v273);
      if (v17 - 1 <= var0_high)
        v24 = var0_high;
      else
        v24 = v17 - 1;
      v25 = 112 * v17;
      v26 = v17 + var0_high - v24;
      while (--v26)
      {
        std::string::basic_string[abi:ne180100]<0>(&v273, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(&v290, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(&v306, "[SOQ]");
        memset(&v289, 0, sizeof(v289));
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v272.__r_.__value_.__s.__data_[8] = 0;
        v289.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v289.__r_.__value_.__l.__size_ = v289.__r_.__value_.__r.__words[0];
        v289.__r_.__value_.__r.__words[2] = v289.__r_.__value_.__r.__words[0] + 24;
        v289.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289.__r_.__value_.__r.__words[2], (__int128 *)&v306, (__int128 *)&v307, (std::string *)v289.__r_.__value_.__l.__data_);
        marrs::qr::orchestration::QRToken::QRToken(&buf, &v273, (__int128 *)&v290, (__int128 **)&v289, 0, 0);
        v27 = v303.__r_.__value_.__l.__size_;
        if (v303.__r_.__value_.__l.__size_ >= v303.__r_.__value_.__r.__words[2])
        {
          v303.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v303, (__int128 *)&buf);
          if (SHIBYTE(v319) < 0)
            operator delete((void *)__p);
        }
        else
        {
          v28 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(_QWORD *)(v303.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)v27 = v28;
          memset(&buf, 0, sizeof(buf));
          v29 = v310;
          *(_OWORD *)(v27 + 24) = v309;
          *(_QWORD *)(v27 + 40) = v29;
          *(_QWORD *)(v27 + 48) = 0;
          v310 = 0;
          v309 = 0uLL;
          *(_QWORD *)(v27 + 56) = 0;
          *(_QWORD *)(v27 + 64) = 0;
          *(_OWORD *)(v27 + 48) = v311;
          *(_QWORD *)(v27 + 64) = v312;
          v311 = 0uLL;
          v312 = 0;
          v30 = v313;
          *(_OWORD *)(v27 + 88) = v314;
          *(_OWORD *)(v27 + 72) = v30;
          v31 = v315;
          *(_QWORD *)(v27 + 120) = v316;
          *(_OWORD *)(v27 + 104) = v31;
          v316 = 0;
          v315 = 0uLL;
          *(_BYTE *)(v27 + 128) = v317;
          v32 = __p;
          *(_QWORD *)(v27 + 152) = v319;
          *(_OWORD *)(v27 + 136) = v32;
          v319 = 0;
          __p = 0uLL;
          v303.__r_.__value_.__l.__size_ = v27 + 160;
        }
        if (SHIBYTE(v316) < 0)
          operator delete((void *)v315);
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v310) < 0)
          operator delete((void *)v309);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v306.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        if (SHIBYTE(v274) < 0)
          operator delete((void *)v273);
        v33 = *(_QWORD *)(a3 + 8) + v25;
        v34 = v33 - 200;
        v35 = v33 - 224;
        if (var0_low)
          v35 = v34;
        marrs::qr::processing::filterTokensForAER((uint64_t *)&buf, *(marrs::qr::orchestration::QRToken **)(*(_QWORD *)v35 + 40), *(marrs::qr::orchestration::QRToken **)(*(_QWORD *)v35 + 48), v12 != 0, v13 != 0);
        std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate((void **)&v291.__r_.__value_.__l.__data_);
        v291 = buf;
        memset(&buf, 0, sizeof(buf));
        *(_QWORD *)&v273 = &buf;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
        std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v303, v303.__r_.__value_.__l.__size_, (std::string *)v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 5));
        std::string::basic_string[abi:ne180100]<0>(&v273, "[SOR]");
        std::string::basic_string[abi:ne180100]<0>(&v290, "[SOR]");
        std::string::basic_string[abi:ne180100]<0>(&v306, "[SOR]");
        memset(&v289, 0, sizeof(v289));
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v272.__r_.__value_.__s.__data_[8] = 0;
        v289.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v289.__r_.__value_.__l.__size_ = v289.__r_.__value_.__r.__words[0];
        v289.__r_.__value_.__r.__words[2] = v289.__r_.__value_.__r.__words[0] + 24;
        v289.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289.__r_.__value_.__r.__words[2], (__int128 *)&v306, (__int128 *)&v307, (std::string *)v289.__r_.__value_.__l.__data_);
        marrs::qr::orchestration::QRToken::QRToken(&buf, &v273, (__int128 *)&v290, (__int128 **)&v289, 0, 0);
        v36 = v303.__r_.__value_.__l.__size_;
        if (v303.__r_.__value_.__l.__size_ >= v303.__r_.__value_.__r.__words[2])
        {
          v303.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v303, (__int128 *)&buf);
          if (SHIBYTE(v319) < 0)
            operator delete((void *)__p);
        }
        else
        {
          v37 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(_QWORD *)(v303.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)v36 = v37;
          memset(&buf, 0, sizeof(buf));
          v38 = v310;
          *(_OWORD *)(v36 + 24) = v309;
          *(_QWORD *)(v36 + 40) = v38;
          *(_QWORD *)(v36 + 48) = 0;
          v310 = 0;
          v309 = 0uLL;
          *(_QWORD *)(v36 + 56) = 0;
          *(_QWORD *)(v36 + 64) = 0;
          *(_OWORD *)(v36 + 48) = v311;
          *(_QWORD *)(v36 + 64) = v312;
          v311 = 0uLL;
          v312 = 0;
          v39 = v313;
          *(_OWORD *)(v36 + 88) = v314;
          *(_OWORD *)(v36 + 72) = v39;
          v40 = v315;
          *(_QWORD *)(v36 + 120) = v316;
          *(_OWORD *)(v36 + 104) = v40;
          v316 = 0;
          v315 = 0uLL;
          *(_BYTE *)(v36 + 128) = v317;
          v41 = __p;
          *(_QWORD *)(v36 + 152) = v319;
          *(_OWORD *)(v36 + 136) = v41;
          v319 = 0;
          __p = 0uLL;
          v303.__r_.__value_.__l.__size_ = v36 + 160;
        }
        if (SHIBYTE(v316) < 0)
          operator delete((void *)v315);
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v310) < 0)
          operator delete((void *)v309);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v306.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        if (SHIBYTE(v274) < 0)
          operator delete((void *)v273);
        marrs::qr::processing::filterTokensForAER((uint64_t *)&buf, *(marrs::qr::orchestration::QRToken **)(*(_QWORD *)(a3 + 8) + v25 - 176), *(marrs::qr::orchestration::QRToken **)(*(_QWORD *)(a3 + 8) + v25 - 168), v12 != 0, v13 != 0);
        v25 -= 112;
        std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate((void **)&v291.__r_.__value_.__l.__data_);
        v291 = buf;
        memset(&buf, 0, sizeof(buf));
        *(_QWORD *)&v273 = &buf;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
        std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v303, v303.__r_.__value_.__l.__size_, (std::string *)v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 5));
      }
      marrs::qr::processing::getFlattenedNormalizedValuesIndices(&buf, (uint64_t *)&v303, p_var1);
      *(_QWORD *)&v273 = &v295;
      *((_QWORD *)&v273 + 1) = &v292;
      std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<unsigned long> &,std::vector<std::vector<unsigned long>> &>,std::tuple<std::vector<unsigned long>,std::vector<std::vector<unsigned long>>>,0ul,1ul>((uint64_t)&v273, (uint64_t)&buf);
      *(_QWORD *)&v273 = &v309;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      memset(&v290, 0, sizeof(v290));
      v247 = v303.__r_.__value_.__l.__size_;
      if (v303.__r_.__value_.__r.__words[0] == v303.__r_.__value_.__l.__size_)
      {
        v72 = 0;
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v43 = v303.__r_.__value_.__r.__words[0];
        do
        {
          v251 = v43;
          v45 = *(_QWORD *)(v43 + 48);
          v44 = *(_QWORD *)(v43 + 56);
          v259 = v44;
          while (v45 != v44)
          {
            v46 = *(unsigned __int8 *)(v45 + 23);
            if ((v46 & 0x80u) == 0)
              v47 = (unsigned __int8 *)v45;
            else
              v47 = *(unsigned __int8 **)v45;
            v48 = 0;
            if ((v46 & 0x80u) != 0)
              v46 = *(_QWORD *)(v45 + 8);
            if (v46)
            {
              v49 = &v47[v46];
              *(_OWORD *)v260 = 0u;
              while (1)
              {
                v50 = *v47;
                HIBYTE(v274) = 1;
                LOWORD(v273) = v50;
                v51 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&v273);
                if (!v51)
                  break;
                v52 = *((_QWORD *)v51 + 5);
LABEL_94:
                v56 = *(_QWORD *)&v260[2];
                if (*(_QWORD *)&v260[2] >= v48)
                {
                  v58 = *(void **)v260;
                  v59 = (uint64_t)(*(_QWORD *)&v260[2] - *(_QWORD *)v260) >> 3;
                  v60 = v59 + 1;
                  if ((unint64_t)(v59 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v48 - *(_QWORD *)v260) >> 2 > v60)
                    v60 = (uint64_t)(v48 - *(_QWORD *)v260) >> 2;
                  if (v48 - *(_QWORD *)v260 >= 0x7FFFFFFFFFFFFFF8)
                    v61 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v61 = v60;
                  if (v61)
                    v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v61);
                  else
                    v62 = 0;
                  v63 = (_QWORD *)(v61 + 8 * v59);
                  *v63 = v52;
                  v57 = (uint64_t)(v63 + 1);
                  while (v56 != *(_QWORD *)v260)
                  {
                    v64 = *(_QWORD *)(v56 - 8);
                    v56 -= 8;
                    *--v63 = v64;
                  }
                  v48 = v61 + 8 * v62;
                  *(_QWORD *)v260 = v63;
                  if (v58)
                    operator delete(v58);
                }
                else
                {
                  **(_QWORD **)&v260[2] = v52;
                  v57 = *(_QWORD *)&v260[2] + 8;
                }
                if (SHIBYTE(v274) < 0)
                  operator delete((void *)v273);
                *(_QWORD *)&v65 = *(_QWORD *)v260;
                *((_QWORD *)&v65 + 1) = v57;
                *(_OWORD *)v260 = v65;
                if (++v47 == v49)
                {
                  v42 = v290.__r_.__value_.__l.__size_;
                  goto LABEL_115;
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&buf, "[OOV]");
              v53 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&buf);
              v54 = v53;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(buf.__r_.__value_.__l.__data_);
                if (v54)
                  goto LABEL_88;
              }
              else if (v53)
              {
LABEL_88:
                std::string::basic_string[abi:ne180100]<0>(&buf, "[OOV]");
                v55 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&buf);
                if (!v55)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
LABEL_92:
                v52 = *((_QWORD *)v55 + 5);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
                goto LABEL_94;
              }
              std::string::basic_string[abi:ne180100]<0>(&buf, "*");
              v55 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&buf);
              if (!v55)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              goto LABEL_92;
            }
            *(_OWORD *)v260 = 0u;
LABEL_115:
            if (v42 >= v290.__r_.__value_.__r.__words[2])
            {
              v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v290.__r_.__value_.__r.__words[0]) >> 3);
              v67 = v66 + 1;
              if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556
                 * ((uint64_t)(v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0]) >> 3) > v67)
                v67 = 0x5555555555555556
                    * ((uint64_t)(v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                v68 = 0xAAAAAAAAAAAAAAALL;
              else
                v68 = v67;
              *((_QWORD *)&v309 + 1) = (char *)&v290.__r_.__value_.__l + 16;
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v68);
              v70 = (std::string::size_type)&v69[24 * v66];
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
              buf.__r_.__value_.__l.__size_ = v70;
              *(_QWORD *)&v309 = &v69[24 * v71];
              *(_OWORD *)v70 = *(_OWORD *)v260;
              *(_QWORD *)(v70 + 16) = v48;
              buf.__r_.__value_.__r.__words[2] = v70 + 24;
              std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v290, &buf);
              v42 = v290.__r_.__value_.__l.__size_;
              std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              *(_OWORD *)v42 = *(_OWORD *)v260;
              *(_QWORD *)(v42 + 16) = v48;
              v42 += 24;
            }
            v290.__r_.__value_.__l.__size_ = v42;
            v45 += 24;
            v44 = v259;
          }
          v43 = v251 + 160;
        }
        while (v251 + 160 != v247);
        v72 = v290.__r_.__value_.__r.__words[0];
      }
      v73 = *((_QWORD *)&v299 + 1);
      memset(&v289, 0, sizeof(v289));
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      buf.__r_.__value_.__s.__data_[8] = 0;
      v74 = v42 - v72;
      a2 = v241;
      if (v42 != v72)
      {
        v75 = 0xAAAAAAAAAAAAAAABLL * (v74 >> 3);
        if (v75 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v76 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(0xAAAAAAAAAAAAAAABLL * (v74 >> 3));
        v289.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
        v289.__r_.__value_.__r.__words[2] = (std::string::size_type)v76 + 24 * v77;
        v78 = 24 * ((v74 - 24) / 0x18uLL) + 24;
        bzero(v76, v78);
        v79 = 0;
        v289.__r_.__value_.__l.__size_ = (std::string::size_type)v76 + v78;
        if (v75 <= 1)
          v80 = 1;
        else
          v80 = v75;
        do
        {
          if ((uint64_t)(*(_QWORD *)(v290.__r_.__value_.__r.__words[0] + 24 * v79 + 8)
                       - *(_QWORD *)(v290.__r_.__value_.__r.__words[0] + 24 * v79)) >> 3 >= var1_low)
            v81 = var1_low;
          else
            v81 = (uint64_t)(*(_QWORD *)(v290.__r_.__value_.__r.__words[0] + 24 * v79 + 8)
                          - *(_QWORD *)(v290.__r_.__value_.__r.__words[0] + 24 * v79)) >> 3;
          LODWORD(v272.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::vector(&v273, v73, &v272);
          std::vector<std::vector<float>>::vector(&buf, v81, (uint64_t)&v273);
          v82 = (uint64_t *)(v289.__r_.__value_.__r.__words[0] + 24 * v79);
          std::vector<std::vector<float>>::__vdeallocate(v82);
          *(std::string *)v82 = buf;
          memset(&buf, 0, sizeof(buf));
          v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
          if ((_QWORD)v273)
          {
            *((_QWORD *)&v273 + 1) = v273;
            operator delete((void *)v273);
          }
          if (v81)
          {
            v83 = *(uint64_t **)(v289.__r_.__value_.__r.__words[0] + 24 * v79);
            v84 = *(uint64_t **)(v290.__r_.__value_.__r.__words[0] + 24 * v79);
            do
            {
              v86 = *v84++;
              v85 = v86;
              v87 = *v83;
              v83 += 3;
              *(_DWORD *)(v87 + 4 * v85) = 1065353216;
              --v81;
            }
            while (v81);
          }
          ++v79;
        }
        while (v79 != v80);
      }
      memset(v320, 0, 24);
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v320, (uint64_t)v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0]) >> 5));
      *(_QWORD *)&v320[24] = 0;
      v321 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v320[24], v295, (uint64_t)v296, ((char *)v296 - (_BYTE *)v295) >> 3);
      v322 = 0uLL;
      *(_QWORD *)&v323 = 0;
      std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v322, (uint64_t)v292, (uint64_t)v293, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v293 - (_BYTE *)v292) >> 3));
      *((_QWORD *)&v323 + 1) = 0;
      v324 = 0uLL;
      v88 = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323 + 8;
      buf.__r_.__value_.__s.__data_[8] = 0;
      if (v289.__r_.__value_.__l.__size_ != v289.__r_.__value_.__r.__words[0])
      {
        v89 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v289.__r_.__value_.__l.__size_ - v289.__r_.__value_.__r.__words[0]) >> 3);
        if (v89 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        *((_QWORD *)&v323 + 1) = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v89);
        *(_QWORD *)&v324 = *((_QWORD *)&v323 + 1);
        *((_QWORD *)&v324 + 1) = *((_QWORD *)&v323 + 1) + 24 * v90;
        *(_QWORD *)&v324 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>((uint64_t)&v324 + 8, (uint64_t *)v88, *((uint64_t **)&v88 + 1), *((_QWORD **)&v323 + 1));
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
      std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
    else
    {
      v323 = 0u;
      v324 = 0u;
      v321 = 0u;
      v322 = 0u;
      memset(v320, 0, sizeof(v320));
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (v295)
    {
      v296 = (uint64_t *)v295;
      operator delete(v295);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
    std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)v288, *(std::string **)v320, *(std::string **)&v320[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v320[8] - *(_QWORD *)v320) >> 5));
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v285, *(char **)&v320[24], v321, (uint64_t)(v321 - *(_QWORD *)&v320[24]) >> 3);
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v282, v322, *((uint64_t *)&v322 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v322 + 1) - v322) >> 3));
    v92 = (uint64_t *)*((_QWORD *)&v323 + 1);
    v91 = (uint64_t *)v324;
    v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v324 - *((_QWORD *)&v323 + 1)) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v280 - (uint64_t)v278) >> 3) >= v93)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v279 - (char *)v278) >> 3) >= v93)
      {
        v98 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<float>> *,std::vector<std::vector<float>> *,std::vector<std::vector<float>> *>(*((uint64_t **)&v323 + 1), (uint64_t *)v324, (uint64_t *)v278);
        v99 = v279;
        while (v99 != v98)
        {
          v99 -= 3;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        }
        v279 = v98;
LABEL_163:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323 + 8;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v322;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (*(_QWORD *)&v320[24])
        {
          *(_QWORD *)&v321 = *(_QWORD *)&v320[24];
          operator delete(*(void **)&v320[24]);
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v320;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v298);
        v274 = 0;
        v273 = 0uLL;
        std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&v273, (unint64_t *)v285, v286, ((char *)v286 - (_BYTE *)v285) >> 3);
        v100 = (uint64_t *)v278;
        v101 = v279;
        v276 = 0;
        v277 = 0;
        v275 = 0;
        *(_QWORD *)v320 = &v275;
        v320[8] = 0;
        if (v279 != (uint64_t *)v278)
        {
          v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v279 - (char *)v278) >> 3);
          if (v102 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v275 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v102);
          v276 = v275;
          v277 = (char *)&v275[3 * v103];
          *(_QWORD *)&v298 = v275;
          v303.__r_.__value_.__r.__words[0] = (std::string::size_type)v275;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v303;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v298;
          LOBYTE(v309) = 0;
          v104 = v275;
          do
          {
            *v104 = 0;
            v104[1] = 0;
            v104[2] = 0;
            std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v104, *v100, v100[1], 0xAAAAAAAAAAAAAAABLL * ((v100[1] - *v100) >> 3));
            v104 = (_QWORD *)(v298 + 24);
            *(_QWORD *)&v298 = v298 + 24;
            v100 += 3;
          }
          while (v100 != v101);
          LOBYTE(v309) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&buf);
          v276 = v104;
        }
        if (v245 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v252.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v105 = log;
        }
        else
        {
          v105 = log;
          if (os_signpost_enabled(log))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_END, spid, "PreProcessDuration", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
          }
          v252.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (os_signpost_enabled(log))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_BEGIN, spid, "ForwardDuration", "CCQRAer Inference duration", (uint8_t *)&buf, 2u);
          }
        }
        v250.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v106 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Handle";
          _os_log_debug_impl(&dword_1C281A000, v106, OS_LOG_TYPE_DEBUG, "%s #CCQRAer inference started.", (uint8_t *)&buf, 0xCu);
        }
        marrs::qr::inference_engine::EspressoQueryRewriteModel::forward((marrs::qr::inference_engine::EspressoQueryRewriteModel *)&v295, (std::chrono::steady_clock::time_point *)a2->var1.var0, (uint64_t)&v273, v238, v239);
        v107 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Handle";
          _os_log_debug_impl(&dword_1C281A000, v107, OS_LOG_TYPE_DEBUG, "%s #CCQRAer inference ended.", (uint8_t *)&buf, 0xCu);
        }
        if (v245 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v248.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        }
        else
        {
          if (os_signpost_enabled(v105))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C281A000, v105, OS_SIGNPOST_INTERVAL_END, spid, "ForwardDuration", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
          }
          v248.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (os_signpost_enabled(v105))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C281A000, v105, OS_SIGNPOST_INTERVAL_BEGIN, spid, "PostProcessDuration", "CCQRAer PostProcessing duration", (uint8_t *)&buf, 2u);
          }
        }
        v240.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v293 = 0;
        v292 = 0;
        v294 = 0;
        memset(&v291, 0, sizeof(v291));
        v108 = (uint64_t *)v295;
        v261 = v296;
        if (v295 != v296)
        {
          while (1)
          {
            memset(&buf, 0, sizeof(buf));
            v109 = *v108;
            v110 = v108[1] - *v108;
            if (v110)
            {
              v111 = 0;
              v112 = 0;
              v113 = v110 >> 3;
              do
              {
                v114 = v112 + 1;
                v115 = *(_QWORD *)(v109 + 8 * v112);
                v116 = 0xAAAAAAAAAAAAAAABLL * ((v283 - v282) >> 3);
                if (v115 < v116)
                {
                  if (v114 < v113)
                  {
                    v117 = v112;
                    while (1)
                    {
                      v118 = *(_QWORD *)(v109 + 8 * v117 + 8);
                      if (v118 >= v116 || *(_QWORD *)(v109 + 8 * v117) != v118 - 1)
                        break;
                      if (**(_QWORD **)(v282 + 24 * v118) != **(_QWORD **)(v282 + 24 * v115))
                      {
                        v114 = v117 + 1;
                        break;
                      }
                      ++v114;
                      if (v113 - 1 == ++v117)
                      {
                        v114 = v113;
                        break;
                      }
                    }
                  }
                  v119 = v288[0] + 160 * **(_QWORD **)(v282 + 24 * v115);
                  if (v114 - v112 == 0xAAAAAAAAAAAAAAABLL
                                    * ((uint64_t)(*(_QWORD *)(v119 + 56) - *(_QWORD *)(v119 + 48)) >> 3))
                  {
                    if ((char *)std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>((const void **)(v288[0] + 160 * **(_QWORD **)(v282 + 24 * v115)))
                       - (char *)&marrs::qr::processing::Vocab::reservedTokens == 112)
                    {
                      if ((unint64_t)v111 >= buf.__r_.__value_.__r.__words[2])
                      {
                        v111 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)&buf, (__int128 *)v119);
                      }
                      else
                      {
                        if (*(char *)(v119 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v111, *(const std::string::value_type **)v119, *(_QWORD *)(v119 + 8));
                        }
                        else
                        {
                          v120 = *(_OWORD *)v119;
                          v111->__r_.__value_.__r.__words[2] = *(_QWORD *)(v119 + 16);
                          *(_OWORD *)&v111->__r_.__value_.__l.__data_ = v120;
                        }
                        ++v111;
                      }
                      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
                    }
                  }
                  else if (v114 > v112)
                  {
                    do
                    {
                      v121 = *(_QWORD *)(v119 + 48)
                           + 24 * *(_QWORD *)(*(_QWORD *)(v282 + 24 * *(_QWORD *)(*v108 + 8 * v112)) + 8);
                      if ((unint64_t)v111 >= buf.__r_.__value_.__r.__words[2])
                      {
                        v111 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)&buf, (__int128 *)v121);
                      }
                      else
                      {
                        if (*(char *)(v121 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v111, *(const std::string::value_type **)v121, *(_QWORD *)(v121 + 8));
                        }
                        else
                        {
                          v122 = *(_OWORD *)v121;
                          v111->__r_.__value_.__r.__words[2] = *(_QWORD *)(v121 + 16);
                          *(_OWORD *)&v111->__r_.__value_.__l.__data_ = v122;
                        }
                        ++v111;
                      }
                      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
                      ++v112;
                    }
                    while (v114 != v112);
                  }
                }
                v109 = *v108;
                v113 = (v108[1] - *v108) >> 3;
                v112 = v114;
              }
              while (v114 < v113);
            }
            v123 = (std::string *)v293;
            if ((unint64_t)v293 >= v294)
            {
              v125 = (uint64_t)v292;
              v126 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v293 - (_BYTE *)v292) >> 3);
              v127 = v126 + 1;
              if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v294 - (_QWORD)v292) >> 3) > v127)
                v127 = 0x5555555555555556 * ((uint64_t)(v294 - (_QWORD)v292) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v294 - (_QWORD)v292) >> 3) >= 0x555555555555555)
                v128 = 0xAAAAAAAAAAAAAAALL;
              else
                v128 = v127;
              if (v128 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v129 = (char *)operator new(24 * v128);
              v130 = (std::string *)&v129[24 * v126];
              *v130 = buf;
              memset(&buf, 0, sizeof(buf));
              v124 = v130 + 1;
              if (v123 == (std::string *)v125)
              {
                v292 = v130;
                v293 = &v130[1];
                v294 = (unint64_t)&v129[24 * v128];
                if (!v123)
                  goto LABEL_233;
              }
              else
              {
                do
                {
                  v130[-1].__r_.__value_.__r.__words[0] = 0;
                  v130[-1].__r_.__value_.__l.__size_ = 0;
                  --v130;
                  v130->__r_.__value_.__r.__words[2] = 0;
                  v131 = *(_OWORD *)&v123[-1].__r_.__value_.__l.__data_;
                  --v123;
                  *(_OWORD *)&v130->__r_.__value_.__l.__data_ = v131;
                  v130->__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                  v123->__r_.__value_.__r.__words[0] = 0;
                  v123->__r_.__value_.__l.__size_ = 0;
                  v123->__r_.__value_.__r.__words[2] = 0;
                }
                while (v123 != (std::string *)v125);
                v132 = (uint64_t)v292;
                v123 = (std::string *)v293;
                v292 = v130;
                v293 = v124;
                v294 = (unint64_t)&v129[24 * v128];
                if (v123 != (std::string *)v132)
                {
                  do
                  {
                    *(_QWORD *)v320 = --v123;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v320);
                  }
                  while (v123 != (std::string *)v132);
                  v123 = (std::string *)v132;
                }
                if (!v123)
                  goto LABEL_233;
              }
              operator delete(v123);
            }
            else
            {
              *(_QWORD *)v293 = 0;
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              *v123 = buf;
              memset(&buf, 0, sizeof(buf));
              v124 = v123 + 1;
            }
LABEL_233:
            v293 = v124;
            *(_QWORD *)v320 = &buf;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v320);
            v108 += 4;
            if (v108 == v261)
            {
              v133 = (uint64_t *)v295;
              v134 = v296;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
              if (v295 != v296)
              {
                do
                {
                  *(_DWORD *)v320 = *((_DWORD *)v133 + 6);
                  std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&buf, v320);
                  v133 += 4;
                }
                while (v133 != v134);
              }
              break;
            }
          }
        }
        v135 = *(_QWORD *)(a3 + 16);
        v136 = (std::string::__raw *)v292;
        v137 = *(_QWORD *)(v135 - 112);
        *(_OWORD *)v320 = *(_OWORD *)v137;
        if (*(char *)(v137 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v320[16], *(const std::string::value_type **)(v137 + 16), *(_QWORD *)(v137 + 24));
        }
        else
        {
          v138 = *(_OWORD *)(v137 + 16);
          *(_QWORD *)&v321 = *(_QWORD *)(v137 + 32);
          *(_OWORD *)&v320[16] = v138;
        }
        *((_QWORD *)&v321 + 1) = 0;
        v322 = 0uLL;
        std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((_QWORD *)&v321 + 1, *(_QWORD *)(v137 + 40), *(_QWORD *)(v137 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v137 + 48) - *(_QWORD *)(v137 + 40)) >> 5));
        v256 = v135;
        v323 = 0uLL;
        *(_QWORD *)&v324 = 0;
        std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(&v323, *(_QWORD *)(v137 + 64), *(_QWORD *)(v137 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v137 + 72) - *(_QWORD *)(v137 + 64)) >> 5));
        *((_QWORD *)&v324 + 1) = *(_QWORD *)(v137 + 88);
        v139 = *(float *)v291.__r_.__value_.__l.__data_;
        memset(v302, 0, sizeof(v302));
        v300 = 0u;
        v301 = 0u;
        v299 = 0u;
        v140 = v136->__words[0];
        v141 = v136->__words[1];
        if (v136->__words[0] != v141)
        {
          v142 = 0;
          do
          {
            if ((v142 & 1) != 0)
              std::string::append((std::string *)&v299, " ");
            v143 = *(char *)(v140 + 23);
            if (v143 >= 0)
              v144 = (const std::string::value_type *)v140;
            else
              v144 = *(const std::string::value_type **)v140;
            if (v143 >= 0)
              v145 = *(unsigned __int8 *)(v140 + 23);
            else
              v145 = *(_QWORD *)(v140 + 8);
            std::string::append((std::string *)&v299, v144, v145);
            marrs::qr::orchestration::QRToken::QRToken(&buf, (__int128 *)v140);
            v146 = v301;
            if ((unint64_t)v301 >= *((_QWORD *)&v301 + 1))
            {
              v152 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v301 - *((_QWORD *)&v300 + 1)) >> 5);
              v153 = v152 + 1;
              if (v152 + 1 > 0x199999999999999)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v301 + 1) - *((_QWORD *)&v300 + 1)) >> 5) > v153)
                v153 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v301 + 1) - *((_QWORD *)&v300 + 1)) >> 5);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v301 + 1) - *((_QWORD *)&v300 + 1)) >> 5) >= 0xCCCCCCCCCCCCCCLL)
                v154 = 0x199999999999999;
              else
                v154 = v153;
              v305 = (char *)&v301 + 8;
              if (v154)
                v154 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v154);
              else
                v155 = 0;
              v156 = v154 + 160 * v152;
              v303.__r_.__value_.__r.__words[0] = v154;
              v303.__r_.__value_.__l.__size_ = v156;
              v304 = v154 + 160 * v155;
              v157 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(_QWORD *)(v156 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)v156 = v157;
              memset(&buf, 0, sizeof(buf));
              v158 = v309;
              *(_QWORD *)(v156 + 40) = v310;
              *(_OWORD *)(v156 + 24) = v158;
              v310 = 0;
              v309 = 0uLL;
              *(_QWORD *)(v156 + 48) = 0;
              *(_QWORD *)(v156 + 56) = 0;
              *(_QWORD *)(v156 + 64) = 0;
              *(_OWORD *)(v156 + 48) = v311;
              *(_QWORD *)(v156 + 64) = v312;
              v311 = 0uLL;
              v312 = 0;
              v159 = v313;
              *(_OWORD *)(v156 + 88) = v314;
              *(_OWORD *)(v156 + 72) = v159;
              v160 = v315;
              *(_QWORD *)(v156 + 120) = v316;
              *(_OWORD *)(v156 + 104) = v160;
              v316 = 0;
              v315 = 0uLL;
              *(_BYTE *)(v156 + 128) = v317;
              v161 = __p;
              *(_QWORD *)(v156 + 152) = v319;
              *(_OWORD *)(v156 + 136) = v161;
              v319 = 0;
              __p = 0uLL;
              v303.__r_.__value_.__r.__words[2] = v156 + 160;
              std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer((uint64_t *)&v300 + 1, &v303);
              v162 = v301;
              std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v303);
              *(_QWORD *)&v301 = v162;
              if (SHIBYTE(v319) < 0)
                operator delete((void *)__p);
            }
            else
            {
              v147 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(_QWORD *)(v301 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)v146 = v147;
              memset(&buf, 0, sizeof(buf));
              v148 = v310;
              *(_OWORD *)(v146 + 24) = v309;
              *(_QWORD *)(v146 + 40) = v148;
              *(_QWORD *)(v146 + 48) = 0;
              v310 = 0;
              v309 = 0uLL;
              *(_QWORD *)(v146 + 56) = 0;
              *(_QWORD *)(v146 + 64) = 0;
              *(_OWORD *)(v146 + 48) = v311;
              *(_QWORD *)(v146 + 64) = v312;
              v311 = 0uLL;
              v312 = 0;
              v149 = v313;
              *(_OWORD *)(v146 + 88) = v314;
              *(_OWORD *)(v146 + 72) = v149;
              v150 = v315;
              *(_QWORD *)(v146 + 120) = v316;
              *(_OWORD *)(v146 + 104) = v150;
              v316 = 0;
              v315 = 0uLL;
              *(_BYTE *)(v146 + 128) = v317;
              v151 = __p;
              *(_QWORD *)(v146 + 152) = v319;
              *(_OWORD *)(v146 + 136) = v151;
              v319 = 0;
              __p = 0uLL;
              *(_QWORD *)&v301 = v146 + 160;
            }
            if (SHIBYTE(v316) < 0)
              operator delete((void *)v315);
            v303.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
            if (SHIBYTE(v310) < 0)
              operator delete((void *)v309);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            v140 += 24;
            v142 = 1;
          }
          while (v140 != v141);
        }
        if (*(_QWORD *)(v256 - 104) == *(_QWORD *)(v256 - 112))
        {
          v164 = spid;
          v178 = QRLoggerForCategory(0);
          if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AppendOutput";
            _os_log_debug_impl(&dword_1C281A000, v178, OS_LOG_TYPE_DEBUG, "%s #CCQRAer No original utterance passed in.", (uint8_t *)&buf, 0xCu);
          }
          v177 = 1;
          v179 = this;
          goto LABEL_328;
        }
        v163 = BYTE7(v300);
        if (SBYTE7(v300) < 0)
          v163 = *((_QWORD *)&v299 + 1);
        v164 = spid;
        if (!v163)
        {
          v177 = 2;
          goto LABEL_304;
        }
        marrs::qr::processing::filterTokensForAER((uint64_t *)&buf, *((marrs::qr::orchestration::QRToken **)&v321 + 1), (marrs::qr::orchestration::QRToken *)v322, v254 != 0, v253 != 0);
        marrs::qr::processing::filterTokensForAER((uint64_t *)&v303, *((marrs::qr::orchestration::QRToken **)&v300 + 1), (marrs::qr::orchestration::QRToken *)v301, v254 != 0, v253 != 0);
        v165 = buf.__r_.__value_.__r.__words[0];
        v166 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5);
        v167 = v303.__r_.__value_.__r.__words[0];
        if (v166 == 0xCCCCCCCCCCCCCCCDLL
                   * ((uint64_t)(v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0]) >> 5))
        {
          if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[0])
          {
LABEL_297:
            v177 = 2;
LABEL_302:
            v290.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v290);
            v303.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
LABEL_304:
            v180 = *((_QWORD *)this + 2);
            v181 = *((_QWORD *)this + 1);
            if (v181 >= v180)
            {
              v184 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v181 - *(_QWORD *)this) >> 3);
              if ((unint64_t)(v184 + 1) > 0x492492492492492)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v185 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v180 - *(_QWORD *)this) >> 3);
              v186 = 2 * v185;
              if (2 * v185 <= v184 + 1)
                v186 = v184 + 1;
              if (v185 >= 0x249249249249249)
                v187 = 0x492492492492492;
              else
                v187 = v186;
              *((_QWORD *)&v309 + 1) = (char *)this + 16;
              if (v187)
              {
                v189 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v187);
              }
              else
              {
                v189 = 0;
                v188 = 0;
              }
              v192 = (std::string::size_type)&v189[56 * v184];
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
              buf.__r_.__value_.__l.__size_ = v192;
              buf.__r_.__value_.__r.__words[2] = v192;
              *(_QWORD *)&v309 = &v189[56 * v188];
              *(_OWORD *)v192 = *(_OWORD *)v320;
              v193 = (std::string *)(v192 + 16);
              if (SBYTE7(v300) < 0)
              {
                std::string::__init_copy_ctor_external(v193, (const std::string::value_type *)v299, *((std::string::size_type *)&v299 + 1));
                v192 = buf.__r_.__value_.__r.__words[2];
              }
              else
              {
                v194 = v299;
                *(_QWORD *)(v192 + 32) = v300;
                *(_OWORD *)&v193->__r_.__value_.__l.__data_ = v194;
              }
              v195 = (double *)&v189[56 * v184];
              v195[5] = v139;
              *((_DWORD *)v195 + 12) = 1;
              buf.__r_.__value_.__r.__words[2] = v192 + 56;
              v191 = this;
              std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer((uint64_t *)this, &buf);
              v190 = *((_QWORD *)this + 1);
              std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              *(_OWORD *)v181 = *(_OWORD *)v320;
              v182 = (std::string *)(v181 + 16);
              if (SBYTE7(v300) < 0)
              {
                std::string::__init_copy_ctor_external(v182, (const std::string::value_type *)v299, *((std::string::size_type *)&v299 + 1));
              }
              else
              {
                v183 = v299;
                *(_QWORD *)(v181 + 32) = v300;
                *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
              }
              *(double *)(v181 + 40) = v139;
              *(_DWORD *)(v181 + 48) = 1;
              v190 = v181 + 56;
              v191 = this;
              *((_QWORD *)this + 1) = v190;
            }
            *((_QWORD *)v191 + 1) = v190;
            v196 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v196, OS_LOG_TYPE_INFO))
            {
              if ((SBYTE7(v300) & 0x80u) == 0)
                v197 = &v299;
              else
                v197 = (__int128 *)v299;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AppendOutput";
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
              *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v139;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              *(_QWORD *)&v309 = v197;
              _os_log_impl(&dword_1C281A000, v196, OS_LOG_TYPE_INFO, "%s #CCQRAer Prob: %f Rewritten Utterance: %s", (uint8_t *)&buf, 0x20u);
            }
            v179 = this;
LABEL_328:
            *((_DWORD *)v179 + 14) = v177;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v302;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300 + 8;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (SBYTE7(v300) < 0)
              operator delete((void *)v299);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321 + 8;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (SBYTE7(v321) < 0)
              operator delete(*(void **)&v320[16]);
            if (v245 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              if (os_signpost_enabled(log))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_END, v164, "PostProcessDuration", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
              }
              if (os_signpost_enabled(log))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_END, v164, "Total", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
              }
            }
            marrs::qr::orchestration::QueryRewriteOrchestrator::doCoreAnalytics();
            v198.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v199.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            std::to_string(&v266, (double)((v236.__d_.__rep_ - rep) / 1000) / 1000.0);
            v200 = std::string::insert(&v266, 0, "[MARRS] Query Rewrite:\n      Binary Classifier ");
            v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
            v267.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v201;
            v200->__r_.__value_.__l.__size_ = 0;
            v200->__r_.__value_.__r.__words[2] = 0;
            v200->__r_.__value_.__r.__words[0] = 0;
            v202 = std::string::append(&v267, " ms\n");
            v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
            v268.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v203;
            v202->__r_.__value_.__l.__size_ = 0;
            v202->__r_.__value_.__r.__words[2] = 0;
            v202->__r_.__value_.__r.__words[0] = 0;
            v204 = std::string::append(&v268, "      Pre-processing: ");
            v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
            v269.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v205;
            v204->__r_.__value_.__l.__size_ = 0;
            v204->__r_.__value_.__r.__words[2] = 0;
            v204->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v265, (double)((v252.__d_.__rep_ - v242.__d_.__rep_) / 1000) / 1000.0);
            if ((v265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v206 = &v265;
            else
              v206 = (std::string *)v265.__r_.__value_.__r.__words[0];
            if ((v265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v207 = HIBYTE(v265.__r_.__value_.__r.__words[2]);
            else
              v207 = v265.__r_.__value_.__l.__size_;
            v208 = std::string::append(&v269, (const std::string::value_type *)v206, v207);
            v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
            v270.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v209;
            v208->__r_.__value_.__l.__size_ = 0;
            v208->__r_.__value_.__r.__words[2] = 0;
            v208->__r_.__value_.__r.__words[0] = 0;
            v210 = std::string::append(&v270, " ms\n");
            v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
            v271.__r_.__value_.__r.__words[2] = v210->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v211;
            v210->__r_.__value_.__l.__size_ = 0;
            v210->__r_.__value_.__r.__words[2] = 0;
            v210->__r_.__value_.__r.__words[0] = 0;
            v212 = std::string::append(&v271, "      Inference: ");
            v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
            v272.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v213;
            v212->__r_.__value_.__l.__size_ = 0;
            v212->__r_.__value_.__r.__words[2] = 0;
            v212->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v264, (double)((v248.__d_.__rep_ - v250.__d_.__rep_) / 1000) / 1000.0);
            if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v214 = &v264;
            else
              v214 = (std::string *)v264.__r_.__value_.__r.__words[0];
            if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v215 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
            else
              v215 = v264.__r_.__value_.__l.__size_;
            v216 = std::string::append(&v272, (const std::string::value_type *)v214, v215);
            v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
            v306.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v217;
            v216->__r_.__value_.__l.__size_ = 0;
            v216->__r_.__value_.__r.__words[2] = 0;
            v216->__r_.__value_.__r.__words[0] = 0;
            v218 = std::string::append(&v306, " ms\n");
            v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
            v289.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v219;
            v218->__r_.__value_.__l.__size_ = 0;
            v218->__r_.__value_.__r.__words[2] = 0;
            v218->__r_.__value_.__r.__words[0] = 0;
            v220 = std::string::append(&v289, "      Post-processing: ");
            v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
            v290.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v221;
            v220->__r_.__value_.__l.__size_ = 0;
            v220->__r_.__value_.__r.__words[2] = 0;
            v220->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v263, (double)((v198.__d_.__rep_ - v240.__d_.__rep_) / 1000) / 1000.0);
            if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v222 = &v263;
            else
              v222 = (std::string *)v263.__r_.__value_.__r.__words[0];
            if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v223 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
            else
              v223 = v263.__r_.__value_.__l.__size_;
            v224 = std::string::append(&v290, (const std::string::value_type *)v222, v223);
            v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
            v303.__r_.__value_.__r.__words[2] = v224->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v225;
            v224->__r_.__value_.__l.__size_ = 0;
            v224->__r_.__value_.__r.__words[2] = 0;
            v224->__r_.__value_.__r.__words[0] = 0;
            v226 = std::string::append(&v303, " ms\n");
            v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
            *(_QWORD *)&v299 = *((_QWORD *)&v226->__r_.__value_.__l + 2);
            v298 = v227;
            v226->__r_.__value_.__l.__size_ = 0;
            v226->__r_.__value_.__r.__words[2] = 0;
            v226->__r_.__value_.__r.__words[0] = 0;
            v228 = std::string::append((std::string *)&v298, "      Total Duration: ");
            v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
            *(_QWORD *)&v320[16] = *((_QWORD *)&v228->__r_.__value_.__l + 2);
            *(_OWORD *)v320 = v229;
            v228->__r_.__value_.__l.__size_ = 0;
            v228->__r_.__value_.__r.__words[2] = 0;
            v228->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v262, (double)((v199.__d_.__rep_ - v242.__d_.__rep_) / 1000) / 1000.0);
            if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v230 = &v262;
            else
              v230 = (std::string *)v262.__r_.__value_.__r.__words[0];
            if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v231 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
            else
              v231 = v262.__r_.__value_.__l.__size_;
            v232 = std::string::append((std::string *)v320, (const std::string::value_type *)v230, v231);
            v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v233;
            v232->__r_.__value_.__l.__size_ = 0;
            v232->__r_.__value_.__r.__words[2] = 0;
            v232->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v262.__r_.__value_.__l.__data_);
            if ((v320[23] & 0x80000000) != 0)
              operator delete(*(void **)v320);
            if (SBYTE7(v299) < 0)
              operator delete((void *)v298);
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v303.__r_.__value_.__l.__data_);
            if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v263.__r_.__value_.__l.__data_);
            if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v290.__r_.__value_.__l.__data_);
            if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v289.__r_.__value_.__l.__data_);
            if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v306.__r_.__value_.__l.__data_);
            if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v264.__r_.__value_.__l.__data_);
            if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v272.__r_.__value_.__l.__data_);
            if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v271.__r_.__value_.__l.__data_);
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v270.__r_.__value_.__l.__data_);
            if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v265.__r_.__value_.__l.__data_);
            if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v269.__r_.__value_.__l.__data_);
            if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v268.__r_.__value_.__l.__data_);
            if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v267.__r_.__value_.__l.__data_);
            if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v266.__r_.__value_.__l.__data_);
            v234 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
            {
              p_buf = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              *(_DWORD *)v320 = 136315394;
              *(_QWORD *)&v320[4] = "Handle";
              *(_WORD *)&v320[12] = 2080;
              *(_QWORD *)&v320[14] = p_buf;
              _os_log_debug_impl(&dword_1C281A000, v234, OS_LOG_TYPE_DEBUG, "%s #CCQRAer Perf Metrics %s", v320, 0x16u);
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (v291.__r_.__value_.__r.__words[0])
            {
              v291.__r_.__value_.__l.__size_ = v291.__r_.__value_.__r.__words[0];
              operator delete(v291.__r_.__value_.__l.__data_);
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
            std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v295;
            std::vector<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
            std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if ((_QWORD)v273)
            {
              *((_QWORD *)&v273 + 1) = v273;
              operator delete((void *)v273);
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
            std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
            std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
            std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (v285)
              operator delete(v285);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v288;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            return;
          }
          v168 = 0;
          if (v166 <= 1)
            v169 = 1;
          else
            v169 = 0xCCCCCCCCCCCCCCCDLL
                 * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5);
          while (1)
          {
            v170 = (unsigned __int8 *)(v165 + 160 * v168);
            v171 = (unsigned __int8 **)(v167 + 160 * v168);
            v172 = v170[23];
            if ((v172 & 0x80u) == 0)
              v173 = (unsigned __int8 *)v170[23];
            else
              v173 = (unsigned __int8 *)*((_QWORD *)v170 + 1);
            v174 = (unsigned __int8 *)*((unsigned __int8 *)v171 + 23);
            v175 = (char)v174;
            if ((char)v174 < 0)
              v174 = v171[1];
            if (v173 != v174)
              break;
            if (v175 >= 0)
              v176 = (unsigned __int8 *)(v167 + 160 * v168);
            else
              v176 = *v171;
            if ((v172 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v170, v176, *((_QWORD *)v170 + 1)))
                break;
            }
            else if (v170[23])
            {
              while (*v170 == *v176)
              {
                ++v170;
                ++v176;
                if (!--v172)
                  goto LABEL_296;
              }
              break;
            }
LABEL_296:
            if (++v168 == v169)
              goto LABEL_297;
          }
        }
        v177 = 0;
        goto LABEL_302;
      }
      v97 = (uint64_t *)(*((_QWORD *)&v323 + 1) + 8 * (((char *)v279 - (char *)v278) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<float>> *,std::vector<std::vector<float>> *,std::vector<std::vector<float>> *>(*((uint64_t **)&v323 + 1), v97, (uint64_t *)v278);
      v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>((uint64_t)&v280, v97, v91, v279);
    }
    else
    {
      std::vector<std::vector<std::vector<float>>>::__vdeallocate(&v278);
      if (v93 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v94 = 0x5555555555555556 * ((v280 - (uint64_t)v278) >> 3);
      if (v94 <= v93)
        v94 = 0xAAAAAAAAAAAAAAABLL * (v91 - v92);
      if (0xAAAAAAAAAAAAAAABLL * ((v280 - (uint64_t)v278) >> 3) >= 0x555555555555555)
        v95 = 0xAAAAAAAAAAAAAAALL;
      else
        v95 = v94;
      std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](&v278, v95);
      v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>((uint64_t)&v280, v92, v91, v279);
    }
    v279 = v96;
    goto LABEL_163;
  }
  v11 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Handle";
    _os_log_debug_impl(&dword_1C281A000, v11, OS_LOG_TYPE_DEBUG, "%s Rule based binary classifier returned", (uint8_t *)&buf, 0xCu);
  }
  *((_DWORD *)this + 14) = 3;
  marrs::qr::orchestration::QueryRewriteOrchestrator::doCoreAnalytics();
}

void sub_1C282BB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t v68;
  void *v70;

  std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)&STACK[0x3C0]);
  marrs::qr::orchestration::QRUtterance::~QRUtterance((void **)&STACK[0x310]);
  marrs::qr::orchestration::QRUtterance::~QRUtterance((void **)(v68 - 224));
  v70 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v70;
    operator delete(v70);
  }
  STACK[0x310] = (unint64_t)&STACK[0x2E0];
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  STACK[0x310] = (unint64_t)&STACK[0x2F8];
  std::vector<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  marrs::qr::inference_engine::EspressoQueryRewriteModelInputType::~EspressoQueryRewriteModelInputType((marrs::qr::inference_engine::EspressoQueryRewriteModelInputType *)&a68);
  a68 = &STACK[0x208];
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  a68 = &STACK[0x220];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  a68 = &STACK[0x238];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  if (STACK[0x250])
    operator delete((void *)STACK[0x250]);
  a68 = &STACK[0x268];
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  a68 = a19;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  _Unwind_Resume(a1);
}

void marrs::qr::orchestration::QueryRewriteOrchestrator::doCoreAnalytics()
{
  std::string *v0;
  __int128 v1;
  std::string v2;
  void *__p[2];
  std::string::size_type v4;

  std::string::basic_string[abi:ne180100]<0>(&v2, "com.apple.siri.marrs");
  v0 = std::string::append(&v2, ".QueryRewrite.CCQRAer.Predict");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v4 = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  analytics_send_event_lazy();
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_1C282C260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::__optional_destruct_base[abi:ne180100]<marrs::qr::processing::Vocab&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_44;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = operator new(0x30uLL);
      *v15 = 0;
      v15[1] = v8;
      v16 = (std::string *)(v15 + 2);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((_QWORD *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v15[5] = *((_QWORD *)v5 + 5);
      v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v20 = 1;
        v21 = v20 | (2 * v9);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v23);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v25)
      {
        *v15 = *v25;
      }
      else
      {
        *v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v24 + 8 * v2) = v6;
        if (!*v15)
          goto LABEL_43;
        v26 = *(_QWORD *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9)
            v26 %= v9;
        }
        else
        {
          v26 &= v9 - 1;
        }
        v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
      }
      *v25 = v15;
LABEL_43:
      ++*(_QWORD *)(a1 + 24);
LABEL_44:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = 1;
  return a1;
}

void sub_1C282C53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (void **)(a1 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(a1);
  }
  return a1;
}

uint64_t std::tuple<std::vector<marrs::qr::orchestration::QRToken>,std::vector<unsigned long>,std::vector<std::vector<unsigned long>>,std::vector<std::vector<std::vector<float>>>>::~tuple(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 72);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 48);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;

  v4 = *a1;
  v6 = *(_DWORD **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v6 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v13);
      v8 = *(_DWORD **)v4;
      v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (_DWORD *)(v13 + 4 * v9);
    v16 = v13 + 4 * v14;
    *v15 = *a2;
    v7 = v15 + 1;
    while (v6 != v8)
    {
      v17 = *--v6;
      *--v15 = v17;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 4);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 3) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::qr::inference_engine::EspressoQueryRewriteModelInputType::~EspressoQueryRewriteModelInputType(marrs::qr::inference_engine::EspressoQueryRewriteModelInputType *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 24);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<marrs::qr::orchestration::QRHypothesis>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<marrs::qr::orchestration::QRHypothesis>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7C65A88, MEMORY[0x1E0DE42D0]);
}

void sub_1C282CAB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(char *result, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  unint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C282CB50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C282CC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      v5 = v3;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C282CD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C282CDFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate((void **)a1);
    if (a4 > 0x199999999999999)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
      v11 = 0x199999999999999;
    else
      v11 = v10;
    std::vector<marrs::qr::orchestration::QRToken>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = (std::string *)((char *)__str + 32 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(__str, a3, v9);
  for (i = *(_QWORD *)(a1 + 8);
        (std::string *)i != v14;
        std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](i))
  {
    i -= 160;
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1C282D0D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C282D0DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(v9, a2, a3, (_QWORD *)a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 3) < a4)
  {
    v15 = a2 + 8 * ((a1[1] - (uint64_t)v10) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(a2, v15, v10);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(v9, v15, a3, (_QWORD *)a1[1]);
LABEL_13:
    a1[1] = (uint64_t)v14;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(a2, a3, v10);
  v17 = (char *)a1[1];
  if (v17 != v16)
  {
    v18 = (char *)a1[1];
    do
    {
      v20 = (void *)*((_QWORD *)v18 - 3);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *((_QWORD *)v17 - 2) = v19;
        operator delete(v19);
      }
      v17 = v18;
    }
    while (v18 != v16);
  }
  a1[1] = (uint64_t)v16;
}

void sub_1C282D358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C282D360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<float>> *,std::vector<std::vector<float>> *,std::vector<std::vector<float>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 3)
    {
      if (a3 != i)
      {
        v7 = *i;
        v6 = i[1];
        v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *i) >> 3);
        v9 = (char *)*a3;
        if (0xAAAAAAAAAAAAAAABLL * ((a3[2] - *a3) >> 3) >= v8)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - (uint64_t)v9) >> 3) >= v8)
          {
            v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*i, i[1], v9);
            v15 = (char *)a3[1];
            if (v15 != v14)
            {
              v16 = (char *)a3[1];
              do
              {
                v18 = (void *)*((_QWORD *)v16 - 3);
                v16 -= 24;
                v17 = v18;
                if (v18)
                {
                  *((_QWORD *)v15 - 2) = v17;
                  operator delete(v17);
                }
                v15 = v16;
              }
              while (v16 != v14);
            }
            a3[1] = (uint64_t)v14;
            goto LABEL_21;
          }
          v13 = v7 + 8 * ((a3[1] - (uint64_t)v9) >> 3);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*i, v13, v9);
          v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(a3 + 2), v13, v6, (_QWORD *)a3[1]);
        }
        else
        {
          std::vector<std::vector<float>>::__vdeallocate(a3);
          if (v8 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v10 = 0x5555555555555556 * ((a3[2] - *a3) >> 3);
          if (v10 <= v8)
            v10 = v8;
          if (0xAAAAAAAAAAAAAAABLL * ((a3[2] - *a3) >> 3) >= 0x555555555555555)
            v11 = 0xAAAAAAAAAAAAAAALL;
          else
            v11 = v10;
          std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a3, v11);
          v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(a3 + 2), v7, v6, (_QWORD *)a3[1]);
        }
        a3[1] = (uint64_t)v12;
      }
LABEL_21:
      a3 += 3;
    }
  }
  return a3;
}

void sub_1C282D504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C282D50C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C282D5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C282D8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C282D950(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  __int128 v6;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      if (this != v5)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&this[2], (std::string *)v5[2].__r_.__value_.__l.__data_, (__int128 *)v5[2].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2].__r_.__value_.__l.__size_ - v5[2].__r_.__value_.__r.__words[0]) >> 3));
      v6 = *(_OWORD *)&v5[3].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[3].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v6;
      std::string::operator=((std::string *)((char *)this + 104), (std::string *)((char *)v5 + 104));
      this[5].__r_.__value_.__s.__data_[8] = v5[5].__r_.__value_.__s.__data_[8];
      std::string::operator=((std::string *)((char *)this + 136), (std::string *)((char *)v5 + 136));
      this = (std::string *)((char *)this + 160);
      v5 = (std::string *)((char *)v5 + 160);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      marrs::qr::orchestration::QRToken::QRToken((std::string *)(a4 + v7), (const marrs::qr::orchestration::QRToken *)(a2 + v7));
      v7 += 160;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 160;
        std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<marrs::qr::orchestration::QRToken>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x19999999999999ALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(unint64_t a1)
{
  if (a1 >= 0x19999999999999ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(160 * a1);
}

std::string *marrs::qr::orchestration::QRToken::QRToken(std::string *this, const marrs::qr::orchestration::QRToken *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  v6 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v6;
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v7;
  }
  this[5].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 128);
  v8 = (std::string *)((char *)this + 136);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 19);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1C282DD4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 127) < 0)
    operator delete(*v4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C282DE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C282DF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1C282E17C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

xpc_object_t ___ZN5marrs2qr13orchestration24QueryRewriteOrchestrator15doCoreAnalyticsENS1_15InferenceStatusElRKNSt3__16vectorIfNS4_9allocatorIfEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  uint64_t v4;
  const char *v5;
  void **v6;
  const char *v7;
  const char *v8;
  void *__p[2];
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  v4 = *(unsigned int *)(a1 + 48);
  if (v4 >= 4)
    v5 = "UNKNOWN";
  else
    v5 = (&off_1E7C66710)[v4];
  MEMORY[0x1C3BC59A0](__p, v5);
  if (v3)
  {
    if (v11 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    xpc_dictionary_set_string(v3, "rewriteStatus", (const char *)v6);
    xpc_dictionary_set_uint64(v3, "numberOfRewrites", *(_QWORD *)(a1 + 40));
    xpc_dictionary_set_double(v3, "topPredictionProbability", *(float *)(a1 + 52));
    v7 = (const char *)(v2 + 88);
    if (*(char *)(v2 + 111) < 0)
      v7 = *(const char **)v7;
    xpc_dictionary_set_string(v3, "locale", v7);
    v8 = (const char *)(v2 + 112);
    if (*(char *)(v2 + 135) < 0)
      v8 = *(const char **)v8;
    xpc_dictionary_set_string(v3, "assetVersion", v8);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1C282EAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *IOContentError::IOContentError(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::operator+<char>();
  v10 = std::string::append(&v18, " for IO field missing/null: ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&v19, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  BaseException::BaseException((uint64_t)a1, (__int128 *)__p, a3, a4, a5);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *a1 = &off_1E7C67878;
  return a1;
}

void sub_1C282EBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void BaseException::~BaseException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E7C679F0;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  BaseException::~BaseException(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t BaseException::what(BaseException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

void IOContentError::~IOContentError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

void marrs::qr::orchestration::CbROrchestrator::~CbROrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

void marrs::qr::orchestration::CbROrchestrator::predict(const QRRequest *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  (*(void (**)(const QRRequest *))(*(_QWORD *)&this->var0 + 24))(this);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, this, (uint64_t)a2, 0, 1);
}

uint64_t marrs::qr::orchestration::CbROrchestrator::validate(marrs::qr::orchestration::CbROrchestrator *this, const QRRequest *a2)
{
  return 1;
}

void `non-virtual thunk to'marrs::qr::orchestration::CbROrchestrator::predict(marrs::qr::orchestration::CbROrchestrator *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  const QRRequest *v5;

  v5 = (const QRRequest *)((char *)this - 328);
  (*(void (**)(char *))(*((_QWORD *)this - 41) + 24))((char *)this - 328);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, v5, (uint64_t)a2, 0, 1);
}

void `non-virtual thunk to'marrs::qr::orchestration::CbROrchestrator::~CbROrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
}

{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t `non-virtual thunk to'marrs::qr::orchestration::CbROrchestrator::validate(marrs::qr::orchestration::CbROrchestrator *this, const QRRequest *a2)
{
  return 1;
}

void std::vector<marrs::qr::orchestration::QRHypothesis>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<marrs::qr::orchestration::QRHypothesis>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::orchestration::QRHypothesis>,marrs::qr::orchestration::QRHypothesis*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 17) < 0)
        operator delete(*(void **)(v3 - 40));
      v3 -= 56;
    }
  }
  return a1;
}

uint64_t marrs::qr::orchestration::QueryRewriteOrchestrator::QueryRewriteOrchestrator(uint64_t a1, char *a2, const std::string *a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  NSObject *v12;
  std::ios_base::openmode v13;
  std::locale::id *v14;
  const std::locale::facet *v15;
  unsigned __int8 v16;
  std::string::size_type size;
  std::string *p_str;
  std::string *v19;
  std::string *v20;
  int64_t v21;
  void **v22;
  char *v23;
  void **v24;
  std::string *v25;
  std::locale::__imp *locale;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  const std::string *v31;
  int v32;
  uint64_t *v33;
  const std::string *v34;
  char v35;
  uint64_t v36;
  unsigned __int8 v37;
  void *v38;
  unsigned __int8 v39;
  void *v40;
  void **v41;
  char *v42;
  void **v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t *v46;
  unsigned __int8 v47;
  int *v48;
  NSObject *v49;
  std::string *v50;
  NSObject *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  marrs::inference_engine::EspressoModule *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unsigned __int8 v62;
  uint64_t v63;
  marrs::inference_engine::EspressoModule **v64;
  _QWORD *exception;
  std::string *v67;
  __int128 v68;
  const std::string *v69;
  uint64_t v70;
  os_signpost_id_t spid;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  NSObject *v76;
  std::string *v77;
  std::string v79;
  std::string v80;
  std::string __s;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string __str;
  std::string v97;
  std::locale v98;
  _BYTE __p[32];
  _OWORD v100[7];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  std::ios_base v118;
  uint64_t v119;
  int v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E7C665A0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)(a1 + 16), 0, 0);
  *(_OWORD *)(a1 + 88) = 0u;
  v7 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v77 = (std::string *)(a1 + 88);
  v74 = a1 + 136;
  v72 = (void **)(a1 + 112);
  v73 = v6;
  marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)(a1 + 136), 0, 0);
  *(_QWORD *)(a1 + 208) = 0;
  v9 = a1 + 264;
  *(_DWORD *)(a1 + 231) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 235) = 1;
  *(_QWORD *)(a1 + 236) = 0x2200000002;
  *(_OWORD *)(a1 + 248) = xmmword_1C289DFA0;
  *(_OWORD *)(a1 + 264) = xmmword_1C289DFB0;
  *(_DWORD *)(a1 + 280) = 32;
  v8 = a1 + 208;
  *(_DWORD *)(a1 + 288) = 32;
  v10 = (int *)(a1 + 288);
  *(_QWORD *)(v8 + 88) = 26;
  *(_QWORD *)(v8 + 96) = 0;
  v11 = (_QWORD *)(v8 + 96);
  v70 = v8;
  *(_BYTE *)(v8 + 104) = 0;
  *(_QWORD *)(v9 + 52) = 0x447A000000000000;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v93, a2);
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>((std::string *)__p, "vocab.txt");
  std::__fs::filesystem::operator/[abi:ne180100](&v92, (uint64_t)&v93, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(&v97, 0, sizeof(v97));
  std::string::append[abi:ne180100]<char const*,0>(&v97, "embedder.mlmodelc", "");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)__p, (uint64_t)&v93, (std::__fs::filesystem::path *)&v97);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v91, (uint64_t)__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v97, "encoder.mlmodelc");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)__p, (uint64_t)&v93, (std::__fs::filesystem::path *)&v97);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v90, (uint64_t)__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v97, "decoder.mlmodelc");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)__p, (uint64_t)&v93, (std::__fs::filesystem::path *)&v97);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v89, (uint64_t)__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)__p, "char_voc.txt");
  std::__fs::filesystem::operator/[abi:ne180100](&v88, (uint64_t)&v93, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&v97, "ane.mlmodelc");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)__p, (uint64_t)&v93, (std::__fs::filesystem::path *)&v97);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v87, (uint64_t)__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)__p, "version.yaml");
  std::__fs::filesystem::operator/[abi:ne180100](&v86, (uint64_t)&v93, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)__p, "config.json");
  std::__fs::filesystem::operator/[abi:ne180100](&v85, (uint64_t)&v93, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v75 = v10;
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1)
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_4);
  v12 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  spid = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)__p = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v12, OS_SIGNPOST_INTERVAL_BEGIN, spid, "AssetLoad", "CCQRAer Asset loading", __p, 2u);
  }
  v76 = v12;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  else
    __s = v86;
  v118.__vftable = (std::ios_base_vtbl *)&unk_1E7C67410;
  *(_QWORD *)__p = &unk_1E7C673E8;
  *(_QWORD *)&__p[8] = 0;
  std::ios_base::init(&v118, &__p[24]);
  v120 = -1;
  v119 = 0;
  MEMORY[0x1C3BC5A30](&__p[24]);
  std::fstream::open((std::fstream *)__p, &__s, v13);
  v83 = 0;
  v84 = 0;
  v82 = &v83;
  if ((_QWORD)v101)
  {
    v69 = a3;
    memset(&__str, 0, sizeof(__str));
    memset(&v95, 0, sizeof(v95));
    memset(&v94, 0, sizeof(v94));
    v14 = (std::locale::id *)MEMORY[0x1E0DE4A90];
LABEL_43:
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)]);
      v15 = std::locale::use_facet((const std::locale *)&v97, v14);
      v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale((std::locale *)&v97);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&__str, v16);
      if ((*((_BYTE *)v100 + *(_QWORD *)(*(_QWORD *)__p - 24)) & 5) != 0)
        break;
      MEMORY[0x1C3BC5B8C](&v98);
      LODWORD(v97.__r_.__value_.__l.__data_) = 0x4000;
      std::locale::locale((std::locale *)&v97.__r_.__value_.__r.__words[1], &v98);
      boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&__str, (std::locale *)&v97);
      std::locale::~locale((std::locale *)&v97.__r_.__value_.__r.__words[1]);
      std::locale::~locale(&v98);
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        v19 = (std::string *)((char *)p_str + size);
        v20 = p_str;
        while (v20->__r_.__value_.__s.__data_[0] != 58)
        {
          v20 = (std::string *)((char *)v20 + 1);
          if (!--size)
            goto LABEL_43;
        }
        if (v20 != v19)
        {
          v21 = (char *)v20 - (char *)p_str;
          if ((char *)v20 - (char *)p_str != -1)
          {
            std::string::basic_string(&v97, &__str, 0, (char *)v20 - (char *)p_str, (std::allocator<char> *)&v98);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v95.__r_.__value_.__l.__data_);
            v95 = v97;
            MEMORY[0x1C3BC5B8C](&v98);
            LODWORD(v97.__r_.__value_.__l.__data_) = 0x4000;
            std::locale::locale((std::locale *)&v97.__r_.__value_.__r.__words[1], &v98);
            boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v95, (std::locale *)&v97);
            std::locale::~locale((std::locale *)&v97.__r_.__value_.__r.__words[1]);
            std::locale::~locale(&v98);
            std::string::basic_string(&v97, &__str, v21 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v98);
            if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v94.__r_.__value_.__l.__data_);
            v94 = v97;
            MEMORY[0x1C3BC5B8C](&v98);
            LODWORD(v97.__r_.__value_.__l.__data_) = 0x4000;
            std::locale::locale((std::locale *)&v97.__r_.__value_.__r.__words[1], &v98);
            boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v94, (std::locale *)&v97);
            std::locale::~locale((std::locale *)&v97.__r_.__value_.__r.__words[1]);
            std::locale::~locale(&v98);
            v22 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v82, &v98, &v95);
            v23 = (char *)*v22;
            if (!*v22)
            {
              v24 = v22;
              v23 = (char *)operator new(0x50uLL);
              v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
              v97.__r_.__value_.__l.__size_ = (std::string::size_type)&v83;
              v97.__r_.__value_.__s.__data_[16] = 0;
              v25 = (std::string *)(v23 + 32);
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v25, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
                *((_QWORD *)v23 + 6) = *((_QWORD *)&v95.__r_.__value_.__l + 2);
              }
              *((_QWORD *)v23 + 8) = 0;
              *((_QWORD *)v23 + 9) = 0;
              *((_QWORD *)v23 + 7) = 0;
              v97.__r_.__value_.__s.__data_[16] = 1;
              locale = v98.__locale_;
              *(_QWORD *)v23 = 0;
              *((_QWORD *)v23 + 1) = 0;
              *((_QWORD *)v23 + 2) = locale;
              *v24 = v23;
              v27 = (uint64_t *)v23;
              if (*v82)
              {
                v82 = (uint64_t **)*v82;
                v27 = (uint64_t *)*v24;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v83, v27);
              ++v84;
              v97.__r_.__value_.__r.__words[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v97);
            }
            std::string::operator=((std::string *)(v23 + 56), &v94);
          }
        }
      }
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)], *(_DWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24) + 32] | 4);
    v7 = v72;
    v6 = v73;
    a3 = v69;
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else if (!std::filebuf::close())
  {
    std::ios_base::clear((std::ios_base *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)], *(_DWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24) + 32] | 4);
  }
  MEMORY[0x1C3BC5A3C](&__p[24]);
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](&v118);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  std::string::operator=(v77, a3);
  v28 = v83;
  if (!v83)
    goto LABEL_94;
  v29 = &v83;
  do
  {
    v30 = v29;
    v31 = (const std::string *)(v28 + 4);
    v32 = std::string::compare((const std::string *)(v28 + 4), "version");
    if (v32 >= 0)
      v33 = v28;
    else
      v33 = v28 + 1;
    if (v32 >= 0)
      v29 = (uint64_t **)v28;
    else
      v29 = v30;
    v28 = (uint64_t *)*v33;
  }
  while (*v33);
  if (v29 != &v83
    && (v32 >= 0 ? (v34 = v31) : (v34 = (const std::string *)(v30 + 4)), std::string::compare(v34, "version") < 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, "version");
    v41 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v82, &__str, &__s);
    v42 = (char *)*v41;
    v36 = a1;
    if (!*v41)
    {
      v43 = v41;
      v42 = (char *)operator new(0x50uLL);
      *(_QWORD *)&__p[8] = &v83;
      *((_OWORD *)v42 + 2) = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v44 = __s.__r_.__value_.__r.__words[2];
      memset(&__s, 0, sizeof(__s));
      *((_QWORD *)v42 + 6) = v44;
      *((_QWORD *)v42 + 7) = 0;
      *((_QWORD *)v42 + 8) = 0;
      *((_QWORD *)v42 + 9) = 0;
      __p[16] = 1;
      v45 = __str.__r_.__value_.__r.__words[0];
      *(_QWORD *)v42 = 0;
      *((_QWORD *)v42 + 1) = 0;
      *((_QWORD *)v42 + 2) = v45;
      *v43 = v42;
      v46 = (uint64_t *)v42;
      if (*v82)
      {
        v82 = (uint64_t **)*v82;
        v46 = (uint64_t *)*v43;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v83, v46);
      ++v84;
      *(_QWORD *)__p = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
    }
    if (v42[79] < 0)
    {
      std::string::__init_copy_ctor_external(&v97, *((const std::string::value_type **)v42 + 7), *((_QWORD *)v42 + 8));
      v35 = 0;
    }
    else
    {
      v35 = 0;
      v97 = *(std::string *)(v42 + 56);
    }
  }
  else
  {
LABEL_94:
    std::string::basic_string[abi:ne180100]<0>(&v97, "Undefined");
    v35 = 1;
    v36 = a1;
  }
  if (*(char *)(v36 + 135) < 0)
    operator delete(*v7);
  *(std::string *)v7 = v97;
  *((_BYTE *)&v97.__r_.__value_.__s + 23) = 0;
  v97.__r_.__value_.__s.__data_[0] = 0;
  if ((v35 & 1) == 0 && SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v97 = v92;
  *(std::string *)__p = v97;
  memset(&v97, 0, sizeof(v97));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
  v37 = __str.__r_.__value_.__s.__data_[0];
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v37 == 255 || !v37)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
    else
      v97 = v92;
    v67 = std::string::insert(&v97, 0, "Token-level vocabulary does not exist: ");
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v67->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)__p, (uint64_t)&__str, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 49);
  }
  marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)__p, 0, 1u);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(v6, (uint64_t *)__p);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v36 + 56));
  *(_OWORD *)(v36 + 56) = *(_OWORD *)((char *)v100 + 8);
  *(_QWORD *)(v36 + 72) = *((_QWORD *)&v100[1] + 1);
  memset((char *)v100 + 8, 0, 24);
  *(_BYTE *)(v36 + 80) = v100[2];
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v100 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&__p[16]);
  v38 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v38)
    operator delete(v38);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v80, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v80 = v92;
  marrs::qr::orchestration::QueryRewriteOrchestrator::InitializeVocabFromPath(v6);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v97 = v88;
  *(std::string *)__p = v97;
  memset(&v97, 0, sizeof(v97));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
  v39 = __str.__r_.__value_.__s.__data_[0];
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v39 && v39 != 255)
  {
    marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)__p, 1, 1u);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(v74, (uint64_t *)__p);
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v36 + 176));
    *(_OWORD *)(v36 + 176) = *(_OWORD *)((char *)v100 + 8);
    *(_QWORD *)(v36 + 192) = *((_QWORD *)&v100[1] + 1);
    memset((char *)v100 + 8, 0, 24);
    *(_BYTE *)(v36 + 200) = v100[2];
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v100 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&__p[16]);
    v40 = *(void **)__p;
    *(_QWORD *)__p = 0;
    if (v40)
      operator delete(v40);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v79, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
    else
      v79 = v88;
    marrs::qr::orchestration::QueryRewriteOrchestrator::InitializeVocabFromPath(v74);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  else
    v97 = v85;
  *(std::string *)__p = v97;
  memset(&v97, 0, sizeof(v97));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
  v47 = __str.__r_.__value_.__s.__data_[0];
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v47 != 255 && v47)
  {
    v48 = v75;
    v51 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = "QueryRewriteOrchestrator";
      _os_log_debug_impl(&dword_1C281A000, v51, OS_LOG_TYPE_DEBUG, "%s Using default config for CCQR initialization", __p, 0xCu);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    else
      v97 = v85;
    TypedJson<CcqrConfig>::fromJson((uint64_t)__p, (uint64_t *)&v97);
    v52 = v100[1];
    *(_OWORD *)(v70 + 56) = v100[0];
    *(_OWORD *)(v70 + 72) = v52;
    *(_OWORD *)(v70 + 88) = v100[2];
    *(_OWORD *)(v70 + 100) = *(_OWORD *)((char *)&v100[2] + 12);
    v53 = *(_OWORD *)&__p[16];
    *(_OWORD *)(v70 + 24) = *(_OWORD *)__p;
    *(_OWORD *)(v70 + 40) = v53;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_DWORD *)(v36 + 232) = 0x1000000;
    *(_QWORD *)(v36 + 236) = 0x2200000002;
    *(_DWORD *)(v36 + 244) = 0;
    *(_OWORD *)(v36 + 248) = xmmword_1C289DFA0;
    *(_OWORD *)v9 = xmmword_1C289DFB0;
    *(_OWORD *)(v9 + 16) = xmmword_1C289DFC0;
    *(_QWORD *)(v36 + 296) = 26;
    *v11 = 0;
    v11[1] = 0;
    *(_DWORD *)(v36 + 320) = 1148846080;
    v48 = v75;
    v49 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    {
      v50 = &v85;
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = (std::string *)v85.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "QueryRewriteOrchestrator";
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v50;
      _os_log_debug_impl(&dword_1C281A000, v49, OS_LOG_TYPE_DEBUG, "%s Unable to load json config file from %s", __p, 0x16u);
    }
  }
  v54 = operator new();
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    v97 = v91;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    __str = v90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v95, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v95 = v89;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v94, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    v94 = v87;
  *(_QWORD *)(v54 + 48) = 0;
  *(_QWORD *)(v54 + 64) = 0;
  *(_QWORD *)(v54 + 80) = 0;
  *(_QWORD *)(v54 + 96) = 0;
  *(_QWORD *)(v54 + 112) = 0;
  *(_QWORD *)(v54 + 128) = 0;
  *(_QWORD *)(v54 + 144) = 0;
  *(_QWORD *)(v54 + 160) = 0;
  *(_QWORD *)(v54 + 176) = 0;
  *(_QWORD *)(v54 + 192) = 0;
  *(_QWORD *)(v54 + 208) = 0;
  *(_QWORD *)(v54 + 224) = 0;
  *(_QWORD *)(v54 + 240) = 0;
  *(_QWORD *)(v54 + 256) = 0;
  *(_QWORD *)(v54 + 272) = 0;
  *(_QWORD *)(v54 + 352) = 0;
  *(_QWORD *)(v54 + 368) = 0;
  *(_QWORD *)(v54 + 384) = 0;
  *(_QWORD *)(v54 + 400) = 0;
  *(_QWORD *)(v54 + 416) = 0;
  *(_OWORD *)(v54 + 16) = 0u;
  *(_QWORD *)(v54 + 432) = 0;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 336) = 0;
  *(_OWORD *)(v54 + 304) = 0u;
  *(_OWORD *)(v54 + 320) = 0u;
  *(_OWORD *)(v54 + 288) = 0u;
  *(_OWORD *)v54 = 0u;
  v55 = *(int *)(v36 + 276);
  *(_QWORD *)(v54 + 448) = *(int *)(v36 + 268);
  *(_QWORD *)(v54 + 456) = v55;
  *(_QWORD *)(v54 + 464) = *(_QWORD *)(v36 + 296);
  *(_DWORD *)(v54 + 472) = 2;
  v56 = operator new();
  marrs::inference_engine::EspressoModule::EspressoModule(v56, (uint64_t)&v97, *(_DWORD *)v9);
  *(_QWORD *)(v56 + 36) = *(_QWORD *)v9;
  std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)v54, (marrs::inference_engine::EspressoModule *)v56);
  v57 = (marrs::inference_engine::EspressoModule *)operator new();
  marrs::inference_engine::EspressoModule::EspressoModule((uint64_t)v57, (uint64_t)&__str, *(_DWORD *)(v9 + 16));
  *((_DWORD *)v57 + 9) = *(_DWORD *)(v9 + 16);
  std::unique_ptr<marrs::qr::inference_engine::LSTMEncoderModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)(v54 + 8), v57);
  v58 = operator new();
  marrs::inference_engine::EspressoModule::EspressoModule(v58, (uint64_t)&v95, *v48);
  *(_OWORD *)(v58 + 40) = *(_OWORD *)v48;
  std::unique_ptr<marrs::qr::inference_engine::LSTMDecoderwithAttentionModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)(v54 + 16), (marrs::inference_engine::EspressoModule *)v58);
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v101 = 0u;
  memset(v100, 0, sizeof(v100));
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)(v54 + 256) = 0u;
  *(_OWORD *)(v54 + 272) = 0u;
  *(_OWORD *)(v54 + 224) = 0u;
  *(_OWORD *)(v54 + 240) = 0u;
  *(_OWORD *)(v54 + 192) = 0u;
  *(_OWORD *)(v54 + 208) = 0u;
  *(_OWORD *)(v54 + 160) = 0u;
  *(_OWORD *)(v54 + 176) = 0u;
  *(_OWORD *)(v54 + 128) = 0u;
  *(_OWORD *)(v54 + 144) = 0u;
  *(_OWORD *)(v54 + 96) = 0u;
  *(_OWORD *)(v54 + 112) = 0u;
  *(_OWORD *)(v54 + 64) = 0u;
  *(_OWORD *)(v54 + 80) = 0u;
  *(_OWORD *)(v54 + 32) = 0u;
  *(_OWORD *)(v54 + 48) = 0u;
  std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>((_QWORD *)(v54 + 288), 0, 0, 0);
  std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>((_QWORD *)(v54 + 312), *((char **)&v109 + 1), (char *)v110, (uint64_t)(v110 - *((_QWORD *)&v109 + 1)) >> 3);
  v59 = v116;
  *(_OWORD *)(v54 + 400) = v115;
  *(_OWORD *)(v54 + 416) = v59;
  *(_OWORD *)(v54 + 432) = v117;
  v60 = v112;
  *(_OWORD *)(v54 + 336) = v111;
  *(_OWORD *)(v54 + 352) = v60;
  v61 = v114;
  *(_OWORD *)(v54 + 368) = v113;
  *(_OWORD *)(v54 + 384) = v61;
  marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType::~EspressoQueryRewriteTimingMetricsType((marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType *)__p);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)__p, (char *)&v94);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
  v62 = v98.__locale_;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v62 && v62 != 255)
  {
    v63 = operator new();
    marrs::inference_engine::EspressoModule::EspressoModule(v63, (uint64_t)&v94, *(_DWORD *)(v36 + 272));
    *(_QWORD *)(v63 + 36) = *(_QWORD *)(v36 + 272);
    std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)(v54 + 24), (marrs::inference_engine::EspressoModule *)v63);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v64 = *(marrs::inference_engine::EspressoModule ***)(v36 + 8);
  *(_QWORD *)(v36 + 8) = v54;
  if (v64)
    std::default_delete<marrs::qr::inference_engine::EspressoQueryRewriteModel>::operator()[abi:ne180100](v64);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v83);
  if (spid - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v76))
  {
    *(_WORD *)__p = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v76, OS_SIGNPOST_INTERVAL_END, spid, "AssetLoad", " enableTelemetry=YES ", __p, 2u);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  return v36;
}

void sub_1C283032C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_signpost_id_t spid, uint64_t a17, marrs::qr::processing::Vocab *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,marrs::qr::processing::Vocab *a23,uint64_t a24,NSObject *log,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::exception_ptr v48;

  if (a2)
  {
    if (a44 < 0)
      operator delete(__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)a47);
    __cxa_begin_catch(a1);
    if (a26 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
    {
      LOWORD(STACK[0x220]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_END, spid, "AssetLoad", " enableTelemetry=YES ", (uint8_t *)&STACK[0x220], 2u);
    }
    std::current_exception();
    v48.__ptr_ = &a30;
    std::rethrow_exception(v48);
    JUMPOUT(0x1C28308F8);
  }
  sub_1C2830A14();
}

void sub_1C28308FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::exception_ptr a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  std::exception_ptr::~exception_ptr(&a30);
  __cxa_end_catch();
  if (a51 < 0)
    JUMPOUT(0x1C2830918);
  JUMPOUT(0x1C283091CLL);
}

void sub_1C2830A0C(void *a1, int a2)
{
  if (!a2)
    sub_1C2830A14();
  __clang_call_terminate(a1);
}

void sub_1C2830A14()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1C2830A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2830AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::operator/[abi:ne180100](std::string *this, uint64_t a2, std::__fs::filesystem::path *a3)
{
  int v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type size;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  if (std::__fs::filesystem::path::__root_directory(a3).__size_)
    return std::string::operator=(this, &a3->__pn_);
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
    std::string::push_back(this, 47);
  v6 = SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = (std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  else
    size = a3->__pn_.__r_.__value_.__l.__size_;
  return std::string::append(this, (const std::string::value_type *)v7, size);
}

void sub_1C2830B80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2830BD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2830C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2830C88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2830CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *ConfigLoadingError::ConfigLoadingError(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::operator+<char>();
  v10 = std::string::append(&v18, " to load model bundle: ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&v19, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  BaseException::BaseException((uint64_t)a1, (__int128 *)__p, a3, a4, a5);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *a1 = &off_1E7C670D8;
  return a1;
}

void sub_1C2830E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

uint64_t marrs::qr::orchestration::QueryRewriteOrchestrator::InitializeVocabFromPath(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::locale::id *v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  _QWORD *exception;
  std::locale v13;
  void *__p[2];
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[51];
  _QWORD v18[20];

  v18[19] = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  v4 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v18[0] = MEMORY[0x1E0DE4FA8] + 64;
  v16[0] = v5;
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v5 - 24)) = v6;
  v16[1] = 0;
  v7 = (std::ios_base *)((char *)v16 + *(_QWORD *)(v16[0] - 24));
  std::ios_base::init(v7, v17);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v16[0] = v2 + 24;
  v18[0] = v3;
  MEMORY[0x1C3BC5A30](v17);
  std::ifstream::open();
  if (!v17[15])
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(&v13, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)__p, (uint64_t)&v13, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 79);
  }
  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[0] - 24)));
    v9 = std::locale::use_facet(&v13, v8);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v13);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)__p, v10);
    if ((*((_BYTE *)&v17[2] + *(_QWORD *)(v16[0] - 24)) & 5) != 0)
      break;
    marrs::qr::processing::Vocab::addWord(a1, (uint64_t)__p);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v16 + *(_QWORD *)(v16[0] - 24)), *(_DWORD *)((char *)&v17[2] + *(_QWORD *)(v16[0] - 24)) | 4);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  v16[0] = *v4;
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = v4[3];
  MEMORY[0x1C3BC5A3C](v17);
  std::istream::~istream();
  return MEMORY[0x1C3BC5BC8](v18);
}

void sub_1C2831194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;
  int v23;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void marrs::qr::processing::Vocab::~Vocab(marrs::qr::processing::Vocab *this)
{
  void **v2;

  v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1C3BC5A48](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1C283143C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C2831408);
  }
  __cxa_rethrow();
}

void sub_1C2831480(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3BC5A3C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1C3BC5BC8](a1 + 53);
  return a1;
}

void ConfigLoadingError::~ConfigLoadingError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

BOOL std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *v15;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
    }
    while (v4 != a3);
    *v15 = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1C2831934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

_QWORD *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *InferenceError::InferenceError(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::operator+<char>();
  v10 = std::string::append(&v18, " occurred during inference: ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&v19, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  BaseException::BaseException((uint64_t)a1, (__int128 *)__p, a3, a4, a5);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *a1 = &off_1E7C679C8;
  return a1;
}

void sub_1C2831BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::qr::orchestration::QRToken::~QRToken(void **this)
{
  void **v2;

  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void InferenceError::~InferenceError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

std::vector<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<std::string&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1C2831E7C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

marrs::mrr::mr::MRREntity *marrs::mrr::mr::MRREntity::MRREntity(marrs::mrr::mr::MRREntity *this, const marrs::mrr::mr::MRREntity *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)this = *(_QWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  v7 = *((_OWORD *)a2 + 5);
  v8 = *(_OWORD *)((char *)a2 + 92);
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 92) = v8;
  *((_OWORD *)this + 5) = v7;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((std::string *)((char *)this + 112), *((__int128 **)a2 + 14), *((__int128 **)a2 + 15), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v9;
  }
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 168);
    *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
    *(_OWORD *)((char *)this + 168) = v10;
  }
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 8, *((__int128 **)a2 + 24), *((__int128 **)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 3));
  return this;
}

void sub_1C2832038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  char *v3;
  void **v4;
  void **v5;
  void **v6;
  va_list va;

  va_start(va, a2);
  if (v3[159] < 0)
    operator delete(*v6);
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v3[79] < 0)
    operator delete(*v5);
  if (v3[55] < 0)
    operator delete(*v4);
  if (v3[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::MRREntity::~MRREntity(void **this)
{
  void **v2;

  v2 = this + 24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  v2 = this + 14;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<marrs::mrr::mr::SurroundingText>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<marrs::mrr::mr::SurroundingText>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

std::string *std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<marrs::mrr::mr::SurroundingText>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C2832250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<marrs::mrr::mr::SurroundingText>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)v6 + 24);
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = (std::string *)((char *)v8 + 40);
      v13 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1C2832370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 17) < 0)
        operator delete(*(void **)(v3 - 40));
      v3 -= 40;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::vector<std::string>::pointer begin;
  std::string *end;
  std::__split_buffer<std::string>::pointer v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string *v8;
  std::string *value;

  begin = this->__begin_;
  end = this->__end_;
  v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    v5 = __v->__begin_;
  }
  else
  {
    do
    {
      v5 = v4 - 1;
      v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7C65A90, MEMORY[0x1E0DE42E0]);
}

void sub_1C2832558(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void marrs::mrr::mr::pickTopSalientEntity(char **a1, uint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v8;
  unint64_t v11;
  double v12;
  unint64_t *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5 && a3 != a4)
  {
    v8 = a3;
    v11 = 0x84BDA12F684BDA13 * ((v5 - v4) >> 3);
    v12 = -1.0;
    v13 = a3;
    do
    {
      if (v11 <= *v13)
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      v14 = v4 + 216 * *v13;
      if (*(double *)(v14 + 96) > v12)
        v12 = *(double *)(v14 + 96);
      ++v13;
    }
    while (v13 != a4);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *v8;
      if (0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) <= *v8)
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      if (vabdd_f64(*(double *)(*a2 + 216 * v18 + 96), v12) < 0.0001)
      {
        if ((unint64_t)v17 >= v16)
        {
          v20 = (v17 - v15) >> 3;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v16 - (_QWORD)v15) >> 2 > v21)
            v21 = (uint64_t)(v16 - (_QWORD)v15) >> 2;
          if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v22);
          else
            v23 = 0;
          v24 = (char *)(v22 + 8 * v20);
          *(_QWORD *)v24 = v18;
          v19 = v24 + 8;
          while (v17 != v15)
          {
            v25 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v24 - 1) = v25;
            v24 -= 8;
          }
          v16 = v22 + 8 * v23;
          *a1 = v24;
          a1[1] = v19;
          a1[2] = (char *)v16;
          if (v15)
            operator delete(v15);
          v15 = v24;
        }
        else
        {
          *(_QWORD *)v17 = v18;
          v19 = v17 + 8;
        }
        a1[1] = v19;
        v17 = v19;
      }
      ++v8;
    }
    while (v8 != a4);
  }
}

void sub_1C2832774(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

_QWORD *marrs::mrr::mr::enumerateAllIndices(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  result = std::vector<unsigned long>::vector(a1, 0x84BDA12F684BDA13 * ((a3 - a2) >> 3));
  v4 = (_QWORD *)*result;
  v5 = (_QWORD *)result[1];
  if ((_QWORD *)*result != v5)
  {
    v6 = 0;
    do
      *v4++ = v6++;
    while (v4 != v5);
  }
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1C2832854(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> **std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::back_insert_iterator<std::vector<std::string>>>(std::vector<std::string> **result, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, std::vector<std::string> *a6)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  std::vector<std::string> *v18;

  v8 = result;
  v18 = a6;
  if (a2 != a3)
  {
    v9 = a4;
    if (a4 != a5)
    {
      v10 = a2;
      do
      {
        result = (std::vector<std::string> **)std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10 + 4, v9 + 4);
        if ((_DWORD)result)
        {
          v11 = (_QWORD *)v10[1];
          if (v11)
          {
            do
            {
              v10 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = v10;
              v10 = (_QWORD *)v10[2];
            }
            while ((_QWORD *)*v10 != v12);
          }
        }
        else
        {
          result = (std::vector<std::string> **)std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v9 + 4, v10 + 4);
          if ((result & 1) != 0)
          {
            v13 = v10;
          }
          else
          {
            result = std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v18, (__int128 *)v10 + 2);
            v14 = (_QWORD *)v10[1];
            if (v14)
            {
              do
              {
                v13 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v10[2];
                v15 = *v13 == (_QWORD)v10;
                v10 = v13;
              }
              while (!v15);
            }
          }
          v16 = (_QWORD *)v9[1];
          if (v16)
          {
            do
            {
              v9 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = v9;
              v9 = (_QWORD *)v9[2];
            }
            while ((_QWORD *)*v9 != v17);
          }
          v10 = v13;
        }
      }
      while (v10 != a3 && v9 != a5);
      a6 = v18;
    }
  }
  *v8 = a3;
  v8[1] = a5;
  v8[2] = a6;
  return result;
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, __int128 *a2)
{
  std::vector<std::string> *v3;
  std::string *value;
  std::string *end;
  std::vector<std::string> *v6;
  std::vector<std::string>::pointer v7;

  v3 = *a1;
  end = (*a1)->__end_;
  value = (*a1)->__end_cap_.__value_;
  v6 = *a1;
  if (end >= value)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = end + 1;
  }
  v3->__end_ = v7;
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1C2832A58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1C2832B6C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void marrs::inference_engine::InferenceTensor::~InferenceTensor(marrs::inference_engine::InferenceTensor *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void marrs::mrr::md::inference_engine::MentionDetectorModuleInputType::~MentionDetectorModuleInputType(marrs::mrr::md::inference_engine::MentionDetectorModuleInputType *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void sub_1C2832C4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2832CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C2832DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2832E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C2832F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C283303C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2833448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1C28335F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C28336BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C28338B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1C2833B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void std::fstream::open(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate v6;

  v4 = std::filebuf::open();
  v5 = (std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3));
  if (v4)
    v6 = 0;
  else
    v6 = v5->__rdstate_ | 4;
  std::ios_base::clear(v5, v6);
}

void boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, std::locale *a2)
{
  const std::locale *v3;
  int v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::locale::id *v8;
  std::string::size_type v9;
  uint64_t v10;
  const std::locale::facet *v11;
  int v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  std::string *v16;
  std::string::size_type v17;
  unsigned __int8 *v18;
  std::locale::id *v19;
  std::string *v20;
  uint64_t v21;
  const std::locale::facet *v22;
  std::string::size_type v23;
  int v25;
  std::locale v26;
  int locale;
  std::locale v28;
  int v29;
  std::locale v30;
  int v31;
  std::locale v32;

  v3 = a2 + 1;
  locale = (int)a2->__locale_;
  std::locale::locale(&v28, a2 + 1);
  v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v4 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v7 = (std::string *)((char *)v5 + size);
  v29 = locale;
  std::locale::locale(&v30, &v28);
  v31 = v29;
  std::locale::locale(&v32, &v30);
  v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (size)
  {
    v9 = size;
    v10 = v5->__r_.__value_.__s.__data_[size - 1];
    v11 = std::locale::use_facet(&v32, v8);
    if ((v10 & 0x80) != 0)
    {
      v5 = v7;
      break;
    }
    v7 = (std::string *)((char *)v7 - 1);
    v12 = *((_DWORD *)&v11[1].~facet + v10);
    size = v9 - 1;
    if ((v12 & v31) == 0)
    {
      v5 = (std::string *)((char *)v5 + v9);
      break;
    }
  }
  std::locale::~locale(&v32);
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v13 & 0x80u) == 0)
    v14 = a1;
  else
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v13 & 0x80u) != 0)
    v13 = a1->__r_.__value_.__l.__size_;
  std::string::erase(a1, (char *)v5 - (char *)v14, (char *)v14 + v13 - (char *)v5);
  std::locale::~locale(&v30);
  std::locale::~locale(&v28);
  v25 = (int)a2->__locale_;
  std::locale::locale(&v26, v3);
  v15 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v15 >= 0)
    v16 = a1;
  else
    v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v15 >= 0)
    v17 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    v17 = a1->__r_.__value_.__l.__size_;
  v31 = v25;
  std::locale::locale(&v32, &v26);
  if (v17)
  {
    v18 = (unsigned __int8 *)v16 + v17;
    v19 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v20 = v16;
    while (1)
    {
      v21 = v20->__r_.__value_.__s.__data_[0];
      v22 = std::locale::use_facet(&v32, v19);
      if ((v21 & 0x80) != 0 || (*((_DWORD *)&v22[1].~facet + v21) & v31) == 0)
        break;
      v20 = (std::string *)((char *)v20 + 1);
      if (!--v17)
      {
        v20 = (std::string *)v18;
        break;
      }
    }
  }
  else
  {
    v20 = v16;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = (std::string::size_type)a1;
  else
    v23 = a1->__r_.__value_.__r.__words[0];
  std::string::erase(a1, (std::string::size_type)v16 - v23, (char *)v20 - (char *)v16);
  std::locale::~locale(&v32);
  std::locale::~locale(&v26);
}

void sub_1C2833E10(_Unwind_Exception *a1)
{
  std::locale *v1;
  std::locale *v2;

  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x1C3BC5A3C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](v2);
  return a1;
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v1;

  v1 = a1 + 54;
  MEMORY[0x1C3BC5A3C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x1C3BC5A3C](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1C3BC5BC8);
}

{
  _QWORD *v1;

  v1 = a1 + 52;
  MEMORY[0x1C3BC5A3C](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x1C3BC5A3C](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1C3BC5BC8);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x1C3BC5A3C](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](v1 + 54);
  JUMPOUT(0x1C3BC5C7CLL);
}

void sub_1C283415C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C28344DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  int v26;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v26 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t RepetitionPredictorBase::readConfig(uint64_t a1, const void **a2)
{
  size_t v3;
  std::string *v4;
  const void *v5;
  std::string *v6;
  std::ios_base::openmode v7;
  __int128 v8;
  std::string::size_type v9;
  uint64_t v10;
  const std::locale::facet *v11;
  unsigned __int8 v12;
  std::string::size_type size;
  void **v14;
  char *v15;
  void **v16;
  std::string *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  NSObject *v21;
  __int128 *v22;
  std::string *p_str;
  _QWORD *exception;
  _QWORD **v27;
  std::string::size_type v28;
  std::string v29;
  _BYTE v30[48];
  void *__p;
  char v32;
  uint64_t v33;
  std::string __str;
  __int128 v35;
  uint64_t v36;
  std::string v37;
  std::string __s;
  uint64_t v39;
  _BYTE v40[22];
  __int16 v41;
  std::string *v42;
  std::fstream v43;
  std::ios_base v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v43.__sb_.__extbufnext_ = 0;
  v44.__vftable = (std::ios_base_vtbl *)&unk_1E7C67410;
  std::ios_base::init(&v44, v43.__sb_.__extbuf_min_);
  v46 = -1;
  v45 = 0;
  MEMORY[0x1C3BC5A30](v43.__sb_.__extbuf_min_);
  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v3 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v29;
  else
    v4 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = *a2;
    memmove(v4, v5, v3);
  }
  *(_WORD *)((char *)&v4->__r_.__value_.__l.__data_ + v3) = 47;
  v6 = std::string::append(&v29, "uic.config");
  v8 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v8;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::fstream::open(&v43, &__s, v7);
  if (!*(&v43.__sb_.__st_._mbstateL + 9))
  {
    std::fstream::close(&v43);
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v29, "#Model failed to load config");
    std::string::basic_string[abi:ne180100]<0>(v40, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&v29, (uint64_t)v40, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RepetitionPredictorBase.cpp", 20);
  }
  memset(&v37, 0, sizeof(v37));
  v35 = 0uLL;
  v36 = 0;
  memset(&__str, 0, sizeof(__str));
  v27 = (_QWORD **)(a1 + 160);
  v9 = *MEMORY[0x1E0DE4F58];
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v43 + *((_QWORD *)v43.__sb_.__extbuf_ - 3)));
    v11 = std::locale::use_facet((const std::locale *)&v29, MEMORY[0x1E0DE4A90]);
    v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)&v29);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v43, (uint64_t)&v37, v12);
    if ((v43.__sb_.__extbuf_min_[*((_QWORD *)v43.__sb_.__extbuf_ - 3) + 8] & 5) != 0)
      break;
    MEMORY[0x1C3BC5B8C](v40);
    LODWORD(v29.__r_.__value_.__l.__data_) = 0x4000;
    std::locale::locale((std::locale *)&v29.__r_.__value_.__r.__words[1], (const std::locale *)v40);
    boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v37, (std::locale *)&v29);
    std::locale::~locale((std::locale *)&v29.__r_.__value_.__r.__words[1]);
    std::locale::~locale((std::locale *)v40);
    size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v37.__r_.__value_.__l.__size_;
    if (size)
    {
      std::istringstream::basic_istringstream[abi:ne180100](&v29, &v37);
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v29, (uint64_t)&v35);
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v29, (uint64_t)&__str);
      if ((v30[*(_QWORD *)(v29.__r_.__value_.__r.__words[0] - 24)] & 5) == 0)
      {
        v14 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v27, &v39, &v35);
        v15 = (char *)*v14;
        if (!*v14)
        {
          v16 = v14;
          v15 = (char *)operator new(0x50uLL);
          *(_QWORD *)v40 = v15;
          *(_QWORD *)&v40[8] = a1 + 168;
          v40[16] = 0;
          v17 = (std::string *)(v15 + 32);
          if (SHIBYTE(v36) < 0)
          {
            std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v35, *((std::string::size_type *)&v35 + 1));
          }
          else
          {
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v35;
            *((_QWORD *)v15 + 6) = v36;
          }
          *((_QWORD *)v15 + 8) = 0;
          *((_QWORD *)v15 + 9) = 0;
          *((_QWORD *)v15 + 7) = 0;
          v40[16] = 1;
          v18 = v39;
          *(_QWORD *)v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
          *((_QWORD *)v15 + 2) = v18;
          *v16 = v15;
          v19 = (_QWORD *)**v27;
          v20 = (uint64_t *)v15;
          if (v19)
          {
            *v27 = v19;
            v20 = (uint64_t *)*v16;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v20);
          ++*(_QWORD *)(a1 + 176);
          *(_QWORD *)v40 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
        }
        std::string::operator=((std::string *)(v15 + 56), &__str);
        v21 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v22 = &v35;
          if (v36 < 0)
            v22 = (__int128 *)v35;
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          *(_DWORD *)v40 = 136315650;
          *(_QWORD *)&v40[4] = "readConfig";
          *(_WORD *)&v40[12] = 2080;
          *(_QWORD *)&v40[14] = v22;
          v41 = 2080;
          v42 = p_str;
          _os_log_impl(&dword_1C281A000, v21, OS_LOG_TYPE_INFO, "%s #Model config: %s : %s", v40, 0x20u);
        }
      }
      v29.__r_.__value_.__r.__words[0] = v9;
      *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + *(_QWORD *)(v9 - 24)) = v28;
      v29.__r_.__value_.__r.__words[2] = v10;
      if (v32 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1C3BC5BC8](&v33);
    }
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v43 + *((_QWORD *)v43.__sb_.__extbuf_ - 3)), *(_DWORD *)&v43.__sb_.__extbuf_min_[*((_QWORD *)v43.__sb_.__extbuf_ - 3) + 8] | 4);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  MEMORY[0x1C3BC5A3C](v43.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BC5BC8](&v44);
}

void sub_1C2834BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *__p;
  char a72;
  void (__cdecl **a73)(std::fstream *__hidden);
  void *v73;
  int v74;

  if (a72 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v74 & 1) == 0)
    {
LABEL_8:
      if (a69 < 0)
        operator delete(a64);
      std::fstream::~fstream(&a73);
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v73);
  goto LABEL_8;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::fstream::close(std::fstream *this)
{
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3)), *(_DWORD *)&this->__sb_.__extbuf_min_[*((_QWORD *)this->__sb_.__extbuf_ - 3) + 8] | 4);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;

  v4 = MEMORY[0x1E0DE4FD8];
  v5 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v6 = (uint64_t)(a1 + 2);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v7;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v7 - 24)) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *a1 = v4 + 24;
  a1[15] = v5;
  std::stringbuf::basic_stringbuf[abi:ne180100](v6, a2, 8);
  return a1;
}

void sub_1C2834EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3BC5BC8](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x1C3BC5A48](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1C283509C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C2835068);
  }
  __cxa_rethrow();
}

void sub_1C2835100(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3BC5BC8](a1 + 120);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;
  std::string *v7;
  char v8;
  std::string *v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  v7 = (std::string *)(v6 + 64);
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  *(_QWORD *)(a1 + 88) = 0;
  v8 = *(_BYTE *)(a1 + 87);
  if (v8 < 0)
  {
    v9 = *(std::string **)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v9 = v7;
    v10 = *(unsigned __int8 *)(a1 + 87);
  }
  v11 = *(_DWORD *)(a1 + 96);
  if ((v11 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v9 + v10;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = (char *)v9 + v10;
  }
  if ((v11 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v9 + v10;
    v12 = v8 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v7, v12, 0);
    v13 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = (char *)v9 + v13;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v10 >> 31)
      {
        v14 = ((v10 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v15 = 0x7FFFFFFF * ((v14 + ((v10 - 0x80000000 - v14) >> 1)) >> 30);
        v9 = (std::string *)((char *)v9 + v15 + 0x7FFFFFFF);
        v10 = v10 - v15 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v9;
      }
      if (v10)
        *(_QWORD *)(a1 + 48) = (char *)v9 + v10;
    }
  }
  return a1;
}

void sub_1C28352E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4))
    return v2;
  return v5;
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void RepetitionPredictorBase::loadCostMatrix(uint64_t a1, const void **a2)
{
  _QWORD *v3;
  size_t v4;
  char *p_p;
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::ios_base::openmode v14;
  uint64_t v15;
  uint64_t i;
  _QWORD *v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  std::string *v21;
  unint64_t v22;
  const std::locale::facet *v23;
  unsigned __int8 v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  std::string *v28;
  _QWORD *v29;
  __int128 v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  unint64_t v45;
  _DWORD *v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int8x8_t *v54;
  unint64_t v55;
  unint64_t v56;
  int8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 **v62;
  unsigned __int8 *k;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t m;
  void *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  unint64_t v73;
  int8x8_t v74;
  unint64_t v75;
  uint8x8_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t n;
  std::locale::__imp *locale;
  void *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int ii;
  unint64_t v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint8x8_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int8 *v112;
  int v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint8x8_t v117;
  void **v118;
  _QWORD *v119;
  unint64_t v120;
  float v121;
  float v122;
  _BOOL8 v123;
  unint64_t v124;
  unint64_t v125;
  size_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  void *v130;
  NSObject *v131;
  const char *v132;
  NSObject *v133;
  const char *v134;
  _QWORD *v135;
  _QWORD *exception;
  _QWORD *v137;
  uint64_t v139;
  std::locale::__imp *v140;
  std::locale::__imp *v141;
  uint64_t v142;
  std::string __s;
  _BYTE v144[32];
  int v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::locale v149[2];
  __int128 v150;
  int v151;
  void *v152;
  char v153;
  uint64_t v154;
  int v155;
  void *v156[2];
  uint64_t v157;
  void *v158[2];
  uint64_t v159;
  void *v160[2];
  uint64_t v161;
  std::string v162;
  void *v163;
  char v164;
  void *v165[2];
  void *v166[2];
  float v167;
  std::fstream __p;
  std::ios_base v169;
  uint64_t v170;
  int v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "cost_matrix_file");
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 160, &__p);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0)
    operator delete(__p.__sb_.__extbuf_);
  if ((_QWORD *)(a1 + 168) == v3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "#Model No cost matrix file specified");
    std::string::basic_string[abi:ne180100]<0>(v149, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&__p, (uint64_t)v149, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RepetitionPredictorBase.cpp", 62);
  }
  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  p_p = (char *)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0)
    p_p = __p.__sb_.__extbuf_;
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    memmove(p_p, v6, v4);
  }
  *(_WORD *)&p_p[v4] = 47;
  std::string::basic_string[abi:ne180100]<0>(v149, "cost_matrix_file");
  v7 = std::map<std::string,std::string>::at(a1 + 160, v149);
  v8 = (_QWORD *)a1;
  v9 = *(char *)(v7 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)v7;
  else
    v10 = *(const std::string::value_type **)v7;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = *(_QWORD *)(v7 + 8);
  v12 = std::string::append((std::string *)&__p, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v150) < 0)
    operator delete(v149[0].__locale_);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0)
    operator delete(__p.__sb_.__extbuf_);
  *(_OWORD *)v165 = 0u;
  *(_OWORD *)v166 = 0u;
  v167 = 1.0;
  std::string::basic_string[abi:ne180100]<0>(&v163, "");
  v169.__vftable = (std::ios_base_vtbl *)&unk_1E7C67410;
  __p.__sb_.__extbuf_ = (char *)&unk_1E7C673E8;
  __p.__sb_.__extbufnext_ = 0;
  std::ios_base::init(&v169, __p.__sb_.__extbuf_min_);
  v171 = -1;
  v170 = 0;
  MEMORY[0x1C3BC5A30](__p.__sb_.__extbuf_min_);
  if (*(_QWORD *)(a1 + 32))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__deallocate_node(*(_QWORD **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
    {
      for (i = 0; i != v15; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  v17 = (_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 144))
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 136));
    *(_QWORD *)(a1 + 136) = 0;
    v18 = *(_QWORD *)(a1 + 128);
    if (v18)
    {
      for (j = 0; j != v18; ++j)
        *(_QWORD *)(*v17 + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 144) = 0;
  }
  std::fstream::open(&__p, &__s, v14);
  if (!*(&__p.__sb_.__st_._mbstateL + 9))
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&__p + *((_QWORD *)__p.__sb_.__extbuf_ - 3)), *(_DWORD *)&__p.__sb_.__extbuf_min_[*((_QWORD *)__p.__sb_.__extbuf_ - 3) + 8] | 4);
    goto LABEL_246;
  }
  v20 = 0;
  v21 = (std::string *)(a1 + 88);
  v137 = (_QWORD *)(a1 + 48);
  memset(&v162, 0, sizeof(v162));
  v160[1] = 0;
  v160[0] = 0;
  v161 = 0;
  v158[1] = 0;
  v158[0] = 0;
  v159 = 0;
  v22 = (unint64_t)&v150;
  v156[1] = 0;
  v156[0] = 0;
  v157 = 0;
  v155 = 0;
  v140 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 24);
  v141 = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
  v139 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p.__sb_.__extbuf_ - 3)));
    v23 = std::locale::use_facet(v149, MEMORY[0x1E0DE4A90]);
    v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(v149);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (uint64_t)&v162, v24);
    if ((__p.__sb_.__extbuf_min_[*((_QWORD *)__p.__sb_.__extbuf_ - 3) + 8] & 5) != 0)
      break;
    std::istringstream::basic_istringstream[abi:ne180100](v149, &v162);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v149, (uint64_t)v160);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v149, (uint64_t)v160);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v149, (uint64_t)v158);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v149, (uint64_t)v156);
    v25 = (_QWORD *)MEMORY[0x1C3BC5A60](v149, &v155);
    if ((*((_BYTE *)v25 + *(_QWORD *)(*v25 - 24) + 32) & 5) != 0)
      goto LABEL_117;
    if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v17, (unsigned __int8 *)v158))
    {
      SymbolMapper::set((uint64_t)v21, (uint64_t)v158, v20);
      v20 = (v20 + 1);
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v17, (unsigned __int8 *)v156))
    {
      SymbolMapper::set((uint64_t)v21, (uint64_t)v156, v20);
      v20 = (v20 + 1);
    }
    v26 = v155;
    v27 = SymbolMapper::mapPhone((uint64_t)v21, (unsigned __int8 *)v158);
    std::to_string(&v147, v27);
    v28 = std::string::append(&v147, ",");
    v29 = v17;
    v30 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v30;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v31 = SymbolMapper::mapPhone((uint64_t)v21, (unsigned __int8 *)v156);
    std::to_string(&v146, v31);
    v32 = v22;
    v33 = v20;
    v34 = v21;
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v146;
    else
      v35 = (std::string *)v146.__r_.__value_.__r.__words[0];
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    else
      size = v146.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v148, (const std::string::value_type *)v35, size);
    *(std::string *)v144 = *v37;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v38 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v144);
    v39 = v38;
    v40 = (unint64_t)v165[1];
    if (!v165[1])
      goto LABEL_64;
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)v165[1]);
    v41.i16[0] = vaddlv_u8(v41);
    v42 = v41.u32[0];
    if (v41.u32[0] > 1uLL)
    {
      v22 = v38;
      if ((void *)v38 >= v165[1])
        v22 = v38 % (unint64_t)v165[1];
    }
    else
    {
      v22 = ((unint64_t)v165[1] - 1) & v38;
    }
    v43 = (unsigned __int8 **)*((_QWORD *)v165[0] + v22);
    if (!v43 || (v44 = *v43) == 0)
    {
LABEL_64:
      v46 = operator new(0x30uLL);
      *(_QWORD *)v46 = 0;
      *((_QWORD *)v46 + 1) = v39;
      *((_OWORD *)v46 + 1) = *(_OWORD *)v144;
      *((_QWORD *)v46 + 4) = *(_QWORD *)&v144[16];
      memset(v144, 0, 24);
      v46[10] = 0;
      v47 = (float)((unint64_t)v166[1] + 1);
      if (!v40 || (float)(v167 * (float)v40) < v47)
      {
        v48 = (v40 & (v40 - 1)) != 0;
        if (v40 < 3)
          v48 = 1;
        v49 = v48 | (2 * v40);
        v50 = vcvtps_u32_f32(v47 / v167);
        if (v49 <= v50)
          v51 = v50;
        else
          v51 = v49;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v165, v51);
        v40 = (unint64_t)v165[1];
        if (((unint64_t)v165[1] & ((unint64_t)v165[1] - 1)) != 0)
        {
          if ((void *)v39 >= v165[1])
            v22 = v39 % (unint64_t)v165[1];
          else
            v22 = v39;
        }
        else
        {
          v22 = ((unint64_t)v165[1] - 1) & v39;
        }
      }
      v52 = v165[0];
      v53 = (_QWORD *)*((_QWORD *)v165[0] + v22);
      if (v53)
      {
        *(_QWORD *)v46 = *v53;
        v54 = (int8x8_t *)a1;
        goto LABEL_84;
      }
      *(void **)v46 = v166[0];
      v166[0] = v46;
      v52[v22] = v166;
      v54 = (int8x8_t *)a1;
      if (*(_QWORD *)v46)
      {
        v55 = *(_QWORD *)(*(_QWORD *)v46 + 8);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v55 >= v40)
            v55 %= v40;
        }
        else
        {
          v55 &= v40 - 1;
        }
        v53 = (char *)v165[0] + 8 * v55;
LABEL_84:
        *v53 = v46;
      }
      ++v166[1];
      v46[10] = v26;
      goto LABEL_86;
    }
    while (1)
    {
      v45 = *((_QWORD *)v44 + 1);
      if (v45 == v39)
        break;
      if (v42 > 1)
      {
        if (v45 >= v40)
          v45 %= v40;
      }
      else
      {
        v45 &= v40 - 1;
      }
      if (v45 != v22)
        goto LABEL_64;
LABEL_63:
      v44 = *(unsigned __int8 **)v44;
      if (!v44)
        goto LABEL_64;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v44 + 16, v144))
      goto LABEL_63;
    v72 = v144[23];
    *((_DWORD *)v44 + 10) = v26;
    v54 = (int8x8_t *)a1;
    if (v72 < 0)
      operator delete(*(void **)v144);
LABEL_86:
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v148.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    v56 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v158);
    v57 = v54[7];
    if (v57)
    {
      v58 = v56;
      v59 = (uint8x8_t)vcnt_s8(v57);
      v59.i16[0] = vaddlv_u8(v59);
      v60 = v59.u32[0];
      if (v59.u32[0] > 1uLL)
      {
        v61 = v56;
        if (v56 >= *(_QWORD *)&v57)
          v61 = v56 % *(_QWORD *)&v57;
      }
      else
      {
        v61 = (*(_QWORD *)&v57 - 1) & v56;
      }
      v62 = *(unsigned __int8 ***)(*v137 + 8 * v61);
      if (v62)
      {
        for (k = *v62; k; k = *(unsigned __int8 **)k)
        {
          v64 = *((_QWORD *)k + 1);
          if (v64 == v58)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](k + 16, (unsigned __int8 *)v158))
              goto LABEL_116;
          }
          else
          {
            if (v60 > 1)
            {
              if (v64 >= *(_QWORD *)&v57)
                v64 %= *(_QWORD *)&v57;
            }
            else
            {
              v64 &= *(_QWORD *)&v57 - 1;
            }
            if (v64 != v61)
              break;
          }
        }
      }
    }
    memset(v144, 0, sizeof(v144));
    v145 = 1065353216;
    v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
    v65 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v137, (unsigned __int8 *)v158, (__int128 **)&v148);
    v66 = v65;
    if (*((_QWORD *)v65 + 8))
    {
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*((void ***)v65 + 7));
      *((_QWORD *)v66 + 7) = 0;
      v67 = *((_QWORD *)v66 + 6);
      if (v67)
      {
        for (m = 0; m != v67; ++m)
          *(_QWORD *)(*((_QWORD *)v66 + 5) + 8 * m) = 0;
      }
      *((_QWORD *)v66 + 8) = 0;
    }
    *(_QWORD *)v144 = 0;
    v69 = (void *)*((_QWORD *)v66 + 5);
    *((_QWORD *)v66 + 5) = 0;
    if (v69)
      operator delete(v69);
    *((_QWORD *)v66 + 6) = 0;
    *((_QWORD *)v66 + 7) = 0;
    *((_QWORD *)v66 + 8) = 0;
    *((_DWORD *)v66 + 18) = 1065353216;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(0);
LABEL_116:
    v70 = v155;
    *(_QWORD *)v144 = v158;
    v71 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v137, (unsigned __int8 *)v158, (__int128 **)v144);
    v8 = (_QWORD *)a1;
    v21 = v34;
    v20 = v33;
    v22 = v32;
    v17 = v29;
    *(_QWORD *)v144 = v156;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v71 + 40), (unsigned __int8 *)v156, (__int128 **)v144)+ 10) = v70;
LABEL_117:
    v149[0].__locale_ = v141;
    *(std::locale::__imp **)((char *)&v149[0].__locale_ + *((_QWORD *)v141 - 3)) = v140;
    *(_QWORD *)&v150 = v139;
    if (v153 < 0)
      operator delete(v152);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C3BC5BC8](&v154);
  }
  std::string::basic_string[abi:ne180100]<0>(v149, "<eps>");
  std::string::operator=(v21, (const std::string *)v149);
  v73 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v149);
  v74 = (int8x8_t)v8[16];
  if (!*(_QWORD *)&v74)
    goto LABEL_140;
  v75 = v73;
  v76 = (uint8x8_t)vcnt_s8(v74);
  v76.i16[0] = vaddlv_u8(v76);
  v77 = v76.u32[0];
  if (v76.u32[0] > 1uLL)
  {
    v78 = v73;
    if (v73 >= *(_QWORD *)&v74)
      v78 = v73 % *(_QWORD *)&v74;
  }
  else
  {
    v78 = (*(_QWORD *)&v74 - 1) & v73;
  }
  v79 = *(unsigned __int8 ***)(*v17 + 8 * v78);
  if (!v79 || (v80 = *v79) == 0)
LABEL_140:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (2)
  {
    v81 = *((_QWORD *)v80 + 1);
    if (v81 != v75)
    {
      if (v77 > 1)
      {
        if (v81 >= *(_QWORD *)&v74)
          v81 %= *(_QWORD *)&v74;
      }
      else
      {
        v81 &= *(_QWORD *)&v74 - 1;
      }
      if (v81 != v78)
        goto LABEL_140;
      goto LABEL_139;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v80 + 16, (unsigned __int8 *)v149))
    {
LABEL_139:
      v80 = *(unsigned __int8 **)v80;
      if (!v80)
        goto LABEL_140;
      continue;
    }
    break;
  }
  *(_DWORD *)(a1 + 112) = *((_DWORD *)v80 + 10);
  if (SBYTE7(v150) < 0)
    operator delete(v149[0].__locale_);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&__p + *((_QWORD *)__p.__sb_.__extbuf_ - 3)), *(_DWORD *)&__p.__sb_.__extbuf_min_[*((_QWORD *)__p.__sb_.__extbuf_ - 3) + 8] | 4);
  v142 = *(_QWORD *)(a1 + 144);
  if ((int)v142 >= 1)
  {
    v82 = 0;
    v83 = a1 + 8;
    do
    {
      *(_OWORD *)&v149[0].__locale_ = 0u;
      v150 = 0u;
      v151 = 1065353216;
      *(_DWORD *)v144 = v82;
      v84 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v83, v82, v144);
      v85 = v84;
      if (v84[6])
      {
        v86 = (_QWORD *)v84[5];
        if (v86)
        {
          do
          {
            v87 = (_QWORD *)*v86;
            operator delete(v86);
            v86 = v87;
          }
          while (v87);
        }
        v85[5] = 0;
        v88 = v85[4];
        if (v88)
        {
          for (n = 0; n != v88; ++n)
            *(_QWORD *)(v85[3] + 8 * n) = 0;
        }
        v85[6] = 0;
        v83 = a1 + 8;
      }
      locale = v149[0].__locale_;
      v149[0].__locale_ = 0;
      v91 = (void *)v85[3];
      v85[3] = (uint64_t)locale;
      if (v91)
        operator delete(v91);
      v92 = (unint64_t)v149[1].__locale_;
      v93 = v150;
      v85[5] = v150;
      v85[4] = v92;
      v149[1].__locale_ = 0;
      v94 = *((_QWORD *)&v150 + 1);
      v85[6] = *((_QWORD *)&v150 + 1);
      *((_DWORD *)v85 + 14) = v151;
      if (v94)
      {
        v95 = *(_QWORD *)(v93 + 8);
        if ((v92 & (v92 - 1)) != 0)
        {
          if (v95 >= v92)
            v95 %= v92;
        }
        else
        {
          v95 &= v92 - 1;
        }
        *(_QWORD *)(v85[3] + 8 * v95) = v85 + 5;
        v150 = 0uLL;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)v149);
      ++v82;
    }
    while (v82 != (_DWORD)v142);
    for (ii = 0; ii != (_DWORD)v142; ++ii)
    {
      v97 = 0;
      do
      {
        std::to_string(&v148, ii);
        v98 = std::string::append(&v148, ",");
        v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        *(_QWORD *)&v144[16] = *((_QWORD *)&v98->__r_.__value_.__l + 2);
        *(_OWORD *)v144 = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v147, v97);
        if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v100 = &v147;
        else
          v100 = (std::string *)v147.__r_.__value_.__r.__words[0];
        if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
        else
          v101 = v147.__r_.__value_.__l.__size_;
        v102 = std::string::append((std::string *)v144, (const std::string::value_type *)v100, v101);
        *(_OWORD *)&v149[0].__locale_ = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        *(_QWORD *)&v150 = *((_QWORD *)&v102->__r_.__value_.__l + 2);
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v147.__r_.__value_.__l.__data_);
        if ((v144[23] & 0x80000000) != 0)
          operator delete(*(void **)v144);
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v148.__r_.__value_.__l.__data_);
        v103 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v149);
        v104 = (unint64_t)v165[1];
        if (!v165[1])
          goto LABEL_234;
        v105 = v103;
        v106 = (uint8x8_t)vcnt_s8((int8x8_t)v165[1]);
        v106.i16[0] = vaddlv_u8(v106);
        v107 = v106.u32[0];
        if (v106.u32[0] > 1uLL)
        {
          v108 = v103;
          if ((void *)v103 >= v165[1])
            v108 = v103 % (unint64_t)v165[1];
        }
        else
        {
          v108 = ((unint64_t)v165[1] - 1) & v103;
        }
        v109 = (unint64_t *)*((_QWORD *)v165[0] + v108);
        if (!v109)
          goto LABEL_234;
        v110 = *v109;
        if (!*v109)
          goto LABEL_234;
        while (1)
        {
          v111 = *(_QWORD *)(v110 + 8);
          if (v105 == v111)
            break;
          if (v107 > 1)
          {
            if (v111 >= v104)
              v111 %= v104;
          }
          else
          {
            v111 &= v104 - 1;
          }
          if (v111 != v108)
            goto LABEL_234;
LABEL_192:
          v110 = *(_QWORD *)v110;
          if (!v110)
            goto LABEL_234;
        }
        if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v110 + 16), (unsigned __int8 *)v149))goto LABEL_192;
        v112 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(v165, (unsigned __int8 *)v149);
        if (!v112)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v113 = *((_DWORD *)v112 + 10);
        *(_DWORD *)v144 = ii;
        v114 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a1 + 8, ii, v144);
        v115 = v114 + 3;
        v116 = v114[4];
        if (v116)
        {
          v117 = (uint8x8_t)vcnt_s8((int8x8_t)v116);
          v117.i16[0] = vaddlv_u8(v117);
          if (v117.u32[0] > 1uLL)
          {
            v110 = v97;
            if (v116 <= v97)
              v110 = v97 % v116;
          }
          else
          {
            v110 = (v116 + 0x7FFFFFFF) & v97;
          }
          v118 = *(void ***)(*v115 + 8 * v110);
          if (v118)
          {
            v119 = *v118;
            if (*v118)
            {
              do
              {
                v120 = v119[1];
                if (v120 == v97)
                {
                  if (v97 == *((_DWORD *)v119 + 4))
                    goto LABEL_233;
                }
                else
                {
                  if (v117.u32[0] > 1uLL)
                  {
                    if (v120 >= v116)
                      v120 %= v116;
                  }
                  else
                  {
                    v120 &= v116 - 1;
                  }
                  if (v120 != v110)
                    break;
                }
                v119 = (_QWORD *)*v119;
              }
              while (v119);
            }
          }
        }
        v119 = operator new(0x18uLL);
        *v119 = 0;
        v119[1] = v97;
        *((_DWORD *)v119 + 4) = v97;
        *((_DWORD *)v119 + 5) = 0;
        v121 = (float)(unint64_t)(v114[6] + 1);
        v122 = *((float *)v114 + 14);
        if (!v116 || (float)(v122 * (float)v116) < v121)
        {
          v123 = (v116 & (v116 - 1)) != 0;
          if (v116 < 3)
            v123 = 1;
          v124 = v123 | (2 * v116);
          v125 = vcvtps_u32_f32(v121 / v122);
          if (v124 <= v125)
            v126 = v125;
          else
            v126 = v124;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v115, v126);
          v116 = v114[4];
          if ((v116 & (v116 - 1)) != 0)
          {
            if (v116 <= v97)
              v110 = v97 % v116;
            else
              v110 = v97;
          }
          else
          {
            v110 = (v116 + 0x7FFFFFFF) & v97;
          }
        }
        v127 = *v115;
        v128 = *(_QWORD **)(*v115 + 8 * v110);
        if (v128)
        {
          *v119 = *v128;
          goto LABEL_231;
        }
        *v119 = v114[5];
        v114[5] = (uint64_t)v119;
        *(_QWORD *)(v127 + 8 * v110) = v114 + 5;
        if (*v119)
        {
          v129 = *(_QWORD *)(*v119 + 8);
          if ((v116 & (v116 - 1)) != 0)
          {
            if (v129 >= v116)
              v129 %= v116;
          }
          else
          {
            v129 &= v116 - 1;
          }
          v128 = (_QWORD *)(*v115 + 8 * v129);
LABEL_231:
          *v128 = v119;
        }
        ++v114[6];
LABEL_233:
        *((_DWORD *)v119 + 5) = v113;
LABEL_234:
        if (SBYTE7(v150) < 0)
          operator delete(v149[0].__locale_);
        ++v97;
      }
      while (v97 != v142);
    }
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v156[0]);
  if (SHIBYTE(v159) < 0)
    operator delete(v158[0]);
  if (SHIBYTE(v161) < 0)
    operator delete(v160[0]);
  v8 = (_QWORD *)a1;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
LABEL_246:
  MEMORY[0x1C3BC5A3C](__p.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](&v169);
  if (v164 < 0)
    operator delete(v163);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v166[0]);
  v130 = v165[0];
  v165[0] = 0;
  if (v130)
    operator delete(v130);
  if (!v8[4] || !v8[18])
  {
    v135 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "#Model Failed to load confMatrix file");
    std::string::basic_string[abi:ne180100]<0>(v149, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(v135, (uint64_t)&__p, (uint64_t)v149, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RepetitionPredictorBase.cpp", 68);
  }
  v131 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
  {
    v132 = *(const char **)(a1 + 144);
    LODWORD(__p.__sb_.__extbuf_) = 136315394;
    *(char **)((char *)&__p.__sb_.__extbuf_ + 4) = "loadCostMatrix";
    WORD2(__p.__sb_.__extbufnext_) = 2048;
    *(const char **)((char *)&__p.__sb_.__extbufnext_ + 6) = v132;
    _os_log_impl(&dword_1C281A000, v131, OS_LOG_TYPE_INFO, "%s #Model symbol map size: %zu", (uint8_t *)&__p, 0x16u);
  }
  v133 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
  {
    v134 = *(const char **)(a1 + 32);
    LODWORD(__p.__sb_.__extbuf_) = 136315394;
    *(char **)((char *)&__p.__sb_.__extbuf_ + 4) = "loadCostMatrix";
    WORD2(__p.__sb_.__extbufnext_) = 2048;
    *(const char **)((char *)&__p.__sb_.__extbufnext_ + 6) = v134;
    _os_log_impl(&dword_1C281A000, v133, OS_LOG_TYPE_INFO, "%s #Model cost_matrix size: %lu", (uint8_t *)&__p, 0x16u);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1C2836570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  int v47;

  if (a46 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x2D7]) < 0)
  {
    operator delete((void *)STACK[0x2C0]);
    if ((v47 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v47)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v46);
  goto LABEL_8;
}

void createPronunciationsVector(uint64_t a1, __int128 **a2, uint64_t *a3)
{
  __int128 *v6;
  char *v7;
  __int128 v8;
  NSObject *v9;
  char *v10;
  unsigned __int16 *p_p;
  int v12;
  int v13;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  NSObject *v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  std::string *v36;
  __int128 v37;
  _QWORD *exception;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _QWORD *v43;
  unint64_t v44;
  std::string v45;
  std::string v46;
  void *__p;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  _QWORD *v51;
  unint64_t v52;
  _QWORD v53[8];
  char v54;
  uint64_t v55;
  _BYTE buf[24];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  std::vector<std::vector<float>>::__clear[abi:ne180100](a3);
  v6 = *a2;
  v42 = a2[1];
  if (*a2 == v42)
    return;
  v7 = 0;
  v43 = (_QWORD *)(a1 + 32);
  v44 = 0;
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v41 = *MEMORY[0x1E0DE4F58];
  v39 = MEMORY[0x1E0DE4FB8] + 16;
  do
  {
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v8 = *v6;
      v45.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v8;
    }
    std::istringstream::basic_istringstream[abi:ne180100](v50, &v45);
    __p = 0;
    v48 = 0;
    v49 = 0;
    v9 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "mapPhoneString";
      _os_log_debug_impl(&dword_1C281A000, v9, OS_LOG_TYPE_DEBUG, "%s Mapping phone string:", buf, 0xCu);
    }
    v10 = v7;
    while (1)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v50, (uint64_t)&__p);
      if ((*((_BYTE *)v53 + *(_QWORD *)(v50[0] - 24)) & 5) != 0)
        break;
      if (SHIBYTE(v49) < 0)
      {
        if (v48 != 3)
          goto LABEL_19;
        p_p = (unsigned __int16 *)__p;
      }
      else
      {
        if (SHIBYTE(v49) != 3)
          goto LABEL_19;
        p_p = (unsigned __int16 *)&__p;
      }
      v12 = *p_p;
      v13 = *((unsigned __int8 *)p_p + 2);
      if (v12 != 26995 || v13 != 108)
      {
LABEL_19:
        v15 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v43, (unsigned __int8 *)&__p);
        if (!v15)
        {
          std::operator+<char>();
          v36 = std::string::append(&v46, " not found");
          v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v36->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          exception = __cxa_allocate_exception(0x30uLL);
          std::string::basic_string[abi:ne180100]<0>(&v46, "QueryRewrite");
          InferenceError::InferenceError(exception, (uint64_t)buf, (uint64_t)&v46, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Tools/src/SymbolMapper.cpp", 74);
          *exception = &off_1E7C679A0;
        }
        v16 = v15;
        if ((unint64_t)v10 >= v44)
        {
          v17 = (v10 - v7) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v44 - (_QWORD)v7) >> 1 > v18)
            v18 = (uint64_t)(v44 - (_QWORD)v7) >> 1;
          if (v44 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v19);
          else
            v20 = 0;
          v21 = (char *)(v19 + 4 * v17);
          *(_DWORD *)v21 = *((_DWORD *)v16 + 10);
          v22 = v21 + 4;
          while (v10 != v7)
          {
            v23 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v21 - 1) = v23;
            v21 -= 4;
          }
          v44 = v19 + 4 * v20;
          if (v7)
            operator delete(v7);
          v7 = v21;
          v10 = v22;
        }
        else
        {
          *(_DWORD *)v10 = *((_DWORD *)v15 + 10);
          v10 += 4;
        }
        v24 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v43, (unsigned __int8 *)&__p);
          if (!v25)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v26 = *((_DWORD *)v25 + 10);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "mapPhoneString";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          _os_log_debug_impl(&dword_1C281A000, v24, OS_LOG_TYPE_DEBUG, "%s %d", buf, 0x12u);
        }
      }
    }
    if (SHIBYTE(v49) < 0)
      operator delete(__p);
    v50[0] = v41;
    *(uint64_t *)((char *)v50 + *(_QWORD *)(v41 - 24)) = v40;
    v51 = (_QWORD *)v39;
    if (v54 < 0)
      operator delete((void *)v53[6]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C3BC5BC8](&v55);
    v28 = (_QWORD *)a3[1];
    v27 = a3[2];
    if ((unint64_t)v28 >= v27)
    {
      v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *a3) >> 3);
      v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a3) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v31;
      v53[0] = a3 + 2;
      if (v33)
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v33);
      else
        v34 = 0;
      v35 = (_QWORD *)(v33 + 24 * v30);
      v50[0] = v33;
      v50[1] = (uint64_t)v35;
      v51 = v35;
      v52 = v33 + 24 * v34;
      *v35 = 0;
      v35[1] = 0;
      v35[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35, v7, (uint64_t)v10, (v10 - v7) >> 2);
      v51 += 3;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a3, v50);
      v29 = (_QWORD *)a3[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v50);
    }
    else
    {
      *v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28, v7, (uint64_t)v10, (v10 - v7) >> 2);
      v29 = v28 + 3;
      a3[1] = (uint64_t)(v28 + 3);
    }
    a3[1] = (uint64_t)v29;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v6 = (__int128 *)((char *)v6 + 24);
  }
  while (v6 != v42);
  if (v7)
    operator delete(v7);
}

void sub_1C2836DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  void *v42;
  void *v43;
  int v44;
  uint64_t v45;

  if (a35 < 0)
  {
    operator delete(__p);
    if ((v44 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v45 - 105) < 0)
        operator delete(*(void **)(v45 - 128));
      if (a41 < 0)
        operator delete(a36);
      std::istringstream::~istringstream((uint64_t)&a42);
      if (a28 < 0)
        operator delete(a23);
      if (v42)
        operator delete(v42);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v43);
  goto LABEL_6;
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C2836F28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

uint64_t get_correction_type(float *a1, const std::string *a2)
{
  uint64_t v3;
  float v5;
  _QWORD v6[12];
  char v7;
  uint64_t v8;

  std::istringstream::basic_istringstream[abi:ne180100](v6, a2);
  v5 = 0.0;
  MEMORY[0x1C3BC5A60](v6, &v5);
  if (1.0 - *a1 <= v5)
  {
    v3 = 0;
  }
  else if (a1[2] <= a1[1])
  {
    v3 = 1;
  }
  else
  {
    v3 = 2;
  }
  v6[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v6[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3BC5BC8](&v8);
  return v3;
}

void sub_1C2837068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void toQRResponse(int8x16_t *a1, uint64_t a2)
{
  int8x16_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  std::string __p;
  uint64_t v25;
  int v26;
  _QWORD v27[2];
  char *v28;
  char *v29;
  int8x16_t *v30;

  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  a1[3].i32[2] = 4;
  memset(&__p, 0, sizeof(__p));
  a1[1].i32[2] = 0;
  v3 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a2 + 4));
  a1[2] = vextq_s8(v3, v3, 8uLL);
  *(double *)a1[3].i64 = *(float *)a2;
  v4 = *(_DWORD *)(a2 + 40);
  switch(v4)
  {
    case 0:
      v5 = 1;
      goto LABEL_9;
    case 1:
      a1[1].i32[2] = 2;
      v25 = v3.i64[0];
      v26 = 2;
      std::string::operator=(&__p, (const std::string *)(a2 + 48));
      v6 = a1[1].u64[0];
      v7 = a1->u64[1];
      if (v7 >= v6)
      {
        v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - a1->i64[0]) >> 3);
        if ((unint64_t)(v10 + 1) > 0x492492492492492)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - a1->i64[0]) >> 3);
        v12 = 2 * v11;
        if (2 * v11 <= v10 + 1)
          v12 = v10 + 1;
        if (v11 >= 0x249249249249249)
          v13 = 0x492492492492492;
        else
          v13 = v12;
        v30 = a1 + 1;
        if (v13)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v13);
        }
        else
        {
          v15 = 0;
          v14 = 0;
        }
        v18 = &v15[56 * v10];
        v27[0] = v15;
        v27[1] = v18;
        v28 = v18;
        v29 = &v15[56 * v14];
        *(_OWORD *)v18 = v23;
        v19 = (std::string *)(v18 + 16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          v18 = v28;
        }
        else
        {
          v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((_QWORD *)v18 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        }
        v21 = &v15[56 * v10];
        v22 = v25;
        *((_DWORD *)v21 + 12) = v26;
        *((_QWORD *)v21 + 5) = v22;
        v28 = v18 + 56;
        std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer(a1->i64, v27);
        v17 = a1->i64[1];
        std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)v27);
      }
      else
      {
        *(_OWORD *)v7 = v23;
        v8 = (std::string *)(v7 + 16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v7 + 32) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        v16 = v25;
        *(_DWORD *)(v7 + 48) = v26;
        *(_QWORD *)(v7 + 40) = v16;
        v17 = v7 + 56;
        a1->i64[1] = v7 + 56;
      }
      a1->i64[1] = v17;
      a1[3].i32[2] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      break;
    case 2:
      v5 = 3;
LABEL_9:
      a1[1].i32[2] = v5;
      break;
  }
}

void sub_1C28372C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)&a19);
  if (a16 < 0)
    operator delete(__p);
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 56;
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      v6 = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      v7 = *(_QWORD *)(v3 - 16);
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      *(_QWORD *)(v4 - 16) = v7;
      v4 -= 56;
      v3 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 56;
      *(_QWORD *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void removeTriggerTokens(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string::size_type size;
  char v14;
  std::string::size_type v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  std::string::size_type v24;
  int v25;
  int v26;
  void *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  const marrs::qr::orchestration::QRToken *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::string v42;
  std::string v43;
  uint64_t v44;
  std::string *v45;
  unint64_t v46;
  std::string __p;
  unint64_t v48;
  unint64_t *v49;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (a3 != a4)
  {
    v5 = a4;
    v6 = a3;
    do
    {
      memset(&v43, 0, sizeof(v43));
      v7 = *a2;
      if (a2[1] != *a2)
      {
        v8 = 0;
        while (1)
        {
          v9 = v7 + 160 * v8;
          v10 = *(char *)(v9 + 23);
          if (v10 >= 0)
            v11 = (const std::string::value_type *)v9;
          else
            v11 = *(const std::string::value_type **)v9;
          if (v10 >= 0)
            v12 = *(unsigned __int8 *)(v9 + 23);
          else
            v12 = *(_QWORD *)(v9 + 8);
          std::string::append(&v43, v11, v12);
          size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          v14 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v43.__r_.__value_.__l.__size_;
          v15 = *((char *)v6 + 23) < 0 ? (std::string::size_type)v6[1] : *((unsigned __int8 *)v6 + 23);
          if (size > v15)
            break;
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v42, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
          else
            v42 = v43;
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = (std::string *)((char *)&v42 + HIBYTE(v42.__r_.__value_.__r.__words[2]));
          else
            v16 = (std::string *)(v42.__r_.__value_.__r.__words[0] + v42.__r_.__value_.__l.__size_);
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v42;
          else
            v17 = (std::string *)v42.__r_.__value_.__r.__words[0];
          while (v17 != v16)
          {
            v17->__r_.__value_.__s.__data_[0] = __tolower(v17->__r_.__value_.__s.__data_[0]);
            v17 = (std::string *)((char *)v17 + 1);
          }
          __p = v42;
          memset(&v42, 0, sizeof(v42));
          v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v19 = __p.__r_.__value_.__l.__size_;
          v20 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
          v21 = (char)v20;
          if ((char)v20 < 0)
            v20 = v6[1];
          if ((unsigned __int8 *)v19 == v20)
          {
            if (v21 >= 0)
              v22 = (unsigned __int8 *)v6;
            else
              v22 = *v6;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v28 = (void *)__p.__r_.__value_.__r.__words[0];
              v29 = memcmp(__p.__r_.__value_.__l.__data_, v22, __p.__r_.__value_.__l.__size_);
              operator delete(v28);
              if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v42.__r_.__value_.__l.__data_);
              if (!v29)
              {
LABEL_61:
                v30 = v8 + 1;
                v31 = *a2;
                if (v8 + 1 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5))
                {
                  v32 = v45;
                }
                else
                {
                  v32 = v45;
                  v33 = 160 * v8 + 160;
                  do
                  {
                    v34 = (const marrs::qr::orchestration::QRToken *)(v31 + v33);
                    if ((unint64_t)v32 >= v46)
                    {
                      v35 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v32 - v44) >> 5);
                      v36 = v35 + 1;
                      if (v35 + 1 > 0x199999999999999)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      if (0x999999999999999ALL * ((uint64_t)(v46 - v44) >> 5) > v36)
                        v36 = 0x999999999999999ALL * ((uint64_t)(v46 - v44) >> 5);
                      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v44) >> 5) >= 0xCCCCCCCCCCCCCCLL)
                        v37 = 0x199999999999999;
                      else
                        v37 = v36;
                      v49 = &v46;
                      if (v37)
                        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v37);
                      else
                        v38 = 0;
                      __p.__r_.__value_.__r.__words[0] = v37;
                      __p.__r_.__value_.__l.__size_ = v37 + 160 * v35;
                      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
                      v48 = v37 + 160 * v38;
                      marrs::qr::orchestration::QRToken::QRToken((std::string *)__p.__r_.__value_.__l.__size_, v34);
                      __p.__r_.__value_.__r.__words[2] += 160;
                      std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(&v44, &__p);
                      v32 = v45;
                      std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&__p);
                    }
                    else
                    {
                      marrs::qr::orchestration::QRToken::QRToken(v32, v34);
                      v32 = (std::string *)((char *)v32 + 160);
                    }
                    v45 = v32;
                    ++v30;
                    v31 = *a2;
                    v33 += 160;
                  }
                  while (v30 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5));
                }
                v39 = v46;
                *a1 = v44;
                a1[1] = v32;
                a1[2] = v39;
                v45 = 0;
                v46 = 0;
                v44 = 0;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v43.__r_.__value_.__l.__data_);
                goto LABEL_80;
              }
            }
            else
            {
              if (!(_DWORD)v18)
                goto LABEL_61;
              v23 = 0;
              v24 = v18 - 1;
              do
              {
                v25 = __p.__r_.__value_.__s.__data_[v23];
                v26 = v22[v23];
              }
              while (v25 == v26 && v24 != v23++);
              if (v25 == v26)
                goto LABEL_61;
            }
          }
          else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v42.__r_.__value_.__l.__data_);
          }
          v7 = *a2;
          if (!*(_BYTE *)(*a2 + 160 * v8 + 128))
          {
            std::string::append(&v43, " ");
            v7 = *a2;
          }
          if (++v8 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - v7) >> 5))
          {
            v14 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
            break;
          }
        }
        v5 = a4;
        if (v14 < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
      }
      v6 += 3;
    }
    while (v6 != v5);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5));
LABEL_80:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C283781C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  __p = &a24;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<marrs::qr::orchestration::QRToken>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C28378F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](i - 160);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  result = a7;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      v10 = a3 + v8;
      v11 = *(_OWORD *)(a3 + v8 - 160);
      *(_QWORD *)(v9 - 144) = *(_QWORD *)(a3 + v8 - 144);
      *(_OWORD *)(v9 - 160) = v11;
      *(_QWORD *)(v10 - 152) = 0;
      *(_QWORD *)(v10 - 144) = 0;
      *(_QWORD *)(v10 - 160) = 0;
      v12 = *(_OWORD *)(a3 + v8 - 136);
      *(_QWORD *)(v9 - 120) = *(_QWORD *)(a3 + v8 - 120);
      *(_OWORD *)(v9 - 136) = v12;
      *(_QWORD *)(v10 - 128) = 0;
      *(_QWORD *)(v10 - 120) = 0;
      *(_QWORD *)(v10 - 136) = 0;
      *(_QWORD *)(v9 - 112) = 0;
      *(_QWORD *)(v9 - 104) = 0;
      *(_QWORD *)(v9 - 96) = 0;
      *(_OWORD *)(v9 - 112) = *(_OWORD *)(a3 + v8 - 112);
      *(_QWORD *)(v9 - 96) = *(_QWORD *)(a3 + v8 - 96);
      *(_QWORD *)(v10 - 112) = 0;
      *(_QWORD *)(v10 - 104) = 0;
      *(_QWORD *)(v10 - 96) = 0;
      v13 = *(_OWORD *)(a3 + v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 + v8 - 72);
      *(_OWORD *)(v9 - 88) = v13;
      v14 = *(_OWORD *)(a3 + v8 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v8 - 40);
      *(_OWORD *)(v9 - 56) = v14;
      *(_QWORD *)(v10 - 48) = 0;
      *(_QWORD *)(v10 - 40) = 0;
      *(_QWORD *)(v10 - 56) = 0;
      *(_BYTE *)(v9 - 32) = *(_BYTE *)(a3 + v8 - 32);
      v15 = *(_OWORD *)(a3 + v8 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v8 - 8);
      *(_OWORD *)(v9 - 24) = v15;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      *(_QWORD *)(v10 - 24) = 0;
      v8 -= 160;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

void toRepetitionPredictorInput(uint64_t a1, uint64_t a2, unsigned __int8 ***a3)
{
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  std::string *v22;
  std::vector<std::string>::pointer v23;
  std::string *v24;
  std::vector<std::string>::pointer v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  void **v32;
  void **j;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  std::string *v46;
  std::vector<std::string>::pointer v47;
  std::string *v48;
  std::vector<std::string>::pointer v49;
  NSObject *v50;
  void *v51;
  void *v52;
  int v53;
  void **v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  _BYTE buf[12];
  __int16 v60;
  void *v61;
  __int16 v62;
  _QWORD *v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(*(_QWORD *)(a2 + 8) + 72));
  v6 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "toRepetitionPredictorInput";
    _os_log_debug_impl(&dword_1C281A000, v6, OS_LOG_TYPE_DEBUG, "%s Converting Turn1 Input", buf, 0xCu);
  }
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(**(_QWORD **)(a2 + 8) + 16));
  v7 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)(a1 + 240) = v7[13];
  removeTriggerTokens(buf, (uint64_t *)(*v7 + 64), *a3, a3[1]);
  mergeTokens(&v56, (uint64_t *)buf);
  v54 = (void **)buf;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v54);
  v8 = v56;
  for (i = v57; v8 != i; v8 += 160)
  {
    v11 = *(char **)(a1 + 104);
    v10 = *(_QWORD *)(a1 + 112);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(char **)(a1 + 96);
      v14 = (v11 - v13) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17);
        v13 = *(char **)(a1 + 96);
        v11 = *(char **)(a1 + 104);
      }
      else
      {
        v18 = 0;
      }
      v19 = (_QWORD *)(v17 + 8 * v14);
      *v19 = *(_QWORD *)(v8 + 96);
      v12 = v19 + 1;
      while (v11 != v13)
      {
        v20 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v19 = v20;
      }
      *(_QWORD *)(a1 + 96) = v19;
      *(_QWORD *)(a1 + 104) = v12;
      *(_QWORD *)(a1 + 112) = v17 + 8 * v18;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)(v8 + 96);
      v12 = v11 + 8;
    }
    *(_QWORD *)(a1 + 104) = v12;
    v21 = (_QWORD *)(v8 + 104);
    v22 = *(std::string **)(a1 + 56);
    if ((unint64_t)v22 >= *(_QWORD *)(a1 + 64))
    {
      v23 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)(a1 + 48), (__int128 *)(v8 + 104));
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 48, (__int128 *)(v8 + 104));
      v23 = v22 + 1;
    }
    *(_QWORD *)(a1 + 56) = v23;
    v24 = *(std::string **)(a1 + 8);
    if ((unint64_t)v24 >= *(_QWORD *)(a1 + 16))
    {
      v25 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)a1, (__int128 *)v8);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1, (__int128 *)v8);
      v25 = v24 + 1;
    }
    *(_QWORD *)(a1 + 8) = v25;
    LOBYTE(v54) = *(_BYTE *)(v8 + 128);
    std::vector<BOOL>::push_back(a1 + 144, &v54);
    v26 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v8 + 127) < 0)
        v21 = (_QWORD *)*v21;
      v27 = v8;
      if (*(char *)(v8 + 23) < 0)
        v27 = *(_QWORD *)v8;
      v28 = *(void **)(v8 + 96);
      v29 = *(unsigned __int8 *)(v8 + 128);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "toRepetitionPredictorInput";
      v60 = 2048;
      v61 = v28;
      v62 = 2080;
      v63 = v21;
      v64 = 2080;
      v65 = v27;
      v66 = 1024;
      v67 = v29;
      _os_log_debug_impl(&dword_1C281A000, v26, OS_LOG_TYPE_DEBUG, "%s conf:%.1f phone:%s value:%s removeSpace:%d", buf, 0x30u);
    }
  }
  v30 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "toRepetitionPredictorInput";
    _os_log_debug_impl(&dword_1C281A000, v30, OS_LOG_TYPE_DEBUG, "%s Converting Turn2 Input", buf, 0xCu);
  }
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 112) + 16));
  v31 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(v31 + 216);
  removeTriggerTokens(buf, (uint64_t *)(*(_QWORD *)(v31 + 112) + 64), *a3, a3[1]);
  mergeTokens((uint64_t *)&v54, (uint64_t *)buf);
  v58 = (void **)buf;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v58);
  v32 = v54;
  for (j = v55; v32 != j; v32 += 20)
  {
    v35 = *(char **)(a1 + 128);
    v34 = *(_QWORD *)(a1 + 136);
    if ((unint64_t)v35 >= v34)
    {
      v37 = *(char **)(a1 + 120);
      v38 = (v35 - v37) >> 3;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v40 = v34 - (_QWORD)v37;
      if (v40 >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
        v37 = *(char **)(a1 + 120);
        v35 = *(char **)(a1 + 128);
      }
      else
      {
        v42 = 0;
      }
      v43 = (_QWORD *)(v41 + 8 * v38);
      *v43 = v32[12];
      v36 = v43 + 1;
      while (v35 != v37)
      {
        v44 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *--v43 = v44;
      }
      *(_QWORD *)(a1 + 120) = v43;
      *(_QWORD *)(a1 + 128) = v36;
      *(_QWORD *)(a1 + 136) = v41 + 8 * v42;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_QWORD *)v35 = v32[12];
      v36 = v35 + 8;
    }
    *(_QWORD *)(a1 + 128) = v36;
    v45 = v32 + 13;
    v46 = *(std::string **)(a1 + 80);
    if ((unint64_t)v46 >= *(_QWORD *)(a1 + 88))
    {
      v47 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((std::vector<std::string> *)(a1 + 72), (__int128 *)(v32 + 13));
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string&>(a1 + 72, (__int128 *)(v32 + 13));
      v47 = v46 + 1;
    }
    *(_QWORD *)(a1 + 80) = v47;
    v48 = *(std::string **)(a1 + 32);
    if ((unint64_t)v48 >= *(_QWORD *)(a1 + 40))
    {
      v49 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((std::vector<std::string> *)(a1 + 24), (__int128 *)v32);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string&>(a1 + 24, (__int128 *)v32);
      v49 = v48 + 1;
    }
    *(_QWORD *)(a1 + 32) = v49;
    LOBYTE(v58) = *((_BYTE *)v32 + 128);
    std::vector<BOOL>::push_back(a1 + 168, &v58);
    v50 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v32 + 127) < 0)
        v45 = (_QWORD *)*v45;
      v51 = v32;
      if (*((char *)v32 + 23) < 0)
        v51 = *v32;
      v52 = v32[12];
      v53 = *((unsigned __int8 *)v32 + 128);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "toRepetitionPredictorInput";
      v60 = 2048;
      v61 = v52;
      v62 = 2080;
      v63 = v45;
      v64 = 2080;
      v65 = (uint64_t)v51;
      v66 = 1024;
      v67 = v53;
      _os_log_debug_impl(&dword_1C281A000, v50, OS_LOG_TYPE_DEBUG, "%s conf:%.1f phone:%s value:%s removeSpace:%d", buf, 0x30u);
    }
  }
  *(_QWORD *)buf = &v54;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v56;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C28380CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20,void **a21)
{
  void **v21;

  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a20);
  a21 = (void **)&a17;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a21);
  RepetitionPredictorInput::~RepetitionPredictorInput(v21);
  _Unwind_Resume(a1);
}

void mergeTokens(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const std::string::value_type *v16;
  const std::string::value_type *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  _QWORD *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string __str;
  unint64_t v35;
  uint64_t *v36;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(&v31, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5));
  if (v32 == v31)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_62;
  }
  v30 = a1;
  v4 = 0;
  v5 = 0;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    v6 = v31;
    v7 = v31 + 160 * v5;
    v8 = *(_BYTE *)(v7 + 23);
    if (v8 < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
        goto LABEL_14;
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_14;
    }
    if (v8 >= 0)
      v9 = (const std::string::value_type *)(v31 + 160 * v5);
    else
      v9 = *(const std::string::value_type **)v7;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(v7 + 23);
    else
      v10 = *(_QWORD *)(v7 + 8);
    std::string::append(&__str, v9, v10);
    v6 = v31;
LABEL_14:
    v11 = v5 + 1;
    if (v5 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((v32 - v6) >> 5))
    {
      v12 = v4;
      v13 = v5 + 1;
      do
      {
        if (*(char *)(v6 + v12 + 183) < 0)
        {
          if (!*(_QWORD *)(v6 + v12 + 168))
            break;
        }
        else if (!*(_BYTE *)(v6 + v12 + 183))
        {
          break;
        }
        if (*(char *)(v6 + v12 + 287) < 0)
        {
          if (*(_QWORD *)(v6 + v12 + 272))
            break;
        }
        else if (*(_BYTE *)(v6 + v12 + 287))
        {
          break;
        }
        if (!*(_BYTE *)(v6 + 160 * v5 + 128))
          std::string::append(&__str, " ");
        v14 = *a2 + v12;
        v17 = *(const std::string::value_type **)(v14 + 160);
        v15 = v14 + 160;
        v16 = v17;
        v18 = *(char *)(v15 + 23);
        if (v18 >= 0)
          v19 = (const std::string::value_type *)v15;
        else
          v19 = v16;
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v15 + 23);
        else
          v20 = *(_QWORD *)(v15 + 8);
        std::string::append(&__str, v19, v20);
        v6 = v31;
        *(_BYTE *)(v31 + 160 * v5 + 128) = *(_BYTE *)(v31 + v12 + 288);
        ++v13;
        v12 += 160;
      }
      while (v13 < 0xCCCCCCCCCCCCCCCDLL * ((v32 - v6) >> 5));
    }
    std::string::operator=((std::string *)(v6 + 160 * v5), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v21 = v31;
    v22 = v32;
    v4 += 160;
    ++v5;
  }
  while (v11 < 0xCCCCCCCCCCCCCCCDLL * ((v32 - v31) >> 5));
  *v30 = 0;
  v30[1] = 0;
  v30[2] = 0;
  if (v21 != v22)
  {
    v23 = 0;
    v24 = v30 + 2;
    do
    {
      if (*(char *)(v21 + 127) < 0)
      {
        if (!*(_QWORD *)(v21 + 112))
          goto LABEL_59;
      }
      else if (!*(_BYTE *)(v21 + 127))
      {
        goto LABEL_59;
      }
      if (*(char *)(v21 + 23) < 0)
      {
        if (*(_QWORD *)(v21 + 8))
        {
LABEL_46:
          if ((unint64_t)v23 >= *v24)
          {
            v26 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v23 - *v30) >> 5);
            v27 = v26 + 1;
            if (v26 + 1 > 0x199999999999999)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((*v24 - *v30) >> 5) > v27)
              v27 = 0x999999999999999ALL * ((*v24 - *v30) >> 5);
            if (0xCCCCCCCCCCCCCCCDLL * ((*v24 - *v30) >> 5) >= 0xCCCCCCCCCCCCCCLL)
              v28 = 0x199999999999999;
            else
              v28 = v27;
            v36 = v30 + 2;
            if (v28)
              v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v28);
            else
              v29 = 0;
            __str.__r_.__value_.__r.__words[0] = v28;
            __str.__r_.__value_.__l.__size_ = v28 + 160 * v26;
            __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
            v35 = v28 + 160 * v29;
            marrs::qr::orchestration::QRToken::QRToken((std::string *)__str.__r_.__value_.__l.__size_, (const marrs::qr::orchestration::QRToken *)v21);
            __str.__r_.__value_.__r.__words[2] += 160;
            v25 = v30;
            std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(v30, &__str);
            v23 = (std::string *)v30[1];
            std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&__str);
          }
          else
          {
            marrs::qr::orchestration::QRToken::QRToken(v23, (const marrs::qr::orchestration::QRToken *)v21);
            v23 = (std::string *)((char *)v23 + 160);
            v25 = v30;
            v30[1] = (uint64_t)v23;
          }
          v25[1] = (uint64_t)v23;
        }
      }
      else if (*(_BYTE *)(v21 + 23))
      {
        goto LABEL_46;
      }
LABEL_59:
      v21 += 160;
    }
    while (v21 != v22);
  }
LABEL_62:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1C28384C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, char a10, uint64_t a11, uint64_t a12, char *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  a13 = a9;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a10;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<std::string const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1C2838648(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 != v5 << 6)
    goto LABEL_36;
  if ((uint64_t)(v4 + 1) < 0)
    goto LABEL_9;
  if (v4 > 0x3FFFFFFFFFFFFFFELL)
  {
    v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (v4 < 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_11;
  }
  else
  {
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v7 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    else
      v7 = v6;
    if (v4 < v7)
    {
      if ((v7 & 0x8000000000000000) != 0)
LABEL_9:
        std::vector<float>::__throw_length_error[abi:ne180100]();
LABEL_11:
      v28 = 0;
      v29 = 0uLL;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v28, v7);
      v8 = *(_QWORD **)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = v29;
      v11 = v29 + v9;
      *(_QWORD *)&v29 = v29 + v9;
      if (v10)
      {
        v12 = v11 - 1;
        if (((v11 - 1) ^ (v10 - 1)) <= 0x3F)
        {
          v13 = v28;
LABEL_19:
          v16 = v9 & 0x3F;
          if (v9 > 0x3F || (v9 & 0x3F) != 0)
          {
            v17 = 0;
            v18 = &v8[v9 >> 6];
            v19 = v10 & 0x3F;
            v20 = (uint64_t *)(v13 + 8 * (v10 >> 6));
            do
            {
              v21 = 1 << v19;
              if (((*v8 >> v17) & 1) != 0)
                v22 = *v20 | v21;
              else
                v22 = *v20 & ~v21;
              *v20 = v22;
              v8 += v17 == 63;
              if (v17 == 63)
                v17 = 0;
              else
                ++v17;
              v20 += v19 == 63;
              if (v19 == 63)
                v19 = 0;
              else
                ++v19;
            }
            while (v8 != v18 || v17 != v16);
          }
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v29;
          if (v23)
            operator delete(v23);
          goto LABEL_35;
        }
      }
      else
      {
        v12 = v11 - 1;
      }
      v13 = v28;
      v14 = v12 >> 6;
      if (v11 >= 0x41)
        v15 = v14;
      else
        v15 = 0;
      *(_QWORD *)(v28 + 8 * v15) = 0;
      goto LABEL_19;
    }
  }
LABEL_35:
  v4 = *(_QWORD *)(a1 + 8);
LABEL_36:
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v24 = *(_QWORD **)a1;
  v25 = v4 >> 6;
  v26 = 1 << v4;
  if (*a2)
    v27 = v24[v25] | v26;
  else
    v27 = v24[v25] & ~v26;
  v24[v25] = v27;
}

void sub_1C2838804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1C2838870(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void RepetitionPredictorInput::~RepetitionPredictorInput(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  v2 = this[21];
  if (v2)
    operator delete(v2);
  v3 = this[18];
  if (v3)
    operator delete(v3);
  v4 = this[15];
  if (v4)
  {
    this[16] = v4;
    operator delete(v4);
  }
  v5 = this[12];
  if (v5)
  {
    this[13] = v5;
    operator delete(v5);
  }
  v6 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void JointCCQRModuleInputTensor::~JointCCQRModuleInputTensor(JointCCQRModuleInputTensor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 13) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 3);
  if (v10)
  {
    *((_QWORD *)this + 4) = v10;
    operator delete(v10);
  }
  v11 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v11;
    operator delete(v11);
  }
}

void JointCCQRModuleOutputTensor::~JointCCQRModuleOutputTensor(JointCCQRModuleOutputTensor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  v7 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v7;
    operator delete(v7);
  }
}

void InferencePlanError::~InferencePlanError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t SymbolMapper::mapPhone(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((_QWORD *)(a1 + 32), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((unsigned int *)v2 + 10);
}

void SymbolMapper::set(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  std::string *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v39;

  v7 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 32) + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  v16 = (std::string *)(v15 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 16);
  }
  v17 = (_QWORD *)(a1 + 48);
  *((_DWORD *)v15 + 10) = a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 56) + 1);
  v19 = *(float *)(a1 + 64);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 40) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v17;
          if (*v17)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v28) = v17;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  v35 = *(_QWORD *)(a1 + 32);
                  if (!*(_QWORD *)(v35 + 8 * v34))
                  {
                    *(_QWORD *)(v35 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_58:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD *)(a1 + 32);
  v37 = *(_QWORD **)(v36 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v15 = *v37;
LABEL_75:
    *v37 = v15;
    goto LABEL_76;
  }
  *(_QWORD *)v15 = *v17;
  *v17 = v15;
  *(_QWORD *)(v36 + 8 * v3) = v17;
  if (*(_QWORD *)v15)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++*(_QWORD *)(a1 + 56);
}

void sub_1C2838FDC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void sub_1C283905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C283929C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1C2839418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p)
{
  void *v16;

  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C28394C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2839524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2839644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void **v16;
  void *v17;

  marrs::qr::orchestration::QRToken::~QRToken(v16);
  _Unwind_Resume(a1);
}

void sub_1C28397F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (a17 < 0)
    operator delete(__p);

  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void sub_1C28399B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C2839B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));

  _Unwind_Resume(a1);
}

void sub_1C283A11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  void *v54;
  void **v55;

  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (*(char *)(a11 + 39) < 0)
    operator delete(*v55);

  a25 = (void **)&a22;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);
  a25 = (void **)&a53;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);

  _Unwind_Resume(a1);
}

void sub_1C283A55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C283AC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void *a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void **a53,char a54)
{
  void *v54;

  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = a10;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)&a54;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  a53 = (void **)&a50;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a53);

  _Unwind_Resume(a1);
}

void sub_1C283B134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;
  void *v42;

  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C283B210(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t v45;

  *(_QWORD *)(v45 - 96) = v44;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 96));
  if (a44 < 0)
    operator delete(__p);
  JUMPOUT(0x1C283B200);
}

void sub_1C283B32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C283B8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v37 + 16) = v38;
  a15 = (void **)&a37;
  std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::unique_ptr<marrs::qr::orchestration::QRRequest>::reset[abi:ne180100](a10);

  _Unwind_Resume(a1);
}

void sub_1C283BDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v36;
  uint64_t v37;

  *(_QWORD *)(v35 + 16) = v37;
  std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&a13);

  a13 = (void **)&a35;
  std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&a13);

  _Unwind_Resume(a1);
}

void sub_1C283BFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1C283C1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<marrs::qr::orchestration::QRInteraction>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0x6DB6DB6DB6DB6DB7 * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 112 * v4;
    std::vector<marrs::qr::orchestration::QRInteraction>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<marrs::qr::orchestration::QRInteraction>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::qr::orchestration::QRInteraction::~QRInteraction(void **this)
{
  void **v2;

  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v2 = this + 6;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = (void **)(a1 + 48);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 24);
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)a1;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
}

char *std::vector<marrs::qr::orchestration::QRInteraction>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>,marrs::qr::orchestration::QRInteraction*,marrs::qr::orchestration::QRInteraction*,marrs::qr::orchestration::QRInteraction*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  const std::string::value_type **v12;
  __int128 v13;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(a4 + v7);
      v9 = a2 + v7;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      std::vector<marrs::qr::orchestration::QRUtterance>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((_QWORD *)(a4 + v7), *(_QWORD **)(a2 + v7), *(_QWORD **)(a2 + v7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + v7 + 8) - *(_QWORD *)(a2 + v7)) >> 5));
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      std::vector<marrs::qr::orchestration::QRUtterance>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((_QWORD *)(a4 + v7 + 24), *(_QWORD **)(v9 + 24), *(_QWORD **)(v9 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 5));
      v10 = a4 + v7;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_QWORD *)(a4 + v7 + 64) = 0;
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((_QWORD *)(a4 + v7 + 48), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 5));
      v11 = (std::string *)(a4 + v7 + 72);
      v12 = (const std::string::value_type **)(a2 + v7 + 72);
      if (*(char *)(a2 + v7 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(a2 + v7 + 80));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(a4 + v7 + 88) = *(_QWORD *)(a2 + v7 + 88);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      *(_OWORD *)(a4 + v7 + 96) = *(_OWORD *)(v9 + 96);
      v7 += 112;
    }
    while (v9 + 112 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C283C61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;
  void **v11;

  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v11;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a10);
  while (v11 != v10)
  {
    v11 -= 14;
    std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100]((uint64_t)v11);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<marrs::qr::orchestration::QRUtterance>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<marrs::qr::orchestration::QRUtterance>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C283C6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<marrs::qr::orchestration::QRUtterance>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v7;
  _QWORD *v8;
  const std::string::value_type **v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &a2[v7 / 8];
      *(_OWORD *)(a4 + v7) = *(_OWORD *)&a2[v7 / 8];
      v9 = (const std::string::value_type **)&a2[v7 / 8 + 2];
      if (SHIBYTE(a2[v7 / 8 + 4]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 16), *v9, v8[3]);
      }
      else
      {
        v10 = *(_OWORD *)v9;
        *(_QWORD *)(a4 + v7 + 32) = a2[v7 / 8 + 4];
        *(_OWORD *)(a4 + v7 + 16) = v10;
      }
      v11 = a4 + v7;
      v12 = a4 + v7;
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(a4 + v7 + 56) = 0;
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((_QWORD *)(a4 + v7 + 40), v8[5], v8[6], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[6] - v8[5]) >> 5));
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0;
      v13 = (_QWORD *)(a4 + v7 + 64);
      v13[2] = 0;
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v13, v8[8], v8[9], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[9] - v8[8]) >> 5));
      *(_QWORD *)(a4 + v7 + 88) = v8[11];
      v7 += 96;
    }
    while (v8 + 12 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C283C85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  while (v11 != v10)
  {
    v11 -= 96;
    std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 64);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 40);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a1);
}

uint64_t *std::vector<marrs::qr::orchestration::QRInteraction>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 112) = 0;
    *(_QWORD *)(v4 - 104) = 0;
    v4 -= 112;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 112);
    v2 -= 112;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(v2 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    v6 = *(_OWORD *)(v2 + 72);
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 88);
    *(_OWORD *)(v4 + 72) = v6;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(v2 + 96);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRInteraction>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100](i - 112);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::unique_ptr<marrs::qr::orchestration::QRRequest>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = (void **)(v1 + 8);
    std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1C3BC5C7CLL);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRInteraction *,marrs::qr::orchestration::QRInteraction *,marrs::qr::orchestration::QRInteraction *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      if (a1 != a3)
      {
        v8 = a1 + v6;
        std::vector<marrs::qr::orchestration::QRUtterance>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((uint64_t *)(a3 + v6), *(_QWORD **)(a1 + v6), *(_QWORD **)(a1 + v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + v6 + 8) - *(_QWORD *)(a1 + v6)) >> 5));
        std::vector<marrs::qr::orchestration::QRUtterance>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((uint64_t *)(v7 + 24), *(_QWORD **)(v8 + 24), *(_QWORD **)(v8 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 5));
        std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v7 + 48, *(std::string **)(v8 + 48), *(std::string **)(v8 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48)) >> 5));
      }
      std::string::operator=((std::string *)(v7 + 72), (const std::string *)(a1 + v6 + 72));
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(a1 + v6 + 96);
      v6 += 112;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void std::vector<marrs::qr::orchestration::QRUtterance>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 5) < a4)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v11 -= 96;
          std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](v11);
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    v14 = 2 * v13;
    if (2 * v13 <= a4)
      v14 = a4;
    if (v13 >= 0x155555555555555)
      v15 = 0x2AAAAAAAAAAAAAALL;
    else
      v15 = v14;
    std::vector<marrs::qr::orchestration::QRUtterance>::__vallocate[abi:ne180100](a1, v15);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(v9, a2, a3, a1[1]);
    goto LABEL_16;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 5) < a4)
  {
    v17 = &a2[4 * ((a1[1] - v10) >> 5)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *>((uint64_t)a2, (uint64_t)v17, v10);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(v9, v17, a3, a1[1]);
LABEL_16:
    a1[1] = v16;
    return;
  }
  v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *>((uint64_t)a2, (uint64_t)a3, v10);
  for (i = a1[1]; i != v18; std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](i))
    i -= 96;
  a1[1] = v18;
}

void sub_1C283CD88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C283CD90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1 + 72;
    do
    {
      v6 = v5 - 72;
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 72);
      std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v5 - 56));
      if (a3 != v5 - 72)
      {
        std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(a3 + 40, *(std::string **)(v5 - 32), *(std::string **)(v5 - 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v5 - 24) - *(_QWORD *)(v5 - 32)) >> 5));
        std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(a3 + 64, *(std::string **)(v5 - 8), *(std::string **)v5, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)v5 - *(_QWORD *)(v5 - 8)) >> 5));
      }
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 16);
      a3 += 96;
      v5 += 96;
    }
    while (v6 + 96 != a2);
  }
  return a3;
}

void marrs::qr::orchestration::QRUtterance::~QRUtterance(void **this)
{
  void **v2;

  v2 = this + 8;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 5;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t *std::vector<marrs::qr::orchestration::QRToken>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xCCCCCCCCCCCCCCCDLL * ((result[2] - *result) >> 5) < a2)
  {
    if (a2 >= 0x19999999999999ALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 160 * v4;
    std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[5];

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x199999999999999)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v7 = 0x199999999999999;
  else
    v7 = v3;
  v17[4] = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v7);
  else
    v8 = 0;
  v9 = v7 + 160 * v2;
  v17[0] = v7;
  v17[1] = v9;
  v17[3] = v7 + 160 * v8;
  v10 = *a2;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v9 = v10;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v11 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v9 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v9 + 24) = v11;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 48) = a2[3];
  *(_QWORD *)(v9 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v12 = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(v9 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(v9 + 72) = v12;
  v13 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(v9 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(v9 + 104) = v13;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *(_BYTE *)(v9 + 128) = *((_BYTE *)a2 + 128);
  v14 = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(v9 + 152) = *((_QWORD *)a2 + 19);
  *(_OWORD *)(v9 + 136) = v14;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v17[2] = v9 + 160;
  std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)v17);
  return v15;
}

uint64_t *std::vector<marrs::qr::orchestration::QRUtterance>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      v8 = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v8;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 96;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRUtterance>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *marrs::qr::orchestration::QRToken::QRToken(std::string *this, __int128 *a2, __int128 *a3, __int128 **a4, std::string::value_type a5, std::string::value_type a6)
{
  __int128 v11;
  __int128 v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 2, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  this[3].__r_.__value_.__s.__data_[0] = a5;
  this[3].__r_.__value_.__s.__data_[1] = a6;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  this[5].__r_.__value_.__s.__data_[8] = 0;
  std::string::basic_string[abi:ne180100]<0>(&this[5].__r_.__value_.__r.__words[2], "");
  return this;
}

void sub_1C283D2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

std::string *marrs::qr::orchestration::QRToken::QRToken(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  LOWORD(this[3].__r_.__value_.__l.__data_) = 1;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  this[5].__r_.__value_.__s.__data_[8] = 0;
  std::string::basic_string[abi:ne180100]<0>(&this[5].__r_.__value_.__r.__words[2], "");
  return this;
}

void sub_1C283D3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 127) < 0)
    operator delete(*(void **)(v2 + 104));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  int64_t v3;
  uint64_t v4;
  std::__split_buffer<std::string> __v;

  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v3 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(__n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v3);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v3);
    __v.__end_cap_.__value_ = &__v.__first_[v4];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1C283D51C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, __int128 buf, int a12, __int16 a13, __int16 a14, __int128 a15)
{
  _DWORD *v17;
  NSObject *v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  std::exception_ptr::~exception_ptr(&a10);
  if (a2 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    QRLoggerForCategory(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v20 = v17[4];
      v21 = *((_QWORD *)v17 + 1);
      v22 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "+[PredictorUtils handleInitException:]";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v21;
      a14 = 1024;
      LODWORD(a15) = v20;
      WORD2(a15) = 2080;
      *(_QWORD *)((char *)&a15 + 6) = v22;
      _os_log_error_impl(&dword_1C281A000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: %s %d: %s", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    QRLoggerForCategory(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "+[PredictorUtils handleInitException:]";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v23;
      _os_log_error_impl(&dword_1C281A000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: Unknown error loading model bundle: %s", (uint8_t *)&buf, 0x16u);
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1C283D4D4);
}

void sub_1C283D724(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, __int128 buf, int a12, __int16 a13, __int16 a14, __int128 a15)
{
  _DWORD *v17;
  NSObject *v18;
  _DWORD *v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  std::exception_ptr::~exception_ptr(&a10);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    QRLoggerForCategory(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = v17[4];
      v22 = *((_QWORD *)v17 + 1);
      v23 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "+[PredictorUtils handlePredictException:]";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v22;
      a14 = 1024;
      LODWORD(a15) = v21;
      WORD2(a15) = 2080;
      *(_QWORD *)((char *)&a15 + 6) = v23;
      _os_log_error_impl(&dword_1C281A000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: %s %d: %s", (uint8_t *)&buf, 0x26u);
    }
  }
  else if (a2 == 2)
  {
    v19 = __cxa_begin_catch(a1);
    QRLoggerForCategory(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v24 = v19[4];
      v25 = *((_QWORD *)v19 + 1);
      v26 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "+[PredictorUtils handlePredictException:]";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v25;
      a14 = 1024;
      LODWORD(a15) = v24;
      WORD2(a15) = 2080;
      *(_QWORD *)((char *)&a15 + 6) = v26;
      _os_log_error_impl(&dword_1C281A000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: %s %d: %s", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v20 = __cxa_begin_catch(a1);
    QRLoggerForCategory(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "+[PredictorUtils handlePredictException:]";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v27;
      _os_log_error_impl(&dword_1C281A000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: Unknown error making prediction: %s", (uint8_t *)&buf, 0x16u);
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1C283D6DCLL);
}

void sub_1C283DA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C283DAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C283DC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C283DD58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C283DE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C283DF88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t tokenIntersection(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v2 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v3 = a1 + 1;
  v4 = (_QWORD *)*a1;
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  v20 = (void **)&v17;
  v7 = v4 == a1 + 1 || v6 == v5;
  if (!v7)
  {
    do
    {
      if (*((char *)v4 + 55) >= 0)
        v8 = (const char *)(v4 + 4);
      else
        v8 = (const char *)v4[4];
      if (*((char *)v6 + 55) >= 0)
        v9 = (const char *)(v6 + 4);
      else
        v9 = (const char *)v6[4];
      if (strcasecmp(v8, v9) < 0)
      {
        v10 = (_QWORD *)v4[1];
        if (v10)
        {
          do
          {
            v4 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = v4;
            v4 = (_QWORD *)v4[2];
          }
          while ((_QWORD *)*v4 != v11);
        }
      }
      else
      {
        if (strcasecmp(v9, v8) < 0)
        {
          v12 = v4;
        }
        else
        {
          std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v20, (__int128 *)v4 + 2);
          v13 = (_QWORD *)v4[1];
          if (v13)
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v4[2];
              v7 = *v12 == (_QWORD)v4;
              v4 = v12;
            }
            while (!v7);
          }
        }
        v14 = (_QWORD *)v6[1];
        if (v14)
        {
          do
          {
            v6 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = v6;
            v6 = (_QWORD *)v6[2];
          }
          while ((_QWORD *)*v6 != v15);
        }
        v4 = v12;
      }
    }
    while (v4 != v3 && v6 != v5);
    v2 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3);
  }
  v20 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
  return v2;
}

void sub_1C283E134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void getDigitsInString(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;

  v2 = a2;
  if ((char)a2[23] < 0)
  {
    v2 = *(unsigned __int8 **)a2;
    v3 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v3 = a2[23];
  }
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = (char *)&v2[v3];
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      v9 = (char)*v2;
      if ((v9 & 0x80000000) == 0 && (*(_DWORD *)(v8 + 4 * *v2 + 60) & 0x400) != 0)
      {
        if (v6 >= v5)
        {
          v11 = &v6[-v4];
          v12 = (uint64_t)&v6[-v4 + 1];
          if (v12 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (2 * (uint64_t)&v5[-v4] > (unint64_t)v12)
            v12 = 2 * (_QWORD)&v5[-v4];
          if ((unint64_t)&v5[-v4] >= 0x3FFFFFFFFFFFFFFFLL)
            v13 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)operator new(v13);
          else
            v14 = 0;
          v15 = &v11[(_QWORD)v14];
          v16 = &v11[(_QWORD)v14];
          *v16 = v9;
          v10 = v16 + 1;
          if (v6 != (char *)v4)
          {
            v17 = &v6[~v4];
            do
            {
              v18 = *--v6;
              (v17--)[(_QWORD)v14] = v18;
            }
            while (v6 != (char *)v4);
            v15 = v14;
          }
          v5 = &v14[v13];
          if (v4)
            operator delete((void *)v4);
          v4 = (unint64_t)v15;
          goto LABEL_11;
        }
        *v6++ = v9;
      }
      v10 = v6;
LABEL_11:
      ++v2;
      v6 = v10;
      if (v2 == (unsigned __int8 *)v7)
        goto LABEL_30;
    }
  }
  v10 = 0;
  v4 = 0;
LABEL_30:
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a1, (char *)v4, v10, (unint64_t)&v10[-v4]);
  if (v4)
    operator delete((void *)v4);
}

void sub_1C283E2DC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL boost::algorithm::is_iequal::operator()<char,char>(const std::locale *a1, char a2, char *a3)
{
  std::locale::id *v6;
  const std::locale::facet *v7;
  int v8;
  uint64_t v9;
  const std::locale::facet *v10;

  v6 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v7 = std::locale::use_facet(a1, MEMORY[0x1E0DE4A90]);
  v8 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v7->__vftable[1].~facet)(v7, a2);
  v9 = *a3;
  v10 = std::locale::use_facet(a1, v6);
  return v8 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v10->__vftable[1].~facet)(v10, v9);
}

void marrs::mrr::mr::OrdinalFilter::filterEntities(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v6[128];
  void *v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 32))
  {
    morphun::util::ULocale::ULocale();
    v12 = 0;
    v13 = 0;
    v14 = 0;
    morphun::util::StringUtils::convert();
    v9 = 0;
    v10 = 0;
    v11 = 0;
    morphun::util::StringUtils::lowercase();
    v7[0] = 0;
    v7[1] = 0;
    v8 = 0;
    morphun::util::StringUtils::convert();
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v6);
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, a2, v7);
    if (SHIBYTE(v8) < 0)
      operator delete(v7[0]);
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_1C283E464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 97) < 0)
    operator delete(*(void **)(v10 - 120));
  _Unwind_Resume(exception_object);
}

void marrs::mrr::mr::OrdinalFilter::~OrdinalFilter(marrs::mrr::mr::OrdinalFilter *this)
{
  marrs::mrr::mr::OrdinalFilter::~OrdinalFilter(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  *(_QWORD *)this = &off_1E7C67928;
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((_QWORD **)this + 24));
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(*((_QWORD **)this + 21));
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface((void **)this);
}

void marrs::mrr::mr::OrdinalFilter::filterEntities(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint8_t buf[8];
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[3];

  memset(v28, 0, sizeof(v28));
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (!v5)
    goto LABEL_33;
  if (!a1[25] || !a1[22])
  {
    v22 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
LABEL_33:
      *a4 = 0;
      a4[24] = 0;
      goto LABEL_34;
    }
    *(_WORD *)buf = 0;
    v23 = "[Verbal MR] Failed to load Verbal MR asset. The verbalMap is empty, skipping verbal MR";
LABEL_32:
    _os_log_impl(&dword_1C281A000, v22, OS_LOG_TYPE_DEBUG, v23, buf, 2u);
    goto LABEL_33;
  }
  v9 = *a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
    v22 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      goto LABEL_33;
    *(_WORD *)buf = 0;
    v23 = "[Verbal MR] Empty MRR Entities in the input, return empty";
    goto LABEL_32;
  }
  v24 = (uint64_t)a4;
  *(_QWORD *)buf = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v26 = 0;
  v27 = 0;
  do
  {
    if (*(_DWORD *)(v9 + 216 * v15 + 4) == 1)
    {
      if ((unint64_t)v14 >= v13)
      {
        v16 = v14 - v12;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v13 - (_QWORD)v12) >> 2 > v17)
          v17 = (uint64_t)(v13 - (_QWORD)v12) >> 2;
        if (v13 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
          v14 = v11;
        }
        else
        {
          v19 = 0;
        }
        v20 = (unint64_t *)(v18 + 8 * v16);
        *v20 = v15;
        v11 = v20 + 1;
        while (v14 != v12)
        {
          v21 = *--v14;
          *--v20 = v21;
        }
        v13 = v18 + 8 * v19;
        if (v12)
          operator delete(v12);
        v12 = v20;
      }
      else
      {
        *v14 = v15;
        v11 = v14 + 1;
      }
      v9 = *a2;
      v8 = a2[1];
      v14 = v11;
    }
    ++v15;
  }
  while (v15 < 0x84BDA12F684BDA13 * ((v8 - v9) >> 3));
  v26 = v11;
  v27 = v13;
  *(_QWORD *)buf = v12;
  marrs::mrr::mr::OrdinalFilter::ordinalReferenceResolution(v24, a1, (std::sub_match<const char *> *)a3, a2, (uint64_t **)buf);
  if (v12)
    operator delete(v12);
LABEL_34:
  *(_QWORD *)buf = v28;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C283E734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  a11 = (void **)&a14;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::OrdinalFilter::ordinalReferenceResolution(uint64_t a1, _QWORD *a2, std::sub_match<const char *> *a3, uint64_t *a4, uint64_t **a5)
{
  float v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _BOOL4 v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  const char *second;
  char *v17;
  const char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  _DWORD *v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD *v31;
  char *v32;
  __int128 v33;
  void *v34;
  char *v35;
  __int128 v36;
  void *v37;
  __int128 *v38;
  __int128 *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 *v47;
  char *v48;
  _BYTE *v49;
  __int128 v50;
  int64_t v51;
  char *v52;
  char *v53;
  __int128 *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  unint64_t v62;
  __int128 *v63;
  char *v64;
  char *v65;
  const char *v66;
  __int128 v67;
  int64_t v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  std::vector<std::csub_match>::pointer v73;
  _BYTE *v74;
  unsigned int v75;
  std::sub_match<const char *> *v76;
  char v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  const char *v99;
  void **v100;
  _BYTE *v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  __int128 v111;
  void *v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  char *v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  void *v147;
  std::vector<std::csub_match>::pointer begin;
  std::vector<std::csub_match>::pointer end;
  std::sub_match<const char *> *v150;
  std::vector<std::csub_match>::pointer v151;
  char *v152;
  const char **p_second;
  char *v154;
  const char *v155;
  int64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  std::vector<std::csub_match>::pointer v167;
  std::vector<std::csub_match>::pointer v168;
  unint64_t v169;
  const char **v170;
  std::vector<std::csub_match>::value_type *v171;
  char *v172;
  const char **v173;
  BOOL *p_matched;
  int v175;
  _BOOL4 matched;
  int v177;
  char **v178;
  NSObject *v179;
  _QWORD *v180;
  void *v181;
  char **v182;
  int v183;
  void *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  float v188;
  _QWORD *v189;
  _QWORD *v190;
  _BOOL4 v191;
  _QWORD *v192;
  _BOOL4 v193;
  NSObject *v194;
  void *v195;
  char v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  NSObject *v202;
  std::sub_match<const char *> *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  NSObject *v207;
  std::sub_match<const char *> *first;
  NSObject *v209;
  std::sub_match<const char *> *v210;
  const char *v211;
  NSObject *v212;
  uint32_t v213;
  unint64_t v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unint64_t v218;
  NSObject *v219;
  std::sub_match<const char *> *v220;
  std::sub_match<const char *> *locale;
  uint64_t v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  const char *v228;
  NSObject *v229;
  NSObject *v230;
  NSObject *v231;
  char v232;
  NSObject *v233;
  std::sub_match<const char *> *v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  uint64_t *v239;
  uint64_t *v240;
  unint64_t v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  size_t v248;
  std::vector<std::csub_match>::pointer v249;
  std::vector<std::csub_match>::pointer value_high;
  const void **v251;
  unsigned __int8 *v252;
  uint64_t *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  _BYTE *v267;
  uint64_t *v268;
  uint64_t v269;
  size_t v270;
  unsigned __int8 *v271;
  void **p_s1;
  NSObject *v273;
  NSObject *v274;
  std::sub_match<const char *> *v275;
  _QWORD *v276;
  _QWORD *v279;
  _QWORD *v280;
  const char *v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v285;
  void *v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  char *v292;
  char v293;
  const char *v295;
  const char *v296;
  const char *v297;
  std::regex_traits<char> v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305[2];
  __int128 v306;
  int64x2_t v307;
  std::vector<std::csub_match>::value_type __x;
  _BYTE buf[56];
  void *__p[5];
  std::vector<std::csub_match> v311;
  std::vector<std::csub_match>::value_type v312;
  char *v313;
  void *v314;
  BOOL v315;
  std::vector<std::csub_match>::value_type v316;
  char v317;
  char *v318;
  _BYTE v319[24];
  void *__s1;
  size_t __n;
  unsigned __int8 v322;
  int v323;
  void *v324;
  char v325;
  _QWORD v326[6];

  v6 = a1;
  v326[3] = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a2[23];
  v279 = a2 + 24;
  if (v7 == a2 + 24)
  {
LABEL_324:
    v207 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)&a3->matched + 7) >= 0)
        first = a3;
      else
        first = (std::sub_match<const char *> *)a3->first;
      LODWORD(v311.__begin_) = 136315138;
      *(std::vector<std::csub_match>::pointer *)((char *)&v311.__begin_ + 4) = first;
      _os_log_impl(&dword_1C281A000, v207, OS_LOG_TYPE_DEBUG, "[Verbal MR] - No ordinal index found for mention '%s'", (uint8_t *)&v311, 0xCu);
    }
    v209 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
      goto LABEL_364;
    if (*((char *)&a3->matched + 7) >= 0)
      v210 = a3;
    else
      v210 = (std::sub_match<const char *> *)a3->first;
    LODWORD(v311.__begin_) = 136315138;
    *(std::vector<std::csub_match>::pointer *)((char *)&v311.__begin_ + 4) = v210;
    v211 = "[Verbal MR] mention '%s' not matches with the ordinal keywords map";
    v212 = v209;
    v213 = 12;
    goto LABEL_363;
  }
  v291 = a2 + 21;
  while (1)
  {
    v280 = v7;
    v290 = v7[7];
    v283 = v7[8];
    if (v290 != v283)
      break;
LABEL_318:
    v204 = v280;
    v205 = (_QWORD *)v280[1];
    if (v205)
    {
      do
      {
        v206 = v205;
        v205 = (_QWORD *)*v205;
      }
      while (v205);
    }
    else
    {
      do
      {
        v206 = (_QWORD *)v204[2];
        v129 = *v206 == (_QWORD)v204;
        v204 = v206;
      }
      while (!v129);
    }
    v7 = v206;
    if (v206 == v279)
      goto LABEL_324;
  }
  v282 = v7 + 4;
  while (1)
  {
    v8 = (_QWORD *)*v291;
    if (!*v291)
      goto LABEL_312;
    v9 = v291;
    do
    {
      v10 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8 + 4, v282);
      v11 = v8 + 1;
      if (!v10)
      {
        v11 = v8;
        v9 = v8;
      }
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v9 == v291 || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v282, v9 + 4))
      goto LABEL_312;
    v302 = 0;
    v303 = 0;
    v304 = 0;
    std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__init_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(&v302, v9[7], v9[8], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9[8] - v9[7]) >> 3));
    v12 = *(_QWORD **)(v290 + 24);
    if (v12 != (_QWORD *)(v290 + 32))
    {
      while (1)
      {
        std::regex_traits<char>::regex_traits(&v298);
        v13 = v12 + 4;
        v301 = 0;
        v299 = 0u;
        v300 = 0u;
        v14 = *((unsigned __int8 *)v12 + 55);
        if ((v14 & 0x80u) == 0)
          v15 = (char *)(v12 + 4);
        else
          v15 = (char *)v12[4];
        if ((v14 & 0x80u) != 0)
          v14 = v12[5];
        if (&v15[v14] != (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)&v298, v15, &v15[v14]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
        second = (const char *)*((unsigned __int8 *)&a3->matched + 7);
        if ((char)second >= 0)
          v17 = (char *)a3;
        else
          v17 = (char *)a3->first;
        if ((char)second < 0)
          second = a3->second;
        v297 = second;
        v18 = &second[(_QWORD)v17];
        v313 = 0;
        v314 = 0;
        v315 = 0;
        memset(&v316, 0, 17);
        v317 = 0;
        v318 = 0;
        memset(&v311, 0, sizeof(v311));
        v312.first = &second[(_QWORD)v17];
        v312.second = &second[(_QWORD)v17];
        v312.matched = 0;
        std::vector<std::sub_match<char const*>>::assign(&v311, (DWORD1(v299) + 1), &v312);
        v313 = v17;
        v314 = v17;
        v315 = 0;
        v316 = v312;
        v318 = v17;
        v317 = 1;
        v295 = v17;
        if ((v299 & 0x1F0) == 0)
        {
          if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>((uint64_t)&v298, v17, v18, (uint64_t *)&v311, 4160, 1) & 1) != 0)goto LABEL_219;
          goto LABEL_242;
        }
        v296 = v18;
        if (!DWORD1(v299))
        {
          v306 = 0u;
          v307 = 0u;
          *(_OWORD *)v305 = 0u;
          v79 = v300;
          if (!(_QWORD)v300)
          {
LABEL_211:
            std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v305);
            goto LABEL_242;
          }
          *(_DWORD *)buf = 0;
          memset(&buf[8], 0, 48);
          memset(__p, 0, 37);
          std::deque<std::__state<char>>::push_back(v305, (uint64_t)buf);
          if (__p[0])
            operator delete(__p[0]);
          if (*(_QWORD *)&buf[32])
            operator delete(*(void **)&buf[32]);
          v80 = v305[1];
          v81 = v307.i64[1] + v307.i64[0] - 1;
          v82 = v81 / 0x2A;
          v83 = 3 * (v81 % 0x2A);
          v84 = *((_QWORD *)v305[1] + v82) + 32 * v83;
          *(_DWORD *)v84 = 0;
          *(_QWORD *)(v84 + 8) = v295;
          *(_QWORD *)(v80[v82] + 32 * v83 + 16) = v295;
          *(_QWORD *)(v80[v82] + 32 * v83 + 24) = v18;
          std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v80[v82] + 32 * v83 + 56), DWORD2(v299));
          v293 = 0;
          v85 = 0;
          v289 = 0;
          v86 = v307.i64[1];
          v87 = v305[1];
          v88 = v307.i64[1] + v307.i64[0] - 1;
          v89 = v88 / 0x2A;
          v90 = 3 * (v88 % 0x2A);
          *(_QWORD *)(*((_QWORD *)v305[1] + v89) + 32 * v90 + 80) = v79;
          v91 = v87[v89] + 32 * v90;
          *(_DWORD *)(v91 + 88) = 4160;
          *(_BYTE *)(v91 + 92) = 1;
          while (2)
          {
            if ((++v85 & 0xFFF) == 0 && (int)(v85 >> 12) >= (int)v297)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
            v93 = v86 + v307.i64[0] - 1;
            v94 = *((_QWORD *)v305[1] + v93 / 0x2A);
            v95 = v93 % 0x2A;
            v96 = v94 + 96 * (v93 % 0x2A);
            v98 = (_QWORD *)(v96 + 80);
            v97 = *(_QWORD *)(v96 + 80);
            if (v97)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v97 + 16))(v97, v94 + 96 * v95);
            switch(*(_DWORD *)v96)
            {
              case 0xFFFFFC18:
                if (*(const char **)(v94 + 96 * v95 + 16) != v296)
                  goto LABEL_207;
                v99 = (const char *)v289;
                if ((v293 & (v289 >= (uint64_t)&v296[-*(_QWORD *)(v94 + 96 * v95 + 8)])) == 0)
                  v99 = &v296[-*(_QWORD *)(v94 + 96 * v95 + 8)];
                if (v99 != v297)
                {
                  v289 = (uint64_t)v99;
                  std::deque<std::__state<char>>::pop_back(v305);
                  v293 = 1;
                  goto LABEL_208;
                }
                v100 = (void **)v305[1];
                v101 = (_BYTE *)v306;
                if ((void *)v306 == v305[1])
                {
                  v101 = v305[1];
                }
                else
                {
                  v102 = (char *)v305[1] + 8 * (v307.i64[0] / 0x2AuLL);
                  v103 = (_QWORD *)(*v102 + 96 * (v307.i64[0] % 0x2AuLL));
                  v104 = *((_QWORD *)v305[1] + (v307.i64[1] + v307.i64[0]) / 0x2AuLL)
                       + 96 * ((v307.i64[1] + v307.i64[0]) % 0x2AuLL);
                  if (v103 != (_QWORD *)v104)
                  {
                    do
                    {
                      std::allocator<std::__state<char>>::destroy[abi:ne180100](v103);
                      v103 += 12;
                      if ((_QWORD *)((char *)v103 - *v102) == (_QWORD *)4032)
                      {
                        v105 = (_QWORD *)v102[1];
                        ++v102;
                        v103 = v105;
                      }
                    }
                    while (v103 != (_QWORD *)v104);
                    v100 = (void **)v305[1];
                    v101 = (_BYTE *)v306;
                  }
                }
                v307.i64[1] = 0;
                v139 = v101 - (_BYTE *)v100;
                if (v139 >= 0x11)
                {
                  do
                  {
                    operator delete(*v100);
                    v100 = (void **)((char *)v305[1] + 8);
                    v305[1] = v100;
                    v139 = v306 - (_QWORD)v100;
                  }
                  while ((_QWORD)v306 - (_QWORD)v100 > 0x10uLL);
                }
                if (v139 >> 3 == 1)
                {
                  v140 = 21;
                }
                else
                {
                  if (v139 >> 3 != 2)
                    goto LABEL_195;
                  v140 = 42;
                }
                v307.i64[0] = v140;
LABEL_195:
                v293 = 1;
                v289 = (uint64_t)v297;
LABEL_208:
                v86 = v307.i64[1];
                v13 = v12 + 4;
                if (v307.i64[1])
                  continue;
                if ((v293 & 1) == 0)
                  goto LABEL_211;
                begin = v311.__begin_;
                v311.__begin_->first = v295;
                begin->second = &v295[v289];
                begin->matched = 1;
                std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v305);
                break;
              case 0xFFFFFC19:
              case 0xFFFFFC1E:
              case 0xFFFFFC21:
                goto LABEL_208;
              case 0xFFFFFC1D:
                v106 = v307.i64[0];
                v107 = (char *)v305[1];
                v108 = (char *)v306;
                if (!v307.i64[0])
                {
                  v109 = (uint64_t)(v306 - (unint64_t)v305[1]) >> 3;
                  v110 = 42 * v109 - 1;
                  if ((void *)v306 == v305[1])
                    v110 = 0;
                  if ((unint64_t)(v110 - v307.i64[1]) < 0x2A)
                  {
                    if (v109 >= (uint64_t)(*((_QWORD *)&v306 + 1) - (unint64_t)v305[0]) >> 3)
                    {
                      if (*((void **)&v306 + 1) == v305[0])
                        v113 = 1;
                      else
                        v113 = (uint64_t)(*((_QWORD *)&v306 + 1) - (unint64_t)v305[0]) >> 2;
                      *(_QWORD *)&buf[32] = (char *)&v306 + 8;
                      *(_QWORD *)buf = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v113);
                      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                      *(_QWORD *)&buf[16] = *(_QWORD *)buf;
                      *(_QWORD *)&buf[24] = *(_QWORD *)buf + 8 * v114;
                      __x.first = (const char *)operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(buf, &__x);
                      v115 = v305[1];
                      v116 = *(char **)&buf[16];
                      v117 = (uint64_t *)v305[1];
                      if (v305[1] != (void *)v306)
                      {
                        do
                        {
                          if (v116 == *(char **)&buf[24])
                          {
                            v118 = *(char **)&buf[8];
                            if (*(_QWORD *)&buf[8] <= *(_QWORD *)buf)
                            {
                              v287 = *(void **)buf;
                              if (v116 == *(char **)buf)
                                v125 = 1;
                              else
                                v125 = (uint64_t)&v116[-*(_QWORD *)buf] >> 2;
                              v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v125);
                              v128 = &v126[8 * (v125 >> 2)];
                              v130 = v116 - v118;
                              v129 = v116 == v118;
                              v116 = v128;
                              v6 = a1;
                              if (!v129)
                              {
                                v116 = &v128[v130 & 0xFFFFFFFFFFFFFFF8];
                                v131 = 8 * (v130 >> 3);
                                v132 = v128;
                                do
                                {
                                  v133 = *(_QWORD *)v118;
                                  v118 += 8;
                                  *(_QWORD *)v132 = v133;
                                  v132 += 8;
                                  v131 -= 8;
                                }
                                while (v131);
                              }
                              *(_QWORD *)buf = v126;
                              *(_QWORD *)&buf[8] = v128;
                              *(_QWORD *)&buf[16] = v116;
                              *(_QWORD *)&buf[24] = &v126[8 * v127];
                              if (v287)
                                operator delete(v287);
                            }
                            else
                            {
                              v119 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
                              if (v119 >= -1)
                                v120 = v119 + 1;
                              else
                                v120 = v119 + 2;
                              v121 = *(_QWORD *)&buf[8] - 8 * (v120 >> 1);
                              v122 = (size_t)&v116[-*(_QWORD *)&buf[8]];
                              if (v116 != *(char **)&buf[8])
                              {
                                v286 = (void *)(*(_QWORD *)&buf[8] - 8 * (v120 >> 1));
                                v123 = &v116[-*(_QWORD *)&buf[8]];
                                memmove(v286, *(const void **)&buf[8], v122);
                                v122 = (size_t)v123;
                                v121 = (uint64_t)v286;
                                v116 = v118;
                              }
                              v124 = &v116[-8 * (v120 >> 1)];
                              v116 = (char *)(v121 + v122);
                              *(_QWORD *)&buf[8] = v124;
                              *(_QWORD *)&buf[16] = v121 + v122;
                              v6 = a1;
                            }
                          }
                          v134 = *v117++;
                          *(_QWORD *)v116 = v134;
                          v116 = (char *)(*(_QWORD *)&buf[16] + 8);
                          *(_QWORD *)&buf[16] += 8;
                        }
                        while (v117 != (uint64_t *)v306);
                        v115 = v305[1];
                      }
                      v135 = *(void **)buf;
                      v136 = *(void **)&buf[8];
                      v137 = v305[0];
                      *(void **)buf = v305[0];
                      *(_QWORD *)&buf[8] = v115;
                      v305[0] = v135;
                      v305[1] = v136;
                      *(_QWORD *)&buf[16] = v117;
                      *(_QWORD *)&v306 = v116;
                      *((_QWORD *)&v306 + 1) = *(_QWORD *)&buf[24];
                      v138 = 21;
                      if (v116 - (_BYTE *)v136 != 8)
                        v138 = v307.i64[0] + 42;
                      v307.i64[0] = v138;
                      if (v137)
                        operator delete(v137);
                    }
                    else
                    {
                      if (v305[1] == v305[0])
                      {
                        *(_QWORD *)buf = operator new(0xFC0uLL);
                        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v305, buf);
                        *(_QWORD *)buf = *(_QWORD *)(v306 - 8);
                        *(_QWORD *)&v306 = v306 - 8;
                      }
                      else
                      {
                        *(_QWORD *)buf = operator new(0xFC0uLL);
                      }
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v305, buf);
                      v141 = 21;
                      if ((_QWORD)v306 - (unint64_t)v305[1] != 8)
                        v141 = v307.i64[0] + 42;
                      v307.i64[0] = v141;
                    }
                  }
                  else
                  {
                    v307.i64[0] = 42;
                    *(_QWORD *)buf = *(_QWORD *)(v306 - 8);
                    *(_QWORD *)&v306 = v306 - 8;
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v305, buf);
                  }
                  v106 = v307.i64[0];
                  v107 = (char *)v305[1];
                  v108 = (char *)v306;
                }
                v142 = &v107[8 * (v106 / 0x2A)];
                v143 = *(_QWORD *)v142 + 96 * (v106 % 0x2A);
                if (v108 == v107)
                  v144 = 0;
                else
                  v144 = v143;
                if (v144 == *(_QWORD *)v142)
                  v144 = *((_QWORD *)v142 - 1) + 4032;
                v145 = *(_OWORD *)(v96 + 16);
                *(_OWORD *)(v144 - 96) = *(_OWORD *)v96;
                *(_OWORD *)(v144 - 80) = v145;
                v146 = v94 + 96 * v95;
                *(_QWORD *)(v144 - 56) = 0;
                *(_QWORD *)(v144 - 48) = 0;
                *(_QWORD *)(v144 - 64) = 0;
                *(_OWORD *)(v144 - 64) = *(_OWORD *)(v146 + 32);
                *(_QWORD *)(v144 - 48) = *(_QWORD *)(v146 + 48);
                *(_QWORD *)(v146 + 32) = 0;
                *(_QWORD *)(v146 + 40) = 0;
                *(_QWORD *)(v146 + 48) = 0;
                *(_QWORD *)(v144 - 40) = 0;
                *(_QWORD *)(v144 - 32) = 0;
                *(_QWORD *)(v144 - 24) = 0;
                *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
                *(_QWORD *)(v144 - 24) = *(_QWORD *)(v146 + 72);
                *(_QWORD *)(v146 + 56) = 0;
                *(_QWORD *)(v146 + 64) = 0;
                *(_QWORD *)(v146 + 72) = 0;
                v147 = (void *)*v98;
                *(_QWORD *)(v144 - 11) = *(_QWORD *)(v96 + 85);
                *(_QWORD *)(v144 - 16) = v147;
                v307 = vaddq_s64(v307, (int64x2_t)xmmword_1C289DFD0);
                goto LABEL_207;
              case 0xFFFFFC1F:
LABEL_207:
                std::deque<std::__state<char>>::pop_back(v305);
                goto LABEL_208;
              case 0xFFFFFC20:
                v111 = *(_OWORD *)(v96 + 16);
                *(_OWORD *)buf = *(_OWORD *)v96;
                *(_OWORD *)&buf[16] = v111;
                memset(&buf[32], 0, 24);
                std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&buf[32], *(__int128 **)(v94 + 96 * v95 + 32), *(__int128 **)(v94 + 96 * v95 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v94 + 96 * v95 + 40) - *(_QWORD *)(v94 + 96 * v95 + 32)) >> 3));
                memset(__p, 0, 24);
                std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v94 + 96 * v95 + 56), *(__int128 **)(v94 + 96 * v95 + 64), (uint64_t)(*(_QWORD *)(v94 + 96 * v95 + 64) - *(_QWORD *)(v94 + 96 * v95 + 56)) >> 4);
                v112 = (void *)*v98;
                *(void **)((char *)&__p[3] + 5) = *(void **)(v96 + 85);
                __p[3] = v112;
                (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v98 + 24))(*v98, 1, v94 + 96 * v95);
                (*(void (**)(void *, _QWORD, _BYTE *))(*(_QWORD *)__p[3] + 24))(__p[3], 0, buf);
                std::deque<std::__state<char>>::push_back(v305, (uint64_t)buf);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (*(_QWORD *)&buf[32])
                {
                  *(_QWORD *)&buf[40] = *(_QWORD *)&buf[32];
                  operator delete(*(void **)&buf[32]);
                }
                goto LABEL_208;
              default:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
            }
            break;
          }
LABEL_219:
          end = v311.__end_;
          v150 = v311.__begin_;
          if (v311.__end_ == v311.__begin_)
            v151 = &v312;
          else
            v151 = v311.__begin_;
          v152 = (char *)v151->first;
          p_second = &v311.__begin_->second;
          if (v311.__end_ == v311.__begin_)
            p_second = &v312.second;
          v154 = v313;
          v155 = *p_second;
          v314 = v152;
          v315 = v313 != v152;
          v316.first = v155;
          v316.matched = v155 != v316.second;
          v156 = (char *)v311.__end_ - (char *)v311.__begin_;
          if (v311.__end_ == v311.__begin_)
          {
            v161 = 0;
            v159 = 0;
          }
          else
          {
            v157 = v156 / 24;
            if ((unint64_t)(v156 / 24) > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v158 = (char *)operator new(v156);
            v159 = v158;
            v160 = 3 * v157;
            v161 = &v158[24 * v157];
            v162 = 8 * v160;
            v163 = v158;
            do
            {
              *(_QWORD *)v163 = 0;
              *((_QWORD *)v163 + 1) = 0;
              v163[16] = 0;
              v163 += 24;
              v162 -= 24;
            }
            while (v162);
            if (v161 != v158)
            {
              v164 = 0;
              v165 = 0;
              if ((unint64_t)((v161 - v158) / 24) <= 1)
                v166 = 1;
              else
                v166 = (v161 - v158) / 24;
              v167 = v311.__end_;
              v168 = v311.__begin_;
              v169 = 0xAAAAAAAAAAAAAAABLL * (((char *)v311.__end_ - (char *)v311.__begin_) >> 3);
              v170 = &v311.__begin_->second;
              do
              {
                if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v150) >> 3) <= v165)
                  v171 = &v312;
                else
                  v171 = &v150[v164 / 0x18];
                v172 = &v158[v164];
                *(_QWORD *)&v158[v164] = &v295[(unint64_t)(v171->first - (const char *)v154)];
                v173 = &v170[v164 / 8];
                if (v169 <= v165)
                  v173 = &v312.second;
                *((_QWORD *)v172 + 1) = &v295[*v173 - v154];
                p_matched = &v168[v164 / 0x18].matched;
                if (v169 <= v165)
                  p_matched = &v312.matched;
                v172[16] = *p_matched;
                ++v165;
                v164 += 24;
                v150 = v168;
                end = v167;
              }
              while (v166 != v165);
              v175 = 0;
              v150 = v168;
              goto LABEL_245;
            }
          }
          v175 = 0;
          goto LABEL_245;
        }
        v305[0] = 0;
        v305[1] = 0;
        *(_QWORD *)&v306 = 0;
        v19 = v300;
        if (!(_QWORD)v300)
        {
          *(_QWORD *)buf = v305;
          std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          goto LABEL_242;
        }
        __x.first = v18;
        __x.second = v18;
        __x.matched = 0;
        *(_DWORD *)buf = 0;
        memset(&buf[8], 0, 48);
        memset(__p, 0, 37);
        v305[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v305, (uint64_t)buf);
        if (__p[0])
          operator delete(__p[0]);
        if (*(_QWORD *)&buf[32])
          operator delete(*(void **)&buf[32]);
        v20 = v305[1];
        *((_DWORD *)v305[1] - 24) = 0;
        *(v20 - 11) = v17;
        *(v20 - 10) = v17;
        *(v20 - 9) = v18;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v20 - 8), DWORD1(v299), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v305[1] - 40), DWORD2(v299));
        v285 = 0;
        v288 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v292 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = v305[1];
        *((_QWORD *)v305[1] - 2) = v19;
        *(v27 - 2) = 4160;
        *((_BYTE *)v27 - 4) = 1;
        while (2)
        {
          v28 = (++v26 & 0xFFF) != 0 || (int)(v26 >> 12) < (int)v297;
          if (!v28)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          v30 = v27 - 4;
          v29 = *((_QWORD *)v27 - 2);
          v31 = v27 - 24;
          if (v29)
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v29 + 16))(v29, v27 - 24);
          switch(*(_DWORD *)v31)
          {
            case 0xFFFFFC18:
              if (*((const char **)v27 - 10) != v296)
                goto LABEL_41;
              if ((v25 & (v24 >= (uint64_t)&v296[-*((_QWORD *)v27 - 11)])) != 0)
                goto LABEL_109;
              v281 = &v296[-*((_QWORD *)v27 - 11)];
              v39 = (__int128 *)*((_QWORD *)v27 - 8);
              v38 = (__int128 *)*((_QWORD *)v27 - 7);
              v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v39) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v288 - (uint64_t)v292) >> 3) >= v40)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((v23 - v292) >> 3) >= v40)
                {
                  if (v39 == v38)
                  {
                    v23 = v292;
                    v52 = v292;
                  }
                  else
                  {
                    v23 = v292;
                    v52 = v292;
                    do
                    {
                      *(_OWORD *)v52 = *v39;
                      v52[16] = *((_BYTE *)v39 + 16);
                      v52 += 24;
                      v39 = (__int128 *)((char *)v39 + 24);
                    }
                    while (v39 != v38);
                  }
                  v51 = v52 - v23;
                }
                else
                {
                  v47 = (__int128 *)((char *)v39 + 8 * ((v23 - v292) >> 3));
                  if (v23 != v292)
                  {
                    v48 = v292;
                    do
                    {
                      *(_OWORD *)v48 = *v39;
                      v48[16] = *((_BYTE *)v39 + 16);
                      v39 = (__int128 *)((char *)v39 + 24);
                      v48 += 24;
                    }
                    while (v39 != v47);
                  }
                  v49 = v23;
                  while (v47 != v38)
                  {
                    v50 = *v47;
                    *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
                    *(_OWORD *)v49 = v50;
                    v49 += 24;
                    v47 = (__int128 *)((char *)v47 + 24);
                  }
                  v51 = v49 - v23;
                }
              }
              else
              {
                if (v292)
                {
                  operator delete(v292);
                  v288 = 0;
                }
                if (v40 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_495;
                v41 = 0x5555555555555556 * (v288 >> 3);
                if (v41 <= v40)
                  v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v39) >> 3);
                v42 = 0xAAAAAAAAAAAAAAABLL * (v288 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v41;
                if (v42 > 0xAAAAAAAAAAAAAAALL)
LABEL_495:
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v42);
                v23 = v43;
                v45 = v43;
                while (v39 != v38)
                {
                  v46 = *v39;
                  *((_QWORD *)v45 + 2) = *((_QWORD *)v39 + 2);
                  *(_OWORD *)v45 = v46;
                  v45 += 24;
                  v39 = (__int128 *)((char *)v39 + 24);
                }
                v288 = (uint64_t)&v43[24 * v44];
                v51 = v45 - v43;
                v292 = v43;
              }
              v54 = (__int128 *)*((_QWORD *)v27 - 5);
              v53 = (char *)*((_QWORD *)v27 - 4);
              v55 = (v53 - (char *)v54) >> 4;
              if (v55 > (v285 - (uint64_t)v21) >> 4)
              {
                if (v21)
                {
                  operator delete(v21);
                  v285 = 0;
                }
                if (v53 - (char *)v54 < 0)
                  goto LABEL_494;
                v56 = v285 >> 3;
                if (v285 >> 3 <= v55)
                  v56 = (v53 - (char *)v54) >> 4;
                v57 = (unint64_t)v285 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v56;
                if (v57 >> 60)
LABEL_494:
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v57);
                v22 = v58;
                v60 = v58;
                while (v54 != (__int128 *)v53)
                {
                  v61 = *v54++;
                  *(_OWORD *)v60 = v61;
                  v60 += 16;
                }
                v285 = (uint64_t)&v58[16 * v59];
                v68 = v60 - v58;
                v21 = v58;
                goto LABEL_107;
              }
              v62 = (v22 - v21) >> 4;
              if (v62 >= v55)
              {
                if (v54 == (__int128 *)v53)
                {
                  v22 = v21;
                  v69 = v21;
                }
                else
                {
                  v69 = v21;
                  do
                  {
                    *(_QWORD *)v69 = *(_QWORD *)v54;
                    *((_QWORD *)v69 + 1) = *((_QWORD *)v54 + 1);
                    v69 += 16;
                    ++v54;
                  }
                  while (v54 != (__int128 *)v53);
                  v22 = v21;
                }
                v68 = v69 - v22;
LABEL_107:
                v66 = v281;
                goto LABEL_108;
              }
              v63 = &v54[v62];
              if (v22 != v21)
              {
                v64 = v21;
                do
                {
                  *(_QWORD *)v64 = *(_QWORD *)v54;
                  *((_QWORD *)v64 + 1) = *((_QWORD *)v54++ + 1);
                  v64 += 16;
                }
                while (v54 != v63);
              }
              v65 = v22;
              if (v63 == (__int128 *)v53)
              {
                v66 = v281;
              }
              else
              {
                v66 = v281;
                do
                {
                  v67 = *v63++;
                  *(_OWORD *)v65 = v67;
                  v65 += 16;
                }
                while (v63 != (__int128 *)v53);
              }
              v68 = v65 - v22;
LABEL_108:
              v23 += v51;
              v22 += v68;
              v24 = (uint64_t)v66;
LABEL_109:
              v70 = v305[1];
              if ((const char *)v24 == v297)
              {
                v71 = v305[0];
                while (v70 != v71)
                {
                  v70 -= 12;
                  std::allocator<std::__state<char>>::destroy[abi:ne180100](v70);
                }
                v305[1] = v71;
                v25 = 1;
                v24 = (uint64_t)v297;
              }
              else
              {
                v72 = (char *)v305[1] - 96;
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v305[1] - 12);
                v305[1] = v72;
                v25 = 1;
              }
LABEL_115:
              v27 = v305[1];
              if (v305[0] != v305[1])
                continue;
              if ((v25 & 1) != 0)
              {
                v73 = v311.__begin_;
                v311.__begin_->first = v295;
                v73->second = &v295[v24];
                v73->matched = 1;
                if (v23 != v292)
                {
                  v74 = v292 + 16;
                  v75 = 1;
                  do
                  {
                    v76 = &v73[v75];
                    v76->std::pair<const char *, const char *> = (std::pair<const char *, const char *>)*((_OWORD *)v74 - 1);
                    v77 = *v74;
                    v74 += 24;
                    v76->matched = v77;
                    v28 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v292) >> 3) > v75++;
                  }
                  while (v28);
                }
                v78 = 1;
                v6 = a1;
              }
              else
              {
                v78 = 0;
                v6 = a1;
              }
              v13 = v12 + 4;
              if (v21)
                operator delete(v21);
              if (v292)
                operator delete(v292);
              *(_QWORD *)buf = v305;
              std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              if ((v78 & 1) != 0)
                goto LABEL_219;
LABEL_242:
              v161 = 0;
              v159 = 0;
              v150 = v311.__begin_;
              v311.__end_ = v311.__begin_;
              v175 = 1;
LABEL_245:
              matched = v316.matched;
              if (v150)
              {
                v311.__end_ = v150;
                operator delete(v150);
              }
              if (matched)
                v177 = v175;
              else
                v177 = 1;
              if (!v177)
                v161 = v159;
              v178 = (char **)v159;
              if (v159 == v161)
              {
LABEL_291:
                v196 = 0;
                v193 = 1;
                if (!v159)
                  goto LABEL_293;
LABEL_292:
                operator delete(v159);
                goto LABEL_293;
              }
              do
              {
                v179 = MRRLoggerForCategory(2);
                if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
                {
                  v180 = v13;
                  if (*((char *)v12 + 55) < 0)
                    v180 = (_QWORD *)*v13;
                  if (*((_BYTE *)v178 + 16))
                  {
                    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v311, *v178, v178[1], v178[1] - *v178);
                    v181 = &v311;
                    if (SHIBYTE(v311.__end_cap_.__value_) < 0)
                      v181 = v311.__begin_;
                  }
                  else
                  {
                    memset(&v311, 0, sizeof(v311));
                    v181 = &v311;
                  }
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = v180;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v181;
                  _os_log_impl(&dword_1C281A000, v179, OS_LOG_TYPE_DEBUG, "[Verbal MR] - Template '%s' Matches for '%s'", buf, 0x16u);
                  if (SHIBYTE(v311.__end_cap_.__value_) < 0)
                    operator delete(v311.__begin_);
                }
                v178 += 3;
              }
              while (v178 != (char **)v161);
              v182 = (char **)v159;
              while (1)
              {
                if (*((_BYTE *)v182 + 16))
                {
                  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(buf, *v182, v182[1], v182[1] - *v182);
                  v183 = buf[23];
                  v184 = *(void **)buf;
                  if (buf[23] >= 0)
                    v185 = buf;
                  else
                    v185 = *(char **)buf;
                }
                else
                {
                  v184 = 0;
                  v183 = 0;
                  memset(buf, 0, 24);
                  v185 = buf;
                }
                std::string::basic_string[abi:ne180100]<0>(&v311, v185);
                if (v183 < 0)
                  operator delete(v184);
                v186 = v302;
                v187 = v303;
                v188 = -9999.0;
                if (v302 != v303)
                {
                  while (1)
                  {
                    v189 = *(_QWORD **)(v186 + 32);
                    if (v189)
                    {
                      v190 = (_QWORD *)(v186 + 32);
                      do
                      {
                        v191 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v189 + 4, &v311);
                        v192 = v189 + 1;
                        if (!v191)
                        {
                          v192 = v189;
                          v190 = v189;
                        }
                        v189 = (_QWORD *)*v192;
                      }
                      while (*v192);
                      if (v190 != (_QWORD *)(v186 + 32)
                        && !std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v311, v190 + 4))
                      {
                        break;
                      }
                    }
                    v186 += 56;
                    if (v186 == v187)
                    {
                      v188 = -9999.0;
                      goto LABEL_282;
                    }
                  }
                  v188 = *(float *)(v186 + 48);
                  v194 = MRRLoggerForCategory(2);
                  if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
                  {
                    v195 = &v311;
                    if (SHIBYTE(v311.__end_cap_.__value_) < 0)
                      v195 = v311.__begin_;
                    *(_DWORD *)buf = 134218242;
                    *(double *)&buf[4] = v188;
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = v195;
                    _os_log_impl(&dword_1C281A000, v194, OS_LOG_TYPE_DEBUG, "[Verbal MR] - index='%f' found in keyword map for match word='%s'", buf, 0x16u);
                  }
                }
LABEL_282:
                v193 = v188 == -9999.0;
                if (SHIBYTE(v311.__end_cap_.__value_) < 0)
                  operator delete(v311.__begin_);
                if (v188 != -9999.0)
                  break;
                v182 += 3;
                if (v182 == (char **)v161)
                  goto LABEL_291;
              }
              v196 = 1;
              v5 = v188;
              if (v159)
                goto LABEL_292;
LABEL_293:
              v197 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
              if (*((_QWORD *)&v300 + 1))
              {
                v198 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                do
                  v199 = __ldaxr(v198);
                while (__stlxr(v199 - 1, v198));
                if (!v199)
                {
                  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                  std::__shared_weak_count::__release_weak(v197);
                }
              }
              std::locale::~locale(&v298.__loc_);
              if (!v193)
                goto LABEL_309;
              v200 = (_QWORD *)v12[1];
              if (v200)
              {
                do
                {
                  v201 = v200;
                  v200 = (_QWORD *)*v200;
                }
                while (v200);
              }
              else
              {
                do
                {
                  v201 = (_QWORD *)v12[2];
                  v129 = *v201 == (_QWORD)v12;
                  v12 = v201;
                }
                while (!v129);
              }
              v12 = v201;
              if (v201 == (_QWORD *)(v290 + 32))
              {
                v196 = 2;
                goto LABEL_309;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_115;
            case 0xFFFFFC1F:
LABEL_41:
              v32 = (char *)v305[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v305[1] - 12);
              v305[1] = v32;
              goto LABEL_115;
            case 0xFFFFFC20:
              v33 = *((_OWORD *)v27 - 5);
              *(_OWORD *)buf = *v31;
              *(_OWORD *)&buf[16] = v33;
              memset(&buf[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&buf[32], *((__int128 **)v27 - 8), *((__int128 **)v27 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v27 - 7) - *((_QWORD *)v27 - 8)) >> 3));
              memset(__p, 0, 24);
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v27 - 5), *((__int128 **)v27 - 4), (uint64_t)(*((_QWORD *)v27 - 4) - *((_QWORD *)v27 - 5)) >> 4);
              v34 = (void *)*v30;
              *(void **)((char *)&__p[3] + 5) = *(void **)((char *)v27 - 11);
              __p[3] = v34;
              (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v30 + 24))(*v30, 1, v27 - 24);
              (*(void (**)(void *, _QWORD, _BYTE *))(*(_QWORD *)__p[3] + 24))(__p[3], 0, buf);
              v35 = (char *)v305[1];
              if (v305[1] >= (void *)v306)
              {
                v305[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v305, (uint64_t)buf);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                v36 = *(_OWORD *)&buf[16];
                *(_OWORD *)v305[1] = *(_OWORD *)buf;
                *((_OWORD *)v35 + 1) = v36;
                *((_QWORD *)v35 + 4) = 0;
                *((_QWORD *)v35 + 5) = 0;
                *((_QWORD *)v35 + 6) = 0;
                *((_QWORD *)v35 + 7) = 0;
                *((_OWORD *)v35 + 2) = *(_OWORD *)&buf[32];
                *((_QWORD *)v35 + 6) = *(_QWORD *)&buf[48];
                memset(&buf[32], 0, 24);
                *((_QWORD *)v35 + 8) = 0;
                *((_QWORD *)v35 + 9) = 0;
                *(_OWORD *)(v35 + 56) = *(_OWORD *)__p;
                *((void **)v35 + 9) = __p[2];
                memset(__p, 0, 24);
                v37 = __p[3];
                *(void **)(v35 + 85) = *(void **)((char *)&__p[3] + 5);
                *((_QWORD *)v35 + 10) = v37;
                v305[1] = v35 + 96;
              }
              if (*(_QWORD *)&buf[32])
              {
                *(_QWORD *)&buf[40] = *(_QWORD *)&buf[32];
                operator delete(*(void **)&buf[32]);
              }
              goto LABEL_115;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
      }
    }
    v196 = 2;
LABEL_309:
    v311.__begin_ = (std::vector<std::csub_match>::pointer)&v302;
    std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
    if ((v196 & 1) == 0)
    {
LABEL_312:
      v202 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)&a3->matched + 7) >= 0)
          v203 = a3;
        else
          v203 = (std::sub_match<const char *> *)a3->first;
        LODWORD(v311.__begin_) = 136315138;
        *(std::vector<std::csub_match>::pointer *)((char *)&v311.__begin_ + 4) = v203;
        _os_log_impl(&dword_1C281A000, v202, OS_LOG_TYPE_DEBUG, "[Verbal MR] - No ordinal index found for mention '%s'", (uint8_t *)&v311, 0xCu);
      }
      goto LABEL_317;
    }
    if (v5 != -9999.0)
      break;
LABEL_317:
    v290 += 48;
    if (v290 == v283)
      goto LABEL_318;
  }
  v214 = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
  v215 = (int)v5;
  if (v5 < 0.0)
    v215 = (int)v5 + v214;
  if ((v214 & 0x80000000) == 0)
    v216 = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
  else
    v216 = v214 + 1;
  v217 = v216 >> 1;
  if (v5 == 0.5)
    v218 = v217;
  else
    v218 = v215;
  if ((v218 & 0x80000000) != 0 || (int)v218 >= (int)v214)
  {
    v229 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v311.__begin_) = 67109376;
      HIDWORD(v311.__begin_) = v218;
      LOWORD(v311.__end_) = 1024;
      *(_DWORD *)((char *)&v311.__end_ + 2) = v214;
      _os_log_impl(&dword_1C281A000, v229, OS_LOG_TYPE_DEBUG, "[Verbal MR] Mention Index '%d' out of entity array boundary with size='%d'", (uint8_t *)&v311, 0xEu);
    }
    v230 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
      goto LABEL_364;
    v311.__begin_ = (std::vector<std::csub_match>::pointer)0xFFFFD8F204000100;
    v211 = "[Verbal MR] mention index out of entity array boundary = '%d'";
    v212 = v230;
    v213 = 8;
LABEL_363:
    _os_log_impl(&dword_1C281A000, v212, OS_LOG_TYPE_ERROR, v211, (uint8_t *)&v311, v213);
LABEL_364:
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 24) = 0;
    return;
  }
  std::to_string((std::string *)&v298, v218);
  v219 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)&a3->matched + 7) >= 0)
      v220 = a3;
    else
      v220 = (std::sub_match<const char *> *)a3->first;
    locale = (std::sub_match<const char *> *)&v298;
    if (SHIBYTE(v298.__col_) < 0)
      locale = (std::sub_match<const char *> *)v298.__loc_.__locale_;
    v222 = a5[1] - *a5;
    LODWORD(v311.__begin_) = 136315650;
    *(std::vector<std::csub_match>::pointer *)((char *)&v311.__begin_ + 4) = v220;
    WORD2(v311.__end_) = 2080;
    *(std::vector<std::csub_match>::pointer *)((char *)&v311.__end_ + 6) = locale;
    HIWORD(v311.__end_cap_.__value_) = 2048;
    v312.first = (const char *)v222;
    _os_log_impl(&dword_1C281A000, v219, OS_LOG_TYPE_DEBUG, "[Verbal MR] Mapped text ordinal mention='%s' to array index='%s' in array size='%lu'", (uint8_t *)&v311, 0x20u);
  }
  v224 = *a5;
  v223 = a5[1];
  if (v218 < v223 - *a5)
  {
    v225 = *a4;
    v226 = a4[1] - *a4;
    if (!v226)
    {
      v227 = MRRLoggerForCategory(2);
      if (!os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
        goto LABEL_377;
      LOWORD(v311.__begin_) = 0;
      v228 = "[Verbal MR] Warning: The MRREntity array is empty.";
      goto LABEL_376;
    }
    if ((*(char *)(v225 + 159) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(v225 + 159))
        goto LABEL_355;
LABEL_372:
      v227 = MRRLoggerForCategory(2);
      if (!os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
        goto LABEL_377;
      LOWORD(v311.__begin_) = 0;
      v228 = "[Verbal MR] Warning: The first MRREntity groupId is empty.";
LABEL_376:
      _os_log_impl(&dword_1C281A000, v227, OS_LOG_TYPE_DEBUG, v228, (uint8_t *)&v311, 2u);
      goto LABEL_377;
    }
    if (!*(_QWORD *)(v225 + 144))
      goto LABEL_372;
LABEL_355:
    if (v223 == v224)
    {
      v227 = MRRLoggerForCategory(2);
      if (!os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
        goto LABEL_377;
      LOWORD(v311.__begin_) = 0;
      v228 = "[Verbal MR] Warning: selectedIndices is empty.";
      goto LABEL_376;
    }
    if (0x84BDA12F684BDA13 * (v226 >> 3) < *v224)
    {
      v227 = MRRLoggerForCategory(2);
      if (!os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
        goto LABEL_377;
      LOWORD(v311.__begin_) = 0;
      v228 = "[Verbal MR] Warning: MRREntity array size is smaller than first selectedIndices element index.";
      goto LABEL_376;
    }
    memset(&v311, 0, sizeof(v311));
    v235 = -1.0;
    do
    {
      v236 = *v224;
      v237 = *a4;
      if (0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 3) <= *v224)
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      v238 = *(double *)(v237 + 216 * v236 + 96);
      if (v235 < v238)
      {
        std::string::operator=((std::string *)&v311, (const std::string *)(v237 + 216 * v236 + 136));
        v235 = v238;
      }
      ++v224;
    }
    while (v224 != v223);
    v239 = *a5;
    v240 = a5[1];
    if (*a5 != v240)
    {
      v241 = 0;
      v242 = 0;
      v243 = 0;
      while (1)
      {
        v244 = *v239;
        v245 = *a4;
        if (0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 3) <= *v239)
          std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
        if (vabdd_f64(*(double *)(v245 + 216 * v244 + 96), v235) >= 0.0001)
          goto LABEL_411;
        v246 = v245 + 216 * v244;
        v247 = *(unsigned __int8 *)(v246 + 159);
        v248 = *(_QWORD *)(v246 + 144);
        if ((v247 & 0x80u) == 0)
          v249 = (std::vector<std::csub_match>::pointer)*(unsigned __int8 *)(v246 + 159);
        else
          v249 = *(std::vector<std::csub_match>::pointer *)(v246 + 144);
        value_high = (std::vector<std::csub_match>::pointer)HIBYTE(v311.__end_cap_.__value_);
        if (SHIBYTE(v311.__end_cap_.__value_) < 0)
          value_high = v311.__end_;
        if (v249 != value_high)
          goto LABEL_411;
        v251 = (const void **)(v246 + 136);
        if (SHIBYTE(v311.__end_cap_.__value_) >= 0)
          v252 = (unsigned __int8 *)&v311;
        else
          v252 = (unsigned __int8 *)v311.__begin_;
        if ((v247 & 0x80) != 0)
        {
          if (memcmp(*v251, v252, v248))
            goto LABEL_411;
        }
        else if ((_DWORD)v247)
        {
          while (*(unsigned __int8 *)v251 == *v252)
          {
            v251 = (const void **)((char *)v251 + 1);
            ++v252;
            if (!--v247)
              goto LABEL_409;
          }
          goto LABEL_411;
        }
LABEL_409:
        if ((unint64_t)v242 >= v241)
        {
          v254 = v242 - v243;
          v255 = v254 + 1;
          if ((unint64_t)(v254 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v241 - (_QWORD)v243) >> 2 > v255)
            v255 = (uint64_t)(v241 - (_QWORD)v243) >> 2;
          if (v241 - (unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8)
            v256 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v256 = v255;
          v257 = v243;
          if (v256)
            v256 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v256);
          else
            v258 = 0;
          v243 = (uint64_t *)(v256 + 8 * v254);
          *v243 = v244;
          v253 = v243 + 1;
          while (v242 != v257)
          {
            v259 = *--v242;
            *--v243 = v259;
          }
          v260 = v257;
          v241 = v256 + 8 * v258;
          if (v260)
            operator delete(v260);
          goto LABEL_412;
        }
        *v242++ = v244;
LABEL_411:
        v253 = v242;
LABEL_412:
        ++v239;
        v242 = v253;
        if (v239 == v240)
          goto LABEL_429;
      }
    }
    v253 = 0;
    v243 = 0;
LABEL_429:
    if (SHIBYTE(v311.__end_cap_.__value_) < 0)
      operator delete(v311.__begin_);
    v6 = a1;
    if (v253 == v243)
    {
      v262 = 0;
      LOBYTE(v263) = 0;
      v264 = 0;
      v265 = v253;
      goto LABEL_482;
    }
    v261 = *a4 + 216 * *v243;
    if (*(char *)(v261 + 159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(v261 + 136), *(_QWORD *)(v261 + 144));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)(v261 + 136);
      *(_QWORD *)&buf[16] = *(_QWORD *)(v261 + 152);
    }
    if (buf[23] >= 0)
      v266 = buf[23];
    else
      v266 = *(_QWORD *)&buf[8];
    if (buf[23] >= 0)
      v267 = buf;
    else
      v267 = *(_BYTE **)buf;
    v268 = v243;
    while (2)
    {
      v263 = *v268;
      marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&v311, (const marrs::mrr::mr::MRREntity *)(*a4 + 216 * *v268));
      v269 = v322;
      if ((v322 & 0x80u) == 0)
        v270 = v322;
      else
        v270 = __n;
      if (v270 == v266)
      {
        if ((v322 & 0x80) != 0)
        {
          if (memcmp(__s1, v267, __n))
            goto LABEL_454;
        }
        else
        {
          v271 = v267;
          p_s1 = &__s1;
          if (v322)
          {
            while (*(unsigned __int8 *)p_s1 == *v271)
            {
              p_s1 = (void **)((char *)p_s1 + 1);
              ++v271;
              if (!--v269)
                goto LABEL_453;
            }
            goto LABEL_454;
          }
        }
LABEL_453:
        if (v323 == (_DWORD)v218)
        {
          v305[0] = v326;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
          if (v325 < 0)
            operator delete(v324);
          v6 = a1;
          if ((char)v322 < 0)
            operator delete(__s1);
          v305[0] = v319;
          std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
          if (SHIBYTE(v316.first) < 0)
            operator delete(v314);
          if (SHIBYTE(v313) < 0)
            operator delete((void *)v312.second);
          v264 = v263 & 0xFFFFFFFFFFFFFF00;
          if (SHIBYTE(v312.first) < 0)
            operator delete(v311.__end_);
          v262 = 1;
LABEL_479:
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v265 = v243;
LABEL_482:
          if (v265)
            operator delete(v265);
          if (v262)
          {
            v274 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v274, OS_LOG_TYPE_DEBUG))
            {
              if (*((char *)&a3->matched + 7) >= 0)
                v275 = a3;
              else
                v275 = (std::sub_match<const char *> *)a3->first;
              LODWORD(v311.__begin_) = 136315394;
              *(std::vector<std::csub_match>::pointer *)((char *)&v311.__begin_ + 4) = v275;
              WORD2(v311.__end_) = 1024;
              *(_DWORD *)((char *)&v311.__end_ + 6) = v218;
              _os_log_impl(&dword_1C281A000, v274, OS_LOG_TYPE_DEBUG, "[Verbal MR] Entity resolved for the ordinal mention '%s' with list position of '%d'", (uint8_t *)&v311, 0x12u);
            }
            v276 = operator new(8uLL);
            *v276 = v264 & 0xFFFFFFFFFFFFFF00 | v263;
            *(_QWORD *)v6 = v276;
            *(_QWORD *)(v6 + 8) = v276 + 1;
            *(_QWORD *)(v6 + 16) = v276 + 1;
            v232 = 1;
            goto LABEL_383;
          }
LABEL_377:
          v233 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)&a3->matched + 7) >= 0)
              v234 = a3;
            else
              v234 = (std::sub_match<const char *> *)a3->first;
            LODWORD(v311.__begin_) = 136315394;
            *(std::vector<std::csub_match>::pointer *)((char *)&v311.__begin_ + 4) = v234;
            WORD2(v311.__end_) = 1024;
            *(_DWORD *)((char *)&v311.__end_ + 6) = v218;
            _os_log_impl(&dword_1C281A000, v233, OS_LOG_TYPE_DEBUG, "[Verbal MR] No entity resolved for the ordinal mention '%s' with list position of '%d'", (uint8_t *)&v311, 0x12u);
          }
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v232 = 1;
          *(_QWORD *)(v6 + 16) = 0;
          goto LABEL_383;
        }
      }
LABEL_454:
      v305[0] = v326;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
      if (v325 < 0)
        operator delete(v324);
      if ((char)v322 < 0)
        operator delete(__s1);
      v305[0] = v319;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
      if (SHIBYTE(v316.first) < 0)
        operator delete(v314);
      if (SHIBYTE(v313) < 0)
        operator delete((void *)v312.second);
      if (SHIBYTE(v312.first) < 0)
        operator delete(v311.__end_);
      if (++v268 == v253)
      {
        v273 = MRRLoggerForCategory(2);
        v6 = a1;
        if (os_log_type_enabled(v273, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v311.__begin_) = 67109120;
          HIDWORD(v311.__begin_) = v218;
          _os_log_impl(&dword_1C281A000, v273, OS_LOG_TYPE_DEBUG, "[Verbal MR] No entity matched with the list position = %d", (uint8_t *)&v311, 8u);
        }
        v262 = 0;
        LOBYTE(v263) = 0;
        v264 = 0;
        goto LABEL_479;
      }
      continue;
    }
  }
  v231 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v311.__begin_) = 67109120;
    HIDWORD(v311.__begin_) = v218;
    _os_log_impl(&dword_1C281A000, v231, OS_LOG_TYPE_ERROR, "[Verbal MR] No matching entity found for mentionedOrdinalIndexInEntityArray = '%d'", (uint8_t *)&v311, 8u);
  }
  v232 = 0;
  *(_BYTE *)v6 = 0;
LABEL_383:
  *(_BYTE *)(v6 + 24) = v232;
  if (SHIBYTE(v298.__col_) < 0)
    operator delete(v298.__loc_.__locale_);
}

void sub_1C28408A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;

  operator delete(v53);
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        marrs::mrr::mr::MRREntity::~MRREntity(v4 - 27);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__init_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C2840C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  signed int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  const char *v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  std::vector<std::csub_match>::value_type __x;
  char *v43;
  char *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v39[32])
      operator delete(*(void **)&v39[32]);
    v36 = a4;
    v12 = v44;
    *((_DWORD *)v44 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44 - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = (_DWORD)a3 - (_DWORD)a2;
    v14 = v44;
    *((_QWORD *)v44 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 16;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 96;
      if (v16)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v14 - 96);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *((_QWORD *)v14 - 8);
          v29 = *((_QWORD *)v14 - 7) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44 - 96;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v44 - 12);
          v44 = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *((_OWORD *)v14 - 5);
          *(_OWORD *)v39 = *(_OWORD *)v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v39[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = *(_QWORD *)v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v17 + 24))(*(_QWORD *)v17, 1, v14 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *(_OWORD *)v44 = *(_OWORD *)v39;
            *((_OWORD *)v23 + 1) = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            *((_OWORD *)v23 + 2) = *(_OWORD *)&v39[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)(v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v44 = v23 + 96;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44;
          ++v15;
          if (v43 != v44)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v6;
}

void sub_1C2841280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C284173C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C2841834(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C28418A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C28418F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1C2841E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v8 = (char *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1C3BC5B8C]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1C284230C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__owns_one_state<char> *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  std::__owns_one_state<char> *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  std::__owns_one_state<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E7C667B8;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E7C66810;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  *(_QWORD *)&v9 = v7;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v14 > 0x3F)
  {
    switch(v14)
    {
      case 0x40u:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v21 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v21)
          v22 = v21;
        else
          v22 = (unsigned __int8 *)a3;
        if (v22 == (unsigned __int8 *)a2)
        {
          v23 = (_QWORD *)operator new();
          v24 = *(_QWORD *)(a1 + 56);
          v25 = *(_QWORD *)(v24 + 8);
          v23[1] = v25;
          *(_QWORD *)(v24 + 8) = v23;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, v22);
        }
        if (v22 != (unsigned __int8 *)a3)
          ++v22;
        while (v22 != (unsigned __int8 *)a3)
        {
          v32 = (unsigned __int8 *)memchr(v22, 10, a3 - (char *)v22);
          if (v32)
            v33 = v32;
          else
            v33 = (unsigned __int8 *)a3;
          v34 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v33 == v22)
          {
            v35 = (_QWORD *)operator new();
            v36 = *(_QWORD *)(a1 + 56);
            v37 = *(_QWORD *)(v36 + 8);
            v35[1] = v37;
            *(_QWORD *)(v36 + 8) = v35;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)v22, v33);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v34);
          if (v33 == (unsigned __int8 *)a3)
            v22 = v33;
          else
            v22 = v33 + 1;
        }
        break;
      case 0x100u:
        v15 = (char *)memchr(a2, 10, a3 - a2);
        if (v15)
          v16 = v15;
        else
          v16 = a3;
        if (v16 == a2)
        {
          v17 = (_QWORD *)operator new();
          v18 = *(_QWORD *)(a1 + 56);
          v19 = *(_QWORD *)(v18 + 8);
          v17[1] = v19;
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v16);
        }
        if (v16 != a3)
          ++v16;
        while (v16 != a3)
        {
          v26 = (char *)memchr(v16, 10, a3 - v16);
          if (v26)
            v27 = v26;
          else
            v27 = a3;
          v28 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v27 == v16)
          {
            v29 = (_QWORD *)operator new();
            v30 = *(_QWORD *)(a1 + 56);
            v31 = *(_QWORD *)(v30 + 8);
            v29[1] = v31;
            *(_QWORD *)(v30 + 8) = v29;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, v27);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v28);
          if (v27 == a3)
            v16 = v27;
          else
            v16 = v27 + 1;
        }
        break;
      default:
        goto LABEL_54;
    }
    return (unsigned __int8 *)a3;
  }
  else if (v14)
  {
    if (v14 != 16)
    {
      if (v14 != 32)
LABEL_54:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
}

void sub_1C28426D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2842740(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != a3)
  {
    if (*v8 != 124)
      return v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v14, a3);
    }
    while (v8 != v14);
    if (v13 == v8)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == (char *)a3)
    return (unsigned __int8 *)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E7C66908;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E7C66950;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2842AA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_1E7C66DD0;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_1E7C66E18;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C66D58;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C66D58;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1C3BC5C7CLL);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C66D58;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C66D58;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BC5C7CLL);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2842EB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_34:
      v14 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = *v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v14 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = (unsigned __int8 *)&a2[v16];
  }
  if (v14 == (unsigned __int8 *)a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E7C66E60;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
LABEL_33:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_34;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != (unsigned __int8 *)a2 || v14 == (unsigned __int8 *)a3)
    goto LABEL_38;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E7C66950;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = (unsigned __int8 *)(v28 + 1);
LABEL_38:
      if (v14 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E7C66908;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_1E7C66C68;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C284328C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_1E7C66CB0;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_1E7C66CF8;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_1E7C66D88;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1C284371C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2843814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2843860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C66D58;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C66D58;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BC5C7CLL);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  char *m;
  char *v13;
  int v14;
  char *v15;
  int v16;
  std::string *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  unint64_t k;
  std::string::size_type size;
  int v23;
  std::string::size_type v24;
  std::string *v25;
  std::string *v26;
  std::regex_traits<char>::char_class_type classname;
  char v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *p_s;
  std::string::size_type v35;
  unint64_t v36;
  __int128 v37;
  std::string::size_type v38;
  std::string *v39;
  std::vector<std::string>::pointer v40;
  std::string *v41;
  std::string::size_type i;
  std::string *v43;
  std::string::value_type v44;
  std::string *v45;
  std::string::size_type j;
  std::string *p_p;
  std::string::value_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::value_type v53;
  std::string *v54;
  std::string *v55;
  std::string::value_type v56;
  std::string *v57;
  void *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  void **v66;
  uint64_t v67;
  char *v68;
  std::string __p;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string __s;
  std::string v74;
  std::string v75;
  std::string v76;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_234;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_234;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_234;
    v66 = (void **)(v7 + 88);
    v67 = v7 + 16;
    v68 = a3 - 4;
    while (1)
    {
      v8 = (char *)v5;
      if ((char *)v5 == a3)
      {
        v10 = a3;
        goto LABEL_137;
      }
      v9 = *(unsigned __int8 *)v5;
      v10 = (char *)v5;
      if (v9 != 93)
        break;
LABEL_137:
      v5 = (uint64_t)v10;
LABEL_138:
      if (v8 == (char *)v5)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93)
            return v8 + 1;
        }
LABEL_234:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v72, 0, sizeof(v72));
    if ((char *)(v5 + 1) != a3 && v9 == 91)
    {
      v11 = *(unsigned __int8 *)(v5 + 1);
      switch(v11)
      {
        case '.':
          v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v72);
          v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v72.__r_.__value_.__l.__size_;
          if (size)
          {
LABEL_34:
            if (v10 != a3)
            {
              v16 = *v10;
              if (v16 != 93)
              {
                v18 = v10 + 1;
                if (v10 + 1 != a3 && v16 == 45 && *v18 != 93)
                {
                  memset(&v71, 0, sizeof(v71));
                  v19 = v10 + 2;
                  if (v10 + 2 != a3 && *v18 == 91 && *v19 == 46)
                  {
                    v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v10 + 3, a3, (uint64_t)&v71);
                    goto LABEL_141;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v18) = *v18;
                    if ((_DWORD)v18 == 92)
                    {
                      if ((_DWORD)v5)
                        v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, &v71);
                      else
                        v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &v71, v7);
LABEL_141:
                      v19 = v20;
LABEL_142:
                      v70 = v72;
                      __p = v71;
                      memset(&v71, 0, sizeof(v71));
                      memset(&v72, 0, sizeof(v72));
                      if (*(_BYTE *)(v7 + 170))
                      {
                        if (*(_BYTE *)(v7 + 169))
                        {
                          for (i = 0; ; ++i)
                          {
                            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                            {
                              if (i >= v70.__r_.__value_.__l.__size_)
                              {
LABEL_154:
                                for (j = 0; ; ++j)
                                {
                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  {
                                    if (j >= __p.__r_.__value_.__l.__size_)
                                      goto LABEL_200;
                                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                  }
                                  else
                                  {
                                    if (j >= HIBYTE(__p.__r_.__value_.__r.__words[2]))
                                      goto LABEL_200;
                                    p_p = &__p;
                                  }
                                  v48 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), p_p->__r_.__value_.__s.__data_[j]);
                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v49 = &__p;
                                  else
                                    v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                  v49->__r_.__value_.__s.__data_[j] = v48;
                                }
                              }
                              v43 = (std::string *)v70.__r_.__value_.__r.__words[0];
                            }
                            else
                            {
                              if (i >= HIBYTE(v70.__r_.__value_.__r.__words[2]))
                                goto LABEL_154;
                              v43 = &v70;
                            }
                            v44 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v43->__r_.__value_.__s.__data_[i]);
                            if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v45 = &v70;
                            else
                              v45 = (std::string *)v70.__r_.__value_.__r.__words[0];
                            v45->__r_.__value_.__s.__data_[i] = v44;
                          }
                        }
                        v59 = 0;
                        if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) != 0)
                          goto LABEL_191;
                        while (v59 < HIBYTE(v70.__r_.__value_.__r.__words[2]))
                        {
                          while (1)
                          {
                            ++v59;
                            if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) == 0)
                              break;
LABEL_191:
                            if (v59 >= v70.__r_.__value_.__l.__size_)
                              goto LABEL_194;
                          }
                        }
LABEL_194:
                        v60 = 0;
                        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
                          goto LABEL_197;
                        while (v60 < HIBYTE(__p.__r_.__value_.__r.__words[2]))
                        {
                          while (1)
                          {
                            ++v60;
                            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
                              break;
LABEL_197:
                            if (v60 >= __p.__r_.__value_.__l.__size_)
                              goto LABEL_200;
                          }
                        }
LABEL_200:
                        v61 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
                        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v62 = &v70;
                        else
                          v62 = (std::string *)v70.__r_.__value_.__r.__words[0];
                        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v61 = v70.__r_.__value_.__l.__size_;
                        std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v74, v67, (char *)v62, (char *)v62 + v61);
                        v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v64 = &__p;
                        else
                          v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v63 = __p.__r_.__value_.__l.__size_;
                        std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&__s, v67, (char *)v64, (char *)v64 + v63);
                        v75 = v74;
                        memset(&v74, 0, sizeof(v74));
                        v76 = __s;
                        memset(&__s, 0, sizeof(__s));
                        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v66, (__int128 *)&v75);
                        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v76.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v75.__r_.__value_.__l.__data_);
                        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__s.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                        {
                          v58 = (void *)v74.__r_.__value_.__r.__words[0];
LABEL_218:
                          operator delete(v58);
                        }
                      }
                      else
                      {
                        v50 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
                        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v50 = v70.__r_.__value_.__l.__size_;
                        if (v50 != 1)
                          goto LABEL_237;
                        v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v51 = __p.__r_.__value_.__l.__size_;
                        if (v51 != 1)
LABEL_237:
                          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                        if (*(_BYTE *)(v7 + 169))
                        {
                          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v52 = &v70;
                          else
                            v52 = (std::string *)v70.__r_.__value_.__r.__words[0];
                          v53 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v52->__r_.__value_.__s.__data_[0]);
                          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v54 = &v70;
                          else
                            v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
                          v54->__r_.__value_.__s.__data_[0] = v53;
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v55 = &__p;
                          else
                            v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          v56 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v55->__r_.__value_.__s.__data_[0]);
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v57 = &__p;
                          else
                            v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          v57->__r_.__value_.__s.__data_[0] = v56;
                        }
                        v75 = v70;
                        memset(&v70, 0, sizeof(v70));
                        v76 = __p;
                        memset(&__p, 0, sizeof(__p));
                        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v66, (__int128 *)&v75);
                        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v76.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
                        {
                          v58 = (void *)v75.__r_.__value_.__r.__words[0];
                          goto LABEL_218;
                        }
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v70.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v71.__r_.__value_.__l.__data_);
                      v28 = 1;
LABEL_134:
                      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v72.__r_.__value_.__l.__data_);
                      v10 = v19;
                      if ((v28 & 1) == 0)
                        goto LABEL_138;
                      goto LABEL_137;
                    }
                  }
                  else
                  {
                    LOBYTE(v18) = *v18;
                  }
                  std::string::operator=(&v71, (std::string::value_type)v18);
                  goto LABEL_142;
                }
              }
            }
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v72.__r_.__value_.__l.__size_)
              {
                if (v72.__r_.__value_.__l.__size_ == 1)
                {
                  v17 = (std::string *)v72.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v17->__r_.__value_.__s.__data_[0]);
LABEL_81:
                  v28 = 1;
                  v19 = v10;
                  goto LABEL_134;
                }
                v17 = (std::string *)v72.__r_.__value_.__r.__words[0];
LABEL_80:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
                goto LABEL_81;
              }
              operator delete(v72.__r_.__value_.__l.__data_);
            }
            else if (*((_BYTE *)&v72.__r_.__value_.__s + 23))
            {
              v17 = &v72;
              if (HIBYTE(v72.__r_.__value_.__r.__words[2]) == 1)
                goto LABEL_43;
              goto LABEL_80;
            }
            goto LABEL_137;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            v14 = *v10;
            if (v14 == 92)
            {
              v15 = v10 + 1;
              if ((_DWORD)v5)
              {
                v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v15, a3, &v72);
              }
              else
              {
                v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v15, (std::basic_regex<char> *)a3, &v72, v7);
                v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v14) = *v10;
          }
          std::string::operator=(&v72, v14);
          ++v10;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_233;
          for (k = 0; ; ++k)
          {
            v13 = (char *)(v5 + k + 2);
            if (*v13 == 58 && *(_BYTE *)(v5 + k + 3) == 93)
              break;
            if (&v68[-v5] == (char *)k)
              goto LABEL_233;
          }
          if (v13 == a3)
LABEL_233:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          v23 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v75, (char *)(v5 + 2), (char *)(v5 + k + 2), k);
          v24 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v75;
          else
            v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v24 = v75.__r_.__value_.__l.__size_;
          (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v25, (char *)v25 + v24);
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v75;
          else
            v26 = (std::string *)v75.__r_.__value_.__r.__words[0];
          classname = std::__get_classname((const char *)v26, v23 & 1);
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v75.__r_.__value_.__l.__data_);
          if (!classname)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          v28 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_133;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_233;
          for (m = 0; ; ++m)
          {
            v13 = &m[v5 + 2];
            if (*v13 == 61 && m[v5 + 3] == 93)
              break;
            if (&v68[-v5] == m)
              goto LABEL_233;
          }
          if (v13 == a3)
            goto LABEL_233;
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v74, a1, (char *)(v5 + 2), &m[v5 + 2]);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          {
            v29 = v74.__r_.__value_.__l.__size_;
            if (!v74.__r_.__value_.__l.__size_)
LABEL_235:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            v30 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          else
          {
            v29 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
            if (!*((_BYTE *)&v74.__r_.__value_.__s + 23))
              goto LABEL_235;
            v30 = &v74;
          }
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v75, (char *)v30, (char *)v30 + v29, v29);
          v31 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v75;
          else
            v32 = (std::string *)v75.__r_.__value_.__r.__words[0];
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v31 = v75.__r_.__value_.__l.__size_;
          (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16)
                                                                                           + 32))(&__s, *(_QWORD *)(a1 + 16), v32, (char *)v32 + v31);
          v33 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = __s.__r_.__value_.__l.__size_;
          if (v33 != 1)
          {
            if (v33 == 12)
            {
              p_s = &__s;
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              p_s->__r_.__value_.__s.__data_[11] = p_s->__r_.__value_.__s.__data_[3];
            }
            else if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              *__s.__r_.__value_.__l.__data_ = 0;
              __s.__r_.__value_.__l.__size_ = 0;
            }
            else
            {
              __s.__r_.__value_.__s.__data_[0] = 0;
              *((_BYTE *)&__s.__r_.__value_.__s + 23) = 0;
            }
          }
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v75.__r_.__value_.__l.__data_);
          v35 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v35 = __s.__r_.__value_.__l.__size_;
          if (v35)
          {
            v36 = *(_QWORD *)(v7 + 144);
            if (v36 >= *(_QWORD *)(v7 + 152))
            {
              v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)(v7 + 136), (__int128 *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                v37 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                *(_QWORD *)(v36 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
                *(_OWORD *)v36 = v37;
              }
              v40 = (std::vector<std::string>::pointer)(v36 + 24);
              *(_QWORD *)(v7 + 144) = v36 + 24;
            }
            *(_QWORD *)(v7 + 144) = v40;
          }
          else
          {
            v38 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v38 = v74.__r_.__value_.__l.__size_;
            if (v38 == 2)
            {
              v41 = &v74;
              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v41 = (std::string *)v74.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v41->__r_.__value_.__s.__data_[0], v41->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v38 != 1)
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v39 = &v74;
              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v39 = (std::string *)v74.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v39->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          v28 = 0;
LABEL_133:
          v5 = (uint64_t)(v13 + 2);
          v19 = v8;
          goto LABEL_134;
      }
    }
    v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    v10 = v8;
    goto LABEL_28;
  }
  return a2;
}

void sub_1C284484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C28449BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  BOOL v9;
  std::locale v11;
  std::string v12;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v11, (const std::locale *)(v4 + 16));
  std::locale::name(&v12, &v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = v12.__r_.__value_.__l.__size_ != 1 || *v12.__r_.__value_.__l.__data_ != 67;
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = SHIBYTE(v12.__r_.__value_.__r.__words[2]) != 1 || v12.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v11);
  *(_BYTE *)(v4 + 171) = v9;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_1C2844B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x1C3BC5C7C](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  unint64_t v13;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  for (i = a2; ; v6 = i)
  {
    v8 = *i++;
    if (v8 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    --v5;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v12;
  v9 = v13;
  *(_QWORD *)(a4 + 16) = v13;
  v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (v10 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v8;
  int v9;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  std::string::value_type v15;
  std::string *v16;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  char v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  _BYTE *v43;
  char v44;
  _BYTE *v45;
  char v46;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 97)
  {
    if (locale_low <= 82)
    {
      if (LOBYTE(this->__traits_.__loc_.__locale_))
      {
        if (locale_low == 68)
        {
          v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_23:
          *(_DWORD *)(a5 + 164) = v8;
          return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      v15 = 0;
      v16 = a4;
      goto LABEL_21;
    }
    if (locale_low == 83)
    {
      v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_23;
    }
    if (locale_low != 87)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(_BYTE *)(a5 + 169))
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v11 = v10;
      v13 = *(_BYTE **)(a5 + 72);
      v12 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *v13 = v10;
        v14 = (uint64_t)(v13 + 1);
LABEL_55:
        *(_QWORD *)(a5 + 72) = v14;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v26 = *(_QWORD *)(a5 + 64);
      v27 = &v13[-v26];
      v28 = (uint64_t)&v13[-v26 + 1];
      if (v28 >= 0)
      {
        v29 = v12 - v26;
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
          v31 = operator new(v30);
        else
          v31 = 0;
        v33 = &v31[v30];
        v27[(_QWORD)v31] = v11;
        v14 = (uint64_t)&v27[(_QWORD)v31 + 1];
        if (v13 == (_BYTE *)v26)
        {
          v31 = &v27[(_QWORD)v31];
        }
        else
        {
          v34 = &v13[~v26];
          do
          {
            v35 = *--v13;
            (v34--)[(_QWORD)v31] = v35;
          }
          while (v13 != (_BYTE *)v26);
          v13 = *(_BYTE **)(a5 + 64);
        }
        *(_QWORD *)(a5 + 64) = v31;
        *(_QWORD *)(a5 + 72) = v14;
        *(_QWORD *)(a5 + 80) = v33;
        if (v13)
          operator delete(v13);
        goto LABEL_55;
      }
LABEL_80:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    v19 = *(_BYTE **)(a5 + 72);
    v18 = *(_QWORD *)(a5 + 80);
    if (*(_BYTE *)(a5 + 170))
    {
      if ((unint64_t)v19 >= v18)
      {
        v20 = *(_QWORD *)(a5 + 64);
        v21 = &v19[-v20];
        v22 = (uint64_t)&v19[-v20 + 1];
        if (v22 < 0)
          goto LABEL_80;
        v23 = v18 - v20;
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
          v25 = operator new(v24);
        else
          v25 = 0;
        v41 = &v21[(_QWORD)v25];
        v42 = (char *)v25 + v24;
        v21[(_QWORD)v25] = 95;
        v32 = (uint64_t)&v21[(_QWORD)v25 + 1];
        if (v19 != (_BYTE *)v20)
        {
          v43 = &v19[~v20];
          do
          {
            v44 = *--v19;
            (v43--)[(_QWORD)v25] = v44;
          }
          while (v19 != (_BYTE *)v20);
LABEL_73:
          v19 = *(_BYTE **)(a5 + 64);
          goto LABEL_75;
        }
        goto LABEL_74;
      }
    }
    else if ((unint64_t)v19 >= v18)
    {
      v36 = *(_QWORD *)(a5 + 64);
      v37 = &v19[-v36];
      v38 = (uint64_t)&v19[-v36 + 1];
      if (v38 < 0)
        goto LABEL_80;
      v39 = v18 - v36;
      if (2 * v39 > v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v25 = operator new(v40);
      else
        v25 = 0;
      v41 = &v37[(_QWORD)v25];
      v42 = (char *)v25 + v40;
      v37[(_QWORD)v25] = 95;
      v32 = (uint64_t)&v37[(_QWORD)v25 + 1];
      if (v19 != (_BYTE *)v36)
      {
        v45 = &v19[~v36];
        do
        {
          v46 = *--v19;
          (v45--)[(_QWORD)v25] = v46;
        }
        while (v19 != (_BYTE *)v36);
        goto LABEL_73;
      }
LABEL_74:
      v25 = v41;
LABEL_75:
      *(_QWORD *)(a5 + 64) = v25;
      *(_QWORD *)(a5 + 72) = v32;
      *(_QWORD *)(a5 + 80) = v42;
      if (v19)
        operator delete(v19);
      goto LABEL_77;
    }
    *v19 = 95;
    v32 = (uint64_t)(v19 + 1);
LABEL_77:
    *(_QWORD *)(a5 + 72) = v32;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 114)
  {
    if (locale_low == 98)
    {
      v16 = a4;
      v15 = 8;
LABEL_21:
      std::string::operator=(v16, v15);
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    }
    if (locale_low != 100)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_25:
    *(_DWORD *)(a5 + 160) = v9;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low == 115)
  {
    v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_25;
  }
  if (locale_low != 119)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1C28456AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = *a2;
    v15 = &v13[48 * v12];
    v16 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v16;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v8 = v14 + 48;
    v17 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v18 - 3);
        *((_QWORD *)v14 - 4) = *((_QWORD *)v18 - 4);
        *((_OWORD *)v14 - 3) = v19;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v18 - 6) = 0;
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 48;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *((_QWORD *)v18 - 3) = 0;
        v18 -= 48;
      }
      while (v18 != v17);
      v18 = (char *)*a1;
      v21 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
      while ((char *)v21 != v18)
      {
        v21 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v21);
      }
    }
    if (v18)
      operator delete(v18);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v4 + 48;
  }
  a1[1] = v8;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C28458F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C284593C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E7C66A70;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E7C66AB8;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E7C66B00;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1C2845A78(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x1C3BC5C7C](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66AB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66AB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66A70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66A70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  unsigned int v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_64;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_64;
          v13 = -87;
LABEL_33:
          v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_64;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u)
      goto LABEL_64;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1C28461E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2846250(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C284629C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v6;

  v6 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v6 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 negate;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<std::string, std::string>>::pointer v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  size_t v37;
  char *v38;
  size_t v39;
  int v40;
  BOOL v41;
  int v42;
  std::string::size_type v43;
  unsigned __int8 v44;
  std::vector<char>::pointer v45;
  unint64_t v46;
  int v47;
  std::regex_traits<char>::char_class_type v48;
  int v49;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v51;
  char *v52;
  std::vector<std::pair<std::string, std::string>>::pointer v53;
  std::vector<std::pair<std::string, std::string>>::pointer v54;
  unsigned int v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  size_t v71;
  char *v72;
  size_t v73;
  int v74;
  BOOL v75;
  std::vector<std::string>::pointer v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  std::string::size_type v82;
  uint64_t v83;
  BOOL v84;
  std::string *v85;
  std::string::size_type v86;
  int v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  std::regex_traits<char>::char_class_type v93;
  int v94;
  std::vector<std::string>::pointer v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  std::string::size_type v101;
  uint64_t v102;
  BOOL v103;
  std::string *v104;
  std::string::size_type v105;
  int v106;
  std::string *v107;
  std::string *v108;
  uint64_t v109;
  int v110;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v113;
  std::regex_traits<char>::char_class_type neg_mask;
  int v115;
  std::__node<char> *first;
  int v117;
  char v118;
  char v119;
  uint64_t v120;
  _BOOL4 v121;
  _BOOL4 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::string __p;
  __int16 v128;
  std::string v129;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v8 = 0;
    negate = this->__negate_;
    goto LABEL_238;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_67;
  v6 = *current;
  LOBYTE(v128) = *current;
  v7 = current[1];
  HIBYTE(v128) = v7;
  if (this->__icase_)
  {
    LOBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v128;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v129, (const char *)&__s);
  __p = v129;
  size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v129.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_11;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_16;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v129, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v129;
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v129.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v129.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_180;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_180:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v43 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v43)
      goto LABEL_18;
LABEL_67:
    negate = 0;
    v8 = 1;
    goto LABEL_68;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_67;
LABEL_18:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (v128 != *(p_second - 1) || HIBYTE(v128) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_27;
    }
    goto LABEL_235;
  }
LABEL_27:
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v128, (char *)&v129);
    v20 = this->__ranges_.__begin_;
    v21 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v22 = (char *)this->__ranges_.__end_ - (char *)v20;
    if (v22)
    {
      v23 = 0;
      v24 = v22 / 48;
      v118 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v25 = __s.__r_.__value_.__l.__size_;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__s;
      else
        v26 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v24 <= 1)
        v27 = 1;
      else
        v27 = v22 / 48;
      v28 = (unsigned __int8 *)&v20->second.__r_.__value_.__r.__words[2] + 7;
      v29 = 1;
      while (1)
      {
        v30 = (char)*(v28 - 24);
        if (v30 >= 0)
          v31 = *(v28 - 24);
        else
          v31 = *(_QWORD *)(v28 - 39);
        if (v30 >= 0)
          v32 = (char *)(v28 - 47);
        else
          v32 = *(char **)(v28 - 47);
        if (v31 >= v25)
          v33 = v25;
        else
          v33 = v31;
        v34 = memcmp(v26, v32, v33);
        v35 = v25 >= v31;
        if (v34)
          v35 = v34 >= 0;
        if (v35)
        {
          v36 = (char)*v28;
          if (v36 >= 0)
            v37 = *v28;
          else
            v37 = *(_QWORD *)(v28 - 15);
          if (v36 >= 0)
            v38 = (char *)(v28 - 23);
          else
            v38 = *(char **)(v28 - 23);
          if (v25 >= v37)
            v39 = v37;
          else
            v39 = v25;
          v40 = memcmp(v38, v26, v39);
          v41 = v37 >= v25;
          if (v40)
            v41 = v40 >= 0;
          if (v41)
            break;
        }
        v29 = ++v23 < v24;
        v28 += 48;
        if (v27 == v23)
        {
          v42 = 0;
          negate = 0;
          goto LABEL_182;
        }
      }
      negate = 1;
      v42 = 5;
LABEL_182:
      p_traits = &this->__traits_;
      v21 = v118;
    }
    else
    {
      v29 = 0;
      v42 = 0;
      negate = 0;
    }
    if (v21 < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_213;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_217:
    if ((char)v128 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v113 = tab[v128];
      if (((v113 & mask) != 0 || v128 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v128) & 0x80000000) == 0
        && ((tab[HIBYTE(v128)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v128) == 95))
      {
        goto LABEL_235;
      }
      neg_mask = this->__neg_mask_;
      if ((v113 & neg_mask) != 0 || v128 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_234:
        v115 = negate;
LABEL_236:
        negate = v115;
        goto LABEL_237;
      }
    }
    if ((SHIBYTE(v128) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v128)] & neg_mask) == 0)
      {
        v115 = 1;
        if (HIBYTE(v128) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_236;
      }
      goto LABEL_234;
    }
LABEL_235:
    v115 = 1;
    goto LABEL_236;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v128, (char *)&v129);
  v95 = this->__equivalences_.__begin_;
  v96 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v97 = (char *)this->__equivalences_.__end_ - (char *)v95;
  if (!v97)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_217;
  }
  v98 = 0;
  v99 = v97 / 24;
  v100 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v101 = __s.__r_.__value_.__l.__size_;
  if (v99 <= 1)
    v102 = 1;
  else
    v102 = v97 / 24;
  v103 = 1;
  while (1)
  {
    v104 = &v95[v98];
    v105 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
    v106 = (char)v105;
    if ((v105 & 0x80u) != 0)
      v105 = v104->__r_.__value_.__l.__size_;
    if (v101 != v105)
      goto LABEL_208;
    v107 = v106 >= 0 ? &v95[v98] : (std::string *)v104->__r_.__value_.__r.__words[0];
    if ((v96 & 0x80) == 0)
      break;
    v123 = v99;
    v126 = v96;
    v110 = memcmp((const void *)v100, v107, *((size_t *)&v100 + 1));
    v99 = v123;
    v96 = v126;
    if (!v110)
    {
      v42 = 5;
      negate = 1;
      goto LABEL_211;
    }
LABEL_208:
    v103 = ++v98 < v99;
    if (v98 == v102)
    {
      v42 = 0;
      goto LABEL_210;
    }
  }
  if (!(_DWORD)v96)
  {
    negate = 1;
    if (v103)
      goto LABEL_237;
    goto LABEL_217;
  }
  v108 = &__s;
  v109 = v96;
  do
  {
    if (v108->__r_.__value_.__s.__data_[0] != v107->__r_.__value_.__s.__data_[0])
      goto LABEL_208;
    v108 = (std::string *)((char *)v108 + 1);
    v107 = (std::string *)((char *)v107 + 1);
    --v109;
  }
  while (v109);
  negate = 1;
  v42 = 5;
LABEL_210:
  if ((v96 & 0x80) != 0)
LABEL_211:
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v103)
    goto LABEL_217;
LABEL_213:
  if (v42)
  {
LABEL_237:
    v8 = 2;
    goto LABEL_238;
  }
  v8 = 2;
LABEL_68:
  v44 = *a2->__current_;
  v129.__r_.__value_.__s.__data_[0] = v44;
  if (this->__icase_)
  {
    v44 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v44);
    v129.__r_.__value_.__s.__data_[0] = v44;
  }
  v45 = this->__chars_.__begin_;
  v46 = this->__chars_.__end_ - v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    while (1)
    {
      v47 = *v45++;
      if (v47 == v44)
        break;
      if (!--v46)
        goto LABEL_75;
    }
LABEL_168:
    negate = 1;
    goto LABEL_238;
  }
LABEL_75:
  v48 = this->__neg_mask_;
  if (v48 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v44 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v44] & v48) == 0)
      v49 = (v44 == 95) & (v48 >> 7);
    else
      LOBYTE(v49) = 1;
    end = this->__neg_chars_.__end_;
    v51 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v44, end - this->__neg_chars_.__begin_);
    v52 = v51 ? v51 : end;
    if ((v49 & 1) == 0 && v52 == end)
      goto LABEL_168;
  }
  v53 = this->__ranges_.__begin_;
  v54 = this->__ranges_.__end_;
  if (v53 != v54)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
      v53 = this->__ranges_.__begin_;
      v54 = this->__ranges_.__end_;
      v55 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v55 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
    }
    v56 = (char *)v54 - (char *)v53;
    if (v56)
    {
      v124 = v8;
      v121 = negate;
      v57 = 0;
      v58 = v56 / 48;
      v119 = v55;
      if ((v55 & 0x80u) == 0)
        v59 = v55;
      else
        v59 = __s.__r_.__value_.__l.__size_;
      if ((v55 & 0x80u) == 0)
        v60 = &__s;
      else
        v60 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v58 <= 1)
        v61 = 1;
      else
        v61 = v56 / 48;
      v62 = (unsigned __int8 *)&v53->second.__r_.__value_.__r.__words[2] + 7;
      v63 = 1;
      while (1)
      {
        v64 = (char)*(v62 - 24);
        if (v64 >= 0)
          v65 = *(v62 - 24);
        else
          v65 = *(_QWORD *)(v62 - 39);
        if (v64 >= 0)
          v66 = (char *)(v62 - 47);
        else
          v66 = *(char **)(v62 - 47);
        if (v65 >= v59)
          v67 = v59;
        else
          v67 = v65;
        v68 = memcmp(v60, v66, v67);
        v69 = v59 >= v65;
        if (v68)
          v69 = v68 >= 0;
        if (v69)
        {
          v70 = (char)*v62;
          if (v70 >= 0)
            v71 = *v62;
          else
            v71 = *(_QWORD *)(v62 - 15);
          if (v70 >= 0)
            v72 = (char *)(v62 - 23);
          else
            v72 = *(char **)(v62 - 23);
          if (v59 >= v71)
            v73 = v71;
          else
            v73 = v59;
          v74 = memcmp(v72, v60, v73);
          v75 = v71 >= v59;
          if (v74)
            v75 = v74 >= 0;
          if (v75)
            break;
        }
        v63 = ++v57 < v58;
        v62 += 48;
        if (v61 == v57)
        {
          negate = v121;
          goto LABEL_131;
        }
      }
      negate = 1;
LABEL_131:
      v8 = v124;
      if (v119 < 0)
LABEL_132:
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      v63 = 0;
      if ((v55 & 0x80) != 0)
        goto LABEL_132;
    }
    if (v63)
      goto LABEL_238;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_163;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
  v76 = this->__equivalences_.__begin_;
  v77 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v78 = (char *)this->__equivalences_.__end_ - (char *)v76;
  if (!v78)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_163;
  }
  v125 = v8;
  v79 = 0;
  v80 = v78 / 24;
  v81 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v82 = __s.__r_.__value_.__l.__size_;
  if (v80 <= 1)
    v83 = 1;
  else
    v83 = v78 / 24;
  v84 = 1;
  while (2)
  {
    v85 = &v76[v79];
    v86 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    v87 = (char)v86;
    if ((v86 & 0x80u) != 0)
      v86 = v85->__r_.__value_.__l.__size_;
    if (v82 != v86)
    {
LABEL_156:
      v84 = ++v79 < v80;
      if (v79 == v83)
      {
LABEL_157:
        v8 = v125;
        if ((v77 & 0x80) == 0)
          goto LABEL_159;
        goto LABEL_158;
      }
      continue;
    }
    break;
  }
  if (v87 >= 0)
    v88 = &v76[v79];
  else
    v88 = (std::string *)v85->__r_.__value_.__r.__words[0];
  if ((v77 & 0x80) != 0)
  {
    v122 = negate;
    v91 = v80;
    v120 = v83;
    v92 = memcmp((const void *)v81, v88, *((size_t *)&v81 + 1));
    v83 = v120;
    v80 = v91;
    negate = v122;
    if (!v92)
    {
      negate = 1;
      v8 = v125;
LABEL_158:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_159;
    }
    goto LABEL_156;
  }
  if ((_DWORD)v77)
  {
    v89 = &__s;
    v90 = v77;
    while (v89->__r_.__value_.__s.__data_[0] == v88->__r_.__value_.__s.__data_[0])
    {
      v89 = (std::string *)((char *)v89 + 1);
      v88 = (std::string *)((char *)v88 + 1);
      if (!--v90)
      {
        negate = 1;
        goto LABEL_157;
      }
    }
    goto LABEL_156;
  }
  negate = 1;
  v8 = v125;
LABEL_159:
  if (!v84)
  {
LABEL_163:
    if (v129.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_238;
    v93 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v129.__r_.__value_.__s.__data_[0]] & v93) == 0)
    {
      v94 = (v93 >> 7) & 1;
      if (v129.__r_.__value_.__s.__data_[0] != 95)
        v94 = 0;
      if (v94 != 1)
        goto LABEL_238;
    }
    goto LABEL_168;
  }
LABEL_238:
  if (negate == this->__negate_)
  {
    first = 0;
    v117 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

void sub_1C2846E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1C2846F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1C2847044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C28471C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E7C66B48;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E7C66B90;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E7C66BD8;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66B90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66B90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66B48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66B48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BOOL4 v18;
  uint64_t v19;
  size_t v20;
  int v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  size_t v28;
  size_t v29;
  std::basic_regex<char> *v30;
  int v31;
  int v32;

  v3 = a2;
  if (a2 == (char *)a3)
    return v3;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v9 = (unsigned __int8 *)(a2 + 1);
  v8 = *a2;
  if ((a2 + 1 != (char *)a3 || v8 != 36)
    && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
    goto LABEL_13;
  }
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v11 == v3)
  {
    if (*v3 == 46)
    {
      v12 = (std::__node<char> *)operator new();
      v13 = a1->__end_;
      first = v13->__first_;
      v12->__vftable = (std::__node<char>_vtbl *)&off_1E7C66E60;
      v12[1].__vftable = (std::__node<char>_vtbl *)first;
      v13->__first_ = v12;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
LABEL_13:
      v11 = v3 + 1;
      goto LABEL_14;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
  }
LABEL_14:
  if (v3 == v11 && v9 != a3 && *v3 == 92)
  {
    if (2 * (v3[1] == 40))
    {
      v15 = (uint64_t)&v3[2 * (v3[1] == 40)];
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      v16 = a1->__marked_count_;
      do
      {
        v17 = (unsigned __int8 *)v15;
        v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v15, a3);
      }
      while (v17 != (unsigned __int8 *)v15);
      if (v17 == a3 || v17 + 1 == a3 || *v17 != 92 || v17[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v11 = (char *)(v17 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v16);
    }
    else
    {
      v18 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
      v19 = 2;
      if (!v18)
        v19 = 0;
      v11 = &v3[v19];
    }
  }
  if (v11 != v3)
  {
    if (v11 == (char *)a3)
      return (char *)a3;
    v20 = a1->__marked_count_ + 1;
    v21 = *v11;
    if (v21 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
      return ++v11;
    }
    if (v11 + 1 == (char *)a3 || v21 != 92 || v11[1] != 123)
      return v11;
    v23 = (unsigned __int8 *)(v11 + 2);
    v32 = 0;
    v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v23, a3, &v32);
    if (v23 == v24)
LABEL_47:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v24 != a3)
    {
      v25 = v24 + 1;
      v26 = *v24;
      if (v26 == 44)
      {
        v31 = -1;
        v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v24 + 1, a3, &v31);
        if (v27 != a3 && v27 + 1 != a3 && *v27 == 92 && v27[1] == 125)
        {
          v29 = v31;
          v28 = v32;
          if (v31 == -1)
          {
            v29 = -1;
          }
          else if (v31 < v32)
          {
            goto LABEL_47;
          }
          v11 = (char *)&v27[2 * (v27[1] == 125)];
          v30 = a1;
LABEL_54:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v28, v29, end, marked_count + 1, v20, 1);
          return v11;
        }
      }
      else if (v25 != a3 && v26 == 92 && *v25 == 125)
      {
        v11 = (char *)(v24 + 2);
        v28 = v32;
        v30 = a1;
        v29 = v32;
        goto LABEL_54;
      }
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  return v3;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v6;
  unsigned __int8 *v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  std::__owns_one_state<char> **p_end;
  unsigned int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  std::__node<char> *v35;
  std::__owns_one_state<char> *v36;
  std::__node<char> *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::basic_regex<char> *v45;
  BOOL v46;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v48;
  std::__bracket_expression<char, std::regex_traits<char>> *v49;
  std::basic_regex<char> *v50;
  std::basic_regex<char> *v51;
  BOOL v52;
  std::basic_regex<char> v54;

  if (a2 == a3)
    return a2;
  v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_33;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_33;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v22);
      v20 = 2;
      return &a2[v20];
    }
    if (v6 != 94)
      goto LABEL_33;
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E7C66908;
LABEL_22:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    v20 = 1;
    return &a2[v20];
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E7C66950;
    goto LABEL_22;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (!v8)
  {
    v8 = *v7 == 63;
    v9 = a2 + 2;
    if (v8 && v9 != a3)
    {
      v11 = (char)*v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        marked_count = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      else
      {
        if (v11 != 61)
          goto LABEL_33;
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        v13 = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      v14 = v12 + 1;
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v54.__start_);
      std::locale::~locale(&v54.__traits_.__loc_);
      if (v12 + 1 != a2)
        return v14;
    }
  }
LABEL_33:
  p_end = &a1->__end_;
  v24 = a1->__end_;
  v26 = a1->__marked_count_;
  v27 = (char)*a2;
  v28 = *a2;
  if (v27 <= 91)
  {
    v29 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_94;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v30 != a3 && *v30 == 41)
          {
            --a1->__open_count_;
            v29 = v30 + 1;
            goto LABEL_91;
          }
LABEL_94:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v38 = a1->__marked_count_;
        ++a1->__open_count_;
        v39 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v39 == a3)
          goto LABEL_94;
        v40 = v39;
        if (*v39 != 41)
          goto LABEL_94;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v38);
        --a1->__open_count_;
        v29 = v40 + 1;
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        v35 = (std::__node<char> *)operator new();
        v36 = *p_end;
        v37 = (*p_end)->__first_;
        v35->__vftable = (std::__node<char>_vtbl *)&off_1E7C66A28;
        v35[1].__vftable = (std::__node<char>_vtbl *)v37;
        v36->__first_ = v35;
        *p_end = (std::__owns_one_state<char> *)(*p_end)->__first_;
        v29 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
      default:
        if (v27 == 91)
        {
          v29 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
          goto LABEL_91;
        }
        if (v27 != 63)
          goto LABEL_56;
        goto LABEL_58;
    }
  }
  v31 = (v27 - 92);
  if (v31 > 0x21)
    goto LABEL_56;
  v29 = a2;
  if (((1 << v31) & 0x300000006) != 0)
    goto LABEL_91;
  if (v31)
  {
    if (v31 == 31)
LABEL_58:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
    v29 = a2 + 1;
    goto LABEL_91;
  }
  v29 = a2;
  if (v28 != 92)
    goto LABEL_91;
  v32 = (char *)(a2 + 1);
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v33 = *v32;
  v34 = v33 - 48;
  if (v33 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v34);
LABEL_90:
    v29 = a2 + 2;
    goto LABEL_91;
  }
  if ((v33 - 49) <= 8)
  {
    v29 = a2 + 2;
    if (a2 + 2 == a3)
    {
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v41 = *v29;
        if ((v41 - 48) > 9)
          break;
        if (v34 >= 0x19999999)
          goto LABEL_95;
        ++v29;
        v34 = v41 + 10 * v34 - 48;
        if (v29 == a3)
        {
          v29 = a3;
          break;
        }
      }
      if (!v34)
LABEL_95:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v34 > v26)
      goto LABEL_95;
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v34);
    if (v32 != (char *)v29)
      goto LABEL_91;
  }
  v42 = *v32;
  if (v42 > 99)
  {
    if (v42 == 119)
    {
      v43 = a1;
      v44 = 0;
      goto LABEL_82;
    }
    if (v42 == 115)
    {
      v51 = a1;
      v52 = 0;
      goto LABEL_88;
    }
    if (v42 != 100)
      goto LABEL_83;
    v45 = a1;
    v46 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v45, v46);
    v48 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v48;
    goto LABEL_90;
  }
  switch(v42)
  {
    case 'D':
      v45 = a1;
      v46 = 1;
      goto LABEL_80;
    case 'S':
      v51 = a1;
      v52 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v51, v52);
      v48 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      v43 = a1;
      v44 = 1;
LABEL_82:
      v49 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
      v49->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v49, 95);
      goto LABEL_90;
  }
LABEL_83:
  v50 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v32 == (char *)v50)
    v29 = a2;
  else
    v29 = (unsigned __int8 *)v50;
LABEL_91:
  v14 = a2;
  if (v29 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
  return v14;
}

void sub_1C28480EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BC5964](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2848150(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_1E7C66998;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1E7C669E0;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C669E0;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7C669E0;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::vector<std::csub_match>::value_type v23;
  char v24;
  uint64_t v25;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v23, 0, 17);
  v24 = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  v20 = v5;
  v21 = v5;
  v22 = 0;
  v23 = v19;
  v25 = v5;
  v24 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_1C2848580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66998;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7C66998;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001C289E280
    || ((v3 & 0x80000001C289E280 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x80000001C289E280)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C289E280 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

char *std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      std::set<std::string>::set[abi:ne180100](a4 + v7 + 24, (_QWORD *)(a2 + v7 + 24));
      *(_DWORD *)(a4 + v7 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C28489CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (v2 != v1)
  {
    v2 -= 56;
    std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_1C2848B50(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::string>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_1C2848BD4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(void **this)
{
  *this = &unk_1E7C678C8;
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<marrs::mrr::mr::VerbalPatternEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<marrs::mrr::mr::VerbalPatternEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 48)
  {
    std::__tree<std::string>::destroy(*(char **)(i - 16));
    std::__tree<std::string>::destroy(*(char **)(i - 40));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::__fs::filesystem::path::~path[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *marrs::mrr::mr::OrdinalFilter::OrdinalFilter(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string::size_type v3;
  _QWORD *v5;
  void *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  id v18;
  NSObject *v19;
  std::string *p_str;
  NSObject *v21;
  std::string *v22;
  NSObject *v23;
  std::string *v24;
  std::string *v25;
  void *v26;
  int v27;
  std::string::size_type v28;
  uint64_t v29;
  std::string *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  void *v37;
  void *v38;
  unint64_t v39;
  id v40;
  id v41;
  void *v42;
  int v43;
  std::string *v44;
  std::string *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  std::string::size_type *v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t **v65;
  _QWORD *v66;
  char *v67;
  std::string *v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t m;
  void *v74;
  void *v75;
  unint64_t v76;
  id v77;
  void *v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64x2_t v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t **v103;
  uint64_t **v104;
  _QWORD *v105;
  _QWORD *v106;
  std::string *v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t **v110;
  std::string::size_type v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t **v115;
  uint64_t **v116;
  uint64_t *v117;
  BOOL v118;
  char *v119;
  uint64_t *v120;
  _QWORD *v121;
  __int128 v122;
  uint64_t *v123;
  uint64_t **v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t **v128;
  uint64_t **v129;
  std::string::size_type v130;
  uint64_t **v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t **v134;
  uint64_t **v135;
  uint64_t *v136;
  BOOL v137;
  char *v138;
  uint64_t *v139;
  _QWORD *v140;
  __int128 v141;
  char *v142;
  char *v143;
  uint64_t *v144;
  uint64_t **v145;
  uint64_t **v146;
  uint64_t *v147;
  uint64_t **v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  void *exception;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  void *v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id obj;
  uint64_t i;
  uint64_t k;
  id v174;
  id v175;
  uint64_t **v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t **v179;
  uint64_t *v180;
  uint64_t v181;
  std::string v182;
  std::string v183;
  std::string v184;
  int v185;
  std::string v186;
  std::string v187;
  char *v188[3];
  char **v189;
  char *v190[2];
  char **v191;
  char *v192[2];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  int64x2_t v197;
  unint64_t v198;
  std::string *v199[2];
  _OWORD v200[3];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  _BYTE __s[24];
  unint64_t v216;
  unint64_t *v217;
  std::string __str;
  uint64_t v219;
  _BYTE v220[24];
  unint64_t v221;
  _OWORD *v222;
  std::string __p;
  char *v224[3];
  int v225;
  std::string __sz[5];
  _BYTE v227[112];
  uint64_t v228;

  v3 = (std::string::size_type)a3;
  v228 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)marrs::mrr::mr::MRFilterInterface::MRFilterInterface(a1, a3);
  *v5 = &off_1E7C67928;
  v5[21] = 0;
  v156 = v5 + 21;
  v5[20] = v5 + 21;
  v5[24] = 0;
  v5[25] = 0;
  v5[22] = 0;
  v5[23] = v5 + 24;
  v162 = v5;
  v157 = v5 + 24;
  v155 = v5 + 20;
  std::__fs::filesystem::operator/[abi:ne180100](__sz, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::filterConfigFileName);
  if (SHIBYTE(__sz[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v227, __sz[0].__r_.__value_.__l.__data_, __sz[0].__r_.__value_.__l.__size_);
  else
    *(std::string *)v227 = __sz[0];
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = v227[23];
  v8 = *(_BYTE **)v227;
  v9 = objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding");
  if (v7 >= 0)
    v10 = v227;
  else
    v10 = v8;
  objc_msgSend(v6, "stringWithCString:encoding:", v10, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithJSON:", v11);
  memset(&v186, 0, sizeof(v186));
  objc_msgSend(v12, "objectForKey:", CFSTR("version"));
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v13, "UTF8String"));
  v184 = __str;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;

  objc_msgSend(v12, "objectForKey:", CFSTR("mrType"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v185 = objc_msgSend(v14, "isEqual:", CFSTR("rule")) ^ 1;
  if ((v185 & 1) == 0)
  {
    objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("ruleConfig"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15 == 0;

    if (!v16)
    {
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("ruleConfig"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "objectForKey:", CFSTR("ordinalAssetPath"));
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v18, "UTF8String"));

      std::string::operator=(&v186, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);

    }
  }

  if ((v227[23] & 0x80000000) != 0)
    operator delete(*(void **)v227);
  if (SHIBYTE(__sz[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__sz[0].__r_.__value_.__l.__data_);
  v19 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v3 + 23) < 0)
      v3 = *(_QWORD *)v3;
    std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v227, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::assetSubDirectoryPath);
    if ((v227[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v227, *(std::string::size_type *)&v227[8]);
    else
      __str = *(std::string *)v227;
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    LODWORD(__sz[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__sz[0].__r_.__value_.__r.__words + 4) = v3;
    WORD2(__sz[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__sz[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
    _os_log_impl(&dword_1C281A000, v19, OS_LOG_TYPE_DEBUG, "[Verbal MR] Initializing Verbal rule based mention resolver for locale - %s, from path - %s", (uint8_t *)__sz, 0x16u);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((v227[23] & 0x80000000) != 0)
      operator delete(*(void **)v227);
  }
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v227, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::filterConfigFileName);
  std::ifstream::basic_ifstream(&__str);
  if ((v227[23] & 0x80000000) != 0)
    operator delete(*(void **)v227);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v183, *(_QWORD **)((char *)&__str + *(_QWORD *)(__str.__r_.__value_.__r.__words[0] - 24) + 40));
  v21 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    v22 = &v183;
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v183.__r_.__value_.__r.__words[0];
    *(_DWORD *)v227 = 136315138;
    *(_QWORD *)&v227[4] = v22;
    _os_log_impl(&dword_1C281A000, v21, OS_LOG_TYPE_DEBUG, "[Verbal MR] Loaded MR Config - %s", v227, 0xCu);
  }
  v23 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    v24 = &v184;
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v184.__r_.__value_.__r.__words[0];
    if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v186;
    else
      v25 = (std::string *)v186.__r_.__value_.__r.__words[0];
    *(_DWORD *)v227 = 67109634;
    *(_DWORD *)&v227[4] = v185;
    *(_WORD *)&v227[8] = 2080;
    *(_QWORD *)&v227[10] = v24;
    *(_WORD *)&v227[18] = 2080;
    *(_QWORD *)&v227[20] = v25;
    _os_log_impl(&dword_1C281A000, v23, OS_LOG_TYPE_DEBUG, "[Verbal MR] Verbal MR Config Parameters - mrType: %u,version: %s, ordinalAssetPath: %s", v227, 0x1Cu);
  }
  std::__fs::filesystem::operator/[abi:ne180100](__sz, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::assetSubDirectoryPath);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)&v186);
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v227, (uint64_t)__sz, (std::__fs::filesystem::path *)&__p);
  if ((v227[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)v227, *(std::string::size_type *)&v227[8]);
    if ((v227[23] & 0x80000000) != 0)
      operator delete(*(void **)v227);
  }
  else
  {
    v182 = *(std::string *)v227;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__sz[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__sz[0].__r_.__value_.__l.__data_);
  v26 = (void *)MEMORY[0x1E0CB3940];
  v27 = SHIBYTE(v182.__r_.__value_.__r.__words[2]);
  v28 = v182.__r_.__value_.__r.__words[0];
  v29 = objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding");
  if (v27 >= 0)
    v30 = &v182;
  else
    v30 = (std::string *)v28;
  objc_msgSend(v26, "stringWithCString:encoding:", v30, v29);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v160, "fileExistsAtPath:", v164) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1C3BC5934](exception, v227);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithJSON:", v164);
  v176 = &v177;
  v177 = 0;
  v180 = 0;
  v181 = 0;
  v178 = 0;
  v179 = &v180;
  v214 = 0;
  v213 = 0;
  v212 = &v213;
  v211 = 0;
  v210 = 0;
  v209 = &v210;
  v32 = v31;
  v159 = v31;
  objc_msgSend(v31, "objectForKey:", CFSTR("ordinalKeywords"));
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "objectForKey:", CFSTR("ordinalPatternTemplateMap"));
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  v207 = 0u;
  v208 = 0u;
  v205 = 0u;
  v206 = 0u;
  obj = v163;
  v165 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v205, v227, 16);
  if (v165)
  {
    v167 = *(id *)v206;
    do
    {
      for (i = 0; i != v165; ++i)
      {
        if (*(id *)v206 != v167)
          objc_enumerationMutation(obj);
        v169 = *(id *)(*((_QWORD *)&v205 + 1) + 8 * i);
        objc_msgSend(obj, "objectForKey:");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v199[1] = 0;
        v199[0] = 0;
        *(_QWORD *)&v200[0] = 0;
        v201 = 0u;
        v202 = 0u;
        v203 = 0u;
        v204 = 0u;
        v174 = v33;
        v34 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v201, __sz, 16);
        if (v34)
        {
          v35 = *(_QWORD *)v202;
          do
          {
            for (j = 0; j != v34; ++j)
            {
              if (*(_QWORD *)v202 != v35)
                objc_enumerationMutation(v174);
              v37 = *(void **)(*((_QWORD *)&v201 + 1) + 8 * j);
              objc_msgSend(v37, "objectForKey:", CFSTR("synonyms"));
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              v39 = 0;
              *((_QWORD *)&v193 + 1) = 0;
              *(_QWORD *)&v194 = 0;
              *(_QWORD *)&v193 = (char *)&v193 + 8;
              while (objc_msgSend(v38, "count") > v39)
              {
                objc_msgSend(v38, "objectAtIndexedSubscript:", v39);
                v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v40, "UTF8String"));

                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v193, &__p, (uint64_t)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                ++v39;
              }
              objc_msgSend(v37, "objectForKey:", CFSTR("semantic"));
              v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              std::string::basic_string[abi:ne180100]<0>(&v187, (char *)objc_msgSend(v41, "UTF8String"));

              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&__p, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
              else
                __p = v187;
              std::set<std::string>::set[abi:ne180100]((uint64_t)v224, &v193);
              objc_msgSend(v37, "objectForKey:", CFSTR("index"));
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "floatValue");
              v225 = v43;

              v44 = v199[1];
              if (v199[1] >= (std::string *)*(_QWORD *)&v200[0])
              {
                v46 = 0x6DB6DB6DB6DB6DB7 * (((char *)v199[1] - (char *)v199[0]) >> 3);
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) > 0x492492492492492)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&v200[0] - (unint64_t)v199[0]) >> 3) > v47)
                  v47 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&v200[0] - (unint64_t)v199[0]) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                      * ((uint64_t)(*(_QWORD *)&v200[0] - (unint64_t)v199[0]) >> 3)) >= 0x249249249249249)
                  v48 = 0x492492492492492;
                else
                  v48 = v47;
                v222 = v200;
                if (v48)
                  v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v48);
                else
                  v49 = 0;
                *(_QWORD *)v220 = v48;
                *(_QWORD *)&v220[8] = v48 + 56 * v46;
                *(_QWORD *)&v220[16] = *(_QWORD *)&v220[8];
                v221 = v48 + 56 * v49;
                std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry,marrs::mrr::mr::VerbalKeywordEntry const&>(*(std::string **)&v220[8], (__int128 *)&__p);
                v50 = *(std::string **)&v220[8];
                v45 = (std::string *)(*(_QWORD *)&v220[16] + 56);
                *(_QWORD *)&v220[16] += 56;
                v51 = v199[1];
                v52 = v199[0];
                if (v199[1] == v199[0])
                {
                  v61 = vdupq_n_s64((unint64_t)v199[1]);
                }
                else
                {
                  v53 = 0;
                  do
                  {
                    v54 = (char *)v50 + v53;
                    v55 = (char *)v51 + v53;
                    v56 = *(_OWORD *)((char *)&v51[-2] + v53 - 8);
                    *((_QWORD *)v54 - 5) = *(_QWORD *)((char *)&v51[-1] + v53 - 16);
                    *(_OWORD *)(v54 - 56) = v56;
                    *((_QWORD *)v55 - 6) = 0;
                    *((_QWORD *)v55 - 5) = 0;
                    *((_QWORD *)v55 - 7) = 0;
                    *((_QWORD *)v54 - 4) = *(_QWORD *)((char *)&v51[-1] + v53 - 8);
                    v57 = (std::string::size_type *)((char *)&v51[-1] + v53);
                    v58 = *v57;
                    v50[-1].__r_.__value_.__r.__words[v53 / 8] = *v57;
                    v59 = (uint64_t)&v50[-1] + v53;
                    v60 = *(_QWORD *)((char *)&v51->__r_.__value_.__l + v53 - 16);
                    *((_QWORD *)v54 - 2) = v60;
                    if (v60)
                    {
                      *(_QWORD *)(v58 + 16) = v59;
                      *((_QWORD *)v55 - 4) = v57;
                      *v57 = 0;
                      v51->__r_.__value_.__r.__words[v53 / 8 - 2] = 0;
                    }
                    else
                    {
                      *((_QWORD *)v54 - 4) = v59;
                    }
                    *(_DWORD *)((char *)&v50->__r_.__value_.__l + v53 - 8) = *(_DWORD *)((char *)&v51->__r_.__value_.__l
                                                                                       + v53
                                                                                       - 8);
                    v53 -= 56;
                  }
                  while ((std::string *)((char *)v51 + v53) != v52);
                  v50 = (std::string *)((char *)v50 + v53);
                  v61 = *(int64x2_t *)v199;
                  v45 = *(std::string **)&v220[16];
                }
                v199[0] = v50;
                v199[1] = v45;
                *(int64x2_t *)&v220[8] = v61;
                v62 = *(_QWORD *)&v200[0];
                *(_QWORD *)&v200[0] = v221;
                v221 = v62;
                *(_QWORD *)v220 = v61.i64[0];
                std::__split_buffer<marrs::mrr::mr::VerbalKeywordEntry>::~__split_buffer((uint64_t)v220);
              }
              else
              {
                std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry,marrs::mrr::mr::VerbalKeywordEntry const&>(v199[1], (__int128 *)&__p);
                v45 = (std::string *)((char *)v44 + 56);
              }
              v199[1] = v45;
              std::__tree<std::string>::destroy(v224[1]);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v187.__r_.__value_.__l.__data_);
              std::__tree<std::string>::destroy(*((char **)&v193 + 1));

            }
            v34 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v201, __sz, 16);
          }
          while (v34);
        }

        std::string::basic_string[abi:ne180100]<0>(v220, (char *)objc_msgSend(objc_retainAutorelease(v169), "UTF8String"));
        v63 = v213;
        v64 = &v213;
        v65 = &v213;
        if (v213)
        {
          while (1)
          {
            while (1)
            {
              v65 = (uint64_t **)v63;
              v66 = v63 + 4;
              if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v220, v63 + 4))
                break;
              v63 = *v65;
              v64 = v65;
              if (!*v65)
                goto LABEL_103;
            }
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v66, v220))
              break;
            v64 = v65 + 1;
            v63 = v65[1];
            if (!v63)
              goto LABEL_103;
          }
          v67 = (char *)v65;
        }
        else
        {
LABEL_103:
          v67 = (char *)operator new(0x50uLL);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v213;
          __p.__r_.__value_.__s.__data_[16] = 0;
          v68 = (std::string *)(v67 + 32);
          if ((v220[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v68, *(const std::string::value_type **)v220, *(std::string::size_type *)&v220[8]);
          }
          else
          {
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)v220;
            *((_QWORD *)v67 + 6) = *(_QWORD *)&v220[16];
          }
          *((_QWORD *)v67 + 8) = 0;
          *((_QWORD *)v67 + 9) = 0;
          *((_QWORD *)v67 + 7) = 0;
          __p.__r_.__value_.__s.__data_[16] = 1;
          *(_QWORD *)v67 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = v65;
          *v64 = (uint64_t *)v67;
          v69 = (uint64_t *)v67;
          if (*v212)
          {
            v212 = (uint64_t **)*v212;
            v69 = *v64;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v213, v69);
          ++v214;
          __p.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
        }
        if (v67 + 56 != (char *)v199)
          std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>((std::string **)v67 + 7, v199[0], v199[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v199[1] - (char *)v199[0]) >> 3));
        if ((v220[23] & 0x80000000) != 0)
          operator delete(*(void **)v220);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
        std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

      }
      v165 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v205, v227, 16);
    }
    while (v165);
  }

  *(_OWORD *)v199 = 0u;
  memset(v200, 0, sizeof(v200));
  v170 = v161;
  v158 = objc_msgSend(v170, "countByEnumeratingWithState:objects:count:", v199, &__p, 16);
  if (v158)
  {
    v166 = **(_QWORD **)&v200[0];
    do
    {
      for (k = 0; k != v158; ++k)
      {
        if (**(_QWORD **)&v200[0] != v166)
          objc_enumerationMutation(v170);
        v168 = (id)*((_QWORD *)&v199[1]->__r_.__value_.__l.__data_ + k);
        objc_msgSend(v170, "objectForKey:");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v197 = 0uLL;
        v198 = 0;
        v193 = 0u;
        v194 = 0u;
        v195 = 0u;
        v196 = 0u;
        v175 = v70;
        v71 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v193, v220, 16);
        if (v71)
        {
          v72 = *(_QWORD *)v194;
          do
          {
            for (m = 0; m != v71; ++m)
            {
              if (*(_QWORD *)v194 != v72)
                objc_enumerationMutation(v175);
              v74 = *(void **)(*((_QWORD *)&v193 + 1) + 8 * m);
              objc_msgSend(v74, "objectForKey:", CFSTR("patterns"));
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              v76 = 0;
              v192[0] = 0;
              v192[1] = 0;
              v191 = v192;
              while (objc_msgSend(v75, "count") > v76)
              {
                objc_msgSend(v75, "objectAtIndexedSubscript:", v76);
                v77 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                std::string::basic_string[abi:ne180100]<0>(&v187, (char *)objc_msgSend(v77, "UTF8String"));

                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v191, &v187, (uint64_t)&v187);
                if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v187.__r_.__value_.__l.__data_);
                ++v76;
              }
              objc_msgSend(v74, "objectForKey:", CFSTR("entity_types"));
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              v79 = 0;
              v190[0] = 0;
              v190[1] = 0;
              v189 = v190;
              while (objc_msgSend(v78, "count") > v79)
              {
                objc_msgSend(v78, "objectAtIndexedSubscript:", v79);
                v80 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                std::string::basic_string[abi:ne180100]<0>(&v187, (char *)objc_msgSend(v80, "UTF8String"));

                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v189, &v187, (uint64_t)&v187);
                if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v187.__r_.__value_.__l.__data_);
                ++v79;
              }
              std::set<std::string>::set[abi:ne180100]((uint64_t)&v187, &v189);
              std::set<std::string>::set[abi:ne180100]((uint64_t)v188, &v191);
              v81 = v197.i64[1];
              if (v197.i64[1] >= v198)
              {
                v83 = 0xAAAAAAAAAAAAAAABLL * ((v197.i64[1] - v197.i64[0]) >> 4);
                v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v198 - v197.i64[0]) >> 4) > v84)
                  v84 = 0x5555555555555556 * ((uint64_t)(v198 - v197.i64[0]) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198 - v197.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v85 = 0x555555555555555;
                else
                  v85 = v84;
                v217 = &v198;
                if (v85)
                  v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(v85);
                else
                  v86 = 0;
                *(_QWORD *)__s = v85;
                *(_QWORD *)&__s[8] = v85 + 48 * v83;
                *(_QWORD *)&__s[16] = *(_QWORD *)&__s[8];
                v216 = v85 + 48 * v86;
                std::allocator<marrs::mrr::mr::VerbalPatternEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry,marrs::mrr::mr::VerbalPatternEntry const&>(*(uint64_t *)&__s[8], &v187);
                v87 = *(_QWORD *)&__s[8];
                v82 = *(_QWORD *)&__s[16] + 48;
                *(_QWORD *)&__s[16] += 48;
                v88 = v197;
                if (v197.i64[1] == v197.i64[0])
                {
                  v100 = vdupq_n_s64(v197.u64[1]);
                }
                else
                {
                  v89 = 0;
                  do
                  {
                    v90 = v87 + v89;
                    *(_QWORD *)(v90 - 48) = *(_QWORD *)(v88.i64[1] + v89 - 48);
                    v91 = (uint64_t *)(v88.i64[1] + v89 - 40);
                    v92 = *v91;
                    *(_QWORD *)(v87 + v89 - 40) = *v91;
                    v93 = v87 + v89 - 40;
                    v94 = *(_QWORD *)(v88.i64[1] + v89 - 32);
                    *(_QWORD *)(v90 - 32) = v94;
                    if (v94)
                    {
                      *(_QWORD *)(v92 + 16) = v93;
                      *(_QWORD *)(v88.i64[1] + v89 - 48) = v91;
                      *v91 = 0;
                      *(_QWORD *)(v88.i64[1] + v89 - 32) = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v90 - 48) = v93;
                    }
                    v95 = v87 + v89;
                    *(_QWORD *)(v95 - 24) = *(_QWORD *)(v88.i64[1] + v89 - 24);
                    v96 = (uint64_t *)(v88.i64[1] + v89 - 16);
                    v97 = *v96;
                    *(_QWORD *)(v87 + v89 - 16) = *v96;
                    v98 = v87 + v89 - 16;
                    v99 = *(_QWORD *)(v88.i64[1] + v89 - 8);
                    *(_QWORD *)(v95 - 8) = v99;
                    if (v99)
                    {
                      *(_QWORD *)(v97 + 16) = v98;
                      *(_QWORD *)(v88.i64[1] + v89 - 24) = v96;
                      *v96 = 0;
                      *(_QWORD *)(v88.i64[1] + v89 - 8) = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v95 - 24) = v98;
                    }
                    v89 -= 48;
                  }
                  while (v88.i64[1] + v89 != v88.i64[0]);
                  v87 += v89;
                  v100 = v197;
                  v82 = *(_QWORD *)&__s[16];
                }
                v197.i64[0] = v87;
                v197.i64[1] = v82;
                *(int64x2_t *)&__s[8] = v100;
                v101 = v198;
                v198 = v216;
                v216 = v101;
                *(_QWORD *)__s = v100.i64[0];
                std::__split_buffer<marrs::mrr::mr::VerbalPatternEntry>::~__split_buffer((uint64_t)__s);
              }
              else
              {
                std::allocator<marrs::mrr::mr::VerbalPatternEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry,marrs::mrr::mr::VerbalPatternEntry const&>(v197.i64[1], &v187);
                v82 = v81 + 48;
              }
              v197.i64[1] = v82;
              std::__tree<std::string>::destroy(v188[1]);
              std::__tree<std::string>::destroy((char *)v187.__r_.__value_.__l.__size_);
              std::__tree<std::string>::destroy(v190[0]);

              std::__tree<std::string>::destroy(v192[0]);
            }
            v71 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v193, v220, 16);
          }
          while (v71);
        }

        std::string::basic_string[abi:ne180100]<0>(__s, (char *)objc_msgSend(objc_retainAutorelease(v168), "UTF8String"));
        v102 = v210;
        v103 = &v210;
        v104 = &v210;
        if (v210)
        {
          while (1)
          {
            while (1)
            {
              v104 = (uint64_t **)v102;
              v105 = v102 + 4;
              if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(__s, v102 + 4))
                break;
              v102 = *v104;
              v103 = v104;
              if (!*v104)
                goto LABEL_167;
            }
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v105, __s))
              break;
            v103 = v104 + 1;
            v102 = v104[1];
            if (!v102)
              goto LABEL_167;
          }
          v106 = v104;
        }
        else
        {
LABEL_167:
          v106 = operator new(0x50uLL);
          v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
          v187.__r_.__value_.__l.__size_ = (std::string::size_type)&v210;
          v187.__r_.__value_.__s.__data_[16] = 0;
          v107 = (std::string *)(v106 + 4);
          if ((__s[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v107, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
          }
          else
          {
            *(_OWORD *)&v107->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
            v106[6] = *(_QWORD *)&__s[16];
          }
          v106[8] = 0;
          v106[9] = 0;
          v106[7] = 0;
          v187.__r_.__value_.__s.__data_[16] = 1;
          *v106 = 0;
          v106[1] = 0;
          v106[2] = v104;
          *v103 = v106;
          v108 = v106;
          if (*v209)
          {
            v209 = (uint64_t **)*v209;
            v108 = *v103;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v210, v108);
          ++v211;
          v187.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v187);
        }
        if (v106 + 7 != (_QWORD *)&v197)
          std::vector<marrs::mrr::mr::VerbalPatternEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(v106 + 7, v197.i64[0], (_QWORD *)v197.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v197.i64[1] - v197.i64[0]) >> 4));
        if ((__s[23] & 0x80000000) != 0)
          operator delete(*(void **)__s);
        v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
        std::vector<marrs::mrr::mr::VerbalPatternEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);

      }
      v158 = objc_msgSend(v170, "countByEnumeratingWithState:objects:count:", v199, &__p, 16);
    }
    while (v158);
  }

  v109 = v212;
  if (v178)
  {
    v110 = v176;
    v176 = &v177;
    v177[2] = 0;
    v177 = 0;
    v178 = 0;
    if (v110[1])
      v111 = (std::string::size_type)v110[1];
    else
      v111 = (std::string::size_type)v110;
    v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
    v187.__r_.__value_.__l.__size_ = v111;
    v187.__r_.__value_.__r.__words[2] = v111;
    if (v111)
    {
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v111);
      v112 = &v213;
      if (v109 != &v213)
      {
        do
        {
          std::string::operator=((std::string *)(v111 + 32), (const std::string *)(v109 + 4));
          if ((uint64_t **)v111 != v109)
            std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>((std::string **)(v111 + 56), (std::string *)v109[7], (std::string *)v109[8], 0x6DB6DB6DB6DB6DB7 * (v109[8] - v109[7]));
          v113 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
          v114 = v177;
          v115 = &v177;
          v116 = &v177;
          if (v177)
          {
            do
            {
              while (1)
              {
                v116 = (uint64_t **)v114;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v113 + 4, v114 + 4))break;
                v114 = *v116;
                v115 = v116;
                if (!*v116)
                  goto LABEL_194;
              }
              v114 = v116[1];
            }
            while (v114);
            v115 = v116 + 1;
          }
LABEL_194:
          *v113 = 0;
          v113[1] = 0;
          v113[2] = (uint64_t)v116;
          *v115 = v113;
          if (*v176)
          {
            v176 = (uint64_t **)*v176;
            v113 = *v115;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v177, v113);
          ++v178;
          v187.__r_.__value_.__r.__words[2] = v187.__r_.__value_.__l.__size_;
          if (v187.__r_.__value_.__l.__size_)
            v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v187.__r_.__value_.__l.__size_);
          v117 = v109[1];
          if (v117)
          {
            do
            {
              v112 = (uint64_t **)v117;
              v117 = (uint64_t *)*v117;
            }
            while (v117);
          }
          else
          {
            do
            {
              v112 = (uint64_t **)v109[2];
              v118 = *v112 == (uint64_t *)v109;
              v109 = v112;
            }
            while (!v118);
          }
          v111 = v187.__r_.__value_.__r.__words[2];
          if (v187.__r_.__value_.__r.__words[2])
            v118 = v112 == &v213;
          else
            v118 = 1;
          v109 = v112;
        }
        while (!v118);
      }
    }
    else
    {
      v112 = v109;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v187);
    v109 = v112;
  }
  if (v109 != &v213)
  {
    do
    {
      v119 = (char *)operator new(0x50uLL);
      v120 = (uint64_t *)v119;
      v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)&v177;
      v187.__r_.__value_.__s.__data_[16] = 0;
      v121 = v119 + 32;
      if (*((char *)v109 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v119 + 32), (const std::string::value_type *)v109[4], (std::string::size_type)v109[5]);
      }
      else
      {
        v122 = *((_OWORD *)v109 + 2);
        *((_QWORD *)v119 + 6) = v109[6];
        *(_OWORD *)v121 = v122;
      }
      v120[7] = 0;
      v120[8] = 0;
      v120[9] = 0;
      std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__init_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(v120 + 7, (uint64_t)v109[7], (uint64_t)v109[8], 0x6DB6DB6DB6DB6DB7 * (v109[8] - v109[7]));
      v187.__r_.__value_.__s.__data_[16] = 1;
      v123 = v177;
      v124 = &v177;
      v125 = &v177;
      if (v177)
      {
        do
        {
          while (1)
          {
            v125 = (uint64_t **)v123;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v121, v123 + 4))
              break;
            v123 = *v125;
            v124 = v125;
            if (!*v125)
              goto LABEL_221;
          }
          v123 = v125[1];
        }
        while (v123);
        v124 = v125 + 1;
      }
LABEL_221:
      *v120 = 0;
      v120[1] = 0;
      v120[2] = (uint64_t)v125;
      *v124 = v120;
      if (*v176)
      {
        v176 = (uint64_t **)*v176;
        v120 = *v124;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v177, v120);
      ++v178;
      v187.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v187);
      v126 = v109[1];
      if (v126)
      {
        do
        {
          v127 = (uint64_t **)v126;
          v126 = (uint64_t *)*v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          v127 = (uint64_t **)v109[2];
          v118 = *v127 == (uint64_t *)v109;
          v109 = v127;
        }
        while (!v118);
      }
      v109 = v127;
    }
    while (v127 != &v213);
  }
  v128 = v209;
  if (v181)
  {
    v129 = v179;
    v179 = &v180;
    v180[2] = 0;
    v180 = 0;
    v181 = 0;
    if (v129[1])
      v130 = (std::string::size_type)v129[1];
    else
      v130 = (std::string::size_type)v129;
    v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
    v187.__r_.__value_.__l.__size_ = v130;
    v187.__r_.__value_.__r.__words[2] = v130;
    if (v130)
    {
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v130);
      v131 = &v210;
      if (v128 != &v210)
      {
        do
        {
          std::string::operator=((std::string *)(v130 + 32), (const std::string *)(v128 + 4));
          if ((uint64_t **)v130 != v128)
            std::vector<marrs::mrr::mr::VerbalPatternEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>((uint64_t *)(v130 + 56), v128[7], v128[8], 0xAAAAAAAAAAAAAAABLL * (((char *)v128[8] - (char *)v128[7]) >> 4));
          v132 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
          v133 = v180;
          v134 = &v180;
          v135 = &v180;
          if (v180)
          {
            do
            {
              while (1)
              {
                v135 = (uint64_t **)v133;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v132 + 4, v133 + 4))break;
                v133 = *v135;
                v134 = v135;
                if (!*v135)
                  goto LABEL_243;
              }
              v133 = v135[1];
            }
            while (v133);
            v134 = v135 + 1;
          }
LABEL_243:
          *v132 = 0;
          v132[1] = 0;
          v132[2] = (uint64_t)v135;
          *v134 = v132;
          if (*v179)
          {
            v179 = (uint64_t **)*v179;
            v132 = *v134;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v180, v132);
          ++v181;
          v187.__r_.__value_.__r.__words[2] = v187.__r_.__value_.__l.__size_;
          if (v187.__r_.__value_.__l.__size_)
            v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v187.__r_.__value_.__l.__size_);
          v136 = v128[1];
          if (v136)
          {
            do
            {
              v131 = (uint64_t **)v136;
              v136 = (uint64_t *)*v136;
            }
            while (v136);
          }
          else
          {
            do
            {
              v131 = (uint64_t **)v128[2];
              v118 = *v131 == (uint64_t *)v128;
              v128 = v131;
            }
            while (!v118);
          }
          v130 = v187.__r_.__value_.__r.__words[2];
          if (v187.__r_.__value_.__r.__words[2])
            v137 = v131 == &v210;
          else
            v137 = 1;
          v128 = v131;
        }
        while (!v137);
      }
    }
    else
    {
      v131 = v128;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v187);
    v128 = v131;
  }
  if (v128 != &v210)
  {
    do
    {
      v138 = (char *)operator new(0x50uLL);
      v139 = (uint64_t *)v138;
      v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)&v180;
      v187.__r_.__value_.__s.__data_[16] = 0;
      v140 = v138 + 32;
      if (*((char *)v128 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v138 + 32), (const std::string::value_type *)v128[4], (std::string::size_type)v128[5]);
      }
      else
      {
        v141 = *((_OWORD *)v128 + 2);
        *((_QWORD *)v138 + 6) = v128[6];
        *(_OWORD *)v140 = v141;
      }
      v139[7] = 0;
      v139[8] = 0;
      v139[9] = 0;
      v142 = (char *)v128[7];
      v143 = (char *)v128[8];
      *(_QWORD *)__s = v139 + 7;
      __s[8] = 0;
      if (v143 != v142)
      {
        std::vector<marrs::mrr::mr::VerbalPatternEntry>::__vallocate[abi:ne180100](v139 + 7, 0xAAAAAAAAAAAAAAABLL * ((v143 - v142) >> 4));
        v139[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>((uint64_t)(v139 + 9), v142, v143, v139[8]);
      }
      v187.__r_.__value_.__s.__data_[16] = 1;
      v144 = v180;
      v145 = &v180;
      v146 = &v180;
      if (v180)
      {
        do
        {
          while (1)
          {
            v146 = (uint64_t **)v144;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v140, v144 + 4))
              break;
            v144 = *v146;
            v145 = v146;
            if (!*v146)
              goto LABEL_272;
          }
          v144 = v146[1];
        }
        while (v144);
        v145 = v146 + 1;
      }
LABEL_272:
      *v139 = 0;
      v139[1] = 0;
      v139[2] = (uint64_t)v146;
      *v145 = v139;
      if (*v179)
      {
        v179 = (uint64_t **)*v179;
        v139 = *v145;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v180, v139);
      ++v181;
      v187.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v187);
      v147 = v128[1];
      if (v147)
      {
        do
        {
          v148 = (uint64_t **)v147;
          v147 = (uint64_t *)*v147;
        }
        while (v147);
      }
      else
      {
        do
        {
          v148 = (uint64_t **)v128[2];
          v118 = *v148 == (uint64_t *)v128;
          v128 = v148;
        }
        while (!v118);
      }
      v128 = v148;
    }
    while (v148 != &v210);
  }

  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(v210);
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(v213);

  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy((_QWORD *)v162[21]);
  v149 = v177;
  v162[20] = v176;
  v162[21] = v149;
  v150 = v178;
  v162[22] = v178;
  if (v150)
  {
    v149[2] = (uint64_t)v156;
    v176 = &v177;
    v177 = 0;
    v178 = 0;
  }
  else
  {
    *v155 = v156;
  }
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy((_QWORD *)v162[24]);
  v151 = v180;
  v162[23] = v179;
  v162[24] = v151;
  v152 = v181;
  v162[25] = v181;
  if (v152)
  {
    v151[2] = (uint64_t)v157;
    v151 = 0;
    v179 = &v180;
    v180 = 0;
    v181 = 0;
  }
  else
  {
    v162[23] = v157;
  }
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(v151);
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(v177);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                            + *(_QWORD *)(__str.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                + 24);
  MEMORY[0x1C3BC5A3C](&__str.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1C3BC5BC8](&v219);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  return v162;
}

void sub_1C284AE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, VerbalMaps *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  VerbalMaps::~VerbalMaps(a10);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(a17);
  _Unwind_Resume(a1);
}

void sub_1C284AE90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t marrs::mrr::mr::MRFilterInterface::MRFilterInterface(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = &unk_1E7C678C8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  morphun::util::ULocale::ULocale();
  return a1;
}

void sub_1C284AF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void **v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 + 31) < 0)
    operator delete(*v28);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1C3BC5A30](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1C284B094(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3BC5BC8](v1 + 424);
  _Unwind_Resume(a1);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, _QWORD *a2)
{
  std::string::value_type *v4;
  std::string::value_type v5;
  uint64_t v6;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a2 && (a2[3] != a2[4] || (*(unsigned int (**)(_QWORD *))(*a2 + 72))(a2) != -1))
  {
    v4 = (std::string::value_type *)a2[3];
    if (v4 == (std::string::value_type *)a2[4])
      v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v5 = *v4;
    std::string::push_back(this, v5);
    v6 = a2[3];
    if (v6 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v6 + 1;
  }
}

void sub_1C284B17C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1C284B198(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void VerbalMRConfig::~VerbalMRConfig(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void VerbalMaps::~VerbalMaps(VerbalMaps *this)
{
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((_QWORD **)this + 4));
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(*((_QWORD **)this + 1));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(216 * a1);
}

void std::vector<marrs::mrr::mr::MRREntity>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 216;
    v4 -= 216;
    std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    marrs::mrr::mr::MRREntity::~MRREntity((void **)(i - 216));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v6 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v7 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v7;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  result = *(__n128 *)(a2 + 192);
  *(__n128 *)(a1 + 192) = result;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  return result;
}

void VocabLoader::handle_error(VocabLoader *this, const char *a2)
{
  _QWORD *exception;
  std::string *v4;
  __int128 v5;
  _QWORD v6[3];
  std::string v7;
  __int128 v8;
  std::string::size_type v9;

  exception = __cxa_allocate_exception(0x30uLL);
  std::string::basic_string[abi:ne180100]<0>(&v7, (char *)this);
  v4 = std::string::insert(&v7, 0, "Unable to load vocab during ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9 = v4->__r_.__value_.__r.__words[2];
  v8 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v6, "QueryRewrite");
  ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&v8, (uint64_t)v6, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/preprocessing/VocabLoader.cpp", 18);
}

void sub_1C284B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v27 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v26);
  goto LABEL_10;
}

uint64_t VocabLoader::loadFrom(marrs::qr::processing::Vocab *a1, uint64_t a2, unsigned int a3)
{
  const char *v5;
  int v6;
  const char *v7;
  int v8;
  size_t st_size;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t result;
  char *v18;
  char *v19;
  stat __p;

  marrs::qr::processing::Vocab::Vocab(a1, 1, a3);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  v6 = open(v5, 0);
  v8 = v6;
  if (v6 == -1)
  {
    v18 = "open";
    goto LABEL_21;
  }
  if (fstat(v6, &__p) == -1)
  {
    v18 = "fstat";
    goto LABEL_21;
  }
  st_size = __p.st_size;
  v10 = (char *)mmap(0, __p.st_size, 1, 2, v8, 0);
  v11 = v10;
  if (v10 == (char *)-1)
  {
    v18 = "mmap";
LABEL_21:
    VocabLoader::handle_error((VocabLoader *)v18, v7);
  }
  if (v10 && st_size)
  {
    v12 = &v10[st_size];
    v13 = v10;
    do
    {
      v14 = (char *)memchr(v13, 10, v12 - v13);
      if (v14)
      {
        v15 = v14;
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, v13, v14, v14 - v13);
        marrs::qr::processing::Vocab::addWord((uint64_t)a1, (uint64_t)&__p);
        if (SHIBYTE(__p.st_gid) < 0)
          operator delete(*(void **)&__p.st_dev);
        v13 = v15 + 1;
      }
    }
    while (v13 != v12);
  }
  if (munmap(v11, st_size) == -1)
  {
    v19 = "munmap";
    goto LABEL_24;
  }
  result = close(v8);
  if ((_DWORD)result == -1)
  {
    v19 = "close";
LABEL_24:
    VocabLoader::handle_error((VocabLoader *)v19, v16);
  }
  return result;
}

void sub_1C284B6BC(_Unwind_Exception *a1)
{
  marrs::qr::processing::Vocab *v1;

  marrs::qr::processing::Vocab::~Vocab(v1);
  _Unwind_Resume(a1);
}

void sub_1C284B6D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1C284B6C8);
}

void marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin(marrs::qr::orchestration::CbRPredictorPlugin *this)
{
  marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E7C66EA8;
  *((_QWORD *)this + 26) = &unk_1E7C66ED8;
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  RepetitionPredictorBase::~RepetitionPredictorBase(this);
}

void marrs::qr::orchestration::CbRPredictorPlugin::predict(marrs::qr::orchestration::CbRPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, int8x16_t *a3@<X8>)
{
  marrs::qr::orchestration::CbRPredictorPlugin *v4;
  unsigned __int8 ***v6;
  _DWORD *v7;
  _DWORD *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 **v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int *v34;
  int *v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  unint64_t v41;
  uint64_t *v42;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  int v51;
  std::string::size_type v52;
  unint64_t v53;
  unsigned __int8 **v54;
  unsigned __int8 **v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  __int128 *v61;
  __int128 *v62;
  unint64_t v63;
  std::string::size_type v65;
  std::string::size_type size;
  __int128 v67;
  unsigned __int8 **v68;
  std::string::size_type v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int v73;
  unsigned __int8 *v74;
  uint64_t v75;
  __int128 *v76;
  __int128 *v77;
  int FirstAndLastIndices;
  int v79;
  char v80;
  unint64_t v81;
  unsigned __int8 **v82;
  unint64_t v83;
  char *v84;
  unsigned __int8 **v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  int v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned __int8 **v99;
  char *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  int v104;
  char *v105;
  unsigned __int8 **v106;
  unsigned __int8 **v107;
  unsigned __int8 ***v108;
  uint64_t *v109;
  unsigned __int8 ***v110;
  unsigned __int8 ***v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 ***v115;
  unsigned __int8 ***v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  unsigned __int8 ***v135;
  unsigned __int8 ***v136;
  unsigned __int8 **v137;
  BOOL v138;
  unsigned __int8 ***v139;
  unsigned __int8 ***v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  std::string::size_type v151;
  _DWORD **v152;
  _DWORD **v153;
  __int128 v154;
  float v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  float v159;
  uint64_t v160;
  _BYTE *v161;
  _BYTE *v162;
  _BYTE *v163;
  float *v164;
  float *v165;
  float v166;
  float v167;
  float v168;
  float v169;
  uint64_t v170;
  float v171;
  float v172;
  float v173;
  NSObject *v174;
  _QWORD *exception;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t *v181;
  unint64_t v182;
  _BYTE *v183;
  uint64_t *v184;
  uint64_t *v185;
  int8x16_t *v186;
  unsigned __int8 **v187;
  _BYTE *v188;
  unsigned __int8 **v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t *v199;
  void *v200;
  uint64_t *v201;
  marrs::qr::orchestration::CbRPredictorPlugin *v202;
  unsigned __int8 **v203;
  void *v204;
  unsigned __int8 ***v205;
  uint64_t *v206;
  unsigned __int8 **v207;
  unsigned __int8 **v208;
  char *v209;
  char *v210;
  __int128 *v211;
  __int128 *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  float v216;
  void *v217;
  int *v218;
  int correction_type;
  std::string v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  _BYTE *v228;
  uint64_t v229;
  void *v230;
  _BYTE *v231;
  uint64_t v232;
  void *v233;
  _BYTE *v234;
  uint64_t v235;
  void *v236;
  _BYTE *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  float v242[4];
  void *__src;
  _BYTE *v244;
  void *__p;
  char v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  std::string v251;
  std::string v252;
  std::string v253;
  std::string v254;
  uint64_t v255;

  v4 = this;
  v255 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int8 ***)((char *)this + 184);
  (*(void (**)(marrs::qr::orchestration::CbRPredictorPlugin *))(*(_QWORD *)this + 24))(this);
  toRepetitionPredictorInput((uint64_t)&v207, (uint64_t)a2, v6);
  v225 = 0;
  v224 = 0;
  v226 = 0;
  v222 = 0;
  v221 = 0;
  v223 = 0;
  createPronunciationsVector((uint64_t)v4 + 88, &v211, (uint64_t *)&v224);
  createPronunciationsVector((uint64_t)v4 + 88, &v212, &v221);
  RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)&v215);
  v7 = (_DWORD *)*((_QWORD *)v4 + 34);
  v8 = (_DWORD *)*((_QWORD *)v4 + 35);
  v202 = v4;
  if (v7 == v8)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      if ((unint64_t)v9 >= v10)
      {
        v13 = (v9 - v11) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v10 - (_QWORD)v11) >> 1 > v14)
          v14 = (uint64_t)(v10 - (_QWORD)v11) >> 1;
        if (v10 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v15);
        else
          v16 = 0;
        v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)v17 = *v7;
        v12 = v17 + 4;
        while (v9 != v11)
        {
          v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        v10 = v15 + 4 * v16;
        if (v11)
          operator delete(v11);
        v11 = v17;
      }
      else
      {
        *(_DWORD *)v9 = *v7;
        v12 = v9 + 4;
      }
      ++v7;
      v9 = v12;
    }
    while (v7 != v8);
  }
  if (v225 - (_QWORD)v224 != (char *)v208 - (char *)v207 || v222 - v221 != v210 - v209)
  {
    v215 = 1065353216;
    v216 = 0.0;
    goto LABEL_50;
  }
  v19 = *((_DWORD *)v4 + 28);
  v249 = 0;
  v250 = 0;
  v247 = 0;
  v248 = 0;
  v215 = 1065353216;
  v216 = 0.0;
  v218 = (int *)v217;
  if (v208 == v207 || v210 == v209)
    goto LABEL_50;
  RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v242);
  v181 = (uint64_t *)((char *)v4 + 8);
  RuleBasedRepetitionPredictor::Predict((uint64_t *)&v207, (uint64_t *)&v209, &v224, &v221, v19, (uint64_t *)v4 + 1, (uint64_t)v242);
  v240 = 0;
  v239 = 0;
  v241 = 0;
  RepetitionPredictorResult::AugmentationToWords((uint64_t)v242, &v207, &v209, &v239);
  v21 = v207;
  v20 = v208;
  v22 = ((char *)v208 - (char *)v207) / 24;
  v186 = a3;
  v180 = v19;
  if (v208 == v207)
  {
    v23 = ((char *)v208 - (char *)v207) / 24;
    v25 = v23;
    goto LABEL_134;
  }
  v203 = v208;
  v23 = 0;
  v24 = v239;
  v25 = 0xAAAAAAAAAAAAAAABLL * ((v240 - v239) >> 3);
  if (v22 <= 1)
    v26 = 1;
  else
    v26 = ((char *)v208 - (char *)v207) / 24;
  while (1)
  {
    if (v23 == v25)
    {
      v23 = v25;
      goto LABEL_113;
    }
    v27 = &v21[3 * v23];
    v28 = (unsigned __int8 **)(v24 + 24 * v23);
    v29 = *((unsigned __int8 *)v27 + 23);
    if ((v29 & 0x80u) == 0)
      v30 = (unsigned __int8 *)*((unsigned __int8 *)v27 + 23);
    else
      v30 = v27[1];
    v31 = (unsigned __int8 *)*((unsigned __int8 *)v28 + 23);
    v32 = (char)v31;
    if ((char)v31 < 0)
      v31 = v28[1];
    if (v30 != v31)
      goto LABEL_113;
    if (v32 >= 0)
      v33 = (unsigned __int8 *)(v24 + 24 * v23);
    else
      v33 = *v28;
    if ((v29 & 0x80) != 0)
    {
      if (memcmp(*v27, v33, (size_t)v27[1]))
        goto LABEL_113;
      goto LABEL_47;
    }
    if (*((_BYTE *)v27 + 23))
      break;
LABEL_47:
    if (++v23 == v26)
    {
      v23 = v22;
      goto LABEL_113;
    }
  }
  while (*(unsigned __int8 *)v27 == *v33)
  {
    v27 = (unsigned __int8 **)((char *)v27 + 1);
    ++v33;
    if (!--v29)
      goto LABEL_47;
  }
LABEL_113:
  v53 = 0;
  while (v53 != v25)
  {
    v54 = &(&v21[3 * v22])[3 * ~v53];
    v55 = (unsigned __int8 **)(v24 + 24 * (v25 + ~v53));
    v56 = *((unsigned __int8 *)v54 + 23);
    if ((v56 & 0x80u) == 0)
      v57 = (unsigned __int8 *)*((unsigned __int8 *)v54 + 23);
    else
      v57 = v54[1];
    v58 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
    v59 = (char)v58;
    if ((char)v58 < 0)
      v58 = v55[1];
    if (v57 != v58)
      goto LABEL_132;
    if (v59 >= 0)
      v60 = (unsigned __int8 *)(v24 + 24 * (v25 + ~v53));
    else
      v60 = *v55;
    if ((v56 & 0x80) != 0)
    {
      if (memcmp(*v54, v60, (size_t)v54[1]))
        goto LABEL_132;
    }
    else if (*((_BYTE *)v54 + 23))
    {
      while (*(unsigned __int8 *)v54 == *v60)
      {
        v54 = (unsigned __int8 **)((char *)v54 + 1);
        ++v60;
        if (!--v56)
          goto LABEL_130;
      }
LABEL_132:
      v25 = v53;
      break;
    }
LABEL_130:
    if (++v53 == v26)
    {
      v25 = v22;
      break;
    }
  }
  a3 = v186;
  v20 = v203;
LABEL_134:
  memset(&v254, 0, sizeof(v254));
  memset(&v253, 0, sizeof(v253));
  if (v23 < v22 && v23 < v22 - v25)
  {
    v61 = (__int128 *)&v21[3 * v23];
    v62 = (__int128 *)&v20[-3 * v25];
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
    while (v61 != v62)
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v252, v61);
      v61 = (__int128 *)((char *)v61 + 24);
    }
  }
  v63 = 0xAAAAAAAAAAAAAAABLL * ((v240 - v239) >> 3);
  if (v23 < v63 && v23 < v63 - v25)
  {
    v76 = (__int128 *)(v239 + 24 * v23);
    v77 = (__int128 *)(v240 - 24 * v25);
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
    while (v76 != v77)
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v252, v76);
      v76 = (__int128 *)((char *)v76 + 24);
    }
  }
  memset(&v252, 0, sizeof(v252));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v252, (__int128 *)v253.__r_.__value_.__l.__data_, (__int128 *)v253.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v253.__r_.__value_.__l.__size_ - v253.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v251, 0, sizeof(v251));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v251, (__int128 *)v209, (__int128 *)v210, 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3));
  size = v251.__r_.__value_.__l.__size_;
  v65 = v251.__r_.__value_.__r.__words[0];
  if (v251.__r_.__value_.__r.__words[0] == v251.__r_.__value_.__l.__size_)
  {
    v236 = &v251;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    v236 = &v252;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    goto LABEL_197;
  }
  v67 = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
  while ((_QWORD)v67 != *((_QWORD *)&v67 + 1))
  {
    v68 = (unsigned __int8 **)v67;
    v69 = v65;
    while (v69 != size)
    {
      v70 = *(unsigned __int8 *)(v69 + 23);
      if ((v70 & 0x80u) == 0)
        v71 = (unsigned __int8 *)*(unsigned __int8 *)(v69 + 23);
      else
        v71 = *(unsigned __int8 **)(v69 + 8);
      v72 = (unsigned __int8 *)*((unsigned __int8 *)v68 + 23);
      v73 = (char)v72;
      if ((char)v72 < 0)
        v72 = v68[1];
      if (v71 != v72)
        break;
      if (v73 >= 0)
        v74 = (unsigned __int8 *)v68;
      else
        v74 = *v68;
      if ((v70 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v69, v74, *(_QWORD *)(v69 + 8)))
          break;
      }
      else if (*(_BYTE *)(v69 + 23))
      {
        v75 = 0;
        while (*(unsigned __int8 *)(v69 + v75) == v74[v75])
        {
          if (v70 == ++v75)
            goto LABEL_165;
        }
        break;
      }
LABEL_165:
      v69 += 24;
      v68 += 3;
      if (v68 == *((unsigned __int8 ***)&v67 + 1))
        goto LABEL_172;
    }
    v65 += 24;
    if (v65 == size)
    {
      v236 = &v251;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
      v236 = &v252;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
      if ((_QWORD)v67 == *((_QWORD *)&v67 + 1))
        goto LABEL_173;
LABEL_197:
      v80 = 0;
      goto LABEL_226;
    }
  }
LABEL_172:
  v236 = &v251;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
  v236 = &v252;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_173:
  FirstAndLastIndices = getFirstAndLastIndices(v207, v208, (uint64_t)v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_, &v250, &v249);
  v79 = getFirstAndLastIndices((unsigned __int8 **)v209, (unsigned __int8 **)v210, (uint64_t)v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_, &v248, &v247);
  v80 = 0;
  v4 = v202;
  if (!FirstAndLastIndices || !v79)
    goto LABEL_227;
  v81 = v250;
  v82 = v207;
  if (v250)
  {
    v83 = v248;
    if (v248)
    {
      v84 = v209;
      do
      {
        v85 = &v82[3 * v81 - 3];
        v86 = v83 - 1;
        v87 = &v84[24 * v83 - 24];
        v88 = *((unsigned __int8 *)v85 + 23);
        if ((v88 & 0x80u) == 0)
          v89 = (unsigned __int8 *)*((unsigned __int8 *)v85 + 23);
        else
          v89 = v85[1];
        v90 = (unsigned __int8 *)v87[23];
        v91 = (char)v90;
        if ((char)v90 < 0)
          v90 = (unsigned __int8 *)*((_QWORD *)v87 + 1);
        if (v89 != v90)
          break;
        if (v91 >= 0)
          v92 = &v84[24 * v83 - 24];
        else
          v92 = *(char **)v87;
        if ((v88 & 0x80) != 0)
        {
          if (memcmp(*v85, v92, (size_t)v85[1]))
            break;
        }
        else if (*((_BYTE *)v85 + 23))
        {
          while (*(unsigned __int8 *)v85 == *v92)
          {
            v85 = (unsigned __int8 **)((char *)v85 + 1);
            ++v92;
            if (!--v88)
              goto LABEL_193;
          }
          break;
        }
LABEL_193:
        if (v81 == 1)
        {
          --v83;
          v81 = 0;
          break;
        }
        --v83;
        --v81;
      }
      while (v86);
      v250 = v81;
      v248 = v83;
    }
  }
  v93 = 0xAAAAAAAAAAAAAAABLL * (v208 - v82) - 1;
  v94 = v249;
  if (v249 >= v93)
    goto LABEL_225;
  v95 = v209;
  v96 = v247;
  if (v247 <= 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3) - 1)
    v97 = 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3) - 1;
  else
    v97 = v247;
  v200 = (void *)(v247 + ~v249 - 0x5555555555555555 * (v208 - v82));
  v204 = (void *)(v249 + v97 - v247);
  while (2)
  {
    if (v96 == v97)
    {
      v96 = v97;
      v94 = (unint64_t)v204;
      goto LABEL_224;
    }
    v98 = v94 + 1;
    v99 = &v82[3 * v94 + 3];
    v100 = &v95[24 * v96 + 24];
    v101 = *((unsigned __int8 *)v99 + 23);
    if ((v101 & 0x80u) == 0)
      v102 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
    else
      v102 = v99[1];
    v103 = (unsigned __int8 *)v100[23];
    v104 = (char)v103;
    if ((char)v103 < 0)
      v103 = (unsigned __int8 *)*((_QWORD *)v100 + 1);
    if (v102 != v103)
      goto LABEL_224;
    if (v104 >= 0)
      v105 = &v95[24 * v96 + 24];
    else
      v105 = *(char **)v100;
    if ((v101 & 0x80) != 0)
    {
      if (memcmp(*v99, v105, (size_t)v99[1]))
        goto LABEL_224;
LABEL_221:
      ++v94;
      ++v96;
      if (v98 == v93)
      {
        v96 = (unint64_t)v200;
        v94 = v93;
        goto LABEL_224;
      }
      continue;
    }
    break;
  }
  if (!*((_BYTE *)v99 + 23))
    goto LABEL_221;
  while (*(unsigned __int8 *)v99 == *v105)
  {
    v99 = (unsigned __int8 **)((char *)v99 + 1);
    ++v105;
    if (!--v101)
      goto LABEL_221;
  }
LABEL_224:
  v249 = v94;
  v247 = v96;
LABEL_225:
  v80 = 1;
  a3 = v186;
LABEL_226:
  v4 = v202;
LABEL_227:
  v236 = &v253;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
  if ((v80 & 1) != 0)
  {
    v179 = v250;
    v106 = &v207[3 * v250];
    v178 = v249;
    v187 = &v207[3 * v249];
    v177 = v248;
    v107 = (unsigned __int8 **)&v209[24 * v248];
    v176 = v247;
    v189 = (unsigned __int8 **)&v209[24 * v247];
    v192 = (uint64_t)v106;
    v194 = (uint64_t)(v189 + 3);
    if (v187 + 3 != v106)
    {
      v108 = 0;
      v182 = 0;
      v198 = 0;
      v201 = 0;
      v109 = 0;
      v196 = 0;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      while (1)
      {
        v205 = v110;
        v113 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v107, v194, v106);
        if (v113 == v194)
        {
          if ((unint64_t)v108 >= v182)
          {
            v121 = v108 - v110;
            v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 61)
              goto LABEL_358;
            if ((uint64_t)(v182 - (_QWORD)v205) >> 2 > v122)
              v122 = (uint64_t)(v182 - (_QWORD)v205) >> 2;
            if (v182 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
              v123 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v123 = v122;
            if (v123)
              v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v123);
            else
              v124 = 0;
            v135 = (unsigned __int8 ***)(v123 + 8 * v121);
            *v135 = v106;
            v136 = v135 + 1;
            if (v108 != v205)
            {
              do
              {
                v137 = *--v108;
                *--v135 = v137;
              }
              while (v108 != v205);
              v108 = v205;
            }
            v110 = v135;
            v182 = v123 + 8 * v124;
            if (v108)
              operator delete(v108);
            v116 = v136;
            goto LABEL_284;
          }
          *v108 = v106;
          v116 = v108 + 1;
        }
        else
        {
          v114 = v113;
          if ((unint64_t)v111 >= v198)
          {
            v117 = ((char *)v111 - (char *)v112) >> 3;
            v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 61)
              goto LABEL_358;
            if ((uint64_t)(v198 - (_QWORD)v112) >> 2 > v118)
              v118 = (uint64_t)(v198 - (_QWORD)v112) >> 2;
            if (v198 - (unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
              v119 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v119 = v118;
            if (v119)
              v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v119);
            else
              v120 = 0;
            v125 = (uint64_t *)(v119 + 8 * v117);
            *v125 = (uint64_t)v106;
            v115 = (unsigned __int8 ***)(v125 + 1);
            if (v111 != (unsigned __int8 ***)v112)
            {
              do
              {
                v126 = (uint64_t)*--v111;
                *--v125 = v126;
              }
              while (v111 != (unsigned __int8 ***)v112);
              v111 = (unsigned __int8 ***)v112;
            }
            v112 = v125;
            v198 = v119 + 8 * v120;
            if (v111)
              operator delete(v111);
          }
          else
          {
            *v111 = v106;
            v115 = v111 + 1;
          }
          if ((unint64_t)v109 >= v196)
          {
            v127 = v109 - v201;
            v128 = v127 + 1;
            v184 = v112;
            if ((unint64_t)(v127 + 1) >> 61)
LABEL_358:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v196 - (_QWORD)v201) >> 2 > v128)
              v128 = (uint64_t)(v196 - (_QWORD)v201) >> 2;
            if (v196 - (unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
              v129 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v129 = v128;
            if (v129)
              v129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v129);
            else
              v130 = 0;
            v131 = (uint64_t *)(v129 + 8 * v127);
            *v131 = v114;
            v132 = v131 + 1;
            if (v109 == v201)
            {
              v110 = v205;
              v133 = v201;
            }
            else
            {
              v110 = v205;
              v133 = v201;
              do
              {
                v134 = *--v109;
                *--v131 = v134;
              }
              while (v109 != v201);
            }
            v196 = v129 + 8 * v130;
            if (v133)
              operator delete(v133);
            v116 = v108;
            v201 = v131;
            v109 = v132;
            v111 = v115;
            v112 = v184;
            goto LABEL_284;
          }
          *v109++ = v114;
          v116 = v108;
          v111 = v115;
        }
        v110 = v205;
LABEL_284:
        v108 = v116;
        v138 = v106 == v187;
        v106 += 3;
        if (v138)
          goto LABEL_288;
      }
    }
    v116 = 0;
    v201 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
LABEL_288:
    v206 = (uint64_t *)v110;
    v185 = v112;
    v199 = (uint64_t *)v116;
    v139 = 0;
    if ((unsigned __int8 **)v194 != v107)
    {
      v140 = 0;
      v141 = 0;
      while (1)
      {
        if ((unsigned __int8 **)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v192, (uint64_t)(v187 + 3), v107) != v187 + 3)goto LABEL_293;
        if ((unint64_t)v140 < v141)
          break;
        v143 = v140 - v139;
        v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 61)
          goto LABEL_358;
        if ((uint64_t)(v141 - (_QWORD)v139) >> 2 > v144)
          v144 = (uint64_t)(v141 - (_QWORD)v139) >> 2;
        if (v141 - (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v145 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v145 = v144;
        if (v145)
          v145 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v145);
        else
          v146 = 0;
        v147 = (uint64_t *)(v145 + 8 * v143);
        *v147 = (uint64_t)v107;
        v142 = v147 + 1;
        while (v140 != v139)
        {
          v148 = (uint64_t)*--v140;
          *--v147 = v148;
        }
        v141 = v145 + 8 * v146;
        if (v139)
          operator delete(v139);
        v139 = (unsigned __int8 ***)v147;
        v112 = v185;
LABEL_294:
        v140 = (unsigned __int8 ***)v142;
        v138 = v107 == v189;
        v107 += 3;
        if (v138)
          goto LABEL_313;
      }
      *v140++ = v107;
LABEL_293:
      v142 = (uint64_t *)v140;
      goto LABEL_294;
    }
    v142 = 0;
LABEL_313:
    memset(&v252, 0, sizeof(v252));
    memset(&v251, 0, sizeof(v251));
    v149 = &v224[24 * v179];
    v150 = &v224[24 * v178];
    if (v150 + 24 == v149)
    {
      v151 = 0;
    }
    else
    {
      do
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)v149, *((_DWORD **)v149 + 1), (uint64_t)&v252);
        v138 = v149 == v150;
        v149 += 24;
      }
      while (!v138);
      v151 = v251.__r_.__value_.__r.__words[0];
    }
    v152 = (_DWORD **)(v221 + 24 * v177);
    v153 = (_DWORD **)(v221 + 24 * v176);
    v251.__r_.__value_.__l.__size_ = v151;
    if (v153 + 3 != v152)
    {
      do
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(*v152, v152[1], (uint64_t)&v251);
        v138 = v152 == v153;
        v152 += 3;
      }
      while (!v138);
    }
    v154 = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
    v155 = rawEditDistance<unsigned int>(&v252, (uint64_t)&v251, v181, v180);
    if ((unint64_t)((uint64_t)(*((_QWORD *)&v154 + 1) - v154) >> 2) <= 1)
      v156 = 1;
    else
      v156 = (uint64_t)(*((_QWORD *)&v154 + 1) - v154) >> 2;
    v237 = 0;
    v236 = 0;
    v238 = 0;
    v234 = 0;
    v233 = 0;
    v235 = 0;
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v224, &v254, v206, v199, &v236);
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v221, &v254, (uint64_t *)v139, v142, &v233);
    v157 = v237;
    v158 = v236;
    v159 = rawEditDistance<unsigned int>(&v236, (uint64_t)&v233, v181, v180);
    if ((unint64_t)((v157 - v158) >> 2) <= 1)
      v160 = 1;
    else
      v160 = (v157 - v158) >> 2;
    v231 = 0;
    v230 = 0;
    v232 = 0;
    v228 = 0;
    v227 = 0;
    v229 = 0;
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v224, &v254, v112, (uint64_t *)v111, &v230);
    v195 = v160;
    v197 = v156;
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v221, &v254, v201, v109, &v227);
    v191 = v230;
    v193 = v231;
    v188 = v227;
    v190 = v228;
    v183 = v237;
    v161 = v236;
    v162 = v234;
    v163 = v233;
    v164 = (float *)operator new(0x18uLL);
    v165 = v164;
    v166 = (double)(unint64_t)(v109 - v201 + (((char *)v111 - (char *)v185) >> 3)) * 0.5;
    v167 = (double)(unint64_t)(((v162 - v163) >> 2) + ((v183 - v161) >> 2)) * 0.5;
    v168 = (double)(unint64_t)((((char *)v142 - (char *)v139) >> 3) + v199 - v206) * 0.5;
    *v164 = v155 / (float)v197;
    v164[1] = v159 / (float)v195;
    v169 = (double)(unint64_t)(((v190 - v188) >> 2) + ((v193 - v191) >> 2)) * 0.5;
    v164[2] = v166;
    v164[3] = v168;
    v164[4] = v169;
    v164[5] = v167;
    if (v12 - v11 != 28)
    {
      v174 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v254.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v254.__r_.__value_.__r.__words + 4) = (std::string::size_type)"calculateProability";
        _os_log_error_impl(&dword_1C281A000, v174, OS_LOG_TYPE_ERROR, "%s [ERR]: Feature vector size should match size of model", (uint8_t *)&v254, 0xCu);
      }
      exception = __cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(&v254, "Feature vector size should match size of model");
      std::string::basic_string[abi:ne180100]<0>(&v253, "QueryRewrite");
      InferenceError::InferenceError(exception, (uint64_t)&v254, (uint64_t)&v253, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/LogisticRegressionPredictor.cpp", 181);
    }
    v170 = 0;
    v171 = 0.0;
    a3 = v186;
    do
    {
      v171 = v171 + (float)(v164[v170] * *(float *)&v11[v170 * 4]);
      ++v170;
    }
    while (v170 != 6);
    v172 = 1.0 / (expf(-(float)(v171 + *((float *)v12 - 1))) + 1.0);
    *(float *)&v215 = 1.0 - v172;
    if (v179 || (v173 = 0.0, v178 != 0xAAAAAAAAAAAAAAABLL * (v208 - v207) - 1))
    {
      v173 = v172;
      v172 = 0.0;
    }
    *((float *)&v215 + 1) = v173;
    v216 = v172;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v217, (char *)__src, (uint64_t)v244, (v244 - (_BYTE *)__src) >> 2);
    operator delete(v165);
    v4 = v202;
    if (v227)
    {
      v228 = v227;
      operator delete(v227);
    }
    if (v230)
    {
      v231 = v230;
      operator delete(v230);
    }
    if (v233)
    {
      v234 = v233;
      operator delete(v233);
    }
    if (v236)
    {
      v237 = v236;
      operator delete(v236);
    }
    if (v251.__r_.__value_.__r.__words[0])
    {
      v251.__r_.__value_.__l.__size_ = v251.__r_.__value_.__r.__words[0];
      operator delete(v251.__r_.__value_.__l.__data_);
    }
    if (v252.__r_.__value_.__r.__words[0])
    {
      v252.__r_.__value_.__l.__size_ = v252.__r_.__value_.__r.__words[0];
      operator delete(v252.__r_.__value_.__l.__data_);
    }
    if (v139)
      operator delete(v139);
    if (v201)
      operator delete(v201);
    if (v206)
      operator delete(v206);
    if (v185)
      operator delete(v185);
  }
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  if (v246 < 0)
    operator delete(__p);
  if (__src)
  {
    v244 = __src;
    operator delete(__src);
  }
LABEL_50:
  RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v242, (const RepetitionPredictorResult *)&v215);
  if (*((char *)v4 + 271) < 0)
    std::string::__init_copy_ctor_external(&v253, *((const std::string::value_type **)v4 + 31), *((_QWORD *)v4 + 32));
  else
    v253 = *(std::string *)((char *)v4 + 248);
  correction_type = get_correction_type(v242, &v253);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  if (v246 < 0)
    operator delete(__p);
  if (__src)
  {
    v244 = __src;
    operator delete(__src);
  }
  if (correction_type == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v252, "");
    v34 = (int *)v217;
    v35 = v218;
    if (v217 != v218)
    {
      v36 = -1431655765 * ((unint64_t)((char *)v208 - (char *)v207) >> 3);
      v37 = ~v36;
      do
      {
        v38 = *v34;
        if (!(_DWORD)v38)
          break;
        v39 = &v209[24 * (int)v38 + 24 * v37];
        if ((int)v38 <= v36)
          v39 = (char *)&v207[3 * v38 - 3];
        if (v39[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
        }
        else
        {
          v40 = *(_OWORD *)v39;
          v254.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
          *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v40;
        }
        v41 = (int)v38 + v37;
        if ((int)v38 <= v36)
          v41 = v38 - 1;
        v42 = &v214;
        if ((int)v38 <= v36)
          v42 = &v213;
        if (((*(_QWORD *)(*v42 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
          std::string::push_back(&v254, 32);
        if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v254;
        else
          v43 = (std::string *)v254.__r_.__value_.__r.__words[0];
        if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = HIBYTE(v254.__r_.__value_.__r.__words[2]);
        else
          v44 = v254.__r_.__value_.__l.__size_;
        std::string::append(&v252, (const std::string::value_type *)v43, v44);
        if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v254.__r_.__value_.__l.__data_);
        ++v34;
      }
      while (v34 != v35);
    }
    v45 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
    v46 = &v252;
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v45 = v252.__r_.__value_.__l.__size_;
      v46 = (std::string *)v252.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      v47 = v46;
      while (v47->__r_.__value_.__s.__data_[0] == 32)
      {
        v47 = (std::string *)((char *)v47 + 1);
        if (!--v45)
        {
          v48 = -1;
          goto LABEL_92;
        }
      }
      v48 = (char *)v47 - (char *)v46;
    }
    else
    {
      v48 = -1;
    }
LABEL_92:
    std::string::erase(&v252, 0, v48);
    v49 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v252;
    else
      v50 = (std::string *)v252.__r_.__value_.__r.__words[0];
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = v252.__r_.__value_.__l.__size_;
    while (v49)
    {
      v51 = v50->__r_.__value_.__s.__data_[--v49];
      if (v51 != 32)
      {
        v52 = v49 + 1;
        goto LABEL_101;
      }
    }
    v52 = 0;
LABEL_101:
    std::string::erase(&v252, v52, 0xFFFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v220.__r_.__value_.__l.__data_);
    v220 = v252;
  }
  if (v11)
    operator delete(v11);
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  toQRResponse(a3, (uint64_t)&v215);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v217)
  {
    v218 = (int *)v217;
    operator delete(v217);
  }
  RepetitionPredictorInput::~RepetitionPredictorInput((void **)&v207);
}

void sub_1C284CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  uint64_t v69;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  if (*(char *)(v69 - 153) < 0)
    operator delete(*(void **)(v69 - 176));
  if (*(char *)(v69 - 121) < 0)
  {
    operator delete(*(void **)(v69 - 144));
    if ((v68 & 1) == 0)
    {
LABEL_8:
      operator delete(v66);
      v71 = (void *)STACK[0x238];
      if (STACK[0x238])
      {
        STACK[0x240] = (unint64_t)v71;
        operator delete(v71);
      }
      v72 = (void *)STACK[0x250];
      if (STACK[0x250])
      {
        STACK[0x258] = (unint64_t)v72;
        operator delete(v72);
      }
      v73 = (void *)STACK[0x268];
      if (STACK[0x268])
      {
        STACK[0x270] = (unint64_t)v73;
        operator delete(v73);
      }
      v74 = (void *)STACK[0x280];
      if (STACK[0x280])
      {
        STACK[0x288] = (unint64_t)v74;
        operator delete(v74);
      }
      v75 = *(void **)(v69 - 224);
      if (v75)
      {
        *(_QWORD *)(v69 - 216) = v75;
        operator delete(v75);
      }
      v76 = *(void **)(v69 - 200);
      if (v76)
      {
        *(_QWORD *)(v69 - 192) = v76;
        operator delete(v76);
      }
      if (v65)
        operator delete(v65);
      if (a26)
        operator delete(a26);
      if (a28)
        operator delete(a28);
      if (a17)
        operator delete(a17);
      *(_QWORD *)(v69 - 144) = &STACK[0x298];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 144));
      RepetitionPredictorResult::~RepetitionPredictorResult((void **)&STACK[0x2B0]);
      if (v64)
        operator delete(v64);
      RepetitionPredictorResult::~RepetitionPredictorResult(&a64);
      *(_QWORD *)(v69 - 144) = &STACK[0x208];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 144));
      *(_QWORD *)(v69 - 144) = &STACK[0x220];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 144));
      RepetitionPredictorInput::~RepetitionPredictorInput(&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v68)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v67);
  goto LABEL_8;
}

uint64_t marrs::qr::orchestration::CbRPredictorPlugin::validate(marrs::qr::orchestration::CbRPredictorPlugin *this, const QRRequest *a2)
{
  return 1;
}

void `non-virtual thunk to'marrs::qr::orchestration::CbRPredictorPlugin::predict(marrs::qr::orchestration::CbRPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, int8x16_t *a3@<X8>)
{
  marrs::qr::orchestration::CbRPredictorPlugin::predict((marrs::qr::orchestration::CbRPredictorPlugin *)((char *)this - 208), a2, a3);
}

void `non-virtual thunk to'marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin(marrs::qr::orchestration::CbRPredictorPlugin *this)
{
  marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin((marrs::qr::orchestration::CbRPredictorPlugin *)((char *)this - 208));
}

{
  marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin((marrs::qr::orchestration::CbRPredictorPlugin *)((char *)this - 208));
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t `non-virtual thunk to'marrs::qr::orchestration::CbRPredictorPlugin::validate(marrs::qr::orchestration::CbRPredictorPlugin *this, const QRRequest *a2)
{
  return 1;
}

void RepetitionPredictorBase::~RepetitionPredictorBase(RepetitionPredictorBase *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &off_1E7C67068;
  v7 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 21));
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*((void ***)this + 17));
  v2 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    operator delete(v2);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,float>>,0>((uint64_t)(v3 + 2));
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    operator delete(v5);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__deallocate_node(*((_QWORD **)this + 3));
  v6 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    operator delete(v6);
}

{
  RepetitionPredictorBase::~RepetitionPredictorBase(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,float>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void RepetitionPredictorResult::~RepetitionPredictorResult(void **this)
{
  void *v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

void RepetitionPredictorResult::RepetitionPredictorResult(RepetitionPredictorResult *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = 1065353216;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  MEMORY[0x1C3BC59A0]((char *)this + 48, "");
  *((_BYTE *)this + 72) = 0;
}

void sub_1C284D13C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](a1 + 128);
  return a1;
}

void std::vector<MDMentionOverride>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<MDMentionOverride>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MDMentionOverride>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MDMentionOverride>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<MDMentionOverride>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<MDMentionOverride>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<MDMentionOverride>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MDMentionOverride>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

char *std::vector<MDMentionOverride>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MDMentionOverride>,MDMentionOverride*,MDMentionOverride*,MDMentionOverride*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *v4 = *((_QWORD *)v6 - 1);
      v8 = (std::string *)(v4 + 1);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        v4[3] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 4;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MDMentionOverride>,MDMentionOverride*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1C284D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MDMentionOverride>,MDMentionOverride*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MDMentionOverride>,MDMentionOverride*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 32;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void std::vector<MDMentionOverride>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<MDMentionOverride>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void MRRuleConfig::~MRRuleConfig(void **this)
{
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void MRModelConfig::~MRModelConfig(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void MRConfig::~MRConfig(void **this)
{
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>(char *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t **v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;

  if (*((_QWORD *)a1 + 2))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v26 = a1;
    v27 = v9;
    v28 = v9;
    if (v9)
    {
      v27 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          if (v9 != v10)
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v9 + 56, (char *)v10[7], v10[8], (v10[8] - v10[7]) >> 2);
          v11 = *v8;
          v12 = (uint64_t **)(a1 + 8);
          v13 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v28 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_16;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v28);
          v9 = v27;
          v28 = v27;
          if (v27)
            v27 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v27);
          v14 = (uint64_t *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v26);
  }
  if (a2 != a3)
  {
    v16 = (uint64_t **)(a1 + 8);
    do
    {
      v17 = (char *)operator new(0x50uLL);
      v18 = (uint64_t *)v17;
      v26 = v17;
      v27 = (uint64_t *)(a1 + 8);
      LOBYTE(v28) = 0;
      v19 = v17 + 32;
      if (*((char *)a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v17 + 32), (const std::string::value_type *)a2[4], a2[5]);
      }
      else
      {
        v20 = *((_OWORD *)a2 + 2);
        *((_QWORD *)v17 + 6) = a2[6];
        *(_OWORD *)v19 = v20;
      }
      v18[7] = 0;
      v18[8] = 0;
      v18[9] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v18 + 7, (const void *)a2[7], a2[8], (a2[8] - a2[7]) >> 2);
      LOBYTE(v28) = 1;
      v21 = *v16;
      v22 = (uint64_t **)(a1 + 8);
      v23 = (uint64_t **)(a1 + 8);
      if (*v16)
      {
        do
        {
          while (1)
          {
            v22 = (uint64_t **)v21;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v19, v21 + 4))
              break;
            v21 = *v22;
            v23 = v22;
            if (!*v22)
              goto LABEL_37;
          }
          v21 = v22[1];
        }
        while (v21);
        v23 = v22 + 1;
      }
LABEL_37:
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v22, v23, v18);
      v26 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v26);
      v24 = (uint64_t *)a2[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)a2[2];
          v15 = *v25 == (_QWORD)a2;
          a2 = v25;
        }
        while (!v15);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
}

void sub_1C284DA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  const char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  const char *v11;
  uint64_t **v12;
  uint64_t *result;
  uint64_t *v14;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const char *)a2;
    else
      v7 = *(const char **)a2;
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v10 = v5[4];
        v8 = v5 + 4;
        v9 = (uint64_t *)v10;
        v11 = (const char *)(*((char *)v8 + 23) >= 0 ? v8 : v9);
        if ((strcasecmp(v7, v11) & 0x80000000) == 0)
          break;
        v5 = *v6;
        v12 = v6;
        if (!*v6)
          goto LABEL_15;
      }
      result = (uint64_t *)strcasecmp(v11, v7);
      if ((result & 0x80000000) == 0)
        break;
      v12 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_15;
    }
  }
  else
  {
    v12 = (uint64_t **)(a1 + 8);
LABEL_15:
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)&v14, a1, a3);
    return std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v6, v12, v14);
  }
  return result;
}

uint64_t **std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v19 = (uint64_t *)result;
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v20 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__find_leaf_high((uint64_t)v5, &v18, (uint64_t)(v21 + 4));
          std::__tree<std::string>::__insert_node_at(v5, v18, leaf_high, v10);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v13 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)&v19, (uint64_t)v5, (uint64_t)(a2 + 4));
      v14 = v19;
      v15 = (uint64_t **)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__find_leaf_high((uint64_t)v5, &v18, (uint64_t)(v19 + 4));
      result = (uint64_t **)std::__tree<std::string>::__insert_node_at(v5, v18, v15, v14);
      v16 = (_QWORD *)a2[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)a2[2];
          v13 = *v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_1C284DE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void VisTextMatchKeywords::~VisTextMatchKeywords(char **this)
{
  std::__tree<std::string>::destroy(this[7]);
  std::__tree<std::string>::destroy(this[4]);
  std::__tree<std::string>::destroy(this[1]);
}

_QWORD *std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) >= 0)
      v6 = (const char *)a3;
    else
      v6 = *(const char **)a3;
    do
    {
      while (1)
      {
        v5 = v4;
        v9 = (_QWORD *)v4[4];
        v7 = v4 + 4;
        v8 = v9;
        v10 = (const char *)(*((char *)v7 + 23) >= 0 ? v7 : v8);
        if ((strcasecmp(v6, v10) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_14;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_14:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy((char *)v2);
  }
  return a1;
}

void std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__construct_node<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_1C284E028(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v5 = (uint64_t)result;
  if (result[2])
  {
    v6 = *result;
    v8 = (uint64_t **)(result + 1);
    v7 = result[1];
    *result = result + 1;
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v9 = *(uint64_t **)(v6 + 8);
    else
      v9 = (uint64_t *)v6;
    v22 = result;
    v23 = v9;
    v24 = v9;
    if (v9)
    {
      v23 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          v11 = *v8;
          v12 = (uint64_t **)(v5 + 8);
          v13 = (uint64_t **)(v5 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v24 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_14;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::string>::__insert_node_at((uint64_t **)v5, (uint64_t)v12, v13, v24);
          v9 = v23;
          v24 = v23;
          if (v23)
            v23 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          v14 = (_QWORD *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (_QWORD *)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v22, v5, (uint64_t)(a2 + 4));
      v16 = v22;
      v17 = *(uint64_t **)(v5 + 8);
      v18 = (uint64_t **)(v5 + 8);
      v19 = (uint64_t **)(v5 + 8);
      if (v17)
      {
        do
        {
          while (1)
          {
            v18 = (uint64_t **)v17;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v16 + 4, v17 + 4))
              break;
            v17 = *v18;
            v19 = v18;
            if (!*v18)
              goto LABEL_31;
          }
          v17 = v18[1];
        }
        while (v17);
        v19 = v18 + 1;
      }
LABEL_31:
      result = std::__tree<std::string>::__insert_node_at((uint64_t **)v5, (uint64_t)v18, v19, v16);
      v20 = (_QWORD *)a2[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)a2[2];
          v15 = *v21 == (_QWORD)a2;
          a2 = v21;
        }
        while (!v15);
      }
      a2 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

void sub_1C284E248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;

  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v7, (uint64_t)a1, a3);
    return std::__tree<std::string>::__insert_node_at(a1, v8, v6, v7);
  }
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C284E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1[1]);
    std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

float std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry,marrs::mrr::mr::VerbalKeywordEntry const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  float result;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t)&this[1], (_QWORD *)a2 + 3);
  result = *((float *)a2 + 12);
  *(float *)&this[2].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_1C284E464(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(std::string **a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t i;

  v9 = (uint64_t)(a1 + 2);
  v8 = (uint64_t)a1[2];
  v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v10)
    {
      v11 = (uint64_t)a1[1];
      v12 = *a1;
      if ((std::string *)v11 != v10)
      {
        do
        {
          v11 -= 56;
          std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](v11);
        }
        while ((std::string *)v11 != v10);
        v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= a4)
      v14 = a4;
    if (v13 >= 0x249249249249249)
      v15 = 0x492492492492492;
    else
      v15 = v14;
    std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__vallocate[abi:ne180100](a1, v15);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(v9, (uint64_t)__str, (uint64_t)a3, (uint64_t)a1[1]);
    goto LABEL_16;
  }
  if (0x6DB6DB6DB6DB6DB7 * (((char *)a1[1] - (char *)v10) >> 3) < a4)
  {
    v17 = (std::string *)((char *)__str + 8 * (((char *)a1[1] - (char *)v10) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *>(__str, v17, v10);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(v9, (uint64_t)v17, (uint64_t)a3, (uint64_t)a1[1]);
LABEL_16:
    a1[1] = (std::string *)v16;
    return;
  }
  v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *>(__str, a3, v10);
  for (i = (uint64_t)a1[1];
        (std::string *)i != v18;
        std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](i))
  {
    i -= 56;
  }
  a1[1] = v18;
}

void sub_1C284E634(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C284E63C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::VerbalKeywordEntry::~VerbalKeywordEntry(char **this)
{
  std::__tree<std::string>::destroy(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::allocator<marrs::mrr::mr::VerbalPatternEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry,marrs::mrr::mr::VerbalPatternEntry const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = std::set<std::string>::set[abi:ne180100](a1, a2);
  return std::set<std::string>::set[abi:ne180100](v3 + 24, a2 + 3);
}

void sub_1C284E6AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(*(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::vector<marrs::mrr::mr::VerbalPatternEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *v16;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (_QWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    std::vector<marrs::mrr::mr::VerbalPatternEntry>::__vallocate[abi:ne180100](a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(v9, a2, a3, a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 4) < a4)
  {
    v15 = (_QWORD **)&a2[2 * ((a1[1] - (uint64_t)v10) >> 4)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *>((uint64_t)a2, v15, v10);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(v9, v15, a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *>((uint64_t)a2, (_QWORD **)a3, v10);
  std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (uint64_t)v16);
}

void sub_1C284E818(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C284E820(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

char *std::vector<marrs::mrr::mr::VerbalPatternEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::set<std::string>::set[abi:ne180100](v4, v6);
      std::set<std::string>::set[abi:ne180100](v4 + 24, v6 + 3);
      v6 += 6;
      v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C284E99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::__tree<std::string>::destroy(*(char **)(v9 + 8));
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    for (i = *v3; v4 != i; v4 -= 48)
    {
      std::__tree<std::string>::destroy(*(char **)(v4 - 16));
      std::__tree<std::string>::destroy(*(char **)(v4 - 40));
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *>(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  _QWORD **v5;
  _QWORD *v6;

  if ((_QWORD **)a1 != a2)
  {
    v5 = (_QWORD **)a1;
    v6 = (_QWORD *)(a1 + 32);
    do
    {
      if (v5 != a3)
      {
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a3, *v5, v6 - 3);
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a3 + 3, v5[3], v6);
      }
      v5 += 6;
      a3 += 6;
      v6 += 6;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__split_buffer<marrs::mrr::mr::VerbalPatternEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__tree<std::string>::destroy(*(char **)(i - 16));
    std::__tree<std::string>::destroy(*(char **)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  std::string::size_type *p_size;

  if (__str != a2)
  {
    v5 = __str;
    p_size = &__str[1].__r_.__value_.__l.__size_;
    do
    {
      std::string::operator=(this, v5);
      if (this != v5)
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(this[1].__r_.__value_.__r.__words, (_QWORD *)v5[1].__r_.__value_.__l.__data_, p_size);
      LODWORD(this[2].__r_.__value_.__l.__data_) = v5[2].__r_.__value_.__l.__data_;
      this = (std::string *)((char *)this + 56);
      p_size += 7;
      v5 = (std::string *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__split_buffer<marrs::mrr::mr::VerbalKeywordEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void TypedJson<CcqrConfig>::fromJson(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  void *v32;
  int v33;
  int v34;
  void *v35;
  int v36;
  int v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  float v42;
  float v43;
  void *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  _QWORD *exception;
  _QWORD *v50;
  void *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  _QWORD v72[3];
  _BYTE v73[32];

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v3, objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding"));
  v71 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v68, "fileExistsAtPath:", v71) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(v72, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)v73, (uint64_t)v72, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/TypedJson.mm", 618);
  }
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithJSON:", v71);
  v67 = v4;
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("preprocessing"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useRewritten"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useRewritten"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "BOOLValue");

  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useNonSignificantNonWhitespace"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useNonSignificantNonWhitespace"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v10, "BOOLValue");

  }
  else
  {
    v65 = 0;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useWhitespace"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useWhitespace"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = objc_msgSend(v12, "BOOLValue");

  }
  else
  {
    v64 = 0;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useSiriResponse"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("useSiriResponse"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = objc_msgSend(v14, "BOOLValue");

  }
  else
  {
    v62 = 1;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("contextSize"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("contextSize"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = objc_msgSend(v16, "intValue");

  }
  else
  {
    v61 = 2;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("maxCharNum"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("maxCharNum"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = objc_msgSend(v18, "intValue");

  }
  else
  {
    v60 = 34;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("charPaddingIndex"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("charPaddingIndex"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v20, "unsignedIntValue");

  }
  else
  {
    v59 = 56;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("maxTokenNum"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("maxTokenNum"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = objc_msgSend(v22, "unsignedIntValue");

  }
  else
  {
    v58 = 200;
  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("embeddingModule"));
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "objectForKeyedSubscript:", CFSTR("modelPrecision"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = objc_msgSend(v23, "intValue");
  objc_msgSend(v66, "objectForKeyedSubscript:", CFSTR("tokenEmbeddingDimension"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(v24, "intValue");

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("aneEmbeddingModule"));
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "objectForKeyedSubscript:", CFSTR("modelPrecision"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend(v25, "intValue");
  objc_msgSend(v70, "objectForKeyedSubscript:", CFSTR("aneEmbeddingDimension"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(v26, "intValue");

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("encoderModule"));
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("modelPrecision"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = objc_msgSend(v27, "intValue");

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("decoderModule"));
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v69, "objectForKeyedSubscript:", CFSTR("modelPrecision"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = objc_msgSend(v28, "intValue");
  objc_msgSend(v69, "objectForKeyedSubscript:", CFSTR("numDecoderSteps"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "unsignedIntValue");

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("scoringModule"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("cbrDecisionThreshold"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "floatValue");
  v34 = v33;
  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("aerDecisionThreshold"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "floatValue");
  v37 = v36;

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("parityTest"));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "objectForKeyedSubscript:", CFSTR("ignoreClassifier"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "BOOLValue");

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("asrConfig"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("curConfMin"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "floatValue");
  v43 = v42;
  objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("prevConfMax"));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "floatValue");
  v46 = v45;

  if (!v5 || !v31 || !v69)
  {
    v50 = __cxa_allocate_exception(0x30uLL);
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(v72, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(v50, (uint64_t)v73, (uint64_t)v72, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/TypedJson.mm", 679);
  }
  *(_BYTE *)a1 = v8;
  v47 = 0.0;
  if (v40)
    v47 = v43;
  *(_BYTE *)(a1 + 1) = v65;
  v48 = 1000.0;
  *(_BYTE *)(a1 + 2) = v64;
  if (v40)
    v48 = v46;
  *(_BYTE *)(a1 + 3) = v62;
  *(_DWORD *)(a1 + 4) = v61;
  *(_DWORD *)(a1 + 8) = v60;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = v59;
  *(_QWORD *)(a1 + 24) = v58;
  *(_DWORD *)(a1 + 32) = v57;
  *(_DWORD *)(a1 + 36) = v56;
  *(_DWORD *)(a1 + 40) = v55;
  *(_DWORD *)(a1 + 44) = v54;
  *(_DWORD *)(a1 + 48) = v53;
  *(_DWORD *)(a1 + 56) = v52;
  *(_QWORD *)(a1 + 64) = v30;
  *(_DWORD *)(a1 + 72) = v34;
  *(_DWORD *)(a1 + 76) = v37;
  *(_BYTE *)(a1 + 80) = v39;
  *(float *)(a1 + 84) = v47;
  *(float *)(a1 + 88) = v48;

}

void sub_1C284F3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,id a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  if (a31 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 121) < 0)
  {
    operator delete(*(void **)(v36 - 144));
    if ((v31 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void marrs::qr::inference_engine::LSTMEncoderModule::setUtteranceTokensEmbeddings(marrs::qr::inference_engine::LSTMEncoderModule *this, marrs::inference_engine::InferenceTensor *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "embedded_seq");
  marrs::inference_engine::EspressoModule::setInput((uint64_t)this, (uint64_t)__p, (uint64_t)a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C284F688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BaseException::BaseException(uint64_t a1, __int128 *a2, uint64_t a3, char *a4, int a5)
{
  __int128 v10;
  const char *v11;
  NSObject *v12;
  unsigned __int8 v13;
  std::string::size_type size;
  std::string *p_str;
  int v16;
  int v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v28;
  std::string v29;
  std::string v30;
  uint64_t v31;
  uint64_t v32;
  void *(*v33)(uint64_t);
  void *v34;
  __int128 *v35;
  std::string __p;
  int v37;
  std::string v38;
  std::string v39;
  std::string __str;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E7C679F0;
  *(_QWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a5;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v10;
  }
  if (*(char *)(a3 + 23) >= 0)
    v11 = (const char *)a3;
  else
    v11 = *(const char **)a3;
  v12 = os_log_create("com.apple.siri", v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0)
      v28 = (const std::string::value_type *)a2;
    else
      v28 = *(const std::string::value_type **)a2;
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
    _os_log_error_impl(&dword_1C281A000, v12, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__str, 0xCu);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, a4);
  v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v38 = __str;
LABEL_11:
    size = v13;
    p_str = &__str;
    goto LABEL_12;
  }
  std::string::__init_copy_ctor_external(&v38, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_11;
  size = __str.__r_.__value_.__l.__size_;
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_12:
  while (size)
  {
    v16 = p_str->__r_.__value_.__s.__data_[--size];
    if (v16 == 92 || v16 == 47)
    {
      if (size != -1)
      {
        std::string::basic_string(&v39, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v30);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v38 = v39;
        v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      break;
    }
  }
  if ((v13 & 0x80) != 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v31 = MEMORY[0x1E0C809B0];
  v32 = 1174405120;
  v33 = ___ZN13BaseExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_PKci_block_invoke;
  v34 = &__block_descriptor_tmp_253;
  v35 = a2;
  v17 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    __p = v38;
  v37 = a5;
  std::string::basic_string[abi:ne180100]<0>(&v29, "com.apple.siri.marrs");
  v18 = std::string::append(&v29, ".");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = *(char *)(a3 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a3;
  else
    v21 = *(const std::string::value_type **)a3;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a3 + 23);
  else
    v22 = *(_QWORD *)(a3 + 8);
  v23 = std::string::append(&v30, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v39, ".exception");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  analytics_send_event_lazy();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
      return a1;
LABEL_42:
    operator delete(v38.__r_.__value_.__l.__data_);
    return a1;
  }
  if (v17 < 0)
    goto LABEL_42;
  return a1;
}

void sub_1C284FA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void **v40;

  operator delete(__p);
  if (*(char *)(v39 + 47) < 0)
    operator delete(*v40);
  std::exception::~exception((std::exception *)v39);
  _Unwind_Resume(a1);
}

void sub_1C284FBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this)
{
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  *(_QWORD *)this = &off_1E7C66F80;
  *((_QWORD *)this + 26) = &unk_1E7C66FB0;
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 240);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  RepetitionPredictorBase::~RepetitionPredictorBase(this);
}

void marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::predict(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  double *v12;
  double *v13;
  unint64_t v14;
  QRUtterance *var0;
  unint64_t v16;
  unint64_t var1;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v29;
  double v30;
  double *v31;
  double *v32;
  double *v33;
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *v34;
  uint64_t v35;
  _QWORD *v36;
  double v37;
  double v38;
  double *v39;
  double *v40;
  double v41;
  double v42;
  std::string *v43;
  __int128 v44;
  NSObject *v45;
  unint64_t v46;
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 **v52;
  unsigned __int8 *i;
  unint64_t v54;
  NSObject *v55;
  double *v60;
  double *v61;
  double v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  float v67;
  float v68;
  NSObject *v69;
  float32x2_t v71;
  float v72;
  double v73;
  float v74;
  float v75;
  float v76;
  NSObject *v77;
  NSObject *v78;
  void **v79;
  std::string *v80;
  __int128 v81;
  _BYTE *v82;
  _QWORD *exception;
  float32x2_t v84;
  os_signpost_id_t v85;
  uint64_t v86;
  NSObject *v87;
  unint64_t v88;
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  double *v94;
  double *v95;
  uint64_t v96;
  _QWORD v97[3];
  uint64_t v98[3];
  uint64_t v99[3];
  std::string v100;
  std::string v101;
  __int128 v102;
  std::string v103;
  _BYTE v104[12];
  void *v105;
  void *v106;
  uint64_t v107;
  int correction_type;
  std::string v109;
  char v110;
  int8x16_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  int v115;
  uint8_t buf[8];
  __int128 *v117;
  void *(*v118)(uint64_t);
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 *v122;
  __int128 *v123;
  const void *v124;
  uint64_t v125;
  const void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::string __s;
  std::string v131;
  __int128 v132;
  std::string v133;
  void *v134[2];
  char v135;
  std::string v136;
  std::string::size_type v137;
  void *v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint8_t v146[4];
  const char *v147;
  __int16 v148;
  void **v149;
  _BYTE v150[12];
  void *v151;
  void *v152;
  void *__p;
  char v154;
  std::string v155;
  uint64_t v156;
  void *v157;
  char v158;
  std::string v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::once[0] != -1)
    dispatch_once(marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::once, &__block_literal_global);
  v6 = marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::rdLogContext;
  v7 = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::rdLogContext);
  v8 = v7 - 1;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Predict", "", buf, 2u);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 56) = 4;
  v9 = (*(uint64_t (**)(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *, const QRRequest *))(*(_QWORD *)this + 24))(this, a2);
  v10 = MEMORY[0x1E0C809B0];
  v11 = (_QWORD *)&loc_1C289D000;
  if ((v9 & 1) != 0)
  {
    v88 = v7 - 1;
    v89 = this;
    v85 = v7;
    v86 = a3;
    v87 = v6;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    var0 = a2->var1.var0->var0.var0;
    v16 = var0[1].var0.var0;
    var1 = var0[1].var0.var1;
    do
    {
      v18 = *(_QWORD *)(v16 + 96);
      if ((unint64_t)v12 >= v14)
      {
        v19 = v12 - v13;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v14 - (_QWORD)v13) >> 2 > v20)
          v20 = (uint64_t)(v14 - (_QWORD)v13) >> 2;
        if (v14 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
        else
          v22 = 0;
        v23 = (double *)(v21 + 8 * v19);
        *(_QWORD *)v23 = v18;
        v24 = v23 + 1;
        while (v12 != v13)
        {
          v25 = *((_QWORD *)v12-- - 1);
          *((_QWORD *)v23-- - 1) = v25;
        }
        v14 = v21 + 8 * v22;
        if (v13)
          operator delete(v13);
        v13 = v23;
        v12 = v24;
      }
      else
      {
        *(_QWORD *)v12++ = v18;
      }
      v16 += 160;
    }
    while (v16 != var1);
    v26 = v13 + 1;
    v27 = *v13;
    if (v13 == v12 || v26 == v12)
    {
      v29 = *v13;
      v34 = v89;
      v35 = MEMORY[0x1E0C809B0];
      v36 = (_QWORD *)&loc_1C289D000;
    }
    else
    {
      v30 = *v13;
      v31 = v13 + 1;
      v32 = v13;
      v33 = v13 + 1;
      v34 = v89;
      v35 = MEMORY[0x1E0C809B0];
      v36 = &loc_1C289D000;
      do
      {
        v37 = *v33++;
        v38 = v37;
        if (v37 < v30)
        {
          v30 = v38;
          v32 = v31;
        }
        v31 = v33;
      }
      while (v33 != v12);
      v29 = *v32;
      v39 = v13;
      v40 = v13 + 1;
      do
      {
        v41 = *v40++;
        v42 = v41;
        if (v27 < v41)
        {
          v27 = v42;
          v39 = v26;
        }
        v26 = v40;
      }
      while (v40 != v12);
      v27 = *v39;
    }
    std::string::basic_string[abi:ne180100]<0>(&v136, "com.apple.siri.marrs");
    v43 = std::string::append(&v136, ".QueryRewrite.RepetitionDetector.Input");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)buf = v35;
    v117 = (__int128 *)v36[475];
    v118 = ___ZNK5marrs2qr13orchestration36CorrectionsRepetitionPredictorPlugin23doCoreAnalyticsForInputERKNS1_9QRRequestE_block_invoke;
    *(_QWORD *)&v119 = &__block_descriptor_tmp_290;
    *((_QWORD *)&v119 + 1) = v34;
    *(double *)&v120 = v29;
    *((double *)&v120 + 1) = v27;
    analytics_send_event_lazy();
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    operator delete(v13);
    toRepetitionPredictorInput((uint64_t)buf, (uint64_t)a2, (unsigned __int8 ***)v34 + 23);
    memset(&v90, 0, sizeof(v90));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v90, *(__int128 **)buf, v117, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v117 - *(_QWORD *)buf) >> 3));
    memset(&v91, 0, sizeof(v91));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v91, (__int128 *)v119, *((__int128 **)&v119 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v119 + 1) - v119) >> 3));
    memset(&v92, 0, sizeof(v92));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v92, *((__int128 **)&v120 + 1), (__int128 *)v121, 0xAAAAAAAAAAAAAAABLL * ((v121 - *((_QWORD *)&v120 + 1)) >> 3));
    memset(&v93, 0, sizeof(v93));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v93, v122, v123, 0xAAAAAAAAAAAAAAABLL * (((char *)v123 - (char *)v122) >> 3));
    v94 = 0;
    v95 = 0;
    v96 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v94, v124, v125, (v125 - (uint64_t)v124) >> 3);
    memset(v97, 0, sizeof(v97));
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v97, v126, v127, (v127 - (uint64_t)v126) >> 3);
    std::vector<BOOL>::vector(v98, (uint64_t)&v128);
    std::vector<BOOL>::vector(v99, (uint64_t)&v129);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v100, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v100 = __s;
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v101, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
    else
      v101 = v131;
    v102 = v132;
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v103, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
    else
      v103 = v133;
    v45 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v155.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v155.__r_.__value_.__r.__words + 4) = (std::string::size_type)"predict";
      _os_log_debug_impl(&dword_1C281A000, v45, OS_LOG_TYPE_DEBUG, "%s Start Repetition Detection Prediction", (uint8_t *)&v155, 0xCu);
    }
    if (*((_QWORD *)&v102 + 1) - (_QWORD)v102 <= 0x7530uLL)
    {
      v46 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v101);
      v47 = *(int8x8_t *)((char *)v89 + 248);
      if (v47)
      {
        v48 = v46;
        v49 = (uint8x8_t)vcnt_s8(v47);
        v49.i16[0] = vaddlv_u8(v49);
        v50 = v49.u32[0];
        if (v49.u32[0] > 1uLL)
        {
          v51 = v46;
          if (v46 >= *(_QWORD *)&v47)
            v51 = v46 % *(_QWORD *)&v47;
        }
        else
        {
          v51 = (*(_QWORD *)&v47 - 1) & v46;
        }
        v52 = *(unsigned __int8 ***)(*((_QWORD *)v89 + 30) + 8 * v51);
        if (v52)
        {
          for (i = *v52; i; i = *(unsigned __int8 **)i)
          {
            v54 = *((_QWORD *)i + 1);
            if (v48 == v54)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&v101))
                goto LABEL_57;
            }
            else
            {
              if (v50 > 1)
              {
                if (v54 >= *(_QWORD *)&v47)
                  v54 %= *(_QWORD *)&v47;
              }
              else
              {
                v54 &= *(_QWORD *)&v47 - 1;
              }
              if (v54 != v51)
                break;
            }
          }
        }
      }
      this = v89;
      v55 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        LODWORD(v155.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v155.__r_.__value_.__r.__words + 4) = (std::string::size_type)"predict";
        _os_log_impl(&dword_1C281A000, v55, OS_LOG_TYPE_INFO, "%s #RD invoking rule-based predictor", (uint8_t *)&v155, 0xCu);
      }
      __asm { FMOV            V0.2S, #1.0 }
      _D0.i32[1] = *((_DWORD *)v89 + 70);
      v84 = _D0;
      v144 = 0;
      v143 = 0;
      v145 = 0;
      v141 = 0;
      v140 = 0;
      v142 = 0;
      createPronunciationsVector((uint64_t)v89 + 88, (__int128 **)&v92, (uint64_t *)&v143);
      createPronunciationsVector((uint64_t)v89 + 88, (__int128 **)&v93, &v140);
      v7 = v85;
      a3 = v86;
      v8 = v88;
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)&v155);
      v10 = MEMORY[0x1E0C809B0];
      v11 = &loc_1C289D000;
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)&v136);
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v104);
      if (v144 - (_QWORD)v143 == v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]
        && v141 - v140 == v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0])
      {
        RuleBasedRepetitionPredictor::Predict((uint64_t *)&v90, (uint64_t *)&v91, &v143, &v140, *((_DWORD *)v89 + 28), (uint64_t *)v89 + 1, (uint64_t)&v155);
        v60 = v94;
        if (v94 != v95)
        {
          v61 = v94 + 1;
          if (v94 + 1 != v95)
          {
            v62 = *v94;
            v63 = v94 + 1;
            do
            {
              v64 = *v63++;
              v65 = v64;
              if (v64 < v62)
              {
                v62 = v65;
                v60 = v61;
              }
              v61 = v63;
            }
            while (v63 != v95);
          }
        }
        LODWORD(v136.__r_.__value_.__l.__data_) = 1065353216;
        v66 = 1.0;
        if (v60 != v95)
        {
          v67 = *v60;
          if (v67 > 1000.0 || v67 < 0.0)
          {
            exception = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(v150, "Received an ASR confidence larger than 1000.");
            std::string::basic_string[abi:ne180100]<0>(&v159, "QueryRewrite");
            InferenceError::InferenceError(exception, (uint64_t)v150, (uint64_t)&v159, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/AsrConfidenceThresholdPredictor.cpp", 21);
          }
          *(float *)&v136.__r_.__value_.__l.__data_ = v67 / 1000.0;
          v66 = (float)(v67 / 1000.0);
        }
        v68 = (1.0 - v66) * 0.5;
        *((float *)v136.__r_.__value_.__r.__words + 1) = v68;
        *(float *)&v136.__r_.__value_.__r.__words[1] = v68;
        v137 = v136.__r_.__value_.__r.__words[2];
        v69 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
        {
          RepetitionPredictorResult::get_model_output_string((RepetitionPredictorResult *)v150, (uint64_t)&v136);
          v82 = SHIBYTE(v151) >= 0 ? v150 : *(_BYTE **)v150;
          LODWORD(v159.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Predict";
          WORD2(v159.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v159.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v82;
          _os_log_debug_impl(&dword_1C281A000, v69, OS_LOG_TYPE_DEBUG, "%s AsrConfidenceThresholdPredictor Result: %s", (uint8_t *)&v159, 0x16u);
          if (SHIBYTE(v151) < 0)
            operator delete(*(void **)v150);
        }
        __asm { FMOV            V1.2D, #1.0 }
        v71 = vcvt_f32_f64(vdivq_f64(vsubq_f64(_Q1, vcvtq_f64_f32((float32x2_t)__PAIR64__(v136.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__data_))), vcvtq_f64_f32(v84)));
        if (v71.f32[1] < v71.f32[0])
          v71.f32[0] = v71.f32[1];
        *(float *)v104 = 1.0 - v71.f32[0];
        *(_QWORD *)&v104[4] = *(std::string::size_type *)((char *)v155.__r_.__value_.__r.__words + 4);
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v105, (char *)v155.__r_.__value_.__r.__words[2], v156, (int64_t)(v156 - v155.__r_.__value_.__r.__words[2]) >> 2);
        v72 = *(float *)v104;
        if (*(float *)v104 > 0.99)
        {
          *(_DWORD *)v104 = 1065185444;
          v72 = 0.99;
        }
        v73 = 1.0 - v72;
        if ((float)(*(float *)&v104[4] + *(float *)&v104[8]) <= 0.0001)
        {
          v75 = v73 * 0.5;
          v76 = v75;
        }
        else
        {
          v74 = v73 / (float)(*(float *)&v104[4] + *(float *)&v104[8]);
          v75 = *(float *)&v104[4] * v74;
          v76 = *(float *)&v104[8] * v74;
        }
        *(float *)&v104[4] = v75;
        *(float *)&v104[8] = v76;
      }
      else
      {
        *(_QWORD *)v104 = 1065353216;
        *(_DWORD *)&v104[8] = 0;
        v77 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v150 = 136315138;
          *(_QWORD *)&v150[4] = "predict";
          _os_log_debug_impl(&dword_1C281A000, v77, OS_LOG_TYPE_DEBUG, "%s #RD token count mismatch", v150, 0xCu);
        }
      }
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v150, (const RepetitionPredictorResult *)v104);
      if (*((char *)v89 + 311) < 0)
        std::string::__init_copy_ctor_external(&v159, *((const std::string::value_type **)v89 + 36), *((_QWORD *)v89 + 37));
      else
        v159 = *(std::string *)((_BYTE *)v89 + 12);
      correction_type = get_correction_type((float *)v150, &v159);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (v154 < 0)
        operator delete(__p);
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      v78 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        RepetitionPredictorResult::get_model_output_string((RepetitionPredictorResult *)v134, (uint64_t)v104);
        v79 = v135 >= 0 ? v134 : (void **)v134[0];
        *(_DWORD *)v146 = 136315394;
        v147 = "predict";
        v148 = 2080;
        v149 = v79;
        _os_log_impl(&dword_1C281A000, v78, OS_LOG_TYPE_INFO, "%s #RD final result %s", v146, 0x16u);
        if (v135 < 0)
          operator delete(v134[0]);
      }
      if (v139 < 0)
        operator delete(v138);
      if (v136.__r_.__value_.__r.__words[2])
      {
        v137 = v136.__r_.__value_.__r.__words[2];
        operator delete((void *)v136.__r_.__value_.__r.__words[2]);
      }
      if (v158 < 0)
        operator delete(v157);
      if (v155.__r_.__value_.__r.__words[2])
      {
        v156 = v155.__r_.__value_.__r.__words[2];
        operator delete((void *)v155.__r_.__value_.__r.__words[2]);
      }
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
    }
    else
    {
LABEL_57:
      std::string::basic_string[abi:ne180100]<0>(&v155, "");
      *(_QWORD *)v104 = 1065353216;
      *(_DWORD *)&v104[8] = 0;
      v106 = 0;
      v107 = 0;
      v105 = 0;
      correction_type = 0;
      v7 = v85;
      a3 = v86;
      v8 = v88;
      this = v89;
      v10 = MEMORY[0x1E0C809B0];
      v11 = (_QWORD *)&loc_1C289D000;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v109, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
      else
        v109 = v155;
      v110 = 1;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(0, 0, (uint64_t)&v105);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
    }
    toQRResponse(&v111, (uint64_t)v104);
    std::vector<marrs::qr::orchestration::QRHypothesis>::__vdeallocate((uint64_t *)a3);
    *(int8x16_t *)a3 = v111;
    *(_QWORD *)(a3 + 16) = v112;
    v112 = 0;
    v111 = 0uLL;
    *(_OWORD *)(a3 + 24) = v113;
    *(_OWORD *)(a3 + 40) = v114;
    *(_DWORD *)(a3 + 56) = v115;
    v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v6 = v87;
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    RepetitionPredictorInput::~RepetitionPredictorInput((void **)&v90.__r_.__value_.__l.__data_);
    RepetitionPredictorInput::~RepetitionPredictorInput((void **)buf);
  }
  else
  {
    v120 = 0u;
    v119 = 0u;
    v121 = 4;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__vdeallocate((uint64_t *)a3);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v117 = 0;
    v118 = 0;
    *(_QWORD *)buf = 0;
    *(_OWORD *)(a3 + 24) = v119;
    *(_OWORD *)(a3 + 40) = v120;
    *(_DWORD *)(a3 + 56) = v121;
    v155.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
  }
  std::string::basic_string[abi:ne180100]<0>(&v136, "com.apple.siri.marrs");
  v80 = std::string::append(&v136, ".QueryRewrite.RepetitionDetector.Outcome");
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)buf = v10;
  v117 = (__int128 *)v11[475];
  v118 = ___ZNK5marrs2qr13orchestration36CorrectionsRepetitionPredictorPlugin24doCoreAnalyticsForOutputERKNS1_10QRResponseE_block_invoke;
  *(_QWORD *)&v119 = &__block_descriptor_tmp_28;
  *((_QWORD *)&v119 + 1) = this;
  *(_QWORD *)&v120 = a3;
  analytics_send_event_lazy();
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v6, OS_SIGNPOST_INTERVAL_END, v7, "Predict", " enableTelemetry=YES ", buf, 2u);
  }
}

void sub_1C2850A98(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_signpost_id_t spid, uint64_t a13, NSObject *log, unint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *buf,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  int v71;
  void *v72;
  uint64_t v73;
  std::exception_ptr v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  if (!a2)
    _Unwind_Resume(a1);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (SLOBYTE(STACK[0x3D7]) < 0)
  {
    operator delete((void *)STACK[0x3C0]);
    if ((v71 & 1) == 0)
    {
LABEL_9:
      RepetitionPredictorResult::~RepetitionPredictorResult(&buf);
      RepetitionPredictorResult::~RepetitionPredictorResult((void **)&STACK[0x320]);
      RepetitionPredictorResult::~RepetitionPredictorResult((void **)(v73 - 224));
      *(_QWORD *)(v73 - 224) = &STACK[0x370];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 224));
      *(_QWORD *)(v73 - 224) = &STACK[0x388];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 224));
      RepetitionPredictorInput::~RepetitionPredictorInput(&a18);
      RepetitionPredictorInput::~RepetitionPredictorInput(&a71);
      __cxa_begin_catch(a1);
      if (a15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_END, spid, "Predict", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
      }
      std::current_exception();
      v75.__ptr_ = &a17;
      std::rethrow_exception(v75);
      sub_1C2850E80(v76, v77, v78, v79, v80, v81, v82, v83, a9, a10, a11, spid, a13, log, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        a23,
        a24,
        a25,
        a26,
        a27,
        a28,
        a29,
        a30,
        a31,
        a32,
        a33,
        a34,
        a35,
        a36,
        a37,
        a38,
        a39,
        a40,
        a41,
        a42,
        a43,
        a44);
    }
  }
  else if (!v71)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v72);
  goto LABEL_9;
}

void sub_1C2850E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  std::exception_ptr::~exception_ptr(&a17);
  __cxa_end_catch();
  a53 = a13;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  _Unwind_Resume(a1);
}

void sub_1C2850EA8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1C2850EB0);
  __clang_call_terminate(a1);
}

BOOL marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::validate(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this, const QRRequest *a2)
{
  uint64_t *var1;
  uint64_t *var0;
  _BOOL8 v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *exception;
  _QWORD v10[3];
  uint8_t buf[4];
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  var1 = (uint64_t *)a2->var1.var1;
  var0 = (uint64_t *)a2->var1.var0;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)var1 - (char *)var0) >> 4)) <= 1)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Number of TurnInputs less than two");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(exception, (uint64_t)buf, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/RepetitionDetection/src/CorrectionsRepetitionPredictorPlugin.cpp", 162);
  }
  v5 = marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper(var0, var1, 1);
  if (v5)
  {
    if ((marrs::qr::orchestration::AsrConfidenceChecker::verify((const QRRequest *)a2->var1.var0, (const QRRequest *)a2->var1.var1) & 1) == 0)
    {
      v6 = __cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(buf, "Invalid ASR confidence score in turn inputs");
      std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
      IOContentError::IOContentError(v6, (uint64_t)buf, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/RepetitionDetection/src/CorrectionsRepetitionPredictorPlugin.cpp", 173);
    }
  }
  else
  {
    v7 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v12 = "validate";
      _os_log_debug_impl(&dword_1C281A000, v7, OS_LOG_TYPE_DEBUG, "%s Received empty ASR utterance in TurnInputs, skipping RD.", buf, 0xCu);
    }
  }
  return v5;
}

void sub_1C2851094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::predict(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, uint64_t a3@<X8>)
{
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::predict((marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *)((char *)this - 208), a2, a3);
}

void `non-virtual thunk to'marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this)
{
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin((marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *)((char *)this - 208));
}

{
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin((marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *)((char *)this - 208));
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

xpc_object_t ___ZNK5marrs2qr13orchestration36CorrectionsRepetitionPredictorPlugin24doCoreAnalyticsForOutputERKNS1_10QRResponseE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  uint64_t v4;
  const char *v5;
  void **v6;
  const char *v7;
  const char *v8;
  void *__p[2];
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24);
  if (v4 >= 4)
    v5 = "NOT_AVAILABLE";
  else
    v5 = off_1E7C67078[v4];
  MEMORY[0x1C3BC59A0](__p, v5);
  if (v3)
  {
    if (v11 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    xpc_dictionary_set_string(v3, "repetitionType", (const char *)v6);
    v7 = (const char *)(v2 + 216);
    if (*(char *)(v2 + 239) < 0)
      v7 = *(const char **)v7;
    xpc_dictionary_set_string(v3, "locale", v7);
    v8 = (const char *)(v2 + 312);
    if (*(char *)(v2 + 335) < 0)
      v8 = *(const char **)v8;
    xpc_dictionary_set_string(v3, "assetVersion", v8);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1C28512FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = *(_DWORD **)(a3 + 8);
    do
    {
      v7 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v6 >= v7)
      {
        v9 = *(_DWORD **)a3;
        v10 = ((uint64_t)v6 - *(_QWORD *)a3) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v13);
          v9 = *(_DWORD **)a3;
          v6 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = (_DWORD *)(v13 + 4 * v10);
        *v15 = *v5;
        v8 = v15 + 1;
        while (v6 != v9)
        {
          v16 = *--v6;
          *--v15 = v16;
        }
        *(_QWORD *)a3 = v15;
        *(_QWORD *)(a3 + 8) = v8;
        *(_QWORD *)(a3 + 16) = v13 + 4 * v14;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v6 = *v5;
        v8 = v6 + 1;
      }
      *(_QWORD *)(a3 + 8) = v8;
      ++v5;
      v6 = v8;
    }
    while (v5 != a2);
  }
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C2851490(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return a1;
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v9 = v8 - 1;
  }
  v10 = v9 >> 6;
  if (v8 >= 0x41)
    v11 = v10;
  else
    v11 = 0;
  *(_QWORD *)(*a1 + 8 * v11) = 0;
LABEL_10:
  v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = &v5[v6 >> 6];
    v16 = v7 & 0x3F;
    v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      v18 = 1 << v16;
      if (((*v5 >> v14) & 1) != 0)
        v19 = *v17 | v18;
      else
        v19 = *v17 & ~v18;
      *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63)
        v14 = 0;
      v17 += v16 == 63;
      if (v16 == 63)
        v16 = 0;
      else
        ++v16;
      v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

void marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t **v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int32x2_t v25;
  char *v26;
  char *v27;
  uint64_t **v28;
  unsigned __int32 v29;
  unsigned int v30;
  void *v31;
  uint64_t *v32;
  NSObject *v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 v47;
  int64x2_t v48;
  char *v49;
  _QWORD *v50;
  _OWORD *v51;
  NSObject *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t *v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  NSObject *v70;
  NSObject *v71;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t *v81;
  uint64_t v82;
  int32x2_t v84;
  uint64_t *v85;
  int64x2_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint8_t *v91;
  __int128 v92;
  uint64_t v93;
  uint8_t v94[16];
  uint64_t v95;
  uint8_t buf[24];
  char *v97;
  unint64_t *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v9 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C281A000, v9, OS_LOG_TYPE_INFO, "executing model based MR request", buf, 2u);
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (*a2 == a2[1])
  {
    v33 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      return;
    *(_WORD *)buf = 0;
    v34 = "No of MRREntities is zero, not running visual MR";
    v35 = v33;
    v36 = 2;
    goto LABEL_127;
  }
  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  if (v10 == v11)
  {
LABEL_8:
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v13 = *a4;
    v14 = a4[1];
    v81 = a2;
    v82 = a3;
    if (*a4 != v14)
    {
      do
      {
        v15 = *v13;
        if ((*(_DWORD *)(*v13 + 72) - *(_DWORD *)(*v13 + 76)) < 0xB)
        {
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(&v88, *v13);
        }
        else
        {
          v16 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            v17 = *(uint64_t ***)(v15 + 32);
            if (*((char *)v17 + 23) < 0)
              v17 = (uint64_t **)*v17;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v17;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 10;
            _os_log_impl(&dword_1C281A000, v16, OS_LOG_TYPE_DEBUG, "contextualSpans span - (%s) was discarded since it's longer than supported length of %d", buf, 0x12u);
          }
        }
        ++v13;
      }
      while (v13 != v14);
      v10 = *(_QWORD *)(a3 + 40);
      v11 = *(_QWORD *)(a3 + 48);
    }
    if (v10 != v11)
    {
      v18 = *(_QWORD **)(a3 + 64);
      v19 = *(_QWORD *)(a3 + 152);
      v92 = 0uLL;
      v93 = 0;
      marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance((uint64_t *)buf, a1, v18, (uint64_t **)(a3 + 40), a2, v19, (uint64_t *)&v92);
      std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate((void **)a5);
      *(_OWORD *)a5 = *(_OWORD *)buf;
      *(_QWORD *)(a5 + 16) = *(_QWORD *)&buf[16];
      memset(buf, 0, sizeof(buf));
      v86.i64[0] = (uint64_t)buf;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      v86.i64[0] = (uint64_t)&v92;
      std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      v20 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        v21 = 0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v21;
        _os_log_impl(&dword_1C281A000, v20, OS_LOG_TYPE_INFO, "MR-MD visual model based - num matching results - %lu", buf, 0xCu);
      }
    }
    v22 = v88;
    v23 = v89;
    if (v88 != v89)
    {
      v86 = 0uLL;
      v87 = 0;
      *((_QWORD *)&v92 + 1) = 0;
      v93 = 0;
      *(_QWORD *)&v92 = (char *)&v92 + 8;
      do
      {
        v24 = *v22;
        if ((~*(unsigned __int8 *)(*v22 + 80) & 3) == 0)
        {
          v25 = *(int32x2_t *)(v24 + 72);
          v84 = v25;
          v26 = (char *)*((_QWORD *)&v92 + 1);
          v27 = (char *)&v92 + 8;
          v28 = (uint64_t **)&v92 + 1;
          if (*((_QWORD *)&v92 + 1))
          {
            do
            {
              while (1)
              {
                v27 = v26;
                v29 = *((_DWORD *)v26 + 8);
                if (v25.i32[1] >= v29)
                  break;
LABEL_25:
                v26 = *(char **)v27;
                v28 = (uint64_t **)v27;
                if (!*(_QWORD *)v27)
                  goto LABEL_31;
              }
              if (v29 >= v25.i32[1])
              {
                v30 = *((_DWORD *)v27 + 9);
                if (v25.i32[0] < v30)
                  goto LABEL_25;
                if (v30 >= v25.i32[0])
                {
                  v31 = v27;
                  goto LABEL_34;
                }
              }
              v28 = (uint64_t **)(v27 + 8);
              v26 = (char *)*((_QWORD *)v27 + 1);
            }
            while (v26);
          }
LABEL_31:
          v31 = operator new(0x40uLL);
          *((int32x2_t *)v31 + 4) = vrev64_s32(v84);
          *((_QWORD *)v31 + 6) = 0;
          *((_QWORD *)v31 + 7) = 0;
          *((_QWORD *)v31 + 5) = 0;
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v31 + 1) = 0;
          *((_QWORD *)v31 + 2) = v27;
          *v28 = (uint64_t *)v31;
          v32 = (uint64_t *)v31;
          if (*(_QWORD *)v92)
          {
            *(_QWORD *)&v92 = *(_QWORD *)v92;
            v32 = *v28;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v92 + 1), v32);
          ++v93;
LABEL_34:
          std::vector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((uint64_t *)v31 + 5, v24);
        }
        ++v22;
      }
      while (v22 != v23);
      v37 = (_QWORD *)v92;
      if ((__int128 *)v92 != (__int128 *)((char *)&v92 + 8))
      {
        v38 = (_QWORD *)v86.i64[1];
        do
        {
          if ((unint64_t)v38 >= v87)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v38 - v86.i64[0]) >> 3);
            v40 = v39 + 1;
            if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v87 - v86.i64[0]) >> 3) > v40)
              v40 = 0x5555555555555556 * ((uint64_t)(v87 - v86.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - v86.i64[0]) >> 3) >= 0x555555555555555)
              v41 = 0xAAAAAAAAAAAAAAALL;
            else
              v41 = v40;
            v98 = &v87;
            if (v41)
            {
              if (v41 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v42 = (char *)operator new(24 * v41);
            }
            else
            {
              v42 = 0;
            }
            v43 = &v42[24 * v39];
            *(_QWORD *)buf = v42;
            *(_QWORD *)&buf[8] = v43;
            *(_QWORD *)&buf[16] = v43;
            v97 = &v42[24 * v41];
            *((_QWORD *)v43 + 1) = 0;
            *((_QWORD *)v43 + 2) = 0;
            *(_QWORD *)v43 = 0;
            std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v43, v37[5], v37[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v37[6] - v37[5]) >> 3));
            v44 = *(_QWORD *)&buf[8];
            v38 = (_QWORD *)(*(_QWORD *)&buf[16] + 24);
            *(_QWORD *)&buf[16] += 24;
            v45 = (_QWORD *)v86.i64[1];
            v46 = (_QWORD *)v86.i64[0];
            if (v86.i64[1] == v86.i64[0])
            {
              v48 = vdupq_n_s64(v86.u64[1]);
            }
            else
            {
              do
              {
                *(_QWORD *)(v44 - 24) = 0;
                *(_QWORD *)(v44 - 16) = 0;
                v44 -= 24;
                *(_QWORD *)(v44 + 16) = 0;
                v47 = *(_OWORD *)(v45 - 3);
                v45 -= 3;
                *(_OWORD *)v44 = v47;
                *(_QWORD *)(v44 + 16) = v45[2];
                *v45 = 0;
                v45[1] = 0;
                v45[2] = 0;
              }
              while (v45 != v46);
              v48 = v86;
              v38 = *(_QWORD **)&buf[16];
            }
            v86.i64[0] = v44;
            v86.i64[1] = (uint64_t)v38;
            *(int64x2_t *)&buf[8] = v48;
            v49 = (char *)v87;
            v87 = (unint64_t)v97;
            v97 = v49;
            *(_QWORD *)buf = v48.i64[0];
            std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *v38 = 0;
            v38[1] = 0;
            v38[2] = 0;
            std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v38, v37[5], v37[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v37[6] - v37[5]) >> 3));
            v38 += 3;
          }
          v86.i64[1] = (uint64_t)v38;
          v50 = (_QWORD *)v37[1];
          if (v50)
          {
            do
            {
              v51 = v50;
              v50 = (_QWORD *)*v50;
            }
            while (v50);
          }
          else
          {
            do
            {
              v51 = (_OWORD *)v37[2];
              v64 = *(_QWORD *)v51 == (_QWORD)v37;
              v37 = v51;
            }
            while (!v64);
          }
          v37 = v51;
        }
        while (v51 != (__int128 *)((char *)&v92 + 8));
      }
      std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*((char **)&v92 + 1));
      v52 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v86.i64[1] - v86.i64[0]) >> 3);
        _os_log_impl(&dword_1C281A000, v52, OS_LOG_TYPE_INFO, "CSM Span Group size: %lu", buf, 0xCu);
      }
      v85 = (uint64_t *)v86.i64[1];
      v53 = (uint64_t *)v86.i64[0];
      if (v86.i64[0] != v86.i64[1])
      {
        v54 = (_QWORD *)(a5 + 16);
        do
        {
          if (v53[1] != *v53)
          {
            v92 = 0uLL;
            v93 = 0;
            v55 = *v53;
LABEL_71:
            if (v55 != v53[1])
            {
              v56 = *(_QWORD *)(v55 + 64);
              v57 = *(_QWORD *)(v56 + 56);
              v58 = *(_QWORD *)(v56 + 64);
              while (1)
              {
                if (v57 == v58)
                {
                  v55 += 88;
                  goto LABEL_71;
                }
                v59 = *(_QWORD *)(*(_QWORD *)v57 + 16);
                if (v59)
                {
                  v60 = *(uint64_t **)(v59 + 8);
                  if (v60)
                  {
                    v61 = *((char *)v60 + 23);
                    if (v61 < 0)
                    {
                      if (v60[1] != 14)
                        goto LABEL_85;
                      v60 = (uint64_t *)*v60;
                    }
                    else if (v61 != 14)
                    {
                      goto LABEL_85;
                    }
                    v62 = (uint64_t *)*v60;
                    v63 = *(uint64_t *)((char *)v60 + 6);
                    v64 = v62 == (uint64_t *)0x686374614D6D7363 && v63 == 0x656372756F536863;
                    if (v64)
                    {
                      v65 = *(uint64_t **)(*(_QWORD *)v57 + 32);
                      if (v65)
                      {
                        v66 = *((char *)v65 + 23);
                        if (v66 < 0)
                        {
                          if (v65[1] != 13)
                            goto LABEL_85;
                          v65 = (uint64_t *)*v65;
                        }
                        else if (v66 != 13)
                        {
                          goto LABEL_85;
                        }
                        v67 = (uint64_t *)*v65;
                        v68 = *(uint64_t *)((char *)v65 + 5);
                        if (v67 == (uint64_t *)0x45746E65696C6173 && v68 == 0x797469746E45746ELL)
                        {
                          memset(buf, 0, sizeof(buf));
                          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((uint64_t **)buf, *v53);
                          marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance((uint64_t *)v94, a1, *(_QWORD **)(v82 + 64), (uint64_t **)buf, v81, *(_QWORD *)(v82 + 152), v53);
                          std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate((void **)&v92);
                          v92 = *(_OWORD *)v94;
                          v93 = v95;
                          v95 = 0;
                          memset(v94, 0, sizeof(v94));
                          v91 = v94;
                          std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
                          v71 = MRRLoggerForCategory(2);
                          if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)v94 = 134217984;
                            *(_QWORD *)&v94[4] = 0x82FA0BE82FA0BE83 * ((uint64_t)(*((_QWORD *)&v92 + 1) - v92) >> 3);
                            _os_log_impl(&dword_1C281A000, v71, OS_LOG_TYPE_INFO, "MR-CSM visual model based - num matching results for one CSM Span- %lu", v94, 0xCu);
                          }
                          *(_QWORD *)v94 = buf;
                          std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
                          goto LABEL_104;
                        }
                      }
                    }
                  }
                }
LABEL_85:
                v57 += 8;
              }
            }
            v70 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C281A000, v70, OS_LOG_TYPE_INFO, "CSM span resolved to SDA. Skipping model run", buf, 2u);
            }
LABEL_104:
            v73 = *((_QWORD *)&v92 + 1);
            v74 = v92;
            if ((_QWORD)v92 == *((_QWORD *)&v92 + 1))
            {
              marrs::mrr::mr::addCSMSpansToMatchingResult(*v53, v53[1], (uint64_t *)a5, 1.0);
            }
            else
            {
              v75 = *(_QWORD **)(a5 + 8);
              do
              {
                if ((unint64_t)v75 >= *v54)
                {
                  v76 = 0x82FA0BE82FA0BE83 * (((uint64_t)v75 - *(_QWORD *)a5) >> 3);
                  v77 = v76 + 1;
                  if (v76 + 1 > 0xBE82FA0BE82FA0)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if (0x5F417D05F417D06 * ((uint64_t)(*v54 - *(_QWORD *)a5) >> 3) > v77)
                    v77 = 0x5F417D05F417D06 * ((uint64_t)(*v54 - *(_QWORD *)a5) >> 3);
                  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*v54 - *(_QWORD *)a5) >> 3) >= 0x5F417D05F417D0)
                    v78 = 0xBE82FA0BE82FA0;
                  else
                    v78 = v77;
                  v98 = (unint64_t *)(a5 + 16);
                  if (v78)
                    v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v78);
                  else
                    v79 = 0;
                  *(_QWORD *)buf = v78;
                  *(_QWORD *)&buf[8] = v78 + 344 * v76;
                  *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                  v97 = (char *)(v78 + 344 * v79);
                  std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(*(_QWORD **)&buf[8], v74);
                  *(_QWORD *)&buf[16] += 344;
                  std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)a5, buf);
                  v75 = *(_QWORD **)(a5 + 8);
                  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
                }
                else
                {
                  std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v75, v74);
                  v75 += 43;
                  *(_QWORD *)(a5 + 8) = v75;
                }
                *(_QWORD *)(a5 + 8) = v75;
                v74 += 344;
              }
              while (v74 != v73);
            }
            *(_QWORD *)buf = &v92;
            std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          v53 += 3;
        }
        while (v53 != v85);
      }
      *(_QWORD *)buf = &v86;
      std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    *(_QWORD *)buf = &v88;
    std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return;
  }
  v12 = *(_QWORD *)(a3 + 40);
  while ((*(_DWORD *)(*(_QWORD *)v12 + 72) - *(_DWORD *)(*(_QWORD *)v12 + 76)) < 0xB)
  {
    v12 += 8;
    if (v12 == v11)
      goto LABEL_8;
  }
  v80 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 10;
    v34 = "Model based mention resolver does not support mentions with more than %d tokens";
    v35 = v80;
    v36 = 8;
LABEL_127:
    _os_log_impl(&dword_1C281A000, v35, OS_LOG_TYPE_INFO, v34, buf, v36);
  }
}

void sub_1C28520D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::ModelBasedMR::~ModelBasedMR(marrs::mrr::mr::ModelBasedMR *this)
{
  marrs::mrr::mr::ModelBasedMR::~ModelBasedMR(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  *(_QWORD *)this = &off_1E7C67818;
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 35));
  marrs::inference_engine::EspressoModule::~EspressoModule((marrs::mrr::mr::ModelBasedMR *)((char *)this + 232));
  std::__tree<std::string>::destroy(*((char **)this + 27));
  std::__tree<std::string>::destroy(*((char **)this + 24));
  std::__tree<std::string>::destroy(*((char **)this + 21));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = &unk_1E7C67840;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = operator new();
  result = MEMORY[0x1C3BC54C0](v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (uint64_t *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C28523E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t **a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  NSObject *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  std::string *v25;
  __int128 v26;
  NSObject *v27;
  std::string *v28;
  NSObject *v29;
  _BYTE *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::string::size_type size;
  uint64_t v37;
  int64x2_t v38;
  std::string::size_type v39;
  NSObject *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  const char *v53;
  NSObject *v54;
  os_log_type_t v55;
  uint32_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  NSObject *v60;
  const char *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  float *v65;
  float *v66;
  unint64_t v67;
  float *v68;
  uint64_t v69;
  float *v70;
  float *v71;
  float *v72;
  float *v73;
  unint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float *v86;
  unint64_t v87;
  __int128 v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x2_t v98;
  uint64_t v99;
  float32x4_t v100;
  unint64_t v101;
  float32x2_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  float32x2_t *v105;
  float32x4_t v106;
  float32x2_t v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _DWORD *v129;
  char *v130;
  uint64_t v131;
  __int128 v132;
  unint64_t v133;
  float32x4_t *v134;
  uint64_t v135;
  float32x2_t v136;
  uint64_t v137;
  unint64_t v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t *v142;
  float32x4_t v143;
  float32x2_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  std::string::size_type v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::string::size_type v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char **v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char **v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  char *v221;
  char *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  void *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  __int128 v237;
  char *v238;
  __int128 v239;
  __int128 v240;
  char *v241;
  __int128 v242;
  _QWORD *v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  unsigned int v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  NSObject *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  void *v273;
  std::string::size_type v274;
  std::string::size_type v275;
  uint64_t v276;
  __int128 *v277;
  __int128 v278;
  uint64_t i;
  uint64_t v280;
  __int128 v281;
  __int128 v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  __int128 v288;
  void *v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  std::string *v295;
  std::string::size_type v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  std::string *v301;
  std::string::size_type v302;
  _QWORD *v303;
  std::string::size_type v304;
  __int128 v305;
  int64x2_t v306;
  std::string::size_type v307;
  uint64_t *v308;
  std::string::size_type v309;
  std::string::size_type v310;
  uint64_t v311;
  __int128 *v312;
  __int128 v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  std::string *v317;
  uint64_t v318;
  __int128 *v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  std::string::size_type v341;
  uint64_t v342;
  uint64_t v343;
  float32x2_t *v344;
  float32x4_t v345;
  float32x2_t **v346;
  float32x2_t *v347;
  unint64_t v348;
  float32x2_t v349;
  float32x4_t v350;
  float32x4_t *v351;
  float32x2_t *v352;
  float32x4_t v353;
  float32x2_t v354;
  std::string::size_type v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  std::string::size_type v364;
  std::string::size_type v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  uint64_t v375;
  int64x2_t v376;
  uint64_t v377;
  float *v378;
  std::string::size_type v379;
  float *v380;
  uint64_t v381;
  unint64_t v382;
  float v383;
  float *v384;
  float v385;
  unint64_t v386;
  float v387;
  float v388;
  std::string::size_type v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  float *v394;
  int v395;
  NSObject *v396;
  NSObject *v397;
  NSObject *v398;
  NSObject *v399;
  os_signpost_id_t v400;
  NSObject *v401;
  NSObject *v402;
  NSObject *v403;
  __int128 *v404;
  char *v405;
  char *v406;
  unint64_t v407;
  uint64_t v408;
  __int128 v409;
  int v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  char *v415;
  char *v416;
  int v417;
  uint64_t v418;
  _QWORD *v419;
  __int128 *v420;
  char *v421;
  char *v422;
  unint64_t v423;
  uint64_t v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  int v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  char *v435;
  char *v436;
  int v437;
  _QWORD *v438;
  uint64_t v439;
  char *v440;
  char *v441;
  unint64_t v442;
  __int128 *v443;
  uint64_t v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  uint64_t v450;
  char *v451;
  int v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  char *v457;
  char *v458;
  int v459;
  char *v460;
  uint64_t *v461;
  char *v462;
  char *v463;
  unint64_t v464;
  std::string::size_type v465;
  std::string::size_type j;
  std::string::size_type v467;
  int *v468;
  int v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  char *v474;
  char *v475;
  int v476;
  std::string::size_type v477;
  _QWORD *v478;
  std::string::size_type v479;
  char *v480;
  char *v481;
  unint64_t v482;
  int *v483;
  std::string::size_type v484;
  int v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  char *v490;
  char *v491;
  int v492;
  std::string::size_type v493;
  _QWORD *v494;
  char *v495;
  char *v496;
  char *v497;
  unint64_t v498;
  uint64_t v499;
  __int128 v500;
  __int128 v501;
  int v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  char *v507;
  char *v508;
  int v509;
  uint64_t v510;
  char *v511;
  uint64_t *v512;
  char *v513;
  char *v514;
  unint64_t v515;
  std::string::size_type v516;
  std::string::size_type k;
  std::string::size_type v518;
  int *v519;
  int v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  char *v525;
  char *v526;
  int v527;
  std::string::size_type v528;
  _QWORD *v529;
  __int128 *v530;
  unint64_t v531;
  char *v532;
  char *v533;
  uint64_t v534;
  __int128 v535;
  int v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  char *v541;
  char *v542;
  int v543;
  _QWORD *v544;
  __int128 *v545;
  unint64_t v546;
  char *v547;
  char *v548;
  uint64_t v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  int v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  char *v560;
  char *v561;
  int v562;
  _QWORD *v563;
  __int128 *v564;
  unint64_t v565;
  char *v566;
  char *v567;
  uint64_t v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  int v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  char *v579;
  char *v580;
  int v581;
  _QWORD *v582;
  uint64_t v583;
  unint64_t v584;
  char *v585;
  char *v586;
  int *v587;
  std::string::size_type v588;
  int v589;
  uint64_t v590;
  unint64_t v591;
  unint64_t v592;
  uint64_t v593;
  char *v594;
  char *v595;
  int v596;
  uint64_t v597;
  _QWORD *v598;
  int32x4_t v599;
  __int128 v600;
  __int128 v601;
  uint64_t v602;
  std::chrono::steady_clock::time_point v603;
  NSObject *v604;
  NSObject *v605;
  NSObject *v606;
  NSObject *v607;
  os_signpost_id_t v608;
  NSObject *v609;
  NSObject *v610;
  NSObject *v611;
  std::chrono::steady_clock::time_point v612;
  NSObject *v613;
  double v614;
  NSObject *v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t *v618;
  uint64_t v619;
  unint64_t v620;
  float v621;
  std::string::size_type v622;
  unint64_t v623;
  std::string::size_type *v624;
  std::string::size_type *v625;
  std::string::size_type v626;
  unint64_t v627;
  float v628;
  NSObject *v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  unint64_t v633;
  uint64_t v634;
  std::string::size_type *v635;
  std::string::size_type v636;
  char *v637;
  char *v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  _QWORD *v643;
  NSObject *v644;
  uint64_t *v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t *v650;
  uint64_t *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t *v654;
  int v655;
  int v656;
  int v657;
  BOOL v658;
  NSObject *v659;
  std::string *v660;
  const std::string *v661;
  const std::string *v662;
  std::string::size_type v663;
  std::string::size_type *p_size;
  std::string::size_type *v665;
  const void **v666;
  char *v667;
  std::string::size_type *v668;
  std::string *v669;
  uint64_t *v670;
  char *v671;
  _QWORD *v672;
  _QWORD *v673;
  char v674;
  uint64_t v675;
  const std::string::value_type **v676;
  __int128 v677;
  const std::string::value_type **v678;
  __int128 v679;
  std::string::size_type v680;
  std::string *v681;
  std::string *v682;
  std::string::size_type v683;
  int v684;
  std::string::size_type *v685;
  const void **v686;
  unint64_t v687;
  _DWORD *v688;
  uint64_t *v689;
  uint64_t *v690;
  std::string::size_type v691;
  unint64_t v692;
  char *v693;
  unint64_t *v694;
  unint64_t *v695;
  unint64_t v696;
  unint64_t v697;
  unint64_t v698;
  uint64_t *v699;
  marrs::mrr::mr::MRREntity *v700;
  float v701;
  uint64_t v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  uint64_t v706;
  NSObject *v707;
  const char *v708;
  uint64_t *v709;
  uint64_t v710;
  std::string::size_type v711;
  uint64_t v712;
  _QWORD *v713;
  unint64_t v714;
  unint64_t v715;
  unint64_t v716;
  uint64_t v717;
  std::string::size_type v718;
  uint64_t m;
  int v720;
  uint64_t *v721;
  uint64_t *v722;
  uint64_t *v723;
  int v724;
  uint64_t *v725;
  uint64_t *v726;
  float v727;
  uint64_t **v728;
  uint64_t **v729;
  uint64_t v730;
  std::string::size_type v731;
  float v732;
  NSObject *v733;
  std::string::size_type v734;
  _QWORD *v735;
  double v736;
  std::string::size_type v737;
  std::string::size_type v738;
  unint64_t v739;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unint64_t v745;
  uint64_t v746;
  std::chrono::steady_clock::time_point v747;
  NSObject *v748;
  NSObject *v749;
  NSObject *v750;
  std::string *v751;
  __int128 v752;
  std::string *v753;
  __int128 v754;
  std::string *v755;
  __int128 v756;
  std::string *v757;
  std::string::size_type v758;
  std::string *v759;
  __int128 v760;
  std::string *v761;
  __int128 v762;
  std::string *v763;
  __int128 v764;
  std::string *v765;
  std::string::size_type v766;
  std::string *v767;
  __int128 v768;
  std::string *v769;
  __int128 v770;
  NSObject *v771;
  std::string *v772;
  NSObject *v773;
  _QWORD *exception;
  NSObject *v775;
  _QWORD *v776;
  NSObject *v777;
  _QWORD *v778;
  void *v779;
  std::chrono::steady_clock::time_point v780;
  std::chrono::steady_clock::time_point v781;
  unint64_t v782;
  os_signpost_id_t spid;
  os_signpost_id_t spida;
  int v785;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  std::chrono::steady_clock::time_point v792;
  os_signpost_id_t v793;
  _DWORD *v794;
  __int128 v795;
  unint64_t v796;
  uint64_t *v797;
  unint64_t v798;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t *v800;
  unint64_t v801;
  unsigned int v802;
  uint64_t *v803;
  std::string::size_type v804;
  float *v805;
  uint64_t v807;
  char *v808;
  unint64_t v809;
  _QWORD *v811;
  uint64_t v812;
  uint64_t *v815;
  int64x2_t v816;
  uint64_t *v817;
  void *v818;
  std::string::size_type v819;
  uint64_t v820;
  uint64_t *v821;
  std::string::size_type v822;
  uint64_t *v823;
  uint64_t v824;
  uint64_t *v825;
  uint64_t *v826;
  uint64_t v827;
  unint64_t v828;
  float *v829;
  __int128 v830;
  uint64_t v831;
  float32x2_t v832;
  float32x2_t v833;
  uint64_t v834;
  uint64_t v835;
  _QWORD *v836;
  uint64_t *v837;
  uint64_t v838;
  __int128 *v839;
  std::string::size_type v840;
  std::string::size_type v841;
  std::string::size_type v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  void *v847;
  uint64_t v848;
  uint64_t v849;
  __int128 v850;
  uint64_t v851;
  std::string v852;
  std::string v853;
  std::string v854;
  int64x2_t v855;
  std::string::pointer data;
  void *v857;
  _DWORD *v858;
  _DWORD *v859;
  std::string v860;
  _BYTE __p[32];
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  int v866;
  std::string v867;
  void *v868;
  void *v869;
  uint64_t v870;
  std::string v871;
  void *v872;
  void *v873;
  uint64_t v874;
  std::string v875;
  void *v876;
  void *v877;
  uint64_t v878;
  std::string v879;
  void *v880;
  void *v881;
  uint64_t v882;
  std::string v883;
  void *v884[3];
  void *v885;
  char *v886;
  char *v887;
  void *v888[3];
  std::string v889;
  void *v890[3];
  std::string v891;
  void *v892[3];
  std::string v893;
  std::string v894;
  std::string v895;
  void *v896[3];
  std::string buf[2];
  __int128 v898;
  __int128 v899;
  __int128 v900;
  int v901;
  __int128 v902;
  _OWORD v903[2];
  __int128 v904;
  _OWORD v905[2];
  __int128 v906;
  _OWORD v907[2];
  uint64_t v908;
  unsigned int v909;
  int v910;
  unsigned int v911;
  int v912;
  unsigned int v913;
  __int128 v914;
  unsigned int v915;
  unsigned int v916;
  int v917;
  unsigned int v918;
  int v919;
  unsigned int v920;
  int v921;
  int32x4_t v922;
  __int128 v923;
  int32x4_t v924;
  uint64_t v925;
  int v926;
  _BYTE v927[32];
  __int128 v928;
  uint64_t v929;

  v929 = *MEMORY[0x1E0C80C00];
  memset(&v860, 0, sizeof(v860));
  v10 = MRRLoggerForCategory(3);
  v11 = os_signpost_id_generate(v10);
  v12 = MRRLoggerForCategory(3);
  v13 = v11 - 1;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v11, "MRModelPreprocessing", "", (uint8_t *)buf, 2u);
    }
  }
  v15 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C281A000, v15, OS_LOG_TYPE_INFO, "BEGIN \"MRModelPreprocessing\"", (uint8_t *)buf, 2u);
  }
  v16 = operator new(4uLL);
  *v16 = 0;
  v859 = v16 + 1;
  v857 = v16;
  v858 = v16 + 1;
  v17 = **a4;
  v19 = *(_DWORD **)(v17 + 8);
  v18 = *(_DWORD **)(v17 + 16);
  if (v19 != v18)
  {
    while (*v19 != 4)
    {
      if (++v19 == v18)
      {
        v19 = v18;
        break;
      }
    }
  }
  if (v19 != v18)
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 3;
    std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType const*,marrs::mrr::mr::MRResultType const*>(&v857, buf, &buf[0].__r_.__value_.__s.__data_[4]);
    v16 = v857;
    if (*(_DWORD *)v857 == 3 && ((char *)a4[1] - (char *)*a4 != 8 || *a7 == a7[1]))
    {
      v46 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v46, OS_LOG_TYPE_DEBUG, "Mention source is CSM but mention to resolve list size is not 1 or mentionGroup is empty. This is an error so returning empty result", (uint8_t *)buf, 2u);
      }
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_78;
    }
  }
  if (a3[5] == *(_QWORD *)(a2 + 112))
  {
    if (a3[2] != a3[1])
    {
      v796 = v11 - 1;
      v797 = a7;
      v793 = v11;
      v792.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v855 = 0uLL;
      data = 0;
      v20 = *a5;
      v21 = a5[1];
      v811 = a3;
      if (*a5 != v21)
      {
        v22 = 0;
        while (1)
        {
          memset(__p, 0, 24);
          v23 = (_QWORD *)std::map<marrs::mrr::mr::EntityType,char const*>::at(*(_DWORD *)v20);
          MEMORY[0x1C3BC59A0](__p, *v23);
          v24 = *(_QWORD **)(a2 + 280);
          if (!v24)
          {
LABEL_23:
            std::operator+<char>();
            v25 = std::string::append((std::string *)v927, " not supported by model, skipping this entity.");
            v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            buf[0].__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            if ((v927[23] & 0x80000000) != 0)
              operator delete(*(void **)v927);
            v27 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v28 = buf;
              else
                v28 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
              *(_DWORD *)v927 = 136315138;
              *(_QWORD *)&v927[4] = v28;
              _os_log_impl(&dword_1C281A000, v27, OS_LOG_TYPE_DEBUG, "%s", v927, 0xCu);
            }
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf[0].__r_.__value_.__l.__data_);
            goto LABEL_55;
          }
          while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(__p, v24 + 4))
          {
LABEL_22:
            v24 = (_QWORD *)*v24;
            if (!v24)
              goto LABEL_23;
          }
          if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v24 + 4, __p))
            break;
          v29 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            v30 = *(_BYTE **)__p;
            if (__p[23] >= 0)
              v30 = __p;
            v31 = (_QWORD *)(v20 + 8);
            if (*(char *)(v20 + 31) < 0)
              v31 = (_QWORD *)*v31;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109634;
            HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v22;
            LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v30;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v31;
            _os_log_impl(&dword_1C281A000, v29, OS_LOG_TYPE_DEBUG, "(%d) - Model input - EntityType - %s & value - %s", (uint8_t *)buf, 0x1Cu);
          }
          if (v855.i64[1] >= (unint64_t)data)
          {
            v33 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) + 1;
            if (v33 > 0x12F684BDA12F684)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x97B425ED097B426 * ((uint64_t)&data[-v855.i64[0]] >> 3) > v33)
              v33 = 0x97B425ED097B426 * ((uint64_t)&data[-v855.i64[0]] >> 3);
            if (0x84BDA12F684BDA13 * ((uint64_t)&data[-v855.i64[0]] >> 3) >= 0x97B425ED097B42)
              v34 = 0x12F684BDA12F684;
            else
              v34 = v33;
            buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&data;
            if (v34)
              v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v34);
            else
              v35 = 0;
            buf[0].__r_.__value_.__r.__words[0] = v34;
            buf[0].__r_.__value_.__l.__size_ = v34 + 8 * ((v855.i64[1] - v855.i64[0]) >> 3);
            buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
            buf[1].__r_.__value_.__r.__words[0] = v34 + 216 * v35;
            marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)buf[0].__r_.__value_.__l.__size_, (const marrs::mrr::mr::MRREntity *)v20);
            size = buf[0].__r_.__value_.__l.__size_;
            v32 = buf[0].__r_.__value_.__r.__words[2] + 216;
            buf[0].__r_.__value_.__r.__words[2] += 216;
            v37 = v855.i64[1];
            if (v855.i64[1] == v855.i64[0])
            {
              v38 = vdupq_n_s64(v855.u64[1]);
            }
            else
            {
              do
              {
                size -= 216;
                v37 -= 216;
                std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(size, v37);
              }
              while (v37 != v855.i64[0]);
              v38 = v855;
              v32 = buf[0].__r_.__value_.__r.__words[2];
            }
            v855.i64[0] = size;
            v855.i64[1] = v32;
            *(int64x2_t *)&buf[0].__r_.__value_.__r.__words[1] = v38;
            v39 = (std::string::size_type)data;
            data = buf[1].__r_.__value_.__l.__data_;
            buf[1].__r_.__value_.__r.__words[0] = v39;
            buf[0].__r_.__value_.__r.__words[0] = v38.i64[0];
            std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v855.i64[1], (const marrs::mrr::mr::MRREntity *)v20);
            v32 = v855.i64[1] + 216;
          }
          v855.i64[1] = v32;
          ++v22;
LABEL_55:
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v20 += 216;
          if (v20 == v21)
          {
            v47 = v855.i64[1];
            v48 = v855.i64[0];
            goto LABEL_81;
          }
        }
        ++v24;
        goto LABEL_22;
      }
      v48 = 0;
      v47 = 0;
LABEL_81:
      if (0x84BDA12F684BDA13 * ((v47 - v48) >> 3) > 0x27)
      {
        v52 = MRRLoggerForCategory(2);
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
LABEL_129:
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          goto LABEL_1186;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = 0x84BDA12F684BDA13
                                                                                  * ((v855.i64[1] - v855.i64[0]) >> 3);
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 40;
        v53 = "skipping model run since there are %ld which is more than the allowed limit of %ld";
        v54 = v52;
        v55 = OS_LOG_TYPE_DEBUG;
        v56 = 22;
LABEL_128:
        _os_log_impl(&dword_1C281A000, v54, v55, v53, (uint8_t *)buf, v56);
        goto LABEL_129;
      }
      v57 = *a4;
      v58 = a4[1];
      if (*a4 != v58)
      {
        do
        {
          v59 = *v57;
          v60 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            v61 = *(const char **)(v59 + 32);
            if (v61)
            {
              if (v61[23] < 0)
                v61 = *(const char **)v61;
            }
            else
            {
              v61 = "NULL";
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
            _os_log_impl(&dword_1C281A000, v60, OS_LOG_TYPE_DEBUG, "Model Input - Mention - %s", (uint8_t *)buf, 0xCu);
          }
          ++v57;
        }
        while (v57 != v58);
        v47 = v855.i64[1];
        v48 = v855.i64[0];
      }
      if (v48 == v47)
      {
        v89 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C281A000, v89, OS_LOG_TYPE_DEBUG, "No entity exists after embeddings filtering, skipping visual MR.", (uint8_t *)buf, 2u);
        }
        v90 = MRRLoggerForCategory(3);
        if (v796 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v91 = v90;
          if (os_signpost_enabled(v90))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C281A000, v91, OS_SIGNPOST_INTERVAL_END, v793, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
          }
        }
        v92 = MRRLoggerForCategory(0);
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
          goto LABEL_129;
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        v53 = "END \"MRModelPreprocessing\"";
        v54 = v92;
        v55 = OS_LOG_TYPE_INFO;
        v56 = 2;
        goto LABEL_128;
      }
      v798 = a3[5];
      memset(&v854, 0, sizeof(v854));
      memset(&v853, 0, sizeof(v853));
      memset(&v852, 0, sizeof(v852));
      v63 = *a4;
      v62 = a4[1];
      memset(__p, 0, 24);
      v64 = (char *)v62 - (char *)v63;
      if (v64)
      {
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v831 = v64 >> 3;
        do
        {
          v71 = (float *)v855.i64[1];
          v70 = (float *)v855.i64[0];
          if (v855.i64[0] == v855.i64[1])
          {
            v72 = v66;
            v74 = v67;
          }
          else
          {
            v72 = v66;
            v73 = v65;
            v829 = v66;
            v74 = v67;
            v65 = v68;
            do
            {
              v76 = v70[20];
              v75 = v70[21];
              v77 = v70[22];
              v78 = v70[23];
              v79 = v76 + v77;
              v80 = v75 + v78;
              v81 = v77 * v78;
              if ((unint64_t)v65 >= v74)
              {
                v82 = 0xCCCCCCCCCCCCCCCDLL * (v65 - v72);
                v83 = v82 + 1;
                if (v82 + 1 > 0xCCCCCCCCCCCCCCCLL)
                {
                  *(_QWORD *)&__p[16] = v67;
                  *(_QWORD *)__p = v829;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL * ((uint64_t)(v74 - (_QWORD)v72) >> 2) > v83)
                  v83 = 0x999999999999999ALL * ((uint64_t)(v74 - (_QWORD)v72) >> 2);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74 - (_QWORD)v72) >> 2) >= 0x666666666666666)
                  v84 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v84 = v83;
                if (v84)
                  v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,5ul>>>(v84);
                else
                  v85 = 0;
                v86 = (float *)(v84 + 20 * v82);
                *v86 = v76;
                v86[1] = v75;
                v86[2] = v79;
                v86[3] = v80;
                v86[4] = v81;
                if (v73 == v72)
                {
                  v72 = (float *)(v84 + 20 * v82);
                }
                else
                {
                  v87 = v84 + 20 * v82;
                  do
                  {
                    v88 = *(_OWORD *)(v73 - 5);
                    *(float *)(v87 - 4) = *(v73 - 1);
                    *(_OWORD *)(v87 - 20) = v88;
                    v87 -= 20;
                    v73 -= 5;
                  }
                  while (v73 != v72);
                  v73 = v72;
                  v72 = (float *)v87;
                }
                v74 = v84 + 20 * v85;
                v65 = v86 + 5;
                if (v73)
                  operator delete(v73);
              }
              else
              {
                *v65 = v76;
                v65[1] = v75;
                v65[2] = v79;
                v65[3] = v80;
                v65[4] = v81;
                v65 += 5;
              }
              v70 += 54;
              v68 = v65;
              v73 = v65;
            }
            while (v70 != v71);
          }
          ++v69;
          v66 = v72;
          v67 = v74;
        }
        while (v69 != v831);
        *(_QWORD *)&__p[16] = v74;
        *(_QWORD *)__p = v72;
        *(_QWORD *)&__p[8] = v65;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "lfeats");
      marrs::mrr::mr::logFeatureVectorArray<5ul>((uint64_t *)__p, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      v791 = *(_OWORD *)__p;
      v93 = (char *)a4[1] - (char *)*a4;
      v901 = 0;
      v899 = 0u;
      v900 = 0u;
      v898 = 0u;
      memset(buf, 0, sizeof(buf));
      std::vector<std::array<float,25ul>>::vector(__p, 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) * (v93 >> 3), (__int128 *)buf);
      v94 = v855.i64[1];
      if (v855.i64[1] == v855.i64[0])
      {
        v108 = v855.i64[1];
      }
      else
      {
        v95 = 0;
        v96 = 16;
        v94 = v855.i64[0];
        do
        {
          v97 = v94 + 216 * v95;
          v98 = *(float32x2_t *)(v97 + 80);
          v832 = *(float32x2_t *)(v97 + 88);
          marrs::mrr::mr::fetchNeighboringEntities(buf, v97, v95, v855.i64);
          v99 = 0;
          *(float32x2_t *)v103.f32 = v832;
          *(float32x2_t *)v100.f32 = vadd_f32(v98, vmul_f32(v832, (float32x2_t)0x3F0000003F000000));
          v100.i64[1] = v100.i64[0];
          v101 = 0x84BDA12F684BDA13
               * ((uint64_t)(buf[1].__r_.__value_.__l.__size_ - buf[1].__r_.__value_.__r.__words[0]) >> 3);
          v102 = vmul_lane_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32, 1);
          *(float32x2_t *)&v103.u32[2] = v832;
          v104 = (float32x4_t *)(*(_QWORD *)__p + v96);
          v105 = (float32x2_t *)(buf[1].__r_.__value_.__r.__words[0] + 88);
          do
          {
            if (v101 == v99)
              break;
            *(float32x2_t *)v106.f32 = v105[-1];
            v107 = *v105;
            *(float32x2_t *)&v106.u32[2] = vadd_f32(*(float32x2_t *)v106.f32, *v105);
            v104[-1] = vdivq_f32(vsubq_f32(v106, v100), v103);
            v104->i32[0] = vdiv_f32(vmul_lane_f32(v107, v107, 1), v102).u32[0];
            v104 = (float32x4_t *)((char *)v104 + 20);
            ++v99;
            v105 += 27;
          }
          while (v99 != 5);
          *(_QWORD *)v927 = &buf[1];
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          *(_QWORD *)v927 = buf;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          ++v95;
          v108 = v855.i64[1];
          v94 = v855.i64[0];
          v96 += 100;
        }
        while (v95 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3));
      }
      if ((unint64_t)v93 >= 9)
      {
        v109 = *(__int128 **)__p;
        if ((unint64_t)((v108 - v94) / 216) <= 1)
          v110 = 1;
        else
          v110 = (v108 - v94) / 216;
        v111 = 1;
        v112 = v108;
        do
        {
          v113 = v112 - v94;
          v658 = v112 == v94;
          v112 = v94;
          if (!v658)
          {
            v114 = 0;
            v115 = 0x84BDA12F684BDA13 * (v113 >> 3);
            v116 = v109;
            do
            {
              v117 = (uint64_t)v109 + 100 * v114 + 100 * v111 * v115;
              v118 = *v116;
              v119 = v116[2];
              *(_OWORD *)(v117 + 16) = v116[1];
              *(_OWORD *)(v117 + 32) = v119;
              *(_OWORD *)v117 = v118;
              v120 = v116[3];
              v121 = v116[4];
              v122 = v116[5];
              *(_DWORD *)(v117 + 96) = *((_DWORD *)v116 + 24);
              *(_OWORD *)(v117 + 64) = v121;
              *(_OWORD *)(v117 + 80) = v122;
              *(_OWORD *)(v117 + 48) = v120;
              ++v114;
              v116 = (__int128 *)((char *)v116 + 100);
              v115 = (v108 - v94) / 216;
            }
            while (v110 != v114);
            v112 = v108;
          }
          ++v111;
        }
        while (v111 != v93 >> 3);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "dif_lfeats");
      marrs::mrr::mr::logFeatureVectorArray<25ul>((uint64_t *)__p, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      v790 = *(_OWORD *)__p;
      v123 = v855.i64[1];
      v124 = v855.i64[0];
      v125 = (char *)a4[1] - (char *)*a4;
      v126 = v125 >> 3;
      v127 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
      v128 = v127 * (v125 >> 3);
      if (v128)
      {
        if (v128 > 0x28F5C28F5C28F5CLL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v129 = operator new(100 * v128);
        v794 = v129;
        v130 = (char *)&v129[25 * v128];
        v131 = 100 * v126 * v127;
        do
        {
          v129[24] = 0;
          *((_OWORD *)v129 + 4) = 0uLL;
          *((_OWORD *)v129 + 5) = 0uLL;
          *((_OWORD *)v129 + 2) = 0uLL;
          *((_OWORD *)v129 + 3) = 0uLL;
          *(_OWORD *)v129 = 0uLL;
          *((_OWORD *)v129 + 1) = 0uLL;
          v129 += 25;
          v131 -= 100;
        }
        while (v131);
        *(_QWORD *)&v132 = v794;
        *((_QWORD *)&v132 + 1) = v130;
      }
      else
      {
        v132 = 0uLL;
      }
      v795 = v132;
      if (v123 == v124)
      {
        v145 = v124;
      }
      else
      {
        v133 = 0;
        v134 = (float32x4_t *)(v132 + 16);
        do
        {
          v135 = v124 + 216 * v133;
          v136 = *(float32x2_t *)(v135 + 80);
          v833 = *(float32x2_t *)(v135 + 88);
          marrs::mrr::mr::fetchNeighboringEntities(buf, v135, v133, v855.i64);
          memset(__p, 0, 24);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_, (uint64_t *)__p);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_, (uint64_t *)__p);
          v137 = 0;
          v138 = 0;
          *(float32x2_t *)v141.f32 = v833;
          *(float32x2_t *)v139.f32 = vadd_f32(v136, vmul_f32(v833, (float32x2_t)0x3F0000003F000000));
          v139.i64[1] = v139.i64[0];
          v140 = vmul_lane_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32, 1);
          *(float32x2_t *)&v141.u32[2] = v833;
          v142 = v134;
          do
          {
            if (v138 >= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3))
              break;
            v143.i64[0] = *(_QWORD *)(*(_QWORD *)__p + v137 + 80);
            v144 = *(float32x2_t *)(*(_QWORD *)__p + v137 + 88);
            *(float32x2_t *)&v143.u32[2] = vadd_f32(*(float32x2_t *)v143.f32, v144);
            v142[-1] = vdivq_f32(vsubq_f32(v143, v139), v141);
            v142->i32[0] = vdiv_f32(vmul_lane_f32(v144, v144, 1), v140).u32[0];
            v142 = (float32x4_t *)((char *)v142 + 20);
            ++v138;
            v137 += 216;
          }
          while (v138 != 5);
          *(_QWORD *)v927 = __p;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          *(_QWORD *)__p = &buf[1];
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          *(_QWORD *)__p = buf;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          ++v133;
          v145 = v855.i64[1];
          v124 = v855.i64[0];
          v134 = (float32x4_t *)((char *)v134 + 100);
        }
        while (v133 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3));
      }
      if ((unint64_t)v125 >= 9)
      {
        v146 = 1;
        v147 = 100;
        v148 = v145;
        do
        {
          v149 = v148 - v124;
          v658 = v148 == v124;
          v148 = v124;
          if (!v658)
          {
            v150 = 0;
            v151 = 0x84BDA12F684BDA13 * (v149 >> 3);
            v152 = v795;
            do
            {
              v153 = 0;
              v154 = v152 + v147 * v151;
              do
              {
                v155 = v154 + v153;
                v156 = *(_OWORD *)(v152 + v153);
                *(_DWORD *)(v155 + 16) = *(_DWORD *)(v152 + v153 + 16);
                *(_OWORD *)v155 = v156;
                v153 += 20;
              }
              while (v153 != 100);
              ++v150;
              v145 = v855.i64[1];
              v124 = v855.i64[0];
              v151 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
              v152 += 100;
            }
            while (v150 < v151);
            v148 = v855.i64[1];
          }
          ++v146;
          v147 += 100;
        }
        while (v146 != v126);
      }
      v157 = (char *)a4[1] - (char *)*a4;
      v158 = v157 >> 3;
      v159 = 0x84BDA12F684BDA13 * ((v145 - v124) >> 3);
      memset(buf, 0, 24);
      v160 = v159 * (v157 >> 3);
      memset(&v891, 0, sizeof(v891));
      *(_QWORD *)__p = &v891;
      __p[8] = 0;
      if (v160)
      {
        if (v160 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v161 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v159 * (v157 >> 3));
        v891.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
        v891.__r_.__value_.__l.__size_ = (std::string::size_type)v161;
        v891.__r_.__value_.__r.__words[2] = (std::string::size_type)&v161[3 * v162];
        v163 = (std::string::size_type)&v161[3 * v160];
        v164 = 24 * v158 * v159;
        do
        {
          *v161 = 0;
          v161[1] = 0;
          v161[2] = 0;
          std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v161, (uint64_t)buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
          v161 += 3;
          v164 -= 24;
        }
        while (v164);
        v891.__r_.__value_.__l.__size_ = v163;
      }
      *(_QWORD *)__p = buf;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      std::vector<float>::vector(__p, v798, buf);
      v165 = v855.i64[1];
      v166 = v855.i64[0];
      v167 = v855.i64[1] - v855.i64[0];
      if (v855.i64[1] - v855.i64[0] == 216)
      {
        v168 = 5;
        do
        {
          v169 = v891.__r_.__value_.__r.__words[0];
          v170 = *(_QWORD *)(v891.__r_.__value_.__r.__words[0] + 8);
          if (v170 >= *(_QWORD *)(v891.__r_.__value_.__r.__words[0] + 16))
          {
            v171 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v891.__r_.__value_.__l.__data_, (uint64_t)__p);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v891.__r_.__value_.__l.__data_, (uint64_t)__p);
            v171 = v170 + 24;
          }
          *(_QWORD *)(v169 + 8) = v171;
          --v168;
        }
        while (v168);
        v165 = v855.i64[1];
        v166 = v855.i64[0];
        v167 = v855.i64[1] - v855.i64[0];
      }
      v172 = a2 + 272;
      if (v165 == v166)
      {
        v190 = 0;
        v191 = 0x84BDA12F684BDA13 * (v167 >> 3);
        v189 = v166;
      }
      else
      {
        v173 = 0;
        do
        {
          marrs::mrr::mr::fetchNeighboringEntities(buf, v166 + 216 * v173, v173, v855.i64);
          memset(v927, 0, 24);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_, (uint64_t *)v927);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_, (uint64_t *)v927);
          v174 = 0;
          v175 = 0;
          while (1)
          {
            v176 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)&v927[8] - *(_QWORD *)v927) >> 3);
            if (v175 >= v176)
              break;
            v177 = (char **)std::map<marrs::mrr::mr::EntityType,char const*>::at(*(_DWORD *)(*(_QWORD *)v927 + v174));
            std::string::basic_string[abi:ne180100]<0>(&v893, *v177);
            v178 = std::map<std::string,std::string>::at(v172, &v893);
            memset(&v895, 0, sizeof(v895));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v895, *(const void **)v178, *(_QWORD *)(v178 + 8), (uint64_t)(*(_QWORD *)(v178 + 8) - *(_QWORD *)v178) >> 2);
            v179 = (_QWORD *)(v891.__r_.__value_.__r.__words[0] + 24 * v173);
            v181 = v179 + 1;
            v180 = v179[1];
            if (v180 >= v179[2])
            {
              v182 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v179, (uint64_t)&v895);
            }
            else
            {
              std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v179, (uint64_t)&v895);
              v182 = v180 + 24;
            }
            *v181 = v182;
            if (v895.__r_.__value_.__r.__words[0])
              operator delete(v895.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            ++v175;
            v174 += 216;
            if (v175 == 5)
            {
              v176 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)&v927[8] - *(_QWORD *)v927) >> 3);
              break;
            }
          }
          if (v176 <= 4)
          {
            v183 = v176 - 5;
            do
            {
              v184 = (_QWORD *)(v891.__r_.__value_.__r.__words[0] + 24 * v173);
              v186 = v184 + 1;
              v185 = v184[1];
              if (v185 >= v184[2])
              {
                v187 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v184, (uint64_t)__p);
              }
              else
              {
                std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v184, (uint64_t)__p);
                v187 = v185 + 24;
              }
              *v186 = v187;
              v188 = __CFADD__(v183++, 1);
            }
            while (!v188);
          }
          v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v927;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&v893);
          *(_QWORD *)v927 = &buf[1];
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          *(_QWORD *)v927 = buf;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          ++v173;
          v189 = v855.i64[1];
          v166 = v855.i64[0];
          v190 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
        }
        while (v173 < v190);
        v191 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
      }
      if (v191 < v190 * v158)
      {
        do
        {
          v192 = 5;
          do
          {
            v193 = (_QWORD *)(v891.__r_.__value_.__r.__words[0] + 24 * v191);
            v194 = v193 + 1;
            v195 = v193[1];
            if (v195 >= v193[2])
            {
              v196 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v193, (uint64_t)__p);
            }
            else
            {
              std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v193, (uint64_t)__p);
              v196 = v195 + 24;
            }
            *v194 = v196;
            --v192;
          }
          while (v192);
          ++v191;
          v189 = v855.i64[1];
          v166 = v855.i64[0];
        }
        while (v191 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) * v158);
      }
      if ((unint64_t)v157 >= 9)
      {
        v197 = 1;
        do
        {
          v198 = v189 - v166;
          v658 = v189 == v166;
          v189 = v166;
          if (!v658)
          {
            v199 = 0;
            v200 = 0x84BDA12F684BDA13 * (v198 >> 3);
            do
            {
              v201 = 0;
              v202 = v199 + v200 * v197;
              do
              {
                v203 = *(_QWORD *)(v891.__r_.__value_.__r.__words[0] + 24 * v199);
                v204 = *(_QWORD *)(v891.__r_.__value_.__r.__words[0] + 24 * v202);
                if (v204 != v203)
                  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v204 + v201), *(char **)(v203 + v201), *(_QWORD *)(v203 + v201 + 8), (uint64_t)(*(_QWORD *)(v203 + v201 + 8) - *(_QWORD *)(v203 + v201)) >> 2);
                v201 += 24;
              }
              while (v201 != 120);
              ++v199;
              v189 = v855.i64[1];
              v166 = v855.i64[0];
              v200 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
            }
            while (v199 < v200);
          }
          ++v197;
        }
        while (v197 != v158);
      }
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      std::vector<std::vector<std::vector<float>>>::__vdeallocate((void ***)&v854);
      v854 = v891;
      memset(&v891, 0, sizeof(v891));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v891;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v205 = (char *)a4[1] - (char *)*a4;
      memset(buf, 0, 24);
      std::vector<std::vector<float>>::vector(&v893, 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) * (v205 >> 3), (uint64_t)buf);
      *(_DWORD *)__p = 0;
      std::vector<float>::vector(buf, v798, __p);
      v206 = v855.i64[1];
      if (v855.i64[1] == v855.i64[0])
      {
        v213 = v855.i64[1];
      }
      else
      {
        v207 = 0;
        v208 = 0;
        v209 = 0;
        v206 = v855.i64[0];
        do
        {
          v210 = (char **)std::map<marrs::mrr::mr::EntityType,char const*>::at(*(_DWORD *)(v206 + v207));
          std::string::basic_string[abi:ne180100]<0>(__p, *v210);
          v211 = std::map<std::string,std::string>::at(v172, __p);
          memset(v927, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v927, *(const void **)v211, *(_QWORD *)(v211 + 8), (uint64_t)(*(_QWORD *)(v211 + 8) - *(_QWORD *)v211) >> 2);
          v212 = *(void **)v927;
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v893.__r_.__value_.__r.__words[0] + v208), *(char **)v927, *(uint64_t *)&v927[8], (uint64_t)(*(_QWORD *)&v927[8] - *(_QWORD *)v927) >> 2);
          if (v212)
            operator delete(v212);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          ++v209;
          v213 = v855.i64[1];
          v206 = v855.i64[0];
          v208 += 24;
          v207 += 216;
        }
        while (v209 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3));
      }
      if ((unint64_t)v205 >= 9)
      {
        v214 = 1;
        v215 = v213;
        do
        {
          if (v215 == v206)
          {
            v215 = v206;
          }
          else
          {
            v216 = 0;
            v217 = 0;
            v218 = 0x84BDA12F684BDA13 * ((v215 - v206) >> 3);
            do
            {
              if (v218 * v214)
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v893.__r_.__value_.__r.__words[0] + 24 * (v217 + v214 * v218)), *(char **)(v893.__r_.__value_.__r.__words[0] + v216), *(_QWORD *)(v893.__r_.__value_.__r.__words[0] + v216 + 8), (uint64_t)(*(_QWORD *)(v893.__r_.__value_.__r.__words[0] + v216 + 8)- *(_QWORD *)(v893.__r_.__value_.__r.__words[0] + v216)) >> 2);
                v213 = v855.i64[1];
                v206 = v855.i64[0];
              }
              ++v217;
              v218 = 0x84BDA12F684BDA13 * ((v213 - v206) >> 3);
              v216 += 24;
              v215 = v213;
            }
            while (v217 < v218);
          }
          ++v214;
        }
        while (v214 != v205 >> 3);
      }
      if (buf[0].__r_.__value_.__r.__words[0])
      {
        buf[0].__r_.__value_.__l.__size_ = buf[0].__r_.__value_.__r.__words[0];
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v853);
      v853 = v893;
      v830 = 0u;
      memset(&v893, 0, sizeof(v893));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v220 = *a4;
      v219 = a4[1];
      if (v219 != *a4)
      {
        v221 = 0;
        v222 = 0;
        v223 = 0;
        v834 = v855.i64[1];
        v820 = v855.i64[0];
        v224 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
        v830 = 0u;
        do
        {
          v225 = v220[v223];
          v226 = *(_DWORD *)(v225 + 72);
          LODWORD(v225) = *(_DWORD *)(v225 + 76);
          v227 = (v226 - v225);
          if (v226 != (_DWORD)v225)
            memset_pattern16(buf, &unk_1C289E000, 4 * v227);
          if ((_DWORD)v227 != 10)
            bzero((char *)buf + 4 * v227, 40 - 4 * v227);
          if (v834 != v820)
          {
            v228 = 0;
            do
            {
              if (v222 >= v221)
              {
                v231 = (void *)v830;
                v232 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v222[-v830] >> 3);
                v233 = v232 + 1;
                if (v232 + 1 > 0x666666666666666)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if (0x999999999999999ALL * ((uint64_t)&v221[-v830] >> 3) > v233)
                  v233 = 0x999999999999999ALL * ((uint64_t)&v221[-v830] >> 3);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v221[-v830] >> 3) >= 0x333333333333333)
                  v234 = 0x666666666666666;
                else
                  v234 = v233;
                if (v234)
                {
                  if (v234 > 0x666666666666666)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v235 = (char *)operator new(40 * v234);
                  v222 = (char *)*((_QWORD *)&v830 + 1);
                }
                else
                {
                  v235 = 0;
                }
                v236 = &v235[40 * v232];
                v237 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                *(_OWORD *)v236 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *((_OWORD *)v236 + 1) = v237;
                *((_QWORD *)v236 + 4) = buf[1].__r_.__value_.__l.__size_;
                if (v222 == (char *)v830)
                {
                  v241 = &v235[40 * v232];
                }
                else
                {
                  v238 = &v235[40 * v232];
                  do
                  {
                    v239 = *(_OWORD *)(v222 - 40);
                    v240 = *(_OWORD *)(v222 - 24);
                    v241 = v238 - 40;
                    *((_QWORD *)v238 - 1) = *((_QWORD *)v222 - 1);
                    *(_OWORD *)(v238 - 24) = v240;
                    *(_OWORD *)(v238 - 40) = v239;
                    v222 -= 40;
                    v238 -= 40;
                  }
                  while (v222 != (char *)v830);
                }
                v221 = &v235[40 * v234];
                v222 = v236 + 40;
                *(_QWORD *)&v830 = v241;
                if (v231)
                  operator delete(v231);
              }
              else
              {
                v229 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                v230 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                *((_QWORD *)v222 + 4) = buf[1].__r_.__value_.__l.__size_;
                *(_OWORD *)v222 = v229;
                *((_OWORD *)v222 + 1) = v230;
                v222 += 40;
              }
              *(_QWORD *)&v242 = v830;
              *((_QWORD *)&v242 + 1) = v222;
              v830 = v242;
              ++v228;
            }
            while (v228 != v224);
            v220 = *a4;
            v219 = a4[1];
          }
          ++v223;
        }
        while (v223 < v219 - v220);
      }
      v816 = v855;
      v243 = v811;
      v244 = v811[5];
      memset(&v893, 0, sizeof(v893));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      std::vector<float>::vector(__p, v244, buf);
      v245 = *a4;
      if (a4[1] != *a4)
      {
        v246 = 0;
        v247 = 4 * v244;
        do
        {
          v248 = v245[v246];
          v249 = *(unsigned int *)(v248 + 72);
          if (v243[7] < v249)
          {
            v773 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v773, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Mention token indices out of bounds in token chain";
              _os_log_impl(&dword_1C281A000, v773, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)buf, 0xCu);
            }
            exception = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(buf, "Mention token indices out of bounds in token chain");
            std::string::basic_string[abi:ne180100]<0>(v927, "MultimodalReferenceResolution");
            IOContentError::IOContentError(exception, (uint64_t)buf, (uint64_t)v927, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 362);
          }
          v250 = *(unsigned int *)(v248 + 76);
          memset(v927, 0, 24);
          v835 = v246;
          if (v250 >= v249)
          {
            v259 = 0;
            v258 = 0;
          }
          else
          {
            v802 = v249 - v250;
            v251 = v249 - v250;
            v252 = v247 * v250;
            do
            {
              memset(buf, 0, 24);
              if (v244)
              {
                if (v244 >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v253 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v244);
                buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
                buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v253 + 4 * v254;
                bzero(v253, 4 * v244);
                v255 = (uint64_t)v253 + v247;
                buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v253 + v247;
                memmove(v253, (const void *)(v811[1] + v252), 4 * v244);
              }
              else
              {
                v255 = 0;
                v253 = 0;
              }
              v256 = *(_QWORD **)&v927[8];
              if (*(_QWORD *)&v927[8] >= *(_QWORD *)&v927[16])
              {
                v257 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v927, (uint64_t)buf);
              }
              else
              {
                **(_OWORD **)&v927[8] = 0uLL;
                v256[2] = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v256, v253, v255, (v255 - (uint64_t)v253) >> 2);
                v257 = (uint64_t)(v256 + 3);
              }
              *(_QWORD *)&v927[8] = v257;
              if (v253)
                operator delete(v253);
              v252 += v247;
              --v251;
            }
            while (v251);
            v258 = v802;
            v243 = v811;
            if (v802 > 9)
              goto LABEL_304;
            v259 = *(_QWORD **)&v927[8];
          }
          v260 = v258 - 10;
          do
          {
            if ((unint64_t)v259 >= *(_QWORD *)&v927[16])
            {
              v259 = (_QWORD *)std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v927, (uint64_t)__p);
            }
            else
            {
              *v259 = 0;
              v259[1] = 0;
              v259[2] = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v259, *(const void **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
              v259 += 3;
            }
            *(_QWORD *)&v927[8] = v259;
            v188 = __CFADD__(v260++, 1);
          }
          while (!v188);
LABEL_304:
          if (v816.i64[1] != v816.i64[0])
          {
            v261 = (_QWORD *)v893.__r_.__value_.__l.__size_;
            v262 = (v816.i64[1] - v816.i64[0]) / 216;
            do
            {
              if ((unint64_t)v261 >= v893.__r_.__value_.__r.__words[2])
              {
                v263 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v261 - v893.__r_.__value_.__r.__words[0]) >> 3);
                v264 = v263 + 1;
                if (v263 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556
                   * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) > v264)
                  v264 = 0x5555555555555556
                       * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                  v265 = 0xAAAAAAAAAAAAAAALL;
                else
                  v265 = v264;
                buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v893.__r_.__value_.__r.__words[2];
                if (v265)
                  v265 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v265);
                else
                  v266 = 0;
                v267 = (_QWORD *)(v265 + 24 * v263);
                buf[0].__r_.__value_.__r.__words[0] = v265;
                buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v267;
                buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v267;
                buf[1].__r_.__value_.__r.__words[0] = v265 + 24 * v266;
                *v267 = 0;
                v267[1] = 0;
                v267[2] = 0;
                std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v267, *(uint64_t *)v927, *(uint64_t *)&v927[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v927[8] - *(_QWORD *)v927) >> 3));
                buf[0].__r_.__value_.__r.__words[2] += 24;
                std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v893, buf);
                v261 = (_QWORD *)v893.__r_.__value_.__l.__size_;
                std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *v261 = 0;
                v261[1] = 0;
                v261[2] = 0;
                std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v261, *(uint64_t *)v927, *(uint64_t *)&v927[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v927[8] - *(_QWORD *)v927) >> 3));
                v261 += 3;
              }
              v893.__r_.__value_.__l.__size_ = (std::string::size_type)v261;
              --v262;
            }
            while (v262);
          }
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v927;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          v246 = v835 + 1;
          v245 = *a4;
        }
        while (v835 + 1 < (unint64_t)(a4[1] - *a4));
      }
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      std::vector<std::vector<std::vector<float>>>::__vdeallocate((void ***)&v852);
      v852 = v893;
      v789 = 0u;
      memset(&v893, 0, sizeof(v893));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v268 = v796;
      if (*(_BYTE *)(a2 + 120))
      {
        v269 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v269, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C281A000, v269, OS_LOG_TYPE_DEBUG, "useTextFeatures is enabled in model", (uint8_t *)buf, 2u);
        }
        v836 = (_QWORD *)(a2 + 160);
        v270 = (_QWORD *)(a2 + 184);
        v271 = a2 + 208;
        memset(&v893, 0, sizeof(v893));
        v272 = *a4;
        v817 = a4[1];
        if (*a4 != v817)
        {
          v273 = 0;
          v274 = 0;
          v275 = 0;
          do
          {
            v276 = *v272;
            if (!*(_QWORD *)(*v272 + 32))
            {
              v893.__r_.__value_.__r.__words[2] = v274;
              v893.__r_.__value_.__l.__size_ = v275;
              v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
              v775 = MRRLoggerForCategory(2);
              if (os_log_type_enabled(v775, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Mention input is null";
                _os_log_impl(&dword_1C281A000, v775, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)buf, 0xCu);
              }
              v776 = __cxa_allocate_exception(0x30uLL);
              std::string::basic_string[abi:ne180100]<0>(buf, "Mention input is null");
              std::string::basic_string[abi:ne180100]<0>(__p, "MultimodalReferenceResolution");
              IOContentError::IOContentError(v776, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 482);
            }
            marrs::mrr::mr::getMentionStringSet(buf, *v272, a6);
            v277 = *(__int128 **)(v276 + 32);
            v821 = v272;
            if (*((char *)v277 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v277, *((_QWORD *)v277 + 1));
            }
            else
            {
              v278 = *v277;
              *(_QWORD *)&__p[16] = *((_QWORD *)v277 + 2);
              *(_OWORD *)__p = v278;
            }
            v280 = v855.i64[1];
            for (i = v855.i64[0]; i != v280; i += 216)
            {
              if (*(char *)(i + 31) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v927, *(const std::string::value_type **)(i + 8), *(_QWORD *)(i + 16));
              }
              else
              {
                v281 = *(_OWORD *)(i + 8);
                *(_QWORD *)&v927[16] = *(_QWORD *)(i + 24);
                *(_OWORD *)v927 = v281;
              }
              memset(&v895, 0, 20);
              marrs::mrr::mr::computeStringMatchFeatures((uint64_t)&v895, (uint64_t)v927, (uint64_t)__p, buf, v836, v270, v271);
              if (v275 >= v274)
              {
                v283 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v275 - (_QWORD)v273) >> 2) + 1;
                if (v283 > 0xCCCCCCCCCCCCCCCLL)
                {
                  v893.__r_.__value_.__r.__words[2] = v274;
                  v893.__r_.__value_.__l.__size_ = v275;
                  v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL * ((uint64_t)(v274 - (_QWORD)v273) >> 2) > v283)
                  v283 = 0x999999999999999ALL * ((uint64_t)(v274 - (_QWORD)v273) >> 2);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v274 - (_QWORD)v273) >> 2) >= 0x666666666666666)
                  v284 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v284 = v283;
                if (v284)
                  v284 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,5ul>>>(v284);
                else
                  v285 = 0;
                v286 = v284 + 4 * ((uint64_t)(v275 - (_QWORD)v273) >> 2);
                *(_OWORD *)v286 = *(_OWORD *)&v895.__r_.__value_.__l.__data_;
                *(_DWORD *)(v286 + 16) = v895.__r_.__value_.__r.__words[2];
                if ((void *)v275 == v273)
                {
                  v289 = (void *)(v284 + 4 * ((uint64_t)(v275 - (_QWORD)v273) >> 2));
                }
                else
                {
                  v287 = v284 + 4 * ((uint64_t)(v275 - (_QWORD)v273) >> 2);
                  do
                  {
                    v288 = *(_OWORD *)(v275 - 20);
                    v289 = (void *)(v287 - 20);
                    *(_DWORD *)(v287 - 4) = *(_DWORD *)(v275 - 4);
                    *(_OWORD *)(v287 - 20) = v288;
                    v275 -= 20;
                    v287 -= 20;
                  }
                  while ((void *)v275 != v273);
                }
                v274 = v284 + 20 * v285;
                v275 = v286 + 20;
                if (v273)
                  operator delete(v273);
                v273 = v289;
              }
              else
              {
                v282 = *(_OWORD *)&v895.__r_.__value_.__l.__data_;
                *(_DWORD *)(v275 + 16) = v895.__r_.__value_.__r.__words[2];
                *(_OWORD *)v275 = v282;
                v275 += 20;
              }
              if ((v927[23] & 0x80000000) != 0)
                operator delete(*(void **)v927);
            }
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            std::__tree<std::string>::destroy((char *)buf[0].__r_.__value_.__l.__size_);
            v272 = v821 + 1;
          }
          while (v821 + 1 != v817);
          v893.__r_.__value_.__r.__words[2] = v274;
          v893.__r_.__value_.__l.__size_ = v275;
          v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "TextFeats");
        marrs::mrr::mr::logFeatureVectorArray<5ul>((uint64_t *)&v893, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v292 = v855.i64[1];
        v291 = v855.i64[0];
        v788 = *(_OWORD *)&v893.__r_.__value_.__l.__data_;
        memset(&v895, 0, sizeof(v895));
        if (v855.i64[0] != v855.i64[1])
        {
          do
          {
            memset(buf, 0, 24);
            std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(buf, *(__int128 **)(v291 + 112), *(__int128 **)(v291 + 120), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v291 + 120) - *(_QWORD *)(v291 + 112)) >> 3));
            v293 = 126
                 - 2
                 * __clz(0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
            *(_QWORD *)__p = v291 + 80;
            if (buf[0].__r_.__value_.__l.__size_ == buf[0].__r_.__value_.__r.__words[0])
              v294 = 0;
            else
              v294 = v293;
            std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,false>((uint64_t)buf[0].__r_.__value_.__l.__data_, (uint64_t *)buf[0].__r_.__value_.__l.__size_, (float32x2_t **)__p, v294, 1);
            v295 = (std::string *)v895.__r_.__value_.__l.__size_;
            if (v895.__r_.__value_.__l.__size_ >= v895.__r_.__value_.__r.__words[2])
            {
              v297 = 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3);
              v298 = v297 + 1;
              if (v297 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556
                 * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) > v298)
                v298 = 0x5555555555555556
                     * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                v299 = 0xAAAAAAAAAAAAAAALL;
              else
                v299 = v298;
              *(_QWORD *)&v862 = (char *)&v895.__r_.__value_.__l + 16;
              if (v299)
              {
                if (v299 > 0xAAAAAAAAAAAAAAALL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v300 = (char *)operator new(24 * v299);
              }
              else
              {
                v300 = 0;
              }
              v301 = (std::string *)&v300[24 * v297];
              *(_QWORD *)__p = v300;
              *(_QWORD *)&__p[8] = v301;
              *(_QWORD *)&__p[16] = v301;
              *(_QWORD *)&__p[24] = &v300[24 * v299];
              v301->__r_.__value_.__l.__size_ = 0;
              v301->__r_.__value_.__r.__words[2] = 0;
              v301->__r_.__value_.__r.__words[0] = 0;
              std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(v301, (__int128 *)buf[0].__r_.__value_.__l.__data_, (__int128 *)buf[0].__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
              v302 = *(_QWORD *)&__p[8];
              v296 = *(_QWORD *)&__p[16] + 24;
              *(_QWORD *)&__p[16] += 24;
              v303 = (_QWORD *)v895.__r_.__value_.__l.__size_;
              v304 = v895.__r_.__value_.__r.__words[0];
              if (v895.__r_.__value_.__l.__size_ == v895.__r_.__value_.__r.__words[0])
              {
                v306 = vdupq_n_s64(v895.__r_.__value_.__l.__size_);
              }
              else
              {
                do
                {
                  *(_QWORD *)(v302 - 24) = 0;
                  *(_QWORD *)(v302 - 16) = 0;
                  v302 -= 24;
                  *(_QWORD *)(v302 + 16) = 0;
                  v305 = *(_OWORD *)(v303 - 3);
                  v303 -= 3;
                  *(_OWORD *)v302 = v305;
                  *(_QWORD *)(v302 + 16) = v303[2];
                  *v303 = 0;
                  v303[1] = 0;
                  v303[2] = 0;
                }
                while (v303 != (_QWORD *)v304);
                v306 = *(int64x2_t *)&v895.__r_.__value_.__l.__data_;
                v296 = *(_QWORD *)&__p[16];
              }
              v895.__r_.__value_.__r.__words[0] = v302;
              v895.__r_.__value_.__l.__size_ = v296;
              *(int64x2_t *)&__p[8] = v306;
              v307 = v895.__r_.__value_.__r.__words[2];
              v895.__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[24];
              *(_QWORD *)&__p[24] = v307;
              *(_QWORD *)__p = v306.i64[0];
              std::__split_buffer<std::vector<marrs::mrr::mr::SurroundingText>>::~__split_buffer((uint64_t)__p);
            }
            else
            {
              *(_QWORD *)v895.__r_.__value_.__l.__size_ = 0;
              v295->__r_.__value_.__l.__size_ = 0;
              v295->__r_.__value_.__r.__words[2] = 0;
              std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(v295, (__int128 *)buf[0].__r_.__value_.__l.__data_, (__int128 *)buf[0].__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
              v296 = (std::string::size_type)&v295[1];
            }
            v895.__r_.__value_.__l.__size_ = v296;
            *(_QWORD *)__p = buf;
            std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v291 += 216;
          }
          while (v291 != v292);
        }
        memset(&v891, 0, sizeof(v891));
        v308 = *a4;
        v800 = a4[1];
        if (*a4 != v800)
        {
          v309 = 0;
          v822 = 0;
          v310 = 0;
          do
          {
            v311 = *v308;
            if (!*(_QWORD *)(*v308 + 32))
            {
              v891.__r_.__value_.__r.__words[2] = v822;
              v891.__r_.__value_.__l.__size_ = v310;
              v891.__r_.__value_.__r.__words[0] = v309;
              v777 = MRRLoggerForCategory(2);
              if (os_log_type_enabled(v777, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Mention input is null";
                _os_log_impl(&dword_1C281A000, v777, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)buf, 0xCu);
              }
              v778 = __cxa_allocate_exception(0x30uLL);
              std::string::basic_string[abi:ne180100]<0>(buf, "Mention input is null");
              std::string::basic_string[abi:ne180100]<0>(__p, "MultimodalReferenceResolution");
              IOContentError::IOContentError(v778, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 507);
            }
            marrs::mrr::mr::getMentionStringSet(__p, *v308, a6);
            v312 = *(__int128 **)(v311 + 32);
            if (*((char *)v312 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v927, *(const std::string::value_type **)v312, *((_QWORD *)v312 + 1));
            }
            else
            {
              v313 = *v312;
              *(_QWORD *)&v927[16] = *((_QWORD *)v312 + 2);
              *(_OWORD *)v927 = v313;
            }
            v803 = v308;
            if (v895.__r_.__value_.__l.__size_ != v895.__r_.__value_.__r.__words[0])
            {
              v314 = 0;
              do
              {
                v818 = (void *)v309;
                v315 = 0;
                v316 = 0;
                v901 = 0;
                v899 = 0u;
                v900 = 0u;
                v898 = 0u;
                v317 = buf;
                memset(buf, 0, sizeof(buf));
                do
                {
                  v318 = *(_QWORD *)(v895.__r_.__value_.__r.__words[0] + 24 * v314);
                  if (v316 >= 0xCCCCCCCCCCCCCCCDLL
                             * ((*(_QWORD *)(v895.__r_.__value_.__r.__words[0] + 24 * v314 + 8) - v318) >> 3))
                    break;
                  v319 = (__int128 *)(v318 + v315);
                  if (*((char *)v319 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v893, *(const std::string::value_type **)v319, *((_QWORD *)v319 + 1));
                  }
                  else
                  {
                    v320 = *v319;
                    v893.__r_.__value_.__r.__words[2] = *((_QWORD *)v319 + 2);
                    *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v320;
                  }
                  memset(&v889, 0, 20);
                  marrs::mrr::mr::computeStringMatchFeatures((uint64_t)&v889, (uint64_t)&v893, (uint64_t)v927, __p, v836, v270, v271);
                  *(_OWORD *)&v317->__r_.__value_.__l.__data_ = *(_OWORD *)&v889.__r_.__value_.__l.__data_;
                  LODWORD(v317->__r_.__value_.__r.__words[2]) = v889.__r_.__value_.__r.__words[2];
                  if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v893.__r_.__value_.__l.__data_);
                  ++v316;
                  v315 += 40;
                  v317 = (std::string *)((char *)v317 + 20);
                }
                while (v316 != 5);
                if (v310 >= v822)
                {
                  v326 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v310 - (_QWORD)v818) >> 2) + 1;
                  if (v326 > 0x28F5C28F5C28F5CLL)
                  {
                    v891.__r_.__value_.__r.__words[2] = v822;
                    v891.__r_.__value_.__l.__size_ = v310;
                    v891.__r_.__value_.__r.__words[0] = (std::string::size_type)v818;
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x1EB851EB851EB852 * ((uint64_t)(v822 - (_QWORD)v818) >> 2) > v326)
                    v326 = 0x1EB851EB851EB852 * ((uint64_t)(v822 - (_QWORD)v818) >> 2);
                  if (0x8F5C28F5C28F5C29 * ((uint64_t)(v822 - (_QWORD)v818) >> 2) >= 0x147AE147AE147AELL)
                    v327 = 0x28F5C28F5C28F5CLL;
                  else
                    v327 = v326;
                  if (v327)
                    v327 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,25ul>>>(v327);
                  else
                    v328 = 0;
                  v329 = v327 + 4 * ((uint64_t)(v310 - (_QWORD)v818) >> 2);
                  *(_OWORD *)(v329 + 48) = v898;
                  *(_OWORD *)(v329 + 64) = v899;
                  *(_OWORD *)(v329 + 80) = v900;
                  *(_DWORD *)(v329 + 96) = v901;
                  *(_OWORD *)v329 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v329 + 16) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(v329 + 32) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  if ((void *)v310 == v818)
                  {
                    v309 = v327 + 4 * ((uint64_t)(v310 - (_QWORD)v818) >> 2);
                  }
                  else
                  {
                    v330 = v327 + 4 * ((uint64_t)(v310 - (_QWORD)v818) >> 2);
                    do
                    {
                      v331 = *(_OWORD *)(v310 - 100);
                      v332 = *(_OWORD *)(v310 - 84);
                      *(_OWORD *)(v330 - 68) = *(_OWORD *)(v310 - 68);
                      *(_OWORD *)(v330 - 84) = v332;
                      *(_OWORD *)(v330 - 100) = v331;
                      v333 = *(_OWORD *)(v310 - 52);
                      v334 = *(_OWORD *)(v310 - 36);
                      v335 = *(_OWORD *)(v310 - 20);
                      v309 = v330 - 100;
                      *(_DWORD *)(v330 - 4) = *(_DWORD *)(v310 - 4);
                      *(_OWORD *)(v330 - 20) = v335;
                      *(_OWORD *)(v330 - 36) = v334;
                      *(_OWORD *)(v330 - 52) = v333;
                      v310 -= 100;
                      v330 -= 100;
                    }
                    while ((void *)v310 != v818);
                  }
                  v822 = v327 + 100 * v328;
                  v310 = v329 + 100;
                  if (v818)
                    operator delete(v818);
                }
                else
                {
                  v321 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  v322 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  *(_OWORD *)(v310 + 16) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(v310 + 32) = v322;
                  *(_OWORD *)v310 = v321;
                  v323 = v898;
                  v324 = v899;
                  v325 = v900;
                  *(_DWORD *)(v310 + 96) = v901;
                  *(_OWORD *)(v310 + 64) = v324;
                  *(_OWORD *)(v310 + 80) = v325;
                  *(_OWORD *)(v310 + 48) = v323;
                  v310 += 100;
                  v309 = (std::string::size_type)v818;
                }
                ++v314;
              }
              while (v314 < 0xAAAAAAAAAAAAAAABLL
                           * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3));
            }
            if ((v927[23] & 0x80000000) != 0)
              operator delete(*(void **)v927);
            std::__tree<std::string>::destroy(*(char **)&__p[8]);
            v308 = v803 + 1;
          }
          while (v803 + 1 != v800);
          v891.__r_.__value_.__r.__words[2] = v822;
          v891.__r_.__value_.__l.__size_ = v310;
          v891.__r_.__value_.__r.__words[0] = v309;
        }
        v268 = v796;
        v243 = v811;
        std::string::basic_string[abi:ne180100]<0>(__p, "ContextualTextFeats");
        marrs::mrr::mr::logFeatureVectorArray<25ul>((uint64_t *)&v891, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v787 = *(_OWORD *)&v891.__r_.__value_.__l.__data_;
        v336 = (char *)a4[1] - (char *)*a4;
        v866 = 0;
        v864 = 0u;
        v865 = 0u;
        v862 = 0u;
        v863 = 0u;
        memset(__p, 0, sizeof(__p));
        std::vector<std::array<float,25ul>>::vector(buf, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3)* (v336 >> 3), (__int128 *)__p);
        v337 = v855.i64[1];
        v338 = v855.i64[0];
        if (v855.i64[1] != v855.i64[0])
        {
          v339 = 0;
          v340 = (v855.i64[1] - v855.i64[0]) / 216;
          v341 = v895.__r_.__value_.__r.__words[0];
          if (v340 <= 1)
            v340 = 1;
          v342 = 16;
          do
          {
            v343 = 0;
            v344 = (float32x2_t *)(v338 + 216 * v339);
            *(float32x2_t *)v350.f32 = v344[11];
            *(float32x2_t *)v345.f32 = vadd_f32(v344[10], vmul_f32(*(float32x2_t *)v350.f32, (float32x2_t)0x3F0000003F000000));
            v345.i64[1] = v345.i64[0];
            v346 = (float32x2_t **)(v341 + 24 * v339);
            v347 = *v346;
            v348 = 0xCCCCCCCCCCCCCCCDLL * (v346[1] - *v346);
            v349 = vmul_lane_f32(*(float32x2_t *)v350.f32, *(float32x2_t *)v350.f32, 1);
            v350.i64[1] = v350.i64[0];
            v351 = (float32x4_t *)(buf[0].__r_.__value_.__r.__words[0] + v342);
            v352 = v347 + 4;
            do
            {
              if (v348 == v343)
                break;
              *(float32x2_t *)v353.f32 = v352[-1];
              v354 = *v352;
              *(float32x2_t *)&v353.u32[2] = vadd_f32(*(float32x2_t *)v353.f32, *v352);
              v351[-1] = vdivq_f32(vsubq_f32(v353, v345), v350);
              v351->i32[0] = vdiv_f32(vmul_lane_f32(v354, v354, 1), v349).u32[0];
              v351 = (float32x4_t *)((char *)v351 + 20);
              ++v343;
              v352 += 5;
            }
            while (v343 != 5);
            ++v339;
            v342 += 100;
          }
          while (v339 != v340);
        }
        if ((unint64_t)v336 >= 9)
        {
          v355 = buf[0].__r_.__value_.__r.__words[0];
          v356 = v855.i64[1];
          v357 = v855.i64[0];
          v358 = (v855.i64[1] - v855.i64[0]) / 216;
          if (v358 <= 1)
            v359 = 1;
          else
            v359 = (v855.i64[1] - v855.i64[0]) / 216;
          v360 = 1;
          do
          {
            v361 = v337 - v338;
            v658 = v337 == v338;
            v337 = v338;
            if (!v658)
            {
              v362 = 0;
              v363 = 0x84BDA12F684BDA13 * (v361 >> 3);
              v364 = v355;
              do
              {
                v365 = v355 + 100 * (v362 + v360 * v363);
                v366 = *(_OWORD *)v364;
                v367 = *(_OWORD *)(v364 + 32);
                *(_OWORD *)(v365 + 16) = *(_OWORD *)(v364 + 16);
                *(_OWORD *)(v365 + 32) = v367;
                *(_OWORD *)v365 = v366;
                v368 = *(_OWORD *)(v364 + 48);
                v369 = *(_OWORD *)(v364 + 64);
                v370 = *(_OWORD *)(v364 + 80);
                *(_DWORD *)(v365 + 96) = *(_DWORD *)(v364 + 96);
                *(_OWORD *)(v365 + 64) = v369;
                *(_OWORD *)(v365 + 80) = v370;
                *(_OWORD *)(v365 + 48) = v368;
                ++v362;
                v364 += 100;
                v363 = v358;
              }
              while (v359 != v362);
              v338 = v357;
              v337 = v356;
            }
            ++v360;
          }
          while (v360 != v336 >> 3);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ContextualTextLocFeats");
        marrs::mrr::mr::logFeatureVectorArray<25ul>((uint64_t *)buf, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v789 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v895;
        std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v290 = 0;
      }
      else
      {
        v290 = 1;
        v787 = 0u;
        v788 = 0u;
      }
      v785 = v290;
      v371 = v855.i64[1];
      v372 = v855.i64[0];
      v374 = *a4;
      v373 = a4[1];
      v851 = 0;
      v850 = 0uLL;
      memset(buf, 0, 24);
      v375 = v243[5];
      if (v375)
      {
        v376 = v855;
        v823 = v374;
        v837 = v373;
        v377 = 0;
        v378 = 0;
        v379 = 0;
        v380 = 0;
        v381 = 0;
        v382 = v243[7];
        v383 = (float)v382;
        do
        {
          if (v382)
          {
            v384 = (float *)(v811[1] + v377);
            v385 = 0.0;
            v386 = 1;
            do
            {
              v385 = v385 + *v384;
              v387 = (float)v386++;
              v384 += v375;
            }
            while (v387 < v383);
          }
          else
          {
            v385 = 0.0;
          }
          v388 = v385 / v383;
          if ((unint64_t)v380 >= v379)
          {
            v390 = v380 - v378;
            v391 = v390 + 1;
            if ((unint64_t)(v390 + 1) >> 62)
            {
              buf[0].__r_.__value_.__r.__words[2] = v379;
              buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v379 - (_QWORD)v378) >> 1 > v391)
              v391 = (uint64_t)(v379 - (_QWORD)v378) >> 1;
            if (v379 - (unint64_t)v378 >= 0x7FFFFFFFFFFFFFFCLL)
              v392 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v392 = v391;
            if (v392)
              v392 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v392);
            else
              v393 = 0;
            v394 = (float *)(v392 + 4 * v390);
            *v394 = v388;
            v389 = (std::string::size_type)(v394 + 1);
            while (v380 != v378)
            {
              v395 = *((_DWORD *)v380-- - 1);
              *((_DWORD *)v394-- - 1) = v395;
            }
            v379 = v392 + 4 * v393;
            buf[0].__r_.__value_.__l.__size_ = v389;
            if (v378)
              operator delete(v378);
            v378 = v394;
          }
          else
          {
            *v380 = v388;
            v389 = (std::string::size_type)(v380 + 1);
          }
          buf[0].__r_.__value_.__l.__size_ = v389;
          ++v381;
          v377 += 4;
          v380 = (float *)v389;
        }
        while (v381 != v375);
        buf[0].__r_.__value_.__r.__words[2] = v379;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
        v268 = v796;
        v373 = v837;
        v371 = v376.i64[1];
        v374 = v823;
        v372 = v376.i64[0];
      }
      else
      {
        v378 = 0;
      }
      std::vector<std::vector<float>>::vector(v927, (v373 - v374) * 0x84BDA12F684BDA13 * ((v371 - v372) >> 3), (uint64_t)buf);
      std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v850);
      v850 = *(_OWORD *)v927;
      v851 = *(_QWORD *)&v927[16];
      memset(v927, 0, 24);
      v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v927;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v893);
      if (v378)
      {
        buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v378;
        operator delete(v378);
      }
      v781.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v396 = MRRLoggerForCategory(3);
      if (v268 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v397 = v396;
        if (os_signpost_enabled(v396))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C281A000, v397, OS_SIGNPOST_INTERVAL_END, v793, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
        }
      }
      v398 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v398, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v398, OS_LOG_TYPE_INFO, "END \"MRModelPreprocessing\"", (uint8_t *)buf, 2u);
      }
      v399 = MRRLoggerForCategory(3);
      v400 = os_signpost_id_generate(v399);
      v401 = MRRLoggerForCategory(3);
      v782 = v400 - 1;
      if (v400 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v402 = v401;
        if (os_signpost_enabled(v401))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C281A000, v402, OS_SIGNPOST_INTERVAL_BEGIN, v400, "MRModelInference", "", (uint8_t *)buf, 2u);
        }
      }
      v403 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v403, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v403, OS_LOG_TYPE_INFO, "BEGIN \"MRModelInference\"", (uint8_t *)buf, 2u);
      }
      spid = v400;
      v780.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v404 = (__int128 *)v791;
      v405 = 0;
      v406 = 0;
      if ((_QWORD)v791 == *((_QWORD *)&v791 + 1))
      {
        v418 = v791;
      }
      else
      {
        v407 = 0;
        do
        {
          v408 = 0;
          v409 = *v404;
          LODWORD(buf[0].__r_.__value_.__r.__words[2]) = *((_DWORD *)v404 + 4);
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v409;
          do
          {
            v410 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v408);
            if ((unint64_t)v406 >= v407)
            {
              v411 = (v406 - v405) >> 2;
              v412 = v411 + 1;
              if ((unint64_t)(v411 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v407 - (_QWORD)v405) >> 1 > v412)
                v412 = (uint64_t)(v407 - (_QWORD)v405) >> 1;
              if (v407 - (unint64_t)v405 >= 0x7FFFFFFFFFFFFFFCLL)
                v413 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v413 = v412;
              if (v413)
                v413 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v413);
              else
                v414 = 0;
              v415 = (char *)(v413 + 4 * v411);
              *(_DWORD *)v415 = v410;
              v416 = v415 + 4;
              while (v406 != v405)
              {
                v417 = *((_DWORD *)v406 - 1);
                v406 -= 4;
                *((_DWORD *)v415 - 1) = v417;
                v415 -= 4;
              }
              v407 = v413 + 4 * v414;
              if (v405)
                operator delete(v405);
              v405 = v415;
              v406 = v416;
            }
            else
            {
              *(_DWORD *)v406 = v410;
              v406 += 4;
            }
            ++v408;
          }
          while (v408 != 5);
          v404 = (__int128 *)((char *)v404 + 20);
        }
        while (v404 != *((__int128 **)&v791 + 1));
        v418 = *((_QWORD *)&v791 + 1);
      }
      memset(v927, 0, 24);
      v419 = operator new(0x10uLL);
      *v419 = 0xCCCCCCCCCCCCCCCDLL * ((v418 - (uint64_t)v791) >> 2);
      v419[1] = 5;
      *(_QWORD *)v927 = v419;
      *(_QWORD *)&v927[8] = v419 + 2;
      *(_QWORD *)&v927[16] = v419 + 2;
      *(_QWORD *)&v927[24] = 0;
      v928 = 0uLL;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v927[24], v405, (uint64_t)v406, (v406 - v405) >> 2);
      if (v405)
        operator delete(v405);
      v838 = *((_QWORD *)&v790 + 1);
      v420 = (__int128 *)v790;
      if ((_QWORD)v790 == *((_QWORD *)&v790 + 1))
      {
        v421 = 0;
        v422 = 0;
        v838 = v790;
      }
      else
      {
        v421 = 0;
        v422 = 0;
        v423 = 0;
        do
        {
          v424 = 0;
          v425 = *v420;
          v426 = v420[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v420[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v426;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v425;
          v427 = v420[3];
          v428 = v420[4];
          v429 = v420[5];
          v901 = *((_DWORD *)v420 + 24);
          v899 = v428;
          v900 = v429;
          v898 = v427;
          do
          {
            v430 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v424);
            if ((unint64_t)v422 >= v423)
            {
              v431 = (v422 - v421) >> 2;
              v432 = v431 + 1;
              if ((unint64_t)(v431 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v423 - (_QWORD)v421) >> 1 > v432)
                v432 = (uint64_t)(v423 - (_QWORD)v421) >> 1;
              if (v423 - (unint64_t)v421 >= 0x7FFFFFFFFFFFFFFCLL)
                v433 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v433 = v432;
              if (v433)
                v433 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v433);
              else
                v434 = 0;
              v435 = (char *)(v433 + 4 * v431);
              *(_DWORD *)v435 = v430;
              v436 = v435 + 4;
              while (v422 != v421)
              {
                v437 = *((_DWORD *)v422 - 1);
                v422 -= 4;
                *((_DWORD *)v435 - 1) = v437;
                v435 -= 4;
              }
              v423 = v433 + 4 * v434;
              if (v421)
                operator delete(v421);
              v421 = v435;
              v422 = v436;
            }
            else
            {
              *(_DWORD *)v422 = v430;
              v422 += 4;
            }
            ++v424;
          }
          while (v424 != 25);
          v420 = (__int128 *)((char *)v420 + 100);
        }
        while (v420 != *((__int128 **)&v790 + 1));
        v420 = (__int128 *)v790;
      }
      v438 = operator new(0x10uLL);
      *v438 = 0x8F5C28F5C28F5C29 * ((v838 - (uint64_t)v420) >> 2);
      v438[1] = 25;
      v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v438;
      v893.__r_.__value_.__l.__size_ = (std::string::size_type)(v438 + 2);
      v893.__r_.__value_.__r.__words[2] = (std::string::size_type)(v438 + 2);
      memset(&v894, 0, sizeof(v894));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v894, v421, (uint64_t)v422, (v422 - v421) >> 2);
      if (v421)
        operator delete(v421);
      v824 = *((_QWORD *)&v795 + 1);
      v439 = v795;
      if ((_QWORD)v795 == *((_QWORD *)&v795 + 1))
      {
        v440 = 0;
        v441 = 0;
        v824 = v795;
      }
      else
      {
        v440 = 0;
        v441 = 0;
        v442 = 0;
        v443 = (__int128 *)v795;
        do
        {
          v444 = 0;
          v445 = *v443;
          v446 = v443[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v443[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v446;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v445;
          v447 = v443[3];
          v448 = v443[4];
          v449 = v443[5];
          v839 = v443;
          v901 = *((_DWORD *)v443 + 24);
          v899 = v448;
          v900 = v449;
          v898 = v447;
          do
          {
            v450 = 0;
            v451 = (char *)buf + 20 * v444;
            *(_OWORD *)&v891.__r_.__value_.__l.__data_ = *(_OWORD *)v451;
            LODWORD(v891.__r_.__value_.__r.__words[2]) = *((_DWORD *)v451 + 4);
            do
            {
              v452 = *((_DWORD *)&v891.__r_.__value_.__l.__data_ + v450);
              if ((unint64_t)v441 >= v442)
              {
                v453 = (v441 - v440) >> 2;
                v454 = v453 + 1;
                if ((unint64_t)(v453 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v442 - (_QWORD)v440) >> 1 > v454)
                  v454 = (uint64_t)(v442 - (_QWORD)v440) >> 1;
                if (v442 - (unint64_t)v440 >= 0x7FFFFFFFFFFFFFFCLL)
                  v455 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v455 = v454;
                if (v455)
                  v455 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v455);
                else
                  v456 = 0;
                v457 = (char *)(v455 + 4 * v453);
                *(_DWORD *)v457 = v452;
                v458 = v457 + 4;
                while (v441 != v440)
                {
                  v459 = *((_DWORD *)v441 - 1);
                  v441 -= 4;
                  *((_DWORD *)v457 - 1) = v459;
                  v457 -= 4;
                }
                v442 = v455 + 4 * v456;
                if (v440)
                  operator delete(v440);
                v440 = v457;
                v441 = v458;
              }
              else
              {
                *(_DWORD *)v441 = v452;
                v441 += 4;
              }
              ++v450;
            }
            while (v450 != 5);
            ++v444;
          }
          while (v444 != 5);
          v443 = (__int128 *)((char *)v839 + 100);
        }
        while ((__int128 *)((char *)v839 + 100) != *((__int128 **)&v795 + 1));
        v439 = v795;
      }
      v460 = (char *)operator new(0x18uLL);
      *(_QWORD *)v460 = 0x8F5C28F5C28F5C29 * ((v824 - v439) >> 2);
      *(int64x2_t *)(v460 + 8) = vdupq_n_s64(5uLL);
      v895.__r_.__value_.__r.__words[0] = (std::string::size_type)v460;
      v895.__r_.__value_.__l.__size_ = (std::string::size_type)(v460 + 24);
      v895.__r_.__value_.__r.__words[2] = (std::string::size_type)(v460 + 24);
      memset(v896, 0, sizeof(v896));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v896, v440, (uint64_t)v441, (v441 - v440) >> 2);
      if (v440)
        operator delete(v440);
      v819 = v854.__r_.__value_.__l.__size_;
      v461 = (uint64_t *)v854.__r_.__value_.__r.__words[0];
      if (v854.__r_.__value_.__r.__words[0] == v854.__r_.__value_.__l.__size_)
      {
        v462 = 0;
        v463 = 0;
        v477 = v854.__r_.__value_.__r.__words[0];
      }
      else
      {
        v462 = 0;
        v463 = 0;
        v464 = 0;
        do
        {
          memset(buf, 0, 24);
          v825 = v461;
          std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(buf, *v461, v461[1], 0xAAAAAAAAAAAAAAABLL * ((v461[1] - *v461) >> 3));
          v465 = buf[0].__r_.__value_.__l.__size_;
          v840 = buf[0].__r_.__value_.__l.__size_;
          for (j = buf[0].__r_.__value_.__r.__words[0]; j != v465; j += 24)
          {
            memset(&v889, 0, sizeof(v889));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v889, *(const void **)j, *(_QWORD *)(j + 8), (uint64_t)(*(_QWORD *)(j + 8) - *(_QWORD *)j) >> 2);
            v467 = v889.__r_.__value_.__l.__size_;
            v468 = (int *)v889.__r_.__value_.__r.__words[0];
            if (v889.__r_.__value_.__r.__words[0] != v889.__r_.__value_.__l.__size_)
            {
              do
              {
                v469 = *v468;
                if ((unint64_t)v463 >= v464)
                {
                  v470 = (v463 - v462) >> 2;
                  v471 = v470 + 1;
                  if ((unint64_t)(v470 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v464 - (_QWORD)v462) >> 1 > v471)
                    v471 = (uint64_t)(v464 - (_QWORD)v462) >> 1;
                  if (v464 - (unint64_t)v462 >= 0x7FFFFFFFFFFFFFFCLL)
                    v472 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v472 = v471;
                  if (v472)
                    v472 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v472);
                  else
                    v473 = 0;
                  v474 = (char *)(v472 + 4 * v470);
                  *(_DWORD *)v474 = v469;
                  v475 = v474 + 4;
                  while (v463 != v462)
                  {
                    v476 = *((_DWORD *)v463 - 1);
                    v463 -= 4;
                    *((_DWORD *)v474 - 1) = v476;
                    v474 -= 4;
                  }
                  v464 = v472 + 4 * v473;
                  if (v462)
                    operator delete(v462);
                  v462 = v474;
                  v463 = v475;
                }
                else
                {
                  *(_DWORD *)v463 = v469;
                  v463 += 4;
                }
                ++v468;
              }
              while (v468 != (int *)v467);
              v468 = (int *)v889.__r_.__value_.__r.__words[0];
            }
            if (v468)
              operator delete(v468);
            v465 = v840;
          }
          v889.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v889);
          v461 = v825 + 3;
        }
        while (v825 + 3 != (uint64_t *)v819);
        v477 = v854.__r_.__value_.__l.__size_;
        v461 = (uint64_t *)v854.__r_.__value_.__r.__words[0];
      }
      v478 = operator new(0x18uLL);
      *v478 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - (_QWORD)v461) >> 3);
      v478[1] = 5;
      v478[2] = v798;
      v891.__r_.__value_.__r.__words[0] = (std::string::size_type)v478;
      v891.__r_.__value_.__l.__size_ = (std::string::size_type)(v478 + 3);
      v891.__r_.__value_.__r.__words[2] = (std::string::size_type)(v478 + 3);
      memset(v892, 0, sizeof(v892));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v892, v462, (uint64_t)v463, (v463 - v462) >> 2);
      if (v462)
        operator delete(v462);
      v841 = v853.__r_.__value_.__l.__size_;
      v479 = v853.__r_.__value_.__r.__words[0];
      if (v853.__r_.__value_.__r.__words[0] == v853.__r_.__value_.__l.__size_)
      {
        v480 = 0;
        v481 = 0;
        v493 = v853.__r_.__value_.__r.__words[0];
      }
      else
      {
        v480 = 0;
        v481 = 0;
        v482 = 0;
        do
        {
          memset(buf, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(buf, *(const void **)v479, *(_QWORD *)(v479 + 8), (uint64_t)(*(_QWORD *)(v479 + 8) - *(_QWORD *)v479) >> 2);
          v484 = buf[0].__r_.__value_.__l.__size_;
          v483 = (int *)buf[0].__r_.__value_.__r.__words[0];
          if (buf[0].__r_.__value_.__r.__words[0] != buf[0].__r_.__value_.__l.__size_)
          {
            do
            {
              v485 = *v483;
              if ((unint64_t)v481 >= v482)
              {
                v486 = (v481 - v480) >> 2;
                v487 = v486 + 1;
                if ((unint64_t)(v486 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v482 - (_QWORD)v480) >> 1 > v487)
                  v487 = (uint64_t)(v482 - (_QWORD)v480) >> 1;
                if (v482 - (unint64_t)v480 >= 0x7FFFFFFFFFFFFFFCLL)
                  v488 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v488 = v487;
                if (v488)
                  v488 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v488);
                else
                  v489 = 0;
                v490 = (char *)(v488 + 4 * v486);
                *(_DWORD *)v490 = v485;
                v491 = v490 + 4;
                while (v481 != v480)
                {
                  v492 = *((_DWORD *)v481 - 1);
                  v481 -= 4;
                  *((_DWORD *)v490 - 1) = v492;
                  v490 -= 4;
                }
                v482 = v488 + 4 * v489;
                if (v480)
                  operator delete(v480);
                v480 = v490;
                v481 = v491;
              }
              else
              {
                *(_DWORD *)v481 = v485;
                v481 += 4;
              }
              ++v483;
            }
            while (v483 != (int *)v484);
            v483 = (int *)buf[0].__r_.__value_.__r.__words[0];
          }
          if (v483)
            operator delete(v483);
          v479 += 24;
        }
        while (v479 != v841);
        v493 = v853.__r_.__value_.__l.__size_;
        v479 = v853.__r_.__value_.__r.__words[0];
      }
      v494 = operator new(0x10uLL);
      *v494 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v493 - v479) >> 3);
      v494[1] = v798;
      v889.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
      v889.__r_.__value_.__l.__size_ = (std::string::size_type)(v494 + 2);
      v889.__r_.__value_.__r.__words[2] = (std::string::size_type)(v494 + 2);
      memset(v890, 0, sizeof(v890));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v890, v480, (uint64_t)v481, (v481 - v480) >> 2);
      if (v480)
        operator delete(v480);
      v495 = (char *)v830;
      v496 = 0;
      v497 = 0;
      if ((_QWORD)v830 == *((_QWORD *)&v830 + 1))
      {
        v510 = v830;
      }
      else
      {
        v498 = 0;
        do
        {
          v499 = 0;
          v500 = *(_OWORD *)v495;
          v501 = *((_OWORD *)v495 + 1);
          buf[1].__r_.__value_.__l.__size_ = *((_QWORD *)v495 + 4);
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v500;
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v501;
          do
          {
            v502 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v499);
            if ((unint64_t)v497 >= v498)
            {
              v503 = (v497 - v496) >> 2;
              v504 = v503 + 1;
              if ((unint64_t)(v503 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v498 - (_QWORD)v496) >> 1 > v504)
                v504 = (uint64_t)(v498 - (_QWORD)v496) >> 1;
              if (v498 - (unint64_t)v496 >= 0x7FFFFFFFFFFFFFFCLL)
                v505 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v505 = v504;
              if (v505)
                v505 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v505);
              else
                v506 = 0;
              v507 = (char *)(v505 + 4 * v503);
              *(_DWORD *)v507 = v502;
              v508 = v507 + 4;
              while (v497 != v496)
              {
                v509 = *((_DWORD *)v497 - 1);
                v497 -= 4;
                *((_DWORD *)v507 - 1) = v509;
                v507 -= 4;
              }
              v498 = v505 + 4 * v506;
              if (v496)
                operator delete(v496);
              v496 = v507;
              v497 = v508;
            }
            else
            {
              *(_DWORD *)v497 = v502;
              v497 += 4;
            }
            ++v499;
          }
          while (v499 != 10);
          v495 += 40;
        }
        while (v495 != *((char **)&v830 + 1));
        v510 = *((_QWORD *)&v830 + 1);
        v495 = (char *)v830;
      }
      v511 = (char *)operator new(0x10uLL);
      *(_QWORD *)v511 = 0xCCCCCCCCCCCCCCCDLL * ((v510 - (uint64_t)v495) >> 3);
      *((_QWORD *)v511 + 1) = 10;
      v885 = v511;
      v886 = v511 + 16;
      v887 = v511 + 16;
      memset(v888, 0, sizeof(v888));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v888, v496, (uint64_t)v497, (v497 - v496) >> 2);
      if (v496)
        operator delete(v496);
      v804 = v852.__r_.__value_.__l.__size_;
      v512 = (uint64_t *)v852.__r_.__value_.__r.__words[0];
      if (v852.__r_.__value_.__r.__words[0] == v852.__r_.__value_.__l.__size_)
      {
        v513 = 0;
        v514 = 0;
        v528 = v852.__r_.__value_.__r.__words[0];
      }
      else
      {
        v513 = 0;
        v514 = 0;
        v515 = 0;
        do
        {
          memset(buf, 0, 24);
          v826 = v512;
          std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(buf, *v512, v512[1], 0xAAAAAAAAAAAAAAABLL * ((v512[1] - *v512) >> 3));
          v516 = buf[0].__r_.__value_.__l.__size_;
          v842 = buf[0].__r_.__value_.__l.__size_;
          for (k = buf[0].__r_.__value_.__r.__words[0]; k != v516; k += 24)
          {
            memset(&v879, 0, sizeof(v879));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v879, *(const void **)k, *(_QWORD *)(k + 8), (uint64_t)(*(_QWORD *)(k + 8) - *(_QWORD *)k) >> 2);
            v518 = v879.__r_.__value_.__l.__size_;
            v519 = (int *)v879.__r_.__value_.__r.__words[0];
            if (v879.__r_.__value_.__r.__words[0] != v879.__r_.__value_.__l.__size_)
            {
              do
              {
                v520 = *v519;
                if ((unint64_t)v514 >= v515)
                {
                  v521 = (v514 - v513) >> 2;
                  v522 = v521 + 1;
                  if ((unint64_t)(v521 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v515 - (_QWORD)v513) >> 1 > v522)
                    v522 = (uint64_t)(v515 - (_QWORD)v513) >> 1;
                  if (v515 - (unint64_t)v513 >= 0x7FFFFFFFFFFFFFFCLL)
                    v523 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v523 = v522;
                  if (v523)
                    v523 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v523);
                  else
                    v524 = 0;
                  v525 = (char *)(v523 + 4 * v521);
                  *(_DWORD *)v525 = v520;
                  v526 = v525 + 4;
                  while (v514 != v513)
                  {
                    v527 = *((_DWORD *)v514 - 1);
                    v514 -= 4;
                    *((_DWORD *)v525 - 1) = v527;
                    v525 -= 4;
                  }
                  v515 = v523 + 4 * v524;
                  if (v513)
                    operator delete(v513);
                  v513 = v525;
                  v514 = v526;
                }
                else
                {
                  *(_DWORD *)v514 = v520;
                  v514 += 4;
                }
                ++v519;
              }
              while (v519 != (int *)v518);
              v519 = (int *)v879.__r_.__value_.__r.__words[0];
            }
            if (v519)
              operator delete(v519);
            v516 = v842;
          }
          v879.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v879);
          v512 = v826 + 3;
        }
        while (v826 + 3 != (uint64_t *)v804);
        v528 = v852.__r_.__value_.__l.__size_;
        v512 = (uint64_t *)v852.__r_.__value_.__r.__words[0];
        v495 = (char *)v830;
      }
      v529 = operator new(0x18uLL);
      *v529 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v528 - (_QWORD)v512) >> 3);
      v529[1] = 10;
      v529[2] = v798;
      v883.__r_.__value_.__r.__words[0] = (std::string::size_type)v529;
      v883.__r_.__value_.__l.__size_ = (std::string::size_type)(v529 + 3);
      v883.__r_.__value_.__r.__words[2] = (std::string::size_type)(v529 + 3);
      memset(v884, 0, sizeof(v884));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v884, v513, (uint64_t)v514, (v514 - v513) >> 2);
      if (v513)
        operator delete(v513);
      v843 = *((_QWORD *)&v788 + 1);
      v530 = (__int128 *)v788;
      if ((_QWORD)v788 == *((_QWORD *)&v788 + 1))
      {
        v533 = 0;
        v532 = 0;
        v843 = v788;
      }
      else
      {
        v531 = 0;
        v532 = 0;
        v533 = 0;
        do
        {
          v534 = 0;
          v535 = *v530;
          LODWORD(buf[0].__r_.__value_.__r.__words[2]) = *((_DWORD *)v530 + 4);
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v535;
          do
          {
            v536 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v534);
            if ((unint64_t)v532 >= v531)
            {
              v537 = (v532 - v533) >> 2;
              v538 = v537 + 1;
              if ((unint64_t)(v537 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v531 - (_QWORD)v533) >> 1 > v538)
                v538 = (uint64_t)(v531 - (_QWORD)v533) >> 1;
              if (v531 - (unint64_t)v533 >= 0x7FFFFFFFFFFFFFFCLL)
                v539 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v539 = v538;
              if (v539)
                v539 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v539);
              else
                v540 = 0;
              v541 = (char *)(v539 + 4 * v537);
              *(_DWORD *)v541 = v536;
              v542 = v541 + 4;
              while (v532 != v533)
              {
                v543 = *((_DWORD *)v532 - 1);
                v532 -= 4;
                *((_DWORD *)v541 - 1) = v543;
                v541 -= 4;
              }
              v531 = v539 + 4 * v540;
              if (v533)
                operator delete(v533);
              v533 = v541;
              v532 = v542;
            }
            else
            {
              *(_DWORD *)v532 = v536;
              v532 += 4;
            }
            ++v534;
          }
          while (v534 != 5);
          v530 = (__int128 *)((char *)v530 + 20);
        }
        while (v530 != *((__int128 **)&v788 + 1));
        v495 = (char *)v830;
      }
      v544 = operator new(0x10uLL);
      *v544 = 0xCCCCCCCCCCCCCCCDLL * ((v843 - (uint64_t)v788) >> 2);
      v544[1] = 5;
      v879.__r_.__value_.__r.__words[0] = (std::string::size_type)v544;
      v879.__r_.__value_.__l.__size_ = (std::string::size_type)(v544 + 2);
      v879.__r_.__value_.__r.__words[2] = (std::string::size_type)(v544 + 2);
      v880 = 0;
      v882 = 0;
      v881 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v880, v533, (uint64_t)v532, (v532 - v533) >> 2);
      if (v533)
        operator delete(v533);
      v844 = *((_QWORD *)&v787 + 1);
      v545 = (__int128 *)v787;
      if ((_QWORD)v787 == *((_QWORD *)&v787 + 1))
      {
        v548 = 0;
        v547 = 0;
        v844 = v787;
      }
      else
      {
        v546 = 0;
        v547 = 0;
        v548 = 0;
        do
        {
          v549 = 0;
          v550 = *v545;
          v551 = v545[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v545[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v551;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v550;
          v552 = v545[3];
          v553 = v545[4];
          v554 = v545[5];
          v901 = *((_DWORD *)v545 + 24);
          v899 = v553;
          v900 = v554;
          v898 = v552;
          do
          {
            v555 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v549);
            if ((unint64_t)v547 >= v546)
            {
              v556 = (v547 - v548) >> 2;
              v557 = v556 + 1;
              if ((unint64_t)(v556 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v546 - (_QWORD)v548) >> 1 > v557)
                v557 = (uint64_t)(v546 - (_QWORD)v548) >> 1;
              if (v546 - (unint64_t)v548 >= 0x7FFFFFFFFFFFFFFCLL)
                v558 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v558 = v557;
              if (v558)
                v558 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v558);
              else
                v559 = 0;
              v560 = (char *)(v558 + 4 * v556);
              *(_DWORD *)v560 = v555;
              v561 = v560 + 4;
              while (v547 != v548)
              {
                v562 = *((_DWORD *)v547 - 1);
                v547 -= 4;
                *((_DWORD *)v560 - 1) = v562;
                v560 -= 4;
              }
              v546 = v558 + 4 * v559;
              if (v548)
                operator delete(v548);
              v548 = v560;
              v547 = v561;
            }
            else
            {
              *(_DWORD *)v547 = v555;
              v547 += 4;
            }
            ++v549;
          }
          while (v549 != 25);
          v545 = (__int128 *)((char *)v545 + 100);
        }
        while (v545 != *((__int128 **)&v787 + 1));
        v495 = (char *)v830;
      }
      v563 = operator new(0x10uLL);
      *v563 = 0x8F5C28F5C28F5C29 * ((v844 - (uint64_t)v787) >> 2);
      v563[1] = 25;
      v875.__r_.__value_.__r.__words[0] = (std::string::size_type)v563;
      v875.__r_.__value_.__l.__size_ = (std::string::size_type)(v563 + 2);
      v875.__r_.__value_.__r.__words[2] = (std::string::size_type)(v563 + 2);
      v876 = 0;
      v878 = 0;
      v877 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v876, v548, (uint64_t)v547, (v547 - v548) >> 2);
      if (v548)
        operator delete(v548);
      v845 = *((_QWORD *)&v789 + 1);
      v564 = (__int128 *)v789;
      if ((_QWORD)v789 == *((_QWORD *)&v789 + 1))
      {
        v567 = 0;
        v566 = 0;
        v845 = v789;
      }
      else
      {
        v565 = 0;
        v566 = 0;
        v567 = 0;
        do
        {
          v568 = 0;
          v569 = *v564;
          v570 = v564[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v564[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v570;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v569;
          v571 = v564[3];
          v572 = v564[4];
          v573 = v564[5];
          v901 = *((_DWORD *)v564 + 24);
          v899 = v572;
          v900 = v573;
          v898 = v571;
          do
          {
            v574 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v568);
            if ((unint64_t)v566 >= v565)
            {
              v575 = (v566 - v567) >> 2;
              v576 = v575 + 1;
              if ((unint64_t)(v575 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v565 - (_QWORD)v567) >> 1 > v576)
                v576 = (uint64_t)(v565 - (_QWORD)v567) >> 1;
              if (v565 - (unint64_t)v567 >= 0x7FFFFFFFFFFFFFFCLL)
                v577 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v577 = v576;
              if (v577)
                v577 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v577);
              else
                v578 = 0;
              v579 = (char *)(v577 + 4 * v575);
              *(_DWORD *)v579 = v574;
              v580 = v579 + 4;
              while (v566 != v567)
              {
                v581 = *((_DWORD *)v566 - 1);
                v566 -= 4;
                *((_DWORD *)v579 - 1) = v581;
                v579 -= 4;
              }
              v565 = v577 + 4 * v578;
              if (v567)
                operator delete(v567);
              v567 = v579;
              v566 = v580;
            }
            else
            {
              *(_DWORD *)v566 = v574;
              v566 += 4;
            }
            ++v568;
          }
          while (v568 != 25);
          v564 = (__int128 *)((char *)v564 + 100);
        }
        while (v564 != *((__int128 **)&v789 + 1));
        v495 = (char *)v830;
        v564 = (__int128 *)v789;
      }
      v582 = operator new(0x10uLL);
      *v582 = 0x8F5C28F5C28F5C29 * ((v845 - (uint64_t)v564) >> 2);
      v582[1] = 25;
      v871.__r_.__value_.__r.__words[0] = (std::string::size_type)v582;
      v871.__r_.__value_.__l.__size_ = (std::string::size_type)(v582 + 2);
      v871.__r_.__value_.__r.__words[2] = (std::string::size_type)(v582 + 2);
      v872 = 0;
      v874 = 0;
      v873 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v872, v567, (uint64_t)v566, (v566 - v567) >> 2);
      if (v567)
        operator delete(v567);
      v846 = *((_QWORD *)&v850 + 1);
      v583 = v850;
      if ((_QWORD)v850 == *((_QWORD *)&v850 + 1))
      {
        v585 = 0;
        v586 = 0;
        v597 = v850;
      }
      else
      {
        v584 = 0;
        v585 = 0;
        v586 = 0;
        do
        {
          memset(buf, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(buf, *(const void **)v583, *(_QWORD *)(v583 + 8), (uint64_t)(*(_QWORD *)(v583 + 8) - *(_QWORD *)v583) >> 2);
          v588 = buf[0].__r_.__value_.__l.__size_;
          v587 = (int *)buf[0].__r_.__value_.__r.__words[0];
          if (buf[0].__r_.__value_.__r.__words[0] != buf[0].__r_.__value_.__l.__size_)
          {
            do
            {
              v589 = *v587;
              if ((unint64_t)v585 >= v584)
              {
                v590 = (v585 - v586) >> 2;
                v591 = v590 + 1;
                if ((unint64_t)(v590 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v584 - (_QWORD)v586) >> 1 > v591)
                  v591 = (uint64_t)(v584 - (_QWORD)v586) >> 1;
                if (v584 - (unint64_t)v586 >= 0x7FFFFFFFFFFFFFFCLL)
                  v592 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v592 = v591;
                if (v592)
                  v592 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v592);
                else
                  v593 = 0;
                v594 = (char *)(v592 + 4 * v590);
                *(_DWORD *)v594 = v589;
                v595 = v594 + 4;
                while (v585 != v586)
                {
                  v596 = *((_DWORD *)v585 - 1);
                  v585 -= 4;
                  *((_DWORD *)v594 - 1) = v596;
                  v594 -= 4;
                }
                v584 = v592 + 4 * v593;
                if (v586)
                  operator delete(v586);
                v586 = v594;
                v585 = v595;
              }
              else
              {
                *(_DWORD *)v585 = v589;
                v585 += 4;
              }
              ++v587;
            }
            while (v587 != (int *)v588);
            v587 = (int *)buf[0].__r_.__value_.__r.__words[0];
          }
          if (v587)
            operator delete(v587);
          v583 += 24;
        }
        while (v583 != v846);
        v597 = *((_QWORD *)&v850 + 1);
        v583 = v850;
        v495 = (char *)v830;
      }
      v598 = operator new(0x10uLL);
      *v598 = 0xAAAAAAAAAAAAAAABLL * ((v597 - v583) >> 3);
      v598[1] = v798;
      v867.__r_.__value_.__r.__words[0] = (std::string::size_type)v598;
      v867.__r_.__value_.__l.__size_ = (std::string::size_type)(v598 + 2);
      v867.__r_.__value_.__r.__words[2] = (std::string::size_type)(v598 + 2);
      v868 = 0;
      v870 = 0;
      v869 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v868, v586, (uint64_t)v585, (v585 - v586) >> 2);
      if (v586)
        operator delete(v586);
      v599 = vdupq_n_s32(v798);
      if (v785)
      {
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = xmmword_1E7C67130;
        *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&off_1E7C67140;
        *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = xmmword_1E7C67150;
        v898 = *(_OWORD *)&off_1E7C67160;
        v923 = xmmword_1C289DFE0;
        v924 = v599;
        v915 = (*((_QWORD *)&v830 + 1) - (_QWORD)v495)
             / 40
             / (0xCCCCCCCCCCCCCCCDLL
              * ((uint64_t)(*((_QWORD *)&v791 + 1) - v791) >> 2))
             * -858993459
             * ((uint64_t)(*((_QWORD *)&v791 + 1) - v791) >> 2);
        v916 = v915;
        v917 = 5;
        v918 = v915;
        v919 = 10;
        v920 = v915;
        v921 = 5;
        v922.i32[0] = v915;
        v908 = 0x100000001;
        v909 = v915;
        v910 = 1;
        v911 = v915;
        v912 = 1;
        v913 = v915;
        LODWORD(v914) = 1;
        v906 = xmmword_1C289E70C;
        v907[0] = unk_1C289E71C;
        *(_QWORD *)&v600 = -1;
        *((_QWORD *)&v600 + 1) = -1;
        v904 = v600;
        v905[0] = v600;
        v902 = xmmword_1C289E72C;
        v903[0] = unk_1C289E73C;
      }
      else
      {
        *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = xmmword_1E7C67190;
        v898 = *(_OWORD *)&off_1E7C671A0;
        v899 = xmmword_1E7C671B0;
        *(_QWORD *)&v900 = "cxt_text_lfeats";
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = xmmword_1E7C67170;
        *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&off_1E7C67180;
        v923 = xmmword_1C289DFE0;
        v924 = v599;
        v925 = 0x1900000005;
        v926 = 25;
        v915 = (*((_QWORD *)&v830 + 1) - (_QWORD)v495)
             / 40
             / (0xCCCCCCCCCCCCCCCDLL
              * ((uint64_t)(*((_QWORD *)&v791 + 1) - v791) >> 2))
             * -858993459
             * ((uint64_t)(*((_QWORD *)&v791 + 1) - v791) >> 2);
        v916 = v915;
        v917 = 5;
        v918 = v915;
        v919 = 10;
        v920 = v915;
        v921 = 5;
        v922 = vdupq_n_s32(v915);
        v908 = 0x100000001;
        v909 = v915;
        v910 = 1;
        v911 = v915;
        v912 = 1;
        v913 = v915;
        *(_QWORD *)&v601 = 0x100000001;
        *((_QWORD *)&v601 + 1) = 0x100000001;
        v914 = v601;
        v906 = xmmword_1C289E74C;
        v907[0] = unk_1C289E75C;
        *(_OWORD *)((char *)v907 + 12) = unk_1C289E768;
        *(_QWORD *)&v601 = -1;
        *((_QWORD *)&v601 + 1) = -1;
        *(_OWORD *)((char *)v905 + 12) = v601;
        v904 = v601;
        v905[0] = v601;
        v902 = xmmword_1C289E778;
        v903[0] = unk_1C289E788;
        *(_OWORD *)((char *)v903 + 12) = unk_1C289E794;
      }
      if (espresso_network_change_input_blob_shapes_seq_rank())
      {
        v779 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1C3BC5928](v779, "Failed to reshape input blobs");
        __cxa_throw(v779, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2 + 240));
      std::string::basic_string[abi:ne180100]<0>(buf, "lfeats");
      v602 = a2 + 232;
      marrs::inference_engine::EspressoModule::setInput(a2 + 232, (uint64_t)buf, (uint64_t)v927);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "dif_lfeats");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v893);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "cxt_lfeats");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v895);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "cxt_cats");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v891);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "obj_cat_emb");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v889);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "input_labels");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v885);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "embedded_labels");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v883);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "pooled_output");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v867);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if ((v785 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "tfeats");
        marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v879);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(buf, "cxt_tfeats");
        marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v875);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(buf, "cxt_text_lfeats");
        marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v871);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(a2 + 240));
      std::string::basic_string[abi:ne180100]<0>(&v923, "scores");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)buf, v602);
      if (v924.i8[7] < 0)
        operator delete((void *)v923);
      marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2 + 240));
      v847 = 0;
      v848 = 0;
      v849 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v847, buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_, (uint64_t)(buf[1].__r_.__value_.__l.__size_ - buf[1].__r_.__value_.__r.__words[0]) >> 2);
      if (buf[1].__r_.__value_.__r.__words[0])
      {
        buf[1].__r_.__value_.__l.__size_ = buf[1].__r_.__value_.__r.__words[0];
        operator delete(buf[1].__r_.__value_.__l.__data_);
      }
      if (buf[0].__r_.__value_.__r.__words[0])
      {
        buf[0].__r_.__value_.__l.__size_ = buf[0].__r_.__value_.__r.__words[0];
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (v868)
      {
        v869 = v868;
        operator delete(v868);
      }
      if (v867.__r_.__value_.__r.__words[0])
      {
        v867.__r_.__value_.__l.__size_ = v867.__r_.__value_.__r.__words[0];
        operator delete(v867.__r_.__value_.__l.__data_);
      }
      if (v872)
      {
        v873 = v872;
        operator delete(v872);
      }
      if (v871.__r_.__value_.__r.__words[0])
      {
        v871.__r_.__value_.__l.__size_ = v871.__r_.__value_.__r.__words[0];
        operator delete(v871.__r_.__value_.__l.__data_);
      }
      if (v876)
      {
        v877 = v876;
        operator delete(v876);
      }
      if (v875.__r_.__value_.__r.__words[0])
      {
        v875.__r_.__value_.__l.__size_ = v875.__r_.__value_.__r.__words[0];
        operator delete(v875.__r_.__value_.__l.__data_);
      }
      if (v880)
      {
        v881 = v880;
        operator delete(v880);
      }
      if (v879.__r_.__value_.__r.__words[0])
      {
        v879.__r_.__value_.__l.__size_ = v879.__r_.__value_.__r.__words[0];
        operator delete(v879.__r_.__value_.__l.__data_);
      }
      if (v884[0])
        operator delete(v884[0]);
      if (v883.__r_.__value_.__r.__words[0])
        operator delete(v883.__r_.__value_.__l.__data_);
      if (v888[0])
        operator delete(v888[0]);
      if (v885)
        operator delete(v885);
      if (v890[0])
        operator delete(v890[0]);
      if (v889.__r_.__value_.__r.__words[0])
        operator delete(v889.__r_.__value_.__l.__data_);
      if (v892[0])
        operator delete(v892[0]);
      if (v891.__r_.__value_.__r.__words[0])
        operator delete(v891.__r_.__value_.__l.__data_);
      if (v896[0])
        operator delete(v896[0]);
      if (v895.__r_.__value_.__r.__words[0])
        operator delete(v895.__r_.__value_.__l.__data_);
      if (v894.__r_.__value_.__r.__words[0])
        operator delete(v894.__r_.__value_.__l.__data_);
      if (v893.__r_.__value_.__r.__words[0])
        operator delete(v893.__r_.__value_.__l.__data_);
      if (*(_QWORD *)&v927[24])
        operator delete(*(void **)&v927[24]);
      if (*(_QWORD *)v927)
        operator delete(*(void **)v927);
      v603.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v604 = MRRLoggerForCategory(3);
      if (v782 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v605 = v604;
        if (os_signpost_enabled(v604))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C281A000, v605, OS_SIGNPOST_INTERVAL_END, spid, "MRModelInference", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
        }
      }
      v606 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v606, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v606, OS_LOG_TYPE_INFO, "END \"MRModelInference\"", (uint8_t *)buf, 2u);
      }
      v607 = MRRLoggerForCategory(3);
      v608 = os_signpost_id_generate(v607);
      v609 = MRRLoggerForCategory(3);
      if (v608 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v610 = v609;
        if (os_signpost_enabled(v609))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C281A000, v610, OS_SIGNPOST_INTERVAL_BEGIN, v608, "MRModelPostProcessing", "", (uint8_t *)buf, 2u);
        }
      }
      v611 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v611, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v611, OS_LOG_TYPE_INFO, "BEGIN \"MRModelPostProcessing\"", (uint8_t *)buf, 2u);
      }
      v612.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v613 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v613, OS_LOG_TYPE_DEBUG))
      {
        v614 = *(float *)(a2 + 56);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v614;
        _os_log_impl(&dword_1C281A000, v613, OS_LOG_TYPE_DEBUG, "absolute threshold - %f", (uint8_t *)buf, 0xCu);
      }
      v615 = MRRLoggerForCategory(2);
      rep = v603.__d_.__rep_;
      v801 = v608 - 1;
      spida = v608;
      v786 = v612.__d_.__rep_;
      if (os_log_type_enabled(v615, OS_LOG_TYPE_DEBUG))
      {
        v616 = a4[1] - *a4;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v616;
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0x84BDA12F684BDA13
                                                                                      * ((v855.i64[1] - v855.i64[0]) >> 3);
        _os_log_impl(&dword_1C281A000, v615, OS_LOG_TYPE_DEBUG, "number of mentions - %zu, number of entities - %lu", (uint8_t *)buf, 0x16u);
      }
      v618 = *a4;
      v617 = a4[1];
      v619 = v617 - *a4;
      v827 = v855.i64[1];
      v812 = v855.i64[0];
      v620 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
      v621 = *(float *)(a2 + 56);
      v887 = 0;
      v885 = 0;
      v886 = 0;
      v807 = v619;
      if (v620 * v619 <= (v848 - (uint64_t)v847) >> 2 && v617 != v618)
      {
        v622 = 0;
        while (v827 == v812)
        {
          v630 = 0;
          v625 = 0;
LABEL_915:
          v637 = v886;
          if (v886 >= v887)
          {
            v639 = 0xAAAAAAAAAAAAAAABLL * ((v886 - (_BYTE *)v885) >> 3);
            v640 = v639 + 1;
            if (v639 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v887 - (_BYTE *)v885) >> 3) > v640)
              v640 = 0x5555555555555556 * ((v887 - (_BYTE *)v885) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v887 - (_BYTE *)v885) >> 3) >= 0x555555555555555)
              v641 = 0xAAAAAAAAAAAAAAALL;
            else
              v641 = v640;
            buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v887;
            v495 = (char *)v830;
            if (v641)
              v641 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v641);
            else
              v642 = 0;
            v643 = (_QWORD *)(v641 + 24 * v639);
            buf[0].__r_.__value_.__r.__words[0] = v641;
            buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v643;
            buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v643;
            buf[1].__r_.__value_.__r.__words[0] = v641 + 24 * v642;
            *v643 = 0;
            v643[1] = 0;
            v643[2] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v643, v625, v630, (v630 - (uint64_t)v625) >> 3);
            buf[0].__r_.__value_.__r.__words[2] += 24;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v885, buf);
            v638 = v886;
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(_QWORD *)v886 = 0;
            *((_QWORD *)v637 + 1) = 0;
            *((_QWORD *)v637 + 2) = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v637, v625, v630, (v630 - (uint64_t)v625) >> 3);
            v638 = v637 + 24;
            v495 = (char *)v830;
          }
          v886 = v638;
          if (v625)
            operator delete(v625);
          if (++v622 == v807)
            goto LABEL_930;
        }
        v623 = 0;
        v624 = 0;
        v625 = 0;
        v626 = 0;
        v627 = v620 * v622;
        while (1)
        {
          if (v626 + v627 >= (v848 - (uint64_t)v847) >> 2)
            std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
          v628 = *((float *)v847 + v626 + v627);
          v629 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v629, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218496;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v622;
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v626;
            HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
            *(double *)&buf[1].__r_.__value_.__l.__data_ = v628;
            _os_log_impl(&dword_1C281A000, v629, OS_LOG_TYPE_DEBUG, "Develop: mention index - %lu, entity index - %lu, score - %f", (uint8_t *)buf, 0x20u);
          }
          if (v628 >= v621)
          {
            if ((unint64_t)v624 >= v623)
            {
              v631 = v624 - v625;
              v632 = v631 + 1;
              if ((unint64_t)(v631 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v623 - (_QWORD)v625) >> 2 > v632)
                v632 = (uint64_t)(v623 - (_QWORD)v625) >> 2;
              if (v623 - (unint64_t)v625 >= 0x7FFFFFFFFFFFFFF8)
                v633 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v633 = v632;
              if (v633)
                v633 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v633);
              else
                v634 = 0;
              v635 = (std::string::size_type *)(v633 + 8 * v631);
              *v635 = v626;
              v630 = (uint64_t)(v635 + 1);
              while (v624 != v625)
              {
                v636 = *--v624;
                *--v635 = v636;
              }
              v623 = v633 + 8 * v634;
              if (v625)
                operator delete(v625);
              v625 = v635;
              goto LABEL_912;
            }
            *v624++ = v626;
          }
          v630 = (uint64_t)v624;
LABEL_912:
          ++v626;
          v624 = (std::string::size_type *)v630;
          if (v626 == v620)
            goto LABEL_915;
        }
      }
LABEL_930:
      if (*(_DWORD *)v857 == 3)
      {
        memset(&v883, 0, sizeof(v883));
        v644 = MRRLoggerForCategory(2);
        v645 = v797;
        if (os_log_type_enabled(v644, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C281A000, v644, OS_LOG_TYPE_INFO, "Orchestrating between CSM and CSM+MR results", (uint8_t *)buf, 2u);
        }
        if ((char *)a4[1] - (char *)*a4 != 8 || *v797 == v797[1])
        {
          v707 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v707, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            v708 = "Resolved CSM span list size is not one or CSMSpan group is empty. Skipping orchestration and return o"
                   "riginal CSM results";
LABEL_1052:
            _os_log_impl(&dword_1C281A000, v707, OS_LOG_TYPE_DEBUG, v708, (uint8_t *)buf, 2u);
          }
        }
        else
        {
          if (sirinluinternal::MatchingSpan::operator==())
          {
            if (a4[1] == *a4)
              goto LABEL_1054;
            v646 = 0;
            while (1)
            {
              v808 = (char *)v885;
              v828 = v646;
              if (0xAAAAAAAAAAAAAAABLL * ((v886 - (_BYTE *)v885) >> 3) <= v646)
                std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
              *(_OWORD *)&v889.__r_.__value_.__r.__words[1] = 0uLL;
              v889.__r_.__value_.__r.__words[0] = (std::string::size_type)&v889.__r_.__value_.__l.__size_;
              v647 = *v797;
              v648 = v797[1];
              if (*v797 == v648)
                goto LABEL_995;
              do
              {
                v928 = 0u;
                memset(v927, 0, sizeof(v927));
                v649 = *(_QWORD *)(v647 + 64);
                if (!v649)
                {
LABEL_961:
                  buf[0].__r_.__value_.__s.__data_[0] = 0;
                  LOBYTE(v898) = 0;
                  goto LABEL_962;
                }
                v650 = *(uint64_t **)(v649 + 56);
                v651 = *(uint64_t **)(v649 + 64);
                while (1)
                {
                  if (v650 == v651)
                  {
                    v659 = MRRLoggerForCategory(2);
                    if (os_log_type_enabled(v659, OS_LOG_TYPE_ERROR))
                    {
                      marrs::mrr::MRRCPPPrintUtils::getUsoGraphDotString((marrs::mrr::MRRCPPPrintUtils *)&v893, *(const sirinluexternal::UsoGraph **)(v647 + 64));
                      v660 = (v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &v893
                           : (std::string *)v893.__r_.__value_.__r.__words[0];
                      LODWORD(v895.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)v895.__r_.__value_.__r.__words + 4) = (std::string::size_type)v660;
                      _os_log_impl(&dword_1C281A000, v659, OS_LOG_TYPE_ERROR, "CSM USOIdentifier does not contain item_id. CSM Span USO is %s", (uint8_t *)&v895, 0xCu);
                      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v893.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_961;
                  }
                  v652 = *v650;
                  v653 = *(_QWORD *)(*v650 + 16);
                  if (v653)
                  {
                    v654 = *(uint64_t **)(v653 + 8);
                    if (v654)
                    {
                      v655 = *((char *)v654 + 23);
                      if (v655 < 0)
                      {
                        if (v654[1] != 7)
                          goto LABEL_954;
                        v654 = (uint64_t *)*v654;
                      }
                      else if (v655 != 7)
                      {
                        goto LABEL_954;
                      }
                      v656 = *(_DWORD *)v654;
                      v657 = *(_DWORD *)((char *)v654 + 3);
                      v658 = v656 == 1835365481 && v657 == 1684627309;
                      if (v658)
                        break;
                    }
                  }
LABEL_954:
                  ++v650;
                }
                memset(&v895, 0, sizeof(v895));
                memset(&v891, 0, sizeof(v891));
                v661 = *(const std::string **)(v652 + 32);
                if (v661)
                  std::string::operator=(&v895, v661);
                v662 = *(const std::string **)(v652 + 8);
                if (v662)
                  std::string::operator=(&v891, v662);
                if (SHIBYTE(v895.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v893, v895.__r_.__value_.__l.__data_, v895.__r_.__value_.__l.__size_);
                else
                  v893 = v895;
                if (SHIBYTE(v891.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v894, v891.__r_.__value_.__l.__data_, v891.__r_.__value_.__l.__size_);
                  buf[0] = v893;
                  buf[1] = v894;
                  LOBYTE(v898) = 1;
                  if (SHIBYTE(v891.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v891.__r_.__value_.__l.__data_);
                }
                else
                {
                  v894 = v891;
                  buf[0] = v893;
                  buf[1] = v891;
                  LOBYTE(v898) = 1;
                }
                if (SHIBYTE(v895.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v895.__r_.__value_.__l.__data_);
                if ((_BYTE)v898)
                {
                  v663 = v889.__r_.__value_.__l.__size_;
                  p_size = &v889.__r_.__value_.__l.__size_;
                  v665 = &v889.__r_.__value_.__l.__size_;
                  if (v889.__r_.__value_.__l.__size_)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        p_size = (std::string::size_type *)v663;
                        v666 = (const void **)(v663 + 32);
                        if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((const void **)&buf[0].__r_.__value_.__l.__data_, (const void **)(v663 + 32)))break;
                        v663 = *p_size;
                        v665 = p_size;
                        if (!*p_size)
                          goto LABEL_984;
                      }
                      if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](v666, (const void **)&buf[0].__r_.__value_.__l.__data_))break;
                      v665 = p_size + 1;
                      v663 = p_size[1];
                      if (!v663)
                        goto LABEL_984;
                    }
                    v668 = p_size;
                  }
                  else
                  {
LABEL_984:
                    v667 = (char *)operator new(0x68uLL);
                    v668 = (std::string::size_type *)v667;
                    *(_QWORD *)v927 = v667;
                    *(_QWORD *)&v927[8] = &v889.__r_.__value_.__l.__size_;
                    v927[16] = 0;
                    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external((std::string *)(v667 + 32), buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
                    else
                      *(std::string *)(v667 + 32) = buf[0];
                    v669 = (std::string *)(v668 + 7);
                    if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
                    {
                      std::string::__init_copy_ctor_external(v669, buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      *(_OWORD *)&v669->__r_.__value_.__l.__data_ = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
                      v668[9] = buf[1].__r_.__value_.__r.__words[2];
                    }
                    v668[11] = 0;
                    v668[12] = 0;
                    v668[10] = 0;
                    v927[16] = 1;
                    *v668 = 0;
                    v668[1] = 0;
                    v668[2] = (std::string::size_type)p_size;
                    *v665 = (std::string::size_type)v668;
                    v670 = (uint64_t *)v668;
                    if (*(_QWORD *)v889.__r_.__value_.__l.__data_)
                    {
                      v889.__r_.__value_.__r.__words[0] = *(_QWORD *)v889.__r_.__value_.__l.__data_;
                      v670 = (uint64_t *)*v665;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v889.__r_.__value_.__l.__size_, v670);
                    ++v889.__r_.__value_.__r.__words[2];
                    *(_QWORD *)v927 = 0;
                    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>>>>::reset[abi:ne180100]((uint64_t)v927);
                  }
                  std::vector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((uint64_t *)v668 + 10, v647);
                }
LABEL_962:
                std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
                v647 += 88;
              }
              while (v647 != v648);
LABEL_995:
              v671 = &v808[24 * v828];
              v672 = *(_QWORD **)v671;
              v673 = (_QWORD *)*((_QWORD *)v671 + 1);
              if (*(_QWORD **)v671 == v673)
                goto LABEL_1022;
              v674 = 0;
              v805 = (float *)v847;
              v809 = (v848 - (uint64_t)v847) >> 2;
              do
              {
                if (0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) <= *v672)
                  std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
                v675 = v855.i64[0] + 216 * *v672;
                v676 = (const std::string::value_type **)(v675 + 56);
                if (*(char *)(v675 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(buf, *v676, *(_QWORD *)(v675 + 64));
                }
                else
                {
                  v677 = *(_OWORD *)v676;
                  buf[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v675 + 72);
                  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v677;
                }
                v678 = (const std::string::value_type **)(v675 + 32);
                if (*(char *)(v675 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(&buf[1], *v678, *(_QWORD *)(v675 + 40));
                }
                else
                {
                  v679 = *(_OWORD *)v678;
                  buf[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v675 + 48);
                  *(_OWORD *)&buf[1].__r_.__value_.__l.__data_ = v679;
                }
                v680 = v889.__r_.__value_.__l.__size_;
                if (v889.__r_.__value_.__l.__size_)
                {
                  v681 = (std::string *)&v889.__r_.__value_.__r.__words[1];
                  do
                  {
                    v682 = v681;
                    v683 = v680 + 32;
                    v684 = std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((const void **)(v680 + 32), (const void **)&buf[0].__r_.__value_.__l.__data_);
                    v685 = (std::string::size_type *)(v680 + 8);
                    if (!v684)
                    {
                      v685 = (std::string::size_type *)v680;
                      v681 = (std::string *)v680;
                    }
                    v680 = *v685;
                  }
                  while (*v685);
                  if (v681 != (std::string *)&v889.__r_.__value_.__r.__words[1])
                  {
                    v686 = v684 ? (const void **)&v682[1].__r_.__value_.__r.__words[1] : (const void **)v683;
                    if ((std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((const void **)&buf[0].__r_.__value_.__l.__data_, v686) & 1) == 0)
                    {
                      v687 = *v672 - 0x7B425ED097B425EDLL * ((v855.i64[1] - v855.i64[0]) >> 3) * v828;
                      if (v809 <= v687)
                        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
                      marrs::mrr::mr::addCSMSpansToMatchingResult(v681[3].__r_.__value_.__l.__size_, v681[3].__r_.__value_.__r.__words[2], (uint64_t *)&v883, v805[v687]);
                      v674 = 1;
                    }
                  }
                }
                if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf[1].__r_.__value_.__l.__data_);
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                ++v672;
              }
              while (v672 != v673);
              if ((v674 & 1) == 0)
LABEL_1022:
                marrs::mrr::mr::addCSMSpansToMatchingResult(*v797, v797[1], (uint64_t *)&v883, 1.0);
              std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy((_QWORD *)v889.__r_.__value_.__l.__size_);
              v495 = (char *)v830;
              v646 = v828 + 1;
              if (v828 + 1 >= a4[1] - *a4)
              {
LABEL_1054:
                std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate((void **)&v860.__r_.__value_.__l.__data_);
                v860 = v883;
                memset(&v883, 0, sizeof(v883));
                buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v883;
                std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                goto LABEL_1055;
              }
            }
          }
          v645 = v797;
          v707 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v707, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            v708 = "Resolved CSM span and span group does not match. Skipping orchestration and return original CSM results";
            goto LABEL_1052;
          }
        }
        marrs::mrr::mr::addCSMSpansToMatchingResult(*v645, v645[1], (uint64_t *)&v883, 1.0);
        goto LABEL_1054;
      }
      memset(&v893, 0, sizeof(v893));
      v688 = operator new(4uLL);
      *v688 = 0;
      *(_QWORD *)&v927[8] = v688 + 1;
      *(_QWORD *)&v927[16] = v688 + 1;
      *(_QWORD *)v927 = v688;
      v690 = *a4;
      v689 = a4[1];
      if (v689 == *a4)
        goto LABEL_1048;
      v691 = 0;
      v692 = 0;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v886 - (_BYTE *)v885) >> 3) <= v692)
          std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
        v693 = (char *)v885 + 24 * v692;
        v694 = *(unint64_t **)v693;
        v695 = (unint64_t *)*((_QWORD *)v693 + 1);
        if (*(unint64_t **)v693 != v695)
        {
          do
          {
            v696 = *v694;
            v697 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
            if (v697 <= *v694)
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            v698 = v696 + v697 * v692;
            if (v698 >= (v848 - (uint64_t)v847) >> 2)
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            v699 = *a4;
            if (v692 >= a4[1] - *a4)
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            v700 = (marrs::mrr::mr::MRREntity *)(v855.i64[0] + 216 * v696);
            v701 = *((float *)v847 + v698);
            v702 = v699[v692];
            if (v691 >= v893.__r_.__value_.__r.__words[2])
            {
              v703 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v691 - v893.__r_.__value_.__r.__words[0]) >> 3);
              v704 = v703 + 1;
              if (v703 + 1 > 0xBE82FA0BE82FA0)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5F417D05F417D06
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) > v704)
                v704 = 0x5F417D05F417D06
                     * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3);
              if (0x82FA0BE82FA0BE83
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
                v705 = 0xBE82FA0BE82FA0;
              else
                v705 = v704;
              buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v893.__r_.__value_.__r.__words[2];
              if (v705)
                v705 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v705);
              else
                v706 = 0;
              buf[0].__r_.__value_.__r.__words[0] = v705;
              buf[0].__r_.__value_.__l.__size_ = v705 + 344 * v703;
              buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
              buf[1].__r_.__value_.__r.__words[0] = v705 + 344 * v706;
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(buf[0].__r_.__value_.__l.__size_, v702, v700, (uint64_t)v927, v701);
              buf[0].__r_.__value_.__r.__words[2] += 344;
              std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v893, buf);
              v691 = v893.__r_.__value_.__l.__size_;
              std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(v691, v699[v692], v700, (uint64_t)v927, *((float *)v847 + v698));
              v691 += 344;
            }
            v893.__r_.__value_.__l.__size_ = v691;
            ++v694;
          }
          while (v694 != v695);
          v690 = *a4;
          v689 = a4[1];
        }
        ++v692;
      }
      while (v692 < v689 - v690);
      v688 = *(_DWORD **)v927;
      if (*(_QWORD *)v927)
LABEL_1048:
        operator delete(v688);
      std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate((void **)&v860.__r_.__value_.__l.__data_);
      v860 = v893;
      memset(&v893, 0, sizeof(v893));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v495 = (char *)v830;
LABEL_1055:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      v709 = *a4;
      v815 = a4[1];
      if (v709 == v815)
      {
        v744 = 0;
        v743 = 0;
LABEL_1124:
        v745 = 126 - 2 * __clz(0x82FA0BE82FA0BE83 * ((uint64_t)(v744 - v743) >> 3));
        if (v744 == v743)
          v746 = 0;
        else
          v746 = v745;
        std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v743, v744, v746, 1);
        v747.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v748 = MRRLoggerForCategory(3);
        if (v801 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v749 = v748;
          if (os_signpost_enabled(v748))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C281A000, v749, OS_SIGNPOST_INTERVAL_END, spida, "MRModelPostProcessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
          }
        }
        v750 = MRRLoggerForCategory(0);
        if (os_log_type_enabled(v750, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C281A000, v750, OS_LOG_TYPE_INFO, "END \"MRModelPostProcessing\"", (uint8_t *)buf, 2u);
        }
        std::to_string(&v875, (v781.__d_.__rep_ - v792.__d_.__rep_) / 1000000);
        v751 = std::string::insert(&v875, 0, "[MARRS] Visual Mention Resolver Measurements:\n      Pre-processing ");
        v752 = *(_OWORD *)&v751->__r_.__value_.__l.__data_;
        v879.__r_.__value_.__r.__words[2] = v751->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v879.__r_.__value_.__l.__data_ = v752;
        v751->__r_.__value_.__l.__size_ = 0;
        v751->__r_.__value_.__r.__words[2] = 0;
        v751->__r_.__value_.__r.__words[0] = 0;
        v753 = std::string::append(&v879, " ms\n");
        v754 = *(_OWORD *)&v753->__r_.__value_.__l.__data_;
        v883.__r_.__value_.__r.__words[2] = v753->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v883.__r_.__value_.__l.__data_ = v754;
        v753->__r_.__value_.__l.__size_ = 0;
        v753->__r_.__value_.__r.__words[2] = 0;
        v753->__r_.__value_.__r.__words[0] = 0;
        v755 = std::string::append(&v883, "      Inference: ");
        v756 = *(_OWORD *)&v755->__r_.__value_.__l.__data_;
        v889.__r_.__value_.__r.__words[2] = v755->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v889.__r_.__value_.__l.__data_ = v756;
        v755->__r_.__value_.__l.__size_ = 0;
        v755->__r_.__value_.__r.__words[2] = 0;
        v755->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v871, (rep - v780.__d_.__rep_) / 1000000);
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v757 = &v871;
        else
          v757 = (std::string *)v871.__r_.__value_.__r.__words[0];
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v758 = HIBYTE(v871.__r_.__value_.__r.__words[2]);
        else
          v758 = v871.__r_.__value_.__l.__size_;
        v759 = std::string::append(&v889, (const std::string::value_type *)v757, v758);
        v760 = *(_OWORD *)&v759->__r_.__value_.__l.__data_;
        v891.__r_.__value_.__r.__words[2] = v759->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v891.__r_.__value_.__l.__data_ = v760;
        v759->__r_.__value_.__l.__size_ = 0;
        v759->__r_.__value_.__r.__words[2] = 0;
        v759->__r_.__value_.__r.__words[0] = 0;
        v761 = std::string::append(&v891, " ms\n");
        v762 = *(_OWORD *)&v761->__r_.__value_.__l.__data_;
        v895.__r_.__value_.__r.__words[2] = v761->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v895.__r_.__value_.__l.__data_ = v762;
        v761->__r_.__value_.__l.__size_ = 0;
        v761->__r_.__value_.__r.__words[2] = 0;
        v761->__r_.__value_.__r.__words[0] = 0;
        v763 = std::string::append(&v895, "      Post-processing: ");
        v764 = *(_OWORD *)&v763->__r_.__value_.__l.__data_;
        v893.__r_.__value_.__r.__words[2] = v763->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v764;
        v763->__r_.__value_.__l.__size_ = 0;
        v763->__r_.__value_.__r.__words[2] = 0;
        v763->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v867, (v747.__d_.__rep_ - v786) / 1000000);
        if ((v867.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v765 = &v867;
        else
          v765 = (std::string *)v867.__r_.__value_.__r.__words[0];
        if ((v867.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v766 = HIBYTE(v867.__r_.__value_.__r.__words[2]);
        else
          v766 = v867.__r_.__value_.__l.__size_;
        v767 = std::string::append(&v893, (const std::string::value_type *)v765, v766);
        v768 = *(_OWORD *)&v767->__r_.__value_.__l.__data_;
        *(_QWORD *)&v927[16] = *((_QWORD *)&v767->__r_.__value_.__l + 2);
        *(_OWORD *)v927 = v768;
        v767->__r_.__value_.__l.__size_ = 0;
        v767->__r_.__value_.__r.__words[2] = 0;
        v767->__r_.__value_.__r.__words[0] = 0;
        v769 = std::string::append((std::string *)v927, " ms\n");
        v770 = *(_OWORD *)&v769->__r_.__value_.__l.__data_;
        buf[0].__r_.__value_.__r.__words[2] = v769->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v770;
        v769->__r_.__value_.__l.__size_ = 0;
        v769->__r_.__value_.__r.__words[2] = 0;
        v769->__r_.__value_.__r.__words[0] = 0;
        if ((v927[23] & 0x80000000) != 0)
          operator delete(*(void **)v927);
        if (SHIBYTE(v867.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v867.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v895.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v895.__r_.__value_.__l.__data_);
        if (SHIBYTE(v891.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v891.__r_.__value_.__l.__data_);
        if (SHIBYTE(v871.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v871.__r_.__value_.__l.__data_);
        if (SHIBYTE(v889.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v889.__r_.__value_.__l.__data_);
        if (SHIBYTE(v883.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v883.__r_.__value_.__l.__data_);
        if (SHIBYTE(v879.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v879.__r_.__value_.__l.__data_);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v875.__r_.__value_.__l.__data_);
        v771 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v771, OS_LOG_TYPE_DEBUG))
        {
          v772 = buf;
          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v772 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
          *(_DWORD *)v927 = 136315138;
          *(_QWORD *)&v927[4] = v772;
          _os_log_impl(&dword_1C281A000, v771, OS_LOG_TYPE_DEBUG, "%s", v927, 0xCu);
        }
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v885;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (v847)
          operator delete(v847);
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v850;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if ((_QWORD)v789)
          operator delete((void *)v789);
        if ((_QWORD)v787)
          operator delete((void *)v787);
        if ((_QWORD)v788)
          operator delete((void *)v788);
        *(_QWORD *)v927 = &v852;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        if (v495)
          operator delete(v495);
        *(_QWORD *)v927 = &v853;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        *(_QWORD *)v927 = &v854;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        if ((_QWORD)v795)
          operator delete((void *)v795);
        if ((_QWORD)v790)
          operator delete((void *)v790);
        if ((_QWORD)v791)
          operator delete((void *)v791);
LABEL_1186:
        *(_QWORD *)v927 = &v855;
        std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        v16 = v857;
        if (!v857)
          goto LABEL_79;
        goto LABEL_78;
      }
LABEL_1056:
      v710 = *v709;
      memset(&v893, 0, sizeof(v893));
      v711 = v860.__r_.__value_.__l.__size_;
      v712 = v860.__r_.__value_.__r.__words[0];
      if (v860.__r_.__value_.__r.__words[0] == v860.__r_.__value_.__l.__size_)
      {
        v713 = 0;
      }
      else
      {
        v713 = 0;
        do
        {
          if (*(_DWORD *)(v712 + 76) == *(_DWORD *)(v710 + 76) && *(_DWORD *)(v712 + 72) == *(_DWORD *)(v710 + 72))
          {
            if ((unint64_t)v713 >= v893.__r_.__value_.__r.__words[2])
            {
              v714 = 0x82FA0BE82FA0BE83 * ((uint64_t)((uint64_t)v713 - v893.__r_.__value_.__r.__words[0]) >> 3);
              v715 = v714 + 1;
              if (v714 + 1 > 0xBE82FA0BE82FA0)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5F417D05F417D06
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) > v715)
                v715 = 0x5F417D05F417D06
                     * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3);
              if (0x82FA0BE82FA0BE83
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
                v716 = 0xBE82FA0BE82FA0;
              else
                v716 = v715;
              buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v893.__r_.__value_.__r.__words[2];
              if (v716)
                v716 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v716);
              else
                v717 = 0;
              buf[0].__r_.__value_.__r.__words[0] = v716;
              buf[0].__r_.__value_.__l.__size_ = v716 + 344 * v714;
              buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
              buf[1].__r_.__value_.__r.__words[0] = v716 + 344 * v717;
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)buf[0].__r_.__value_.__l.__size_, v712);
              buf[0].__r_.__value_.__r.__words[2] += 344;
              std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v893, buf);
              v713 = (_QWORD *)v893.__r_.__value_.__l.__size_;
              std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v713, v712);
              v713 += 43;
            }
            v893.__r_.__value_.__l.__size_ = (std::string::size_type)v713;
          }
          v712 += 344;
        }
        while (v712 != v711);
      }
      if (fabsf(*(float *)(a2 + 152)) < 0.0001)
      {
        memset(&v895, 0, sizeof(v895));
        std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)&v895, (uint64_t)v893.__r_.__value_.__l.__data_, (uint64_t)v713, 0x82FA0BE82FA0BE83 * ((uint64_t)((uint64_t)v713 - v893.__r_.__value_.__r.__words[0]) >> 3));
        goto LABEL_1121;
      }
      *(_OWORD *)&v927[8] = 0uLL;
      *(_QWORD *)v927 = &v927[8];
      v718 = v893.__r_.__value_.__r.__words[0];
      if (v893.__r_.__value_.__l.__data_ == (std::string::pointer)v713)
      {
        memset(&v895, 0, sizeof(v895));
        goto LABEL_1120;
      }
      for (m = 0; ; m = *(_QWORD *)&v927[8])
      {
        v720 = *(_DWORD *)(v718 + 96);
        if (!m)
          break;
        v721 = (uint64_t *)&v927[8];
        do
        {
          v722 = (uint64_t *)m;
          v723 = v721;
          v724 = *(_DWORD *)(m + 28);
          v725 = (uint64_t *)(m + 8);
          if (v724 >= v720)
          {
            v725 = v722;
            v721 = v722;
          }
          m = *v725;
        }
        while (m);
        if (v721 == (uint64_t *)&v927[8])
          break;
        v726 = v724 >= v720 ? v722 : v723;
        if (v720 < *((_DWORD *)v726 + 7))
          break;
        v729 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, v720, (_DWORD *)(v718 + 96));
        v727 = *(float *)(v718 + 88);
        if (*((float *)v729 + 8) < v727)
        {
          v728 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, *(_DWORD *)(v718 + 96), (_DWORD *)(v718 + 96));
          goto LABEL_1091;
        }
LABEL_1092:
        v718 += 344;
        if ((_QWORD *)v718 == v713)
        {
          v731 = v893.__r_.__value_.__l.__size_;
          v730 = v893.__r_.__value_.__r.__words[0];
          memset(&v895, 0, sizeof(v895));
          while (v730 != v731)
          {
            v732 = *((float *)std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, *(_DWORD *)(v730 + 96), (_DWORD *)(v730 + 96))+ 8);
            if (vabds_f32(v732, *(float *)(v730 + 88)) <= *(float *)(a2 + 152))
            {
              v737 = v895.__r_.__value_.__l.__size_;
              if (v895.__r_.__value_.__l.__size_ >= v895.__r_.__value_.__r.__words[2])
              {
                v739 = 0x82FA0BE82FA0BE83
                     * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3);
                v740 = v739 + 1;
                if (v739 + 1 > 0xBE82FA0BE82FA0)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if (0x5F417D05F417D06
                   * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) > v740)
                  v740 = 0x5F417D05F417D06
                       * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3);
                if (0x82FA0BE82FA0BE83
                   * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
                  v741 = 0xBE82FA0BE82FA0;
                else
                  v741 = v740;
                buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v895.__r_.__value_.__r.__words[2];
                if (v741)
                  v741 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v741);
                else
                  v742 = 0;
                buf[0].__r_.__value_.__r.__words[0] = v741;
                buf[0].__r_.__value_.__l.__size_ = v741 + 344 * v739;
                buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
                buf[1].__r_.__value_.__r.__words[0] = v741 + 344 * v742;
                std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)buf[0].__r_.__value_.__l.__size_, v730);
                buf[0].__r_.__value_.__r.__words[2] += 344;
                std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v895, buf);
                v738 = v895.__r_.__value_.__l.__size_;
                std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)v895.__r_.__value_.__l.__size_, v730);
                v738 = v737 + 344;
              }
              v895.__r_.__value_.__l.__size_ = v738;
            }
            else
            {
              v733 = MRRLoggerForCategory(2);
              if (os_log_type_enabled(v733, OS_LOG_TYPE_INFO))
              {
                v734 = *(_QWORD *)(v730 + 32);
                if (*(char *)(v734 + 23) < 0)
                  v734 = *(_QWORD *)v734;
                v735 = (_QWORD *)(v730 + 104);
                if (*(char *)(v730 + 127) < 0)
                  v735 = (_QWORD *)*v735;
                v736 = *(float *)(v730 + 88);
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v734;
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v735;
                HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                *(double *)&buf[1].__r_.__value_.__l.__data_ = v736;
                LOWORD(buf[1].__r_.__value_.__r.__words[1]) = 2048;
                *(double *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 2) = v732;
                _os_log_impl(&dword_1C281A000, v733, OS_LOG_TYPE_INFO, "skipping matching result with mention - %s, entity - %s with model score - %f, since it has less than that of max score of %f for this entity type", (uint8_t *)buf, 0x2Au);
              }
            }
            v730 += 344;
          }
LABEL_1120:
          std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(_QWORD **)&v927[8]);
LABEL_1121:
          std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>>(a1, (__n128 *)*a1, (uint64_t)v895.__r_.__value_.__l.__data_, v895.__r_.__value_.__l.__size_, 0x82FA0BE82FA0BE83 * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3));
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v895;
          std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
          std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (++v709 == v815)
          {
            v743 = *a1;
            v744 = a1[1];
            v495 = (char *)v830;
            goto LABEL_1124;
          }
          goto LABEL_1056;
        }
      }
      v727 = *(float *)(v718 + 88);
      v728 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, v720, (_DWORD *)(v718 + 96));
LABEL_1091:
      *((float *)v728 + 8) = v727;
      goto LABEL_1092;
    }
    v49 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C281A000, v49, OS_LOG_TYPE_DEBUG, "[MR]Empty utterance embedding, returning empty. This is likely due to missing embedding in MarrsTests/test_artifacts/testEmbeddings.json", (uint8_t *)buf, 2u);
    }
    v50 = MRRLoggerForCategory(3);
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v51 = v50;
      if (os_signpost_enabled(v50))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C281A000, v51, OS_SIGNPOST_INTERVAL_END, v11, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
      }
    }
    v45 = MRRLoggerForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      goto LABEL_76;
    }
  }
  else
  {
    v40 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      v41 = *(_QWORD *)(a2 + 112);
      v42 = a3[5];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v41;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v42;
      _os_log_impl(&dword_1C281A000, v40, OS_LOG_TYPE_DEBUG, "Embedding dim mismatch, returning empty, asset expected %zu, got %llu", (uint8_t *)buf, 0x16u);
    }
    v43 = MRRLoggerForCategory(3);
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v44 = v43;
      if (os_signpost_enabled(v43))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C281A000, v44, OS_SIGNPOST_INTERVAL_END, v11, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
      }
    }
    v45 = MRRLoggerForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
LABEL_76:
      _os_log_impl(&dword_1C281A000, v45, OS_LOG_TYPE_INFO, "END \"MRModelPreprocessing\"", (uint8_t *)buf, 2u);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v16)
  {
LABEL_78:
    v858 = v16;
    operator delete(v16);
  }
LABEL_79:
  *(_QWORD *)v927 = &v860;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
}

void sub_1C28584BC(_Unwind_Exception *a1)
{
  uint64_t v2;
  void *v3;
  void *v4[6];
  char v5;
  void **v6[90];

  if (v5 < 0)
    operator delete(v4[4]);
  v6[0] = (void **)&v2;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](v6);
  if (v3)
    operator delete(v3);
  v6[0] = v4;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void sub_1C2858DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a69;
  uint64_t v69;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void **v74[90];

  STACK[0x4A0] = (unint64_t)&STACK[0x470];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
  *(_QWORD *)(v69 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  *(_QWORD *)(v69 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  STACK[0x440] = (unint64_t)&STACK[0x3B0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (__p)
    operator delete(__p);
  STACK[0x440] = (unint64_t)&a57;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (a23)
    operator delete(a23);
  if (a17)
    operator delete(a17);
  if (a19)
    operator delete(a19);
  STACK[0x440] = (unint64_t)&a61;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (a49)
    operator delete(a49);
  STACK[0x440] = (unint64_t)&a65;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = (unint64_t)&a69;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (a31)
    operator delete(a31);
  if (a25)
    operator delete(a25);
  if (a27)
    operator delete(a27);
  v74[0] = (void **)&v71;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](v74);
  if (v72)
    operator delete(v72);
  v74[0] = (void **)&v73;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v74);
  _Unwind_Resume(a1);
}

void sub_1C2858E00(uint64_t a1, int a2)
{
  void *v2;
  void *v3;

  if (a2)
  {
    if (v2)
      operator delete(v2);
    if (SLOBYTE(STACK[0x267]) < 0)
      operator delete((void *)STACK[0x250]);
    v3 = (void *)STACK[0x4A0];
    if (STACK[0x4A0])
    {
      STACK[0x4A8] = (unint64_t)v3;
      operator delete(v3);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x440];
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    JUMPOUT(0x1C2859614);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2858E1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p)
{
  if (a2)
  {
    if (__p)
    {
      operator delete(__p);
      JUMPOUT(0x1C2859124);
    }
    JUMPOUT(0x1C2859154);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2858E28(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    STACK[0x418] = v2;
    JUMPOUT(0x1C2858E34);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2858E7C()
{
  unint64_t v0;

  STACK[0x478] = v0;
  JUMPOUT(0x1C2858FE0);
}

void sub_1C2858E88()
{
  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&STACK[0x4A0]);
  JUMPOUT(0x1C2858FE0);
}

void sub_1C2858EC0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C2858EC8);
  JUMPOUT(0x1C2859844);
}

void sub_1C2858EE0(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    STACK[0x440] = v2 - 208;
    std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
    std::pair<std::vector<marrs::mrr::mr::MRREntity>,std::vector<marrs::mrr::mr::MRREntity>>::~pair((void **)&STACK[0x4A0]);
    JUMPOUT(0x1C28595ECLL);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2858EE8(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    *(_QWORD *)(v2 - 208) = &STACK[0x250];
    std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 208));
    std::pair<std::vector<marrs::mrr::mr::MRREntity>,std::vector<marrs::mrr::mr::MRREntity>>::~pair((void **)&STACK[0x4A0]);
    JUMPOUT(0x1C2858F08);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2858F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  *(_QWORD *)(v40 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v40 - 208);
  *(_QWORD *)(v40 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v40 - 208);
  JUMPOUT(0x1C2859208);
}

void sub_1C2858F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  unint64_t v40;
  uint64_t v41;

  STACK[0x448] = v40;
  *(_QWORD *)(v41 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v41 - 208);
  *(_QWORD *)(v41 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v41 - 208);
  JUMPOUT(0x1C2859208);
}

void sub_1C2858F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&STACK[0x4A0]);
  *(_QWORD *)(v40 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 208));
  *(_QWORD *)(v40 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 208));
  JUMPOUT(0x1C2859208);
}

void sub_1C2858F58(uint64_t a1, int a2)
{
  unint64_t v2;
  void *v3;
  unint64_t v4;

  if (a2)
  {
    STACK[0x450] = v4;
    STACK[0x448] = v2;
    STACK[0x440] = (unint64_t)v3;
    if (SLOBYTE(STACK[0x267]) < 0)
      operator delete((void *)STACK[0x250]);
    std::__tree<std::string>::destroy((char *)STACK[0x4A8]);
    if (v3)
    {
      STACK[0x448] = (unint64_t)v3;
      operator delete(v3);
    }
    JUMPOUT(0x1C28594D8);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2858F74()
{
  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&STACK[0x4A0]);
  JUMPOUT(0x1C28591ECLL);
}

void sub_1C2858F84()
{
  unint64_t v0;

  STACK[0x448] = v0;
  JUMPOUT(0x1C28591ECLL);
}

void sub_1C2858F98(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C2859404);
  JUMPOUT(0x1C2859844);
}

void sub_1C2858FA8(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (*(char *)(v2 - 185) < 0)
      operator delete(*(void **)(v2 - 208));
    if (SLOBYTE(STACK[0x267]) < 0)
      operator delete((void *)STACK[0x250]);
    JUMPOUT(0x1C2859310);
  }
  JUMPOUT(0x1C2859340);
}

void sub_1C2858FC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49)
{
  unint64_t v49;

  if (a2)
  {
    STACK[0x260] = v49;
    STACK[0x250] = a49;
    JUMPOUT(0x1C2859134);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2858FDC()
{
  uint64_t v0;

  STACK[0x410] = (unint64_t)&STACK[0x470];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x410]);
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(_QWORD **)(v0 - 200));
  JUMPOUT(0x1C2859170);
}

void sub_1C2858FF4(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;

  if (a2)
  {
    if (v2)
      operator delete(v2);
    STACK[0x470] = v3 - 208;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
    JUMPOUT(0x1C28591C4);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2859024()
{
  if (STACK[0x4A0])
    JUMPOUT(0x1C2859030);
  JUMPOUT(0x1C2859034);
}

void sub_1C285905C()
{
  if (STACK[0x4A0])
    JUMPOUT(0x1C2859068);
  JUMPOUT(0x1C285906CLL);
}

void sub_1C2859080(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    STACK[0x470] = v2 - 208;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
    JUMPOUT(0x1C28591C4);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C28590A8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    STACK[0x448] = v2;
    JUMPOUT(0x1C28591B4);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C28590B4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C28590C0);
  JUMPOUT(0x1C28590D0);
}

void sub_1C28590DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,__int128 a49)
{
  void *v49;

  if (a2)
  {
    if (v49)
      operator delete(v49);
    JUMPOUT(0x1C2859158);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C28590FC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C2859104);
  JUMPOUT(0x1C2859844);
}

void sub_1C2859198(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C28591B4);
  JUMPOUT(0x1C2859844);
}

void sub_1C28591A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    *(_QWORD *)(v3 - 200) = v2;
    JUMPOUT(0x1C28591A8);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C28591E8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    operator delete(v1);
  *(_QWORD *)(v0 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  JUMPOUT(0x1C2859208);
}

void sub_1C2859220()
{
  void *v0;
  uint64_t v1;

  if (v0)
    operator delete(v0);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x320]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x350]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x380]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x3B0]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x3E0]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x410]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x470]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x440]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)(v1 - 208));
  JUMPOUT(0x1C2859768);
}

void sub_1C2859260()
{
  void *v0;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x1C2859254);
}

void sub_1C2859274()
{
  void *v0;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x1C285944CLL);
}

void sub_1C2859288(uint64_t a1, int a2)
{
  if (a2)
  {
    if (STACK[0x470])
      operator delete((void *)STACK[0x470]);
    if (SLOBYTE(STACK[0x457]) < 0)
      operator delete((void *)STACK[0x440]);
    JUMPOUT(0x1C28593C8);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C28592A0()
{
  void *v0;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x1C2859760);
}

void sub_1C28592B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a69;
  uint64_t v69;

  if (!v69)
  {
    STACK[0x440] = (unint64_t)&a57;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    if (a23)
      operator delete(a23);
    if (a17)
      operator delete(a17);
    if (a19)
      operator delete(a19);
    STACK[0x440] = (unint64_t)&a61;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    if (a49)
      operator delete(a49);
    STACK[0x440] = (unint64_t)&a65;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    STACK[0x440] = (unint64_t)&a69;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    if (a31)
      operator delete(a31);
    if (a25)
      operator delete(a25);
    if (a27)
      operator delete(a27);
    JUMPOUT(0x1C2859818);
  }
  JUMPOUT(0x1C285937CLL);
}

void sub_1C28592C4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C28592C8);
  JUMPOUT(0x1C2859844);
}

void sub_1C28592D8(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    STACK[0x450] = v4;
    STACK[0x448] = v2;
    STACK[0x440] = v3;
    JUMPOUT(0x1C28592F0);
  }
  JUMPOUT(0x1C2859340);
}

void sub_1C2859348()
{
  STACK[0x350] = (unint64_t)&STACK[0x4A0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  JUMPOUT(0x1C2859438);
}

void sub_1C2859350()
{
  void *v0;
  uint64_t v1;

  if (v0)
    operator delete(v0);
  *(_QWORD *)(v1 - 208) = &STACK[0x3B0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  JUMPOUT(0x1C2859374);
}

void sub_1C2859384()
{
  STACK[0x3E0] = (unint64_t)&STACK[0x4A0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  JUMPOUT(0x1C28595C4);
}

void sub_1C285938C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,os_signpost_id_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  void *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;

  if (a2)
  {
    v41 = (void *)STACK[0x250];
    if (STACK[0x250])
    {
      STACK[0x258] = (unint64_t)v41;
      operator delete(v41);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x410];
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    __cxa_begin_catch(a1);
    v42 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      LOWORD(STACK[0x250]) = 0;
      _os_log_impl(&dword_1C281A000, v42, OS_LOG_TYPE_INFO, "[VisualMR] Error computing features, returning empty", (uint8_t *)&STACK[0x250], 2u);
    }
    v43 = MRRLoggerForCategory(3);
    if (a34 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v44 = v43;
      if (os_signpost_enabled(v43))
      {
        LOWORD(STACK[0x250]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C281A000, v44, OS_SIGNPOST_INTERVAL_END, a30, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)&STACK[0x250], 2u);
      }
    }
    v45 = MRRLoggerForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(STACK[0x250]) = 0;
      _os_log_impl(&dword_1C281A000, v45, OS_LOG_TYPE_INFO, "END \"MRModelPreprocessing\"", (uint8_t *)&STACK[0x250], 2u);
    }
    *(_OWORD *)a40 = *(_OWORD *)&STACK[0x230];
    *(_QWORD *)(a40 + 16) = STACK[0x240];
    STACK[0x240] = 0;
    STACK[0x238] = 0;
    STACK[0x230] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C2858004);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C285939C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1C2859844);
  JUMPOUT(0x1C28593C0);
}

void sub_1C28593A8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C28593B0);
  JUMPOUT(0x1C2859844);
}

void sub_1C28593E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  unint64_t v47;
  uint64_t v48;
  NSObject *v51;
  NSObject *v52;

  if (a2)
  {
    STACK[0x420] = a47;
    STACK[0x418] = v47;
    STACK[0x410] = (unint64_t)__p;
    if (*(char *)(v48 - 185) < 0)
      operator delete(*(void **)(v48 - 208));
    std::__tree<std::string>::destroy((char *)STACK[0x258]);
    if (__p)
    {
      STACK[0x418] = (unint64_t)__p;
      operator delete(__p);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x470];
    std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    __cxa_begin_catch(a1);
    if (a2 == 3)
    {
      v51 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C281A000, v51, OS_LOG_TYPE_INFO, "IO Error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    else
    {
      v52 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C281A000, v52, OS_LOG_TYPE_INFO, "Unknown error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1C2854D68);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C2859410()
{
  if (STACK[0x350])
    operator delete((void *)STACK[0x350]);
  STACK[0x350] = (unint64_t)&STACK[0x4A0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  JUMPOUT(0x1C2859438);
}

void sub_1C2859460(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  unint64_t v47;
  uint64_t v48;
  NSObject *v51;
  NSObject *v52;

  if (a2)
  {
    STACK[0x420] = a47;
    STACK[0x418] = v47;
    STACK[0x410] = (unint64_t)a46;
    if (SLOBYTE(STACK[0x457]) < 0)
      operator delete((void *)STACK[0x440]);
    if (*(char *)(v48 - 185) < 0)
      operator delete(*(void **)(v48 - 208));
    std::__tree<std::string>::destroy((char *)STACK[0x258]);
    if (a46)
    {
      STACK[0x418] = (unint64_t)a46;
      operator delete(a46);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x470];
    std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    __cxa_begin_catch(a1);
    if (a2 == 3)
    {
      v51 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C281A000, v51, OS_LOG_TYPE_INFO, "IO Error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    else
    {
      v52 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C281A000, v52, OS_LOG_TYPE_INFO, "Unknown error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1C2854D68);
  }
  JUMPOUT(0x1C2859844);
}

void sub_1C285957C()
{
  JUMPOUT(0x1C28585E0);
}

void sub_1C2859598()
{
  __cxa_end_catch();
  JUMPOUT(0x1C2859590);
}

void sub_1C28595E0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1C28595E8);
  JUMPOUT(0x1C2859844);
}

void sub_1C285971C()
{
  JUMPOUT(0x1C28597A8);
}

void sub_1C2859724()
{
  __cxa_end_catch();
  JUMPOUT(0x1C28597A8);
}

void sub_1C2859738(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1C285973CLL);
  __clang_call_terminate(a1);
}

void sub_1C2859748()
{
  void *v0;
  uint64_t v1;

  if (v0)
    operator delete(v0);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x440]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)(v1 - 208));
  JUMPOUT(0x1C2859768);
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate(void **a1)
{
  void *v1;
  void *v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
      std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100]((uint64_t)v3 - 344);
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v3 = v1[1];
    v4 = **a1;
    if (v3 != v2)
      std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100]((uint64_t)v3 - 344);
    v1[1] = v2;
    operator delete(v4);
  }
}

void std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 88;
      v7 = v4 - 88;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::mrr::mr::addCSMSpansToMatchingResult(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  _DWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *__p[3];
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;

  v8 = operator new(4uLL);
  *v8 = 3;
  __p[1] = v8 + 1;
  __p[2] = v8 + 1;
  __p[0] = v8;
  if (a1 == a2)
    goto LABEL_17;
  v9 = (unint64_t *)(a3 + 2);
  v10 = a3[1];
  do
  {
    if (v10 >= *v9)
    {
      v11 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v10 - *a3) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xBE82FA0BE82FA0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5F417D05F417D06 * ((uint64_t)(*v9 - *a3) >> 3) > v12)
        v12 = 0x5F417D05F417D06 * ((uint64_t)(*v9 - *a3) >> 3);
      if (0x82FA0BE82FA0BE83 * ((uint64_t)(*v9 - *a3) >> 3) >= 0x5F417D05F417D0)
        v13 = 0xBE82FA0BE82FA0;
      else
        v13 = v12;
      v20 = a3 + 2;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v13);
      else
        v14 = 0;
      v16 = v13;
      v17 = v13 + 344 * v11;
      v18 = v17;
      v19 = v13 + 344 * v14;
      marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v17, a4, a1, (uint64_t)__p);
      v18 += 344;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a3, &v16);
      v10 = a3[1];
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v16);
    }
    else
    {
      marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v10, a4, a1, (uint64_t)__p);
      v10 += 344;
      a3[1] = v10;
    }
    a3[1] = v10;
    a1 += 88;
  }
  while (a1 != a2);
  v8 = __p[0];
  if (__p[0])
LABEL_17:
    operator delete(v8);
}

void sub_1C2859C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x1C3BC54C0]();
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a2 + 88);
  std::__optional_copy_base<marrs::mrr::mr::MRREntity,false>::__optional_copy_base[abi:ne180100]((marrs::mrr::mr::MRREntity *)(v4 + 96), (const marrs::mrr::mr::MRREntity *)(a2 + 96));
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  return std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(a1 + 40, *(const void **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
}

void sub_1C2859CE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 312))
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  MEMORY[0x1C3BC54D8](v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(unint64_t a1)
{
  if (a1 >= 0xBE82FA0BE82FA1)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(344 * a1);
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>>((uint64_t)(a1 + 2), a1[1], (__n128 *)a1[1], *a1, (__n128 *)*a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = v2 - 344;
    std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100](v2 - 344);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v3);
  return a1;
}

void std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 312))
    marrs::mrr::mr::MRREntity::~MRREntity((void **)(a1 + 96));
  JUMPOUT(0x1C3BC54D8);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>>(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, __n128 *a5, uint64_t a6, uint64_t a7)
{
  __n128 *v9;

  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      a7 -= 344;
      v9 = (__n128 *)((char *)v9 - 344);
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(a7, v9);
    }
    while (v9 != a5);
  }
  return a7;
}

__n128 std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  unsigned __int32 v5;
  uint64_t v6;
  __n128 result;

  v4 = MEMORY[0x1C3BC54B4]();
  v5 = a2[5].n128_u32[2];
  *(_BYTE *)(v4 + 96) = 0;
  v6 = v4 + 96;
  *(_DWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 216) = 0;
  if (a2[19].n128_u8[8])
  {
    std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v6, (uint64_t)&a2[6]);
    *(_BYTE *)(a1 + 312) = 1;
  }
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  result = a2[20];
  *(__n128 *)(a1 + 320) = result;
  *(_QWORD *)(a1 + 336) = a2[21].n128_u64[0];
  a2[20].n128_u64[0] = 0;
  a2[20].n128_u64[1] = 0;
  a2[21].n128_u64[0] = 0;
  return result;
}

marrs::mrr::mr::MRREntity *std::__optional_copy_base<marrs::mrr::mr::MRREntity,false>::__optional_copy_base[abi:ne180100](marrs::mrr::mr::MRREntity *this, const marrs::mrr::mr::MRREntity *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 216) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    marrs::mrr::mr::MRREntity::MRREntity(this, a2);
    *((_BYTE *)this + 216) = 1;
  }
  return this;
}

void sub_1C2859F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 216))
    marrs::mrr::mr::MRREntity::~MRREntity((void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C2859FCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

uint64_t marrs::mrr::mr::MRMatchingResult::MRMatchingResult(uint64_t a1, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = MEMORY[0x1C3BC54C0]();
  *(_BYTE *)(v7 + 96) = 0;
  *(float *)(v7 + 88) = a2;
  *(_BYTE *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 320) = 0;
  std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((_QWORD *)(v7 + 320), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  return a1;
}

void sub_1C285A090(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 312))
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  MEMORY[0x1C3BC54D8](v1);
  _Unwind_Resume(a1);
}

void std::vector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void (***v20)(char *);
  void (**v21)(char *);
  BOOL v22;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 < v5)
  {
    v6 = MEMORY[0x1C3BC54C0]() + 88;
    goto LABEL_20;
  }
  v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - *a1) >> 3);
  if ((unint64_t)(v7 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0x1745D1745D1745DLL)
    v10 = 0x2E8BA2E8BA2E8BALL;
  else
    v10 = v9;
  if (v10)
  {
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v10);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v13 = &v12[88 * v7];
  v14 = &v12[88 * v11];
  v15 = MEMORY[0x1C3BC54C0](v13, a2);
  v6 = v15 + 88;
  v17 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v15;
    a1[1] = v6;
    a1[2] = (uint64_t)v14;
    if (!v16)
      goto LABEL_20;
    goto LABEL_19;
  }
  do
  {
    v16 -= 88;
    v15 = MEMORY[0x1C3BC54B4](v15 - 88, v16);
  }
  while (v16 != v17);
  v16 = (char *)*a1;
  v18 = (char *)a1[1];
  *a1 = v15;
  a1[1] = v6;
  a1[2] = (uint64_t)v14;
  if (v18 != v16)
  {
    v19 = v18 - 88;
    v20 = (void (***)(char *))(v18 - 88);
    do
    {
      v21 = *v20;
      v20 -= 11;
      (*v21)(v19);
      v22 = v19 == v16;
      v19 = (char *)v20;
    }
    while (!v22);
  }
  if (v16)
LABEL_19:
    operator delete(v16);
LABEL_20:
  a1[1] = v6;
}

void std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

_QWORD *std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >= 0x2E8BA2E8BA2E8BBLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[11 * v7];
    while (a2 != a3)
    {
      v8 = MEMORY[0x1C3BC54C0](result, a2);
      a2 += 88;
      result = (_QWORD *)(v8 + 88);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C285A308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a1);
}

void *std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType const*,marrs::mrr::mr::MRResultType const*>(_QWORD *a1, _BYTE *__src, _BYTE *a3)
{
  void *result;
  char *v7;
  _QWORD *v8;
  char *v9;
  size_t v10;
  char *v11;

  result = (void *)a1[2];
  v7 = (char *)*a1;
  if (result == (void *)*a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    result = std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](a1, 1uLL);
    v11 = (char *)a1[1];
    v8 = a1 + 1;
    v7 = v11;
    v10 = a3 - __src;
    if (a3 != __src)
      goto LABEL_4;
  }
  else
  {
    v9 = (char *)a1[1];
    v8 = a1 + 1;
    v10 = a3 - __src;
    if (v9 == v7)
    {
      if (__src == a3)
        goto LABEL_5;
      goto LABEL_4;
    }
    if (a3 != __src)
LABEL_4:
      result = memmove(v7, __src, v10);
  }
LABEL_5:
  *v8 = &v7[v10];
  return result;
}

uint64_t std::map<marrs::mrr::mr::EntityType,char const*>::at(int a1)
{
  uint64_t v1;
  int v2;

  v1 = qword_1ED7B1C58;
  if (!qword_1ED7B1C58)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = *(_DWORD *)(v1 + 32);
      if (v2 <= a1)
        break;
      v1 = *(_QWORD *)v1;
      if (!v1)
        goto LABEL_8;
    }
    if (v2 >= a1)
      return v1 + 40;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      goto LABEL_8;
  }
}

void std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  if (a5 >= 1)
  {
    v6 = a3;
    v7 = a2;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v21 = v12 - (_QWORD)a2;
      if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v22 = a3 + 344 * a5;
      }
      else
      {
        v22 = a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(v9, v22, a4, *(_QWORD *)(v9 - 8));
        if (v21 < 1)
          return;
      }
      std::vector<marrs::mrr::mr::MRMatchingResult>::__move_range((uint64_t)a1, (uint64_t)v7, v12, (uint64_t)v7 + 344 * a5);
      for (; v6 != v22; v7 = (__n128 *)((char *)v7 + 344))
      {
        sirinluinternal::MatchingSpan::operator=();
        v7[5].n128_u32[2] = *(_DWORD *)(v6 + 88);
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<marrs::mrr::mr::MRREntity,false> const&>((marrs::mrr::mr::MRREntity *)&v7[6], (marrs::mrr::mr::MRREntity *)(v6 + 96));
        if (v7 != (__n128 *)v6)
          std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((char *)&v7[20], *(char **)(v6 + 320), *(_QWORD *)(v6 + 328), (uint64_t)(*(_QWORD *)(v6 + 328) - *(_QWORD *)(v6 + 320)) >> 2);
        v6 += 344;
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x7D05F417D05F417DLL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xBE82FA0BE82FA0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = 0x82FA0BE82FA0BE83 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x82FA0BE82FA0BE83 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = a5 - 0x7D05F417D05F417DLL * ((uint64_t)(v12 - *a1) >> 3);
      if (v16 >= 0x5F417D05F417D0)
        v18 = 0xBE82FA0BE82FA0;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v18);
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v23 = &v19[344 * v15];
      v26[0] = v19;
      v26[1] = v23;
      v27 = v23;
      v28 = &v19[344 * v20];
      v24 = 344 * a5;
      v25 = &v23[344 * a5];
      do
      {
        std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult&>(v23, v6);
        v23 += 344;
        v6 += 344;
        v24 -= 344;
      }
      while (v24);
      v27 = v25;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a1, v26, v7);
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)v26);
    }
  }
}

void sub_1C285A758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult&>((_QWORD *)(a4 + v7), a2 + v7);
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

__n128 std::vector<marrs::mrr::mr::MRMatchingResult>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 *v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  _QWORD *v18;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 - a4;
  v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    v11 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v10 = (__n128 *)(a2 + v6 - a4);
    v11 = *(_QWORD *)(a1 + 8);
    do
    {
      result.n128_u64[0] = std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(v11, v10).n128_u64[0];
      v10 = (__n128 *)((char *)v10 + 344);
      v11 += 344;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v11;
  if (v6 != a4)
  {
    v13 = 0;
    do
    {
      v14 = v8 + v13;
      v15 = v6 + v13;
      sirinluinternal::MatchingSpan::operator=();
      *(_DWORD *)(v6 + v13 - 256) = *(_DWORD *)(v8 + v13 - 256);
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v6 + v13 - 248, v8 + v13 - 248);
      v17 = (void **)(v6 + v13 - 24);
      v16 = *v17;
      if (*v17)
      {
        *(_QWORD *)(v15 - 16) = v16;
        operator delete(v16);
        *v17 = 0;
        *(_QWORD *)(v15 - 16) = 0;
        *(_QWORD *)(v15 - 8) = 0;
      }
      v18 = (_QWORD *)(v14 - 24);
      result = *(__n128 *)(v14 - 24);
      *(__n128 *)v17 = result;
      *(_QWORD *)(v15 - 8) = *(_QWORD *)(v14 - 8);
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v13 -= 344;
    }
    while (-8 * (v7 >> 3) != v13);
  }
  return result;
}

_QWORD *std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x1C3BC54C0]();
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a2 + 88);
  std::__optional_copy_base<marrs::mrr::mr::MRREntity,false>::__optional_copy_base[abi:ne180100]((marrs::mrr::mr::MRREntity *)(v4 + 96), (const marrs::mrr::mr::MRREntity *)(a2 + 96));
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  return std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(a1 + 40, *(const void **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
}

void sub_1C285A984(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 312))
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  MEMORY[0x1C3BC54D8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  v6 = a2[1];
  v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (__n128 *)*a1, v6, v6);
  a2[1] = v7;
  v8 = (__n128 *)a1[1];
  v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(v9, v3);
      v3 = (__n128 *)((char *)v3 + 344);
      v9 += 344;
    }
    while (v3 != v8);
    v7 = a2[1];
  }
  a2[2] = v9;
  v10 = *a1;
  *a1 = v7;
  a2[1] = v10;
  v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

void std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<marrs::mrr::mr::MRREntity,false> const&>(marrs::mrr::mr::MRREntity *this, marrs::mrr::mr::MRREntity *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  uint64_t v12;
  __int128 *v13;

  if (*((unsigned __int8 *)this + 216) == *((unsigned __int8 *)a2 + 216))
  {
    if (*((_BYTE *)this + 216))
    {
      *(_QWORD *)this = *(_QWORD *)a2;
      std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
      std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
      std::string::operator=((std::string *)((char *)this + 56), (const std::string *)((char *)a2 + 56));
      v4 = *(_OWORD *)((char *)a2 + 92);
      *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
      *(_OWORD *)((char *)this + 92) = v4;
      if (this == a2)
      {
        std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)this + 136));
        std::string::operator=((std::string *)this + 7, (const std::string *)this + 7);
        return;
      }
      v5 = *((_QWORD *)this + 14);
      v7 = *((_QWORD *)a2 + 14);
      v6 = (__int128 *)*((_QWORD *)a2 + 15);
      v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 16) - v5) >> 3) >= v8)
      {
        v12 = *((_QWORD *)this + 15);
        if (0xCCCCCCCCCCCCCCCDLL * ((v12 - v5) >> 3) >= v8)
        {
          if ((__int128 *)v7 != v6)
          {
            do
            {
              std::string::operator=((std::string *)v5, (const std::string *)v7);
              *(_OWORD *)(v5 + 24) = *(_OWORD *)(v7 + 24);
              v5 += 40;
              v7 += 40;
            }
            while ((__int128 *)v7 != v6);
            v12 = *((_QWORD *)this + 15);
          }
          while (v12 != v5)
          {
            if (*(char *)(v12 - 17) < 0)
              operator delete(*(void **)(v12 - 40));
            v12 -= 40;
          }
          *((_QWORD *)this + 15) = v5;
          goto LABEL_31;
        }
        v13 = (__int128 *)(v7 + 8 * ((v12 - v5) >> 3));
        if (v12 != v5)
        {
          do
          {
            std::string::operator=((std::string *)v5, (const std::string *)v7);
            *(_OWORD *)(v5 + 24) = *(_OWORD *)(v7 + 24);
            v7 += 40;
            v5 += 40;
          }
          while ((__int128 *)v7 != v13);
          v5 = *((_QWORD *)this + 15);
        }
        v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((uint64_t)this + 128, v13, v6, (std::string *)v5);
      }
      else
      {
        std::vector<marrs::mrr::mr::SurroundingText>::__vdeallocate((uint64_t *)this + 14);
        if (v8 > 0x666666666666666)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 14)) >> 3);
        if (v9 <= v8)
          v9 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 14)) >> 3) >= 0x333333333333333)
          v10 = 0x666666666666666;
        else
          v10 = v9;
        std::vector<marrs::mrr::mr::SurroundingText>::__vallocate[abi:ne180100]((_QWORD *)this + 14, v10);
        v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((uint64_t)this + 128, (__int128 *)v7, v6, *((std::string **)this + 15));
      }
      *((_QWORD *)this + 15) = v11;
LABEL_31:
      std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)a2 + 136));
      *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
      std::string::operator=((std::string *)this + 7, (const std::string *)a2 + 7);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 8, *((std::string **)a2 + 24), *((__int128 **)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 3));
    }
  }
  else if (*((_BYTE *)this + 216))
  {
    marrs::mrr::mr::MRREntity::~MRREntity((void **)this);
    *((_BYTE *)this + 216) = 0;
  }
  else
  {
    marrs::mrr::mr::MRREntity::MRREntity(this, a2);
    *((_BYTE *)this + 216) = 1;
  }
}

void sub_1C285AD2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 120) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<marrs::mrr::mr::SurroundingText>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<marrs::mrr::mr::SurroundingText>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216))
  {
    if (*(_BYTE *)(a1 + 216))
      marrs::mrr::mr::MRREntity::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 216))
  {
    marrs::mrr::mr::MRREntity::~MRREntity((void **)a1);
    *(_BYTE *)(v2 + 216) = 0;
  }
  else
  {
    std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(a1, a2);
    *(_BYTE *)(v3 + 216) = 1;
  }
}

uint64_t marrs::mrr::mr::MRREntity::operator=(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;

  v4 = (__int128 *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  v6 = *v4;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  v9 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v9);
  v10 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)v9 = v10;
  *(_BYTE *)(a2 + 79) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 80) = v11;
  std::vector<marrs::mrr::mr::SurroundingText>::__vdeallocate((uint64_t *)(a1 + 112));
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v12);
  v13 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)v12 = v13;
  *(_BYTE *)(a2 + 159) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v14 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v14);
  v15 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)v14 = v15;
  *(_BYTE *)(a2 + 191) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 192));
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  return a1;
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >= 0xBE82FA0BE82FA1)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(a4);
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[344 * v8];
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)(v6 + 2), a2, a3, (uint64_t)v7);
    v6[1] = result;
  }
  return result;
}

void sub_1C285B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*a1);
    std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(uint64_t a1, uint64_t a2, marrs::mrr::mr::MRREntity *a3, uint64_t a4, float a5)
{
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;
  void **v22;

  marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&v9, a3);
  marrs::mrr::mr::MRMatchingResult::MRMatchingResult(a1, a5, a2, (const marrs::mrr::mr::MRREntity *)&v9, a4);
  v22 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  v22 = (void **)&v16;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
}

void sub_1C285B2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  marrs::mrr::mr::MRREntity::~MRREntity(&a9);
  _Unwind_Resume(a1);
}

uint64_t marrs::mrr::mr::MRMatchingResult::MRMatchingResult(uint64_t a1, float a2, uint64_t a3, const marrs::mrr::mr::MRREntity *a4, uint64_t a5)
{
  uint64_t v9;

  v9 = MEMORY[0x1C3BC54C0]();
  *(float *)(v9 + 88) = a2;
  marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)(v9 + 96), a4);
  *(_BYTE *)(a1 + 312) = 1;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((_QWORD *)(a1 + 320), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_1C285B358(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 312))
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  MEMORY[0x1C3BC54D8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::vector<sirinluinternal::MatchingSpan>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::vector<sirinluinternal::MatchingSpan>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4;
  int v5;
  size_t v6;
  const void *v7;
  size_t v8;
  const void *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v14;
  BOOL v15;
  const void **v16;
  const void **v17;
  const void **v18;
  int v19;
  const void **v20;
  const void **v21;
  const void **v22;
  int v23;
  size_t v24;
  const void **v25;
  size_t v26;
  const void **v27;
  size_t v28;
  int v29;

  v4 = *((char *)a2 + 23);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v5 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v4 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  v12 = v6 < v8;
  if (v11)
    v12 = v11 < 0;
  if (v12)
    return 1;
  v14 = memcmp(v9, v7, v10);
  v15 = v8 < v6;
  if (v14)
    v15 = v14 < 0;
  if (v15)
    return 0;
  v18 = (const void **)a2[3];
  v17 = a2 + 3;
  v16 = v18;
  v19 = *((char *)v17 + 23);
  v22 = (const void **)a1[3];
  v21 = a1 + 3;
  v20 = v22;
  v23 = *((char *)v21 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)v21 + 23);
  else
    v24 = (size_t)v21[1];
  if (v23 >= 0)
    v25 = v21;
  else
    v25 = v20;
  if (v19 >= 0)
    v26 = *((unsigned __int8 *)v17 + 23);
  else
    v26 = (size_t)v17[1];
  if (v19 >= 0)
    v27 = v17;
  else
    v27 = v16;
  if (v26 >= v24)
    v28 = v24;
  else
    v28 = v26;
  v29 = memcmp(v25, v27, v28);
  if (v29)
    return v29 < 0;
  else
    return v24 < v26;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::vector<sirinluinternal::MatchingSpan>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<sirinluinternal::MatchingSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t marrs::mrr::mr::ModelBasedMR::ModelBasedMR(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  void *v6;
  int v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string *v10;
  void *v11;
  id v12;
  void *v13;
  BOOL v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  id v22;
  void *v23;
  BOOL v24;
  void *v25;
  void *v26;
  BOOL v27;
  id v28;
  void *v29;
  BOOL v30;
  void *v31;
  uint64_t v32;
  void *v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v38;
  id v39;
  BOOL v40;
  void *v41;
  BOOL v42;
  id v43;
  void *v44;
  BOOL v45;
  void *v46;
  int v47;
  int v48;
  id v49;
  id v50;
  std::string::size_type v51;
  uint64_t v52;
  __int128 v53;
  NSObject *v54;
  std::string *v55;
  void *v56;
  int v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t i;
  void *v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  void **v81;
  char *v82;
  void **v83;
  std::string *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  int v89;
  std::string::size_type v90;
  uint64_t v91;
  std::string *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  unint64_t v97;
  id v98;
  void *v99;
  unint64_t v100;
  id v101;
  void *v102;
  unint64_t v103;
  id v104;
  NSObject *v105;
  std::string::size_type v106;
  void *exception;
  void *v109;
  uint64_t **v110;
  void *v111;
  uint64_t **v112;
  std::string *v113;
  uint64_t **v114;
  uint64_t v115;
  void *v116;
  std::string *obj;
  id obja;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t *v127;
  _QWORD *v128[2];
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  _BYTE v135[32];
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  std::string v139;
  std::string v140;
  std::string __p;
  int v142;
  std::string v143[2];
  uint64_t *v144;
  std::string v145[2];
  int data;
  std::string v147[2];
  uint64_t v148;
  BOOL v149;
  std::string v150;
  int v151;
  uint64_t v152;
  std::string __str;
  std::string v154;
  std::string *v155;
  std::string v156;
  uint64_t v157;
  BOOL v158;
  std::string v159;
  int v160;
  std::string v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &unk_1E7C67840;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = &off_1E7C67818;
  v113 = (std::string *)(a1 + 32);
  v115 = a1;
  std::__fs::filesystem::operator/[abi:ne180100](&v139, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::configFileName);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v161, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v161 = v139;
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
  v8 = v161.__r_.__value_.__r.__words[0];
  v9 = objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding");
  if (v7 >= 0)
    v10 = &v161;
  else
    v10 = (std::string *)v8;
  objc_msgSend(v6, "stringWithCString:encoding:", v10, v9);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithJSON:", v119);
  obj = (std::string *)a2;
  memset(&__p, 0, sizeof(__p));
  memset(v143, 0, sizeof(v143));
  memset(&v150, 0, sizeof(v150));
  memset(v147, 0, sizeof(v147));
  memset(v145, 0, sizeof(v145));
  v124 = v11;
  objc_msgSend(v11, "objectForKey:", CFSTR("version"));
  v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v12, "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;

  objc_msgSend(v124, "objectForKey:", CFSTR("mrType"));
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = objc_msgSend(v121, "isEqual:", CFSTR("rule")) ^ 1;
  objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("ruleConfig"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13 == 0;

  if (!v14)
  {
    objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("ruleConfig"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectForKey:", CFSTR("entityKeyWordPath"));
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v16, "UTF8String"));
    objc_msgSend(v15, "objectForKey:", CFSTR("labelEmbeddingPath"));
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v154, (char *)objc_msgSend(v17, "UTF8String"));
    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("cosineSimilarityThreshold"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "floatValue");
    LODWORD(v155) = v19;
    objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("scoreRelativeThreshold"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "floatValue");
    HIDWORD(v155) = v21;
    objc_msgSend(v15, "objectForKey:", CFSTR("owlEmbeddingsTaskId"));
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v156, (char *)objc_msgSend(v22, "UTF8String"));

    std::string::operator=(v143, &__str);
    std::string::operator=(&v143[1], &v154);
    v144 = (uint64_t *)v155;
    std::string::operator=(v145, &v156);
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v156.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);

  }
  objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("modelConfig"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23 == 0;

  if (!v24)
  {
    objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("modelConfig"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v135, 0, 24);
    objc_msgSend(v25, "objectForKey:", CFSTR("categoryEmbeddingFileName"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v26 == 0;

    if (v27)
    {
      MEMORY[0x1C3BC59A0](v135, "embedded_cats_192.json");
    }
    else
    {
      objc_msgSend(v25, "objectForKey:", CFSTR("categoryEmbeddingFileName"));
      v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v28, "UTF8String"));
      if ((v135[23] & 0x80000000) != 0)
        operator delete(*(void **)v135);
      *(std::string *)v135 = __str;
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
      __str.__r_.__value_.__s.__data_[0] = 0;

    }
    objc_msgSend(v25, "objectForKey:", CFSTR("owlEmbeddingDim"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v29 == 0;

    if (v30)
    {
      v32 = 192;
    }
    else
    {
      objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("owlEmbeddingDim"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "longValue");

    }
    objc_msgSend(v25, "objectForKey:", CFSTR("scoreAbsoluteThreshold"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v33 == 0;

    if (v34)
      objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("scoreRelativeThreshold"));
    else
      objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("scoreAbsoluteThreshold"));
    v35 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v35, "floatValue");
    v37 = v36;

    objc_msgSend(v25, "objectForKey:", CFSTR("useVisibleText"));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v35) = v38 == 0;

    if ((v35 & 1) != 0)
      goto LABEL_36;
    objc_msgSend(v25, "objectForKey:", CFSTR("useVisibleText"));
    v39 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v39, "UTF8String"));

    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v40 = __str.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)__str.__r_.__value_.__l.__data_ == 1702195796;
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_41;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 4)
LABEL_36:
      v40 = 0;
    else
      v40 = LODWORD(__str.__r_.__value_.__l.__data_) == 1702195796;
LABEL_41:
    memset(&v140, 0, sizeof(v140));
    objc_msgSend(v25, "objectForKey:", CFSTR("visTextMatchFileName"));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v41 == 0;

    if (v42)
    {
      MEMORY[0x1C3BC59A0](&v140, "");
    }
    else
    {
      objc_msgSend(v25, "objectForKey:", CFSTR("visTextMatchFileName"));
      v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v43, "UTF8String"));
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      v140 = __str;
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
      __str.__r_.__value_.__s.__data_[0] = 0;

    }
    objc_msgSend(v25, "objectForKey:", CFSTR("withinEntityScoreMargin"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = v44 == 0;

    if (v45)
    {
      v48 = 0;
    }
    else
    {
      objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("withinEntityScoreMargin"));
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "floatValue");
      v48 = v47;

    }
    objc_msgSend(v25, "objectForKey:", CFSTR("boltTaskId"));
    v49 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v49, "UTF8String"));
    LODWORD(v154.__r_.__value_.__l.__data_) = v37;
    objc_msgSend(v25, "objectForKey:", CFSTR("owlEmbeddingsTaskId"));
    v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v154.__r_.__value_.__l.__size_, (char *)objc_msgSend(v50, "UTF8String"));
    if ((v135[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)v135, *(std::string::size_type *)&v135[8]);
    else
      v156 = *(std::string *)v135;
    v157 = v32;
    v158 = v40;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v159, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
    else
      v159 = v140;
    v160 = v48;

    std::string::operator=(&v145[1], &__str);
    data = (int)v154.__r_.__value_.__l.__data_;
    std::string::operator=(v147, (const std::string *)&v154.__r_.__value_.__r.__words[1]);
    std::string::operator=(&v147[1], &v156);
    v148 = v157;
    v149 = v158;
    std::string::operator=(&v150, &v159);
    v151 = v160;
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v159.__r_.__value_.__l.__data_);
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v156.__r_.__value_.__l.__data_);
    if (SHIBYTE(v155) < 0)
      operator delete((void *)v154.__r_.__value_.__l.__size_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if ((v135[23] & 0x80000000) != 0)
      operator delete(*(void **)v135);

  }
  *v113 = v145[1];
  *(_OWORD *)&v145[1].__r_.__value_.__l.__data_ = 0uLL;
  *(_DWORD *)(v115 + 56) = data;
  *(std::string *)(v115 + 64) = v147[0];
  memset(v147, 0, 24);
  *(_OWORD *)(v115 + 88) = *(_OWORD *)&v147[1].__r_.__value_.__l.__data_;
  v145[1].__r_.__value_.__r.__words[2] = 0;
  v147[1].__r_.__value_.__r.__words[0] = 0;
  *(_BYTE *)(v115 + 120) = v149;
  v51 = v147[1].__r_.__value_.__r.__words[2];
  v52 = v148;
  *(_OWORD *)&v147[1].__r_.__value_.__r.__words[1] = 0uLL;
  *(_QWORD *)(v115 + 104) = v51;
  *(_QWORD *)(v115 + 112) = v52;
  v53 = *(_OWORD *)&v150.__r_.__value_.__l.__data_;
  *(_QWORD *)(v115 + 144) = *((_QWORD *)&v150.__r_.__value_.__l + 2);
  *(_OWORD *)(v115 + 128) = v53;
  memset(&v150, 0, sizeof(v150));
  *(_DWORD *)(v115 + 152) = v151;
  MRConfig::~MRConfig((void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  *(_QWORD *)(v115 + 216) = 0;
  *(_QWORD *)(v115 + 208) = v115 + 216;
  *(_QWORD *)(v115 + 168) = 0;
  *(_QWORD *)(v115 + 160) = v115 + 168;
  v110 = (uint64_t **)(v115 + 160);
  *(_QWORD *)(v115 + 192) = 0;
  *(_QWORD *)(v115 + 176) = 0;
  *(_QWORD *)(v115 + 184) = v115 + 192;
  v112 = (uint64_t **)(v115 + 184);
  *(_QWORD *)(v115 + 200) = 0;
  v114 = (uint64_t **)(v115 + 208);
  *(_QWORD *)(v115 + 224) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)obj, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&__str, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::modelFolderName);
  std::__fs::filesystem::operator/[abi:ne180100](&v140, (uint64_t)&__p, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::modelName);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v135, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    *(std::string *)v135 = v140;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)obj, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::operator/[abi:ne180100](&v161, (uint64_t)&__p, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::modelFolderName);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    __str = v161;
  marrs::inference_engine::EspressoModule::EspressoModule(v115 + 232, (uint64_t)v135, 32);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if ((v135[23] & 0x80000000) != 0)
    operator delete(*(void **)v135);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  *(_QWORD *)(v115 + 280) = 0;
  *(_QWORD *)(v115 + 288) = 0;
  *(_QWORD *)(v115 + 272) = v115 + 280;
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)obj, (std::__fs::filesystem::path *)&marrs::mrr::mr::configFileName);
  std::ifstream::basic_ifstream(&__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v134, *(_QWORD **)((char *)&v143[0].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)));
  v54 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    v55 = &v134;
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v55 = (std::string *)v134.__r_.__value_.__r.__words[0];
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v55;
    _os_log_impl(&dword_1C281A000, v54, OS_LOG_TYPE_INFO, "Loaded MR Config - %s", (uint8_t *)&__str, 0xCu);
  }
  if (*(char *)(v115 + 111) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(v115 + 88), *(_QWORD *)(v115 + 96));
  else
    v133 = *(std::string *)(v115 + 88);
  if (SHIBYTE(obj->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v132, obj->__r_.__value_.__l.__data_, obj->__r_.__value_.__l.__size_);
  else
    v132 = *obj;
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v135, (uint64_t)&v132, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v140, (char *)&v133);
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)v135, (std::__fs::filesystem::path *)&v140);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v131, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v131 = __str;
  }
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if ((v135[23] & 0x80000000) != 0)
    operator delete(*(void **)v135);
  if (*(char *)(v115 + 151) < 0)
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v115 + 128), *(_QWORD *)(v115 + 136));
  else
    v130 = *(std::string *)(v115 + 128);
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v135, (uint64_t)&v132, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v140, (char *)&v130);
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)v135, (std::__fs::filesystem::path *)&v140);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v129, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v129 = __str;
  }
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if ((v135[23] & 0x80000000) != 0)
    operator delete(*(void **)v135);
  v56 = (void *)MEMORY[0x1E0CB3940];
  v57 = SHIBYTE(v131.__r_.__value_.__r.__words[2]);
  v58 = v131.__r_.__value_.__r.__words[0];
  v59 = objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding");
  if (v57 >= 0)
    v60 = &v131;
  else
    v60 = (std::string *)v58;
  objc_msgSend(v56, "stringWithCString:encoding:", v60, v59);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v111, "fileExistsAtPath:", v116) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1C3BC5934](exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v61 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithJSON:", v116);
  v122 = v61;
  objc_msgSend(v61, "allKeys");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  *(_OWORD *)&v161.__r_.__value_.__r.__words[1] = 0uLL;
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161.__r_.__value_.__l.__size_;
  memset(v135, 0, sizeof(v135));
  v136 = 0u;
  v137 = 0u;
  obja = v62;
  v63 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", v135, &__str, 16);
  if (v63)
  {
    v120 = **(_QWORD **)&v135[16];
    do
    {
      v64 = 0;
      v125 = v63;
      do
      {
        if (**(_QWORD **)&v135[16] != v120)
          objc_enumerationMutation(obja);
        v65 = *(void **)(*(_QWORD *)&v135[8] + 8 * v64);
        objc_msgSend(v61, "objectForKey:", v65);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        v67 = 0;
        v68 = 0;
        v69 = 0;
        for (i = 0; objc_msgSend(v66, "count") > i; ++i)
        {
          objc_msgSend(v66, "objectAtIndex:", i);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "floatValue");
          v73 = v72;
          if ((unint64_t)v68 >= v69)
          {
            v75 = (v68 - v67) >> 2;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v69 - (_QWORD)v67) >> 1 > v76)
              v76 = (uint64_t)(v69 - (_QWORD)v67) >> 1;
            if (v69 - (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v77 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v77 = v76;
            if (v77)
              v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v77);
            else
              v78 = 0;
            v79 = (char *)(v77 + 4 * v75);
            *(_DWORD *)v79 = v73;
            v74 = v79 + 4;
            while (v68 != v67)
            {
              v80 = *((_DWORD *)v68 - 1);
              v68 -= 4;
              *((_DWORD *)v79 - 1) = v80;
              v79 -= 4;
            }
            v69 = v77 + 4 * v78;
            if (v67)
              operator delete(v67);
            v67 = v79;
          }
          else
          {
            *(_DWORD *)v68 = v72;
            v74 = v68 + 4;
          }

          v68 = v74;
        }
        std::string::basic_string[abi:ne180100]<0>(&v139, (char *)objc_msgSend(objc_retainAutorelease(v65), "UTF8String"));
        v81 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v161, &v138, &v139);
        v82 = (char *)*v81;
        if (!*v81)
        {
          v83 = v81;
          v82 = (char *)operator new(0x50uLL);
          v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          v140.__r_.__value_.__l.__size_ = (std::string::size_type)&v161.__r_.__value_.__l.__size_;
          v140.__r_.__value_.__s.__data_[16] = 0;
          v84 = (std::string *)(v82 + 32);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v84, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v84->__r_.__value_.__l.__data_ = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
            *((_QWORD *)v82 + 6) = *((_QWORD *)&v139.__r_.__value_.__l + 2);
          }
          *((_QWORD *)v82 + 8) = 0;
          *((_QWORD *)v82 + 9) = 0;
          *((_QWORD *)v82 + 7) = 0;
          v140.__r_.__value_.__s.__data_[16] = 1;
          v85 = v138;
          *(_QWORD *)v82 = 0;
          *((_QWORD *)v82 + 1) = 0;
          *((_QWORD *)v82 + 2) = v85;
          *v83 = v82;
          v86 = (uint64_t *)v82;
          if (*(_QWORD *)v161.__r_.__value_.__l.__data_)
          {
            v161.__r_.__value_.__r.__words[0] = *(_QWORD *)v161.__r_.__value_.__l.__data_;
            v86 = (uint64_t *)*v83;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v161.__r_.__value_.__l.__size_, v86);
          ++v161.__r_.__value_.__r.__words[2];
          v140.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v140);
        }
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v82 + 56, v67, (uint64_t)v68, (v68 - v67) >> 2);
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v139.__r_.__value_.__l.__data_);

        if (v67)
          operator delete(v67);
        ++v64;
        v61 = v122;
      }
      while (v64 != v125);
      v63 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", v135, &__str, 16);
    }
    while (v63);
  }

  v128[0] = 0;
  v128[1] = 0;
  v127 = (uint64_t *)v128;
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>((char *)&v127, (uint64_t *)v161.__r_.__value_.__l.__data_, (uint64_t *)&v161.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((_QWORD *)v161.__r_.__value_.__l.__size_);

  v87 = v115;
  if ((uint64_t **)(v115 + 272) != &v127)
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>((char *)(v115 + 272), v127, (uint64_t *)v128);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v128[0]);
  if (*(_BYTE *)(v115 + 120))
  {
    v88 = (void *)MEMORY[0x1E0CB3940];
    v89 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
    v90 = v129.__r_.__value_.__r.__words[0];
    v91 = objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding");
    if (v89 >= 0)
      v92 = &v129;
    else
      v92 = (std::string *)v90;
    objc_msgSend(v88, "stringWithCString:encoding:", v92, v91);
    v93 = objc_claimAutoreleasedReturnValue();
    v123 = (void *)v93;
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v126, "fileExistsAtPath:", v93) & 1) == 0)
    {
      v109 = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      MEMORY[0x1C3BC5934](v109, v135);
      __cxa_throw(v109, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v94 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithJSON:", v93);
    v95 = v94;
    objc_msgSend(v94, "objectForKey:", CFSTR("start"));
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = 0;
    *(_OWORD *)&v135[8] = 0uLL;
    *(_QWORD *)v135 = &v135[8];
    while (v97 < objc_msgSend(v96, "count"))
    {
      objc_msgSend(v96, "objectAtIndexedSubscript:", v97);
      v98 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v140, (char *)objc_msgSend(v98, "UTF8String"));

      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v135, (uint64_t)&v140, (uint64_t)&v140);
      v94 = v95;
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      ++v97;
    }
    objc_msgSend(v94, "objectForKey:", CFSTR("end"));
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    v100 = 0;
    *(_OWORD *)&v140.__r_.__value_.__r.__words[1] = 0uLL;
    v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140.__r_.__value_.__l.__size_;
    while (v100 < objc_msgSend(v99, "count"))
    {
      objc_msgSend(v99, "objectAtIndexedSubscript:", v100);
      v101 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v161, (char *)objc_msgSend(v101, "UTF8String"));

      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v140, (uint64_t)&v161, (uint64_t)&v161);
      v94 = v95;
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      ++v100;
    }
    objc_msgSend(v94, "objectForKey:", CFSTR("stopwords"));
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v103 = 0;
    *(_OWORD *)&v161.__r_.__value_.__r.__words[1] = 0uLL;
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161.__r_.__value_.__l.__size_;
    while (v103 < objc_msgSend(v102, "count"))
    {
      objc_msgSend(v102, "objectAtIndexedSubscript:", v103);
      v104 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v139, (char *)objc_msgSend(v104, "UTF8String"));

      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v161, (uint64_t)&v139, (uint64_t)&v139);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
      ++v103;
    }
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&v154.__r_.__value_.__r.__words[1] = 0uLL;
    v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154.__r_.__value_.__l.__size_;
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = 0uLL;
    v155 = &v156;
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&__str, *(_QWORD **)v135, &v135[8]);
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&v154, v140.__r_.__value_.__l.__data_, &v140.__r_.__value_.__l.__size_);
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&v155, v161.__r_.__value_.__l.__data_, &v161.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((char *)v161.__r_.__value_.__l.__size_);

    std::__tree<std::string>::destroy((char *)v140.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy(*(char **)&v135[8]);

    if (v110 != (uint64_t **)&__str)
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v110, __str.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__size_);
    if (v112 != (uint64_t **)&v154)
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v112, v154.__r_.__value_.__l.__data_, &v154.__r_.__value_.__l.__size_);
    if (v114 != (uint64_t **)&v155)
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v114, v155, &v156);
    std::__tree<std::string>::destroy(v156.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((char *)v154.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((char *)__str.__r_.__value_.__l.__size_);
    v105 = MRRLoggerForCategory(2);
    v87 = v115;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
    {
      v106 = *(_QWORD *)(v115 + 176);
      LODWORD(__str.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v106;
      _os_log_impl(&dword_1C281A000, v105, OS_LOG_TYPE_INFO, "start words used size = %lu", (uint8_t *)&__str, 0xCu);
    }
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BC5A3C](&__p.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1C3BC5BC8](&v152);
  return v87;
}

void sub_1C285CC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  void *a71;
  char a73;
  void *a74;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;

  if (SLOBYTE(STACK[0x46F]) < 0)
    operator delete((void *)STACK[0x458]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);

  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);

  if (a73 < 0)
    operator delete(a71);
  if (a58 < 0)
    operator delete(a53);

  MRConfig::~MRConfig(&a74);
  if (*(char *)(v77 - 121) < 0)
    operator delete(*(void **)(v77 - 144));
  if (a70 < 0)
    operator delete(a65);
  *(_QWORD *)a21 = &unk_1E7C67840;
  if (*(char *)(a21 + 31) < 0)
    operator delete(*a10);
  JUMPOUT(0x1C285D97CLL);
}

void sub_1C285D180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;

  if (a67 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy(*(char **)(v68 - 136));

  JUMPOUT(0x1C285D22CLL);
}

void sub_1C285D19C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char *a66;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *exception_ptr;
  NSObject *v74;
  _QWORD *exception;

  std::__tree<std::string>::destroy(*(char **)(v70 - 136));

  std::__tree<std::string>::destroy(a66);
  std::__tree<std::string>::destroy(a54);

  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x1C3BC5940](&__p, exception_ptr);
    __cxa_begin_catch(a1);
    v74 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      LODWORD(STACK[0x420]) = 136315138;
      STACK[0x424] = (unint64_t)"Error parsing visible text matching keywrods json";
      _os_log_impl(&dword_1C281A000, v74, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)&STACK[0x420], 0xCu);
    }
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&STACK[0x420], "Error parsing visible text matching keywrods json");
    std::string::basic_string[abi:ne180100]<0>(&a53, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&STACK[0x420], (uint64_t)&a53, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 64);
  }
  JUMPOUT(0x1C285D350);
}

void sub_1C285D204()
{
  void *v0;

  JUMPOUT(0x1C285D210);
}

void sub_1C285D220()
{
  void *v0;

  JUMPOUT(0x1C285D22CLL);
}

void sub_1C285D23C()
{
  void *v0;

  JUMPOUT(0x1C285D248);
}

void sub_1C285D444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char **a11, _QWORD **a12, marrs::inference_engine::EspressoModule *a13, char **a14, char **a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *__p;
  char a73;
  std::exception a74;
  uint64_t a75;
  void *v75;
  int v76;

  if (a73 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x437]) < 0)
  {
    operator delete((void *)STACK[0x420]);
    if ((v76 & 1) == 0)
    {
LABEL_8:
      std::exception::~exception(&a74);
      __cxa_end_catch();
      if (a36 < 0)
        operator delete(a31);
      if (a43 < 0)
        operator delete(a38);
      if (a50 < 0)
        operator delete(a45);
      if (a57 < 0)
        operator delete(a52);
      if (a64 < 0)
        operator delete(a59);
      if (a70 < 0)
        operator delete(a65);
      std::ifstream::~ifstream(&a75);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a12);
      marrs::inference_engine::EspressoModule::~EspressoModule(a13);
      std::__tree<std::string>::destroy(*a15);
      std::__tree<std::string>::destroy(*a14);
      std::__tree<std::string>::destroy(*a11);
      MRModelConfig::~MRModelConfig(a19);
      *(_QWORD *)a21 = &unk_1E7C67840;
      if (*(char *)(a21 + 31) < 0)
        operator delete(*a10);
      JUMPOUT(0x1C285D97CLL);
    }
  }
  else if (!v76)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v75);
  goto LABEL_8;
}

void sub_1C285D52C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  char a68;
  void *v68;
  void *v69;
  uint64_t v70;
  void *exception_ptr;
  NSObject *v74;
  _QWORD *exception;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a68);
  if (a67 < 0)
    operator delete(__p);

  if (v68)
    operator delete(v68);

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v70 - 136));
  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x1C3BC5940](&a28, exception_ptr);
    __cxa_begin_catch(a1);
    v74 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v70 - 144) = 136315138;
      STACK[0x4A4] = (unint64_t)"Error parsing category embeddings json";
      _os_log_impl(&dword_1C281A000, v74, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)(v70 - 144), 0xCu);
    }
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v70 - 144), "Error parsing category embeddings json");
    std::string::basic_string[abi:ne180100]<0>(&__p, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(exception, v70 - 144, (uint64_t)&__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 50);
  }
  JUMPOUT(0x1C285D6BCLL);
}

void sub_1C285D544(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char **a11, _QWORD **a12, marrs::inference_engine::EspressoModule *a13, char **a14, char **a15, uint64_t a16, void *a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  void *exception_ptr;
  NSObject *v76;
  _QWORD *exception;
  NSObject *v78;
  _QWORD *v79;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v72 - 136));
  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x1C3BC5940](&a28, exception_ptr);
    __cxa_begin_catch(a1);
    v76 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v72 - 144) = 136315138;
      STACK[0x4A4] = (unint64_t)"Error parsing category embeddings json";
      _os_log_impl(&dword_1C281A000, v76, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)(v72 - 144), 0xCu);
    }
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v72 - 144), "Error parsing category embeddings json");
    std::string::basic_string[abi:ne180100]<0>(&a71, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(exception, v72 - 144, (uint64_t)&a71, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 50);
  }
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    a28 = MEMORY[0x1E0DE5060] + 16;
    __cxa_begin_catch(a1);
    v78 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v72 - 144) = 136315138;
      STACK[0x4A4] = (unint64_t)"Unknown exception thrown during loading of category embeddings";
      _os_log_impl(&dword_1C281A000, v78, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)(v72 - 144), 0xCu);
    }
    v79 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v72 - 144), "Unknown exception thrown during loading of category embeddings");
    std::string::basic_string[abi:ne180100]<0>(&a71, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(v79, v72 - 144, (uint64_t)&a71, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 53);
  }
  if (a36 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  if (a64 < 0)
    operator delete(a59);
  if (a70 < 0)
    operator delete(a65);
  std::ifstream::~ifstream(&a72);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a12);
  marrs::inference_engine::EspressoModule::~EspressoModule(a13);
  std::__tree<std::string>::destroy(*a15);
  std::__tree<std::string>::destroy(*a14);
  std::__tree<std::string>::destroy(*a11);
  MRModelConfig::~MRModelConfig(a19);
  *(_QWORD *)a21 = &unk_1E7C67840;
  if (*(char *)(a21 + 31) < 0)
    operator delete(*a10);
  _Unwind_Resume(a1);
}

void sub_1C285D550()
{
  JUMPOUT(0x1C285D558);
}

void sub_1C285D56C()
{
  void *v0;
  void *v1;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x1C285D5A0);
}

void sub_1C285D7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char **a11, _QWORD **a12, marrs::inference_engine::EspressoModule *a13, char **a14, char **a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *__p;
  char a74;
  uint64_t a75;
  void *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;

  if (a74 < 0)
    operator delete(__p);
  if (*(char *)(v77 - 121) < 0)
  {
    operator delete(*(void **)(v77 - 144));
    v78 = a21;
    if ((v76 & 1) == 0)
    {
LABEL_8:
      std::exception::~exception(&a28);
      __cxa_end_catch();
      if (a36 < 0)
        operator delete(a31);
      if (a43 < 0)
        operator delete(a38);
      if (a50 < 0)
        operator delete(a45);
      if (a57 < 0)
        operator delete(a52);
      if (a64 < 0)
        operator delete(a59);
      if (a70 < 0)
        operator delete(a65);
      std::ifstream::~ifstream(&a75);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a12);
      marrs::inference_engine::EspressoModule::~EspressoModule(a13);
      std::__tree<std::string>::destroy(*a15);
      std::__tree<std::string>::destroy(*a14);
      std::__tree<std::string>::destroy(*a11);
      MRModelConfig::~MRModelConfig(a19);
      *(_QWORD *)v78 = &unk_1E7C67840;
      if (*(char *)(v78 + 31) < 0)
        operator delete(*a10);
      JUMPOUT(0x1C285D97CLL);
    }
  }
  else
  {
    v78 = a21;
    if (!v76)
      goto LABEL_8;
  }
  __cxa_free_exception(v75);
  goto LABEL_8;
}

void sub_1C285D968(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void marrs::mrr::md::preprocessing::getIndexesOfTopMentions(char **a1, uint64_t *a2, int a3, float a4)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  const std::nothrow_t *v16;
  unint64_t v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;

  v8 = (uint64_t **)std::vector<unsigned long>::vector(a1, (a2[1] - *a2) >> 2);
  v9 = *v8;
  v10 = v8[1];
  v11 = *v8;
  if (*v8 != v10)
  {
    v12 = 0;
    v13 = *v8;
    do
      *v13++ = v12++;
    while (v13 != v10);
    v11 = v9;
    while (*(float *)(*a2 + (*v11 << 32 >> 30)) > a4)
    {
      if (++v11 == v10)
        goto LABEL_16;
    }
  }
  if (v11 != v10)
  {
    v14 = v11 + 1;
    if (v11 + 1 != v10)
    {
      v15 = *a2;
      do
      {
        if (*(float *)(v15 + (*v14 << 32 >> 30)) > a4)
          *v11++ = *v14;
        ++v14;
      }
      while (v14 != v10);
    }
    if (v11 != v10)
    {
      v10 = v11;
      a1[1] = (char *)v11;
    }
  }
LABEL_16:
  v39 = a2;
  if ((char *)v10 - (char *)v9 < 1025)
  {
LABEL_20:
    std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v9, v10, &v39, v10 - v9, 0, 0);
  }
  else
  {
    v16 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v17 = v10 - v9;
    while (1)
    {
      v18 = (uint64_t *)operator new(8 * v17, v16);
      if (v18)
        break;
      v19 = v17 > 1;
      v17 >>= 1;
      if (!v19)
        goto LABEL_20;
    }
    v20 = v18;
    std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v9, v10, &v39, v10 - v9, v18, v17);
    operator delete(v20);
  }
  v21 = *a1;
  v22 = a1[1];
  v23 = v22 - *a1;
  if ((int)((unint64_t)v23 >> 3) > a3)
  {
    v24 = a3;
    v25 = v23 >> 3;
    if (a3 <= (unint64_t)(v23 >> 3))
    {
      if (a3 >= v25)
        return;
      v38 = &v21[8 * a3];
    }
    else
    {
      v26 = a3 - v25;
      v27 = a1[2];
      if (v26 > (v27 - v22) >> 3)
      {
        if (a3 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v28 = v27 - v21;
        if (v28 >> 2 > (unint64_t)a3)
          v24 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v24;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
        v31 = *a1;
        v32 = a1[1];
        v33 = &v30[8 * v25];
        v35 = &v30[8 * v34];
        bzero(v33, 8 * v26);
        v36 = &v33[8 * v26];
        while (v32 != v31)
        {
          v37 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *((_QWORD *)v33 - 1) = v37;
          v33 -= 8;
        }
        *a1 = v33;
        a1[1] = v36;
        a1[2] = v35;
        if (v31)
          operator delete(v31);
        return;
      }
      bzero(a1[1], 8 * v26);
      v38 = &v22[8 * v26];
    }
    a1[1] = v38;
  }
}

void sub_1C285DC04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t *v20;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * *result))
      {
        *result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = (char *)a5;
      v23 = a4 >> 1;
      v24 = &result[a4 >> 1];
      v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(result, v24, a3, v25, a5);
        v26 = (uint64_t *)&v22[8 * v23];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v26);
        v27 = &v22[8 * a4];
        v28 = *a3;
        v29 = v26;
        while (v29 != (uint64_t *)v27)
        {
          v30 = *v29;
          v31 = *(float *)(*v28 + 4 * *v29);
          v32 = *(float *)(*v28 + 4 * *(_QWORD *)v22);
          if (v31 <= v32)
            v30 = *(_QWORD *)v22;
          v22 += 8 * (v31 <= v32);
          v29 += v31 > v32;
          *v8++ = v30;
          if (v22 == (char *)v26)
          {
            if (v29 != (uint64_t *)v27)
            {
              v33 = 0;
              do
              {
                v8[v33] = v29[v33];
                ++v33;
              }
              while (&v29[v33] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          v34 = 0;
          do
          {
            v8[v34] = *(_QWORD *)&v22[v34 * 8];
            ++v34;
          }
          while (&v22[v34 * 8] != (char *)v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = **a3;
        v15 = result;
        do
        {
          v16 = *v15;
          v15 = v12;
          v17 = *v12;
          v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            v19 = v13;
            while (1)
            {
              *(uint64_t *)((char *)result + v19 + 8) = v16;
              if (!v19)
                break;
              v16 = *(uint64_t *)((char *)result + v19 - 8);
              v19 -= 8;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                v20 = (uint64_t *)((char *)result + v19 + 8);
                goto LABEL_15;
              }
            }
            v20 = result;
LABEL_15:
            *v20 = v17;
          }
          v12 = v15 + 1;
          v13 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = **a3;
      v12 = *(float *)(v11 + 4 * v10);
      v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13)
        v10 = *result;
      *a5 = v10;
      v5 = a5 + 1;
      if (v12 <= v13)
        v7 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v24 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(result, v24, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v25 = *a3;
      v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        v27 = *v26;
        v28 = *(float *)(*v25 + 4 * *v26);
        v29 = *(float *)(*v25 + 4 * *v7);
        if (v28 <= v29)
          v27 = *v7;
        v26 += v28 > v29;
        v7 += v28 <= v29;
        *v5++ = v27;
        if (v7 == v24)
        {
          if (v26 != a2)
          {
            v30 = 0;
            do
            {
              v5[v30] = v26[v30];
              ++v30;
            }
            while (&v26[v30] != a2);
          }
          return result;
        }
      }
      if (v7 != v24)
      {
        v31 = 0;
        do
        {
          v5[v31] = v7[v31];
          ++v31;
        }
        while (&v7[v31] != v24);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = **a3;
        v17 = a5;
        v18 = a5;
        do
        {
          v20 = *v18++;
          v19 = v20;
          if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v20))
          {
            *v18 = *v14;
          }
          else
          {
            v17[1] = v19;
            v21 = a5;
            if (v17 != a5)
            {
              v22 = v15;
              while (1)
              {
                v21 = (uint64_t *)((char *)a5 + v22);
                v23 = *(uint64_t *)((char *)a5 + v22 - 8);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v23))
                  break;
                *v21 = v23;
                v22 -= 8;
                if (!v22)
                {
                  v21 = a5;
                  break;
                }
              }
            }
            *v21 = *v14;
          }
          ++v14;
          v15 += 8;
          v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

_QWORD *std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(_QWORD *result, _QWORD *a2, _QWORD *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v37;
  size_t v38;
  char *v39;
  uint64_t **v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  uint64_t **v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  if (a6)
  {
    v8 = a6;
    v12 = result;
    while (v8 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v13 = **a4;
      while (1)
      {
        v14 = *v12;
        if (*(float *)(v13 + 4 * *a2) > *(float *)(v13 + 4 * *v12))
          break;
        ++v12;
        if (!--a5)
          return result;
      }
      if (a5 >= v8)
      {
        if (a5 == 1)
        {
          *v12 = *a2;
          *a2 = v14;
          return result;
        }
        if (a5 >= 0)
          v25 = a5;
        else
          v25 = a5 + 1;
        v24 = v25 >> 1;
        v18 = &v12[v25 >> 1];
        v17 = a2;
        if (a2 != a3)
        {
          v26 = a3 - a2;
          v17 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v17[v26 >> 1];
            v30 = *v28;
            v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (*(float *)(v13 + 4 * v30) > *(float *)(v13 + 4 * *v18))
              v17 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v16 = v17 - a2;
      }
      else
      {
        if (v8 >= 0)
          v15 = v8;
        else
          v15 = v8 + 1;
        v16 = v15 >> 1;
        v17 = &a2[v15 >> 1];
        v18 = a2;
        if (a2 != v12)
        {
          v19 = a2 - v12;
          v18 = v12;
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[v19 >> 1];
            v23 = *v21;
            v22 = v21 + 1;
            v19 += ~(v19 >> 1);
            if (*(float *)(v13 + 4 * *v17) > *(float *)(v13 + 4 * v23))
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = v18 - v12;
      }
      if (v18 == a2)
      {
        a2 = v17;
      }
      else
      {
        v31 = (char *)v17 - (char *)a2;
        if (v17 == a2)
        {
          a2 = v18;
        }
        else
        {
          v32 = v18 + 1;
          if (v18 + 1 == a2)
          {
            v80 = *v18;
            v82 = v16;
            v37 = a2;
            v38 = (char *)v17 - (char *)a2;
            v39 = a7;
            v40 = a4;
            v41 = a3;
            v42 = a8;
            v84 = v24;
            memmove(v18, v37, v38);
            v16 = v82;
            v24 = v84;
            a8 = v42;
            a3 = v41;
            a4 = v40;
            a7 = v39;
            a2 = (_QWORD *)((char *)v18 + v31);
            *(_QWORD *)((char *)v18 + v31) = v80;
          }
          else
          {
            v33 = a2 + 1;
            if (a2 + 1 == v17)
            {
              v43 = *(v17 - 1);
              a2 = v18 + 1;
              if (v17 - 1 != v18)
              {
                v44 = a7;
                v45 = a4;
                v46 = a3;
                v47 = a8;
                v83 = v16;
                v85 = v24;
                v81 = *(v17 - 1);
                memmove(v18 + 1, v18, (char *)(v17 - 1) - (char *)v18);
                v43 = v81;
                v16 = v83;
                v24 = v85;
                a8 = v47;
                a3 = v46;
                a4 = v45;
                a7 = v44;
              }
              *v18 = v43;
            }
            else
            {
              v34 = a2 - v18;
              if (v34 == v31 >> 3)
              {
                do
                {
                  v35 = *(v32 - 1);
                  *(v32 - 1) = *(v33 - 1);
                  *(v33 - 1) = v35;
                  if (v32 == a2)
                    break;
                  ++v32;
                }
                while (v33++ != v17);
              }
              else
              {
                v48 = v31 >> 3;
                v49 = a2 - v18;
                do
                {
                  v50 = v49;
                  v49 = v48;
                  v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  v51 = &v18[v49];
                  do
                  {
                    v53 = *--v51;
                    v52 = v53;
                    v54 = &v51[v34];
                    v55 = v51;
                    do
                    {
                      v56 = v54;
                      *v55 = *v54;
                      v57 = &v54[v34];
                      v58 = __OFSUB__(v34, v17 - v54);
                      v60 = v34 - (v17 - v54);
                      v59 = (v60 < 0) ^ v58;
                      v54 = &v18[v60];
                      if (v59)
                        v54 = v57;
                      v55 = v56;
                    }
                    while (v54 != v51);
                    *v56 = v52;
                  }
                  while (v51 != v18);
                }
                a2 = &v18[v31 >> 3];
              }
            }
          }
        }
      }
      a5 -= v24;
      v8 -= v16;
      if (v24 + v16 >= a5 + v8)
      {
        v65 = a2;
        v66 = v17;
        v61 = a4;
        v67 = v24;
        v68 = v16;
        v62 = a7;
        v63 = a8;
        result = (_QWORD *)std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(a2, v66, a3);
        a2 = v18;
        v8 = v68;
        a5 = v67;
        a3 = v65;
      }
      else
      {
        v61 = a4;
        v62 = a7;
        v63 = a8;
        v64 = a3;
        result = (_QWORD *)std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v12, v18, a2);
        a3 = v64;
        v12 = a2;
        a2 = v17;
      }
      a7 = v62;
      a4 = v61;
      a8 = v63;
      if (!v8)
        return result;
    }
    if (a5 <= v8)
    {
      if (v12 != a2)
      {
        v73 = 0;
        do
        {
          *(_QWORD *)&a7[v73 * 8] = v12[v73];
          ++v73;
        }
        while (&v12[v73] != a2);
        v74 = &a7[v73 * 8];
        if (v74 != a7)
        {
          v75 = *a4;
          while (a2 != a3)
          {
            v76 = *a2;
            v77 = *(float *)(*v75 + 4 * *a2);
            v78 = *(float *)(*v75 + 4 * *(_QWORD *)a7);
            if (v77 <= v78)
              v76 = *(_QWORD *)a7;
            a2 += v77 > v78;
            a7 += 8 * (v77 <= v78);
            *v12++ = v76;
            if (a7 == v74)
              return result;
          }
          return memmove(v12, a7, v74 - a7);
        }
      }
    }
    else if (a3 != a2)
    {
      v69 = 0;
      do
      {
        *(_QWORD *)&a7[v69 * 8] = a2[v69];
        ++v69;
      }
      while (&a2[v69] != a3);
      v70 = &a7[v69 * 8];
      if (v70 != a7)
      {
        v71 = a3 - 1;
        while (a2 != v12)
        {
          v72 = *((_QWORD *)v70 - 1);
          if (*(float *)(**a4 + 4 * v72) <= *(float *)(**a4 + 4 * *(a2 - 1)))
            v70 -= 8;
          else
            v72 = *--a2;
          *v71-- = v72;
          if (v70 == a7)
            return result;
        }
        v79 = 0;
        do
        {
          v71[v79] = *(_QWORD *)&v70[v79 * 8 - 8];
          --v79;
        }
        while (&v70[v79 * 8] != a7);
      }
    }
  }
  return result;
}

void marrs::mrr::mr::MentionKeywordFilter::filterEntities(_BYTE *a1@<X8>)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C281A000, v2, OS_LOG_TYPE_INFO, "[MentionKeywordFilter] Not implemented yet, returning input list", v3, 2u);
  }
  *a1 = 0;
  a1[24] = 0;
}

void marrs::mrr::mr::MentionKeywordFilter::~MentionKeywordFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t getFirstAndLastIndices(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unint64_t v16;
  unsigned __int8 **v17;

  *a5 = 0;
  if (a4 == a3)
  {
    *a6 = 0;
  }
  else
  {
    if (a2 == a1)
      return 0;
    v11 = 0;
    v12 = ((char *)a2 - (char *)a1) / 24;
    v13 = v12 <= 1 ? 1 : ((char *)a2 - (char *)a1) / 24;
    v14 = a1;
    do
    {
      if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a3, a4, v14) != a4)break;
      *a5 = ++v11;
      v14 += 3;
    }
    while (v13 != v11);
    if (v11 == v12)
      return 0;
    v16 = (int)v12 - 1;
    *a6 = v16;
    if (v16 > *a5)
    {
      v17 = &a1[3 * (int)v16];
      do
      {
        if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a3, a4, v17) != a4)break;
        *a6 = --v16;
        v17 -= 3;
      }
      while (v16 > *a5);
    }
  }
  return 1;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

float rawEditDistance<unsigned int>(_QWORD *a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  float v4;
  void **v6[3];
  void **v7[3];
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD v12[3];
  int *v13[3];
  uint64_t v14[3];
  void ***v15;

  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v8 = 0;
  v9 = 0;
  v10 = 0;
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  computeAlignmentMatrix<unsigned int>(a1, a2, a3, a4, v14, v13, (uint64_t)v12, (uint64_t)v11, 0.0, 0.0, 0, 0, (uint64_t *)&v8, (uint64_t *)v7, (uint64_t *)v6);
  v4 = *(float *)(v8[1] - *v8 + *(_QWORD *)(v9 - 24) - 4);
  v15 = v6;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v6[0] = (void **)v7;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v6);
  v7[0] = (void **)&v8;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v7);
  return v4;
}

void sub_1C285E8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void ***a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v22 - 72) = v21;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 72));
  a15 = &a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a18 = (void **)&a21;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t *v7;
  uint64_t v10;

  a5[1] = *a5;
  if (a3 != a4)
  {
    v7 = a3;
    do
    {
      v10 = *v7++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(*a1 + v10 - *a2), *(_DWORD **)(*a1 + v10 - *a2 + 8), (uint64_t)a5);
    }
    while (v7 != a4);
  }
}

void computeAlignmentMatrix<unsigned int>(_QWORD *a1, uint64_t a2, uint64_t *a3, unsigned int a4, uint64_t *a5, int **a6, uint64_t a7, uint64_t a8, float a9, float a10, unint64_t a11, char a12, uint64_t *a13, uint64_t *a14, uint64_t *a15)
{
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  char v37;
  uint64_t *v38;
  size_t v39;
  uint64_t v40;
  char **v41;
  char *v42;
  void **v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  char *v61;
  unint64_t v62;
  char **v63;
  char *v64;
  char **v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  unint64_t v85;
  char **v86;
  char *v87;
  void **v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  float *v124;
  _DWORD *v125;
  uint64_t v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  BOOL v131;
  unsigned int **v132;
  uint64_t v133;
  float v134;
  unsigned int v135;
  unsigned int *v136;
  _DWORD *v137;
  unint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  _DWORD **v143;
  int v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  uint64_t *v158;
  uint64_t *v159;
  float v160;
  uint64_t v161;
  float v162;
  float v163;
  float v164;
  BOOL v165;
  BOOL v166;
  uint64_t v168;
  int v169;
  _DWORD *v170;
  _QWORD *v171;
  _DWORD *v172;
  uint64_t v173;
  int v174;
  _DWORD *v175;
  unint64_t v176;
  unint64_t v178;
  uint64_t v180;
  uint64_t v183;
  int v184;
  uint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t *v194;

  v178 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v20 = (v178 >> 2) + 1;
  v176 = a1[1] - *a1;
  v21 = (v176 >> 2) + 1;
  std::vector<std::vector<float>>::__clear[abi:ne180100](a13);
  std::vector<std::vector<float>>::__clear[abi:ne180100](a14);
  std::vector<std::vector<float>>::__clear[abi:ne180100](a15);
  std::vector<std::vector<float>>::resize(a13, v20);
  std::vector<std::vector<std::pair<unsigned int,unsigned int>>>::resize((uint64_t)a14, v20);
  v22 = a15;
  v23 = *a15;
  v24 = (char *)a15[1];
  v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v24[-*a15] >> 3);
  v26 = v20 - v25;
  v188 = a4;
  if (v20 <= v25)
  {
    if (v20 < v25)
    {
      v32 = (char *)(v23 + 24 * v20);
      if (v24 != v32)
      {
        v33 = (char *)a15[1];
        do
        {
          v35 = (void *)*((_QWORD *)v33 - 3);
          v33 -= 24;
          v34 = v35;
          if (v35)
          {
            *((_QWORD *)v24 - 2) = v34;
            operator delete(v34);
            v22 = a15;
          }
          v24 = v33;
        }
        while (v33 != v32);
      }
      v22[1] = (uint64_t)v32;
    }
    v36 = a1;
    if ((v178 >> 2) == -1)
    {
      v37 = 1;
      v38 = a15;
      goto LABEL_80;
    }
  }
  else
  {
    v27 = a15[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v27 - (uint64_t)v24) >> 3) >= v26)
    {
      v39 = 24 * ((24 * v26 - 24) / 0x18) + 24;
      bzero(v24, v39);
      a15[1] = (uint64_t)&v24[v39];
    }
    else
    {
      v194 = a15 + 2;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v23) >> 3);
      v29 = 2 * v28;
      if (2 * v28 <= v20)
        v29 = (v178 >> 2) + 1;
      if (v28 >= 0x555555555555555)
        v30 = 0xAAAAAAAAAAAAAAALL;
      else
        v30 = v29;
      v190 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v30);
      v191 = &v190[24 * v25];
      v193 = &v190[24 * v31];
      bzero(v191, 24 * ((24 * v26 - 24) / 0x18) + 24);
      v192 = &v191[24 * ((24 * v26 - 24) / 0x18) + 24];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a15, &v190);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v190);
    }
  }
  v40 = 0;
  v185 = 4 * ((v176 >> 2) + 1);
  v183 = 8 * ((v176 >> 2) + 1);
  do
  {
    v41 = (char **)(*a13 + 24 * v40);
    v43 = (void **)(v41 + 1);
    v42 = v41[1];
    v44 = *v41;
    v45 = (v42 - *v41) >> 2;
    if (v21 <= v45)
    {
      if (v21 < v45)
        *v43 = &v44[4 * v21];
    }
    else
    {
      v46 = *a13 + 24 * v40;
      v49 = *(_QWORD *)(v46 + 16);
      v48 = (_QWORD *)(v46 + 16);
      v47 = v49;
      if (v21 - v45 <= (v49 - (uint64_t)v42) >> 2)
      {
        v61 = &v42[4 * (v21 - v45)];
        v62 = v185 - 4 * v45;
        do
        {
          *(_DWORD *)v42 = 0;
          v42 += 4;
          v62 -= 4;
        }
        while (v62);
        *v43 = v61;
      }
      else
      {
        v50 = v47 - (_QWORD)v44;
        v51 = (v47 - (uint64_t)v44) >> 1;
        if (v51 <= v21)
          v51 = (v176 >> 2) + 1;
        if (v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v52 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v52);
        v55 = &v53[4 * v45];
        v56 = v185 - 4 * v45;
        v57 = v55;
        do
        {
          *(_DWORD *)v57 = 0;
          v57 += 4;
          v56 -= 4;
        }
        while (v56);
        v58 = (char *)*v43;
        v59 = *v41;
        while (v58 != v59)
        {
          v60 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v55 - 1) = v60;
          v55 -= 4;
        }
        *v41 = v55;
        *v43 = &v53[4 * v21];
        *v48 = &v53[4 * v54];
        if (v59)
          operator delete(v59);
      }
    }
    v63 = (char **)(*a14 + 24 * v40);
    v65 = v63 + 1;
    v64 = v63[1];
    v66 = *v63;
    v67 = (v64 - *v63) >> 3;
    if (v21 <= v67)
    {
      v83 = a15;
      if (v21 < v67)
        *v65 = &v66[8 * v21];
    }
    else
    {
      v68 = *a14 + 24 * v40;
      v71 = *(_QWORD *)(v68 + 16);
      v70 = (_QWORD *)(v68 + 16);
      v69 = v71;
      if (v21 - v67 <= (v71 - (uint64_t)v64) >> 3)
      {
        v84 = &v64[8 * (v21 - v67)];
        v85 = v183 - 8 * v67;
        do
        {
          *(_QWORD *)v64 = 0;
          v64 += 8;
          v85 -= 8;
        }
        while (v85);
        *v65 = v84;
        goto LABEL_58;
      }
      v72 = v69 - (_QWORD)v66;
      v73 = (v69 - (uint64_t)v66) >> 2;
      if (v73 <= v21)
        v73 = (v176 >> 2) + 1;
      if (v72 >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v74);
      v77 = &v75[8 * v67];
      v78 = v183 - 8 * v67;
      v79 = v77;
      do
      {
        *(_QWORD *)v79 = 0;
        v79 += 8;
        v78 -= 8;
      }
      while (v78);
      v80 = *v65;
      v81 = *v63;
      if (*v65 != *v63)
      {
        do
        {
          v82 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v77 - 1) = v82;
          v77 -= 8;
        }
        while (v80 != v81);
        v80 = *v63;
      }
      v83 = a15;
      *v63 = v77;
      *v65 = &v75[8 * v21];
      *v70 = &v75[8 * v76];
      if (v80)
      {
        operator delete(v80);
LABEL_58:
        v83 = a15;
      }
    }
    v86 = (char **)(*v83 + 24 * v40);
    v88 = (void **)(v86 + 1);
    v87 = v86[1];
    v89 = *v86;
    v90 = (v87 - *v86) >> 2;
    if (v21 <= v90)
    {
      v36 = a1;
      if (v21 < v90)
        *v88 = &v89[4 * v21];
    }
    else
    {
      v91 = *v83 + 24 * v40;
      v94 = *(_QWORD *)(v91 + 16);
      v93 = (_QWORD *)(v91 + 16);
      v92 = v94;
      if (v21 - v90 <= (v94 - (uint64_t)v87) >> 2)
      {
        v106 = &v87[4 * (v21 - v90)];
        v107 = v185 - 4 * v90;
        v36 = a1;
        do
        {
          *(_DWORD *)v87 = 0;
          v87 += 4;
          v107 -= 4;
        }
        while (v107);
        *v88 = v106;
      }
      else
      {
        v95 = v92 - (_QWORD)v89;
        v96 = (v92 - (uint64_t)v89) >> 1;
        if (v96 <= v21)
          v96 = (v176 >> 2) + 1;
        if (v95 >= 0x7FFFFFFFFFFFFFFCLL)
          v97 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v97 = v96;
        v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v97);
        v100 = &v98[4 * v90];
        v101 = v185 - 4 * v90;
        v102 = v100;
        do
        {
          *(_DWORD *)v102 = 0;
          v102 += 4;
          v101 -= 4;
        }
        while (v101);
        v103 = (char *)*v88;
        v104 = *v86;
        while (v103 != v104)
        {
          v105 = *((_DWORD *)v103 - 1);
          v103 -= 4;
          *((_DWORD *)v100 - 1) = v105;
          v100 -= 4;
        }
        *v86 = v100;
        *v88 = &v98[4 * v21];
        *v93 = &v98[4 * v99];
        v36 = a1;
        if (v104)
          operator delete(v104);
      }
    }
    ++v40;
  }
  while (v40 != v20);
  v37 = 0;
  a4 = v188;
  v38 = a15;
LABEL_80:
  v108 = *a13;
  v109 = *(float **)*a13;
  *v109 = a9;
  **(_DWORD **)*v38 = a10;
  v110 = *a5;
  v111 = (v176 >> 2);
  if (a5[1] == *a5)
  {
    if ((v176 >> 2))
    {
      v186 = v37;
      v113 = 0;
      v114 = v36;
      v115 = 4 * v111;
      do
      {
        a9 = a9 + cost<unsigned int>(a3, *(_DWORD *)(*v114 + v113), a4);
        v108 = *a13;
        v109 = *(float **)*a13;
        v109[v113 / 4 + 1] = a9;
        v113 += 4;
      }
      while (v115 != v113);
      v36 = v114;
      v111 = (v176 >> 2);
      v37 = v186;
    }
  }
  else if ((v176 >> 2))
  {
    v112 = 0;
    do
    {
      v109[v112 + 1] = *(float *)(v110 + v112 * 4);
      ++v112;
    }
    while (v111 != v112);
  }
  v116 = *a6;
  v117 = (v178 >> 2);
  v131 = a6[1] == *a6;
  v180 = v117;
  if (v131)
  {
    if ((v178 >> 2))
    {
      v187 = v37;
      v120 = 0;
      v121 = *v109;
      v122 = 4 * v117;
      v123 = 24;
      do
      {
        v121 = v121 + cost<unsigned int>(a3, a4, *(_DWORD *)(*(_QWORD *)a2 + v120));
        v108 = *a13;
        **(float **)(*a13 + v123) = v121;
        v120 += 4;
        v123 += 24;
      }
      while (v122 != v120);
      v36 = a1;
      v117 = (v178 >> 2);
      v111 = (v176 >> 2);
      v37 = v187;
    }
  }
  else if ((v178 >> 2))
  {
    v118 = 0;
    do
    {
      v119 = *v116++;
      **(_DWORD **)(v108 + v118 + 24) = v119;
      v118 += 24;
    }
    while (24 * v117 != v118);
  }
  v124 = *(float **)a7;
  if (*(_QWORD *)(a7 + 8) == *(_QWORD *)a7)
  {
    if ((v176 >> 2) != -1)
    {
      v128 = 0;
      v129 = *(_QWORD *)*a15;
      do
      {
        *(_DWORD *)(v129 + 4 * v128) = v128;
        ++v128;
      }
      while (v21 != v128);
    }
  }
  else if (v111)
  {
    v125 = (_DWORD *)(*(_QWORD *)*a15 + 4);
    v126 = v111;
    do
    {
      v127 = *v124++;
      *v125++ = v127;
      --v126;
    }
    while (v126);
  }
  v130 = *(float **)a8;
  v131 = *(_QWORD *)(a8 + 8) == *(_QWORD *)a8 || v117 == 0;
  if (!v131)
  {
    v132 = (unsigned int **)(*a15 + 24);
    v133 = v117;
    do
    {
      v134 = *v130++;
      v135 = v134;
      v136 = *v132;
      v132 += 3;
      *v136 = v135;
      --v133;
    }
    while (v133);
  }
  if (v111)
  {
    v137 = (_DWORD *)(*(_QWORD *)*a14 + 12);
    v138 = HIDWORD(a11);
    v139 = v111;
    do
    {
      *v137 = v138;
      v137 += 2;
      LODWORD(v138) = v138 + 1;
      --v139;
    }
    while (v139);
  }
  if ((v176 >> 2) != -1)
  {
    v140 = *(_DWORD **)*a14;
    do
    {
      *v140 = a11;
      v140 += 2;
      --v21;
    }
    while (v21);
  }
  if ((v37 & 1) == 0)
  {
    v141 = (uint64_t *)*a14;
    do
    {
      v142 = *v141;
      v141 += 3;
      *(_DWORD *)(v142 + 4) = HIDWORD(a11);
      --v20;
    }
    while (v20);
  }
  if (v117)
  {
    v143 = (_DWORD **)(*a14 + 24);
    v144 = a11;
    v145 = v117;
    do
    {
      v146 = *v143;
      v143 += 3;
      *v146 = v144++;
      --v145;
    }
    while (v145);
  }
  if (v111)
  {
    v147 = 0;
    v148 = 24 * v117;
    do
    {
      v149 = v147 + 1;
      if (v117)
      {
        v150 = 0;
        v151 = 0;
        v184 = v147 + HIDWORD(a11);
        do
        {
          v152 = *(float *)(*(_QWORD *)(v108 + v150 + 24) + 4 * v147);
          v153 = v152 + cost<unsigned int>(a3, *(_DWORD *)(*v36 + 4 * v147), v188);
          v154 = *(float *)(*(_QWORD *)(*a13 + v150) + 4 * v149);
          v36 = a1;
          v155 = v154 + cost<unsigned int>(a3, v188, *(_DWORD *)(*(_QWORD *)a2 + 4 * v151));
          v156 = *(float *)(*(_QWORD *)(*a13 + v150) + 4 * v147);
          v157 = v156 + cost<unsigned int>(a3, *(_DWORD *)(*a1 + 4 * v147), *(_DWORD *)(*(_QWORD *)a2 + 4 * v151));
          v158 = a15;
          v159 = (uint64_t *)(*a15 + v150);
          v160 = v153 / (float)(*(_DWORD *)(v159[3] + 4 * v147) + 1);
          v161 = *v159;
          v162 = v155 / (float)*(unsigned int *)(v161 + 4 * v149);
          v163 = v157 / (float)(*(_DWORD *)(v161 + 4 * v147) + 1);
          if (!(v151 | v147)
            && a12
            && ((v164 = cost<unsigned int>(a3, *(_DWORD *)*a1, **(_DWORD **)a2), v158 = a15, v164 < v160)
              ? (v165 = v164 < v162)
              : (v165 = 0),
                v165 ? (v166 = v164 < v163) : (v166 = 0),
                v166))
          {
            v108 = *a13;
            *(float *)(*(_QWORD *)(*a13 + v150 + 24) + 4 * v149) = v164;
            *(_QWORD *)(*(_QWORD *)(*a14 + v150 + 24) + 8 * v149) = 0;
            v173 = *(_QWORD *)(*a15 + v150 + 24);
            v174 = 1;
          }
          else if (v160 > v162 || v160 > v163)
          {
            v108 = *a13;
            v168 = *(_QWORD *)(*a13 + v150 + 24);
            v169 = a11 + v151;
            if (v162 <= v163)
            {
              *(float *)(v168 + 4 * v149) = v155;
              v175 = (_DWORD *)(*(_QWORD *)(*a14 + v150 + 24) + 8 * v149);
              *v175 = v169;
              v175[1] = v149 + HIDWORD(a11);
              v171 = (_QWORD *)(*v158 + v150);
              v174 = *(_DWORD *)(*v171 + 4 * v149);
            }
            else
            {
              *(float *)(v168 + 4 * v149) = v157;
              v170 = (_DWORD *)(*(_QWORD *)(*a14 + v150 + 24) + 8 * v149);
              *v170 = v169;
              v170[1] = v184;
              v171 = (_QWORD *)(*v158 + v150);
              v174 = *(_DWORD *)(*v171 + 4 * v147) + 1;
            }
            v173 = v171[3];
          }
          else
          {
            v108 = *a13;
            *(float *)(*(_QWORD *)(*a13 + v150 + 24) + 4 * v149) = v153;
            v172 = (_DWORD *)(*(_QWORD *)(*a14 + v150 + 24) + 8 * v149);
            *v172 = a11 + v151 + 1;
            v172[1] = v184;
            v173 = *(_QWORD *)(*v158 + v150 + 24);
            v174 = *(_DWORD *)(v173 + 4 * v147) + 1;
          }
          *(_DWORD *)(v173 + 4 * v149) = v174;
          v150 += 24;
          ++v151;
        }
        while (v148 != v150);
      }
      ++v147;
      v117 = v180;
    }
    while (v149 != (v176 >> 2));
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  _QWORD v20[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        v16 = a1[1];
        do
        {
          v18 = *(void **)(v16 - 24);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *(_QWORD *)(v4 - 16) = v17;
            operator delete(v17);
          }
          v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v20[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v10);
      v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void std::vector<std::vector<std::pair<unsigned int,unsigned int>>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[24 * v5];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v3[2];
        *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      v19 = *(_QWORD **)a1;
      v3 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        v20 = v3;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          v3 = v20;
        }
        while (v20 != v19);
        v3 = v19;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      v24 = *(_QWORD **)(a1 + 8);
      do
      {
        v26 = (void *)*(v24 - 3);
        v24 -= 3;
        v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        v3 = v24;
      }
      while (v24 != v23);
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

float cost<unsigned int>(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  float v23;
  uint64_t *v24;
  __int128 v26;
  __int128 v27;
  float v28;

  if (a1[3])
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::find<unsigned int>(*a1, a1[1], a2);
    if (v5)
    {
      v6 = v5;
      v26 = 0u;
      v27 = 0u;
      v28 = *((float *)v5 + 14);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)&v26, v5[4]);
      v7 = v6[5];
      if (v7)
      {
        v8 = *((_QWORD *)&v26 + 1);
        while (1)
        {
          v9 = *(unsigned int *)(v7 + 16);
          if (v8)
          {
            v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
            v10.i16[0] = vaddlv_u8(v10);
            if (v10.u32[0] > 1uLL)
            {
              v3 = *(unsigned int *)(v7 + 16);
              if (v8 <= v9)
                v3 = v9 % v8;
            }
            else
            {
              v3 = ((_DWORD)v8 - 1) & v9;
            }
            v11 = *(uint64_t ***)(v26 + 8 * v3);
            if (v11)
            {
              for (i = *v11; i; i = (uint64_t *)*i)
              {
                v13 = i[1];
                if (v13 == v9)
                {
                  if (*((_DWORD *)i + 4) == (_DWORD)v9)
                    goto LABEL_43;
                }
                else
                {
                  if (v10.u32[0] > 1uLL)
                  {
                    if (v13 >= v8)
                      v13 %= v8;
                  }
                  else
                  {
                    v13 &= v8 - 1;
                  }
                  if (v13 != v3)
                    break;
                }
              }
            }
          }
          v14 = operator new(0x18uLL);
          *v14 = 0;
          v14[1] = v9;
          v14[2] = *(_QWORD *)(v7 + 16);
          v15 = (float)(unint64_t)(*((_QWORD *)&v27 + 1) + 1);
          if (!v8 || (float)(v28 * (float)v8) < v15)
          {
            v16 = (v8 & (v8 - 1)) != 0;
            if (v8 < 3)
              v16 = 1;
            v17 = v16 | (2 * v8);
            v18 = vcvtps_u32_f32(v15 / v28);
            if (v17 <= v18)
              v19 = v18;
            else
              v19 = v17;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)&v26, v19);
            v8 = *((_QWORD *)&v26 + 1);
            if ((*((_QWORD *)&v26 + 1) & (*((_QWORD *)&v26 + 1) - 1)) != 0)
            {
              if (*((_QWORD *)&v26 + 1) <= v9)
                v3 = v9 % *((_QWORD *)&v26 + 1);
              else
                v3 = v9;
            }
            else
            {
              v3 = (DWORD2(v26) - 1) & v9;
            }
          }
          v20 = v26;
          v21 = *(_QWORD **)(v26 + 8 * v3);
          if (v21)
          {
            *v14 = *v21;
          }
          else
          {
            *v14 = v27;
            *(_QWORD *)&v27 = v14;
            *(_QWORD *)(v20 + 8 * v3) = &v27;
            if (!*v14)
              goto LABEL_42;
            v22 = *(_QWORD *)(*v14 + 8);
            if ((v8 & (v8 - 1)) != 0)
            {
              if (v22 >= v8)
                v22 %= v8;
            }
            else
            {
              v22 &= v8 - 1;
            }
            v21 = (_QWORD *)(v26 + 8 * v22);
          }
          *v21 = v14;
LABEL_42:
          ++*((_QWORD *)&v27 + 1);
LABEL_43:
          v7 = *(_QWORD *)v7;
          if (!v7)
            goto LABEL_50;
        }
      }
      v8 = *((_QWORD *)&v26 + 1);
LABEL_50:
      v24 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::find<unsigned int>(v26, v8, a3);
      if (v24)
        v23 = *((float *)v24 + 5);
      else
        v23 = 1.0;
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)&v26);
    }
    else
    {
      return 1.0;
    }
  }
  else if (a2 == a3)
  {
    return 0.0;
  }
  else
  {
    return 1.0;
  }
  return v23;
}

void sub_1C285FA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void marrs::mrr::mr::ProtocolFilter::filterEntities(_BYTE *a1@<X8>)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C281A000, v2, OS_LOG_TYPE_INFO, "[ProtocolFilter] Not implemented yet, returning input list", v3, 2u);
  }
  *a1 = 0;
  a1[24] = 0;
}

void marrs::mrr::mr::ProtocolFilter::~ProtocolFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  unint64_t m;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t ii;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  unint64_t jj;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  unint64_t v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  BOOL v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned int v63;
  unint64_t v64;
  float *n;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  unsigned int v77;
  BOOL v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  BOOL v86;
  unsigned int v87;
  unsigned int v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  uint64_t k;
  uint64_t v93;
  void *v94;
  unsigned int v95;
  BOOL v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  BOOL v137;
  unsigned int v138;
  void *v139;
  int64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int64_t v153;
  unsigned int v154;
  unsigned int v155;
  BOOL v156;
  unsigned int v157;
  unsigned int v158;
  void *v159;
  _QWORD *v160;
  void *v161;
  _QWORD *v162;
  void *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unsigned int v167;
  unsigned int v168;
  BOOL v169;
  unsigned int v170;
  unsigned int v171;
  void *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  unsigned int v182;
  BOOL v183;
  unsigned int v184;
  void *v185;
  uint64_t v187;
  _QWORD *i;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  BOOL v192;
  unsigned int v193;
  unsigned int v194;
  __int128 *v195;
  __int128 v196;
  __int128 v197;
  _QWORD *j;
  void *v199;
  void **v200;
  unsigned int v201;
  BOOL v202;
  unsigned int v203;
  void *v204;
  __int128 *v205;
  __int128 *v206;
  unint64_t v207;
  unsigned int *v208;
  __int128 *v209;
  unsigned int *v210;
  __int128 *v211;
  uint64_t v212;
  __int128 *v213;
  uint64_t v214;
  uint64_t v216;
  int64_t v217;
  unint64_t v218;
  unint64_t v219;
  void **v220[11];
  int v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  _OWORD v229[2];
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  int v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  char v239;
  void *v240[2];
  uint64_t v241;
  void **v242;
  void **v243[9];
  unsigned int v244;
  unsigned int v245;
  float v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  _OWORD v254[2];
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  int v259;
  __int128 __p;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  char v264;
  __int128 v265;
  uint64_t v266;

  v6 = result;
LABEL_2:
  v216 = a2 - 344;
  v218 = a2;
  v212 = a2 - 1032;
  v214 = a2 - 688;
  v208 = (unsigned int *)(a2 - 272);
  v210 = (unsigned int *)(a2 - 268);
  v207 = a2 - 612;
  m = v6;
  while (2)
  {
    v6 = m;
    v8 = a2 - m;
    v9 = 0x82FA0BE82FA0BE83 * ((uint64_t)(a2 - m) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v77 = *(_DWORD *)(v6 + 76);
        v78 = *v210 >= v77;
        if (*v210 == v77 && (v79 = *(_DWORD *)(v6 + 72), v78 = *v208 >= v79, *v208 == v79))
        {
          if (*(float *)(a2 - 256) <= *(float *)(v6 + 88))
            return result;
        }
        else if (v78)
        {
          return result;
        }
        return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v6, v216);
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, v6 + 344, v216);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, v6 + 344, v6 + 688, v216);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(v6, v6 + 344, v6 + 688, v6 + 1032, v216);
      default:
        if (v8 <= 8255)
        {
          if ((a4 & 1) == 0)
          {
            if (v6 == a2)
              return result;
            v187 = v6 + 344;
            if (v6 + 344 == a2)
              return result;
            for (i = (_QWORD *)(v6 + 680); ; i += 43)
            {
              v189 = v6;
              v6 = v187;
              v190 = *(_DWORD *)(v189 + 420);
              v191 = *(_DWORD *)(v189 + 76);
              v192 = v190 >= v191;
              if (v190 == v191
                && (v193 = *(_DWORD *)(v189 + 416), v194 = *(_DWORD *)(v189 + 72), v192 = v193 >= v194, v193 == v194))
              {
                if (*(float *)(v189 + 432) > *(float *)(v189 + 88))
                  goto LABEL_325;
              }
              else if (!v192)
              {
LABEL_325:
                v195 = (__int128 *)(v189 + 552);
                MEMORY[0x1C3BC54B4](v243, v6);
                v246 = *(float *)(v189 + 432);
                LOBYTE(v247) = 0;
                v264 = 0;
                if (*(_BYTE *)(v189 + 656))
                {
                  v247 = *(_QWORD *)(v189 + 440);
                  v248 = *(_OWORD *)(v189 + 448);
                  v249 = *(_QWORD *)(v189 + 464);
                  *(_QWORD *)(v189 + 448) = 0;
                  *(_QWORD *)(v189 + 456) = 0;
                  *(_QWORD *)(v189 + 464) = 0;
                  v251 = *(_QWORD *)(v189 + 488);
                  v250 = *(_OWORD *)(v189 + 472);
                  *(_QWORD *)(v189 + 480) = 0;
                  *(_QWORD *)(v189 + 488) = 0;
                  *(_QWORD *)(v189 + 472) = 0;
                  v196 = *(_OWORD *)(v189 + 496);
                  v253 = *(_QWORD *)(v189 + 512);
                  v252 = v196;
                  *(_QWORD *)(v189 + 496) = 0;
                  *(_QWORD *)(v189 + 504) = 0;
                  *(_QWORD *)(v189 + 512) = 0;
                  v197 = *(_OWORD *)(v189 + 520);
                  *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(v189 + 532);
                  v254[0] = v197;
                  v255 = *v195;
                  v256 = *(_QWORD *)(v189 + 568);
                  *(_QWORD *)v195 = 0;
                  *(_QWORD *)(v189 + 560) = 0;
                  *(_QWORD *)(v189 + 568) = 0;
                  v257 = *(_OWORD *)(v189 + 576);
                  v258 = *(_QWORD *)(v189 + 592);
                  *(_QWORD *)(v189 + 584) = 0;
                  *(_QWORD *)(v189 + 576) = 0;
                  *(_QWORD *)(v189 + 592) = 0;
                  v259 = *(_DWORD *)(v189 + 600);
                  __p = *(_OWORD *)(v189 + 608);
                  v261 = *(_QWORD *)(v189 + 624);
                  *(_QWORD *)(v189 + 616) = 0;
                  *(_QWORD *)(v189 + 608) = 0;
                  *(_QWORD *)(v189 + 624) = 0;
                  v262 = *(_OWORD *)(v189 + 632);
                  v263 = *(_QWORD *)(v189 + 648);
                  *(_QWORD *)(v189 + 632) = 0;
                  *(_QWORD *)(v189 + 640) = 0;
                  *(_QWORD *)(v189 + 648) = 0;
                  v264 = 1;
                }
                v265 = *(_OWORD *)(v189 + 664);
                v266 = *(_QWORD *)(v189 + 680);
                *(_QWORD *)(v189 + 664) = 0;
                *(_QWORD *)(v189 + 672) = 0;
                *(_QWORD *)(v189 + 680) = 0;
                for (j = i; ; j -= 43)
                {
                  sirinluinternal::MatchingSpan::operator=();
                  *((_DWORD *)j - 62) = *((_DWORD *)j - 148);
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(j - 30), (uint64_t)(j - 73));
                  v199 = (void *)*(j - 2);
                  if (v199)
                  {
                    *(j - 1) = v199;
                    operator delete(v199);
                    *j = 0;
                  }
                  v200 = (void **)(j - 45);
                  *((_OWORD *)j - 1) = *(_OWORD *)(j - 45);
                  *j = *(j - 43);
                  *v200 = 0;
                  v200[1] = 0;
                  v200[2] = 0;
                  v201 = *((_DWORD *)j - 237);
                  v202 = v245 >= v201;
                  if (v245 == v201 && (v203 = *((_DWORD *)j - 238), v202 = v244 >= v203, v244 == v203))
                  {
                    if (v246 <= *((float *)j - 234))
                      goto LABEL_336;
                  }
                  else if (v202)
                  {
LABEL_336:
                    sirinluinternal::MatchingSpan::operator=();
                    *((float *)j - 148) = v246;
                    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(j - 73), (uint64_t)&v247);
                    v204 = *v200;
                    if (*v200)
                    {
                      *(j - 44) = v204;
                      operator delete(v204);
                      *v200 = 0;
                      *(j - 44) = 0;
                      *(j - 43) = 0;
                    }
                    *(_OWORD *)v200 = v265;
                    *(j - 43) = v266;
                    v265 = 0uLL;
                    v266 = 0;
                    if (v264)
                    {
                      v220[0] = (void **)&v262;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v220);
                      if (SHIBYTE(v261) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v258) < 0)
                        operator delete((void *)v257);
                      v220[0] = (void **)&v255;
                      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v220);
                      if (SHIBYTE(v253) < 0)
                        operator delete((void *)v252);
                      if (SHIBYTE(v251) < 0)
                        operator delete((void *)v250);
                      if (SHIBYTE(v249) < 0)
                        operator delete((void *)v248);
                    }
                    result = MEMORY[0x1C3BC54D8](v243);
                    break;
                  }
                }
              }
              v187 = v6 + 344;
              if (v6 + 344 == v218)
                return result;
            }
          }
          if (v6 == a2)
            return result;
          v80 = v6 + 344;
          if (v6 + 344 == a2)
            return result;
          v81 = 0;
          v82 = v6;
LABEL_162:
          v83 = v82;
          v82 = v80;
          v84 = *(_DWORD *)(v83 + 420);
          v85 = *(_DWORD *)(v83 + 76);
          v86 = v84 >= v85;
          if (v84 == v85 && (v87 = *(_DWORD *)(v83 + 416), v88 = *(_DWORD *)(v83 + 72), v86 = v87 >= v88, v87 == v88))
          {
            if (*(float *)(v83 + 432) <= *(float *)(v83 + 88))
              goto LABEL_195;
          }
          else if (v86)
          {
            goto LABEL_195;
          }
          v89 = (__int128 *)(v83 + 552);
          MEMORY[0x1C3BC54B4](v243, v82);
          v246 = *(float *)(v83 + 432);
          LOBYTE(v247) = 0;
          v264 = 0;
          if (*(_BYTE *)(v83 + 656))
          {
            v247 = *(_QWORD *)(v83 + 440);
            v248 = *(_OWORD *)(v83 + 448);
            v249 = *(_QWORD *)(v83 + 464);
            *(_QWORD *)(v83 + 448) = 0;
            *(_QWORD *)(v83 + 456) = 0;
            *(_QWORD *)(v83 + 464) = 0;
            v251 = *(_QWORD *)(v83 + 488);
            v250 = *(_OWORD *)(v83 + 472);
            *(_QWORD *)(v83 + 480) = 0;
            *(_QWORD *)(v83 + 488) = 0;
            *(_QWORD *)(v83 + 472) = 0;
            v90 = *(_OWORD *)(v83 + 496);
            v253 = *(_QWORD *)(v83 + 512);
            v252 = v90;
            *(_QWORD *)(v83 + 496) = 0;
            *(_QWORD *)(v83 + 504) = 0;
            *(_QWORD *)(v83 + 512) = 0;
            v91 = *(_OWORD *)(v83 + 520);
            *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(v83 + 532);
            v254[0] = v91;
            v255 = *v89;
            v256 = *(_QWORD *)(v83 + 568);
            *(_QWORD *)v89 = 0;
            *(_QWORD *)(v83 + 560) = 0;
            *(_QWORD *)(v83 + 568) = 0;
            v257 = *(_OWORD *)(v83 + 576);
            v258 = *(_QWORD *)(v83 + 592);
            *(_QWORD *)(v83 + 584) = 0;
            *(_QWORD *)(v83 + 576) = 0;
            *(_QWORD *)(v83 + 592) = 0;
            v259 = *(_DWORD *)(v83 + 600);
            __p = *(_OWORD *)(v83 + 608);
            v261 = *(_QWORD *)(v83 + 624);
            *(_QWORD *)(v83 + 616) = 0;
            *(_QWORD *)(v83 + 608) = 0;
            *(_QWORD *)(v83 + 624) = 0;
            v262 = *(_OWORD *)(v83 + 632);
            v263 = *(_QWORD *)(v83 + 648);
            *(_QWORD *)(v83 + 632) = 0;
            *(_QWORD *)(v83 + 640) = 0;
            *(_QWORD *)(v83 + 648) = 0;
            v264 = 1;
          }
          v265 = *(_OWORD *)(v83 + 664);
          v266 = *(_QWORD *)(v83 + 680);
          *(_QWORD *)(v83 + 664) = 0;
          *(_QWORD *)(v83 + 672) = 0;
          *(_QWORD *)(v83 + 680) = 0;
          for (k = v81; ; k -= 344)
          {
            v93 = v6 + k;
            sirinluinternal::MatchingSpan::operator=();
            *(_DWORD *)(v93 + 432) = *(_DWORD *)(v93 + 88);
            std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v93 + 440, v93 + 96);
            v94 = *(void **)(v6 + k + 664);
            if (v94)
            {
              *(_QWORD *)(v93 + 672) = v94;
              operator delete(v94);
              *(_QWORD *)(v93 + 680) = 0;
            }
            *(_OWORD *)(v93 + 664) = *(_OWORD *)(v93 + 320);
            *(_QWORD *)(v93 + 680) = *(_QWORD *)(v93 + 336);
            *(_QWORD *)(v93 + 320) = 0;
            *(_QWORD *)(v93 + 328) = 0;
            *(_QWORD *)(v93 + 336) = 0;
            if (!k)
            {
              v98 = v6 + 320;
              v99 = v6 + 96;
              v100 = v6;
              goto LABEL_181;
            }
            v95 = *(_DWORD *)(v6 + k - 268);
            v96 = v245 >= v95;
            if (v245 == v95 && (v97 = *(_DWORD *)(v6 + k - 272), v96 = v244 >= v97, v244 == v97))
            {
              if (v246 <= *(float *)(v6 + k - 256))
                goto LABEL_180;
            }
            else if (v96)
            {
LABEL_180:
              v100 = v6 + k;
              v98 = v6 + k + 320;
              v99 = v100 + 96;
LABEL_181:
              sirinluinternal::MatchingSpan::operator=();
              *(float *)(v100 + 88) = v246;
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v99, (uint64_t)&v247);
              v101 = *(void **)v98;
              if (*(_QWORD *)v98)
              {
                *(_QWORD *)(v100 + 328) = v101;
                operator delete(v101);
                *(_QWORD *)v98 = 0;
                *(_QWORD *)(v98 + 8) = 0;
                *(_QWORD *)(v98 + 16) = 0;
              }
              *(_QWORD *)v98 = v265;
              *(_QWORD *)(v100 + 328) = *((_QWORD *)&v265 + 1);
              *(_QWORD *)(v100 + 336) = v266;
              v265 = 0uLL;
              v266 = 0;
              if (v264)
              {
                v220[0] = (void **)&v262;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v220);
                if (SHIBYTE(v261) < 0)
                  operator delete((void *)__p);
                if (SHIBYTE(v258) < 0)
                  operator delete((void *)v257);
                v220[0] = (void **)&v255;
                std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v220);
                if (SHIBYTE(v253) < 0)
                  operator delete((void *)v252);
                if (SHIBYTE(v251) < 0)
                  operator delete((void *)v250);
                if (SHIBYTE(v249) < 0)
                  operator delete((void *)v248);
              }
              result = MEMORY[0x1C3BC54D8](v243);
LABEL_195:
              v80 = v82 + 344;
              v81 += 344;
              if (v82 + 344 == v218)
                return result;
              goto LABEL_162;
            }
          }
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v217 = (unint64_t)(v9 - 2) >> 1;
          v102 = v217;
          while (1)
          {
            v103 = v102;
            if (v217 < v102)
              goto LABEL_245;
            v104 = (2 * v102) | 1;
            v105 = v6 + 344 * v104;
            if (2 * v102 + 2 < v9)
            {
              v106 = *(_DWORD *)(v105 + 76);
              v107 = *(_DWORD *)(v105 + 420);
              v108 = v106 >= v107;
              if (v106 == v107)
              {
                v109 = *(_DWORD *)(v105 + 72);
                v110 = *(_DWORD *)(v105 + 416);
                v108 = v109 >= v110;
                if (v109 == v110)
                {
                  if (*(float *)(v6 + 344 * v104 + 88) <= *(float *)(v105 + 432))
                    goto LABEL_207;
LABEL_206:
                  v105 += 344;
                  v104 = 2 * v102 + 2;
                  goto LABEL_207;
                }
              }
              if (!v108)
                goto LABEL_206;
            }
LABEL_207:
            v111 = v6 + 344 * v102;
            v112 = *(_DWORD *)(v105 + 76);
            v113 = *(_DWORD *)(v111 + 76);
            v114 = v112 >= v113;
            if (v112 == v113
              && (v115 = *(_DWORD *)(v105 + 72), v116 = *(_DWORD *)(v111 + 72), v114 = v115 >= v116, v115 == v116))
            {
              if (*(float *)(v105 + 88) > *(float *)(v6 + 344 * v103 + 88))
                goto LABEL_245;
            }
            else if (!v114)
            {
              goto LABEL_245;
            }
            MEMORY[0x1C3BC54B4](v243, v6 + 344 * v103);
            v117 = v6 + 344 * v103;
            v246 = *(float *)(v117 + 88);
            LOBYTE(v247) = 0;
            v264 = 0;
            if (*(_BYTE *)(v117 + 312))
            {
              v118 = v6 + 344 * v103;
              v119 = *(_QWORD *)(v118 + 96);
              v118 += 96;
              v247 = v119;
              v120 = *(_OWORD *)(v118 + 8);
              v249 = *(_QWORD *)(v118 + 24);
              v248 = v120;
              *(_QWORD *)(v118 + 16) = 0;
              *(_QWORD *)(v118 + 24) = 0;
              *(_QWORD *)(v118 + 8) = 0;
              v121 = *(_OWORD *)(v118 + 32);
              v251 = *(_QWORD *)(v118 + 48);
              v250 = v121;
              *(_QWORD *)(v118 + 40) = 0;
              *(_QWORD *)(v118 + 48) = 0;
              *(_QWORD *)(v118 + 32) = 0;
              v122 = *(_OWORD *)(v118 + 56);
              v253 = *(_QWORD *)(v118 + 72);
              v252 = v122;
              *(_QWORD *)(v118 + 64) = 0;
              *(_QWORD *)(v118 + 72) = 0;
              *(_QWORD *)(v118 + 56) = 0;
              v123 = *(_OWORD *)(v118 + 80);
              *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(v118 + 92);
              v254[0] = v123;
              v256 = 0;
              v255 = 0uLL;
              v255 = *(_OWORD *)(v118 + 112);
              v256 = *(_QWORD *)(v118 + 128);
              *(_QWORD *)(v118 + 112) = 0;
              *(_QWORD *)(v118 + 120) = 0;
              *(_QWORD *)(v118 + 128) = 0;
              v124 = *(_OWORD *)(v118 + 136);
              v258 = *(_QWORD *)(v118 + 152);
              v257 = v124;
              *(_QWORD *)(v118 + 144) = 0;
              *(_QWORD *)(v118 + 152) = 0;
              *(_QWORD *)(v118 + 136) = 0;
              v259 = *(_DWORD *)(v118 + 160);
              v125 = *(_OWORD *)(v118 + 168);
              v261 = *(_QWORD *)(v118 + 184);
              __p = v125;
              *(_QWORD *)(v118 + 176) = 0;
              *(_QWORD *)(v118 + 184) = 0;
              *(_QWORD *)(v118 + 168) = 0;
              v262 = 0uLL;
              v263 = 0;
              v262 = *(_OWORD *)(v118 + 192);
              v263 = *(_QWORD *)(v118 + 208);
              *(_QWORD *)(v118 + 192) = 0;
              *(_QWORD *)(v118 + 200) = 0;
              *(_QWORD *)(v118 + 208) = 0;
              v264 = 1;
            }
            v126 = v6 + 344 * v103;
            v265 = *(_OWORD *)(v126 + 320);
            v266 = *(_QWORD *)(v126 + 336);
            *(_QWORD *)(v126 + 320) = 0;
            *(_QWORD *)(v126 + 328) = 0;
            *(_QWORD *)(v126 + 336) = 0;
            while (1)
            {
              v127 = v105;
              sirinluinternal::MatchingSpan::operator=();
              *(_DWORD *)(v111 + 88) = *(_DWORD *)(v105 + 88);
              v128 = v105 + 96;
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v111 + 96, v105 + 96);
              v129 = *(void **)(v111 + 320);
              if (v129)
              {
                *(_QWORD *)(v111 + 328) = v129;
                operator delete(v129);
                *(_QWORD *)(v111 + 320) = 0;
                *(_QWORD *)(v111 + 328) = 0;
                *(_QWORD *)(v111 + 336) = 0;
              }
              *(_OWORD *)(v111 + 320) = *(_OWORD *)(v105 + 320);
              *(_QWORD *)(v111 + 336) = *(_QWORD *)(v105 + 336);
              *(_QWORD *)(v105 + 320) = 0;
              *(_QWORD *)(v105 + 328) = 0;
              *(_QWORD *)(v105 + 336) = 0;
              if (v217 < v104)
                break;
              v130 = (2 * v104) | 1;
              v105 = v6 + 344 * v130;
              if (2 * v104 + 2 >= v9)
                goto LABEL_226;
              v131 = *(_DWORD *)(v105 + 76);
              v132 = *(_DWORD *)(v105 + 420);
              v133 = v131 >= v132;
              if (v131 != v132
                || (v134 = *(_DWORD *)(v105 + 72), v135 = *(_DWORD *)(v105 + 416), v133 = v134 >= v135, v134 != v135))
              {
                if (v133)
                  goto LABEL_226;
LABEL_225:
                v105 += 344;
                v130 = 2 * v104 + 2;
                goto LABEL_226;
              }
              if (*(float *)(v6 + 344 * v130 + 88) > *(float *)(v105 + 432))
                goto LABEL_225;
LABEL_226:
              v136 = *(_DWORD *)(v105 + 76);
              v137 = v136 >= v245;
              if (v136 == v245 && (v138 = *(_DWORD *)(v105 + 72), v137 = v138 >= v244, v138 == v244))
              {
                v111 = v127;
                v104 = v130;
                if (*(float *)(v105 + 88) > v246)
                  break;
              }
              else
              {
                v111 = v127;
                v104 = v130;
                if (!v137)
                  break;
              }
            }
            sirinluinternal::MatchingSpan::operator=();
            *(float *)(v127 + 88) = v246;
            std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v128, (uint64_t)&v247);
            v139 = *(void **)(v127 + 320);
            if (v139)
            {
              *(_QWORD *)(v127 + 328) = v139;
              operator delete(v139);
              *(_QWORD *)(v127 + 320) = 0;
              *(_QWORD *)(v127 + 328) = 0;
              *(_QWORD *)(v127 + 336) = 0;
            }
            *(_OWORD *)(v127 + 320) = v265;
            *(_QWORD *)(v127 + 336) = v266;
            v265 = 0uLL;
            v266 = 0;
            if (v264)
            {
              v220[0] = (void **)&v262;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v220);
              if (SHIBYTE(v261) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v258) < 0)
                operator delete((void *)v257);
              v220[0] = (void **)&v255;
              std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v220);
              if (SHIBYTE(v253) < 0)
                operator delete((void *)v252);
              if (SHIBYTE(v251) < 0)
                operator delete((void *)v250);
              if (SHIBYTE(v249) < 0)
                operator delete((void *)v248);
            }
            MEMORY[0x1C3BC54D8](v243);
LABEL_245:
            v102 = v103 - 1;
            if (!v103)
            {
              v140 = v8 / 0x158uLL;
              v213 = (__int128 *)(v6 + 104);
              v209 = (__int128 *)(v6 + 152);
              v211 = (__int128 *)(v6 + 128);
              v206 = (__int128 *)(v6 + 232);
              v205 = (__int128 *)(v6 + 264);
              v141 = v218;
              while (1)
              {
                MEMORY[0x1C3BC54B4](v220, v6);
                v221 = *(_DWORD *)(v6 + 88);
                LOBYTE(v222) = 0;
                v239 = 0;
                if (*(_BYTE *)(v6 + 312))
                {
                  v222 = *(_QWORD *)(v6 + 96);
                  v142 = *(_QWORD *)(v6 + 120);
                  v223 = *v213;
                  v224 = v142;
                  *(_QWORD *)(v6 + 112) = 0;
                  *(_QWORD *)(v6 + 120) = 0;
                  *(_QWORD *)v213 = 0;
                  v143 = *(_QWORD *)(v6 + 144);
                  v225 = *v211;
                  v226 = v143;
                  *(_QWORD *)(v6 + 136) = 0;
                  *(_QWORD *)(v6 + 144) = 0;
                  *(_QWORD *)v211 = 0;
                  v144 = *v209;
                  v228 = *(_QWORD *)(v6 + 168);
                  v227 = v144;
                  *(_QWORD *)v209 = 0;
                  *(_QWORD *)(v6 + 160) = 0;
                  *(_QWORD *)(v6 + 168) = 0;
                  v145 = *(_OWORD *)(v6 + 176);
                  *(_OWORD *)((char *)v229 + 12) = *(_OWORD *)(v6 + 188);
                  v229[0] = v145;
                  v231 = 0;
                  v230 = 0uLL;
                  v230 = *(_OWORD *)(v6 + 208);
                  v231 = *(_QWORD *)(v6 + 224);
                  *(_QWORD *)(v6 + 208) = 0;
                  *(_QWORD *)(v6 + 216) = 0;
                  *(_QWORD *)(v6 + 224) = 0;
                  v146 = *v206;
                  v233 = *(_QWORD *)(v6 + 248);
                  v232 = v146;
                  *(_QWORD *)v206 = 0;
                  *(_QWORD *)(v6 + 240) = 0;
                  *(_QWORD *)(v6 + 248) = 0;
                  v234 = *(_DWORD *)(v6 + 256);
                  v147 = *v205;
                  v236 = *(_QWORD *)(v6 + 280);
                  v235 = v147;
                  *(_QWORD *)v205 = 0;
                  *(_QWORD *)(v6 + 272) = 0;
                  *(_QWORD *)(v6 + 280) = 0;
                  v237 = 0uLL;
                  v238 = 0;
                  v237 = *(_OWORD *)(v6 + 288);
                  v238 = *(_QWORD *)(v6 + 304);
                  *(_QWORD *)(v6 + 288) = 0;
                  *(_QWORD *)(v6 + 296) = 0;
                  *(_QWORD *)(v6 + 304) = 0;
                  v239 = 1;
                }
                v148 = 0;
                *(_OWORD *)v240 = *(_OWORD *)(v6 + 320);
                v241 = *(_QWORD *)(v6 + 336);
                *(_QWORD *)(v6 + 320) = 0;
                *(_QWORD *)(v6 + 328) = 0;
                *(_QWORD *)(v6 + 336) = 0;
                v149 = v6;
                do
                {
                  v150 = v148 + 1;
                  v151 = v149 + 344 * (v148 + 1);
                  v152 = 2 * v148;
                  v148 = (2 * v148) | 1;
                  v153 = v152 + 2;
                  if (v153 >= v140)
                    goto LABEL_257;
                  v154 = *(_DWORD *)(v151 + 76);
                  v155 = *(_DWORD *)(v151 + 420);
                  v156 = v154 >= v155;
                  if (v154 != v155
                    || (v157 = *(_DWORD *)(v151 + 72), v158 = *(_DWORD *)(v151 + 416), v156 = v157 >= v158, v157 != v158))
                  {
                    if (v156)
                      goto LABEL_257;
LABEL_256:
                    v151 += 344;
                    v148 = v153;
                    goto LABEL_257;
                  }
                  if (*(float *)(v149 + 344 * v150 + 88) > *(float *)(v151 + 432))
                    goto LABEL_256;
LABEL_257:
                  sirinluinternal::MatchingSpan::operator=();
                  *(_DWORD *)(v149 + 88) = *(_DWORD *)(v151 + 88);
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v149 + 96, v151 + 96);
                  v159 = *(void **)(v149 + 320);
                  if (v159)
                  {
                    *(_QWORD *)(v149 + 328) = v159;
                    operator delete(v159);
                    *(_QWORD *)(v149 + 320) = 0;
                    *(_QWORD *)(v149 + 328) = 0;
                    *(_QWORD *)(v149 + 336) = 0;
                  }
                  v160 = (_QWORD *)(v151 + 320);
                  *(_OWORD *)(v149 + 320) = *(_OWORD *)(v151 + 320);
                  *(_QWORD *)(v149 + 336) = *(_QWORD *)(v151 + 336);
                  *(_QWORD *)(v151 + 320) = 0;
                  *(_QWORD *)(v151 + 328) = 0;
                  *(_QWORD *)(v151 + 336) = 0;
                  v149 = v151;
                }
                while (v148 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                v219 = v141 - 344;
                if (v151 == v141 - 344)
                {
                  sirinluinternal::MatchingSpan::operator=();
                  *(_DWORD *)(v151 + 88) = v221;
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v151 + 96, (uint64_t)&v222);
                  v172 = *(void **)(v151 + 320);
                  if (v172)
                  {
                    *(_QWORD *)(v151 + 328) = v172;
                    operator delete(v172);
                    *v160 = 0;
                    *(_QWORD *)(v151 + 328) = 0;
                    *(_QWORD *)(v151 + 336) = 0;
                  }
                  *(_OWORD *)(v151 + 320) = *(_OWORD *)v240;
                  *(_QWORD *)(v151 + 336) = v241;
                  v240[0] = 0;
                  v240[1] = 0;
                  v241 = 0;
                  goto LABEL_301;
                }
                sirinluinternal::MatchingSpan::operator=();
                *(_DWORD *)(v151 + 88) = *(_DWORD *)(v141 - 256);
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v151 + 96, v141 - 248);
                v161 = *(void **)(v151 + 320);
                if (v161)
                {
                  *(_QWORD *)(v151 + 328) = v161;
                  operator delete(v161);
                  *v160 = 0;
                  *(_QWORD *)(v151 + 328) = 0;
                  *(_QWORD *)(v151 + 336) = 0;
                }
                v162 = (_QWORD *)(v141 - 24);
                *(_OWORD *)(v151 + 320) = *(_OWORD *)(v141 - 24);
                *(_QWORD *)(v151 + 336) = *(_QWORD *)(v141 - 8);
                *v162 = 0;
                v162[1] = 0;
                v162[2] = 0;
                sirinluinternal::MatchingSpan::operator=();
                *(_DWORD *)(v141 - 256) = v221;
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v141 - 248, (uint64_t)&v222);
                v163 = *(void **)(v141 - 24);
                if (v163)
                {
                  *(_QWORD *)(v141 - 16) = v163;
                  operator delete(v163);
                }
                *(_OWORD *)(v141 - 24) = *(_OWORD *)v240;
                *(_QWORD *)(v141 - 8) = v241;
                v240[0] = 0;
                v240[1] = 0;
                v241 = 0;
                v164 = v151 + 344 - v6;
                if (v164 >= 345)
                {
                  v165 = (v164 / 0x158uLL - 2) >> 1;
                  v166 = v6 + 344 * v165;
                  v167 = *(_DWORD *)(v166 + 76);
                  v168 = *(_DWORD *)(v151 + 76);
                  v169 = v167 >= v168;
                  if (v167 == v168
                    && (v170 = *(_DWORD *)(v166 + 72), v171 = *(_DWORD *)(v151 + 72), v169 = v170 >= v171, v170 == v171))
                  {
                    if (*(float *)(v6 + 344 * v165 + 88) <= *(float *)(v151 + 88))
                      goto LABEL_301;
LABEL_274:
                    MEMORY[0x1C3BC54B4](v243, v151);
                    v246 = *(float *)(v151 + 88);
                    LOBYTE(v247) = 0;
                    v264 = 0;
                    if (*(_BYTE *)(v151 + 312))
                    {
                      v247 = *(_QWORD *)(v151 + 96);
                      v173 = *(_OWORD *)(v151 + 104);
                      v249 = *(_QWORD *)(v151 + 120);
                      v248 = v173;
                      *(_QWORD *)(v151 + 112) = 0;
                      *(_QWORD *)(v151 + 120) = 0;
                      *(_QWORD *)(v151 + 104) = 0;
                      v174 = *(_OWORD *)(v151 + 128);
                      v251 = *(_QWORD *)(v151 + 144);
                      v250 = v174;
                      *(_QWORD *)(v151 + 136) = 0;
                      *(_QWORD *)(v151 + 144) = 0;
                      *(_QWORD *)(v151 + 128) = 0;
                      v175 = *(_OWORD *)(v151 + 152);
                      v253 = *(_QWORD *)(v151 + 168);
                      v252 = v175;
                      *(_QWORD *)(v151 + 160) = 0;
                      *(_QWORD *)(v151 + 168) = 0;
                      *(_QWORD *)(v151 + 152) = 0;
                      v176 = *(_OWORD *)(v151 + 176);
                      *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(v151 + 188);
                      v254[0] = v176;
                      v256 = 0;
                      v255 = 0uLL;
                      v255 = *(_OWORD *)(v151 + 208);
                      v256 = *(_QWORD *)(v151 + 224);
                      *(_QWORD *)(v151 + 208) = 0;
                      *(_QWORD *)(v151 + 216) = 0;
                      *(_QWORD *)(v151 + 224) = 0;
                      v177 = *(_OWORD *)(v151 + 232);
                      v258 = *(_QWORD *)(v151 + 248);
                      v257 = v177;
                      *(_QWORD *)(v151 + 240) = 0;
                      *(_QWORD *)(v151 + 248) = 0;
                      *(_QWORD *)(v151 + 232) = 0;
                      v259 = *(_DWORD *)(v151 + 256);
                      v178 = *(_OWORD *)(v151 + 264);
                      v261 = *(_QWORD *)(v151 + 280);
                      __p = v178;
                      *(_QWORD *)(v151 + 272) = 0;
                      *(_QWORD *)(v151 + 280) = 0;
                      *(_QWORD *)(v151 + 264) = 0;
                      v262 = 0uLL;
                      v263 = 0;
                      v262 = *(_OWORD *)(v151 + 288);
                      v263 = *(_QWORD *)(v151 + 304);
                      *(_QWORD *)(v151 + 288) = 0;
                      *(_QWORD *)(v151 + 296) = 0;
                      *(_QWORD *)(v151 + 304) = 0;
                      v264 = 1;
                    }
                    v265 = *(_OWORD *)(v151 + 320);
                    v266 = *(_QWORD *)(v151 + 336);
                    *v160 = 0;
                    *(_QWORD *)(v151 + 328) = 0;
                    *(_QWORD *)(v151 + 336) = 0;
                    while (1)
                    {
                      v179 = v166;
                      sirinluinternal::MatchingSpan::operator=();
                      *(_DWORD *)(v151 + 88) = *(_DWORD *)(v166 + 88);
                      v180 = v166 + 96;
                      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v151 + 96, v166 + 96);
                      v181 = *(void **)(v151 + 320);
                      if (v181)
                      {
                        *(_QWORD *)(v151 + 328) = v181;
                        operator delete(v181);
                        *(_QWORD *)(v151 + 320) = 0;
                        *(_QWORD *)(v151 + 328) = 0;
                        *(_QWORD *)(v151 + 336) = 0;
                      }
                      *(_OWORD *)(v151 + 320) = *(_OWORD *)(v166 + 320);
                      *(_QWORD *)(v151 + 336) = *(_QWORD *)(v166 + 336);
                      *(_QWORD *)(v166 + 320) = 0;
                      *(_QWORD *)(v166 + 328) = 0;
                      *(_QWORD *)(v166 + 336) = 0;
                      if (!v165)
                        break;
                      v165 = (v165 - 1) >> 1;
                      v166 = v6 + 344 * v165;
                      v182 = *(_DWORD *)(v166 + 76);
                      v183 = v182 >= v245;
                      if (v182 == v245 && (v184 = *(_DWORD *)(v166 + 72), v183 = v184 >= v244, v184 == v244))
                      {
                        v151 = v179;
                        if (*(float *)(v6 + 344 * v165 + 88) <= v246)
                          break;
                      }
                      else
                      {
                        v151 = v179;
                        if (v183)
                          break;
                      }
                    }
                    sirinluinternal::MatchingSpan::operator=();
                    *(float *)(v179 + 88) = v246;
                    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v180, (uint64_t)&v247);
                    v185 = *(void **)(v179 + 320);
                    if (v185)
                    {
                      *(_QWORD *)(v179 + 328) = v185;
                      operator delete(v185);
                    }
                    *(_OWORD *)(v179 + 320) = v265;
                    *(_QWORD *)(v179 + 336) = v266;
                    v265 = 0uLL;
                    v266 = 0;
                    if (v264)
                    {
                      v242 = (void **)&v262;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v242);
                      if (SHIBYTE(v261) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v258) < 0)
                        operator delete((void *)v257);
                      v242 = (void **)&v255;
                      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v242);
                      if (SHIBYTE(v253) < 0)
                        operator delete((void *)v252);
                      if (SHIBYTE(v251) < 0)
                        operator delete((void *)v250);
                      if (SHIBYTE(v249) < 0)
                        operator delete((void *)v248);
                    }
                    MEMORY[0x1C3BC54D8](v243);
                    if (v240[0])
                    {
                      v240[1] = v240[0];
                      operator delete(v240[0]);
                    }
                  }
                  else if (!v169)
                  {
                    goto LABEL_274;
                  }
                }
LABEL_301:
                v141 = v219;
                if (v239)
                {
                  v243[0] = (void **)&v237;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v243);
                  if (SHIBYTE(v236) < 0)
                    operator delete((void *)v235);
                  if (SHIBYTE(v233) < 0)
                    operator delete((void *)v232);
                  v243[0] = (void **)&v230;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v243);
                  if (SHIBYTE(v228) < 0)
                    operator delete((void *)v227);
                  if (SHIBYTE(v226) < 0)
                    operator delete((void *)v225);
                  if (SHIBYTE(v224) < 0)
                    operator delete((void *)v223);
                }
                result = MEMORY[0x1C3BC54D8](v220);
                if (v140-- <= 2)
                  return result;
              }
            }
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v6 + 344 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0xAC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v11, v6, v216);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, v11, v216);
          v12 = 344 * v10;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6 + 344, v12 + v6 - 344, v214);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6 + 688, v6 + 344 + v12, v212);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v12 + v6 - 344, v11, v6 + 344 + v12);
          std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v6, v11);
        }
        --a3;
        a2 = v218;
        if ((a4 & 1) == 0)
        {
          v13 = *(_DWORD *)(v6 - 268);
          v14 = *(_DWORD *)(v6 + 76);
          v15 = v13 >= v14;
          if (v13 == v14 && (v16 = *(_DWORD *)(v6 - 272), v17 = *(_DWORD *)(v6 + 72), v15 = v16 >= v17, v16 == v17))
          {
            if (*(float *)(v6 - 256) > *(float *)(v6 + 88))
              goto LABEL_20;
          }
          else if (!v15)
          {
            goto LABEL_20;
          }
          MEMORY[0x1C3BC54B4](v243, v6);
          v18 = *(float *)(v6 + 88);
          v246 = v18;
          LOBYTE(v247) = 0;
          v264 = 0;
          if (*(_BYTE *)(v6 + 312))
          {
            v247 = *(_QWORD *)(v6 + 96);
            v19 = *(_QWORD *)(v6 + 120);
            v248 = *(_OWORD *)(v6 + 104);
            v249 = v19;
            *(_QWORD *)(v6 + 112) = 0;
            *(_QWORD *)(v6 + 120) = 0;
            *(_QWORD *)(v6 + 104) = 0;
            v20 = *(_QWORD *)(v6 + 144);
            v250 = *(_OWORD *)(v6 + 128);
            v251 = v20;
            *(_QWORD *)(v6 + 136) = 0;
            *(_QWORD *)(v6 + 144) = 0;
            *(_QWORD *)(v6 + 128) = 0;
            v21 = *(_OWORD *)(v6 + 152);
            v253 = *(_QWORD *)(v6 + 168);
            v252 = v21;
            *(_QWORD *)(v6 + 152) = 0;
            *(_QWORD *)(v6 + 160) = 0;
            *(_QWORD *)(v6 + 168) = 0;
            v22 = *(_OWORD *)(v6 + 176);
            *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(v6 + 188);
            v254[0] = v22;
            v256 = 0;
            v255 = 0uLL;
            v255 = *(_OWORD *)(v6 + 208);
            v256 = *(_QWORD *)(v6 + 224);
            *(_QWORD *)(v6 + 208) = 0;
            *(_QWORD *)(v6 + 216) = 0;
            *(_QWORD *)(v6 + 224) = 0;
            v23 = *(_OWORD *)(v6 + 232);
            v258 = *(_QWORD *)(v6 + 248);
            v257 = v23;
            *(_QWORD *)(v6 + 232) = 0;
            *(_QWORD *)(v6 + 240) = 0;
            *(_QWORD *)(v6 + 248) = 0;
            v259 = *(_DWORD *)(v6 + 256);
            v24 = *(_OWORD *)(v6 + 264);
            v261 = *(_QWORD *)(v6 + 280);
            __p = v24;
            *(_QWORD *)(v6 + 264) = 0;
            *(_QWORD *)(v6 + 272) = 0;
            *(_QWORD *)(v6 + 280) = 0;
            v262 = 0uLL;
            v263 = 0;
            v262 = *(_OWORD *)(v6 + 288);
            v263 = *(_QWORD *)(v6 + 304);
            *(_QWORD *)(v6 + 288) = 0;
            *(_QWORD *)(v6 + 296) = 0;
            *(_QWORD *)(v6 + 304) = 0;
            v264 = 1;
          }
          v265 = *(_OWORD *)(v6 + 320);
          v266 = *(_QWORD *)(v6 + 336);
          *(_QWORD *)(v6 + 320) = 0;
          *(_QWORD *)(v6 + 328) = 0;
          *(_QWORD *)(v6 + 336) = 0;
          v25 = *v210;
          if (v245 == *v210)
          {
            v26 = v244;
            if (v244 == *v208)
            {
              if (v18 > *(float *)(v218 - 256))
                goto LABEL_92;
            }
            else if (v244 < *v208)
            {
              goto LABEL_92;
            }
          }
          else if (v245 < v25)
          {
            v26 = v244;
LABEL_92:
            for (m = v6 + 344; ; m += 344)
            {
              v58 = *(_DWORD *)(m + 76);
              v59 = v245 >= v58;
              if (v245 == v58 && (v60 = *(_DWORD *)(m + 72), v59 = v26 >= v60, v26 == v60))
              {
                if (v18 > *(float *)(m + 88))
                  goto LABEL_108;
              }
              else if (!v59)
              {
                goto LABEL_108;
              }
            }
          }
          for (m = v6 + 344; m < v218; m += 344)
          {
            v61 = *(_DWORD *)(m + 76);
            v62 = v245 >= v61;
            if (v245 == v61 && (v63 = *(_DWORD *)(m + 72), v62 = v244 >= v63, v244 == v63))
            {
              if (v18 > *(float *)(m + 88))
                break;
            }
            else if (!v62)
            {
              break;
            }
          }
LABEL_108:
          v64 = v218;
          if (m >= v218)
            goto LABEL_129;
          for (n = (float *)v207; ; n -= 86)
          {
            v66 = v245 >= v25;
            if (v245 != v25)
              break;
            v67 = *((_DWORD *)n + 85);
            v66 = v244 >= v67;
            if (v244 != v67)
              break;
            if (v18 <= n[89])
              goto LABEL_116;
LABEL_115:
            v25 = *(_DWORD *)n;
          }
          if (!v66)
            goto LABEL_115;
LABEL_116:
          v64 = (unint64_t)(n + 67);
LABEL_129:
          if (m < v64)
          {
            std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(m, v64);
            for (m += 344; ; m += 344)
            {
              v68 = *(_DWORD *)(m + 76);
              v69 = v245 >= v68;
              if (v245 == v68 && (v70 = *(_DWORD *)(m + 72), v69 = v244 >= v70, v244 == v70))
              {
                if (v246 > *(float *)(m + 88))
                {
                  do
                  {
LABEL_126:
                    while (1)
                    {
                      v64 -= 344;
                      v71 = *(_DWORD *)(v64 + 76);
                      v72 = v245 >= v71;
                      if (v245 == v71)
                      {
                        v73 = *(_DWORD *)(v64 + 72);
                        v72 = v244 >= v73;
                        if (v244 == v73)
                          break;
                      }
                      if (v72)
                        goto LABEL_129;
                    }
                  }
                  while (v246 > *(float *)(v64 + 88));
                  goto LABEL_129;
                }
              }
              else if (!v69)
              {
                goto LABEL_126;
              }
            }
          }
          if (m - 344 != v6)
          {
            sirinluinternal::MatchingSpan::operator=();
            *(_DWORD *)(v6 + 88) = *(_DWORD *)(m - 256);
            std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v6 + 96, m - 248);
            v74 = *(void **)(v6 + 320);
            if (v74)
            {
              *(_QWORD *)(v6 + 328) = v74;
              operator delete(v74);
              *(_QWORD *)(v6 + 320) = 0;
              *(_QWORD *)(v6 + 328) = 0;
              *(_QWORD *)(v6 + 336) = 0;
              a2 = v218;
            }
            v75 = (_QWORD *)(m - 24);
            *(_OWORD *)(v6 + 320) = *(_OWORD *)(m - 24);
            *(_QWORD *)(v6 + 336) = *(_QWORD *)(m - 8);
            *v75 = 0;
            v75[1] = 0;
            v75[2] = 0;
          }
          sirinluinternal::MatchingSpan::operator=();
          *(float *)(m - 256) = v246;
          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(m - 248, (uint64_t)&v247);
          v76 = *(void **)(m - 24);
          if (v76)
          {
            *(_QWORD *)(m - 16) = v76;
            operator delete(v76);
            *(_QWORD *)(m - 24) = 0;
            *(_QWORD *)(m - 16) = 0;
            *(_QWORD *)(m - 8) = 0;
          }
          *(_OWORD *)(m - 24) = v265;
          *(_QWORD *)(m - 8) = v266;
          v265 = 0uLL;
          v266 = 0;
          if (v264)
          {
            v220[0] = (void **)&v262;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v220);
            if (SHIBYTE(v261) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v258) < 0)
              operator delete((void *)v257);
            v220[0] = (void **)&v255;
            std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v220);
            if (SHIBYTE(v253) < 0)
              operator delete((void *)v252);
            if (SHIBYTE(v251) < 0)
              operator delete((void *)v250);
            if (SHIBYTE(v249) < 0)
              operator delete((void *)v248);
          }
          result = MEMORY[0x1C3BC54D8](v243);
          a4 = 0;
          continue;
        }
LABEL_20:
        MEMORY[0x1C3BC54B4](v243, v6);
        v27 = *(float *)(v6 + 88);
        v246 = v27;
        LOBYTE(v247) = 0;
        v264 = 0;
        if (*(_BYTE *)(v6 + 312))
        {
          v247 = *(_QWORD *)(v6 + 96);
          v28 = *(_QWORD *)(v6 + 120);
          v248 = *(_OWORD *)(v6 + 104);
          v249 = v28;
          *(_QWORD *)(v6 + 112) = 0;
          *(_QWORD *)(v6 + 120) = 0;
          *(_QWORD *)(v6 + 104) = 0;
          v29 = *(_QWORD *)(v6 + 144);
          v250 = *(_OWORD *)(v6 + 128);
          v251 = v29;
          *(_QWORD *)(v6 + 136) = 0;
          *(_QWORD *)(v6 + 144) = 0;
          *(_QWORD *)(v6 + 128) = 0;
          v30 = *(_OWORD *)(v6 + 152);
          v253 = *(_QWORD *)(v6 + 168);
          v252 = v30;
          *(_QWORD *)(v6 + 152) = 0;
          *(_QWORD *)(v6 + 160) = 0;
          *(_QWORD *)(v6 + 168) = 0;
          v31 = *(_OWORD *)(v6 + 176);
          *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(v6 + 188);
          v254[0] = v31;
          v256 = 0;
          v255 = 0uLL;
          v255 = *(_OWORD *)(v6 + 208);
          v256 = *(_QWORD *)(v6 + 224);
          *(_QWORD *)(v6 + 208) = 0;
          *(_QWORD *)(v6 + 216) = 0;
          *(_QWORD *)(v6 + 224) = 0;
          v32 = *(_OWORD *)(v6 + 232);
          v258 = *(_QWORD *)(v6 + 248);
          v257 = v32;
          *(_QWORD *)(v6 + 232) = 0;
          *(_QWORD *)(v6 + 240) = 0;
          *(_QWORD *)(v6 + 248) = 0;
          v259 = *(_DWORD *)(v6 + 256);
          v33 = *(_OWORD *)(v6 + 264);
          v261 = *(_QWORD *)(v6 + 280);
          __p = v33;
          *(_QWORD *)(v6 + 264) = 0;
          *(_QWORD *)(v6 + 272) = 0;
          *(_QWORD *)(v6 + 280) = 0;
          v262 = 0uLL;
          v263 = 0;
          v262 = *(_OWORD *)(v6 + 288);
          v263 = *(_QWORD *)(v6 + 304);
          *(_QWORD *)(v6 + 288) = 0;
          *(_QWORD *)(v6 + 296) = 0;
          *(_QWORD *)(v6 + 304) = 0;
          v264 = 1;
        }
        v265 = *(_OWORD *)(v6 + 320);
        v266 = *(_QWORD *)(v6 + 336);
        *(_QWORD *)(v6 + 320) = 0;
        *(_QWORD *)(v6 + 328) = 0;
        *(_QWORD *)(v6 + 336) = 0;
        for (ii = v6 + 344; ; ii += 344)
        {
          v35 = *(_DWORD *)(ii + 76);
          v36 = v35 >= v245;
          if (v35 != v245)
            break;
          v37 = *(_DWORD *)(ii + 72);
          v36 = v37 >= v244;
          if (v37 != v244)
            break;
          if (*(float *)(ii + 88) <= v27)
            goto LABEL_29;
LABEL_28:
          ;
        }
        if (!v36)
          goto LABEL_28;
LABEL_29:
        jj = v216;
        if (ii - 344 != v6)
        {
          while (1)
          {
            v39 = *(_DWORD *)(jj + 76);
            v40 = v39 >= v245;
            if (v39 == v245 && (v41 = *(_DWORD *)(jj + 72), v40 = v41 >= v244, v41 == v244))
            {
              if (*(float *)(jj + 88) > v27)
                goto LABEL_52;
            }
            else if (!v40)
            {
              goto LABEL_52;
            }
            jj -= 344;
          }
        }
        jj = v218;
        if (ii < v218)
        {
          for (jj = v216; ; jj -= 344)
          {
            v42 = *(_DWORD *)(jj + 76);
            v43 = v42 >= v245;
            if (v42 == v245 && (v44 = *(_DWORD *)(jj + 72), v43 = v44 >= v244, v44 == v244))
            {
              if (*(float *)(jj + 88) > v27 || ii >= jj)
                break;
            }
            else if (!v43 || ii >= jj)
            {
              break;
            }
          }
        }
LABEL_52:
        m = ii;
        if (ii >= jj)
          goto LABEL_67;
        m = ii;
        v47 = jj;
        while (2)
        {
          std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(m, v47);
          m += 344;
          while (2)
          {
            v48 = *(_DWORD *)(m + 76);
            v49 = v48 >= v245;
            if (v48 == v245)
            {
              v50 = *(_DWORD *)(m + 72);
              v49 = v50 >= v244;
              if (v50 == v244)
              {
                if (*(float *)(m + 88) <= v246)
                  goto LABEL_63;
                goto LABEL_60;
              }
            }
            if (!v49)
            {
LABEL_60:
              m += 344;
              continue;
            }
            break;
          }
          do
          {
LABEL_63:
            while (1)
            {
              v47 -= 344;
              v51 = *(_DWORD *)(v47 + 76);
              v52 = v51 >= v245;
              if (v51 == v245)
              {
                v53 = *(_DWORD *)(v47 + 72);
                v52 = v53 >= v244;
                if (v53 == v244)
                  break;
              }
              if (!v52)
                goto LABEL_66;
            }
          }
          while (*(float *)(v47 + 88) <= v246);
LABEL_66:
          if (m < v47)
            continue;
          break;
        }
LABEL_67:
        if (m - 344 != v6)
        {
          sirinluinternal::MatchingSpan::operator=();
          *(_DWORD *)(v6 + 88) = *(_DWORD *)(m - 256);
          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v6 + 96, m - 248);
          v54 = *(void **)(v6 + 320);
          if (v54)
          {
            *(_QWORD *)(v6 + 328) = v54;
            operator delete(v54);
            *(_QWORD *)(v6 + 320) = 0;
            *(_QWORD *)(v6 + 328) = 0;
            *(_QWORD *)(v6 + 336) = 0;
          }
          v55 = (_QWORD *)(m - 24);
          *(_OWORD *)(v6 + 320) = *(_OWORD *)(m - 24);
          *(_QWORD *)(v6 + 336) = *(_QWORD *)(m - 8);
          *v55 = 0;
          v55[1] = 0;
          v55[2] = 0;
        }
        sirinluinternal::MatchingSpan::operator=();
        *(float *)(m - 256) = v246;
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(m - 248, (uint64_t)&v247);
        v56 = *(void **)(m - 24);
        if (v56)
        {
          *(_QWORD *)(m - 16) = v56;
          operator delete(v56);
          *(_QWORD *)(m - 24) = 0;
          *(_QWORD *)(m - 16) = 0;
          *(_QWORD *)(m - 8) = 0;
        }
        *(_OWORD *)(m - 24) = v265;
        *(_QWORD *)(m - 8) = v266;
        v265 = 0uLL;
        v266 = 0;
        if (v264)
        {
          v220[0] = (void **)&v262;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v220);
          if (SHIBYTE(v261) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v258) < 0)
            operator delete((void *)v257);
          v220[0] = (void **)&v255;
          std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v220);
          if (SHIBYTE(v253) < 0)
            operator delete((void *)v252);
          if (SHIBYTE(v251) < 0)
            operator delete((void *)v250);
          if (SHIBYTE(v249) < 0)
            operator delete((void *)v248);
        }
        MEMORY[0x1C3BC54D8](v243);
        v15 = ii >= jj;
        a2 = v218;
        if (!v15)
        {
LABEL_88:
          result = std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v6, m - 344, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v57 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, m - 344);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(m, v218);
        if (!(_DWORD)result)
        {
          if (v57)
            continue;
          goto LABEL_88;
        }
        a2 = m - 344;
        if (!v57)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _BYTE v16[88];
  int v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  _BYTE v25[28];
  __int128 v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  int v30;
  __int128 __p;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  void **v38;

  MEMORY[0x1C3BC54B4](v16, a1);
  v17 = *(_DWORD *)(a1 + 88);
  LOBYTE(v18) = 0;
  v35 = 0;
  if (*(_BYTE *)(a1 + 312))
  {
    v18 = *(_QWORD *)(a1 + 96);
    *(_OWORD *)v19 = *(_OWORD *)(a1 + 104);
    v20 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)v21 = *(_OWORD *)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v5 = *(_OWORD *)(a1 + 152);
    v6 = *(_QWORD *)(a1 + 168);
    v22 = v4;
    v24 = v6;
    *(_OWORD *)v23 = v5;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    v7 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)&v25[12] = *(_OWORD *)(a1 + 188);
    v8 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)v25 = v7;
    v26 = v8;
    v9 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    v10 = *(_OWORD *)(a1 + 232);
    v11 = *(_QWORD *)(a1 + 248);
    v27 = v9;
    v29 = v11;
    *(_OWORD *)v28 = v10;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    v30 = *(_DWORD *)(a1 + 256);
    v12 = *(_QWORD *)(a1 + 280);
    __p = *(_OWORD *)(a1 + 264);
    v32 = v12;
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    v33 = *(_OWORD *)(a1 + 288);
    v34 = *(_QWORD *)(a1 + 304);
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    v35 = 1;
  }
  v36 = *(_OWORD *)(a1 + 320);
  v37 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  sirinluinternal::MatchingSpan::operator=();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(a1 + 96, a2 + 96);
  v13 = *(void **)(a1 + 320);
  if (v13)
  {
    *(_QWORD *)(a1 + 328) = v13;
    operator delete(v13);
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = 0;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  sirinluinternal::MatchingSpan::operator=();
  *(_DWORD *)(a2 + 88) = v17;
  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(a2 + 96, (uint64_t)&v18);
  v14 = *(void **)(a2 + 320);
  if (v14)
  {
    *(_QWORD *)(a2 + 328) = v14;
    operator delete(v14);
  }
  *(_OWORD *)(a2 + 320) = v36;
  *(_QWORD *)(a2 + 336) = v37;
  v37 = 0;
  v36 = 0uLL;
  if (v35)
  {
    v38 = (void **)&v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    v38 = (void **)&v26;
    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v38);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
  }
  return MEMORY[0x1C3BC54D8](v16);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 76);
  v7 = *(_DWORD *)(result + 76);
  v8 = v6 >= v7;
  if (v6 != v7 || (v9 = *(_DWORD *)(a2 + 72), v10 = *(_DWORD *)(result + 72), v8 = v9 >= v10, v9 != v10))
  {
    if (v8)
      goto LABEL_4;
LABEL_9:
    v15 = *(_DWORD *)(a3 + 76);
    v16 = v15 >= v6;
    if (v15 == v6 && (v17 = *(_DWORD *)(a3 + 72), v18 = *(_DWORD *)(a2 + 72), v16 = v17 >= v18, v17 == v18))
    {
      if (*(float *)(a3 + 88) <= *(float *)(a2 + 88))
        goto LABEL_12;
    }
    else if (v16)
    {
LABEL_12:
      result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(result, a2);
      v19 = *(_DWORD *)(a3 + 76);
      v20 = *(_DWORD *)(a2 + 76);
      v21 = v19 >= v20;
      if (v19 == v20 && (v22 = *(_DWORD *)(a3 + 72), v23 = *(_DWORD *)(a2 + 72), v21 = v22 >= v23, v22 == v23))
      {
        if (*(float *)(a3 + 88) <= *(float *)(a2 + 88))
          return result;
      }
      else if (v21)
      {
        return result;
      }
      result = a2;
    }
    v29 = a3;
    return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(result, v29);
  }
  if (*(float *)(a2 + 88) > *(float *)(result + 88))
    goto LABEL_9;
LABEL_4:
  v11 = *(_DWORD *)(a3 + 76);
  v12 = v11 >= v6;
  if (v11 == v6 && (v13 = *(_DWORD *)(a3 + 72), v14 = *(_DWORD *)(a2 + 72), v12 = v13 >= v14, v13 == v14))
  {
    if (*(float *)(a3 + 88) <= *(float *)(a2 + 88))
      return result;
  }
  else if (v12)
  {
    return result;
  }
  result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
  v24 = *(_DWORD *)(a2 + 76);
  v25 = *(_DWORD *)(v5 + 76);
  v26 = v24 >= v25;
  if (v24 != v25 || (v27 = *(_DWORD *)(a2 + 72), v28 = *(_DWORD *)(v5 + 72), v26 = v27 >= v28, v27 != v28))
  {
    if (v26)
      return result;
    goto LABEL_27;
  }
  if (*(float *)(a2 + 88) > *(float *)(v5 + 88))
  {
LABEL_27:
    result = v5;
    v29 = a2;
    return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(result, v29);
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3);
  v9 = *(_DWORD *)(a4 + 76);
  v10 = *(_DWORD *)(a3 + 76);
  v11 = v9 >= v10;
  if (v9 == v10 && (v12 = *(_DWORD *)(a4 + 72), v13 = *(_DWORD *)(a3 + 72), v11 = v12 >= v13, v12 == v13))
  {
    if (*(float *)(a4 + 88) <= *(float *)(a3 + 88))
      return result;
  }
  else if (v11)
  {
    return result;
  }
  result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
  v14 = *(_DWORD *)(a3 + 76);
  v15 = *(_DWORD *)(a2 + 76);
  v16 = v14 >= v15;
  if (v14 == v15 && (v17 = *(_DWORD *)(a3 + 72), v18 = *(_DWORD *)(a2 + 72), v16 = v17 >= v18, v17 == v18))
  {
    if (*(float *)(a3 + 88) <= *(float *)(a2 + 88))
      return result;
  }
  else if (v16)
  {
    return result;
  }
  result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
  v19 = *(_DWORD *)(a2 + 76);
  v20 = *(_DWORD *)(a1 + 76);
  v21 = v19 >= v20;
  if (v19 == v20)
  {
    v22 = *(_DWORD *)(a2 + 72);
    v23 = *(_DWORD *)(a1 + 72);
    v21 = v22 >= v23;
    if (v22 == v23)
    {
      if (*(float *)(a2 + 88) <= *(float *)(a1 + 88))
        return result;
      return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
    }
  }
  if (!v21)
    return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a5 + 76);
  v12 = *(_DWORD *)(a4 + 76);
  v13 = v11 >= v12;
  if (v11 == v12 && (v14 = *(_DWORD *)(a5 + 72), v15 = *(_DWORD *)(a4 + 72), v13 = v14 >= v15, v14 == v15))
  {
    if (*(float *)(a5 + 88) <= *(float *)(a4 + 88))
      return result;
  }
  else if (v13)
  {
    return result;
  }
  result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a4, a5);
  v16 = *(_DWORD *)(a4 + 76);
  v17 = *(_DWORD *)(a3 + 76);
  v18 = v16 >= v17;
  if (v16 == v17 && (v19 = *(_DWORD *)(a4 + 72), v20 = *(_DWORD *)(a3 + 72), v18 = v19 >= v20, v19 == v20))
  {
    if (*(float *)(a4 + 88) <= *(float *)(a3 + 88))
      return result;
  }
  else if (v18)
  {
    return result;
  }
  result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
  v21 = *(_DWORD *)(a3 + 76);
  v22 = *(_DWORD *)(a2 + 76);
  v23 = v21 >= v22;
  if (v21 == v22 && (v24 = *(_DWORD *)(a3 + 72), v25 = *(_DWORD *)(a2 + 72), v23 = v24 >= v25, v24 == v25))
  {
    if (*(float *)(a3 + 88) <= *(float *)(a2 + 88))
      return result;
  }
  else if (v23)
  {
    return result;
  }
  result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
  v26 = *(_DWORD *)(a2 + 76);
  v27 = *(_DWORD *)(a1 + 76);
  v28 = v26 >= v27;
  if (v26 == v27)
  {
    v29 = *(_DWORD *)(a2 + 72);
    v30 = *(_DWORD *)(a1 + 72);
    v28 = v29 >= v30;
    if (v29 == v30)
    {
      if (*(float *)(a2 + 88) <= *(float *)(a1 + 88))
        return result;
      return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
    }
  }
  if (!v28)
    return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t i;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v35[33];
  unsigned int v36;
  unsigned int v37;
  float v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  __int128 __p;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  void **v59[2];

  v4 = 1;
  switch(0x82FA0BE82FA0BE83 * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = a2 - 344;
      v6 = *(_DWORD *)(a2 - 268);
      v7 = *(_DWORD *)(a1 + 76);
      v8 = v6 >= v7;
      if (v6 == v7 && (v9 = *(_DWORD *)(a2 - 272), v10 = *(_DWORD *)(a1 + 72), v8 = v9 >= v10, v9 == v10))
      {
        if (*(float *)(a2 - 256) <= *(float *)(a1 + 88))
          return v4;
      }
      else if (v8)
      {
        return v4;
      }
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, v5);
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a2 - 344);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688, a2 - 344);
      return v4;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(a1, a1 + 344, a1 + 688, a1 + 1032, a2 - 344);
      return v4;
    default:
      v11 = a1 + 688;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688);
      v12 = a1 + 1032;
      v4 = 1;
      if (a1 + 1032 == a2)
        return v4;
      v13 = 0;
      v14 = 0;
      break;
  }
  do
  {
    v15 = *(_DWORD *)(v12 + 76);
    v16 = *(_DWORD *)(v11 + 76);
    v17 = v15 >= v16;
    if (v15 == v16 && (v18 = *(_DWORD *)(v12 + 72), v19 = *(_DWORD *)(v11 + 72), v17 = v18 >= v19, v18 == v19))
    {
      if (*(float *)(v12 + 88) <= *(float *)(v11 + 88))
        goto LABEL_43;
    }
    else if (v17)
    {
      goto LABEL_43;
    }
    MEMORY[0x1C3BC54B4](v35, v12);
    v38 = *(float *)(v12 + 88);
    LOBYTE(v39) = 0;
    v56 = 0;
    if (*(_BYTE *)(v12 + 312))
    {
      v39 = *(_QWORD *)(v12 + 96);
      v40 = *(_OWORD *)(v12 + 104);
      v41 = *(_QWORD *)(v12 + 120);
      *(_QWORD *)(v12 + 104) = 0;
      *(_QWORD *)(v12 + 112) = 0;
      v42 = *(_OWORD *)(v12 + 128);
      v43 = *(_QWORD *)(v12 + 144);
      *(_QWORD *)(v12 + 120) = 0;
      *(_QWORD *)(v12 + 128) = 0;
      *(_QWORD *)(v12 + 136) = 0;
      *(_QWORD *)(v12 + 144) = 0;
      v20 = *(_OWORD *)(v12 + 152);
      v45 = *(_QWORD *)(v12 + 168);
      v44 = v20;
      *(_QWORD *)(v12 + 152) = 0;
      *(_QWORD *)(v12 + 160) = 0;
      *(_QWORD *)(v12 + 168) = 0;
      v21 = *(_OWORD *)(v12 + 176);
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)(v12 + 188);
      v46[0] = v21;
      v47 = *(_OWORD *)(v12 + 208);
      v48 = *(_QWORD *)(v12 + 224);
      *(_QWORD *)(v12 + 208) = 0;
      *(_QWORD *)(v12 + 216) = 0;
      v22 = *(_OWORD *)(v12 + 232);
      v50 = *(_QWORD *)(v12 + 248);
      v49 = v22;
      *(_QWORD *)(v12 + 224) = 0;
      *(_QWORD *)(v12 + 232) = 0;
      *(_QWORD *)(v12 + 240) = 0;
      *(_QWORD *)(v12 + 248) = 0;
      v51 = *(_DWORD *)(v12 + 256);
      v23 = *(_OWORD *)(v12 + 264);
      v53 = *(_QWORD *)(v12 + 280);
      __p = v23;
      *(_QWORD *)(v12 + 264) = 0;
      *(_QWORD *)(v12 + 272) = 0;
      v54 = *(_OWORD *)(v12 + 288);
      v55 = *(_QWORD *)(v12 + 304);
      *(_QWORD *)(v12 + 280) = 0;
      *(_QWORD *)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
      *(_QWORD *)(v12 + 304) = 0;
      v56 = 1;
    }
    v57 = *(_OWORD *)(v12 + 320);
    v58 = *(_QWORD *)(v12 + 336);
    *(_QWORD *)(v12 + 328) = 0;
    *(_QWORD *)(v12 + 336) = 0;
    *(_QWORD *)(v12 + 320) = 0;
    for (i = v13; ; i -= 344)
    {
      v25 = a1 + i;
      sirinluinternal::MatchingSpan::operator=();
      *(_DWORD *)(v25 + 1120) = *(_DWORD *)(v25 + 776);
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v25 + 1128, v25 + 784);
      v26 = *(void **)(a1 + i + 1352);
      if (v26)
      {
        *(_QWORD *)(v25 + 1360) = v26;
        operator delete(v26);
        *(_QWORD *)(v25 + 1368) = 0;
      }
      *(_OWORD *)(v25 + 1352) = *(_OWORD *)(v25 + 1008);
      *(_QWORD *)(v25 + 1368) = *(_QWORD *)(v25 + 1024);
      *(_QWORD *)(v25 + 1008) = 0;
      *(_QWORD *)(v25 + 1016) = 0;
      *(_QWORD *)(v25 + 1024) = 0;
      if (i == -688)
      {
        v11 = a1;
LABEL_28:
        v29 = a1 + i;
        goto LABEL_29;
      }
      v27 = *(_DWORD *)(a1 + i + 420);
      if (v37 == v27)
        break;
      if (v37 >= v27)
        goto LABEL_28;
LABEL_26:
      v11 -= 344;
    }
    v28 = *(_DWORD *)(a1 + i + 416);
    if (v36 == v28)
    {
      if (v38 <= *(float *)(a1 + i + 432))
        goto LABEL_28;
      goto LABEL_26;
    }
    if (v36 < v28)
      goto LABEL_26;
    v29 = a1 + i;
    v11 = a1 + i + 688;
LABEL_29:
    v30 = v29 + 1008;
    v31 = v29 + 784;
    sirinluinternal::MatchingSpan::operator=();
    *(float *)(v11 + 88) = v38;
    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v31, (uint64_t)&v39);
    v32 = *(void **)v30;
    if (*(_QWORD *)v30)
    {
      *(_QWORD *)(v11 + 328) = v32;
      operator delete(v32);
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
    }
    v33 = *((_QWORD *)&v57 + 1);
    *(_QWORD *)v30 = v57;
    *(_QWORD *)(v11 + 328) = v33;
    *(_QWORD *)(v11 + 336) = v58;
    v57 = 0uLL;
    v58 = 0;
    if (v56)
    {
      v59[0] = (void **)&v54;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v59);
      if (SHIBYTE(v53) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v50) < 0)
        operator delete((void *)v49);
      v59[0] = (void **)&v47;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v59);
      if (SHIBYTE(v45) < 0)
        operator delete((void *)v44);
      if (SHIBYTE(v43) < 0)
        operator delete((void *)v42);
      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
    }
    ++v14;
    MEMORY[0x1C3BC54D8](v35);
    if (v14 == 8)
      return v12 + 344 == a2;
LABEL_43:
    v11 = v12;
    v13 += 344;
    v12 += 344;
  }
  while (v12 != a2);
  return 1;
}

void std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  const void **v12;
  char v13;
  size_t v14;
  int v15;
  size_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  int v23;
  BOOL v24;
  float v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  size_t v35;
  __int128 *v36;
  unint64_t v37;
  const void **v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  const void **v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  const void *v54;
  size_t v55;
  int v56;
  BOOL v57;
  size_t v58;
  __int128 *v59;
  unint64_t v60;
  unint64_t v61;
  const void **v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  const void *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  size_t v74;
  float v75;
  size_t v76;
  __int128 *v77;
  unint64_t v78;
  const void **v79;
  uint64_t v80;
  size_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  int v85;
  _BOOL4 v86;
  int v87;
  size_t v88;
  __int128 *v89;
  unint64_t v90;
  const void **v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  const void *v95;
  size_t v96;
  int v97;
  BOOL v98;
  void *v99;
  _QWORD *v100;
  void *v101;
  BOOL v102;
  float v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char v111;
  size_t v112;
  char v113;
  size_t v114;
  const void **v115;
  const void **v116;
  __int128 *v117;
  uint64_t v118;
  __int128 *v119;
  size_t v120;
  int v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  const void *v126;
  size_t v127;
  __int128 *v128;
  unint64_t v129;
  char v130;
  size_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  __int128 *v134;
  uint64_t v135;
  size_t v136;
  int v137;
  BOOL v138;
  unint64_t v139;
  size_t v140;
  size_t v141;
  const void *v142;
  size_t v143;
  __int128 *v144;
  unint64_t v145;
  char v146;
  size_t v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  __int128 *v150;
  size_t v151;
  size_t v152;
  int v153;
  BOOL v154;
  unint64_t v155;
  size_t v156;
  const void *v157;
  __int128 *v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  size_t v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  __int128 *v165;
  size_t v166;
  size_t v167;
  int v168;
  _BOOL4 v169;
  int v170;
  uint64_t v171;
  __int128 v172;
  size_t v173;
  __int128 *v174;
  float v175;
  unint64_t v176;
  char v177;
  size_t v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  __int128 *v181;
  uint64_t v182;
  size_t v183;
  int v184;
  BOOL v185;
  unint64_t v186;
  int v187;
  size_t v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  __int128 *v191;
  uint64_t v192;
  size_t v193;
  int v194;
  BOOL v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  char v199;
  size_t v200;
  int v201;
  size_t v202;
  unsigned __int8 *v203;
  unsigned __int8 *v204;
  const void **v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  const void **v209;
  uint64_t v210;
  size_t v211;
  int v212;
  size_t v213;
  unsigned __int8 *v214;
  uint64_t v215;
  const void *v216;
  size_t v217;
  int v218;
  BOOL v219;
  __int128 *v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  void *v227;
  _QWORD *v228;
  float *v229;
  char v230;
  size_t v231;
  int v232;
  size_t v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  __int128 *v236;
  uint64_t v237;
  __int128 *v238;
  size_t v239;
  int v240;
  BOOL v241;
  void *v242;
  int64_t v243;
  int64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const void **v248;
  char v249;
  size_t v250;
  size_t v251;
  char v252;
  size_t v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  const void **v256;
  uint64_t v257;
  const void *v258;
  size_t v259;
  int v260;
  BOOL v261;
  uint64_t v262;
  const void **v263;
  uint64_t v264;
  char v265;
  size_t v266;
  unsigned __int8 *v267;
  unsigned __int8 *v268;
  size_t v269;
  int v270;
  size_t v271;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  uint64_t v275;
  const void *v276;
  size_t v277;
  int v278;
  BOOL v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  const void **v297;
  char v298;
  size_t v299;
  size_t v300;
  char v301;
  size_t v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  const void **v305;
  uint64_t v306;
  int v307;
  const void *v308;
  size_t v309;
  int v310;
  BOOL v311;
  const void **v312;
  char v313;
  size_t v314;
  size_t v315;
  __int128 *v316;
  unsigned __int8 *v317;
  unsigned __int8 *v318;
  uint64_t v319;
  const void *v320;
  size_t v321;
  int v322;
  BOOL v323;
  void *v324;
  int64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  int64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  const void **v341;
  char v342;
  size_t v343;
  size_t v344;
  char v345;
  size_t v346;
  unsigned __int8 *v347;
  unsigned __int8 *v348;
  const void **v349;
  uint64_t v350;
  const void *v351;
  size_t v352;
  int v353;
  BOOL v354;
  void *v355;
  _QWORD *v356;
  void *v357;
  _QWORD *v358;
  void *v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  const void **v364;
  char v365;
  size_t v366;
  int v367;
  size_t v368;
  unsigned __int8 *v369;
  unsigned __int8 *v370;
  const void **v371;
  uint64_t v372;
  void *v373;
  const void *v374;
  size_t v375;
  int v376;
  BOOL v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  unint64_t v384;
  uint64_t v385;
  void *v386;
  unint64_t v387;
  const void **v388;
  char v389;
  size_t v390;
  size_t v391;
  __int128 *v392;
  unsigned __int8 *v393;
  const void **v394;
  uint64_t v395;
  const void *v396;
  size_t v397;
  int v398;
  BOOL v399;
  void *v400;
  unint64_t v401;
  const void **v402;
  uint64_t v403;
  size_t v404;
  int v405;
  size_t v406;
  unsigned __int8 *v407;
  uint64_t v408;
  const void *v409;
  size_t v410;
  int v411;
  BOOL v412;
  __int128 *v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  void *v420;
  char v421;
  size_t v422;
  int v423;
  size_t v424;
  unsigned __int8 *v425;
  unsigned __int8 *v426;
  __int128 *p_s1;
  uint64_t v428;
  __int128 *v429;
  size_t v430;
  int v431;
  BOOL v432;
  void *v433;
  const void *v434;
  size_t v435;
  int v436;
  BOOL v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  const void **v441;
  _QWORD *v442;
  uint64_t v443;
  __int128 *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unsigned __int8 *v451;
  uint64_t v452;
  const void **v453;
  _QWORD *v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v459;
  uint64_t v460;
  __int128 v461;
  unint64_t v462;
  size_t v463;
  size_t v464;
  int64_t v465;
  uint64_t v466;
  void **v467[11];
  int v468;
  uint64_t v469;
  __int128 v470;
  uint64_t v471;
  __int128 v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  _OWORD v476[2];
  __int128 v477;
  uint64_t v478;
  __int128 v479;
  uint64_t v480;
  int v481;
  __int128 v482;
  uint64_t v483;
  __int128 v484;
  uint64_t v485;
  char v486;
  void *v487[2];
  uint64_t v488;
  void **v489;
  void **v490[11];
  float v491;
  uint64_t v492;
  __int128 v493;
  uint64_t v494;
  __int128 v495;
  uint64_t v496;
  __int128 __s1;
  uint64_t v498;
  _OWORD v499[2];
  __int128 v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  int v504;
  __int128 __p;
  uint64_t v506;
  __int128 v507;
  uint64_t v508;
  unsigned __int8 v509;
  __int128 v510;
  uint64_t v511;

LABEL_1:
  v452 = a2 - 344;
  v443 = a2 - 1032;
  v445 = a2 - 688;
  v441 = (const void **)(a2 - 192);
  v6 = a1;
  v457 = a2;
  while (2)
  {
    v7 = v6;
    v8 = a2 - v6;
    v9 = 0x82FA0BE82FA0BE83 * ((uint64_t)(a2 - v6) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (!*(_BYTE *)(a2 - 32))
          return;
        if (!*(_BYTE *)(v6 + 312))
          goto LABEL_933;
        v199 = *(_BYTE *)(a2 - 169);
        if (v199 >= 0)
          v200 = *(unsigned __int8 *)(a2 - 169);
        else
          v200 = *(_QWORD *)(a2 - 184);
        v201 = *(char *)(v6 + 175);
        if (v201 >= 0)
          v202 = *(unsigned __int8 *)(v6 + 175);
        else
          v202 = *(_QWORD *)(v6 + 160);
        if (v201 >= 0)
          v203 = (unsigned __int8 *)(v7 + 152);
        else
          v203 = *(unsigned __int8 **)(v7 + 152);
        if (v200 != v202)
          goto LABEL_924;
        if ((*(_BYTE *)(a2 - 169) & 0x80) != 0)
        {
          if (memcmp(*v441, v203, *(_QWORD *)(a2 - 184)))
            goto LABEL_924;
        }
        else if (*(_BYTE *)(a2 - 169))
        {
          v204 = v203;
          v205 = v441;
          v206 = *(unsigned __int8 *)(a2 - 169);
          while (*(unsigned __int8 *)v205 == *v204)
          {
            v205 = (const void **)((char *)v205 + 1);
            ++v204;
            if (!--v206)
              goto LABEL_935;
          }
LABEL_924:
          if (v199 >= 0)
            v434 = v441;
          else
            v434 = *v441;
          if (v200 >= v202)
            v435 = v202;
          else
            v435 = v200;
          v436 = memcmp(v203, v434, v435);
          v437 = v202 < v200;
          if (v436)
            v437 = v436 < 0;
          if (!v437)
            return;
LABEL_933:
          std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v7, v452);
          return;
        }
LABEL_935:
        if (*(float *)(a2 - 256) <= *(float *)(v7 + 88))
          return;
        goto LABEL_933;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, v6 + 344, v452);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, v6 + 344, v6 + 688, v452);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(v6, v6 + 344, v6 + 688, v6 + 1032, v452);
        return;
      default:
        v459 = v6;
        if (v8 <= 8255)
        {
          if ((a4 & 1) == 0)
          {
            if (v6 == a2)
              return;
            v401 = v6 + 344;
            if (v7 + 344 == a2)
              return;
            while (1)
            {
              if (*(_BYTE *)(v7 + 656))
              {
                if (!*(_BYTE *)(v7 + 312))
                  goto LABEL_872;
                v402 = (const void **)(v7 + 496);
                v403 = *(unsigned __int8 *)(v7 + 519);
                if ((v403 & 0x80u) == 0)
                  v404 = *(unsigned __int8 *)(v7 + 519);
                else
                  v404 = *(_QWORD *)(v7 + 504);
                v405 = *(char *)(v7 + 175);
                if (v405 >= 0)
                  v406 = *(unsigned __int8 *)(v7 + 175);
                else
                  v406 = *(_QWORD *)(v7 + 160);
                if (v405 >= 0)
                  v407 = (unsigned __int8 *)(v7 + 152);
                else
                  v407 = *(unsigned __int8 **)(v7 + 152);
                if (v404 != v406)
                  goto LABEL_861;
                if ((v403 & 0x80) != 0)
                {
                  if (memcmp(*v402, v407, *(_QWORD *)(v7 + 504)))
                    goto LABEL_861;
                }
                else if (*(_BYTE *)(v7 + 519))
                {
                  v408 = 0;
                  while (*(unsigned __int8 *)(v7 + v408 + 496) == v407[v408])
                  {
                    if (v403 == ++v408)
                      goto LABEL_871;
                  }
LABEL_861:
                  if ((v403 & 0x80u) == 0)
                    v409 = (const void *)(v7 + 496);
                  else
                    v409 = *v402;
                  if (v404 >= v406)
                    v410 = v406;
                  else
                    v410 = v404;
                  v411 = memcmp(v407, v409, v410);
                  v412 = v406 < v404;
                  if (v411)
                    v412 = v411 < 0;
                  if (!v412)
                    goto LABEL_921;
LABEL_872:
                  v413 = (__int128 *)(v7 + 552);
                  MEMORY[0x1C3BC54B4](v490, v401);
                  v491 = *(float *)(v7 + 432);
                  LOBYTE(v492) = 0;
                  v509 = 0;
                  if (*(_BYTE *)(v7 + 656))
                  {
                    v492 = *(_QWORD *)(v7 + 440);
                    v493 = *(_OWORD *)(v7 + 448);
                    v494 = *(_QWORD *)(v7 + 464);
                    *(_QWORD *)(v7 + 448) = 0;
                    *(_QWORD *)(v7 + 456) = 0;
                    *(_QWORD *)(v7 + 464) = 0;
                    v496 = *(_QWORD *)(v7 + 488);
                    v495 = *(_OWORD *)(v7 + 472);
                    *(_QWORD *)(v7 + 480) = 0;
                    *(_QWORD *)(v7 + 488) = 0;
                    *(_QWORD *)(v7 + 472) = 0;
                    v414 = *(_OWORD *)(v7 + 496);
                    v498 = *(_QWORD *)(v7 + 512);
                    __s1 = v414;
                    *(_QWORD *)(v7 + 496) = 0;
                    *(_QWORD *)(v7 + 504) = 0;
                    *(_QWORD *)(v7 + 512) = 0;
                    v415 = *(_OWORD *)(v7 + 520);
                    *(_OWORD *)((char *)v499 + 12) = *(_OWORD *)(v7 + 532);
                    v499[0] = v415;
                    v500 = *v413;
                    v501 = *(_QWORD *)(v7 + 568);
                    *(_QWORD *)v413 = 0;
                    *(_QWORD *)(v7 + 560) = 0;
                    *(_QWORD *)(v7 + 568) = 0;
                    v502 = *(_OWORD *)(v7 + 576);
                    v503 = *(_QWORD *)(v7 + 592);
                    *(_QWORD *)(v7 + 584) = 0;
                    *(_QWORD *)(v7 + 576) = 0;
                    *(_QWORD *)(v7 + 592) = 0;
                    v504 = *(_DWORD *)(v7 + 600);
                    __p = *(_OWORD *)(v7 + 608);
                    v506 = *(_QWORD *)(v7 + 624);
                    *(_QWORD *)(v7 + 616) = 0;
                    *(_QWORD *)(v7 + 608) = 0;
                    *(_QWORD *)(v7 + 624) = 0;
                    v507 = *(_OWORD *)(v7 + 632);
                    v508 = *(_QWORD *)(v7 + 648);
                    *(_QWORD *)(v7 + 632) = 0;
                    *(_QWORD *)(v7 + 640) = 0;
                    *(_QWORD *)(v7 + 648) = 0;
                    v509 = 1;
                  }
                  v510 = *(_OWORD *)(v7 + 664);
                  v511 = *(_QWORD *)(v7 + 680);
                  *(_QWORD *)(v7 + 664) = 0;
                  *(_QWORD *)(v7 + 672) = 0;
                  *(_QWORD *)(v7 + 680) = 0;
                  v460 = v7;
                  v416 = v7;
                  v417 = v401;
                  while (1)
                  {
                    do
                    {
LABEL_875:
                      v418 = v416;
                      sirinluinternal::MatchingSpan::operator=();
                      *(_DWORD *)(v417 + 88) = *(_DWORD *)(v416 + 88);
                      v419 = v416 + 96;
                      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v417 + 96, v416 + 96);
                      v420 = *(void **)(v417 + 320);
                      if (v420)
                      {
                        *(_QWORD *)(v417 + 328) = v420;
                        operator delete(v420);
                        *(_QWORD *)(v417 + 336) = 0;
                      }
                      *(_OWORD *)(v417 + 320) = *(_OWORD *)(v416 + 320);
                      *(_QWORD *)(v417 + 336) = *(_QWORD *)(v416 + 336);
                      *(_QWORD *)(v416 + 320) = 0;
                      *(_QWORD *)(v416 + 328) = 0;
                      *(_QWORD *)(v416 + 336) = 0;
                      if (!v509)
                      {
LABEL_907:
                        sirinluinternal::MatchingSpan::operator=();
                        *(float *)(v418 + 88) = v491;
                        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v419, (uint64_t)&v492);
                        v433 = *(void **)(v418 + 320);
                        if (v433)
                        {
                          *(_QWORD *)(v418 + 328) = v433;
                          operator delete(v433);
                          *(_QWORD *)(v418 + 320) = 0;
                          *(_QWORD *)(v418 + 328) = 0;
                          *(_QWORD *)(v418 + 336) = 0;
                        }
                        *(_OWORD *)(v418 + 320) = v510;
                        *(_QWORD *)(v418 + 336) = v511;
                        v510 = 0uLL;
                        v511 = 0;
                        v7 = v460;
                        if (v509)
                        {
                          v467[0] = (void **)&v507;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v467);
                          if (SHIBYTE(v506) < 0)
                            operator delete((void *)__p);
                          if (SHIBYTE(v503) < 0)
                            operator delete((void *)v502);
                          v467[0] = (void **)&v500;
                          std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v467);
                          if (SHIBYTE(v498) < 0)
                            operator delete((void *)__s1);
                          if (SHIBYTE(v496) < 0)
                            operator delete((void *)v495);
                          if (SHIBYTE(v494) < 0)
                            operator delete((void *)v493);
                        }
                        MEMORY[0x1C3BC54D8](v490);
                        goto LABEL_921;
                      }
                      v416 -= 344;
                      v417 = v418;
                    }
                    while (!*(_BYTE *)(v418 - 32));
                    v421 = HIBYTE(v498);
                    if (v498 >= 0)
                      v422 = HIBYTE(v498);
                    else
                      v422 = *((_QWORD *)&__s1 + 1);
                    v423 = *(char *)(v418 - 169);
                    if (v423 >= 0)
                      v424 = *(unsigned __int8 *)(v418 - 169);
                    else
                      v424 = *(_QWORD *)(v418 - 184);
                    if (v423 >= 0)
                      v425 = (unsigned __int8 *)(v418 - 192);
                    else
                      v425 = *(unsigned __int8 **)(v418 - 192);
                    if (v422 == v424)
                    {
                      if (v498 < 0)
                      {
                        if (!memcmp((const void *)__s1, v425, *((size_t *)&__s1 + 1)))
                        {
LABEL_906:
                          v417 = v418;
                          a2 = v457;
                          if (v491 <= *(float *)(v418 - 256))
                            goto LABEL_907;
                          goto LABEL_875;
                        }
                      }
                      else
                      {
                        if (!HIBYTE(v498))
                          goto LABEL_906;
                        v426 = v425;
                        p_s1 = &__s1;
                        v428 = HIBYTE(v498);
                        while (*(unsigned __int8 *)p_s1 == *v426)
                        {
                          p_s1 = (__int128 *)((char *)p_s1 + 1);
                          ++v426;
                          if (!--v428)
                            goto LABEL_906;
                        }
                      }
                    }
                    if (v421 >= 0)
                      v429 = &__s1;
                    else
                      v429 = (__int128 *)__s1;
                    if (v422 >= v424)
                      v430 = v424;
                    else
                      v430 = v422;
                    v431 = memcmp(v425, v429, v430);
                    v432 = v424 < v422;
                    if (v431)
                      v432 = v431 < 0;
                    v417 = v418;
                    a2 = v457;
                    if (!v432)
                      goto LABEL_907;
                  }
                }
LABEL_871:
                if (*(float *)(v7 + 432) > *(float *)(v7 + 88))
                  goto LABEL_872;
              }
LABEL_921:
              v401 += 344;
              v7 += 344;
              if (v401 == a2)
                return;
            }
          }
          if (v6 == a2)
            return;
          v207 = v6 + 344;
          if (v7 + 344 == a2)
            return;
          v208 = v7;
LABEL_465:
          if (!*(_BYTE *)(v208 + 656))
            goto LABEL_546;
          if (!*(_BYTE *)(v208 + 312))
            goto LABEL_495;
          v209 = (const void **)(v208 + 496);
          v210 = *(unsigned __int8 *)(v208 + 519);
          if ((v210 & 0x80u) == 0)
            v211 = *(unsigned __int8 *)(v208 + 519);
          else
            v211 = *(_QWORD *)(v208 + 504);
          v212 = *(char *)(v208 + 175);
          if (v212 >= 0)
            v213 = *(unsigned __int8 *)(v208 + 175);
          else
            v213 = *(_QWORD *)(v208 + 160);
          if (v212 >= 0)
            v214 = (unsigned __int8 *)(v208 + 152);
          else
            v214 = *(unsigned __int8 **)(v208 + 152);
          if (v211 != v213)
            goto LABEL_484;
          if ((v210 & 0x80) != 0)
          {
            if (memcmp(*v209, v214, *(_QWORD *)(v208 + 504)))
            {
LABEL_484:
              if ((v210 & 0x80u) == 0)
                v216 = (const void *)(v208 + 496);
              else
                v216 = *v209;
              if (v211 >= v213)
                v217 = v213;
              else
                v217 = v211;
              v218 = memcmp(v214, v216, v217);
              v219 = v213 < v211;
              if (v218)
                v219 = v218 < 0;
              if (!v219)
                goto LABEL_546;
LABEL_495:
              v220 = (__int128 *)(v208 + 552);
              MEMORY[0x1C3BC54B4](v490, v207);
              v491 = *(float *)(v208 + 432);
              LOBYTE(v492) = 0;
              v509 = 0;
              if (*(_BYTE *)(v208 + 656))
              {
                v492 = *(_QWORD *)(v208 + 440);
                v493 = *(_OWORD *)(v208 + 448);
                v494 = *(_QWORD *)(v208 + 464);
                *(_QWORD *)(v208 + 448) = 0;
                *(_QWORD *)(v208 + 456) = 0;
                *(_QWORD *)(v208 + 464) = 0;
                v496 = *(_QWORD *)(v208 + 488);
                v495 = *(_OWORD *)(v208 + 472);
                *(_QWORD *)(v208 + 480) = 0;
                *(_QWORD *)(v208 + 488) = 0;
                *(_QWORD *)(v208 + 472) = 0;
                v221 = *(_OWORD *)(v208 + 496);
                v498 = *(_QWORD *)(v208 + 512);
                __s1 = v221;
                *(_QWORD *)(v208 + 496) = 0;
                *(_QWORD *)(v208 + 504) = 0;
                *(_QWORD *)(v208 + 512) = 0;
                v222 = *(_OWORD *)(v208 + 520);
                *(_OWORD *)((char *)v499 + 12) = *(_OWORD *)(v208 + 532);
                v499[0] = v222;
                v500 = *v220;
                v501 = *(_QWORD *)(v208 + 568);
                *(_QWORD *)v220 = 0;
                *(_QWORD *)(v208 + 560) = 0;
                *(_QWORD *)(v208 + 568) = 0;
                v502 = *(_OWORD *)(v208 + 576);
                v503 = *(_QWORD *)(v208 + 592);
                *(_QWORD *)(v208 + 584) = 0;
                *(_QWORD *)(v208 + 576) = 0;
                *(_QWORD *)(v208 + 592) = 0;
                v504 = *(_DWORD *)(v208 + 600);
                __p = *(_OWORD *)(v208 + 608);
                v506 = *(_QWORD *)(v208 + 624);
                *(_QWORD *)(v208 + 616) = 0;
                *(_QWORD *)(v208 + 608) = 0;
                *(_QWORD *)(v208 + 624) = 0;
                v507 = *(_OWORD *)(v208 + 632);
                v508 = *(_QWORD *)(v208 + 648);
                *(_QWORD *)(v208 + 632) = 0;
                *(_QWORD *)(v208 + 640) = 0;
                *(_QWORD *)(v208 + 648) = 0;
                v509 = 1;
              }
              v510 = *(_OWORD *)(v208 + 664);
              v511 = *(_QWORD *)(v208 + 680);
              *(_QWORD *)(v208 + 664) = 0;
              *(_QWORD *)(v208 + 672) = 0;
              *(_QWORD *)(v208 + 680) = 0;
              v223 = v208;
              v224 = (_QWORD *)v207;
              while (1)
              {
                do
                {
                  v225 = (_QWORD *)v223;
                  sirinluinternal::MatchingSpan::operator=();
                  *((_DWORD *)v224 + 22) = *(_DWORD *)(v223 + 88);
                  v226 = v223 + 96;
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(v224 + 12), v223 + 96);
                  v227 = (void *)v224[40];
                  if (v227)
                  {
                    v224[41] = v227;
                    operator delete(v227);
                    v224[42] = 0;
                  }
                  v228 = (_QWORD *)(v223 + 320);
                  *((_OWORD *)v224 + 20) = *(_OWORD *)(v223 + 320);
                  v224[42] = *(_QWORD *)(v223 + 336);
                  *(_QWORD *)(v223 + 320) = 0;
                  *(_QWORD *)(v223 + 328) = 0;
                  *(_QWORD *)(v223 + 336) = 0;
                  v229 = (float *)v459;
                  if (v223 == v459)
                    goto LABEL_532;
                  if (!v509)
                    goto LABEL_531;
                  v223 -= 344;
                  v224 = v225;
                }
                while (!*((_BYTE *)v225 - 32));
                v230 = HIBYTE(v498);
                if (v498 >= 0)
                  v231 = HIBYTE(v498);
                else
                  v231 = *((_QWORD *)&__s1 + 1);
                v232 = *((char *)v225 - 169);
                if (v232 >= 0)
                  v233 = *((unsigned __int8 *)v225 - 169);
                else
                  v233 = *(v225 - 23);
                if (v232 >= 0)
                  v234 = (unsigned __int8 *)(v225 - 24);
                else
                  v234 = (unsigned __int8 *)*(v225 - 24);
                if (v231 != v233)
                  goto LABEL_520;
                if (v498 < 0)
                {
                  if (!memcmp((const void *)__s1, v234, *((size_t *)&__s1 + 1)))
                    goto LABEL_530;
LABEL_520:
                  if (v230 >= 0)
                    v238 = &__s1;
                  else
                    v238 = (__int128 *)__s1;
                  if (v231 >= v233)
                    v239 = v233;
                  else
                    v239 = v231;
                  v240 = memcmp(v234, v238, v239);
                  v241 = v233 < v231;
                  if (v240)
                    v241 = v240 < 0;
                  v224 = v225;
                  if (!v241)
                  {
LABEL_531:
                    v229 = (float *)v225;
LABEL_532:
                    sirinluinternal::MatchingSpan::operator=();
                    v229[22] = v491;
                    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v226, (uint64_t)&v492);
                    v242 = (void *)v225[40];
                    if (v242)
                    {
                      *((_QWORD *)v229 + 41) = v242;
                      operator delete(v242);
                      *v228 = 0;
                      v225[41] = 0;
                      v225[42] = 0;
                    }
                    *v228 = v510;
                    *((_QWORD *)v229 + 41) = *((_QWORD *)&v510 + 1);
                    *((_QWORD *)v229 + 42) = v511;
                    v510 = 0uLL;
                    v511 = 0;
                    a2 = v457;
                    if (v509)
                    {
                      v467[0] = (void **)&v507;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v467);
                      if (SHIBYTE(v506) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v503) < 0)
                        operator delete((void *)v502);
                      v467[0] = (void **)&v500;
                      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v467);
                      if (SHIBYTE(v498) < 0)
                        operator delete((void *)__s1);
                      if (SHIBYTE(v496) < 0)
                        operator delete((void *)v495);
                      if (SHIBYTE(v494) < 0)
                        operator delete((void *)v493);
                    }
                    MEMORY[0x1C3BC54D8](v490);
LABEL_546:
                    v207 += 344;
                    v208 += 344;
                    if (v207 == a2)
                      return;
                    goto LABEL_465;
                  }
                }
                else
                {
                  if (HIBYTE(v498))
                  {
                    v235 = v234;
                    v236 = &__s1;
                    v237 = HIBYTE(v498);
                    while (*(unsigned __int8 *)v236 == *v235)
                    {
                      v236 = (__int128 *)((char *)v236 + 1);
                      ++v235;
                      if (!--v237)
                        goto LABEL_530;
                    }
                    goto LABEL_520;
                  }
LABEL_530:
                  v224 = v225;
                  if (v491 <= *((float *)v225 - 64))
                    goto LABEL_531;
                }
              }
            }
          }
          else if (*(_BYTE *)(v208 + 519))
          {
            v215 = 0;
            while (*(unsigned __int8 *)(v208 + v215 + 496) == v214[v215])
            {
              if (v210 == ++v215)
                goto LABEL_494;
            }
            goto LABEL_484;
          }
LABEL_494:
          if (*(float *)(v208 + 432) <= *(float *)(v208 + 88))
            goto LABEL_546;
          goto LABEL_495;
        }
        if (!a3)
        {
          if (v6 == a2)
            return;
          v447 = a2 - v6;
          v463 = 0x82FA0BE82FA0BE83 * ((uint64_t)(a2 - v6) >> 3);
          v465 = (v9 - 2) >> 1;
          v243 = v465;
          while (1)
          {
            v244 = v243;
            if (v465 < v243)
              goto LABEL_694;
            v245 = (2 * v243) | 1;
            v246 = v7 + 344 * v245;
            if (2 * v243 + 2 >= (uint64_t)v9 || !*(_BYTE *)(v7 + 344 * v245 + 312))
              goto LABEL_581;
            if (*(_BYTE *)(v246 + 656))
            {
              v247 = v7 + 344 * v245;
              v248 = (const void **)(v247 + 152);
              v249 = *(_BYTE *)(v246 + 175);
              v250 = *(_QWORD *)(v247 + 160);
              if (v249 >= 0)
                v251 = *(unsigned __int8 *)(v246 + 175);
              else
                v251 = *(_QWORD *)(v247 + 160);
              v252 = *(_BYTE *)(v246 + 519);
              if (v252 >= 0)
                v253 = *(unsigned __int8 *)(v246 + 519);
              else
                v253 = *(_QWORD *)(v246 + 504);
              if (v252 >= 0)
                v254 = (unsigned __int8 *)(v246 + 496);
              else
                v254 = *(unsigned __int8 **)(v246 + 496);
              if (v251 == v253)
              {
                if ((*(_BYTE *)(v246 + 175) & 0x80) != 0)
                {
                  if (!memcmp(*v248, v254, v250))
                  {
LABEL_696:
                    v7 = v459;
                    if (*(float *)(v459 + 344 * v245 + 88) <= *(float *)(v246 + 432))
                      goto LABEL_581;
                    goto LABEL_580;
                  }
                }
                else
                {
                  if (!*(_BYTE *)(v246 + 175))
                    goto LABEL_696;
                  v255 = v254;
                  v256 = v248;
                  v257 = *(unsigned __int8 *)(v246 + 175);
                  while (*(unsigned __int8 *)v256 == *v255)
                  {
                    v256 = (const void **)((char *)v256 + 1);
                    ++v255;
                    if (!--v257)
                      goto LABEL_696;
                  }
                }
              }
              if (v249 >= 0)
                v258 = v248;
              else
                v258 = *v248;
              if (v251 >= v253)
                v259 = v253;
              else
                v259 = v251;
              v260 = memcmp(v254, v258, v259);
              v261 = v253 < v251;
              if (v260)
                v261 = v260 < 0;
              v7 = v459;
              if (!v261)
                goto LABEL_581;
            }
LABEL_580:
            v246 += 344;
            v245 = 2 * v244 + 2;
LABEL_581:
            v262 = v7 + 344 * v244;
            if (!*(_BYTE *)(v246 + 312))
              goto LABEL_611;
            if (!*(_BYTE *)(v7 + 344 * v244 + 312))
              goto LABEL_694;
            v263 = (const void **)(v246 + 152);
            v264 = v7 + 344 * v244;
            v265 = *(_BYTE *)(v246 + 175);
            if (v265 >= 0)
              v266 = *(unsigned __int8 *)(v246 + 175);
            else
              v266 = *(_QWORD *)(v246 + 160);
            v268 = *(unsigned __int8 **)(v264 + 152);
            v269 = *(_QWORD *)(v264 + 160);
            v267 = (unsigned __int8 *)(v264 + 152);
            v270 = *(char *)(v262 + 175);
            if (v270 >= 0)
              v271 = *(unsigned __int8 *)(v262 + 175);
            else
              v271 = v269;
            if (v270 >= 0)
              v272 = v267;
            else
              v272 = v268;
            if (v266 == v271)
            {
              if ((*(_BYTE *)(v246 + 175) & 0x80) == 0)
              {
                if (!*(_BYTE *)(v246 + 175))
                  goto LABEL_610;
                v273 = v272;
                v274 = (unsigned __int8 *)(v246 + 152);
                v275 = *(unsigned __int8 *)(v246 + 175);
                while (*v274 == *v273)
                {
                  ++v274;
                  ++v273;
                  if (!--v275)
                    goto LABEL_610;
                }
                goto LABEL_600;
              }
              if (!memcmp(*v263, v272, *(_QWORD *)(v246 + 160)))
              {
LABEL_610:
                v7 = v459;
                if (*(float *)(v246 + 88) > *(float *)(v459 + 344 * v244 + 88))
                  goto LABEL_694;
LABEL_611:
                MEMORY[0x1C3BC54B4](v490, v262);
                v280 = v7 + 344 * v244;
                v491 = *(float *)(v280 + 88);
                LOBYTE(v492) = 0;
                v509 = 0;
                if (*(_BYTE *)(v280 + 312))
                {
                  v281 = v7 + 344 * v244;
                  v282 = *(_QWORD *)(v281 + 96);
                  v281 += 96;
                  v492 = v282;
                  v283 = *(_OWORD *)(v281 + 8);
                  v494 = *(_QWORD *)(v281 + 24);
                  v493 = v283;
                  *(_QWORD *)(v281 + 16) = 0;
                  *(_QWORD *)(v281 + 24) = 0;
                  *(_QWORD *)(v281 + 8) = 0;
                  v284 = *(_OWORD *)(v281 + 32);
                  v496 = *(_QWORD *)(v281 + 48);
                  v495 = v284;
                  *(_QWORD *)(v281 + 40) = 0;
                  *(_QWORD *)(v281 + 48) = 0;
                  *(_QWORD *)(v281 + 32) = 0;
                  v285 = *(_OWORD *)(v281 + 56);
                  v498 = *(_QWORD *)(v281 + 72);
                  __s1 = v285;
                  *(_QWORD *)(v281 + 64) = 0;
                  *(_QWORD *)(v281 + 72) = 0;
                  *(_QWORD *)(v281 + 56) = 0;
                  v286 = *(_OWORD *)(v281 + 80);
                  *(_OWORD *)((char *)v499 + 12) = *(_OWORD *)(v281 + 92);
                  v499[0] = v286;
                  v501 = 0;
                  v500 = 0uLL;
                  v500 = *(_OWORD *)(v281 + 112);
                  v501 = *(_QWORD *)(v281 + 128);
                  *(_QWORD *)(v281 + 112) = 0;
                  *(_QWORD *)(v281 + 120) = 0;
                  *(_QWORD *)(v281 + 128) = 0;
                  v287 = *(_OWORD *)(v281 + 136);
                  v503 = *(_QWORD *)(v281 + 152);
                  v502 = v287;
                  *(_QWORD *)(v281 + 144) = 0;
                  *(_QWORD *)(v281 + 152) = 0;
                  *(_QWORD *)(v281 + 136) = 0;
                  v504 = *(_DWORD *)(v281 + 160);
                  v288 = *(_OWORD *)(v281 + 168);
                  v506 = *(_QWORD *)(v281 + 184);
                  __p = v288;
                  *(_QWORD *)(v281 + 176) = 0;
                  *(_QWORD *)(v281 + 184) = 0;
                  *(_QWORD *)(v281 + 168) = 0;
                  v507 = 0uLL;
                  v508 = 0;
                  v507 = *(_OWORD *)(v281 + 192);
                  v508 = *(_QWORD *)(v281 + 208);
                  *(_QWORD *)(v281 + 192) = 0;
                  *(_QWORD *)(v281 + 200) = 0;
                  *(_QWORD *)(v281 + 208) = 0;
                  v509 = 1;
                }
                v289 = v7 + 344 * v244;
                v510 = *(_OWORD *)(v289 + 320);
                v511 = *(_QWORD *)(v289 + 336);
                *(_QWORD *)(v289 + 320) = 0;
                *(_QWORD *)(v289 + 328) = 0;
                *(_QWORD *)(v289 + 336) = 0;
                while (1)
                {
                  v290 = v246;
                  sirinluinternal::MatchingSpan::operator=();
                  *(_DWORD *)(v262 + 88) = *(_DWORD *)(v246 + 88);
                  v291 = v246 + 96;
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v262 + 96, v246 + 96);
                  v292 = *(void **)(v262 + 320);
                  if (v292)
                  {
                    *(_QWORD *)(v262 + 328) = v292;
                    operator delete(v292);
                    *(_QWORD *)(v262 + 320) = 0;
                    *(_QWORD *)(v262 + 328) = 0;
                    *(_QWORD *)(v262 + 336) = 0;
                  }
                  *(_OWORD *)(v262 + 320) = *(_OWORD *)(v246 + 320);
                  *(_QWORD *)(v262 + 336) = *(_QWORD *)(v246 + 336);
                  *(_QWORD *)(v246 + 320) = 0;
                  *(_QWORD *)(v246 + 328) = 0;
                  *(_QWORD *)(v246 + 336) = 0;
                  if (v465 < v245)
                  {
LABEL_680:
                    sirinluinternal::MatchingSpan::operator=();
                    *(float *)(v290 + 88) = v491;
                    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v291, (uint64_t)&v492);
                    v324 = *(void **)(v290 + 320);
                    if (v324)
                    {
                      *(_QWORD *)(v290 + 328) = v324;
                      operator delete(v324);
                      *(_QWORD *)(v290 + 320) = 0;
                      *(_QWORD *)(v290 + 328) = 0;
                      *(_QWORD *)(v290 + 336) = 0;
                    }
                    *(_OWORD *)(v290 + 320) = v510;
                    *(_QWORD *)(v290 + 336) = v511;
                    v510 = 0uLL;
                    v511 = 0;
                    if (v509)
                    {
                      v467[0] = (void **)&v507;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v467);
                      if (SHIBYTE(v506) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v503) < 0)
                        operator delete((void *)v502);
                      v467[0] = (void **)&v500;
                      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v467);
                      if (SHIBYTE(v498) < 0)
                        operator delete((void *)__s1);
                      if (SHIBYTE(v496) < 0)
                        operator delete((void *)v495);
                      if (SHIBYTE(v494) < 0)
                        operator delete((void *)v493);
                    }
                    MEMORY[0x1C3BC54D8](v490);
                    goto LABEL_694;
                  }
                  v293 = 2 * v245;
                  v294 = (2 * v245) | 1;
                  v245 = v294;
                  v246 = v7 + 344 * v294;
                  v295 = v293 + 2;
                  if (v293 + 2 >= (uint64_t)v9 || !*(_BYTE *)(v7 + 344 * v294 + 312))
                    goto LABEL_647;
                  if (!*(_BYTE *)(v246 + 656))
                    goto LABEL_646;
                  v296 = v7 + 344 * v294;
                  v297 = (const void **)(v296 + 152);
                  v298 = *(_BYTE *)(v246 + 175);
                  v299 = *(_QWORD *)(v296 + 160);
                  if (v298 >= 0)
                    v300 = *(unsigned __int8 *)(v246 + 175);
                  else
                    v300 = *(_QWORD *)(v296 + 160);
                  v301 = *(_BYTE *)(v246 + 519);
                  if (v301 >= 0)
                    v302 = *(unsigned __int8 *)(v246 + 519);
                  else
                    v302 = *(_QWORD *)(v246 + 504);
                  if (v301 >= 0)
                    v303 = (unsigned __int8 *)(v246 + 496);
                  else
                    v303 = *(unsigned __int8 **)(v246 + 496);
                  if (v300 == v302)
                  {
                    if ((*(_BYTE *)(v246 + 175) & 0x80) != 0)
                    {
                      v451 = v303;
                      v453 = v297;
                      v307 = memcmp(*v297, v303, v299);
                      v303 = v451;
                      v297 = v453;
                      if (!v307)
                      {
LABEL_678:
                        v7 = v459;
                        v9 = v463;
                        if (*(float *)(v459 + 344 * v294 + 88) > *(float *)(v246 + 432))
                          goto LABEL_646;
                        goto LABEL_647;
                      }
                    }
                    else
                    {
                      if (!*(_BYTE *)(v246 + 175))
                        goto LABEL_678;
                      v304 = v303;
                      v305 = v297;
                      v306 = *(unsigned __int8 *)(v246 + 175);
                      while (*(unsigned __int8 *)v305 == *v304)
                      {
                        v305 = (const void **)((char *)v305 + 1);
                        ++v304;
                        if (!--v306)
                          goto LABEL_678;
                      }
                    }
                  }
                  if (v298 >= 0)
                    v308 = v297;
                  else
                    v308 = *v297;
                  if (v300 >= v302)
                    v309 = v302;
                  else
                    v309 = v300;
                  v310 = memcmp(v303, v308, v309);
                  v311 = v302 < v300;
                  if (v310)
                    v311 = v310 < 0;
                  v7 = v459;
                  v9 = v463;
                  if (v311)
                  {
LABEL_646:
                    v246 += 344;
                    v245 = v295;
                  }
LABEL_647:
                  v262 = v290;
                  if (!*(_BYTE *)(v246 + 312))
                    continue;
                  if (!v509)
                    goto LABEL_680;
                  v312 = (const void **)(v246 + 152);
                  v313 = *(_BYTE *)(v246 + 175);
                  if (v313 >= 0)
                    v314 = *(unsigned __int8 *)(v246 + 175);
                  else
                    v314 = *(_QWORD *)(v246 + 160);
                  if (v498 >= 0)
                    v315 = HIBYTE(v498);
                  else
                    v315 = *((_QWORD *)&__s1 + 1);
                  if (v498 >= 0)
                    v316 = &__s1;
                  else
                    v316 = (__int128 *)__s1;
                  if (v314 == v315)
                  {
                    if ((*(_BYTE *)(v246 + 175) & 0x80) != 0)
                    {
                      if (!memcmp(*v312, v316, *(_QWORD *)(v246 + 160)))
                      {
LABEL_676:
                        v262 = v290;
                        v7 = v459;
                        v9 = v463;
                        if (*(float *)(v246 + 88) > v491)
                          goto LABEL_680;
                        continue;
                      }
                    }
                    else
                    {
                      if (!*(_BYTE *)(v246 + 175))
                        goto LABEL_676;
                      v317 = (unsigned __int8 *)v316;
                      v318 = (unsigned __int8 *)(v246 + 152);
                      v319 = *(unsigned __int8 *)(v246 + 175);
                      while (*v318 == *v317)
                      {
                        ++v318;
                        ++v317;
                        if (!--v319)
                          goto LABEL_676;
                      }
                    }
                  }
                  if (v313 >= 0)
                    v320 = (const void *)(v246 + 152);
                  else
                    v320 = *v312;
                  if (v314 >= v315)
                    v321 = v315;
                  else
                    v321 = v314;
                  v322 = memcmp(v316, v320, v321);
                  v323 = v315 < v314;
                  if (v322)
                    v323 = v322 < 0;
                  v262 = v290;
                  v7 = v459;
                  v9 = v463;
                  if (v323)
                    goto LABEL_680;
                }
              }
            }
LABEL_600:
            if (v265 >= 0)
              v276 = (const void *)(v246 + 152);
            else
              v276 = *v263;
            if (v266 >= v271)
              v277 = v271;
            else
              v277 = v266;
            v278 = memcmp(v272, v276, v277);
            v279 = v271 < v266;
            if (v278)
              v279 = v278 < 0;
            v7 = v459;
            if (!v279)
              goto LABEL_611;
LABEL_694:
            v243 = v244 - 1;
            if (!v244)
            {
              v325 = v447 / 0x158;
              v454 = (_QWORD *)(v7 + 320);
              v449 = v7 + 104;
              v446 = v7 + 152;
              v448 = v7 + 128;
              v444 = (__int128 *)(v7 + 176);
              v440 = v7 + 232;
              v442 = (_QWORD *)(v7 + 208);
              v438 = (_QWORD *)(v7 + 288);
              v439 = v7 + 264;
              v326 = v457;
              while (1)
              {
                v462 = v326;
                MEMORY[0x1C3BC54B4](v467, v7);
                v468 = *(_DWORD *)(v7 + 88);
                LOBYTE(v469) = 0;
                v486 = 0;
                if (*(_BYTE *)(v7 + 312))
                {
                  v469 = *(_QWORD *)(v7 + 96);
                  v327 = *(_QWORD *)(v449 + 16);
                  v470 = *(_OWORD *)v449;
                  v471 = v327;
                  *(_QWORD *)(v449 + 8) = 0;
                  *(_QWORD *)(v449 + 16) = 0;
                  *(_QWORD *)v449 = 0;
                  v328 = *(_QWORD *)(v448 + 16);
                  v472 = *(_OWORD *)v448;
                  v473 = v328;
                  *(_QWORD *)(v448 + 8) = 0;
                  *(_QWORD *)(v448 + 16) = 0;
                  *(_QWORD *)v448 = 0;
                  v329 = *(_OWORD *)v446;
                  v475 = *(_QWORD *)(v446 + 16);
                  v474 = v329;
                  *(_QWORD *)v446 = 0;
                  *(_QWORD *)(v446 + 8) = 0;
                  *(_QWORD *)(v446 + 16) = 0;
                  v330 = *v444;
                  *(_OWORD *)((char *)v476 + 12) = *(__int128 *)((char *)v444 + 12);
                  v476[0] = v330;
                  v478 = 0;
                  v477 = 0uLL;
                  v477 = *(_OWORD *)(v7 + 208);
                  v478 = *(_QWORD *)(v7 + 224);
                  *v442 = 0;
                  v442[1] = 0;
                  v442[2] = 0;
                  v331 = *(_OWORD *)v440;
                  v480 = *(_QWORD *)(v440 + 16);
                  v479 = v331;
                  *(_QWORD *)v440 = 0;
                  *(_QWORD *)(v440 + 8) = 0;
                  *(_QWORD *)(v440 + 16) = 0;
                  v481 = *(_DWORD *)(v7 + 256);
                  v332 = *(_OWORD *)v439;
                  v483 = *(_QWORD *)(v439 + 16);
                  v482 = v332;
                  *(_QWORD *)v439 = 0;
                  *(_QWORD *)(v439 + 8) = 0;
                  *(_QWORD *)(v439 + 16) = 0;
                  v484 = 0uLL;
                  v485 = 0;
                  v484 = *(_OWORD *)(v7 + 288);
                  v485 = *(_QWORD *)(v7 + 304);
                  *v438 = 0;
                  v438[1] = 0;
                  v438[2] = 0;
                  v486 = 1;
                }
                v333 = v7;
                v334 = 0;
                *(_OWORD *)v487 = *(_OWORD *)(v333 + 320);
                v488 = *(_QWORD *)(v333 + 336);
                *v454 = 0;
                v454[1] = 0;
                v454[2] = 0;
                v335 = (unint64_t)(v325 - 2) >> 1;
                v464 = v335;
                v466 = v325;
                do
                {
                  v336 = v334 + 1;
                  v337 = v333 + 344 * (v334 + 1);
                  v338 = 2 * v334;
                  v334 = (2 * v334) | 1;
                  v339 = v338 + 2;
                  if (v338 + 2 >= v325 || !*(_BYTE *)(v333 + 344 * v336 + 312))
                    goto LABEL_731;
                  if (!*(_BYTE *)(v337 + 656))
                    goto LABEL_730;
                  v340 = v333 + 344 * v336;
                  v341 = (const void **)(v340 + 152);
                  v342 = *(_BYTE *)(v337 + 175);
                  v343 = *(_QWORD *)(v340 + 160);
                  if (v342 >= 0)
                    v344 = *(unsigned __int8 *)(v337 + 175);
                  else
                    v344 = *(_QWORD *)(v340 + 160);
                  v345 = *(_BYTE *)(v337 + 519);
                  if (v345 >= 0)
                    v346 = *(unsigned __int8 *)(v337 + 519);
                  else
                    v346 = *(_QWORD *)(v337 + 504);
                  if (v345 >= 0)
                    v347 = (unsigned __int8 *)(v337 + 496);
                  else
                    v347 = *(unsigned __int8 **)(v337 + 496);
                  if (v344 == v346)
                  {
                    if ((*(_BYTE *)(v337 + 175) & 0x80) != 0)
                    {
                      if (!memcmp(*v341, v347, v343))
                      {
LABEL_735:
                        v335 = v464;
                        v325 = v466;
                        if (*(float *)(v333 + 344 * v336 + 88) > *(float *)(v337 + 432))
                          goto LABEL_730;
                        goto LABEL_731;
                      }
                    }
                    else
                    {
                      if (!*(_BYTE *)(v337 + 175))
                        goto LABEL_735;
                      v348 = v347;
                      v349 = v341;
                      v350 = *(unsigned __int8 *)(v337 + 175);
                      while (*(unsigned __int8 *)v349 == *v348)
                      {
                        v349 = (const void **)((char *)v349 + 1);
                        ++v348;
                        if (!--v350)
                          goto LABEL_735;
                      }
                    }
                  }
                  if (v342 >= 0)
                    v351 = v341;
                  else
                    v351 = *v341;
                  if (v344 >= v346)
                    v352 = v346;
                  else
                    v352 = v344;
                  v353 = memcmp(v347, v351, v352);
                  v354 = v346 < v344;
                  if (v353)
                    v354 = v353 < 0;
                  v335 = v464;
                  v325 = v466;
                  if (v354)
                  {
LABEL_730:
                    v337 += 344;
                    v334 = v339;
                  }
LABEL_731:
                  sirinluinternal::MatchingSpan::operator=();
                  *(_DWORD *)(v333 + 88) = *(_DWORD *)(v337 + 88);
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v333 + 96, v337 + 96);
                  v355 = *(void **)(v333 + 320);
                  if (v355)
                  {
                    *(_QWORD *)(v333 + 328) = v355;
                    operator delete(v355);
                    *(_QWORD *)(v333 + 320) = 0;
                    *(_QWORD *)(v333 + 328) = 0;
                    *(_QWORD *)(v333 + 336) = 0;
                  }
                  v356 = (_QWORD *)(v337 + 320);
                  *(_OWORD *)(v333 + 320) = *(_OWORD *)(v337 + 320);
                  *(_QWORD *)(v333 + 336) = *(_QWORD *)(v337 + 336);
                  *(_QWORD *)(v337 + 320) = 0;
                  *(_QWORD *)(v337 + 328) = 0;
                  *(_QWORD *)(v337 + 336) = 0;
                  v333 = v337;
                }
                while (v334 <= v335);
                if (v337 == v462 - 344)
                {
                  v326 = v462 - 344;
                  sirinluinternal::MatchingSpan::operator=();
                  *(_DWORD *)(v337 + 88) = v468;
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v337 + 96, (uint64_t)&v469);
                  v373 = *(void **)(v337 + 320);
                  if (v373)
                  {
                    *(_QWORD *)(v337 + 328) = v373;
                    operator delete(v373);
                    *v356 = 0;
                    *(_QWORD *)(v337 + 328) = 0;
                    *(_QWORD *)(v337 + 336) = 0;
                  }
                  *(_OWORD *)(v337 + 320) = *(_OWORD *)v487;
                  *(_QWORD *)(v337 + 336) = v488;
                  v487[0] = 0;
                  v487[1] = 0;
                  v488 = 0;
                  v7 = v459;
                  goto LABEL_764;
                }
                sirinluinternal::MatchingSpan::operator=();
                *(_DWORD *)(v337 + 88) = *(_DWORD *)(v462 - 256);
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v337 + 96, v462 - 248);
                v357 = *(void **)(v337 + 320);
                if (v357)
                {
                  *(_QWORD *)(v337 + 328) = v357;
                  operator delete(v357);
                  *v356 = 0;
                  *(_QWORD *)(v337 + 328) = 0;
                  *(_QWORD *)(v337 + 336) = 0;
                }
                v358 = (_QWORD *)(v462 - 24);
                *(_OWORD *)(v337 + 320) = *(_OWORD *)(v462 - 24);
                *(_QWORD *)(v337 + 336) = *(_QWORD *)(v462 - 8);
                *v358 = 0;
                v358[1] = 0;
                v358[2] = 0;
                v326 = v462 - 344;
                sirinluinternal::MatchingSpan::operator=();
                *(_DWORD *)(v462 - 256) = v468;
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v462 - 248, (uint64_t)&v469);
                v359 = *(void **)(v462 - 24);
                if (v359)
                {
                  *(_QWORD *)(v462 - 16) = v359;
                  operator delete(v359);
                }
                *(_OWORD *)(v462 - 24) = *(_OWORD *)v487;
                *(_QWORD *)(v462 - 8) = v488;
                v487[0] = 0;
                v487[1] = 0;
                v488 = 0;
                v7 = v459;
                v360 = v337 + 344 - v459;
                if (v360 >= 345)
                {
                  v361 = (v360 / 0x158uLL - 2) >> 1;
                  v362 = v459 + 344 * v361;
                  if (*(_BYTE *)(v362 + 312))
                  {
                    if (!*(_BYTE *)(v337 + 312))
                      goto LABEL_789;
                    v363 = v459 + 344 * v361;
                    v364 = (const void **)(v363 + 152);
                    v365 = *(_BYTE *)(v362 + 175);
                    if (v365 >= 0)
                      v366 = *(unsigned __int8 *)(v362 + 175);
                    else
                      v366 = *(_QWORD *)(v363 + 160);
                    v367 = *(char *)(v337 + 175);
                    if (v367 >= 0)
                      v368 = *(unsigned __int8 *)(v337 + 175);
                    else
                      v368 = *(_QWORD *)(v337 + 160);
                    if (v367 >= 0)
                      v369 = (unsigned __int8 *)(v337 + 152);
                    else
                      v369 = *(unsigned __int8 **)(v337 + 152);
                    if (v366 != v368)
                      goto LABEL_778;
                    if ((*(_BYTE *)(v362 + 175) & 0x80) != 0)
                    {
                      if (memcmp(*v364, v369, *(_QWORD *)(v363 + 160)))
                        goto LABEL_778;
                    }
                    else if (*(_BYTE *)(v362 + 175))
                    {
                      v370 = v369;
                      v371 = v364;
                      v372 = *(unsigned __int8 *)(v362 + 175);
                      while (*(unsigned __int8 *)v371 == *v370)
                      {
                        v371 = (const void **)((char *)v371 + 1);
                        ++v370;
                        if (!--v372)
                          goto LABEL_788;
                      }
LABEL_778:
                      if (v365 >= 0)
                        v374 = v364;
                      else
                        v374 = *v364;
                      if (v366 >= v368)
                        v375 = v368;
                      else
                        v375 = v366;
                      v376 = memcmp(v369, v374, v375);
                      v377 = v368 < v366;
                      if (v376)
                        v377 = v376 < 0;
                      v7 = v459;
                      if (!v377)
                        goto LABEL_764;
LABEL_789:
                      MEMORY[0x1C3BC54B4](v490, v337);
                      v491 = *(float *)(v337 + 88);
                      LOBYTE(v492) = 0;
                      v509 = 0;
                      if (*(_BYTE *)(v337 + 312))
                      {
                        v492 = *(_QWORD *)(v337 + 96);
                        v378 = *(_OWORD *)(v337 + 104);
                        v494 = *(_QWORD *)(v337 + 120);
                        v493 = v378;
                        *(_QWORD *)(v337 + 112) = 0;
                        *(_QWORD *)(v337 + 120) = 0;
                        *(_QWORD *)(v337 + 104) = 0;
                        v379 = *(_OWORD *)(v337 + 128);
                        v496 = *(_QWORD *)(v337 + 144);
                        v495 = v379;
                        *(_QWORD *)(v337 + 136) = 0;
                        *(_QWORD *)(v337 + 144) = 0;
                        *(_QWORD *)(v337 + 128) = 0;
                        v380 = *(_OWORD *)(v337 + 152);
                        v498 = *(_QWORD *)(v337 + 168);
                        __s1 = v380;
                        *(_QWORD *)(v337 + 160) = 0;
                        *(_QWORD *)(v337 + 168) = 0;
                        *(_QWORD *)(v337 + 152) = 0;
                        v381 = *(_OWORD *)(v337 + 176);
                        *(_OWORD *)((char *)v499 + 12) = *(_OWORD *)(v337 + 188);
                        v499[0] = v381;
                        v501 = 0;
                        v500 = 0uLL;
                        v500 = *(_OWORD *)(v337 + 208);
                        v501 = *(_QWORD *)(v337 + 224);
                        *(_QWORD *)(v337 + 208) = 0;
                        *(_QWORD *)(v337 + 216) = 0;
                        *(_QWORD *)(v337 + 224) = 0;
                        v382 = *(_OWORD *)(v337 + 232);
                        v503 = *(_QWORD *)(v337 + 248);
                        v502 = v382;
                        *(_QWORD *)(v337 + 240) = 0;
                        *(_QWORD *)(v337 + 248) = 0;
                        *(_QWORD *)(v337 + 232) = 0;
                        v504 = *(_DWORD *)(v337 + 256);
                        v383 = *(_OWORD *)(v337 + 264);
                        v506 = *(_QWORD *)(v337 + 280);
                        __p = v383;
                        *(_QWORD *)(v337 + 272) = 0;
                        *(_QWORD *)(v337 + 280) = 0;
                        *(_QWORD *)(v337 + 264) = 0;
                        v507 = 0uLL;
                        v508 = 0;
                        v507 = *(_OWORD *)(v337 + 288);
                        v508 = *(_QWORD *)(v337 + 304);
                        *(_QWORD *)(v337 + 288) = 0;
                        *(_QWORD *)(v337 + 296) = 0;
                        *(_QWORD *)(v337 + 304) = 0;
                        v509 = 1;
                      }
                      v510 = *(_OWORD *)(v337 + 320);
                      v511 = *(_QWORD *)(v337 + 336);
                      *v356 = 0;
                      *(_QWORD *)(v337 + 328) = 0;
                      *(_QWORD *)(v337 + 336) = 0;
                      while (1)
                      {
                        do
                        {
LABEL_792:
                          v384 = v362;
                          sirinluinternal::MatchingSpan::operator=();
                          *(_DWORD *)(v337 + 88) = *(_DWORD *)(v362 + 88);
                          v385 = v362 + 96;
                          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v337 + 96, v362 + 96);
                          v386 = *(void **)(v337 + 320);
                          if (v386)
                          {
                            *(_QWORD *)(v337 + 328) = v386;
                            operator delete(v386);
                            *(_QWORD *)(v337 + 320) = 0;
                            *(_QWORD *)(v337 + 328) = 0;
                            *(_QWORD *)(v337 + 336) = 0;
                          }
                          *(_OWORD *)(v337 + 320) = *(_OWORD *)(v362 + 320);
                          *(_QWORD *)(v337 + 336) = *(_QWORD *)(v362 + 336);
                          *(_QWORD *)(v362 + 320) = 0;
                          *(_QWORD *)(v362 + 328) = 0;
                          *(_QWORD *)(v362 + 336) = 0;
                          if (!v361 || (v361 = (v361 - 1) >> 1, v362 = v459 + 344 * v361, !*(_BYTE *)(v362 + 312)))
                          {
LABEL_825:
                            sirinluinternal::MatchingSpan::operator=();
                            *(float *)(v384 + 88) = v491;
                            std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v385, (uint64_t)&v492);
                            v400 = *(void **)(v384 + 320);
                            if (v400)
                            {
                              *(_QWORD *)(v384 + 328) = v400;
                              operator delete(v400);
                            }
                            *(_OWORD *)(v384 + 320) = v510;
                            *(_QWORD *)(v384 + 336) = v511;
                            v510 = 0uLL;
                            v511 = 0;
                            v7 = v459;
                            if (v509)
                            {
                              v489 = (void **)&v507;
                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v489);
                              if (SHIBYTE(v506) < 0)
                                operator delete((void *)__p);
                              if (SHIBYTE(v503) < 0)
                                operator delete((void *)v502);
                              v489 = (void **)&v500;
                              std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v489);
                              if (SHIBYTE(v498) < 0)
                                operator delete((void *)__s1);
                              if (SHIBYTE(v496) < 0)
                                operator delete((void *)v495);
                              if (SHIBYTE(v494) < 0)
                                operator delete((void *)v493);
                            }
                            MEMORY[0x1C3BC54D8](v490);
                            if (v487[0])
                            {
                              v487[1] = v487[0];
                              operator delete(v487[0]);
                            }
                            goto LABEL_764;
                          }
                          v337 = v384;
                        }
                        while (!v509);
                        v387 = v459 + 344 * v361;
                        v388 = (const void **)(v387 + 152);
                        v389 = *(_BYTE *)(v362 + 175);
                        if (v389 >= 0)
                          v390 = *(unsigned __int8 *)(v362 + 175);
                        else
                          v390 = *(_QWORD *)(v387 + 160);
                        if (v498 >= 0)
                          v391 = HIBYTE(v498);
                        else
                          v391 = *((_QWORD *)&__s1 + 1);
                        if (v498 >= 0)
                          v392 = &__s1;
                        else
                          v392 = (__int128 *)__s1;
                        if (v390 == v391)
                        {
                          if ((*(_BYTE *)(v362 + 175) & 0x80) != 0)
                          {
                            if (!memcmp(*v388, v392, *(_QWORD *)(v387 + 160)))
                            {
LABEL_824:
                              v337 = v384;
                              if (*(float *)(v459 + 344 * v361 + 88) <= v491)
                                goto LABEL_825;
                              goto LABEL_792;
                            }
                          }
                          else
                          {
                            if (!*(_BYTE *)(v362 + 175))
                              goto LABEL_824;
                            v393 = (unsigned __int8 *)v392;
                            v394 = v388;
                            v395 = *(unsigned __int8 *)(v362 + 175);
                            while (*(unsigned __int8 *)v394 == *v393)
                            {
                              v394 = (const void **)((char *)v394 + 1);
                              ++v393;
                              if (!--v395)
                                goto LABEL_824;
                            }
                          }
                        }
                        if (v389 >= 0)
                          v396 = v388;
                        else
                          v396 = *v388;
                        if (v390 >= v391)
                          v397 = v391;
                        else
                          v397 = v390;
                        v398 = memcmp(v392, v396, v397);
                        v399 = v391 < v390;
                        if (v398)
                          v399 = v398 < 0;
                        v337 = v384;
                        if (!v399)
                          goto LABEL_825;
                      }
                    }
LABEL_788:
                    v7 = v459;
                    if (*(float *)(v459 + 344 * v361 + 88) > *(float *)(v337 + 88))
                      goto LABEL_789;
                  }
                }
LABEL_764:
                if (v486)
                {
                  v490[0] = (void **)&v484;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v490);
                  if (SHIBYTE(v483) < 0)
                    operator delete((void *)v482);
                  if (SHIBYTE(v480) < 0)
                    operator delete((void *)v479);
                  v490[0] = (void **)&v477;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v490);
                  if (SHIBYTE(v475) < 0)
                    operator delete((void *)v474);
                  if (SHIBYTE(v473) < 0)
                    operator delete((void *)v472);
                  if (SHIBYTE(v471) < 0)
                    operator delete((void *)v470);
                }
                MEMORY[0x1C3BC54D8](v467);
                v325 = v466 - 1;
                if (v466 <= 2)
                  return;
              }
            }
          }
        }
        if ((unint64_t)v8 < 0xAC01)
        {
          v11.n128_f32[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6 + 344 * (v9 >> 1), v6, v452);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, v6 + 344 * (v9 >> 1), v452);
          v10 = 344 * (v9 >> 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6 + 344, v10 + v6 - 344, v445);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6 + 688, v6 + 344 + v10, v443);
          v7 = v6;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v10 + v6 - 344, v6 + v10, v6 + 344 + v10);
          std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v6, v6 + v10);
        }
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_37;
        if (!*(_BYTE *)(v7 - 32))
        {
LABEL_227:
          MEMORY[0x1C3BC54B4](v490, v7, v11);
          v103 = *(float *)(v7 + 88);
          v491 = v103;
          LOBYTE(v492) = 0;
          v509 = 0;
          v104 = *(unsigned __int8 *)(v7 + 312);
          if (*(_BYTE *)(v7 + 312))
          {
            v492 = *(_QWORD *)(v7 + 96);
            v105 = *(_QWORD *)(v7 + 120);
            v493 = *(_OWORD *)(v7 + 104);
            v494 = v105;
            *(_QWORD *)(v7 + 112) = 0;
            *(_QWORD *)(v7 + 120) = 0;
            *(_QWORD *)(v7 + 104) = 0;
            v106 = *(_QWORD *)(v7 + 144);
            v495 = *(_OWORD *)(v7 + 128);
            v496 = v106;
            *(_QWORD *)(v7 + 136) = 0;
            *(_QWORD *)(v7 + 144) = 0;
            *(_QWORD *)(v7 + 128) = 0;
            v107 = *(_OWORD *)(v7 + 152);
            v498 = *(_QWORD *)(v7 + 168);
            __s1 = v107;
            *(_QWORD *)(v7 + 152) = 0;
            *(_QWORD *)(v7 + 160) = 0;
            *(_QWORD *)(v7 + 168) = 0;
            v108 = *(_OWORD *)(v7 + 176);
            *(_OWORD *)((char *)v499 + 12) = *(_OWORD *)(v7 + 188);
            v499[0] = v108;
            v501 = 0;
            v500 = 0uLL;
            v500 = *(_OWORD *)(v7 + 208);
            v501 = *(_QWORD *)(v7 + 224);
            *(_QWORD *)(v7 + 208) = 0;
            *(_QWORD *)(v7 + 216) = 0;
            *(_QWORD *)(v7 + 224) = 0;
            v109 = *(_OWORD *)(v7 + 232);
            v503 = *(_QWORD *)(v7 + 248);
            v502 = v109;
            *(_QWORD *)(v7 + 232) = 0;
            *(_QWORD *)(v7 + 240) = 0;
            *(_QWORD *)(v7 + 248) = 0;
            v504 = *(_DWORD *)(v7 + 256);
            v110 = *(_OWORD *)(v7 + 264);
            v506 = *(_QWORD *)(v7 + 280);
            __p = v110;
            *(_QWORD *)(v7 + 264) = 0;
            *(_QWORD *)(v7 + 272) = 0;
            *(_QWORD *)(v7 + 280) = 0;
            v507 = 0uLL;
            v508 = 0;
            v507 = *(_OWORD *)(v7 + 288);
            v508 = *(_QWORD *)(v7 + 304);
            *(_QWORD *)(v7 + 288) = 0;
            *(_QWORD *)(v7 + 296) = 0;
            *(_QWORD *)(v7 + 304) = 0;
            v509 = 1;
          }
          v510 = *(_OWORD *)(v7 + 320);
          v511 = *(_QWORD *)(v7 + 336);
          *(_QWORD *)(v7 + 320) = 0;
          *(_QWORD *)(v7 + 328) = 0;
          *(_QWORD *)(v7 + 336) = 0;
          if (!v104)
          {
LABEL_290:
            v6 = v7 + 344;
            if (v7 + 344 >= a2)
              goto LABEL_325;
            v139 = v7;
            v140 = HIBYTE(v498);
            v141 = *((_QWORD *)&__s1 + 1);
            v142 = (const void *)__s1;
            if (v498 >= 0)
              v143 = HIBYTE(v498);
            else
              v143 = *((_QWORD *)&__s1 + 1);
            if (v498 >= 0)
              v144 = &__s1;
            else
              v144 = (__int128 *)__s1;
            while (1)
            {
              v145 = v139;
              v139 = v6;
              if (!v104)
                goto LABEL_321;
              if (!*(_BYTE *)(v145 + 656))
                goto LABEL_331;
              v146 = *(_BYTE *)(v145 + 519);
              if (v146 >= 0)
                v147 = *(unsigned __int8 *)(v145 + 519);
              else
                v147 = *(_QWORD *)(v145 + 504);
              if (v146 >= 0)
                v148 = (unsigned __int8 *)(v145 + 496);
              else
                v148 = *(unsigned __int8 **)(v145 + 496);
              if (v143 == v147)
              {
                if ((v140 & 0x80) != 0)
                {
                  if (!memcmp(v142, v148, v141))
                  {
LABEL_320:
                    if (v103 > *(float *)(v145 + 432))
                      goto LABEL_324;
                    goto LABEL_321;
                  }
                }
                else
                {
                  if (!(_DWORD)v140)
                    goto LABEL_320;
                  v149 = v148;
                  v150 = &__s1;
                  v151 = v140;
                  while (*(unsigned __int8 *)v150 == *v149)
                  {
                    v150 = (__int128 *)((char *)v150 + 1);
                    ++v149;
                    if (!--v151)
                      goto LABEL_320;
                  }
                }
              }
              if (v143 >= v147)
                v152 = v147;
              else
                v152 = v143;
              v153 = memcmp(v148, v144, v152);
              v154 = v147 < v143;
              if (v153)
                v154 = v153 < 0;
              if (v154)
              {
LABEL_324:
                v6 = v139;
                goto LABEL_325;
              }
LABEL_321:
              v6 = v139 + 344;
              if (v139 + 344 >= v457)
                goto LABEL_325;
            }
          }
          if (*(_BYTE *)(a2 - 32))
          {
            v111 = HIBYTE(v498);
            if (v498 >= 0)
              v112 = HIBYTE(v498);
            else
              v112 = *((_QWORD *)&__s1 + 1);
            v113 = *(_BYTE *)(a2 - 169);
            if (v113 >= 0)
              v114 = *(unsigned __int8 *)(a2 - 169);
            else
              v114 = *(_QWORD *)(a2 - 184);
            if (v113 >= 0)
              v115 = v441;
            else
              v115 = *(const void ***)(a2 - 192);
            if (v112 != v114)
              goto LABEL_248;
            if (v498 < 0)
            {
              if (memcmp((const void *)__s1, v115, *((size_t *)&__s1 + 1)))
                goto LABEL_248;
            }
            else if (HIBYTE(v498))
            {
              v116 = v115;
              v117 = &__s1;
              v118 = HIBYTE(v498);
              while (*(unsigned __int8 *)v117 == *(unsigned __int8 *)v116)
              {
                v117 = (__int128 *)((char *)v117 + 1);
                v116 = (const void **)((char *)v116 + 1);
                if (!--v118)
                  goto LABEL_289;
              }
LABEL_248:
              if (v111 >= 0)
                v119 = &__s1;
              else
                v119 = (__int128 *)__s1;
              if (v112 >= v114)
                v120 = v114;
              else
                v120 = v112;
              v121 = memcmp(v115, v119, v120);
              v122 = v114 < v112;
              if (v121)
                v122 = v121 < 0;
              if (!v122)
                goto LABEL_290;
              goto LABEL_257;
            }
LABEL_289:
            if (v103 <= *(float *)(a2 - 256))
              goto LABEL_290;
          }
LABEL_257:
          v6 = v7 + 344;
          if (!*(_BYTE *)(v7 + 656))
            goto LABEL_325;
          v123 = v7;
          v124 = HIBYTE(v498);
          v125 = *((_QWORD *)&__s1 + 1);
          v126 = (const void *)__s1;
          if (v498 >= 0)
            v127 = HIBYTE(v498);
          else
            v127 = *((_QWORD *)&__s1 + 1);
          if (v498 >= 0)
            v128 = &__s1;
          else
            v128 = (__int128 *)__s1;
          do
          {
            v129 = v6;
            v130 = *(_BYTE *)(v123 + 519);
            if (v130 >= 0)
              v131 = *(unsigned __int8 *)(v123 + 519);
            else
              v131 = *(_QWORD *)(v123 + 504);
            if (v130 >= 0)
              v132 = (unsigned __int8 *)(v123 + 496);
            else
              v132 = *(unsigned __int8 **)(v123 + 496);
            if (v127 == v131)
            {
              if ((v124 & 0x80) != 0)
              {
                if (!memcmp(v126, v132, v125))
                {
LABEL_285:
                  if (v103 > *(float *)(v123 + 432))
                    goto LABEL_288;
                  goto LABEL_286;
                }
              }
              else
              {
                if (!(_DWORD)v124)
                  goto LABEL_285;
                v133 = v132;
                v134 = &__s1;
                v135 = v124;
                while (*(unsigned __int8 *)v134 == *v133)
                {
                  v134 = (__int128 *)((char *)v134 + 1);
                  ++v133;
                  if (!--v135)
                    goto LABEL_285;
                }
              }
            }
            if (v127 >= v131)
              v136 = v131;
            else
              v136 = v127;
            v137 = memcmp(v132, v128, v136);
            v138 = v131 < v127;
            if (v137)
              v138 = v137 < 0;
            if (v138)
            {
LABEL_288:
              v6 = v129;
              break;
            }
LABEL_286:
            v6 = v129 + 344;
            v123 = v129;
          }
          while (*(_BYTE *)(v129 + 656));
LABEL_325:
          a2 = v457;
          if (v6 < v457)
            v155 = v452;
          else
            v155 = v457;
          if (v6 < v457 && v104)
          {
            v140 = HIBYTE(v498);
            v141 = *((_QWORD *)&__s1 + 1);
LABEL_331:
            if ((v140 & 0x80u) == 0)
              v156 = v140;
            else
              v156 = v141;
            v157 = (const void *)__s1;
            if ((v140 & 0x80u) == 0)
              v158 = &__s1;
            else
              v158 = (__int128 *)__s1;
            v159 = v452;
            v160 = v457;
            while (2)
            {
              v155 = v159;
              if (!*(_BYTE *)(v160 - 32))
                goto LABEL_361;
              v161 = *(char *)(v160 - 169);
              if (v161 >= 0)
                v162 = *(unsigned __int8 *)(v160 - 169);
              else
                v162 = *(_QWORD *)(v160 - 184);
              if (v161 >= 0)
                v163 = (unsigned __int8 *)(v160 - 192);
              else
                v163 = *(unsigned __int8 **)(v160 - 192);
              if (v156 == v162)
              {
                if ((v140 & 0x80) == 0)
                {
                  if ((_DWORD)v140)
                  {
                    v164 = v163;
                    v165 = &__s1;
                    v166 = v140;
                    while (*(unsigned __int8 *)v165 == *v164)
                    {
                      v165 = (__int128 *)((char *)v165 + 1);
                      ++v164;
                      if (!--v166)
                        goto LABEL_360;
                    }
                    break;
                  }
LABEL_360:
                  if (v103 <= *(float *)(v160 - 256))
                    goto LABEL_362;
LABEL_361:
                  v159 = v155 - 344;
                  v160 = v155;
                  continue;
                }
                if (!memcmp(v157, v163, v141))
                  goto LABEL_360;
              }
              break;
            }
            if (v156 >= v162)
              v167 = v162;
            else
              v167 = v156;
            v168 = memcmp(v163, v158, v167);
            v169 = v162 < v156;
            if (v168)
              v169 = v168 < 0;
            if (!v169)
            {
LABEL_362:
              a2 = v457;
              goto LABEL_418;
            }
            goto LABEL_361;
          }
LABEL_418:
          if (v6 < v155)
          {
            std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v6, v155);
            v170 = v509;
            v171 = HIBYTE(v498);
            v172 = __s1;
            if (v498 >= 0)
              v173 = HIBYTE(v498);
            else
              v173 = *((_QWORD *)&__s1 + 1);
            if (v498 >= 0)
              v174 = &__s1;
            else
              v174 = (__int128 *)__s1;
            v175 = v491;
            while (1)
            {
              do
              {
                v176 = v6;
                v6 += 344;
              }
              while (!v170);
              if (!*(_BYTE *)(v176 + 656))
                break;
              v177 = *(_BYTE *)(v176 + 519);
              if (v177 >= 0)
                v178 = *(unsigned __int8 *)(v176 + 519);
              else
                v178 = *(_QWORD *)(v176 + 504);
              if (v177 >= 0)
                v179 = (unsigned __int8 *)(v176 + 496);
              else
                v179 = *(unsigned __int8 **)(v176 + 496);
              if (v173 != v178)
                goto LABEL_386;
              if ((v171 & 0x80) != 0)
              {
                if (!memcmp((const void *)v172, v179, *((size_t *)&v172 + 1)))
                  goto LABEL_393;
LABEL_386:
                if (v173 >= v178)
                  v183 = v178;
                else
                  v183 = v173;
                v184 = memcmp(v179, v174, v183);
                v185 = v178 < v173;
                if (v184)
                  v185 = v184 < 0;
                if (v185)
                  break;
              }
              else
              {
                if ((_DWORD)v171)
                {
                  v180 = v179;
                  v181 = &__s1;
                  v182 = v171;
                  while (*(unsigned __int8 *)v181 == *v180)
                  {
                    v181 = (__int128 *)((char *)v181 + 1);
                    ++v180;
                    if (!--v182)
                      goto LABEL_393;
                  }
                  goto LABEL_386;
                }
LABEL_393:
                if (v175 > *(float *)(v176 + 432))
                  break;
              }
            }
            a2 = v457;
            while (1)
            {
              do
              {
LABEL_395:
                v186 = v155;
                v155 -= 344;
              }
              while (!*(_BYTE *)(v186 - 32));
              v187 = *(char *)(v186 - 169);
              if (v187 >= 0)
                v188 = *(unsigned __int8 *)(v186 - 169);
              else
                v188 = *(_QWORD *)(v186 - 184);
              if (v187 >= 0)
                v189 = (unsigned __int8 *)(v186 - 192);
              else
                v189 = *(unsigned __int8 **)(v186 - 192);
              if (v173 == v188)
              {
                if ((v171 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v172, v189, *((size_t *)&v172 + 1)))
                  {
LABEL_417:
                    if (v175 <= *(float *)(v186 - 256))
                      goto LABEL_418;
                    goto LABEL_395;
                  }
                }
                else
                {
                  if (!(_DWORD)v171)
                    goto LABEL_417;
                  v190 = v189;
                  v191 = &__s1;
                  v192 = v171;
                  while (*(unsigned __int8 *)v191 == *v190)
                  {
                    v191 = (__int128 *)((char *)v191 + 1);
                    ++v190;
                    if (!--v192)
                      goto LABEL_417;
                  }
                }
              }
              if (v173 >= v188)
                v193 = v188;
              else
                v193 = v173;
              v194 = memcmp(v189, v174, v193);
              v195 = v188 < v173;
              if (v194)
                v195 = v194 < 0;
              if (!v195)
                goto LABEL_418;
            }
          }
          if (v6 - 344 != v459)
          {
            sirinluinternal::MatchingSpan::operator=();
            *(_DWORD *)(v459 + 88) = *(_DWORD *)(v6 - 256);
            std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v459 + 96, v6 - 248);
            v196 = *(void **)(v459 + 320);
            if (v196)
            {
              *(_QWORD *)(v459 + 328) = v196;
              operator delete(v196);
              *(_QWORD *)(v459 + 320) = 0;
              *(_QWORD *)(v459 + 328) = 0;
              *(_QWORD *)(v459 + 336) = 0;
            }
            v197 = (_QWORD *)(v6 - 24);
            *(_OWORD *)(v459 + 320) = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(v459 + 336) = *(_QWORD *)(v6 - 8);
            *v197 = 0;
            v197[1] = 0;
            v197[2] = 0;
          }
          sirinluinternal::MatchingSpan::operator=();
          *(float *)(v6 - 256) = v491;
          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v6 - 248, (uint64_t)&v492);
          v198 = *(void **)(v6 - 24);
          if (v198)
          {
            *(_QWORD *)(v6 - 16) = v198;
            operator delete(v198);
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
          }
          *(_OWORD *)(v6 - 24) = v510;
          *(_QWORD *)(v6 - 8) = v511;
          v510 = 0uLL;
          v511 = 0;
          if (v509)
          {
            v467[0] = (void **)&v507;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v467);
            if (SHIBYTE(v506) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v503) < 0)
              operator delete((void *)v502);
            v467[0] = (void **)&v500;
            std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v467);
            if (SHIBYTE(v498) < 0)
              operator delete((void *)__s1);
            if (SHIBYTE(v496) < 0)
              operator delete((void *)v495);
            if (SHIBYTE(v494) < 0)
              operator delete((void *)v493);
          }
          MEMORY[0x1C3BC54D8](v490);
          a4 = 0;
          continue;
        }
        if (!*(_BYTE *)(v7 + 312))
          goto LABEL_37;
        v12 = (const void **)(v7 - 192);
        v13 = *(_BYTE *)(v7 - 169);
        if (v13 >= 0)
          v14 = *(unsigned __int8 *)(v7 - 169);
        else
          v14 = *(_QWORD *)(v7 - 184);
        v15 = *(char *)(v7 + 175);
        if (v15 >= 0)
          v16 = *(unsigned __int8 *)(v7 + 175);
        else
          v16 = *(_QWORD *)(v7 + 160);
        if (v15 >= 0)
          v17 = (unsigned __int8 *)(v7 + 152);
        else
          v17 = *(unsigned __int8 **)(v7 + 152);
        if (v14 != v16)
          goto LABEL_28;
        if ((*(_BYTE *)(v7 - 169) & 0x80) != 0)
        {
          if (memcmp(*v12, v17, *(_QWORD *)(v7 - 184)))
            goto LABEL_28;
LABEL_226:
          v11.n128_u32[0] = *(_DWORD *)(v7 - 256);
          if (v11.n128_f32[0] > *(float *)(v7 + 88))
            goto LABEL_37;
          goto LABEL_227;
        }
        if (!*(_BYTE *)(v7 - 169))
          goto LABEL_226;
        v18 = v17;
        v19 = (unsigned __int8 *)(v7 - 192);
        v20 = *(unsigned __int8 *)(v7 - 169);
        while (*v19 == *v18)
        {
          ++v19;
          ++v18;
          if (!--v20)
            goto LABEL_226;
        }
LABEL_28:
        if (v13 >= 0)
          v21 = (const void *)(v7 - 192);
        else
          v21 = *v12;
        if (v14 >= v16)
          v22 = v16;
        else
          v22 = v14;
        v23 = memcmp(v17, v21, v22);
        v24 = v16 < v14;
        if (v23)
          v24 = v23 < 0;
        if (!v24)
          goto LABEL_227;
LABEL_37:
        MEMORY[0x1C3BC54B4](v490, v7, v11);
        v25 = *(float *)(v7 + 88);
        v491 = v25;
        LOBYTE(v492) = 0;
        v509 = 0;
        v26 = v7;
        v27 = *(unsigned __int8 *)(v7 + 312);
        if (v27)
        {
          v492 = *(_QWORD *)(v26 + 96);
          v28 = *(_QWORD *)(v26 + 120);
          v493 = *(_OWORD *)(v26 + 104);
          v494 = v28;
          *(_QWORD *)(v26 + 112) = 0;
          *(_QWORD *)(v26 + 120) = 0;
          *(_QWORD *)(v26 + 104) = 0;
          v29 = *(_QWORD *)(v26 + 144);
          v495 = *(_OWORD *)(v26 + 128);
          v496 = v29;
          *(_QWORD *)(v26 + 136) = 0;
          *(_QWORD *)(v26 + 144) = 0;
          *(_QWORD *)(v26 + 128) = 0;
          v30 = *(_OWORD *)(v26 + 152);
          v498 = *(_QWORD *)(v26 + 168);
          __s1 = v30;
          *(_QWORD *)(v26 + 152) = 0;
          *(_QWORD *)(v26 + 160) = 0;
          *(_QWORD *)(v26 + 168) = 0;
          v31 = *(_OWORD *)(v26 + 176);
          *(_OWORD *)((char *)v499 + 12) = *(_OWORD *)(v26 + 188);
          v499[0] = v31;
          v501 = 0;
          v500 = 0uLL;
          v500 = *(_OWORD *)(v26 + 208);
          v501 = *(_QWORD *)(v26 + 224);
          *(_QWORD *)(v26 + 208) = 0;
          *(_QWORD *)(v26 + 216) = 0;
          *(_QWORD *)(v26 + 224) = 0;
          v32 = *(_OWORD *)(v26 + 232);
          v503 = *(_QWORD *)(v26 + 248);
          v502 = v32;
          *(_QWORD *)(v26 + 232) = 0;
          *(_QWORD *)(v26 + 240) = 0;
          *(_QWORD *)(v26 + 248) = 0;
          v504 = *(_DWORD *)(v26 + 256);
          v33 = *(_OWORD *)(v26 + 264);
          v506 = *(_QWORD *)(v26 + 280);
          __p = v33;
          *(_QWORD *)(v26 + 264) = 0;
          *(_QWORD *)(v26 + 272) = 0;
          *(_QWORD *)(v26 + 280) = 0;
          v507 = 0uLL;
          v508 = 0;
          v507 = *(_OWORD *)(v26 + 288);
          v508 = *(_QWORD *)(v26 + 304);
          *(_QWORD *)(v26 + 288) = 0;
          *(_QWORD *)(v26 + 296) = 0;
          *(_QWORD *)(v26 + 304) = 0;
          v509 = 1;
        }
        v510 = *(_OWORD *)(v26 + 320);
        v511 = *(_QWORD *)(v26 + 336);
        *(_QWORD *)(v26 + 320) = 0;
        *(_QWORD *)(v26 + 328) = 0;
        *(_QWORD *)(v26 + 336) = 0;
        v34 = v26 + 344;
        if (!*(_BYTE *)(v26 + 656))
          goto LABEL_98;
        if (v498 >= 0)
          v35 = HIBYTE(v498);
        else
          v35 = *((_QWORD *)&__s1 + 1);
        if (v498 >= 0)
          v36 = &__s1;
        else
          v36 = (__int128 *)__s1;
        while (1)
        {
          v37 = v34;
          if (!v27)
            goto LABEL_69;
          v38 = (const void **)(v26 + 496);
          v39 = *(unsigned __int8 *)(v26 + 519);
          if ((v39 & 0x80u) == 0)
            v40 = *(unsigned __int8 *)(v26 + 519);
          else
            v40 = *(_QWORD *)(v26 + 504);
          if (v40 != v35)
            goto LABEL_58;
          if ((v39 & 0x80) != 0)
          {
            if (memcmp(*v38, v36, *(_QWORD *)(v26 + 504)))
              goto LABEL_58;
            goto LABEL_68;
          }
          if (*(_BYTE *)(v26 + 519))
            break;
LABEL_68:
          if (*(float *)(v26 + 432) <= v25)
            goto LABEL_71;
LABEL_69:
          v34 = v37 + 344;
          v26 += 344;
          v46 = v37;
          if (!*(_BYTE *)(v37 + 656))
            goto LABEL_72;
        }
        v41 = 0;
        while (*(unsigned __int8 *)(v26 + v41 + 496) == *((unsigned __int8 *)v36 + v41))
        {
          if (v39 == ++v41)
            goto LABEL_68;
        }
LABEL_58:
        if ((v39 & 0x80u) == 0)
          v42 = (const void *)(v26 + 496);
        else
          v42 = *v38;
        if (v40 >= v35)
          v43 = v35;
        else
          v43 = v40;
        v44 = memcmp(v36, v42, v43);
        v45 = v35 < v40;
        if (v44)
          v45 = v44 < 0;
        if (v45)
          goto LABEL_69;
LABEL_71:
        v46 = v26;
        v34 = v37;
LABEL_72:
        v47 = a2;
        if (v46 != v459)
        {
          while (1)
          {
            do
            {
LABEL_73:
              v48 = v47;
              v47 -= 344;
            }
            while (!*(_BYTE *)(v48 - 32));
            if (!v27)
              goto LABEL_138;
            v49 = v34;
            v50 = (const void **)(v48 - 192);
            v51 = *(unsigned __int8 *)(v48 - 169);
            if ((v51 & 0x80u) == 0)
              v52 = *(unsigned __int8 *)(v48 - 169);
            else
              v52 = *(_QWORD *)(v48 - 184);
            if (v52 == v35)
            {
              if ((v51 & 0x80) != 0)
              {
                if (!memcmp(*v50, v36, *(_QWORD *)(v48 - 184)))
                {
LABEL_96:
                  v34 = v49;
                  if (*(float *)(v48 - 256) > v25)
                    goto LABEL_138;
                  goto LABEL_73;
                }
              }
              else
              {
                if (!*(_BYTE *)(v48 - 169))
                  goto LABEL_96;
                v53 = 0;
                while (*(unsigned __int8 *)(v48 + v53 - 192) == *((unsigned __int8 *)v36 + v53))
                {
                  if (v51 == ++v53)
                    goto LABEL_96;
                }
              }
            }
            if ((v51 & 0x80u) == 0)
              v54 = (const void *)(v48 - 192);
            else
              v54 = *v50;
            if (v52 >= v35)
              v55 = v35;
            else
              v55 = v52;
            v56 = memcmp(v36, v54, v55);
            v57 = v35 < v52;
            if (v56)
              v57 = v56 < 0;
            v34 = v49;
            if (v57)
              goto LABEL_138;
          }
        }
LABEL_98:
        if (v34 < a2)
        {
          if (v498 >= 0)
            v58 = HIBYTE(v498);
          else
            v58 = *((_QWORD *)&__s1 + 1);
          if (v498 >= 0)
            v59 = &__s1;
          else
            v59 = (__int128 *)__s1;
          while (1)
          {
            while (1)
            {
              v47 = a2 - 344;
              if (*(_BYTE *)(a2 - 32))
                break;
              a2 -= 344;
              if (v34 >= v47)
                goto LABEL_138;
            }
            if (!v27)
              goto LABEL_138;
            v60 = a2 - 344;
            v61 = v34;
            v62 = (const void **)(a2 - 192);
            v63 = *(unsigned __int8 *)(a2 - 169);
            if ((v63 & 0x80u) == 0)
              v64 = *(unsigned __int8 *)(a2 - 169);
            else
              v64 = *(_QWORD *)(a2 - 184);
            if (v64 != v58)
              goto LABEL_120;
            if ((v63 & 0x80) != 0)
            {
              if (memcmp(*v62, v59, *(_QWORD *)(a2 - 184)))
                goto LABEL_120;
            }
            else if (*(_BYTE *)(a2 - 169))
            {
              v65 = 0;
              while (*(unsigned __int8 *)(a2 + v65 - 192) == *((unsigned __int8 *)v59 + v65))
              {
                if (v63 == ++v65)
                  goto LABEL_131;
              }
LABEL_120:
              if ((v63 & 0x80u) == 0)
                v66 = (const void *)(a2 - 192);
              else
                v66 = *v62;
              if (v64 >= v58)
                v67 = v58;
              else
                v67 = v64;
              v68 = memcmp(v59, v66, v67);
              v69 = v58 >= v64;
              if (v68)
                v69 = v68 >= 0;
              v34 = v61;
              v70 = !v69 || v61 >= v60;
              goto LABEL_134;
            }
LABEL_131:
            v34 = v61;
            v70 = *(float *)(a2 - 256) > v25 || v61 >= v60;
LABEL_134:
            a2 -= 344;
            if (v70)
            {
              v47 = v60;
              goto LABEL_138;
            }
          }
        }
        v47 = a2;
LABEL_138:
        v6 = v34;
        v455 = v47;
        v456 = v34;
        if (v34 >= v47)
          goto LABEL_205;
        v71 = v47;
        v6 = v34;
        while (2)
        {
          std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v6, v71);
          v72 = v6 + 344;
          v73 = v509;
          v74 = HIBYTE(v498);
          v75 = v491;
          v461 = __s1;
          if (*(_BYTE *)(v6 + 656))
          {
            if (v498 >= 0)
              v76 = HIBYTE(v498);
            else
              v76 = *((_QWORD *)&__s1 + 1);
            if (v498 >= 0)
              v77 = &__s1;
            else
              v77 = (__int128 *)__s1;
            v78 = v6;
            while (1)
            {
              if (v73)
              {
                v79 = (const void **)(v78 + 496);
                v80 = *(unsigned __int8 *)(v78 + 519);
                if ((v80 & 0x80u) == 0)
                  v81 = *(unsigned __int8 *)(v78 + 519);
                else
                  v81 = *(_QWORD *)(v78 + 504);
                if (v81 == v76)
                {
                  if ((v80 & 0x80) != 0)
                  {
                    if (!memcmp(*v79, v77, *(_QWORD *)(v78 + 504)))
                    {
LABEL_170:
                      if (*(float *)(v78 + 432) <= v75)
                        break;
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    if (!*(_BYTE *)(v78 + 519))
                      goto LABEL_170;
                    v82 = 0;
                    while (*(unsigned __int8 *)(v78 + v82 + 496) == *((unsigned __int8 *)v77 + v82))
                    {
                      if (v80 == ++v82)
                        goto LABEL_170;
                    }
                  }
                }
                if ((v80 & 0x80u) == 0)
                  v83 = (const void *)(v78 + 496);
                else
                  v83 = *v79;
                if (v81 >= v76)
                  v84 = v76;
                else
                  v84 = v81;
                v85 = memcmp(v77, v83, v84);
                v86 = v76 < v81;
                if (v85)
                  v86 = v85 < 0;
                if (!v86)
                  break;
              }
LABEL_171:
              v6 = v72 + 344;
              v87 = *(unsigned __int8 *)(v72 + 656);
              v78 += 344;
              v72 += 344;
              if (!v87)
                goto LABEL_174;
            }
          }
          v6 = v72;
LABEL_174:
          if ((v74 & 0x80u) == 0)
            v88 = v74;
          else
            v88 = *((_QWORD *)&v461 + 1);
          if ((v74 & 0x80u) == 0)
            v89 = &__s1;
          else
            v89 = (__int128 *)v461;
          do
          {
            do
            {
LABEL_180:
              v90 = v71;
              v71 -= 344;
            }
            while (!*(_BYTE *)(v90 - 32));
            if (!v73)
              break;
            v91 = (const void **)(v90 - 192);
            v92 = *(unsigned __int8 *)(v90 - 169);
            if ((v92 & 0x80u) == 0)
              v93 = *(unsigned __int8 *)(v90 - 169);
            else
              v93 = *(_QWORD *)(v90 - 184);
            if (v93 == v88)
            {
              if ((v92 & 0x80) != 0)
              {
                if (!memcmp(*v91, v89, *(_QWORD *)(v90 - 184)))
                {
LABEL_203:
                  if (*(float *)(v90 - 256) > v75)
                    break;
                  goto LABEL_180;
                }
              }
              else
              {
                if (!*(_BYTE *)(v90 - 169))
                  goto LABEL_203;
                v94 = 0;
                while (*(unsigned __int8 *)(v90 + v94 - 192) == *((unsigned __int8 *)v89 + v94))
                {
                  if (v92 == ++v94)
                    goto LABEL_203;
                }
              }
            }
            if ((v92 & 0x80u) == 0)
              v95 = (const void *)(v90 - 192);
            else
              v95 = *v91;
            if (v93 >= v88)
              v96 = v88;
            else
              v96 = v93;
            v97 = memcmp(v89, v95, v96);
            v98 = v88 < v93;
            if (v97)
              v98 = v97 < 0;
          }
          while (!v98);
          if (v6 < v71)
            continue;
          break;
        }
LABEL_205:
        a1 = v459;
        if (v6 - 344 != v459)
        {
          sirinluinternal::MatchingSpan::operator=();
          *(_DWORD *)(v459 + 88) = *(_DWORD *)(v6 - 256);
          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v459 + 96, v6 - 248);
          v99 = *(void **)(v459 + 320);
          if (v99)
          {
            *(_QWORD *)(v459 + 328) = v99;
            operator delete(v99);
            *(_QWORD *)(v459 + 320) = 0;
            *(_QWORD *)(v459 + 328) = 0;
            *(_QWORD *)(v459 + 336) = 0;
          }
          v100 = (_QWORD *)(v6 - 24);
          *(_OWORD *)(v459 + 320) = *(_OWORD *)(v6 - 24);
          *(_QWORD *)(v459 + 336) = *(_QWORD *)(v6 - 8);
          *v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
        }
        sirinluinternal::MatchingSpan::operator=();
        *(float *)(v6 - 256) = v491;
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v6 - 248, (uint64_t)&v492);
        v101 = *(void **)(v6 - 24);
        if (v101)
        {
          *(_QWORD *)(v6 - 16) = v101;
          operator delete(v101);
          *(_QWORD *)(v6 - 24) = 0;
          *(_QWORD *)(v6 - 16) = 0;
          *(_QWORD *)(v6 - 8) = 0;
        }
        *(_OWORD *)(v6 - 24) = v510;
        *(_QWORD *)(v6 - 8) = v511;
        v510 = 0uLL;
        v511 = 0;
        a2 = v457;
        if (v509)
        {
          v467[0] = (void **)&v507;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v467);
          if (SHIBYTE(v506) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v503) < 0)
            operator delete((void *)v502);
          v467[0] = (void **)&v500;
          std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v467);
          if (SHIBYTE(v498) < 0)
            operator delete((void *)__s1);
          if (SHIBYTE(v496) < 0)
            operator delete((void *)v495);
          if (SHIBYTE(v494) < 0)
            operator delete((void *)v493);
        }
        MEMORY[0x1C3BC54D8](v490);
        if (v456 < v455)
        {
LABEL_225:
          std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v459, v6 - 344, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v102 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v459, v6 - 344);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v6, v457))
        {
          if (v102)
            continue;
          goto LABEL_225;
        }
        a2 = v6 - 344;
        if (!v102)
          goto LABEL_1;
        return;
    }
  }
}

  v118 = a2 - 224;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v7) >> 5);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(float *)(a2 - 8) < *(float *)(a1 + 216))
          std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, v118);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, v118);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, v118);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, a1 + 672, v118);
        return;
      default:
        if (v8 > 5375)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v65 = (unint64_t)(v9 - 2) >> 1;
              v66 = v65;
              do
              {
                v67 = v66;
                if (v65 >= v66)
                {
                  v68 = (2 * v66) | 1;
                  v69 = a1 + 224 * v68;
                  if (2 * v67 + 2 < v9 && *(float *)(a1 + 224 * v68 + 216) < *(float *)(v69 + 440))
                  {
                    v69 += 224;
                    v68 = 2 * v67 + 2;
                  }
                  v70 = *(float *)(a1 + 224 * v67 + 216);
                  if (*(float *)(v69 + 216) >= v70)
                  {
                    v71 = a1 + 224 * v67;
                    v140 = *(void ***)v71;
                    v72 = *(_OWORD *)(v71 + 8);
                    v142 = *(_QWORD *)(v71 + 24);
                    v141 = v72;
                    *(_QWORD *)(v71 + 16) = 0;
                    *(_QWORD *)(v71 + 24) = 0;
                    *(_QWORD *)(v71 + 8) = 0;
                    v73 = *(_OWORD *)(v71 + 32);
                    v144 = *(_QWORD *)(v71 + 48);
                    v143 = v73;
                    *(_QWORD *)(v71 + 40) = 0;
                    *(_QWORD *)(v71 + 48) = 0;
                    *(_QWORD *)(v71 + 32) = 0;
                    v74 = *(_OWORD *)(v71 + 56);
                    v146 = *(_QWORD *)(v71 + 72);
                    v145 = v74;
                    *(_QWORD *)(v71 + 64) = 0;
                    *(_QWORD *)(v71 + 72) = 0;
                    *(_QWORD *)(v71 + 56) = 0;
                    v75 = *(_OWORD *)(v71 + 80);
                    *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(v71 + 92);
                    v147[0] = v75;
                    v148 = *(_OWORD *)(v71 + 112);
                    v149 = *(_QWORD *)(v71 + 128);
                    *(_QWORD *)(v71 + 112) = 0;
                    *(_QWORD *)(v71 + 120) = 0;
                    *(_QWORD *)(v71 + 128) = 0;
                    v76 = *(_OWORD *)(v71 + 136);
                    v151 = *(_QWORD *)(v71 + 152);
                    v150 = v76;
                    *(_QWORD *)(v71 + 144) = 0;
                    *(_QWORD *)(v71 + 152) = 0;
                    *(_QWORD *)(v71 + 136) = 0;
                    v152 = *(_DWORD *)(v71 + 160);
                    v77 = *(_OWORD *)(v71 + 168);
                    v154 = *(_QWORD *)(v71 + 184);
                    __p = v77;
                    *(_QWORD *)(v71 + 176) = 0;
                    *(_QWORD *)(v71 + 184) = 0;
                    *(_QWORD *)(v71 + 168) = 0;
                    v155 = *(_OWORD *)(v71 + 192);
                    v156 = *(_QWORD *)(v71 + 208);
                    *(_QWORD *)(v71 + 192) = 0;
                    *(_QWORD *)(v71 + 200) = 0;
                    *(_QWORD *)(v71 + 208) = 0;
                    v157 = v70;
                    do
                    {
                      v78 = v69;
                      *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(v71, v69) + 216) = *(_DWORD *)(v69 + 216);
                      if (v65 < v68)
                        break;
                      v79 = (2 * v68) | 1;
                      v69 = a1 + 224 * v79;
                      if (2 * v68 + 2 < v9 && *(float *)(a1 + 224 * v79 + 216) < *(float *)(v69 + 440))
                      {
                        v69 += 224;
                        v79 = 2 * v68 + 2;
                      }
                      v71 = v78;
                      v68 = v79;
                    }
                    while (*(float *)(v69 + 216) >= v157);
                    marrs::mrr::mr::MRREntity::operator=(v78, (uint64_t)&v140);
                    *(float *)(v78 + 216) = v157;
                    v121 = (void **)&v155;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v121);
                    if (SHIBYTE(v154) < 0)
                      operator delete((void *)__p);
                    if (SHIBYTE(v151) < 0)
                      operator delete((void *)v150);
                    v121 = (void **)&v148;
                    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v121);
                    if (SHIBYTE(v146) < 0)
                      operator delete((void *)v145);
                    if (SHIBYTE(v144) < 0)
                      operator delete((void *)v143);
                    if (SHIBYTE(v142) < 0)
                      operator delete((void *)v141);
                  }
                }
                v66 = v67 - 1;
              }
              while (v67);
              v80 = (((unint64_t)v8 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              v119 = (__int128 *)(a1 + 8);
              v117 = (__int128 *)(a1 + 32);
              v81 = (__int128 *)(a1 + 56);
              v82 = (__int128 *)(a1 + 136);
              v83 = (__int128 *)(a1 + 168);
              do
              {
                if (v80 >= 2)
                {
                  v84 = 0;
                  v121 = *(void ***)a1;
                  v85 = *(_QWORD *)(a1 + 24);
                  v122 = *v119;
                  v123 = v85;
                  *(_QWORD *)(a1 + 16) = 0;
                  *(_QWORD *)(a1 + 24) = 0;
                  *(_QWORD *)v119 = 0;
                  v86 = *v117;
                  v125 = *(_QWORD *)(a1 + 48);
                  v124 = v86;
                  *(_QWORD *)(a1 + 40) = 0;
                  *(_QWORD *)(a1 + 48) = 0;
                  *(_QWORD *)v117 = 0;
                  v87 = *v81;
                  v127 = *(_QWORD *)(a1 + 72);
                  v126 = v87;
                  *(_QWORD *)v81 = 0;
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_QWORD *)(a1 + 72) = 0;
                  v88 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)((char *)v128 + 12) = *(_OWORD *)(a1 + 92);
                  v128[0] = v88;
                  v129 = *(_OWORD *)(a1 + 112);
                  v130 = *(_QWORD *)(a1 + 128);
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_QWORD *)(a1 + 128) = 0;
                  v89 = *v82;
                  v132 = *(_QWORD *)(a1 + 152);
                  v131 = v89;
                  *(_QWORD *)v82 = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  v133 = *(_DWORD *)(a1 + 160);
                  v90 = *v83;
                  v135 = *(_QWORD *)(a1 + 184);
                  v134 = v90;
                  *(_QWORD *)v83 = 0;
                  *(_QWORD *)(a1 + 176) = 0;
                  *(_QWORD *)(a1 + 184) = 0;
                  v136 = *(_OWORD *)(a1 + 192);
                  v137 = *(_QWORD *)(a1 + 208);
                  *(_QWORD *)(a1 + 192) = 0;
                  *(_QWORD *)(a1 + 200) = 0;
                  *(_QWORD *)(a1 + 208) = 0;
                  v91 = a1;
                  v138 = *(_DWORD *)(a1 + 216);
                  do
                  {
                    v92 = v91;
                    v93 = v84 + 1;
                    v91 += 224 * (v84 + 1);
                    v94 = 2 * v84;
                    v84 = (2 * v84) | 1;
                    v95 = v94 + 2;
                    if (v95 < v80 && *(float *)(v92 + 224 * v93 + 216) < *(float *)(v91 + 440))
                    {
                      v91 += 224;
                      v84 = v95;
                    }
                    *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(v92, v91) + 216) = *(_DWORD *)(v91 + 216);
                  }
                  while (v84 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                  if (v91 == a2 - 224)
                  {
                    marrs::mrr::mr::MRREntity::operator=(v91, (uint64_t)&v121);
                    *(_DWORD *)(v91 + 216) = v138;
                  }
                  else
                  {
                    marrs::mrr::mr::MRREntity::operator=(v91, a2 - 224);
                    *(_DWORD *)(v91 + 216) = *(_DWORD *)(a2 - 8);
                    marrs::mrr::mr::MRREntity::operator=(a2 - 224, (uint64_t)&v121);
                    *(_DWORD *)(a2 - 8) = v138;
                    v96 = v91 - a1 + 224;
                    if (v96 >= 225)
                    {
                      v97 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * (v96 >> 5) - 2) >> 1;
                      v98 = *(float *)(v91 + 216);
                      if (*(float *)(a1 + 224 * v97 + 216) < v98)
                      {
                        v140 = *(void ***)v91;
                        v99 = *(_OWORD *)(v91 + 8);
                        v142 = *(_QWORD *)(v91 + 24);
                        v141 = v99;
                        *(_QWORD *)(v91 + 16) = 0;
                        *(_QWORD *)(v91 + 24) = 0;
                        *(_QWORD *)(v91 + 8) = 0;
                        v100 = *(_OWORD *)(v91 + 32);
                        v144 = *(_QWORD *)(v91 + 48);
                        v143 = v100;
                        *(_QWORD *)(v91 + 40) = 0;
                        *(_QWORD *)(v91 + 48) = 0;
                        *(_QWORD *)(v91 + 32) = 0;
                        v101 = *(_OWORD *)(v91 + 56);
                        v146 = *(_QWORD *)(v91 + 72);
                        v145 = v101;
                        *(_QWORD *)(v91 + 64) = 0;
                        *(_QWORD *)(v91 + 72) = 0;
                        *(_QWORD *)(v91 + 56) = 0;
                        v102 = *(_OWORD *)(v91 + 80);
                        *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(v91 + 92);
                        v147[0] = v102;
                        v148 = *(_OWORD *)(v91 + 112);
                        v149 = *(_QWORD *)(v91 + 128);
                        *(_QWORD *)(v91 + 112) = 0;
                        *(_QWORD *)(v91 + 120) = 0;
                        *(_QWORD *)(v91 + 128) = 0;
                        v103 = *(_OWORD *)(v91 + 136);
                        v151 = *(_QWORD *)(v91 + 152);
                        v150 = v103;
                        *(_QWORD *)(v91 + 144) = 0;
                        *(_QWORD *)(v91 + 152) = 0;
                        *(_QWORD *)(v91 + 136) = 0;
                        v152 = *(_DWORD *)(v91 + 160);
                        v104 = *(_OWORD *)(v91 + 168);
                        v154 = *(_QWORD *)(v91 + 184);
                        __p = v104;
                        *(_QWORD *)(v91 + 176) = 0;
                        *(_QWORD *)(v91 + 184) = 0;
                        *(_QWORD *)(v91 + 168) = 0;
                        v155 = *(_OWORD *)(v91 + 192);
                        v156 = *(_QWORD *)(v91 + 208);
                        *(_QWORD *)(v91 + 192) = 0;
                        *(_QWORD *)(v91 + 200) = 0;
                        *(_QWORD *)(v91 + 208) = 0;
                        v157 = v98;
                        do
                        {
                          v105 = v91;
                          v91 = a1 + 224 * v97;
                          *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(v105, v91) + 216) = *(_DWORD *)(v91 + 216);
                          if (!v97)
                            break;
                          v97 = (v97 - 1) >> 1;
                        }
                        while (*(float *)(a1 + 224 * v97 + 216) < v98);
                        marrs::mrr::mr::MRREntity::operator=(v91, (uint64_t)&v140);
                        *(float *)(v91 + 216) = v157;
                        v139 = (void **)&v155;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v139);
                        if (SHIBYTE(v154) < 0)
                          operator delete((void *)__p);
                        if (SHIBYTE(v151) < 0)
                          operator delete((void *)v150);
                        v139 = (void **)&v148;
                        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v139);
                        if (SHIBYTE(v146) < 0)
                          operator delete((void *)v145);
                        if (SHIBYTE(v144) < 0)
                          operator delete((void *)v143);
                        if (SHIBYTE(v142) < 0)
                          operator delete((void *)v141);
                      }
                    }
                  }
                  v140 = (void **)&v136;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v140);
                  if (SHIBYTE(v135) < 0)
                    operator delete((void *)v134);
                  if (SHIBYTE(v132) < 0)
                    operator delete((void *)v131);
                  v140 = (void **)&v129;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v140);
                  if (SHIBYTE(v127) < 0)
                    operator delete((void *)v126);
                  if (SHIBYTE(v125) < 0)
                    operator delete((void *)v124);
                  if (SHIBYTE(v123) < 0)
                    operator delete((void *)v122);
                }
                a2 -= 224;
              }
              while ((unint64_t)v80-- > 2);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = a1 + 224 * ((unint64_t)v9 >> 1);
          if ((unint64_t)v8 <= 0x7000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(v11, a1, v118);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, v11, v118);
            v12 = 224 * v10;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1 + 224, v12 + a1 - 224, a2 - 448);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1 + 448, a1 + 224 + v12, a2 - 672);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(v12 + a1 - 224, v11, a1 + 224 + v12);
            std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, v11);
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v13 = *(float *)(a1 + 216);
          }
          else
          {
            v13 = *(float *)(a1 + 216);
            if (*(float *)(a1 - 8) >= v13)
            {
              v33 = *(void ***)a1;
              v34 = *(_QWORD *)(a1 + 24);
              v141 = *(_OWORD *)(a1 + 8);
              v142 = v34;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 8) = 0;
              v35 = *(_OWORD *)(a1 + 32);
              v144 = *(_QWORD *)(a1 + 48);
              v143 = v35;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 48) = 0;
              *(_QWORD *)(a1 + 32) = 0;
              v36 = *(_OWORD *)(a1 + 56);
              v146 = *(_QWORD *)(a1 + 72);
              v145 = v36;
              *(_QWORD *)(a1 + 56) = 0;
              *(_QWORD *)(a1 + 64) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              v37 = *(_OWORD *)(a1 + 80);
              *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(a1 + 92);
              v147[0] = v37;
              v148 = *(_OWORD *)(a1 + 112);
              v38 = *(_QWORD *)(a1 + 128);
              v140 = v33;
              v149 = v38;
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 128) = 0;
              v39 = *(_OWORD *)(a1 + 136);
              v151 = *(_QWORD *)(a1 + 152);
              v150 = v39;
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              v152 = *(_DWORD *)(a1 + 160);
              v40 = *(_OWORD *)(a1 + 168);
              v154 = *(_QWORD *)(a1 + 184);
              __p = v40;
              *(_QWORD *)(a1 + 168) = 0;
              *(_QWORD *)(a1 + 176) = 0;
              *(_QWORD *)(a1 + 184) = 0;
              v155 = *(_OWORD *)(a1 + 192);
              v156 = *(_QWORD *)(a1 + 208);
              *(_QWORD *)(a1 + 192) = 0;
              *(_QWORD *)(a1 + 200) = 0;
              *(_QWORD *)(a1 + 208) = 0;
              v157 = v13;
              if (v13 >= *(float *)(a2 - 8))
              {
                v43 = a1 + 224;
                do
                {
                  v7 = v43;
                  if (v43 >= a2)
                    break;
                  v44 = *(float *)(v43 + 216);
                  v43 += 224;
                }
                while (v13 >= v44);
              }
              else
              {
                v41 = a1;
                do
                {
                  v7 = v41 + 224;
                  v42 = *(float *)(v41 + 440);
                  v41 += 224;
                }
                while (v13 >= v42);
              }
              v45 = a2;
              if (v7 < a2)
              {
                v46 = a2;
                do
                {
                  v45 = v46 - 224;
                  v47 = *(float *)(v46 - 8);
                  v46 -= 224;
                }
                while (v13 < v47);
              }
              while (v7 < v45)
              {
                std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(v7, v45);
                do
                {
                  v48 = *(float *)(v7 + 440);
                  v7 += 224;
                }
                while (v13 >= v48);
                do
                {
                  v49 = *(float *)(v45 - 8);
                  v45 -= 224;
                }
                while (v13 < v49);
              }
              if (v7 - 224 != a1)
              {
                marrs::mrr::mr::MRREntity::operator=(a1, v7 - 224);
                *(_DWORD *)(a1 + 216) = *(_DWORD *)(v7 - 8);
              }
              marrs::mrr::mr::MRREntity::operator=(v7 - 224, (uint64_t)&v140);
              *(float *)(v7 - 8) = v157;
              v121 = (void **)&v155;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v121);
              if (SHIBYTE(v154) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v151) < 0)
                operator delete((void *)v150);
              v121 = (void **)&v148;
              std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v121);
              if (SHIBYTE(v146) < 0)
                operator delete((void *)v145);
              if (SHIBYTE(v144) < 0)
                operator delete((void *)v143);
              if (SHIBYTE(v142) < 0)
                operator delete((void *)v141);
              goto LABEL_43;
            }
          }
          v14 = *(void ***)a1;
          v15 = *(_QWORD *)(a1 + 24);
          v141 = *(_OWORD *)(a1 + 8);
          v142 = v15;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v16 = *(_OWORD *)(a1 + 32);
          v144 = *(_QWORD *)(a1 + 48);
          v143 = v16;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v17 = *(_OWORD *)(a1 + 56);
          v146 = *(_QWORD *)(a1 + 72);
          v145 = v17;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          v18 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(a1 + 92);
          v147[0] = v18;
          v148 = *(_OWORD *)(a1 + 112);
          v19 = *(_QWORD *)(a1 + 128);
          v140 = v14;
          v149 = v19;
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          v20 = *(_OWORD *)(a1 + 136);
          v151 = *(_QWORD *)(a1 + 152);
          v150 = v20;
          *(_QWORD *)(a1 + 136) = 0;
          *(_QWORD *)(a1 + 144) = 0;
          *(_QWORD *)(a1 + 152) = 0;
          v152 = *(_DWORD *)(a1 + 160);
          v21 = *(_OWORD *)(a1 + 168);
          v154 = *(_QWORD *)(a1 + 184);
          __p = v21;
          *(_QWORD *)(a1 + 168) = 0;
          *(_QWORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 184) = 0;
          v155 = *(_OWORD *)(a1 + 192);
          v156 = *(_QWORD *)(a1 + 208);
          *(_QWORD *)(a1 + 192) = 0;
          *(_QWORD *)(a1 + 200) = 0;
          *(_QWORD *)(a1 + 208) = 0;
          v22 = a1;
          v157 = v13;
          do
          {
            v23 = v22;
            v22 += 224;
          }
          while (*(float *)(v23 + 440) < v13);
          v24 = a2;
          if (v23 == a1)
          {
            v27 = a2;
            while (v22 < v27)
            {
              v25 = v27 - 224;
              v28 = *(float *)(v27 - 8);
              v27 -= 224;
              if (v28 < v13)
                goto LABEL_21;
            }
            v25 = v27;
          }
          else
          {
            do
            {
              v25 = v24 - 224;
              v26 = *(float *)(v24 - 8);
              v24 -= 224;
            }
            while (v26 >= v13);
          }
LABEL_21:
          v7 = v22;
          if (v22 < v25)
          {
            v29 = v25;
            do
            {
              std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(v7, v29);
              do
              {
                v30 = *(float *)(v7 + 440);
                v7 += 224;
              }
              while (v30 < v13);
              do
              {
                v31 = *(float *)(v29 - 8);
                v29 -= 224;
              }
              while (v31 >= v13);
            }
            while (v7 < v29);
          }
          if (v7 - 224 != a1)
          {
            marrs::mrr::mr::MRREntity::operator=(a1, v7 - 224);
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(v7 - 8);
          }
          marrs::mrr::mr::MRREntity::operator=(v7 - 224, (uint64_t)&v140);
          *(float *)(v7 - 8) = v157;
          v121 = (void **)&v155;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v121);
          if (SHIBYTE(v154) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v151) < 0)
            operator delete((void *)v150);
          v121 = (void **)&v148;
          std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v121);
          if (SHIBYTE(v146) < 0)
            operator delete((void *)v145);
          if (SHIBYTE(v144) < 0)
            operator delete((void *)v143);
          if (SHIBYTE(v142) < 0)
            operator delete((void *)v141);
          if (v22 < v25)
            goto LABEL_42;
          v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, v7 - 224);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(v7, a2))
          {
            if (v32)
              continue;
LABEL_42:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *,false>(a1, v7 - 224, a3, a4 & 1);
LABEL_43:
            a4 = 0;
            continue;
          }
          a2 = v7 - 224;
          if (v32)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (a1 != a2)
          {
            v50 = (void ***)(a1 + 224);
            if (a1 + 224 != a2)
            {
              v51 = 0;
              v52 = a1;
              do
              {
                v53 = v50;
                v54 = *(float *)(v52 + 440);
                if (v54 < *(float *)(v52 + 216))
                {
                  v55 = *v50;
                  v141 = *(_OWORD *)(v52 + 232);
                  v142 = *(_QWORD *)(v52 + 248);
                  *(_QWORD *)(v52 + 232) = 0;
                  *(_QWORD *)(v52 + 240) = 0;
                  v143 = *(_OWORD *)(v52 + 256);
                  v144 = *(_QWORD *)(v52 + 272);
                  *(_QWORD *)(v52 + 248) = 0;
                  *(_QWORD *)(v52 + 256) = 0;
                  *(_QWORD *)(v52 + 264) = 0;
                  *(_QWORD *)(v52 + 272) = 0;
                  v56 = *(_OWORD *)(v52 + 280);
                  v146 = *(_QWORD *)(v52 + 296);
                  v145 = v56;
                  *(_QWORD *)(v52 + 280) = 0;
                  *(_QWORD *)(v52 + 288) = 0;
                  *(_QWORD *)(v52 + 296) = 0;
                  v57 = *(_OWORD *)(v52 + 304);
                  *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(v52 + 316);
                  v147[0] = v57;
                  v148 = *(_OWORD *)(v52 + 336);
                  v58 = *(_QWORD *)(v52 + 352);
                  v140 = v55;
                  v149 = v58;
                  *(_QWORD *)(v52 + 336) = 0;
                  *(_QWORD *)(v52 + 344) = 0;
                  *(_QWORD *)(v52 + 352) = 0;
                  v59 = *(_OWORD *)(v52 + 360);
                  v151 = *(_QWORD *)(v52 + 376);
                  v150 = v59;
                  *(_QWORD *)(v52 + 360) = 0;
                  *(_QWORD *)(v52 + 368) = 0;
                  *(_QWORD *)(v52 + 376) = 0;
                  v152 = *(_DWORD *)(v52 + 384);
                  v60 = *(_OWORD *)(v52 + 392);
                  v154 = *(_QWORD *)(v52 + 408);
                  __p = v60;
                  *(_QWORD *)(v52 + 392) = 0;
                  *(_QWORD *)(v52 + 400) = 0;
                  *(_QWORD *)(v52 + 408) = 0;
                  v155 = *(_OWORD *)(v52 + 416);
                  v156 = *(_QWORD *)(v52 + 432);
                  *(_QWORD *)(v52 + 416) = 0;
                  *(_QWORD *)(v52 + 424) = 0;
                  *(_QWORD *)(v52 + 432) = 0;
                  v61 = v51;
                  v157 = v54;
                  while (1)
                  {
                    v62 = a1 + v61;
                    marrs::mrr::mr::MRREntity::operator=(a1 + v61 + 224, a1 + v61);
                    *(_DWORD *)(a1 + v61 + 440) = *(_DWORD *)(a1 + v61 + 216);
                    if (!v61)
                      break;
                    v61 -= 224;
                    if (v157 >= *(float *)(v62 - 8))
                    {
                      v63 = a1 + v61 + 224;
                      goto LABEL_89;
                    }
                  }
                  v63 = a1;
LABEL_89:
                  v64 = marrs::mrr::mr::MRREntity::operator=(v63, (uint64_t)&v140);
                  *(float *)(v64 + 216) = v157;
                  v121 = (void **)&v155;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v121);
                  if (SHIBYTE(v154) < 0)
                    operator delete((void *)__p);
                  if (SHIBYTE(v151) < 0)
                    operator delete((void *)v150);
                  v121 = (void **)&v148;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v121);
                  if (SHIBYTE(v146) < 0)
                    operator delete((void *)v145);
                  if (SHIBYTE(v144) < 0)
                    operator delete((void *)v143);
                  if (SHIBYTE(v142) < 0)
                    operator delete((void *)v141);
                }
                v50 = v53 + 28;
                v51 += 224;
                v52 = (uint64_t)v53;
              }
              while (v53 + 28 != (void ***)a2);
            }
          }
        }
        else if (a1 != a2)
        {
          v107 = (void ***)(a1 + 224);
          if (a1 + 224 != a2)
          {
            do
            {
              v108 = v107;
              v109 = *(float *)(a1 + 440);
              if (v109 < *(float *)(a1 + 216))
              {
                v110 = *v107;
                v141 = *(_OWORD *)(a1 + 232);
                v142 = *(_QWORD *)(a1 + 248);
                *(_QWORD *)(a1 + 232) = 0;
                *(_QWORD *)(a1 + 240) = 0;
                v143 = *(_OWORD *)(a1 + 256);
                v144 = *(_QWORD *)(a1 + 272);
                *(_QWORD *)(a1 + 248) = 0;
                *(_QWORD *)(a1 + 256) = 0;
                *(_QWORD *)(a1 + 264) = 0;
                *(_QWORD *)(a1 + 272) = 0;
                v111 = *(_OWORD *)(a1 + 280);
                v146 = *(_QWORD *)(a1 + 296);
                v145 = v111;
                *(_QWORD *)(a1 + 280) = 0;
                *(_QWORD *)(a1 + 288) = 0;
                *(_QWORD *)(a1 + 296) = 0;
                v112 = *(_OWORD *)(a1 + 304);
                *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(a1 + 316);
                v147[0] = v112;
                v148 = *(_OWORD *)(a1 + 336);
                v113 = *(_QWORD *)(a1 + 352);
                v140 = v110;
                v149 = v113;
                *(_QWORD *)(a1 + 336) = 0;
                *(_QWORD *)(a1 + 344) = 0;
                *(_QWORD *)(a1 + 352) = 0;
                v114 = *(_OWORD *)(a1 + 360);
                v151 = *(_QWORD *)(a1 + 376);
                v150 = v114;
                *(_QWORD *)(a1 + 360) = 0;
                *(_QWORD *)(a1 + 368) = 0;
                *(_QWORD *)(a1 + 376) = 0;
                v152 = *(_DWORD *)(a1 + 384);
                v115 = *(_OWORD *)(a1 + 392);
                v154 = *(_QWORD *)(a1 + 408);
                __p = v115;
                *(_QWORD *)(a1 + 392) = 0;
                *(_QWORD *)(a1 + 400) = 0;
                *(_QWORD *)(a1 + 408) = 0;
                v155 = *(_OWORD *)(a1 + 416);
                v156 = *(_QWORD *)(a1 + 432);
                *(_QWORD *)(a1 + 416) = 0;
                *(_QWORD *)(a1 + 424) = 0;
                *(_QWORD *)(a1 + 432) = 0;
                v157 = v109;
                do
                {
                  v116 = a1;
                  marrs::mrr::mr::MRREntity::operator=(a1 + 224, a1);
                  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a1 + 216);
                  a1 -= 224;
                }
                while (v157 < *(float *)(v116 - 8));
                marrs::mrr::mr::MRREntity::operator=(v116, (uint64_t)&v140);
                *(float *)(v116 + 216) = v157;
                v121 = (void **)&v155;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v121);
                if (SHIBYTE(v154) < 0)
                  operator delete((void *)__p);
                if (SHIBYTE(v151) < 0)
                  operator delete((void *)v150);
                v121 = (void **)&v148;
                std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v121);
                if (SHIBYTE(v146) < 0)
                  operator delete((void *)v145);
                if (SHIBYTE(v144) < 0)
                  operator delete((void *)v143);
                if (SHIBYTE(v142) < 0)
                  operator delete((void *)v141);
              }
              v107 = v108 + 28;
              a1 = (uint64_t)v108;
            }
            while (v108 + 28 != (void ***)a2);
          }
        }
        return;
    }
  }
}

  v177 = (float32x2_t *)(a2 - 10);
  v178 = (float32x2_t *)(a2 - 5);
  v176 = (float32x2_t *)(a2 - 15);
  v9 = (uint64_t *)a1;
  v192 = (uint64_t)a2;
  while (2)
  {
    a1 = (uint64_t)v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (a2 - v9);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v75 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
        v76 = vcvtq_f64_f32(vsub_f32(v75, vadd_f32((float32x2_t)*(a2 - 2), vmul_f32((float32x2_t)*(a2 - 1), (float32x2_t)0x3F0000003F000000))));
        *(float *)v76.f64 = vaddvq_f64(vmulq_f64(v76, v76));
        v77 = vcvtq_f64_f32(vsub_f32(v75, vadd_f32(*(float32x2_t *)(a1 + 24), vmul_f32(*(float32x2_t *)(a1 + 32), (float32x2_t)0x3F0000003F000000))));
        *(float *)v77.f64 = vaddvq_f64(vmulq_f64(v77, v77));
        if (*(float *)v76.f64 < *(float *)v77.f64)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, (uint64_t)v178);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, v178, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), v178, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,0>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), (float32x2_t *)(a1 + 120), v178, a3);
        return;
      default:
        if (v10 <= 959)
        {
          v78 = (uint64_t *)(a1 + 40);
          v80 = (uint64_t *)a1 == a2 || v78 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v80)
            {
              v81 = 0;
              v82 = a1;
              do
              {
                v83 = v78;
                v84 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                v85 = vcvtq_f64_f32(vsub_f32(v84, vadd_f32(*(float32x2_t *)(v82 + 64), vmul_f32(*(float32x2_t *)(v82 + 72), (float32x2_t)0x3F0000003F000000))));
                *(float *)v85.f64 = vaddvq_f64(vmulq_f64(v85, v85));
                v86 = vcvtq_f64_f32(vsub_f32(v84, vadd_f32(*(float32x2_t *)(v82 + 24), vmul_f32(*(float32x2_t *)(v82 + 32), (float32x2_t)0x3F0000003F000000))));
                *(float *)v86.f64 = vaddvq_f64(vmulq_f64(v86, v86));
                if (*(float *)v85.f64 < *(float *)v86.f64)
                {
                  v87 = *v78;
                  *(_QWORD *)v199 = *(_QWORD *)(v82 + 48);
                  *(_QWORD *)&v199[7] = *(_QWORD *)(v82 + 55);
                  v88 = *(_BYTE *)(v82 + 63);
                  v78[1] = 0;
                  v78[2] = 0;
                  *v78 = 0;
                  v185 = *(float32x2_t *)(v82 + 64);
                  v189 = *(float32x2_t *)(v82 + 72);
                  v89 = vadd_f32(v185, vmul_f32(v189, (float32x2_t)0x3F0000003F000000));
                  v90 = v81;
                  while (1)
                  {
                    v91 = a1 + v90;
                    v92 = (void **)(a1 + v90 + 40);
                    if (*(char *)(a1 + v90 + 63) < 0)
                      operator delete(*v92);
                    *(_OWORD *)v92 = *(_OWORD *)v91;
                    *(_QWORD *)(a1 + v90 + 56) = *(_QWORD *)(v91 + 16);
                    *(_BYTE *)(v91 + 23) = 0;
                    *(_BYTE *)v91 = 0;
                    *(_OWORD *)(v91 + 64) = *(_OWORD *)(v91 + 24);
                    if (!v90)
                      break;
                    v93 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                    v94 = vcvtq_f64_f32(vsub_f32(v93, v89));
                    *(float *)v94.f64 = vaddvq_f64(vmulq_f64(v94, v94));
                    v95 = a1 + v90;
                    v96 = vcvtq_f64_f32(vsub_f32(v93, vadd_f32(*(float32x2_t *)(a1 + v90 - 16), vmul_f32(*(float32x2_t *)(a1 + v90 - 8), (float32x2_t)0x3F0000003F000000))));
                    *(float *)v96.f64 = vaddvq_f64(vmulq_f64(v96, v96));
                    v90 -= 40;
                    if (*(float *)v96.f64 <= *(float *)v94.f64)
                    {
                      v97 = a1 + v90 + 40;
                      v98 = (_DWORD *)(v95 + 24);
                      goto LABEL_84;
                    }
                  }
                  v98 = (_DWORD *)(a1 + 24);
                  v97 = a1;
LABEL_84:
                  if (*(char *)(v97 + 23) < 0)
                    operator delete(*(void **)v97);
                  *(_QWORD *)v97 = v87;
                  *(_QWORD *)(v97 + 8) = *(_QWORD *)v199;
                  *(_QWORD *)(v97 + 15) = *(_QWORD *)&v199[7];
                  *(_BYTE *)(v97 + 23) = v88;
                  *v98 = v185.i32[0];
                  *(int8x8_t *)(v97 + 28) = vext_s8((int8x8_t)v185, (int8x8_t)v189, 4uLL);
                  *(_DWORD *)(v97 + 36) = v189.i32[1];
                  a2 = (uint64_t *)v192;
                }
                v78 = v83 + 5;
                v81 += 40;
                v82 = (uint64_t)v83;
              }
              while (v83 + 5 != a2);
            }
          }
          else if (!v80)
          {
            v159 = a1 - 16;
            do
            {
              v160 = v78;
              v161 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
              v162 = vcvtq_f64_f32(vsub_f32(v161, vadd_f32(*(float32x2_t *)(a1 + 64), vmul_f32(*(float32x2_t *)(a1 + 72), (float32x2_t)0x3F0000003F000000))));
              *(float *)v162.f64 = vaddvq_f64(vmulq_f64(v162, v162));
              v163 = vcvtq_f64_f32(vsub_f32(v161, vadd_f32(*(float32x2_t *)(a1 + 24), vmul_f32(*(float32x2_t *)(a1 + 32), (float32x2_t)0x3F0000003F000000))));
              *(float *)v163.f64 = vaddvq_f64(vmulq_f64(v163, v163));
              if (*(float *)v162.f64 < *(float *)v163.f64)
              {
                v164 = *v78;
                *(_QWORD *)v202 = *(_QWORD *)(a1 + 48);
                *(_QWORD *)&v202[7] = *(_QWORD *)(a1 + 55);
                v165 = *(_BYTE *)(a1 + 63);
                v78[1] = 0;
                v78[2] = 0;
                *v78 = 0;
                v187 = *(float32x2_t *)(a1 + 72);
                v191 = *(float32x2_t *)(a1 + 64);
                v166 = vadd_f32(v191, vmul_f32(v187, (float32x2_t)0x3F0000003F000000));
                v167 = v159;
                do
                {
                  v168 = (void **)(v167 + 56);
                  if (*(char *)(v167 + 79) < 0)
                    operator delete(*v168);
                  *(_OWORD *)v168 = *(_OWORD *)(v167 + 16);
                  *(_QWORD *)(v167 + 72) = *(_QWORD *)(v167 + 32);
                  *(_BYTE *)(v167 + 16) = 0;
                  v169 = v167 + 16;
                  *(_BYTE *)(v167 + 39) = 0;
                  *(_OWORD *)(v167 + 80) = *(_OWORD *)(v167 + 40);
                  v170 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                  v171 = vcvtq_f64_f32(vsub_f32(v170, v166));
                  *(float *)v171.f64 = vaddvq_f64(vmulq_f64(v171, v171));
                  v172 = *(float32x2_t *)v167;
                  v173 = *(float32x2_t *)(v167 + 8);
                  v167 -= 40;
                  v174 = vcvtq_f64_f32(vsub_f32(v170, vadd_f32(v172, vmul_f32(v173, (float32x2_t)0x3F0000003F000000))));
                  *(float *)v174.f64 = vaddvq_f64(vmulq_f64(v174, v174));
                }
                while (*(float *)v174.f64 > *(float *)v171.f64);
                if (*(char *)(v169 + 23) < 0)
                  operator delete(*(void **)v169);
                *(_QWORD *)(v167 + 56) = v164;
                *(_QWORD *)(v169 + 15) = *(_QWORD *)&v202[7];
                *(_QWORD *)(v169 + 8) = *(_QWORD *)v202;
                *(_BYTE *)(v167 + 79) = v165;
                *(float32x2_t *)&v175 = v191;
                *((float32x2_t *)&v175 + 1) = v187;
                *(_OWORD *)(v167 + 80) = v175;
                a2 = (uint64_t *)v192;
              }
              v78 = v160 + 5;
              v159 += 40;
              a1 = (uint64_t)v160;
            }
            while (v160 + 5 != a2);
          }
          return;
        }
        if (!a4)
        {
          if ((uint64_t *)a1 != a2)
          {
            v99 = (unint64_t)(v11 - 2) >> 1;
            v100 = v99;
            do
            {
              v101 = v100;
              if (v99 >= v100)
              {
                v102 = (2 * v100) | 1;
                v103 = (float32x2_t *)(a1 + 40 * v102);
                v104 = *a3;
                v105 = **a3;
                if (2 * v101 + 2 >= v11)
                {
                  v106 = vadd_f32(v105, vmul_f32(v104[1], (float32x2_t)0x3F0000003F000000));
                }
                else
                {
                  v106 = vadd_f32(v105, vmul_f32(v104[1], (float32x2_t)0x3F0000003F000000));
                  v107 = vcvtq_f64_f32(vsub_f32(v106, vadd_f32(*(float32x2_t *)(a1 + 40 * v102 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v102 + 32), (float32x2_t)0x3F0000003F000000))));
                  *(float *)v107.f64 = vaddvq_f64(vmulq_f64(v107, v107));
                  v108 = vcvtq_f64_f32(vsub_f32(v106, vadd_f32(v103[8], vmul_f32(v103[9], (float32x2_t)0x3F0000003F000000))));
                  *(float *)v108.f64 = vaddvq_f64(vmulq_f64(v108, v108));
                  if (*(float *)v107.f64 < *(float *)v108.f64)
                  {
                    v103 += 5;
                    v102 = 2 * v101 + 2;
                  }
                }
                v109 = vcvtq_f64_f32(vsub_f32(v106, vadd_f32(v103[3], vmul_f32(v103[4], (float32x2_t)0x3F0000003F000000))));
                v110 = (float32x2_t *)(a1 + 40 * v101);
                v112 = v110[4];
                v111 = v110 + 4;
                *(float *)v109.f64 = vaddvq_f64(vmulq_f64(v109, v109));
                v113 = vcvtq_f64_f32(vsub_f32(v106, vadd_f32(v111[-1], vmul_f32(v112, (float32x2_t)0x3F0000003F000000))));
                *(float *)v113.f64 = vaddvq_f64(vmulq_f64(v113, v113));
                if (*(float *)v109.f64 >= *(float *)v113.f64)
                {
                  v114 = (float32x2_t *)(a1 + 40 * v101);
                  v190 = *v114;
                  *(float32x2_t *)&v200[7] = *(float32x2_t *)((char *)v114 + 15);
                  *(float32x2_t *)v200 = v114[1];
                  v186 = v114[2].i8[7];
                  *v114 = 0;
                  v114[1] = 0;
                  v114[2] = 0;
                  v179 = *v111;
                  v182 = v111[-1];
                  v115 = vadd_f32(v182, vmul_f32(*v111, (float32x2_t)0x3F0000003F000000));
                  do
                  {
                    v116 = v114;
                    v114 = v103;
                    if (v116[2].i8[7] < 0)
                      operator delete(*(void **)v116);
                    v117 = *(_OWORD *)v114->f32;
                    v116[2] = v114[2];
                    *(_OWORD *)v116->f32 = v117;
                    v114[2].i8[7] = 0;
                    v114->i8[0] = 0;
                    *(_OWORD *)v116[3].f32 = *(_OWORD *)v114[3].f32;
                    if (v99 < v102)
                      break;
                    v118 = (2 * v102) | 1;
                    v103 = (float32x2_t *)(a1 + 40 * v118);
                    v119 = *a3;
                    v120 = **a3;
                    if (2 * v102 + 2 >= v11)
                    {
                      v121 = vadd_f32(v120, vmul_f32(v119[1], (float32x2_t)0x3F0000003F000000));
                    }
                    else
                    {
                      v121 = vadd_f32(v120, vmul_f32(v119[1], (float32x2_t)0x3F0000003F000000));
                      v122 = vcvtq_f64_f32(vsub_f32(v121, vadd_f32(*(float32x2_t *)(a1 + 40 * v118 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v118 + 32), (float32x2_t)0x3F0000003F000000))));
                      *(float *)v122.f64 = vaddvq_f64(vmulq_f64(v122, v122));
                      v123 = vcvtq_f64_f32(vsub_f32(v121, vadd_f32(v103[8], vmul_f32(v103[9], (float32x2_t)0x3F0000003F000000))));
                      *(float *)v123.f64 = vaddvq_f64(vmulq_f64(v123, v123));
                      if (*(float *)v122.f64 < *(float *)v123.f64)
                      {
                        v103 += 5;
                        v118 = 2 * v102 + 2;
                      }
                    }
                    v124 = vcvtq_f64_f32(vsub_f32(v121, vadd_f32(v103[3], vmul_f32(v103[4], (float32x2_t)0x3F0000003F000000))));
                    *(float *)v124.f64 = vaddvq_f64(vmulq_f64(v124, v124));
                    v125 = vcvtq_f64_f32(vsub_f32(v121, v115));
                    *(float *)v125.f64 = vaddvq_f64(vmulq_f64(v125, v125));
                    v102 = v118;
                  }
                  while (*(float *)v124.f64 >= *(float *)v125.f64);
                  if (v114[2].i8[7] < 0)
                    operator delete(*(void **)v114);
                  *v114 = v190;
                  v114[1] = *(float32x2_t *)v200;
                  *(float32x2_t *)((char *)v114 + 15) = *(float32x2_t *)&v200[7];
                  v114[2].i8[7] = v186;
                  *(float32x2_t *)&v126 = v182;
                  *((float32x2_t *)&v126 + 1) = v179;
                  *(_OWORD *)v114[3].f32 = v126;
                }
              }
              v100 = v101 - 1;
            }
            while (v101);
            v127 = v10 / 0x28uLL;
            v128 = (void **)v192;
            do
            {
              v129 = v128;
              v130 = 0;
              v131 = *(_QWORD *)a1;
              *(_QWORD *)v195 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v195[7] = *(_QWORD *)(a1 + 15);
              v193 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              v132 = a1;
              v201 = *(_OWORD *)(a1 + 24);
              do
              {
                v133 = v130 + 1;
                v134 = v132 + 40 * (v130 + 1);
                v135 = 2 * v130;
                v130 = (2 * v130) | 1;
                v136 = v135 + 2;
                if (v136 < v127)
                {
                  v137 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                  v138 = vcvtq_f64_f32(vsub_f32(v137, vadd_f32(*(float32x2_t *)(v132 + 40 * v133 + 24), vmul_f32(*(float32x2_t *)(v132 + 40 * v133 + 32), (float32x2_t)0x3F0000003F000000))));
                  *(float *)v138.f64 = vaddvq_f64(vmulq_f64(v138, v138));
                  v139 = vcvtq_f64_f32(vsub_f32(v137, vadd_f32(*(float32x2_t *)(v134 + 64), vmul_f32(*(float32x2_t *)(v134 + 72), (float32x2_t)0x3F0000003F000000))));
                  *(float *)v139.f64 = vaddvq_f64(vmulq_f64(v139, v139));
                  if (*(float *)v138.f64 < *(float *)v139.f64)
                  {
                    v134 += 40;
                    v130 = v136;
                  }
                }
                if (*(char *)(v132 + 23) < 0)
                  operator delete(*(void **)v132);
                v140 = *(_OWORD *)v134;
                *(_QWORD *)(v132 + 16) = *(_QWORD *)(v134 + 16);
                *(_OWORD *)v132 = v140;
                *(_BYTE *)(v134 + 23) = 0;
                *(_BYTE *)v134 = 0;
                *(_OWORD *)(v132 + 24) = *(_OWORD *)(v134 + 24);
                v132 = v134;
              }
              while (v130 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
              v141 = (_OWORD *)(v134 + 24);
              v128 = v129 - 5;
              v142 = *(char *)(v134 + 23);
              if ((void **)v134 == v129 - 5)
              {
                if (v142 < 0)
                  operator delete(*(void **)v134);
                *(_QWORD *)v134 = v131;
                *(_QWORD *)(v134 + 8) = *(_QWORD *)v195;
                *(_QWORD *)(v134 + 15) = *(_QWORD *)&v195[7];
                *(_BYTE *)(v134 + 23) = v193;
                *v141 = v201;
              }
              else
              {
                if (v142 < 0)
                  operator delete(*(void **)v134);
                v143 = *(_OWORD *)v128;
                *(_QWORD *)(v134 + 16) = *(v129 - 3);
                *(_OWORD *)v134 = v143;
                *((_BYTE *)v129 - 17) = 0;
                *((_BYTE *)v129 - 40) = 0;
                *v141 = *((_OWORD *)v129 - 1);
                if (*((char *)v129 - 17) < 0)
                  operator delete(*v128);
                *(v129 - 5) = (void *)v131;
                *(void **)((char *)v129 - 25) = *(void **)&v195[7];
                *(v129 - 4) = *(void **)v195;
                *((_BYTE *)v129 - 17) = v193;
                *((_OWORD *)v129 - 1) = v201;
                v144 = v134 + 40 - a1;
                if (v144 >= 41)
                {
                  v145 = (v144 / 0x28uLL - 2) >> 1;
                  v146 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                  v147 = vcvtq_f64_f32(vsub_f32(v146, vadd_f32(*(float32x2_t *)(a1 + 40 * v145 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v145 + 32), (float32x2_t)0x3F0000003F000000))));
                  *(float *)v147.f64 = vaddvq_f64(vmulq_f64(v147, v147));
                  v148 = vcvtq_f64_f32(vsub_f32(v146, vadd_f32(*(float32x2_t *)(v134 + 24), vmul_f32(*(float32x2_t *)(v134 + 32), (float32x2_t)0x3F0000003F000000))));
                  *(float *)v148.f64 = vaddvq_f64(vmulq_f64(v148, v148));
                  if (*(float *)v147.f64 < *(float *)v148.f64)
                  {
                    v194 = v129 - 5;
                    v149 = *(void **)v134;
                    *(_QWORD *)v204 = *(_QWORD *)(v134 + 8);
                    *(_QWORD *)&v204[7] = *(_QWORD *)(v134 + 15);
                    v150 = *(_BYTE *)(v134 + 23);
                    *(_QWORD *)(v134 + 8) = 0;
                    *(_QWORD *)(v134 + 16) = 0;
                    *(_QWORD *)v134 = 0;
                    v180 = *(float32x2_t *)(v134 + 32);
                    v183 = *(float32x2_t *)(v134 + 24);
                    v151 = vadd_f32(v183, vmul_f32(v180, (float32x2_t)0x3F0000003F000000));
                    do
                    {
                      if (*(char *)(v134 + 23) < 0)
                        operator delete(*(void **)v134);
                      v152 = a1 + 40 * v145;
                      v153 = *(_OWORD *)v152;
                      *(_QWORD *)(v134 + 16) = *(_QWORD *)(v152 + 16);
                      *(_OWORD *)v134 = v153;
                      *(_BYTE *)(v152 + 23) = 0;
                      *(_BYTE *)v152 = 0;
                      *(_OWORD *)(v134 + 24) = *(_OWORD *)(v152 + 24);
                      if (!v145)
                        break;
                      v145 = (v145 - 1) >> 1;
                      v154 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                      v155 = vcvtq_f64_f32(vsub_f32(v154, vadd_f32(*(float32x2_t *)(a1 + 40 * v145 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v145 + 32), (float32x2_t)0x3F0000003F000000))));
                      *(float *)v155.f64 = vaddvq_f64(vmulq_f64(v155, v155));
                      v156 = vcvtq_f64_f32(vsub_f32(v154, v151));
                      *(float *)v156.f64 = vaddvq_f64(vmulq_f64(v156, v156));
                      v134 = v152;
                    }
                    while (*(float *)v155.f64 < *(float *)v156.f64);
                    if (*(char *)(v152 + 23) < 0)
                      operator delete(*(void **)v152);
                    *(_QWORD *)v152 = v149;
                    *(_QWORD *)(v152 + 15) = *(_QWORD *)&v204[7];
                    *(_QWORD *)(v152 + 8) = *(_QWORD *)v204;
                    *(_BYTE *)(v152 + 23) = v150;
                    *(float32x2_t *)&v157 = v183;
                    *((float32x2_t *)&v157 + 1) = v180;
                    *(_OWORD *)(v152 + 24) = v157;
                    v128 = v194;
                  }
                }
              }
            }
            while (v127-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = a1 + 40 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)v13, a1, v178, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, v13, v178, a3);
          v14 = 5 * v12;
          v15 = a1 + 8 * v14;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)(a1 + 40), v15 - 40, v177, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)(a1 + 80), a1 + 40 + 8 * v14, v176, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)(v15 - 40), v13, (float32x2_t *)(a1 + 40 + 8 * v14), a3);
          v16 = *(_QWORD *)a1;
          *(_QWORD *)&v203 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)((char *)&v203 + 7) = *(_QWORD *)(a1 + 15);
          v17 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v196 = *(_OWORD *)(a1 + 24);
          v18 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = v18;
          *(_BYTE *)(v13 + 23) = 0;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v15 + 24);
          *(_QWORD *)v13 = v16;
          *(_QWORD *)(v13 + 8) = v203;
          *(_QWORD *)(v13 + 15) = *(_QWORD *)((char *)&v203 + 7);
          *(_BYTE *)(v13 + 23) = v17;
          *(_OWORD *)(v15 + 24) = v196;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v20 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
          v21 = vcvtq_f64_f32(vsub_f32(v20, vadd_f32(*(float32x2_t *)(a1 - 16), vmul_f32(*(float32x2_t *)(a1 - 8), (float32x2_t)0x3F0000003F000000))));
          *(float *)v21.f64 = vaddvq_f64(vmulq_f64(v21, v21));
          v184 = *(float32x2_t *)(a1 + 32);
          v188 = *(float32x2_t *)(a1 + 24);
          v19 = vadd_f32(v188, vmul_f32(v184, (float32x2_t)0x3F0000003F000000));
          v22 = vcvtq_f64_f32(vsub_f32(v20, v19));
          *(float *)v22.f64 = vaddvq_f64(vmulq_f64(v22, v22));
          if (*(float *)v21.f64 < *(float *)v22.f64)
            goto LABEL_11;
          v50 = *(_QWORD *)a1;
          *(_QWORD *)v198 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v198[7] = *(_QWORD *)(a1 + 15);
          v51 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v52 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
          v53 = vcvtq_f64_f32(vsub_f32(v52, v19));
          v54 = vaddvq_f64(vmulq_f64(v53, v53));
          v55 = vcvtq_f64_f32(vsub_f32(v52, vadd_f32((float32x2_t)*(a2 - 2), vmul_f32((float32x2_t)*(a2 - 1), (float32x2_t)0x3F0000003F000000))));
          *(float *)v55.f64 = vaddvq_f64(vmulq_f64(v55, v55));
          if (*(float *)v55.f64 <= v54)
          {
            v58 = (float32x2_t *)(a1 + 40);
            do
            {
              v9 = (uint64_t *)v58;
              if (v58 >= (float32x2_t *)a2)
                break;
              v59 = vcvtq_f64_f32(vsub_f32(v52, vadd_f32(v58[3], vmul_f32(v58[4], (float32x2_t)0x3F0000003F000000))));
              *(float *)v59.f64 = vaddvq_f64(vmulq_f64(v59, v59));
              v58 += 5;
            }
            while (*(float *)v59.f64 <= v54);
          }
          else
          {
            v56 = (float32x2_t *)a1;
            do
            {
              v9 = (uint64_t *)&v56[5];
              v57 = vcvtq_f64_f32(vsub_f32(v52, vadd_f32(v56[8], vmul_f32(v56[9], (float32x2_t)0x3F0000003F000000))));
              *(float *)v57.f64 = vaddvq_f64(vmulq_f64(v57, v57));
              v56 += 5;
            }
            while (*(float *)v57.f64 <= v54);
          }
          v60 = (unint64_t)a2;
          if (v9 < a2)
          {
            v61 = a2;
            do
            {
              v60 = (unint64_t)(v61 - 5);
              v62 = vcvtq_f64_f32(vsub_f32(v52, vadd_f32((float32x2_t)*(v61 - 2), vmul_f32((float32x2_t)*(v61 - 1), (float32x2_t)0x3F0000003F000000))));
              *(float *)v62.f64 = vaddvq_f64(vmulq_f64(v62, v62));
              v61 -= 5;
            }
            while (*(float *)v62.f64 > v54);
          }
          while ((unint64_t)v9 < v60)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>(v9, v60);
            v63 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
            v64 = vcvtq_f64_f32(vsub_f32(v63, v19));
            v65 = vaddvq_f64(vmulq_f64(v64, v64));
            do
            {
              v66 = (float32x2_t)v9[8];
              v67 = (float32x2_t)v9[9];
              v9 += 5;
              v68 = vcvtq_f64_f32(vsub_f32(v63, vadd_f32(v66, vmul_f32(v67, (float32x2_t)0x3F0000003F000000))));
              *(float *)v68.f64 = vaddvq_f64(vmulq_f64(v68, v68));
            }
            while (*(float *)v68.f64 <= v65);
            do
            {
              v69 = *(float32x2_t *)(v60 - 16);
              v70 = *(float32x2_t *)(v60 - 8);
              v60 -= 40;
              v71 = vcvtq_f64_f32(vsub_f32(v63, vadd_f32(v69, vmul_f32(v70, (float32x2_t)0x3F0000003F000000))));
              *(float *)v71.f64 = vaddvq_f64(vmulq_f64(v71, v71));
            }
            while (*(float *)v71.f64 > v65);
          }
          v72 = (void **)(v9 - 5);
          if (v9 - 5 != (uint64_t *)a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v73 = *(_OWORD *)v72;
            *(_QWORD *)(a1 + 16) = *(v9 - 3);
            *(_OWORD *)a1 = v73;
            *((_BYTE *)v9 - 17) = 0;
            *((_BYTE *)v9 - 40) = 0;
            *(_OWORD *)(a1 + 24) = *((_OWORD *)v9 - 1);
          }
          if (*((char *)v9 - 17) < 0)
            operator delete(*v72);
          a5 = 0;
          *(v9 - 5) = v50;
          *(uint64_t *)((char *)v9 - 25) = *(_QWORD *)&v198[7];
          *(v9 - 4) = *(_QWORD *)v198;
          *((_BYTE *)v9 - 17) = v51;
          *(float32x2_t *)&v74 = v188;
          *((float32x2_t *)&v74 + 1) = v184;
          *((_OWORD *)v9 - 1) = v74;
          continue;
        }
        v184 = *(float32x2_t *)(a1 + 32);
        v188 = *(float32x2_t *)(a1 + 24);
        v19 = vadd_f32(v188, vmul_f32(v184, (float32x2_t)0x3F0000003F000000));
LABEL_11:
        v23 = *(_QWORD *)a1;
        *(_QWORD *)v197 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v197[7] = *(_QWORD *)(a1 + 15);
        v24 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v25 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
        v26 = vcvtq_f64_f32(vsub_f32(v25, v19));
        v27 = vaddvq_f64(vmulq_f64(v26, v26));
        v28 = (float32x2_t *)a1;
        do
        {
          v29 = v28;
          v28 += 5;
          v30 = vcvtq_f64_f32(vsub_f32(v25, vadd_f32(v29[8], vmul_f32(v29[9], (float32x2_t)0x3F0000003F000000))));
          *(float *)v30.f64 = vaddvq_f64(vmulq_f64(v30, v30));
        }
        while (*(float *)v30.f64 < v27);
        v31 = v192;
        if (v29 == (float32x2_t *)a1)
        {
          v34 = v192;
          while ((unint64_t)v28 < v34)
          {
            v32 = v34 - 40;
            v35 = vcvtq_f64_f32(vsub_f32(v25, vadd_f32(*(float32x2_t *)(v34 - 16), vmul_f32(*(float32x2_t *)(v34 - 8), (float32x2_t)0x3F0000003F000000))));
            *(float *)v35.f64 = vaddvq_f64(vmulq_f64(v35, v35));
            v34 -= 40;
            if (*(float *)v35.f64 < v27)
              goto LABEL_21;
          }
          v32 = v34;
        }
        else
        {
          do
          {
            v32 = v31 - 40;
            v33 = vcvtq_f64_f32(vsub_f32(v25, vadd_f32(*(float32x2_t *)(v31 - 16), vmul_f32(*(float32x2_t *)(v31 - 8), (float32x2_t)0x3F0000003F000000))));
            *(float *)v33.f64 = vaddvq_f64(vmulq_f64(v33, v33));
            v31 -= 40;
          }
          while (*(float *)v33.f64 >= v27);
        }
LABEL_21:
        v9 = (uint64_t *)v28;
        if ((unint64_t)v28 < v32)
        {
          v36 = v32;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>(v9, v36);
            v37 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
            v38 = vcvtq_f64_f32(vsub_f32(v37, v19));
            v39 = vaddvq_f64(vmulq_f64(v38, v38));
            do
            {
              v40 = (float32x2_t)v9[8];
              v41 = (float32x2_t)v9[9];
              v9 += 5;
              v42 = vcvtq_f64_f32(vsub_f32(v37, vadd_f32(v40, vmul_f32(v41, (float32x2_t)0x3F0000003F000000))));
              *(float *)v42.f64 = vaddvq_f64(vmulq_f64(v42, v42));
            }
            while (*(float *)v42.f64 < v39);
            do
            {
              v43 = *(float32x2_t *)(v36 - 16);
              v44 = *(float32x2_t *)(v36 - 8);
              v36 -= 40;
              v45 = vcvtq_f64_f32(vsub_f32(v37, vadd_f32(v43, vmul_f32(v44, (float32x2_t)0x3F0000003F000000))));
              *(float *)v45.f64 = vaddvq_f64(vmulq_f64(v45, v45));
            }
            while (*(float *)v45.f64 >= v39);
          }
          while ((unint64_t)v9 < v36);
        }
        v46 = (void **)(v9 - 5);
        if (v9 - 5 != (uint64_t *)a1)
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v47 = *(_OWORD *)v46;
          *(_QWORD *)(a1 + 16) = *(v9 - 3);
          *(_OWORD *)a1 = v47;
          *((_BYTE *)v9 - 17) = 0;
          *((_BYTE *)v9 - 40) = 0;
          *(_OWORD *)(a1 + 24) = *((_OWORD *)v9 - 1);
        }
        if (*((char *)v9 - 17) < 0)
          operator delete(*v46);
        *(v9 - 5) = v23;
        *(uint64_t *)((char *)v9 - 25) = *(_QWORD *)&v197[7];
        *(v9 - 4) = *(_QWORD *)v197;
        *((_BYTE *)v9 - 17) = v24;
        *(float32x2_t *)&v48 = v188;
        *((float32x2_t *)&v48 + 1) = v184;
        *((_OWORD *)v9 - 1) = v48;
        a2 = (uint64_t *)v192;
        if ((unint64_t)v28 < v32)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,false>(a1, v9 - 5, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(a1, (uint64_t)(v9 - 5), a3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((uint64_t)v9, v192, a3))
        {
          if (v49)
            continue;
          goto LABEL_36;
        }
        a2 = v9 - 5;
        if (!v49)
          goto LABEL_1;
        return;
    }
  }
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void **v6;
  size_t v7;
  int v8;
  size_t v9;
  size_t v10;
  int v11;
  size_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  float result;
  const void **v18;
  char v19;
  size_t v20;
  int v21;
  size_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _BYTE *v27;
  const void *v28;
  size_t v29;
  int v30;
  BOOL v31;
  const void **v32;
  char v33;
  size_t v34;
  BOOL v35;
  size_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  const void **v41;
  char v42;
  size_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  const void **v53;
  char v54;
  size_t v55;
  int v56;
  size_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  const void *v62;
  size_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  const void *v67;
  size_t v68;
  int v69;
  BOOL v70;
  const void *v71;
  size_t v72;
  int v73;
  BOOL v74;

  if (!*(_BYTE *)(a2 + 312))
  {
    if (!*(_BYTE *)(a3 + 312))
      return result;
    goto LABEL_20;
  }
  if (!*(_BYTE *)(a1 + 312))
  {
    v27 = (_BYTE *)(a3 + 312);
    if (!*(_BYTE *)(a3 + 312))
      goto LABEL_94;
    v7 = *(unsigned __int8 *)(a2 + 175);
    v9 = *(_QWORD *)(a2 + 160);
    LOBYTE(v8) = *(_BYTE *)(a2 + 175);
    goto LABEL_51;
  }
  v6 = (const void **)(a2 + 152);
  v7 = *(unsigned __int8 *)(a2 + 175);
  v8 = (char)v7;
  v9 = *(_QWORD *)(a2 + 160);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(a2 + 175);
  else
    v10 = *(_QWORD *)(a2 + 160);
  v11 = *(char *)(a1 + 175);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 175);
  else
    v12 = *(_QWORD *)(a1 + 160);
  if (v11 >= 0)
    v13 = (unsigned __int8 *)(a1 + 152);
  else
    v13 = *(unsigned __int8 **)(a1 + 152);
  if (v10 == v12)
  {
    if ((char)v7 < 0)
    {
      if (memcmp(*v6, v13, *(_QWORD *)(a2 + 160)))
        goto LABEL_41;
    }
    else if ((_BYTE)v7)
    {
      v14 = v13;
      v15 = (unsigned __int8 *)(a2 + 152);
      v16 = *(unsigned __int8 *)(a2 + 175);
      while (*v15 == *v14)
      {
        ++v15;
        ++v14;
        if (!--v16)
          goto LABEL_67;
      }
      goto LABEL_41;
    }
LABEL_67:
    result = *(float *)(a2 + 88);
    if (result > *(float *)(a1 + 88))
      goto LABEL_50;
LABEL_68:
    if (!*(_BYTE *)(a3 + 312))
      return result;
    v41 = (const void **)(a3 + 152);
    v42 = *(_BYTE *)(a3 + 175);
    if (v42 >= 0)
      v43 = *(unsigned __int8 *)(a3 + 175);
    else
      v43 = *(_QWORD *)(a3 + 160);
    if (v8 >= 0)
      v44 = (unsigned __int8 *)(a2 + 152);
    else
      v44 = (unsigned __int8 *)*v6;
    if (v43 == v10)
    {
      if ((*(_BYTE *)(a3 + 175) & 0x80) != 0)
      {
        if (memcmp(*v41, v44, *(_QWORD *)(a3 + 160)))
          goto LABEL_126;
      }
      else if (*(_BYTE *)(a3 + 175))
      {
        v45 = v44;
        v46 = (unsigned __int8 *)(a3 + 152);
        v47 = *(unsigned __int8 *)(a3 + 175);
        while (*v46 == *v45)
        {
          ++v46;
          ++v45;
          if (!--v47)
            goto LABEL_136;
        }
        goto LABEL_126;
      }
LABEL_136:
      result = *(float *)(a3 + 88);
      if (result <= *(float *)(a2 + 88))
        return result;
      goto LABEL_20;
    }
LABEL_126:
    if (v42 >= 0)
      v67 = (const void *)(a3 + 152);
    else
      v67 = *v41;
    if (v43 >= v10)
      v68 = v10;
    else
      v68 = v43;
    v69 = memcmp(v44, v67, v68);
    v70 = v10 < v43;
    if (v69)
      v70 = v69 < 0;
    if (!v70)
      return result;
LABEL_20:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
    if (!*(_BYTE *)(a2 + 312))
      return result;
    if (!*(_BYTE *)(a1 + 312))
      goto LABEL_124;
    v18 = (const void **)(a2 + 152);
    v19 = *(_BYTE *)(a2 + 175);
    if (v19 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 175);
    else
      v20 = *(_QWORD *)(a2 + 160);
    v21 = *(char *)(a1 + 175);
    if (v21 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 175);
    else
      v22 = *(_QWORD *)(a1 + 160);
    if (v21 >= 0)
      v23 = (unsigned __int8 *)(a1 + 152);
    else
      v23 = *(unsigned __int8 **)(a1 + 152);
    if (v20 == v22)
    {
      if ((*(_BYTE *)(a2 + 175) & 0x80) != 0)
      {
        if (memcmp(*v18, v23, *(_QWORD *)(a2 + 160)))
          goto LABEL_113;
      }
      else if (*(_BYTE *)(a2 + 175))
      {
        v24 = v23;
        v25 = (unsigned __int8 *)(a2 + 152);
        v26 = *(unsigned __int8 *)(a2 + 175);
        while (*v25 == *v24)
        {
          ++v25;
          ++v24;
          if (!--v26)
            goto LABEL_123;
        }
        goto LABEL_113;
      }
LABEL_123:
      result = *(float *)(a2 + 88);
      if (result <= *(float *)(a1 + 88))
        return result;
      goto LABEL_124;
    }
LABEL_113:
    if (v19 >= 0)
      v62 = (const void *)(a2 + 152);
    else
      v62 = *v18;
    if (v20 >= v22)
      v63 = v22;
    else
      v63 = v20;
    v64 = memcmp(v23, v62, v63);
    v65 = v22 < v20;
    if (v64)
      v65 = v64 < 0;
    if (!v65)
      return result;
LABEL_124:
    v52 = a1;
    v66 = a2;
LABEL_150:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v52, v66);
    return result;
  }
LABEL_41:
  if ((v7 & 0x80u) == 0)
    v28 = (const void *)(a2 + 152);
  else
    v28 = *v6;
  if (v10 >= v12)
    v29 = v12;
  else
    v29 = v10;
  v30 = memcmp(v13, v28, v29);
  v31 = v12 < v10;
  if (v30)
    v31 = v30 < 0;
  if (!v31)
    goto LABEL_68;
LABEL_50:
  v27 = (_BYTE *)(a3 + 312);
  if (!*(_BYTE *)(a3 + 312))
    goto LABEL_94;
LABEL_51:
  v32 = (const void **)(a3 + 152);
  v33 = *(_BYTE *)(a3 + 175);
  if (v33 >= 0)
    v34 = *(unsigned __int8 *)(a3 + 175);
  else
    v34 = *(_QWORD *)(a3 + 160);
  v35 = (v8 & 0x80u) != 0;
  if ((v8 & 0x80u) == 0)
    v36 = v7;
  else
    v36 = v9;
  if (v35)
    v37 = *(unsigned __int8 **)(a2 + 152);
  else
    v37 = (unsigned __int8 *)(a2 + 152);
  if (v34 != v36)
    goto LABEL_83;
  if ((*(_BYTE *)(a3 + 175) & 0x80) != 0)
  {
    if (memcmp(*v32, v37, *(_QWORD *)(a3 + 160)))
      goto LABEL_83;
  }
  else if (*(_BYTE *)(a3 + 175))
  {
    v38 = v37;
    v39 = (unsigned __int8 *)(a3 + 152);
    v40 = *(unsigned __int8 *)(a3 + 175);
    while (*v39 == *v38)
    {
      ++v39;
      ++v38;
      if (!--v40)
        goto LABEL_93;
    }
LABEL_83:
    if (v33 >= 0)
      v48 = (const void *)(a3 + 152);
    else
      v48 = *v32;
    if (v34 >= v36)
      v49 = v36;
    else
      v49 = v34;
    v50 = memcmp(v37, v48, v49);
    v51 = v36 < v34;
    if (v50)
      v51 = v50 < 0;
    if (v51)
      goto LABEL_92;
    goto LABEL_94;
  }
LABEL_93:
  if (*(float *)(a3 + 88) > *(float *)(a2 + 88))
  {
LABEL_92:
    v52 = a1;
LABEL_149:
    v66 = a3;
    goto LABEL_150;
  }
LABEL_94:
  std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
  if (!*v27)
    return result;
  if (!*(_BYTE *)(a2 + 312))
    goto LABEL_148;
  v53 = (const void **)(a3 + 152);
  v54 = *(_BYTE *)(a3 + 175);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(a3 + 175);
  else
    v55 = *(_QWORD *)(a3 + 160);
  v56 = *(char *)(a2 + 175);
  if (v56 >= 0)
    v57 = *(unsigned __int8 *)(a2 + 175);
  else
    v57 = *(_QWORD *)(a2 + 160);
  if (v56 >= 0)
    v58 = (unsigned __int8 *)(a2 + 152);
  else
    v58 = *(unsigned __int8 **)(a2 + 152);
  if (v55 != v57)
  {
LABEL_139:
    if (v54 >= 0)
      v71 = (const void *)(a3 + 152);
    else
      v71 = *v53;
    if (v55 >= v57)
      v72 = v57;
    else
      v72 = v55;
    v73 = memcmp(v58, v71, v72);
    v74 = v57 < v55;
    if (v73)
      v74 = v73 < 0;
    if (v74)
      goto LABEL_148;
    return result;
  }
  if ((*(_BYTE *)(a3 + 175) & 0x80) != 0)
  {
    if (memcmp(*v53, v58, *(_QWORD *)(a3 + 160)))
      goto LABEL_139;
  }
  else if (*(_BYTE *)(a3 + 175))
  {
    v59 = v58;
    v60 = (unsigned __int8 *)(a3 + 152);
    v61 = *(unsigned __int8 *)(a3 + 175);
    while (*v60 == *v59)
    {
      ++v60;
      ++v59;
      if (!--v61)
        goto LABEL_151;
    }
    goto LABEL_139;
  }
LABEL_151:
  result = *(float *)(a3 + 88);
  if (result > *(float *)(a2 + 88))
  {
LABEL_148:
    v52 = a2;
    goto LABEL_149;
  }
  return result;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;
  const void **v9;
  char v10;
  size_t v11;
  int v12;
  size_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  int v20;
  BOOL v21;
  const void **v22;
  char v23;
  size_t v24;
  int v25;
  size_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  const void **v35;
  char v36;
  size_t v37;
  int v38;
  size_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  const void *v44;
  size_t v45;
  int v46;
  BOOL v47;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3);
  if (!*(_BYTE *)(a4 + 312))
    return result;
  if (!*(_BYTE *)(a3 + 312))
  {
LABEL_31:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
    if (!*(_BYTE *)(a3 + 312))
      return result;
    if (!*(_BYTE *)(a2 + 312))
      goto LABEL_61;
    v22 = (const void **)(a3 + 152);
    v23 = *(_BYTE *)(a3 + 175);
    if (v23 >= 0)
      v24 = *(unsigned __int8 *)(a3 + 175);
    else
      v24 = *(_QWORD *)(a3 + 160);
    v25 = *(char *)(a2 + 175);
    if (v25 >= 0)
      v26 = *(unsigned __int8 *)(a2 + 175);
    else
      v26 = *(_QWORD *)(a2 + 160);
    if (v25 >= 0)
      v27 = (unsigned __int8 *)(a2 + 152);
    else
      v27 = *(unsigned __int8 **)(a2 + 152);
    if (v24 != v26)
      goto LABEL_50;
    if ((*(_BYTE *)(a3 + 175) & 0x80) != 0)
    {
      if (memcmp(*v22, v27, *(_QWORD *)(a3 + 160)))
        goto LABEL_50;
    }
    else if (*(_BYTE *)(a3 + 175))
    {
      v28 = v27;
      v29 = (unsigned __int8 *)(a3 + 152);
      v30 = *(unsigned __int8 *)(a3 + 175);
      while (*v29 == *v28)
      {
        ++v29;
        ++v28;
        if (!--v30)
          goto LABEL_60;
      }
LABEL_50:
      if (v23 >= 0)
        v31 = (const void *)(a3 + 152);
      else
        v31 = *v22;
      if (v24 >= v26)
        v32 = v26;
      else
        v32 = v24;
      v33 = memcmp(v27, v31, v32);
      v34 = v26 < v24;
      if (v33)
        v34 = v33 < 0;
      if (!v34)
        return result;
LABEL_61:
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
      if (!*(_BYTE *)(a2 + 312))
        return result;
      if (!*(_BYTE *)(a1 + 312))
        goto LABEL_89;
      v35 = (const void **)(a2 + 152);
      v36 = *(_BYTE *)(a2 + 175);
      if (v36 >= 0)
        v37 = *(unsigned __int8 *)(a2 + 175);
      else
        v37 = *(_QWORD *)(a2 + 160);
      v38 = *(char *)(a1 + 175);
      if (v38 >= 0)
        v39 = *(unsigned __int8 *)(a1 + 175);
      else
        v39 = *(_QWORD *)(a1 + 160);
      if (v38 >= 0)
        v40 = (unsigned __int8 *)(a1 + 152);
      else
        v40 = *(unsigned __int8 **)(a1 + 152);
      if (v37 != v39)
        goto LABEL_80;
      if ((*(_BYTE *)(a2 + 175) & 0x80) != 0)
      {
        if (memcmp(*v35, v40, *(_QWORD *)(a2 + 160)))
          goto LABEL_80;
      }
      else if (*(_BYTE *)(a2 + 175))
      {
        v41 = v40;
        v42 = (unsigned __int8 *)(a2 + 152);
        v43 = *(unsigned __int8 *)(a2 + 175);
        while (*v42 == *v41)
        {
          ++v42;
          ++v41;
          if (!--v43)
            goto LABEL_90;
        }
LABEL_80:
        if (v36 >= 0)
          v44 = (const void *)(a2 + 152);
        else
          v44 = *v35;
        if (v37 >= v39)
          v45 = v39;
        else
          v45 = v37;
        v46 = memcmp(v40, v44, v45);
        v47 = v39 < v37;
        if (v46)
          v47 = v46 < 0;
        if (!v47)
          return result;
LABEL_89:
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
        return result;
      }
LABEL_90:
      result = *(float *)(a2 + 88);
      if (result <= *(float *)(a1 + 88))
        return result;
      goto LABEL_89;
    }
LABEL_60:
    result = *(float *)(a3 + 88);
    if (result <= *(float *)(a2 + 88))
      return result;
    goto LABEL_61;
  }
  v9 = (const void **)(a4 + 152);
  v10 = *(_BYTE *)(a4 + 175);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(a4 + 175);
  else
    v11 = *(_QWORD *)(a4 + 160);
  v12 = *(char *)(a3 + 175);
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 175);
  else
    v13 = *(_QWORD *)(a3 + 160);
  if (v12 >= 0)
    v14 = (unsigned __int8 *)(a3 + 152);
  else
    v14 = *(unsigned __int8 **)(a3 + 152);
  if (v11 != v13)
    goto LABEL_20;
  if ((*(_BYTE *)(a4 + 175) & 0x80) != 0)
  {
    if (memcmp(*v9, v14, *(_QWORD *)(a4 + 160)))
      goto LABEL_20;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a4 + 175))
  {
LABEL_30:
    result = *(float *)(a4 + 88);
    if (result <= *(float *)(a3 + 88))
      return result;
    goto LABEL_31;
  }
  v15 = v14;
  v16 = (unsigned __int8 *)(a4 + 152);
  v17 = *(unsigned __int8 *)(a4 + 175);
  while (*v16 == *v15)
  {
    ++v16;
    ++v15;
    if (!--v17)
      goto LABEL_30;
  }
LABEL_20:
  if (v10 >= 0)
    v18 = (const void *)(a4 + 152);
  else
    v18 = *v9;
  if (v11 >= v13)
    v19 = v13;
  else
    v19 = v11;
  v20 = memcmp(v14, v18, v19);
  v21 = v13 < v11;
  if (v20)
    v21 = v20 < 0;
  if (v21)
    goto LABEL_31;
  return result;
}

float std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result;
  const void **v11;
  char v12;
  size_t v13;
  int v14;
  size_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  int v22;
  BOOL v23;
  const void **v24;
  char v25;
  size_t v26;
  int v27;
  size_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  const void *v33;
  size_t v34;
  int v35;
  BOOL v36;
  const void **v37;
  char v38;
  size_t v39;
  int v40;
  size_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  const void *v46;
  size_t v47;
  int v48;
  BOOL v49;
  const void **v50;
  char v51;
  size_t v52;
  int v53;
  size_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  const void *v59;
  size_t v60;
  int v61;
  BOOL v62;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3, a4);
  if (!*(_BYTE *)(a5 + 312))
    return result;
  if (!*(_BYTE *)(a4 + 312))
  {
LABEL_31:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a4, a5);
    if (!*(_BYTE *)(a4 + 312))
      return result;
    if (!*(_BYTE *)(a3 + 312))
      goto LABEL_61;
    v24 = (const void **)(a4 + 152);
    v25 = *(_BYTE *)(a4 + 175);
    if (v25 >= 0)
      v26 = *(unsigned __int8 *)(a4 + 175);
    else
      v26 = *(_QWORD *)(a4 + 160);
    v27 = *(char *)(a3 + 175);
    if (v27 >= 0)
      v28 = *(unsigned __int8 *)(a3 + 175);
    else
      v28 = *(_QWORD *)(a3 + 160);
    if (v27 >= 0)
      v29 = (unsigned __int8 *)(a3 + 152);
    else
      v29 = *(unsigned __int8 **)(a3 + 152);
    if (v26 != v28)
      goto LABEL_50;
    if ((*(_BYTE *)(a4 + 175) & 0x80) != 0)
    {
      if (memcmp(*v24, v29, *(_QWORD *)(a4 + 160)))
        goto LABEL_50;
    }
    else if (*(_BYTE *)(a4 + 175))
    {
      v30 = v29;
      v31 = (unsigned __int8 *)(a4 + 152);
      v32 = *(unsigned __int8 *)(a4 + 175);
      while (*v31 == *v30)
      {
        ++v31;
        ++v30;
        if (!--v32)
          goto LABEL_60;
      }
LABEL_50:
      if (v25 >= 0)
        v33 = (const void *)(a4 + 152);
      else
        v33 = *v24;
      if (v26 >= v28)
        v34 = v28;
      else
        v34 = v26;
      v35 = memcmp(v29, v33, v34);
      v36 = v28 < v26;
      if (v35)
        v36 = v35 < 0;
      if (!v36)
        return result;
LABEL_61:
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
      if (!*(_BYTE *)(a3 + 312))
        return result;
      if (!*(_BYTE *)(a2 + 312))
        goto LABEL_91;
      v37 = (const void **)(a3 + 152);
      v38 = *(_BYTE *)(a3 + 175);
      if (v38 >= 0)
        v39 = *(unsigned __int8 *)(a3 + 175);
      else
        v39 = *(_QWORD *)(a3 + 160);
      v40 = *(char *)(a2 + 175);
      if (v40 >= 0)
        v41 = *(unsigned __int8 *)(a2 + 175);
      else
        v41 = *(_QWORD *)(a2 + 160);
      if (v40 >= 0)
        v42 = (unsigned __int8 *)(a2 + 152);
      else
        v42 = *(unsigned __int8 **)(a2 + 152);
      if (v39 != v41)
        goto LABEL_80;
      if ((*(_BYTE *)(a3 + 175) & 0x80) != 0)
      {
        if (memcmp(*v37, v42, *(_QWORD *)(a3 + 160)))
          goto LABEL_80;
      }
      else if (*(_BYTE *)(a3 + 175))
      {
        v43 = v42;
        v44 = (unsigned __int8 *)(a3 + 152);
        v45 = *(unsigned __int8 *)(a3 + 175);
        while (*v44 == *v43)
        {
          ++v44;
          ++v43;
          if (!--v45)
            goto LABEL_90;
        }
LABEL_80:
        if (v38 >= 0)
          v46 = (const void *)(a3 + 152);
        else
          v46 = *v37;
        if (v39 >= v41)
          v47 = v41;
        else
          v47 = v39;
        v48 = memcmp(v42, v46, v47);
        v49 = v41 < v39;
        if (v48)
          v49 = v48 < 0;
        if (!v49)
          return result;
LABEL_91:
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
        if (!*(_BYTE *)(a2 + 312))
          return result;
        if (!*(_BYTE *)(a1 + 312))
          goto LABEL_119;
        v50 = (const void **)(a2 + 152);
        v51 = *(_BYTE *)(a2 + 175);
        if (v51 >= 0)
          v52 = *(unsigned __int8 *)(a2 + 175);
        else
          v52 = *(_QWORD *)(a2 + 160);
        v53 = *(char *)(a1 + 175);
        if (v53 >= 0)
          v54 = *(unsigned __int8 *)(a1 + 175);
        else
          v54 = *(_QWORD *)(a1 + 160);
        if (v53 >= 0)
          v55 = (unsigned __int8 *)(a1 + 152);
        else
          v55 = *(unsigned __int8 **)(a1 + 152);
        if (v52 != v54)
          goto LABEL_110;
        if ((*(_BYTE *)(a2 + 175) & 0x80) != 0)
        {
          if (memcmp(*v50, v55, *(_QWORD *)(a2 + 160)))
            goto LABEL_110;
        }
        else if (*(_BYTE *)(a2 + 175))
        {
          v56 = v55;
          v57 = (unsigned __int8 *)(a2 + 152);
          v58 = *(unsigned __int8 *)(a2 + 175);
          while (*v57 == *v56)
          {
            ++v57;
            ++v56;
            if (!--v58)
              goto LABEL_120;
          }
LABEL_110:
          if (v51 >= 0)
            v59 = (const void *)(a2 + 152);
          else
            v59 = *v50;
          if (v52 >= v54)
            v60 = v54;
          else
            v60 = v52;
          v61 = memcmp(v55, v59, v60);
          v62 = v54 < v52;
          if (v61)
            v62 = v61 < 0;
          if (!v62)
            return result;
LABEL_119:
          std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
          return result;
        }
LABEL_120:
        result = *(float *)(a2 + 88);
        if (result <= *(float *)(a1 + 88))
          return result;
        goto LABEL_119;
      }
LABEL_90:
      result = *(float *)(a3 + 88);
      if (result <= *(float *)(a2 + 88))
        return result;
      goto LABEL_91;
    }
LABEL_60:
    result = *(float *)(a4 + 88);
    if (result <= *(float *)(a3 + 88))
      return result;
    goto LABEL_61;
  }
  v11 = (const void **)(a5 + 152);
  v12 = *(_BYTE *)(a5 + 175);
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(a5 + 175);
  else
    v13 = *(_QWORD *)(a5 + 160);
  v14 = *(char *)(a4 + 175);
  if (v14 >= 0)
    v15 = *(unsigned __int8 *)(a4 + 175);
  else
    v15 = *(_QWORD *)(a4 + 160);
  if (v14 >= 0)
    v16 = (unsigned __int8 *)(a4 + 152);
  else
    v16 = *(unsigned __int8 **)(a4 + 152);
  if (v13 != v15)
    goto LABEL_20;
  if ((*(_BYTE *)(a5 + 175) & 0x80) != 0)
  {
    if (memcmp(*v11, v16, *(_QWORD *)(a5 + 160)))
      goto LABEL_20;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a5 + 175))
  {
LABEL_30:
    result = *(float *)(a5 + 88);
    if (result <= *(float *)(a4 + 88))
      return result;
    goto LABEL_31;
  }
  v17 = v16;
  v18 = (unsigned __int8 *)(a5 + 152);
  v19 = *(unsigned __int8 *)(a5 + 175);
  while (*v18 == *v17)
  {
    ++v18;
    ++v17;
    if (!--v19)
      goto LABEL_30;
  }
LABEL_20:
  if (v12 >= 0)
    v20 = (const void *)(a5 + 152);
  else
    v20 = *v11;
  if (v13 >= v15)
    v21 = v15;
  else
    v21 = v13;
  v22 = memcmp(v16, v20, v21);
  v23 = v15 < v13;
  if (v22)
    v23 = v22 < 0;
  if (v23)
    goto LABEL_31;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  const void **v6;
  char v7;
  size_t v8;
  int v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  char v20;
  size_t v21;
  int v22;
  size_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  const void *v28;
  size_t v29;
  int v30;
  BOOL v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float *v36;
  float *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  char v41;
  size_t v42;
  int v43;
  size_t v44;
  float *v45;
  float *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 *p_s1;
  size_t v50;
  int v51;
  BOOL v52;
  float *v53;
  void *v54;
  const void *v55;
  size_t v56;
  int v57;
  BOOL v58;
  int v59;
  _BYTE v61[33];
  float v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 __s1;
  uint64_t v69;
  _OWORD v70[2];
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 __p;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  uint64_t v82;
  void **v83[2];

  v3 = 0x82FA0BE82FA0BE83 * ((a2 - a1) >> 3);
  v4 = a2;
  result = 1;
  switch(v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (!*(_BYTE *)(a2 - 32))
        return result;
      if (!*(_BYTE *)(a1 + 312))
        goto LABEL_120;
      v6 = (const void **)(a2 - 192);
      v7 = *(_BYTE *)(a2 - 169);
      if (v7 >= 0)
        v8 = *(unsigned __int8 *)(a2 - 169);
      else
        v8 = *(_QWORD *)(a2 - 184);
      v9 = *(char *)(a1 + 175);
      if (v9 >= 0)
        v10 = *(unsigned __int8 *)(a1 + 175);
      else
        v10 = *(_QWORD *)(a1 + 160);
      if (v9 >= 0)
        v11 = (unsigned __int8 *)(a1 + 152);
      else
        v11 = *(unsigned __int8 **)(a1 + 152);
      if (v8 != v10)
        goto LABEL_111;
      if ((*(_BYTE *)(a2 - 169) & 0x80) != 0)
      {
        if (memcmp(*v6, v11, *(_QWORD *)(a2 - 184)))
          goto LABEL_111;
      }
      else if (*(_BYTE *)(a2 - 169))
      {
        v12 = v11;
        v13 = (unsigned __int8 *)(a2 - 192);
        v14 = *(unsigned __int8 *)(a2 - 169);
        while (*v13 == *v12)
        {
          ++v13;
          ++v12;
          if (!--v14)
            goto LABEL_123;
        }
LABEL_111:
        if (v7 >= 0)
          v55 = v6;
        else
          v55 = *v6;
        if (v8 >= v10)
          v56 = v10;
        else
          v56 = v8;
        v57 = memcmp(v11, v55, v56);
        v58 = v10 < v8;
        if (v57)
          v58 = v57 < 0;
        v4 = a2;
        if (!v58)
          return 1;
        goto LABEL_120;
      }
LABEL_123:
      v4 = a2;
      if (*(float *)(a2 - 256) <= *(float *)(a1 + 88))
        return 1;
LABEL_120:
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, v4 - 344);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a2 - 344);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688, a2 - 344);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(a1, a1 + 344, a1 + 688, a1 + 1032, a2 - 344);
      return 1;
    default:
      v15 = a1 + 688;
      v16.n128_f32[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688);
      v17 = a2;
      v18 = a1 + 1032;
      if (a1 + 1032 == a2)
        return 1;
      v59 = 0;
      break;
  }
  do
  {
    if (!*(_BYTE *)(v18 + 312))
      goto LABEL_105;
    if (*(_BYTE *)(v15 + 312))
    {
      v19 = (const void **)(v18 + 152);
      v20 = *(_BYTE *)(v18 + 175);
      if (v20 >= 0)
        v21 = *(unsigned __int8 *)(v18 + 175);
      else
        v21 = *(_QWORD *)(v18 + 160);
      v22 = *(char *)(v15 + 175);
      if (v22 >= 0)
        v23 = *(unsigned __int8 *)(v15 + 175);
      else
        v23 = *(_QWORD *)(v15 + 160);
      if (v22 >= 0)
        v24 = (unsigned __int8 *)(v15 + 152);
      else
        v24 = *(unsigned __int8 **)(v15 + 152);
      if (v21 != v23)
        goto LABEL_41;
      if ((*(_BYTE *)(v18 + 175) & 0x80) != 0)
      {
        if (memcmp(*v19, v24, *(_QWORD *)(v18 + 160)))
          goto LABEL_41;
      }
      else if (*(_BYTE *)(v18 + 175))
      {
        v25 = v24;
        v26 = (unsigned __int8 *)(v18 + 152);
        v27 = *(unsigned __int8 *)(v18 + 175);
        while (*v26 == *v25)
        {
          ++v26;
          ++v25;
          if (!--v27)
            goto LABEL_103;
        }
LABEL_41:
        if (v20 >= 0)
          v28 = (const void *)(v18 + 152);
        else
          v28 = *v19;
        if (v21 >= v23)
          v29 = v23;
        else
          v29 = v21;
        v30 = memcmp(v24, v28, v29);
        v31 = v23 < v21;
        if (v30)
          v31 = v30 < 0;
        if (!v31)
        {
LABEL_104:
          v17 = a2;
          goto LABEL_105;
        }
        goto LABEL_50;
      }
LABEL_103:
      v16.n128_u32[0] = *(_DWORD *)(v18 + 88);
      if (v16.n128_f32[0] <= *(float *)(v15 + 88))
        goto LABEL_104;
    }
LABEL_50:
    MEMORY[0x1C3BC54B4](v61, v18, v16);
    v62 = *(float *)(v18 + 88);
    LOBYTE(v63) = 0;
    v80 = 0;
    if (*(_BYTE *)(v18 + 312))
    {
      v63 = *(_QWORD *)(v18 + 96);
      v64 = *(_OWORD *)(v18 + 104);
      v65 = *(_QWORD *)(v18 + 120);
      *(_QWORD *)(v18 + 104) = 0;
      *(_QWORD *)(v18 + 112) = 0;
      v66 = *(_OWORD *)(v18 + 128);
      v67 = *(_QWORD *)(v18 + 144);
      *(_QWORD *)(v18 + 120) = 0;
      *(_QWORD *)(v18 + 128) = 0;
      *(_QWORD *)(v18 + 136) = 0;
      *(_QWORD *)(v18 + 144) = 0;
      v32 = *(_OWORD *)(v18 + 152);
      v69 = *(_QWORD *)(v18 + 168);
      __s1 = v32;
      *(_QWORD *)(v18 + 152) = 0;
      *(_QWORD *)(v18 + 160) = 0;
      *(_QWORD *)(v18 + 168) = 0;
      v33 = *(_OWORD *)(v18 + 176);
      *(_OWORD *)((char *)v70 + 12) = *(_OWORD *)(v18 + 188);
      v70[0] = v33;
      v71 = *(_OWORD *)(v18 + 208);
      v72 = *(_QWORD *)(v18 + 224);
      *(_QWORD *)(v18 + 208) = 0;
      *(_QWORD *)(v18 + 216) = 0;
      v34 = *(_OWORD *)(v18 + 232);
      v74 = *(_QWORD *)(v18 + 248);
      v73 = v34;
      *(_QWORD *)(v18 + 224) = 0;
      *(_QWORD *)(v18 + 232) = 0;
      *(_QWORD *)(v18 + 240) = 0;
      *(_QWORD *)(v18 + 248) = 0;
      v75 = *(_DWORD *)(v18 + 256);
      v35 = *(_OWORD *)(v18 + 264);
      v77 = *(_QWORD *)(v18 + 280);
      __p = v35;
      *(_QWORD *)(v18 + 264) = 0;
      *(_QWORD *)(v18 + 272) = 0;
      v78 = *(_OWORD *)(v18 + 288);
      v79 = *(_QWORD *)(v18 + 304);
      *(_QWORD *)(v18 + 280) = 0;
      *(_QWORD *)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
      *(_QWORD *)(v18 + 304) = 0;
      v80 = 1;
    }
    v81 = *(_OWORD *)(v18 + 320);
    v82 = *(_QWORD *)(v18 + 336);
    *(_QWORD *)(v18 + 328) = 0;
    *(_QWORD *)(v18 + 336) = 0;
    *(_QWORD *)(v18 + 320) = 0;
    v36 = (float *)v18;
    while (1)
    {
      v37 = (float *)v15;
      sirinluinternal::MatchingSpan::operator=();
      v36[22] = *(float *)(v15 + 88);
      v38 = v15 + 96;
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(v36 + 24), v15 + 96);
      v39 = (void *)*((_QWORD *)v36 + 40);
      if (v39)
      {
        *((_QWORD *)v36 + 41) = v39;
        operator delete(v39);
        *((_QWORD *)v36 + 42) = 0;
      }
      v40 = (_QWORD *)(v15 + 320);
      *((_OWORD *)v36 + 20) = *(_OWORD *)(v15 + 320);
      *((_QWORD *)v36 + 42) = *(_QWORD *)(v15 + 336);
      *(_QWORD *)(v15 + 320) = 0;
      *(_QWORD *)(v15 + 328) = 0;
      *(_QWORD *)(v15 + 336) = 0;
      if (v15 == a1)
        break;
      if (!v80)
        goto LABEL_86;
      v15 -= 344;
      v36 = v37;
      if (*((_BYTE *)v37 - 32))
      {
        v41 = HIBYTE(v69);
        if (v69 >= 0)
          v42 = HIBYTE(v69);
        else
          v42 = *((_QWORD *)&__s1 + 1);
        v43 = *((char *)v37 - 169);
        if (v43 >= 0)
          v44 = *((unsigned __int8 *)v37 - 169);
        else
          v44 = *((_QWORD *)v37 - 23);
        if (v43 >= 0)
          v45 = v37 - 48;
        else
          v45 = (float *)*((_QWORD *)v37 - 24);
        if (v42 != v44)
          goto LABEL_75;
        if (v69 < 0)
        {
          if (!memcmp((const void *)__s1, v45, *((size_t *)&__s1 + 1)))
            goto LABEL_85;
LABEL_75:
          if (v41 >= 0)
            p_s1 = &__s1;
          else
            p_s1 = (__int128 *)__s1;
          if (v42 >= v44)
            v50 = v44;
          else
            v50 = v42;
          v51 = memcmp(v45, p_s1, v50);
          v52 = v44 < v42;
          if (v51)
            v52 = v51 < 0;
          v36 = v37;
          if (!v52)
          {
LABEL_86:
            v53 = v37;
            goto LABEL_88;
          }
        }
        else
        {
          if (HIBYTE(v69))
          {
            v46 = v45;
            v47 = &__s1;
            v48 = HIBYTE(v69);
            while (*(unsigned __int8 *)v47 == *(unsigned __int8 *)v46)
            {
              v47 = (__int128 *)((char *)v47 + 1);
              v46 = (float *)((char *)v46 + 1);
              if (!--v48)
                goto LABEL_85;
            }
            goto LABEL_75;
          }
LABEL_85:
          v36 = v37;
          if (v62 <= *(v37 - 64))
            goto LABEL_86;
        }
      }
    }
    v53 = (float *)a1;
LABEL_88:
    sirinluinternal::MatchingSpan::operator=();
    v53[22] = v62;
    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v38, (uint64_t)&v63);
    v54 = (void *)*((_QWORD *)v37 + 40);
    if (v54)
    {
      *((_QWORD *)v53 + 41) = v54;
      operator delete(v54);
      *v40 = 0;
      *((_QWORD *)v37 + 41) = 0;
      *((_QWORD *)v37 + 42) = 0;
    }
    *v40 = v81;
    *((_QWORD *)v53 + 41) = *((_QWORD *)&v81 + 1);
    *((_QWORD *)v53 + 42) = v82;
    v81 = 0uLL;
    v82 = 0;
    if (v80)
    {
      v83[0] = (void **)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v83);
      if (SHIBYTE(v77) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v74) < 0)
        operator delete((void *)v73);
      v83[0] = (void **)&v71;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v83);
      if (SHIBYTE(v69) < 0)
        operator delete((void *)__s1);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
      if (SHIBYTE(v65) < 0)
        operator delete((void *)v64);
    }
    MEMORY[0x1C3BC54D8](v61);
    ++v59;
    v17 = a2;
    if (v59 == 8)
      return v18 + 344 == a2;
LABEL_105:
    v15 = v18;
    v18 += 344;
  }
  while (v18 != v17);
  return 1;
}

void marrs::mrr::mr::MRMatchingResult::toMatchingSpan(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  sirinluinternal::InternalSpanData *v8;
  char *MentionResolverSpanData;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t **v20;
  int64x2_t *v21;
  std::string *v22;
  std::string *v23;
  unsigned int v24;
  char *v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  siri::ontology::oname::graph::ontology_init *v29;
  uint64_t v30;
  int USONodeIndex;
  unsigned int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  char *v47;
  std::string *v48;
  std::string *v49;
  std::string *v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  std::string *v56;
  std::string::size_type v57;
  int64x2_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  int64x2_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  int v101;
  sirinluexternal::UsoEntitySpan **v102;
  sirinluexternal::UsoEntitySpan *v103;
  uint64_t v104;
  uint64_t v105;
  siri::ontology::oname::graph::ontology_init *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  siricommon::StringValue *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  siricommon::StringValue *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  int64x2_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  NSObject *v139;
  _QWORD *v140;
  std::string::size_type size;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  siricommon::StringValue *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  int64x2_t v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  std::string v166;
  std::string buf;
  char v168;
  int v169;
  char v170;
  void *__p;
  std::string *v172[2];
  std::string *v173;
  siricommon::StringValue *v174;
  uint64_t *v175;
  int v176;
  siricommon::StringValue *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  char v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v8 = *(sirinluinternal::InternalSpanData **)(MEMORY[0x1C3BC54C0]() + 40);
  if (!v8)
  {
    sirinluinternal::MatchingSpan::makeInternalSpanData((sirinluinternal::MatchingSpan *)a1);
    v8 = *(sirinluinternal::InternalSpanData **)(a1 + 40);
  }
  MentionResolverSpanData = (char *)sirinluinternal::InternalSpanData::makeMentionResolverSpanData(v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v11 = *(float *)(a2 + 88);
  *(_BYTE *)(v10 + 24) |= 2u;
  *(double *)(v10 + 16) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v13 = *(float *)(a2 + 88);
  *(_BYTE *)(v12 + 24) |= 1u;
  *(double *)(v12 + 8) = v13;
  if (*(_BYTE *)(a2 + 312) && (v14 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 8) != v14) && *(_DWORD *)(v14 - 4) == 6)
  {
    v15 = *(int *)(a2 + 200);
    v16 = *(_QWORD *)(*(_QWORD *)(*a3 + 8 * v15) + 40);
    if (v16)
    {
      v17 = operator new();
      MentionResolverSpanData = (char *)MEMORY[0x1C3BC5490](v17, v16);
      v18 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = MentionResolverSpanData;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        MentionResolverSpanData = *(char **)(a1 + 64);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(*a3 + 8 * v15) + 64);
      if (v19)
      {
        v20 = (int64x2_t **)*((_QWORD *)MentionResolverSpanData + 13);
        if (v20 != *((int64x2_t ***)MentionResolverSpanData + 14) && (*(_BYTE *)(v19 + 44) & 1) != 0)
        {
          v21 = *v20;
          sirinluexternal::SpanProperty::SpanProperty((sirinluexternal::SpanProperty *)&__p);
          v22 = v172[0];
          if (!v172[0])
          {
            v22 = (std::string *)operator new();
            v22->__r_.__value_.__r.__words[0] = 0;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v23 = v172[0];
            v172[0] = v22;
            if (v23)
            {
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v23);
              v22 = v172[0];
            }
          }
          std::string::operator=(v22, &marrs::mrr::mr::MRMatchingResult::entityDataSourceKey);
          v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 8 * v15) + 64) + 40) - 1;
          if (v24 > 4)
            v25 = "unknown";
          else
            v25 = off_1E7C67208[v24];
          std::string::basic_string[abi:ne180100]<0>(&buf, v25);
          sirinluexternal::SpanProperty::makeValueString((sirinluexternal::SpanProperty *)&__p);
          v146 = v174;
          siricommon::StringValue::makeValue(v174);
          std::string::operator=(*((std::string **)v146 + 1), &buf);
          v147 = operator new();
          MEMORY[0x1C3BC5370](v147, &__p);
          v149 = (uint64_t *)v21[5].i64[1];
          v148 = v21[6].u64[0];
          if ((unint64_t)v149 >= v148)
          {
            v151 = v21[5].i64[0];
            v152 = ((uint64_t)v149 - v151) >> 3;
            if ((unint64_t)(v152 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v153 = v148 - v151;
            v154 = v153 >> 2;
            if (v153 >> 2 <= (unint64_t)(v152 + 1))
              v154 = v152 + 1;
            if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
              v155 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v155 = v154;
            if (v155)
            {
              if (v155 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v156 = (char *)operator new(8 * v155);
            }
            else
            {
              v156 = 0;
            }
            v157 = (uint64_t *)&v156[8 * v152];
            *v157 = v147;
            v150 = v157 + 1;
            v159 = (_QWORD *)v21[5].i64[0];
            v158 = (_QWORD *)v21[5].i64[1];
            if (v158 == v159)
            {
              v161 = vdupq_n_s64((unint64_t)v158);
            }
            else
            {
              do
              {
                v160 = *--v158;
                *v158 = 0;
                *--v157 = v160;
              }
              while (v158 != v159);
              v161 = v21[5];
            }
            v21[5].i64[0] = (uint64_t)v157;
            v21[5].i64[1] = (uint64_t)v150;
            v21[6].i64[0] = (uint64_t)&v156[8 * v155];
            v163 = (_QWORD *)v161.i64[1];
            v162 = (_QWORD *)v161.i64[0];
            while (v163 != v162)
            {
              v165 = *--v163;
              v164 = v165;
              *v163 = 0;
              if (v165)
                (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
            }
            if (v162)
              operator delete(v162);
          }
          else
          {
            *v149 = v147;
            v150 = v149 + 1;
          }
          v21[5].i64[1] = (uint64_t)v150;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          MentionResolverSpanData = (char *)MEMORY[0x1C3BC5388](&__p);
        }
      }
    }
    v26 = *(_DWORD *)(a2 + 96);
  }
  else
  {
    v26 = 30;
  }
  v28 = *(_DWORD **)(a2 + 320);
  v27 = *(_DWORD **)(a2 + 328);
  if (v28 != v27)
  {
    while (*v28 != 3)
    {
      if (++v28 == v27)
      {
        v28 = *(_DWORD **)(a2 + 328);
        break;
      }
    }
  }
  if (v28 != v27)
  {
    v29 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BC5490](&__p, *(_QWORD *)(a1 + 64));
    v30 = siri::ontology::oname::graph::ontology_init::Argument_entity(v29);
    USONodeIndex = marrs::mrr::mr::findUSONodeIndex((uint64_t *)v174, v175, -1, *(_DWORD *)(v30 + 36));
    if (USONodeIndex == -1)
    {
      v33 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v33, OS_LOG_TYPE_DEBUG, "Could not find entity node in csm's uso graph to extract span label", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      v32 = USONodeIndex;
      marrs::mrr::mr::getEntityDescendants((uint64_t *)&buf, (uint64_t)&__p, USONodeIndex);
      if (v32 >= (unint64_t)((v179 - v178) >> 3))
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      v26 = marrs::mrr::mr::mapNodeIdToMRREntityType((siri::ontology::oname::graph::ontology_init *)*(unsigned int *)(*(_QWORD *)(v178 + 8 * v32) + 72), (siri::ontology::oname::graph::ontology_init *)&__p, (unint64_t *)&buf);
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)&buf);
    }
    MentionResolverSpanData = (char *)MEMORY[0x1C3BC549C](&__p);
  }
  v34 = *(_QWORD *)(a1 + 48);
  if (v34)
  {
    if (*(char *)(v34 + 23) < 0)
    {
      if (*(_QWORD *)(v34 + 8))
        goto LABEL_47;
    }
    else if (*(_BYTE *)(v34 + 23))
    {
      goto LABEL_47;
    }
  }
  v35 = qword_1ED7B1C88;
  if (!qword_1ED7B1C88)
    goto LABEL_44;
  v36 = &qword_1ED7B1C88;
  do
  {
    v37 = *(_DWORD *)(v35 + 32);
    v38 = v37 < v26;
    if (v37 >= v26)
      v39 = (uint64_t *)v35;
    else
      v39 = (uint64_t *)(v35 + 8);
    if (!v38)
      v36 = (uint64_t *)v35;
    v35 = *v39;
  }
  while (*v39);
  if (v36 != &qword_1ED7B1C88 && v26 >= *((_DWORD *)v36 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v36[5]);
    sirinluinternal::MatchingSpan::label(a1, (__n128 *)&__p);
  }
  else
  {
LABEL_44:
    std::string::basic_string[abi:ne180100]<0>(&__p, "undefined");
    sirinluinternal::MatchingSpan::label(a1, (__n128 *)&__p);
  }
  if (SHIBYTE(v172[1]) < 0)
    operator delete(__p);
LABEL_47:
  v40 = *(_QWORD *)(a1 + 64);
  if (v40 && *(_QWORD *)(v40 + 8) == *(_QWORD *)(v40 + 16))
  {
    v41 = *(unsigned int *)(a1 + 76);
    v42 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v43 = (*(_QWORD *)(*(_QWORD *)a4 + 32) - v42) >> 3;
    if (v43 <= v41)
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    v44 = (*(_DWORD *)(a1 + 72) - 1);
    if (v43 <= v44)
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    v45 = *(_DWORD *)(*(_QWORD *)(v42 + 8 * v41) + 72);
    v46 = *(_DWORD *)(*(_QWORD *)(v42 + 8 * v44) + 76);
    sirinluexternal::UtteranceSpan::UtteranceSpan((sirinluexternal::UtteranceSpan *)&buf);
    v168 |= 9u;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v45;
    LODWORD(buf.__r_.__value_.__r.__words[1]) = v46;
    sirinluexternal::UtteranceAlignment::UtteranceAlignment((sirinluexternal::UtteranceAlignment *)&__p);
    LOBYTE(v175) = v175 | 2;
    HIDWORD(v174) = 0;
    v47 = (char *)operator new();
    MEMORY[0x1C3BC53DC](v47, &buf);
    v48 = v172[1];
    if (v172[1] >= v173)
    {
      v50 = v172[0];
      v51 = ((char *)v172[1] - (char *)v172[0]) >> 3;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v53 = (char *)v173 - (char *)v172[0];
      if (((char *)v173 - (char *)v172[0]) >> 2 > v52)
        v52 = v53 >> 2;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
      {
        if (v54 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v55 = (char *)operator new(8 * v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = (std::string *)&v55[8 * v51];
      v56->__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
      v49 = (std::string *)&v56->__r_.__value_.__r.__words[1];
      if (v48 == v50)
      {
        v58 = vdupq_n_s64((unint64_t)v48);
      }
      else
      {
        do
        {
          v57 = v48[-1].__r_.__value_.__r.__words[2];
          v48 = (std::string *)((char *)v48 - 8);
          v48->__r_.__value_.__r.__words[0] = 0;
          v56[-1].__r_.__value_.__r.__words[2] = v57;
          v56 = (std::string *)((char *)v56 - 8);
        }
        while (v48 != v50);
        v58 = *(int64x2_t *)v172;
      }
      v172[0] = v56;
      v172[1] = v49;
      v173 = (std::string *)&v55[8 * v54];
      v60 = (_QWORD *)v58.i64[1];
      v59 = (_QWORD *)v58.i64[0];
      while (v60 != v59)
      {
        v62 = *--v60;
        v61 = v62;
        *v60 = 0;
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      }
      if (v59)
        operator delete(v59);
    }
    else
    {
      v172[1]->__r_.__value_.__l.__data_ = v47;
      v49 = (std::string *)&v48->__r_.__value_.__r.__words[1];
    }
    v172[1] = v49;
    v63 = *(_QWORD **)(a1 + 64);
    v64 = operator new();
    MEMORY[0x1C3BC5430](v64, &__p);
    v66 = (uint64_t *)v63[2];
    v65 = v63[3];
    if ((unint64_t)v66 >= v65)
    {
      v68 = v63[1];
      v69 = ((uint64_t)v66 - v68) >> 3;
      if ((unint64_t)(v69 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v70 = v65 - v68;
      v71 = v70 >> 2;
      if (v70 >> 2 <= (unint64_t)(v69 + 1))
        v71 = v69 + 1;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v71;
      if (v72)
      {
        if (v72 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v73 = (char *)operator new(8 * v72);
      }
      else
      {
        v73 = 0;
      }
      v74 = (uint64_t *)&v73[8 * v69];
      *v74 = v64;
      v67 = v74 + 1;
      v76 = (_QWORD *)v63[1];
      v75 = (_QWORD *)v63[2];
      if (v75 == v76)
      {
        v78 = vdupq_n_s64((unint64_t)v75);
      }
      else
      {
        do
        {
          v77 = *--v75;
          *v75 = 0;
          *--v74 = v77;
        }
        while (v75 != v76);
        v78 = *(int64x2_t *)(v63 + 1);
      }
      v63[1] = v74;
      v63[2] = v67;
      v63[3] = &v73[8 * v72];
      v80 = (_QWORD *)v78.i64[1];
      v79 = (_QWORD *)v78.i64[0];
      while (v80 != v79)
      {
        v82 = *--v80;
        v81 = v82;
        *v80 = 0;
        if (v82)
          (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      }
      if (v79)
        operator delete(v79);
    }
    else
    {
      *v66 = v64;
      v67 = v66 + 1;
    }
    v63[2] = v67;
    sirinluexternal::UtteranceAlignment::~UtteranceAlignment((sirinluexternal::UtteranceAlignment *)&__p);
    MentionResolverSpanData = (char *)MEMORY[0x1C3BC53F4](&buf);
  }
  v84 = *(char **)(a1 + 16);
  v83 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v84 >= v83)
  {
    MentionResolverSpanData = *(char **)(a1 + 8);
    v86 = (v84 - MentionResolverSpanData) >> 2;
    v87 = v86 + 1;
    if ((unint64_t)(v86 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v88 = v83 - (_QWORD)MentionResolverSpanData;
    if (v88 >> 1 > v87)
      v87 = v88 >> 1;
    v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL;
    v90 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v89)
      v90 = v87;
    if (v90)
    {
      v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v90);
      MentionResolverSpanData = *(char **)(a1 + 8);
      v84 = *(char **)(a1 + 16);
    }
    else
    {
      v91 = 0;
    }
    v92 = (_DWORD *)(v90 + 4 * v86);
    v93 = v90 + 4 * v91;
    *v92 = 7;
    v85 = v92 + 1;
    while (v84 != MentionResolverSpanData)
    {
      v94 = *((_DWORD *)v84 - 1);
      v84 -= 4;
      *--v92 = v94;
    }
    *(_QWORD *)(a1 + 8) = v92;
    *(_QWORD *)(a1 + 16) = v85;
    *(_QWORD *)(a1 + 24) = v93;
    if (MentionResolverSpanData)
      operator delete(MentionResolverSpanData);
  }
  else
  {
    *(_DWORD *)v84 = 7;
    v85 = v84 + 4;
  }
  *(_QWORD *)(a1 + 16) = v85;
  v95 = *(_QWORD *)(a1 + 64);
  if (v95)
  {
    v96 = *(unsigned int *)(a1 + 76);
    v97 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v98 = (*(_QWORD *)(*(_QWORD *)a4 + 32) - v97) >> 3;
    if (v98 <= v96)
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    v99 = (*(_DWORD *)(a1 + 72) - 1);
    if (v98 <= v99)
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    v100 = *(_DWORD *)(*(_QWORD *)(v97 + 8 * v96) + 72);
    v101 = *(_DWORD *)(*(_QWORD *)(v97 + 8 * v99) + 76);
    v102 = *(sirinluexternal::UsoEntitySpan ***)(v95 + 104);
    if (v102 == *(sirinluexternal::UsoEntitySpan ***)(v95 + 112))
    {
      v106 = (siri::ontology::oname::graph::ontology_init *)sirinluexternal::UsoEntitySpan::UsoEntitySpan((sirinluexternal::UsoEntitySpan *)&__p);
      v107 = *(_QWORD *)(a1 + 64);
      v108 = siri::ontology::oname::graph::ontology_init::Argument_entity(v106);
      v109 = marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(v107 + 32), *(uint64_t **)(v107 + 40), -1, *(_DWORD *)(v108 + 36));
      v182 |= 1u;
      v181 = v109;
      sirinluexternal::UsoEntitySpan::makeOriginAppId((sirinluexternal::UsoEntitySpan *)&__p);
      v110 = v177;
      std::string::basic_string[abi:ne180100]<0>(&buf, "MarrsReferenceResolution");
      siricommon::StringValue::makeValue(v110);
      v111 = *((_QWORD *)v110 + 1);
      if (*(char *)(v111 + 23) < 0)
        operator delete(*(void **)v111);
      v112 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)(v111 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)v111 = v112;
      sirinluexternal::UsoEntitySpan::makeStartIndex((sirinluexternal::UsoEntitySpan *)&__p);
      v113 = v180;
      *(_BYTE *)(v180 + 12) |= 1u;
      *(_DWORD *)(v113 + 8) = v100;
      sirinluexternal::UsoEntitySpan::makeEndIndex((sirinluexternal::UsoEntitySpan *)&__p);
      v114 = v174;
      *((_BYTE *)v174 + 12) |= 1u;
      *((_DWORD *)v114 + 2) = v101;
      v115 = *(_QWORD **)(a1 + 64);
      v116 = operator new();
      MEMORY[0x1C3BC53B8](v116, &__p);
      v118 = (uint64_t *)v115[14];
      v117 = v115[15];
      if ((unint64_t)v118 >= v117)
      {
        v120 = v115[13];
        v121 = ((uint64_t)v118 - v120) >> 3;
        if ((unint64_t)(v121 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v122 = v117 - v120;
        v123 = v122 >> 2;
        if (v122 >> 2 <= (unint64_t)(v121 + 1))
          v123 = v121 + 1;
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
          v124 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v124 = v123;
        if (v124)
        {
          if (v124 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v125 = (char *)operator new(8 * v124);
        }
        else
        {
          v125 = 0;
        }
        v126 = (uint64_t *)&v125[8 * v121];
        *v126 = v116;
        v119 = v126 + 1;
        v128 = (_QWORD *)v115[13];
        v127 = (_QWORD *)v115[14];
        if (v127 == v128)
        {
          v130 = vdupq_n_s64((unint64_t)v127);
        }
        else
        {
          do
          {
            v129 = *--v127;
            *v127 = 0;
            *--v126 = v129;
          }
          while (v127 != v128);
          v130 = *(int64x2_t *)(v115 + 13);
        }
        v115[13] = v126;
        v115[14] = v119;
        v115[15] = &v125[8 * v124];
        v132 = (_QWORD *)v130.i64[1];
        v131 = (_QWORD *)v130.i64[0];
        while (v132 != v131)
        {
          v134 = *--v132;
          v133 = v134;
          *v132 = 0;
          if (v134)
            (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
        }
        if (v131)
          operator delete(v131);
      }
      else
      {
        *v118 = v116;
        v119 = v118 + 1;
      }
      v115[14] = v119;
      MentionResolverSpanData = (char *)MEMORY[0x1C3BC53D0](&__p);
    }
    else
    {
      v103 = *v102;
      if (!*((_QWORD *)*v102 + 13) && !*((_QWORD *)v103 + 4))
      {
        sirinluexternal::UsoEntitySpan::makeStartIndex(*v102);
        v104 = *((_QWORD *)v103 + 13);
        *(_BYTE *)(v104 + 12) |= 1u;
        *(_DWORD *)(v104 + 8) = v100;
        MentionResolverSpanData = (char *)sirinluexternal::UsoEntitySpan::makeEndIndex(v103);
        v105 = *((_QWORD *)v103 + 4);
        *(_BYTE *)(v105 + 12) |= 1u;
        *(_DWORD *)(v105 + 8) = v101;
      }
    }
  }
  v135 = *(_DWORD **)(a2 + 320);
  if ((*v135 | 2) == 2 && v135 != *(_DWORD **)(a2 + 328))
  {
    v136 = *(_QWORD *)(a1 + 64);
    if (v136)
    {
      v137 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)MentionResolverSpanData);
      v138 = marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(v136 + 32), *(uint64_t **)(v136 + 40), -1, *(_DWORD *)(v137 + 36));
      v139 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v138;
        _os_log_impl(&dword_1C281A000, v139, OS_LOG_TYPE_DEBUG, "** found node index: %u", (uint8_t *)&__p, 8u);
      }
      sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&__p);
      sirinluexternal::UsoEntityIdentifier::makeNamespaceA((sirinluexternal::UsoEntityIdentifier *)&__p);
      v140 = (_QWORD *)operator new();
      std::string::basic_string[abi:ne180100]<0>(v140, "resolution_type");
      size = v172[1]->__r_.__value_.__l.__size_;
      v172[1]->__r_.__value_.__l.__size_ = (std::string::size_type)v140;
      if (size)
        std::default_delete<std::string>::operator()[abi:ne180100](size);
      v142 = **(unsigned int **)(a2 + 320);
      if (v142 > 3)
        v143 = "NO_MR_TRIGGERED";
      else
        v143 = off_1E7C67588[v142];
      std::string::basic_string[abi:ne180100]<0>(&buf, v143);
      sirinluexternal::UsoEntityIdentifier::value((uint64_t)&__p, (__n128 *)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&buf, "MarrsReferenceResolution");
      sirinluexternal::UsoEntityIdentifier::backingAppBundleId((uint64_t)&__p, (__n128 *)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      LOBYTE(v177) = v177 | 4;
      v176 = v138;
      PB::PtrVector<sirinluexternal::UsoEntityIdentifier>::emplace_back<sirinluexternal::UsoEntityIdentifier&>((uint64_t **)(*(_QWORD *)(a1 + 64) + 56), (uint64_t)&__p);
      sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&buf);
      sirinluexternal::UsoEntityIdentifier::makeNamespaceA((sirinluexternal::UsoEntityIdentifier *)&buf);
      v144 = (_QWORD *)operator new();
      std::string::basic_string[abi:ne180100]<0>(v144, "position_id");
      v145 = *(_QWORD *)(buf.__r_.__value_.__r.__words[2] + 8);
      *(_QWORD *)(buf.__r_.__value_.__r.__words[2] + 8) = v144;
      if (v145)
        std::default_delete<std::string>::operator()[abi:ne180100](v145);
      if (!*(_BYTE *)(a2 + 312))
        std::__throw_bad_optional_access[abi:ne180100]();
      std::to_string(&v166, *(_DWORD *)(a2 + 256));
      sirinluexternal::UsoEntityIdentifier::value((uint64_t)&buf, (__n128 *)&v166);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v166, "MarrsReferenceResolution");
      sirinluexternal::UsoEntityIdentifier::backingAppBundleId((uint64_t)&buf, (__n128 *)&v166);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      v170 |= 4u;
      v169 = v138;
      PB::PtrVector<sirinluexternal::UsoEntityIdentifier>::emplace_back<sirinluexternal::UsoEntityIdentifier&>((uint64_t **)(*(_QWORD *)(a1 + 64) + 56), (uint64_t)&buf);
      MEMORY[0x1C3BC5478](&buf);
      MEMORY[0x1C3BC5478](&__p);
    }
  }
}

void sub_1C2867498(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t buf,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  MEMORY[0x1C3BC5388](&buf);
  JUMPOUT(0x1C286785CLL);
}

void sub_1C28674F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int buf,uint64_t a28)
{
  MEMORY[0x1C3BC53D0](&buf);
  JUMPOUT(0x1C28677BCLL);
}

void sub_1C2867624()
{
  JUMPOUT(0x1C286762CLL);
}

void sub_1C286770C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a18 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v30)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C286785CLL);
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1C28677B0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21)
{
  NSObject *v21;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v21 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      a21 = 0;
      _os_log_impl(&dword_1C281A000, v21, OS_LOG_TYPE_DEBUG, "Mention token indices out of bounds in token chain, skipping UsoEntitySpan index update", (uint8_t *)&a21, 2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C2867040);
  }
  JUMPOUT(0x1C286785CLL);
}

void sub_1C2867818()
{
  __cxa_end_catch();
  JUMPOUT(0x1C286785CLL);
}

void sub_1C2867824(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1C2867864);
}

void sub_1C286783C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)va);
  JUMPOUT(0x1C2867848);
}

void sub_1C2867858(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BC54D8](v1);
  _Unwind_Resume(a1);
}

void siricommon::StringValue::makeValue(siricommon::StringValue *this)
{
  _QWORD *v2;
  uint64_t v3;

  if (!*((_QWORD *)this + 1))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v3)
      std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
}

__n128 sirinluinternal::MatchingSpan::label(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  uint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v3;
    if (v5)
    {
      std::default_delete<std::string>::operator()[abi:ne180100](v5);
      v3 = *(_QWORD *)(a1 + 48);
    }
  }
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BC5C7CLL);
}

__n128 sirinluexternal::UsoEntityIdentifier::value(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  uint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v3;
    if (v5)
    {
      std::default_delete<std::string>::operator()[abi:ne180100](v5);
      v3 = *(_QWORD *)(a1 + 32);
    }
  }
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

__n128 sirinluexternal::UsoEntityIdentifier::backingAppBundleId(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  uint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    if (v5)
    {
      std::default_delete<std::string>::operator()[abi:ne180100](v5);
      v3 = *(_QWORD *)(a1 + 8);
    }
  }
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void PB::PtrVector<sirinluexternal::UsoEntityIdentifier>::emplace_back<sirinluexternal::UsoEntityIdentifier&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  int64x2_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = operator new();
  MEMORY[0x1C3BC5460](v4, a2);
  v6 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a1;
    v9 = v6 - *a1;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (uint64_t *)&v13[8 * v9];
    *v14 = v4;
    v7 = v14 + 1;
    if (v6 == v8)
    {
      v16 = vdupq_n_s64((unint64_t)v6);
    }
    else
    {
      do
      {
        v15 = *--v6;
        *v6 = 0;
        *--v14 = v15;
      }
      while (v6 != v8);
      v16 = *(int64x2_t *)a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = (uint64_t *)&v13[8 * v12];
    v18 = (_QWORD *)v16.i64[1];
    v17 = (_QWORD *)v16.i64[0];
    while (v18 != v17)
    {
      v20 = *--v18;
      v19 = v20;
      *v18 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[1] = v7;
}

void sub_1C2867C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

os_log_t ___ZN5marrs2qr13orchestration14SignpostsUtils20createCcqrAerContextEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.siri.marrs.QueryRewrite.CCQRAer", "CCQRAerProfiler");
  marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext = (uint64_t)result;
  return result;
}

os_log_t ___ZN5marrs2qr13orchestration14SignpostsUtils15createRdContextEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.siri.marrs.QueryRewrite.RepetitionDetector", "RdProfiler");
  marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::rdLogContext = (uint64_t)result;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x50uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v15;
          if (*v15)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v15;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v38 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_1C2868100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  *((_DWORD *)v13 + 10) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v13 = *v25;
LABEL_41:
    *v25 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1C2868354(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1C286878C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,float>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void marrs::mrr::mr::GazeBasedFilter::filterEntities(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  __int128 v21;
  void *__p;
  uint64_t *v23;
  void *v24;
  unint64_t *v25;
  uint8_t buf[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  marrs::mrr::mr::enumerateAllIndices(&v24, *a1, a1[1]);
  marrs::mrr::mr::pickTopSalientEntity((char **)&__p, a1, (unint64_t *)v24, v25);
  v20 = a2;
  v4 = (uint64_t *)__p;
  v5 = v23;
  if (__p == v23)
  {
    v6 = 0;
    v21 = 0u;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v21 = 0u;
    do
    {
      v8 = *v4;
      if (*(_DWORD *)(*a1 + 216 * *v4 + 4) == 4)
      {
        if ((unint64_t)v7 >= v6)
        {
          v10 = (void *)v21;
          v11 = (uint64_t)((uint64_t)v7 - v21) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v6 - v21) >> 2 > v12)
            v12 = (uint64_t)(v6 - v21) >> 2;
          if (v6 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
          {
            v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
            v7 = (_QWORD *)*((_QWORD *)&v21 + 1);
          }
          else
          {
            v14 = 0;
          }
          v15 = (_QWORD *)(v13 + 8 * v11);
          *v15 = v8;
          v9 = v15 + 1;
          while (v7 != (_QWORD *)v21)
          {
            v16 = *--v7;
            *--v15 = v16;
          }
          v6 = v13 + 8 * v14;
          *(_QWORD *)&v21 = v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v8;
          v9 = v7 + 1;
        }
        *(_QWORD *)&v17 = v21;
        *((_QWORD *)&v17 + 1) = v9;
        v21 = v17;
        v7 = v9;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v18 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v27 = ((char *)v23 - (_BYTE *)__p) >> 3;
    _os_log_impl(&dword_1C281A000, v18, OS_LOG_TYPE_INFO, "[GazeBasedFilter] selected %lu most salient entities", buf, 0xCu);
  }
  v19 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v27 = (uint64_t)(*((_QWORD *)&v21 + 1) - v21) >> 3;
    _os_log_impl(&dword_1C281A000, v19, OS_LOG_TYPE_INFO, "[GazeBasedFilter] selected %lu most salient visual entities", buf, 0xCu);
  }
  *(_OWORD *)v20 = v21;
  *(_QWORD *)(v20 + 16) = v6;
  *(_BYTE *)(v20 + 24) = 1;
  if (__p)
    operator delete(__p);
  if (v24)
  {
    v25 = (unint64_t *)v24;
    operator delete(v24);
  }
}

void sub_1C2868BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if ((_QWORD)a11)
    operator delete((void *)a11);
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void marrs::mrr::mr::GazeBasedFilter::~GazeBasedFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

id QRLoggerForCategory(int a1)
{
  if (QRLoggerForCategory::onceToken != -1)
    dispatch_once(&QRLoggerForCategory::onceToken, &__block_literal_global_452);
  return (id)QRLoggerForCategory::logObjects[a1];
}

void CcqrOrchestrator::predict(CcqrOrchestrator *this@<X0>, const QRRequest *a2@<X1>, uint64_t a3@<X8>)
{
  QRInteraction *var1;
  QRInteraction *var0;
  vector<marrs::qr::orchestration::QRInteraction, std::allocator<marrs::qr::orchestration::QRInteraction>> *p_var1;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  CcqrOrchestrator *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  QRInteraction *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::string::size_type size;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::string::size_type v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  QRInteraction *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char **v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char **v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *i;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  NSObject *v110;
  os_signpost_id_t v111;
  unint64_t v112;
  NSObject *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _DWORD *v123;
  unint64_t *v124;
  unint64_t *v125;
  _QWORD *v126;
  unint64_t v127;
  os_signpost_id_t v128;
  unint64_t **v129;
  float *v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  float *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t *v146;
  float *v147;
  unint64_t v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  unint64_t v153;
  uint64_t v154;
  size_t v155;
  float *v156;
  float *v157;
  int v158;
  float *v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  NSObject *v163;
  CcqrOrchestrator *j;
  unint64_t v165;
  _QWORD *v166;
  float *v167;
  float *v168;
  float *v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  float v173;
  const void *v174;
  size_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  std::string::size_type v179;
  std::string::size_type v180;
  NSObject *v181;
  std::string::size_type v182;
  std::vector<std::string>::pointer end;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  std::string *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  __int128 v207;
  NSObject *v208;
  uint64_t v209;
  std::vector<std::string>::pointer begin;
  std::string *v211;
  QRInteraction *v212;
  NSObject *v213;
  std::vector<std::string>::pointer v214;
  int v216;
  double v217;
  std::vector<std::string>::pointer v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  std::string *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  std::string *v229;
  __int128 v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  std::string *v241;
  __int128 v242;
  char *v243;
  uint64_t v244;
  NSObject *v245;
  uint64_t v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  uint64_t v252;
  char *v253;
  char *v254;
  int v255;
  __int128 *v256;
  int v257;
  std::string::size_type v258;
  uint64_t v259;
  std::string::size_type *v260;
  __int128 *v261;
  void **v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *exception;
  _QWORD *v268;
  _QWORD *v269;
  os_signpost_id_t spid;
  os_signpost_id_t spida;
  unint64_t v272;
  unint64_t v273;
  NSObject *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  std::string::size_type v280;
  CcqrOrchestrator *v281;
  const QRRequest *v282;
  std::string::size_type v283;
  uint64_t v284;
  os_signpost_id_t v285;
  os_signpost_id_t v286;
  int v287;
  uint64_t v288;
  unint64_t v289;
  __int128 v290;
  uint64_t v291;
  std::string v292;
  void *v293;
  char *v294;
  char *v295;
  unint64_t v296;
  void *v297;
  unint64_t *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  int32x2_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  uint64_t v318;
  void *v319[2];
  char v320;
  __int128 v321;
  unint64_t v322;
  void **v323;
  char v324;
  void *v325[2];
  uint64_t v326;
  void *v327[2];
  std::string::size_type __sz[2];
  __int128 v329;
  void *v330[2];
  void *v331[2];
  int v332[4];
  void *v333;
  void *v334;
  void *v335;
  _BYTE *v336;
  std::vector<std::string> v337;
  __int128 v338;
  uint64_t v339;
  void *v340[2];
  char v341;
  __int128 v342;
  uint64_t v343;
  _BYTE buf[64];
  _QWORD *v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  float *v349;
  float *v350;
  __int128 __p;
  uint64_t v352;
  _QWORD v353[14];

  v353[11] = *MEMORY[0x1E0C80C00];
  (*(void (**)(CcqrOrchestrator *))(*(_QWORD *)this + 24))(this);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v277 = a3;
  *(_DWORD *)(a3 + 56) = 4;
  v282 = a2;
  p_var1 = &a2->var1;
  var0 = a2->var1.var0;
  var1 = p_var1->var1;
  v9 = QRLoggerForCategory(2);
  v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)var1 - (char *)var0) >> 4);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "predict";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v10;
    _os_log_debug_impl(&dword_1C281A000, v9, OS_LOG_TYPE_DEBUG, "%s Number of input turns: %zu", buf, 0x16u);
  }
  if (v10 <= 1)
  {
    v11 = QRLoggerForCategory(2);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "predict";
      _os_log_debug_impl(&dword_1C281A000, v11, OS_LOG_TYPE_DEBUG, "%s Rule-based classifier returned", buf, 0xCu);
    }
    *(_DWORD *)(v277 + 56) = 3;
    return;
  }
  v12 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "predict";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v10;
    _os_log_debug_impl(&dword_1C281A000, v12, OS_LOG_TYPE_DEBUG, "%s Processing request with %zu turns", buf, 0x16u);
  }
  v13 = QRLoggerForCategory(2);
  v14 = os_signpost_id_generate(v13);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v14, "PreProcessDuration", "CCQR PreProcessing duration", buf, 2u);
  }
  v274 = v13;
  v272 = v10;
  v314 = 0;
  v315 = 0;
  v316 = 0;
  v311 = 0;
  v312 = 0;
  v313 = 0;
  v308 = 0;
  v309 = 0;
  v310 = 0;
  v305 = 0;
  v306 = 0;
  v307 = 0;
  std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::__optional_destruct_base[abi:ne180100]<marrs::qr::processing::Vocab&>((uint64_t)&v297, (uint64_t)this + 80);
  v15 = this;
  v16 = *((int *)this + 39);
  v287 = *((unsigned __int8 *)v15 + 152);
  v18 = *((_QWORD *)v15 + 21);
  v17 = *((_QWORD *)v15 + 22);
  memset(&v292, 0, sizeof(v292));
  v338 = 0uLL;
  v339 = 0;
  memset(&v337, 0, sizeof(v337));
  v19 = v282->var1.var0;
  v20 = (char *)v282->var1.var1 - (char *)v19;
  v21 = v274;
  v281 = v15;
  v273 = v14 - 1;
  if (v20)
  {
    v275 = v18;
    spid = v14;
    v22 = 0x6DB6DB6DB6DB6DB7 * (v20 >> 4);
    v23 = v16 + (int)v16 * (unint64_t)*((unsigned __int8 *)v15 + 155) + 1;
    if (v23 <= v17)
      v24 = v17 / v23 - 1;
    else
      v24 = 0;
    v289 = v24;
    marrs::qr::processing::filterTokens((uint64_t)v325, (unint64_t *)(*((_QWORD *)v19 + 14 * v22 - 14) + 40), v24);
    std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v292, v292.__r_.__value_.__l.__size_, (std::string *)v325[0], (uint64_t)v325[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v325[1] - (char *)v325[0]) >> 5));
    std::string::basic_string[abi:ne180100]<0>(&v321, "[EOS]");
    std::string::basic_string[abi:ne180100]<0>(v319, "[EOS]");
    std::string::basic_string[abi:ne180100]<0>(&v342, "[EOS]");
    v317 = 0uLL;
    v318 = 0;
    v340[0] = &v317;
    LOBYTE(v340[1]) = 0;
    *(_QWORD *)&v317 = operator new(0x18uLL);
    *((_QWORD *)&v317 + 1) = v317;
    v318 = v317 + 24;
    *((_QWORD *)&v317 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v318, &v342, (__int128 *)buf, (std::string *)v317);
    marrs::qr::orchestration::QRToken::QRToken((std::string *)buf, &v321, (__int128 *)v319, (__int128 **)&v317, 0, 0);
    size = v292.__r_.__value_.__l.__size_;
    if (v292.__r_.__value_.__l.__size_ >= v292.__r_.__value_.__r.__words[2])
    {
      v292.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v292, (__int128 *)buf);
      if (SHIBYTE(v352) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v26 = *(_OWORD *)buf;
      *(_QWORD *)(v292.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)&buf[16];
      *(_OWORD *)size = v26;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v27 = *(_QWORD *)&buf[40];
      *(_OWORD *)(size + 24) = *(_OWORD *)&buf[24];
      *(_QWORD *)(size + 40) = v27;
      *(_QWORD *)(size + 48) = 0;
      memset(&buf[16], 0, 32);
      *(_QWORD *)(size + 56) = 0;
      *(_QWORD *)(size + 64) = 0;
      *(_OWORD *)(size + 48) = *(_OWORD *)&buf[48];
      *(_QWORD *)(size + 64) = v345;
      *(_OWORD *)&buf[48] = 0uLL;
      v28 = v346;
      *(_OWORD *)(size + 88) = v347;
      *(_OWORD *)(size + 72) = v28;
      v29 = v348;
      *(_QWORD *)(size + 120) = v349;
      *(_OWORD *)(size + 104) = v29;
      v349 = 0;
      v345 = 0;
      v348 = 0uLL;
      *(_BYTE *)(size + 128) = (_BYTE)v350;
      v30 = __p;
      *(_QWORD *)(size + 152) = v352;
      *(_OWORD *)(size + 136) = v30;
      v352 = 0;
      __p = 0uLL;
      v292.__r_.__value_.__l.__size_ = size + 160;
    }
    if (SHIBYTE(v349) < 0)
      operator delete((void *)v348);
    v340[0] = &buf[48];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
    if ((buf[47] & 0x80000000) != 0)
      operator delete(*(void **)&buf[24]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v340[0] = &v317;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
    if (SHIBYTE(v343) < 0)
      operator delete((void *)v342);
    if (v320 < 0)
      operator delete(v319[0]);
    if (SHIBYTE(v322) < 0)
      operator delete((void *)v321);
    if (v22 - 1 <= v16)
      v31 = v16;
    else
      v31 = v22 - 1;
    if (v22 - 2 != v31 + ~v16)
    {
      v32 = 112 * v22;
      v33 = ~v31 + v22 + v16;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v321, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(v319, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(&v342, "[SOQ]");
        v317 = 0uLL;
        v318 = 0;
        v340[0] = &v317;
        LOBYTE(v340[1]) = 0;
        *(_QWORD *)&v317 = operator new(0x18uLL);
        *((_QWORD *)&v317 + 1) = v317;
        v318 = v317 + 24;
        *((_QWORD *)&v317 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v318, &v342, (__int128 *)buf, (std::string *)v317);
        marrs::qr::orchestration::QRToken::QRToken((std::string *)buf, &v321, (__int128 *)v319, (__int128 **)&v317, 0, 0);
        v34 = v292.__r_.__value_.__l.__size_;
        if (v292.__r_.__value_.__l.__size_ >= v292.__r_.__value_.__r.__words[2])
        {
          v292.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v292, (__int128 *)buf);
          if (SHIBYTE(v352) < 0)
            operator delete((void *)__p);
        }
        else
        {
          v35 = *(_OWORD *)buf;
          *(_QWORD *)(v292.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)&buf[16];
          *(_OWORD *)v34 = v35;
          memset(buf, 0, 24);
          v36 = *(_QWORD *)&buf[40];
          *(_OWORD *)(v34 + 24) = *(_OWORD *)&buf[24];
          *(_QWORD *)(v34 + 40) = v36;
          *(_QWORD *)(v34 + 48) = 0;
          memset(&buf[24], 0, 24);
          *(_QWORD *)(v34 + 56) = 0;
          *(_QWORD *)(v34 + 64) = 0;
          *(_OWORD *)(v34 + 48) = *(_OWORD *)&buf[48];
          *(_QWORD *)(v34 + 64) = v345;
          *(_OWORD *)&buf[48] = 0uLL;
          v345 = 0;
          v37 = v346;
          *(_OWORD *)(v34 + 88) = v347;
          *(_OWORD *)(v34 + 72) = v37;
          v38 = v348;
          *(_QWORD *)(v34 + 120) = v349;
          *(_OWORD *)(v34 + 104) = v38;
          v349 = 0;
          v348 = 0uLL;
          *(_BYTE *)(v34 + 128) = (_BYTE)v350;
          v39 = __p;
          *(_QWORD *)(v34 + 152) = v352;
          *(_OWORD *)(v34 + 136) = v39;
          v352 = 0;
          __p = 0uLL;
          v292.__r_.__value_.__l.__size_ = v34 + 160;
        }
        if (SHIBYTE(v349) < 0)
          operator delete((void *)v348);
        v340[0] = &buf[48];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
        if ((buf[47] & 0x80000000) != 0)
          operator delete(*(void **)&buf[24]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v340[0] = &v317;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
        if (SHIBYTE(v343) < 0)
          operator delete((void *)v342);
        if (v320 < 0)
          operator delete(v319[0]);
        if (SHIBYTE(v322) < 0)
          operator delete((void *)v321);
        v40 = v282->var1.var0;
        v321 = 0uLL;
        v322 = 0;
        v41 = (char *)v40 + v32;
        if (v287)
        {
          v42 = *(_QWORD *)((char *)&v40[-1] + v32 - 80);
          v43 = *((_QWORD *)v41 - 24);
        }
        else
        {
          v42 = *(_QWORD *)((char *)&v40[-1] + v32 - 104);
          v43 = *((_QWORD *)v41 - 27);
        }
        if (v42 != v43 && &v321 != (__int128 *)(v42 + 40))
          std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)&v321, *(std::string **)(v42 + 40), *(std::string **)(v42 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v42 + 48) - *(_QWORD *)(v42 + 40)) >> 5));
        marrs::qr::processing::filterTokens((uint64_t)buf, (unint64_t *)&v321, v289);
        std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate(v325);
        *(_OWORD *)v325 = *(_OWORD *)buf;
        v326 = *(_QWORD *)&buf[16];
        memset(buf, 0, 24);
        v319[0] = buf;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
        std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v292, v292.__r_.__value_.__l.__size_, (std::string *)v325[0], (uint64_t)v325[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v325[1] - (char *)v325[0]) >> 5));
        if (*((_BYTE *)v281 + 155))
        {
          std::string::basic_string[abi:ne180100]<0>(v319, "[SOR]");
          std::string::basic_string[abi:ne180100]<0>(&v317, "[SOR]");
          std::string::basic_string[abi:ne180100]<0>(v340, "[SOR]");
          v342 = 0uLL;
          v343 = 0;
          v323 = (void **)&v342;
          v324 = 0;
          *(_QWORD *)&v342 = operator new(0x18uLL);
          *((_QWORD *)&v342 + 1) = v342;
          v343 = v342 + 24;
          *((_QWORD *)&v342 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v343, (__int128 *)v340, &v342, (std::string *)v342);
          marrs::qr::orchestration::QRToken::QRToken((std::string *)buf, (__int128 *)v319, &v317, (__int128 **)&v342, 0, 0);
          v44 = v292.__r_.__value_.__l.__size_;
          if (v292.__r_.__value_.__l.__size_ >= v292.__r_.__value_.__r.__words[2])
          {
            v292.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v292, (__int128 *)buf);
            if (SHIBYTE(v352) < 0)
              operator delete((void *)__p);
          }
          else
          {
            v45 = *(_OWORD *)buf;
            *(_QWORD *)(v292.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)&buf[16];
            *(_OWORD *)v44 = v45;
            memset(buf, 0, 24);
            v46 = *(_QWORD *)&buf[40];
            *(_OWORD *)(v44 + 24) = *(_OWORD *)&buf[24];
            *(_QWORD *)(v44 + 40) = v46;
            *(_QWORD *)(v44 + 48) = 0;
            memset(&buf[24], 0, 24);
            *(_QWORD *)(v44 + 56) = 0;
            *(_QWORD *)(v44 + 64) = 0;
            *(_OWORD *)(v44 + 48) = *(_OWORD *)&buf[48];
            *(_QWORD *)(v44 + 64) = v345;
            *(_OWORD *)&buf[48] = 0uLL;
            v345 = 0;
            v47 = v346;
            *(_OWORD *)(v44 + 88) = v347;
            *(_OWORD *)(v44 + 72) = v47;
            v48 = v348;
            *(_QWORD *)(v44 + 120) = v349;
            *(_OWORD *)(v44 + 104) = v48;
            v349 = 0;
            v348 = 0uLL;
            *(_BYTE *)(v44 + 128) = (_BYTE)v350;
            v49 = __p;
            *(_QWORD *)(v44 + 152) = v352;
            *(_OWORD *)(v44 + 136) = v49;
            v352 = 0;
            __p = 0uLL;
            v292.__r_.__value_.__l.__size_ = v44 + 160;
          }
          if (SHIBYTE(v349) < 0)
            operator delete((void *)v348);
          v323 = (void **)&buf[48];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v323);
          if ((buf[47] & 0x80000000) != 0)
            operator delete(*(void **)&buf[24]);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v323 = (void **)&v342;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v323);
          if (v341 < 0)
            operator delete(v340[0]);
          if (SHIBYTE(v318) < 0)
            operator delete((void *)v317);
          if (v320 < 0)
            operator delete(v319[0]);
          marrs::qr::processing::filterTokens((uint64_t)buf, (unint64_t *)((char *)&v282->var1.var0[-1] + v32 - 56), v289);
          std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate(v325);
          *(_OWORD *)v325 = *(_OWORD *)buf;
          v326 = *(_QWORD *)&buf[16];
          memset(buf, 0, 24);
          v319[0] = buf;
          std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
          std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v292, v292.__r_.__value_.__l.__size_, (std::string *)v325[0], (uint64_t)v325[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v325[1] - (char *)v325[0]) >> 5));
        }
        *(_QWORD *)buf = &v321;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v32 -= 112;
        --v33;
      }
      while (v33);
    }
    marrs::qr::processing::getFlattenedNormalizedValuesIndices(buf, (uint64_t *)&v292, (_QWORD *)v281 + 1);
    *(_QWORD *)&v321 = &v338;
    *((_QWORD *)&v321 + 1) = &v337;
    std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<unsigned long> &,std::vector<std::vector<unsigned long>> &>,std::tuple<std::vector<unsigned long>,std::vector<std::vector<unsigned long>>>,0ul,1ul>((uint64_t)&v321, (uint64_t)buf);
    *(_QWORD *)&v321 = &buf[24];
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    v321 = 0uLL;
    v322 = 0;
    v280 = v292.__r_.__value_.__l.__size_;
    if (v292.__r_.__value_.__r.__words[0] != v292.__r_.__value_.__l.__size_)
    {
      v50 = 0;
      v51 = v292.__r_.__value_.__r.__words[0];
      do
      {
        v283 = v51;
        v53 = *(_QWORD *)(v51 + 48);
        v52 = *(_QWORD *)(v51 + 56);
        v288 = v52;
        while (v53 != v52)
        {
          v54 = *(unsigned __int8 *)(v53 + 23);
          if ((v54 & 0x80u) == 0)
            v55 = (char *)v53;
          else
            v55 = *(char **)v53;
          v56 = 0;
          if ((v54 & 0x80u) != 0)
            v54 = *(_QWORD *)(v53 + 8);
          if (v54)
          {
            v57 = &v55[v54];
            v290 = 0u;
            do
            {
              v58 = *v55;
              buf[23] = 1;
              buf[0] = v58;
              buf[1] = 0;
              if (std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v297, buf))
              {
                buf[23] = 1;
                buf[0] = v58;
                buf[1] = 0;
                v59 = marrs::qr::processing::Vocab::toIndex(&v297, buf);
                v60 = v59;
                v61 = *((_QWORD *)&v290 + 1);
                if (*((_QWORD *)&v290 + 1) >= v56)
                {
                  v65 = (void *)v290;
                  v66 = (uint64_t)(*((_QWORD *)&v290 + 1) - v290) >> 3;
                  v67 = v66 + 1;
                  if ((unint64_t)(v66 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v56 - v290) >> 2 > v67)
                    v67 = (uint64_t)(v56 - v290) >> 2;
                  if (v56 - (unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8)
                    v68 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v68 = v67;
                  if (v68)
                    v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v68);
                  else
                    v69 = 0;
                  v75 = (uint64_t *)(v68 + 8 * v66);
                  *v75 = v60;
                  v62 = (uint64_t)(v75 + 1);
                  while (v61 != (_QWORD)v290)
                  {
                    v76 = *(_QWORD *)(v61 - 8);
                    v61 -= 8;
                    *--v75 = v76;
                  }
                  v56 = v68 + 8 * v69;
                  *(_QWORD *)&v290 = v75;
                  if (v65)
                    operator delete(v65);
                }
                else
                {
                  **((_QWORD **)&v290 + 1) = v59;
                  v62 = *((_QWORD *)&v290 + 1) + 8;
                }
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                *(_QWORD *)&v77 = v290;
                *((_QWORD *)&v77 + 1) = v62;
              }
              else
              {
                v63 = *((_QWORD *)&v290 + 1);
                if (*((_QWORD *)&v290 + 1) >= v56)
                {
                  v70 = (void *)v290;
                  v71 = (uint64_t)(*((_QWORD *)&v290 + 1) - v290) >> 3;
                  v72 = v71 + 1;
                  if ((unint64_t)(v71 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v56 - v290) >> 2 > v72)
                    v72 = (uint64_t)(v56 - v290) >> 2;
                  if (v56 - (unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8)
                    v73 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v73 = v72;
                  if (v73)
                    v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v73);
                  else
                    v74 = 0;
                  v78 = (_QWORD *)(v73 + 8 * v71);
                  *v78 = 0;
                  v64 = (uint64_t)(v78 + 1);
                  while (v63 != (_QWORD)v290)
                  {
                    v79 = *(_QWORD *)(v63 - 8);
                    v63 -= 8;
                    *--v78 = v79;
                  }
                  v56 = v73 + 8 * v74;
                  *(_QWORD *)&v290 = v78;
                  if (v70)
                    operator delete(v70);
                }
                else
                {
                  **((_QWORD **)&v290 + 1) = 0;
                  v64 = *((_QWORD *)&v290 + 1) + 8;
                }
                *(_QWORD *)&v77 = v290;
                *((_QWORD *)&v77 + 1) = v64;
              }
              v290 = v77;
              ++v55;
            }
            while (v55 != v57);
            v50 = (char **)*((_QWORD *)&v321 + 1);
          }
          else
          {
            v290 = 0u;
          }
          if ((unint64_t)v50 >= v322)
          {
            v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v50 - v321) >> 3);
            v81 = v80 + 1;
            if (v80 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v322 - v321) >> 3) > v81)
              v81 = 0x5555555555555556 * ((uint64_t)(v322 - v321) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v322 - v321) >> 3) >= 0x555555555555555)
              v82 = 0xAAAAAAAAAAAAAAALL;
            else
              v82 = v81;
            *(_QWORD *)&buf[32] = &v322;
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v82);
            v84 = &v83[24 * v80];
            *(_QWORD *)buf = v83;
            *(_QWORD *)&buf[8] = v84;
            *(_QWORD *)&buf[24] = &v83[24 * v85];
            *(_OWORD *)v84 = v290;
            *((_QWORD *)v84 + 2) = v56;
            *(_QWORD *)&buf[16] = v84 + 24;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v321, buf);
            v50 = (char **)*((_QWORD *)&v321 + 1);
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(_OWORD *)v50 = v290;
            v50[2] = (char *)v56;
            v50 += 3;
          }
          *((_QWORD *)&v321 + 1) = v50;
          v53 += 24;
          v52 = v288;
        }
        v51 = v283 + 160;
      }
      while (v283 + 160 != v280);
      v86 = (char **)v321;
      if ((char **)v321 != v50)
      {
        v87 = 0;
        v88 = (uint64_t *)v321;
        do
        {
          v90 = *v88;
          v89 = v88[1];
          v88 += 3;
          v91 = (v89 - v90) >> 3;
          if (v87 <= v91)
            v87 = v91;
        }
        while (v88 != (uint64_t *)v50);
        v92 = 8 * v87;
        do
        {
          v94 = *v86;
          v93 = v86[1];
          v95 = (v93 - *v86) >> 3;
          if (v87 <= v95)
          {
            if (v87 < v95)
              v86[1] = &v94[8 * v87];
          }
          else
          {
            v96 = v86[2];
            if (v87 - v95 <= (v96 - v93) >> 3)
            {
              v108 = &v93[8 * (v87 - v95)];
              v109 = v92 - 8 * v95;
              do
              {
                *(_QWORD *)v93 = v275;
                v93 += 8;
                v109 -= 8;
              }
              while (v109);
              v86[1] = v108;
            }
            else
            {
              if (v87 >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v97 = v96 - v94;
              v98 = (v96 - v94) >> 2;
              if (v98 <= v87)
                v98 = v87;
              if (v97 >= 0x7FFFFFFFFFFFFFF8)
                v99 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v99 = v98;
              v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v99);
              v102 = &v100[8 * v95];
              v103 = v92 - 8 * v95;
              v104 = v102;
              do
              {
                *(_QWORD *)v104 = v275;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
              v105 = *v86;
              for (i = v86[1]; i != v105; i -= 8)
              {
                v107 = *((_QWORD *)i - 1);
                *((_QWORD *)v102 - 1) = v107;
                v102 -= 8;
              }
              *v86 = v102;
              v86[1] = &v100[8 * v87];
              v86[2] = &v100[8 * v101];
              if (v105)
                operator delete(v105);
            }
          }
          v86 += 3;
        }
        while (v86 != v50);
      }
    }
    v327[0] = 0;
    v327[1] = 0;
    __sz[0] = 0;
    std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v327, (uint64_t)v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v292.__r_.__value_.__l.__size_ - v292.__r_.__value_.__r.__words[0]) >> 5));
    v329 = 0uLL;
    __sz[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__sz[1], (const void *)v338, *((uint64_t *)&v338 + 1), (uint64_t)(*((_QWORD *)&v338 + 1) - v338) >> 3);
    v14 = spid;
    v330[1] = 0;
    v330[0] = 0;
    v331[0] = 0;
    std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v330, (uint64_t)v337.__begin_, (uint64_t)v337.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v337.__end_ - (char *)v337.__begin_) >> 3));
    memset(v332, 0, sizeof(v332));
    v331[1] = 0;
    std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v331[1], v321, *((uint64_t *)&v321 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v321 + 1) - v321) >> 3));
    v15 = v281;
    *(_QWORD *)buf = &v321;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v325;
    std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v21 = v274;
  }
  else
  {
    *(_OWORD *)v331 = 0u;
    *(_OWORD *)v332 = 0u;
    v329 = 0u;
    *(_OWORD *)v330 = 0u;
    *(_OWORD *)v327 = 0u;
    *(_OWORD *)__sz = 0u;
  }
  *(_QWORD *)buf = &v337;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((_QWORD)v338)
  {
    *((_QWORD *)&v338 + 1) = v338;
    operator delete((void *)v338);
  }
  *(_QWORD *)buf = &v292;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)&v314, (std::string *)v327[0], (std::string *)v327[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v327[1] - (char *)v327[0]) >> 5));
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v311, (char *)__sz[1], v329, (uint64_t)(v329 - __sz[1]) >> 3);
  std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v308, (uint64_t)v330[0], (uint64_t)v330[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v330[1] - (char *)v330[0]) >> 3));
  std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v305, (uint64_t)v331[1], *(uint64_t *)v332, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v332 - (unint64_t)v331[1]) >> 3));
  *(_QWORD *)buf = &v331[1];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v330;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__sz[1])
  {
    *(_QWORD *)&v329 = __sz[1];
    operator delete((void *)__sz[1]);
  }
  *(_QWORD *)buf = v327;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v297);
  v110 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "predict";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 0xCCCCCCCCCCCCCCCDLL * ((v315 - v314) >> 5);
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = (v312 - (uint64_t)v311) >> 3;
    _os_log_debug_impl(&dword_1C281A000, v110, OS_LOG_TYPE_DEBUG, "%s Finished preprocessing. inputToken size: %lu, tokenIndices size: %lu", buf, 0x20u);
  }
  if (v273 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v21, OS_SIGNPOST_INTERVAL_END, v14, "PreProcessDuration", " enableTelemetry=YES ", buf, 2u);
  }
  v111 = os_signpost_id_generate(v21);
  v276 = v111 - 1;
  if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v21, OS_SIGNPOST_INTERVAL_BEGIN, v111, "ForwardDuration", "CCQR Inference duration", buf, 2u);
  }
  spida = v111;
  v297 = 0;
  v298 = 0;
  v299 = 0;
  v112 = (v312 - (uint64_t)v311) >> 3;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v297, v311, v312, v112);
  v300 = 0;
  v301 = 0;
  v302 = 0;
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v300, v305, v306, 0xAAAAAAAAAAAAAAABLL * ((v306 - v305) >> 3));
  v303 = *((_QWORD *)v15 + 27);
  v304 = vrev64_s32(*(int32x2_t *)((char *)v15 + 224));
  v113 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
  {
    v246 = *((_QWORD *)v15 + 27);
    v247 = *((float *)v15 + 57);
    v248 = *((float *)v15 + 56);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "predict";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v112;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 0xAAAAAAAAAAAAAAABLL * ((v306 - v305) >> 3);
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v246;
    *(_WORD *)&buf[42] = 2048;
    *(double *)&buf[44] = v247;
    *(_WORD *)&buf[52] = 2048;
    *(double *)&buf[54] = v248;
    _os_log_debug_impl(&dword_1C281A000, v113, OS_LOG_TYPE_DEBUG, "%s Model inference input metadata: tokenIndices size: %lu, charIndices size: %lu, numDecoderSteps: %zu, aerDecisionThreshold: %.2f, cbrDecisionThreshold: %.2f", buf, 0x3Eu);
  }
  v114 = *((_QWORD *)v15 + 34);
  *(_OWORD *)buf = xmmword_1E7C66740;
  *(_OWORD *)&buf[16] = *(_OWORD *)off_1E7C66750;
  *(_QWORD *)&buf[32] = "cbr_threshold";
  v115 = -1431655765 * ((unint64_t)(v301 - v300) >> 3);
  if (!v115)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v327, "Expect column size to be greater than zero for paddedTokenCharIndices");
    std::string::basic_string[abi:ne180100]<0>(&v338, "QueryRewrite");
    InferenceError::InferenceError(exception, (uint64_t)v327, (uint64_t)&v338, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_joint_ccqr_module.cpp", 73);
    *exception = &off_1E7C679A0;
  }
  v117 = *(_QWORD *)v300;
  v116 = *((_QWORD *)v300 + 1);
  v118 = operator new(0x14uLL);
  *v118 = v115;
  v118[1] = (unint64_t)(v116 - v117) >> 3;
  *((_QWORD *)v118 + 1) = 0x100000001;
  v118[4] = 1;
  v119 = operator new(0x14uLL);
  *v119 = -1;
  v119[1] = v115;
  *((_QWORD *)v119 + 1) = -1;
  v119[4] = -1;
  v120 = operator new(0x14uLL);
  v120[4] = 1;
  *(_OWORD *)v120 = xmmword_1C289E188;
  v121 = operator new(0x14uLL);
  *v121 = -1;
  v121[1] = -1;
  *((_DWORD *)v121 + 4) = -1;
  v122 = operator new(0x14uLL);
  *v122 = -1;
  v122[1] = -1;
  *((_DWORD *)v122 + 4) = -1;
  v123 = operator new(0x14uLL);
  v123[4] = 1;
  *(_OWORD *)v123 = xmmword_1C289E19C;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    v268 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v327, "Failed to reshape input blobs as input shape doesn't match shape of network input");
    std::string::basic_string[abi:ne180100]<0>(&v338, "QueryRewrite");
    InferenceError::InferenceError(v268, (uint64_t)v327, (uint64_t)&v338, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_joint_ccqr_module.cpp", 87);
    *v268 = &off_1E7C679A0;
  }
  operator delete(v123);
  operator delete(v122);
  operator delete(v121);
  operator delete(v120);
  operator delete(v119);
  operator delete(v118);
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(v114 + 8));
  v125 = (unint64_t *)v297;
  v124 = v298;
  memset(buf, 0, 24);
  v126 = operator new(8uLL);
  *(_QWORD *)buf = v126;
  v127 = v124 - v125;
  *v126 = v127;
  *(_QWORD *)&buf[16] = v126 + 1;
  *(_QWORD *)&buf[8] = v126 + 1;
  memset(&buf[24], 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(&buf[24], v125, v124, v127);
  v278 = v114;
  v129 = (unint64_t **)v300;
  v128 = (os_signpost_id_t)v301;
  if (v301 == v300)
  {
    v269 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v327, "Expect non-empty matrix, received matrix with first dimension as 0");
    std::string::basic_string[abi:ne180100]<0>(&v338, "QueryRewrite");
    InferenceError::InferenceError(v269, (uint64_t)v327, (uint64_t)&v338, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 28);
  }
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v279 = 0xAAAAAAAAAAAAAAABLL * ((v301 - v300) >> 3);
  v133 = *((_QWORD *)v300 + 1) - *(_QWORD *)v300;
  v134 = v133 >> 3;
  v284 = v133 >> 1;
  v285 = (os_signpost_id_t)v301;
  v291 = v133;
  do
  {
    v136 = *v129;
    v135 = v129[1];
    if (v134 != v135 - *v129)
    {
      v263 = __cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(v327, "Expect matrix with same size in every row, received different sizes");
      std::string::basic_string[abi:ne180100]<0>(&v338, "QueryRewrite");
      InferenceError::InferenceError(v263, (uint64_t)v327, (uint64_t)&v338, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 35);
    }
    if (v133 >= 1)
    {
      v137 = (uint64_t)(v131 - (_QWORD)v130) >> 2;
      v138 = (char *)v130 + ((v131 - (_QWORD)v130) & 0xFFFFFFFFFFFFFFFCLL);
      if (v134 <= (uint64_t)&v132[-v131] >> 2)
      {
        v144 = (uint64_t)(v131 - (_QWORD)v138) >> 2;
        if (v144 >= v134)
        {
          v145 = &v136[v134];
          v147 = (float *)v131;
        }
        else
        {
          v145 = &v136[v144];
          if (v145 == v135)
          {
            v147 = (float *)v131;
          }
          else
          {
            v146 = &v136[v144];
            v147 = (float *)v131;
            do
            {
              v148 = *v146++;
              *v147++ = (float)v148;
            }
            while (v146 != v135);
          }
          if ((uint64_t)(v131 - (_QWORD)v138) < 1)
          {
            v131 = (unint64_t)v147;
            goto LABEL_229;
          }
        }
        v156 = &v147[-v134];
        v157 = v147;
        while ((unint64_t)v156 < v131)
        {
          v158 = *(_DWORD *)v156++;
          *(_DWORD *)v157++ = v158;
        }
        v159 = (float *)&v138[4 * v134];
        if (v147 != v159)
        {
          memmove(&v147[-(v147 - v159)], (char *)v130 + ((v131 - (_QWORD)v130) & 0xFFFFFFFFFFFFFFFCLL), (char *)v147 - (char *)v159);
          v133 = v291;
        }
        if (v145 != v136)
        {
          v160 = (uint64_t)(v131 - (_QWORD)v130) >> 2;
          do
          {
            v161 = *v136++;
            v130[v160++] = (float)v161;
          }
          while (v136 != v145);
        }
        v131 = (unint64_t)v157;
      }
      else
      {
        v139 = v137 + v134;
        if ((unint64_t)(v137 + v134) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((v132 - (char *)v130) >> 1 > v139)
          v139 = (v132 - (char *)v130) >> 1;
        if ((unint64_t)(v132 - (char *)v130) >= 0x7FFFFFFFFFFFFFFCLL)
          v140 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v140 = v139;
        if (v140)
        {
          v141 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v140);
          v143 = v142;
        }
        else
        {
          v141 = 0;
          v143 = 0;
        }
        v149 = &v141[v137];
        v150 = &v149[v134];
        v151 = v284;
        v152 = v149;
        do
        {
          v153 = *v136++;
          *v152++ = (float)v153;
          v151 -= 4;
        }
        while (v151);
        if ((float *)v131 != v130)
        {
          v154 = (uint64_t)(v131 - (_QWORD)v130) >> 2;
          do
          {
            v141[v154 - 1] = v130[v154 - 1];
            --v154;
          }
          while (v154 * 4);
          v149 = v141;
        }
        v155 = v131 - (_QWORD)v138;
        if (v155)
          memmove(v150, v138, v155);
        v132 = (char *)&v141[v143];
        v131 = (unint64_t)v150 + v155;
        if (v130)
          operator delete(v130);
        v130 = v149;
        v128 = v285;
        v133 = v291;
      }
    }
LABEL_229:
    v129 += 3;
  }
  while (v129 != (unint64_t **)v128);
  *(_OWORD *)&buf[48] = 0uLL;
  v345 = 0;
  v162 = operator new(0x10uLL);
  *v162 = v279;
  v162[1] = v134;
  *(_QWORD *)&buf[48] = v162;
  *(_QWORD *)&buf[56] = v162 + 2;
  v345 = v162 + 2;
  v346 = 0uLL;
  *(_QWORD *)&v347 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v346, v130, v131, (uint64_t)(v131 - (_QWORD)v130) >> 2);
  v163 = v274;
  j = v281;
  if (v130)
    operator delete(v130);
  v165 = v303;
  *((_QWORD *)&v347 + 1) = 0;
  v348 = 0uLL;
  v166 = operator new(8uLL);
  *v166 = 1;
  *((_QWORD *)&v347 + 1) = v166;
  *(_QWORD *)&v348 = v166 + 1;
  *((_QWORD *)&v348 + 1) = v166 + 1;
  v349 = 0;
  *(_QWORD *)&__p = 0;
  v350 = 0;
  v167 = (float *)operator new(4uLL);
  v349 = v167;
  *v167 = (float)v165;
  *(_QWORD *)&__p = v167 + 1;
  v350 = v167 + 1;
  marrs::TensorConvertor<float>::convert((_QWORD *)&__p + 1, *(float *)v304.i32);
  marrs::TensorConvertor<float>::convert(v353, *(float *)&v304.i32[1]);
  std::string::basic_string[abi:ne180100]<0>(v327, "token_indices");
  marrs::inference_engine::EspressoModule::setInput(v278, (uint64_t)v327, (uint64_t)buf);
  if (SHIBYTE(__sz[0]) < 0)
    operator delete(v327[0]);
  std::string::basic_string[abi:ne180100]<0>(v327, "padded_tokens_char_indices");
  marrs::inference_engine::EspressoModule::setInput(v278, (uint64_t)v327, (uint64_t)&buf[48]);
  if (SHIBYTE(__sz[0]) < 0)
    operator delete(v327[0]);
  std::string::basic_string[abi:ne180100]<0>(v327, "max_length");
  marrs::inference_engine::EspressoModule::setInput(v278, (uint64_t)v327, (uint64_t)&v347 + 8);
  if (SHIBYTE(__sz[0]) < 0)
    operator delete(v327[0]);
  std::string::basic_string[abi:ne180100]<0>(v327, "aer_threshold");
  marrs::inference_engine::EspressoModule::setInput(v278, (uint64_t)v327, (uint64_t)&__p + 8);
  if (SHIBYTE(__sz[0]) < 0)
    operator delete(v327[0]);
  std::string::basic_string[abi:ne180100]<0>(v327, "cbr_threshold");
  marrs::inference_engine::EspressoModule::setInput(v278, (uint64_t)v327, (uint64_t)v353);
  if (SHIBYTE(__sz[0]) < 0)
    operator delete(v327[0]);
  marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(v278 + 8));
  std::string::basic_string[abi:ne180100]<0>(&v338, "copy_indices");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v327, v278);
  std::string::basic_string[abi:ne180100]<0>(&v337, "gate_prob");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v330, v278);
  std::string::basic_string[abi:ne180100]<0>(v325, "gate_prediction");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v333, v278);
  if (SHIBYTE(v326) < 0)
    operator delete(v325[0]);
  if (SHIBYTE(v337.__end_cap_.__value_) < 0)
    operator delete(v337.__begin_);
  if (SHIBYTE(v339) < 0)
    operator delete((void *)v338);
  if (v327[1] == v327[0]
    || (v168 = (float *)v329, v169 = (float *)__sz[1], v170 = (uint64_t)(v329 - __sz[1]) >> 2, v170 != *(_QWORD *)v327[0]))
  {
    v264 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v338, "Expect non-empty tensor, received empty tensor");
    std::string::basic_string[abi:ne180100]<0>(&v337, "QueryRewrite");
    InferenceError::InferenceError(v264, (uint64_t)&v338, (uint64_t)&v337, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 52);
  }
  memset(&v292, 0, sizeof(v292));
  if ((_QWORD)v329 != __sz[1])
  {
    if ((unint64_t)v329 - __sz[1] >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v171 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v170);
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
    v292.__r_.__value_.__r.__words[2] = (std::string::size_type)&v171[v172];
    do
    {
      v173 = *v169++;
      *v171++ = (unint64_t)v173;
    }
    while (v169 != v168);
    v292.__r_.__value_.__l.__size_ = (std::string::size_type)v171;
  }
  if (v330[1] == v330[0]
    || (v174 = v331[1],
        v175 = *(_QWORD *)v332 - (unint64_t)v331[1],
        v176 = (uint64_t)(*(_QWORD *)v332 - (unint64_t)v331[1]) >> 2,
        v176 != *(_QWORD *)v330[0]))
  {
    v265 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v338, "Expect non-empty tensor, received empty tensor");
    std::string::basic_string[abi:ne180100]<0>(&v337, "QueryRewrite");
    InferenceError::InferenceError(v265, (uint64_t)&v338, (uint64_t)&v337, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 52);
  }
  v293 = 0;
  v294 = 0;
  v295 = 0;
  if (*(void **)v332 != v331[1])
  {
    if ((v175 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v177 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(*(_QWORD *)v332
                                                                                         - (unint64_t)v331[1]) >> 2);
    v293 = v177;
    v294 = v177;
    v295 = &v177[4 * v178];
    memmove(v177, v174, v175);
    v294 = &v177[4 * v176];
  }
  if (v334 == v333 || v336 - (_BYTE *)v335 != 4)
  {
    v266 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v338, "Expect non-empty tensor, received empty tensor");
    std::string::basic_string[abi:ne180100]<0>(&v337, "QueryRewrite");
    InferenceError::InferenceError(v266, (uint64_t)&v338, (uint64_t)&v337, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 44);
  }
  v296 = (unint64_t)*(float *)v335;
  v336 = v335;
  operator delete(v335);
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
  if (v331[1])
  {
    *(void **)v332 = v331[1];
    operator delete(v331[1]);
  }
  if (v330[0])
  {
    v330[1] = v330[0];
    operator delete(v330[0]);
  }
  if (__sz[1])
  {
    *(_QWORD *)&v329 = __sz[1];
    operator delete((void *)__sz[1]);
  }
  if (v327[0])
  {
    v327[1] = v327[0];
    operator delete(v327[0]);
  }
  JointCCQRModuleInputTensor::~JointCCQRModuleInputTensor((JointCCQRModuleInputTensor *)buf);
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(v278 + 8));
  v179 = v292.__r_.__value_.__r.__words[0];
  if (v292.__r_.__value_.__l.__size_ != v292.__r_.__value_.__r.__words[0])
  {
    v180 = v292.__r_.__value_.__l.__size_ - (v292.__r_.__value_.__r.__words[0] + 8);
    if (v292.__r_.__value_.__l.__size_ != v292.__r_.__value_.__r.__words[0] + 8)
      memmove(v292.__r_.__value_.__l.__data_, (const void *)(v292.__r_.__value_.__r.__words[0] + 8), v292.__r_.__value_.__l.__size_ - (v292.__r_.__value_.__r.__words[0] + 8));
    v292.__r_.__value_.__l.__size_ = v179 + v180;
  }
  v181 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
  {
    v249 = *(float *)v293;
    v250 = *((float *)v293 + 1);
    v251 = *((float *)v293 + 2);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "predict";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = (uint64_t)(v292.__r_.__value_.__l.__size_ - v292.__r_.__value_.__r.__words[0]) >> 3;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v249;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = v250;
    *(_WORD *)&buf[42] = 2048;
    *(double *)&buf[44] = v251;
    *(_WORD *)&buf[52] = 2048;
    *(_QWORD *)&buf[54] = v296;
    _os_log_debug_impl(&dword_1C281A000, v181, OS_LOG_TYPE_DEBUG, "%s Model inference output metadata: copyIndices size: %lu, gateProb: [%.2f, %.2f, %.2f], gatePrediction: %zu", buf, 0x3Eu);
  }
  if (v276 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v274))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v274, OS_SIGNPOST_INTERVAL_END, spida, "ForwardDuration", " enableTelemetry=YES ", buf, 2u);
  }
  v286 = os_signpost_id_generate(v274);
  if (v286 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v274))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v274, OS_SIGNPOST_INTERVAL_BEGIN, v286, "PostProcessDuration", "CCQR PostProcessing duration", buf, 2u);
  }
  memset(&v337, 0, sizeof(v337));
  v182 = v292.__r_.__value_.__r.__words[0];
  if (v292.__r_.__value_.__l.__size_ != v292.__r_.__value_.__r.__words[0])
  {
    end = 0;
    v184 = 0;
    v185 = (uint64_t)(v292.__r_.__value_.__l.__size_ - v292.__r_.__value_.__r.__words[0]) >> 3;
    while (2)
    {
      v186 = v184 + 1;
      v187 = *(_QWORD *)(v182 + 8 * v184);
      v188 = 0xAAAAAAAAAAAAAAABLL * ((v309 - v308) >> 3);
      if (v187 < v188)
      {
        if (v186 < v185)
        {
          v189 = v184;
          while (1)
          {
            v190 = *(_QWORD *)(v182 + 8 * v189 + 8);
            if (v190 >= v188 || *(_QWORD *)(v182 + 8 * v189) != v190 - 1)
              break;
            if (**(_QWORD **)(v308 + 24 * v190) != **(_QWORD **)(v308 + 24 * v187))
            {
              v186 = v189 + 1;
              break;
            }
            ++v186;
            if (v185 - 1 == ++v189)
            {
              v186 = v185;
              break;
            }
          }
        }
        v191 = **(_QWORD **)(v308 + 24 * v187);
        v192 = v314;
        v193 = v314 + 160 * v191;
        v194 = (_QWORD *)(v193 + 48);
        if (v186 - v184 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v193 + 56) - *(_QWORD *)(v193 + 48)) >> 3))
        {
          if (v186 > v184)
          {
            do
            {
              v196 = *v194
                   + 24
                   * *(_QWORD *)(*(_QWORD *)(v308 + 24 * *(_QWORD *)(v292.__r_.__value_.__r.__words[0] + 8 * v184))
                               + 8);
              if (end >= v337.__end_cap_.__value_)
              {
                v198 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v337, (__int128 *)v196);
              }
              else
              {
                if (*(char *)(v196 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v196, *(_QWORD *)(v196 + 8));
                }
                else
                {
                  v197 = *(_OWORD *)v196;
                  end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v196 + 16);
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v197;
                }
                v198 = end + 1;
              }
              v337.__end_ = v198;
              if (v198 >= v337.__end_cap_.__value_)
              {
                v199 = 0xAAAAAAAAAAAAAAABLL * (((char *)v198 - (char *)v337.__begin_) >> 3);
                v200 = v199 + 1;
                if (v199 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v337.__end_cap_.__value_ - (char *)v337.__begin_) >> 3) > v200)
                  v200 = 0x5555555555555556 * (((char *)v337.__end_cap_.__value_ - (char *)v337.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v337.__end_cap_.__value_ - (char *)v337.__begin_) >> 3) >= 0x555555555555555)
                  v201 = 0xAAAAAAAAAAAAAAALL;
                else
                  v201 = v200;
                *(_QWORD *)&buf[32] = &v337.__end_cap_;
                if (v201)
                  v201 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v201);
                else
                  v202 = 0;
                *(_QWORD *)buf = v201;
                *(_QWORD *)&buf[8] = v201 + 24 * v199;
                *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                *(_QWORD *)&buf[24] = v201 + 24 * v202;
                std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)&buf[8], " ");
                *(_QWORD *)&buf[16] += 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v337, (std::__split_buffer<std::string> *)buf);
                end = v337.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)buf);
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v198, " ");
                end = v198 + 1;
              }
              v337.__end_ = end;
              ++v184;
            }
            while (v186 != v184);
          }
          goto LABEL_337;
        }
        if ((char *)std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>((const void **)(v314 + 160 * v191))
           - (char *)&marrs::qr::processing::Vocab::reservedTokens == 112)
        {
          if (end >= v337.__end_cap_.__value_)
          {
            end = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v337, (__int128 *)v193);
          }
          else
          {
            if (*(char *)(v193 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v193, *(_QWORD *)(v193 + 8));
            }
            else
            {
              v195 = *(_OWORD *)v193;
              end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v193 + 16);
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v195;
            }
            ++end;
          }
          v337.__end_ = end;
          v203 = v192 + 160 * v191;
          v204 = v203 + 136;
          v205 = *(char *)(v203 + 159);
          v206 = *(unsigned __int8 *)(v203 + 159);
          if (v205 < 0)
          {
            if (!*(_QWORD *)(v204 + 8))
              goto LABEL_337;
          }
          else if (!v206)
          {
            goto LABEL_337;
          }
          if (end >= v337.__end_cap_.__value_)
          {
            end = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v337, (__int128 *)v204);
          }
          else
          {
            if ((v206 & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v204, *(_QWORD *)(v204 + 8));
            }
            else
            {
              v207 = *(_OWORD *)v204;
              end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v204 + 16);
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v207;
            }
            ++end;
          }
          v337.__end_ = end;
        }
      }
LABEL_337:
      v182 = v292.__r_.__value_.__r.__words[0];
      v185 = (uint64_t)(v292.__r_.__value_.__l.__size_ - v292.__r_.__value_.__r.__words[0]) >> 3;
      v184 = v186;
      if (v186 >= v185)
      {
        v163 = v274;
        for (j = v281; v337.__begin_ != end; v337.__end_ = end)
        {
          if (std::string::compare(end - 1, " "))
            break;
          end = v337.__end_ - 1;
          if (SHIBYTE(v337.__end_[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(end->__r_.__value_.__l.__data_);
        }
        break;
      }
      continue;
    }
  }
  v208 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "predict";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * (((char *)v337.__end_ - (char *)v337.__begin_) >> 3);
    _os_log_debug_impl(&dword_1C281A000, v208, OS_LOG_TYPE_DEBUG, "%s Postprocessing output metadata: outputTokens size: %lu", buf, 0x16u);
  }
  v209 = v296;
  begin = v337.__begin_;
  v211 = v337.__end_;
  if (v296 == 2)
  {
    if (v337.__end_ == v337.__begin_)
    {
      v209 = 2;
      v211 = v337.__begin_;
    }
    else
    {
      v212 = v282->var1.var0;
      if (*(double *)(*((_QWORD *)v212 + 14 * v272 - 14) + 88) >= *((float *)j + 59)
        && *(double *)(*((_QWORD *)&v212[-1] + 14 * v272 - 13) + 88) <= *((float *)j + 60))
      {
        v209 = 2;
      }
      else
      {
        v213 = QRLoggerForCategory(2);
        if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "predict";
          _os_log_debug_impl(&dword_1C281A000, v213, OS_LOG_TYPE_DEBUG, "%s Remove CbR rewrite due to ASR confidence gating. Rewrite type is still kept.", buf, 0xCu);
        }
        v211 = v337.__begin_;
        v214 = v337.__end_;
        begin = v337.__begin_;
        if (v337.__end_ != v337.__begin_)
        {
          do
          {
            if (SHIBYTE(v214[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v214[-1].__r_.__value_.__l.__data_);
            --v214;
          }
          while (v214 != v211);
          begin = v337.__begin_;
        }
        v337.__end_ = v211;
        v209 = v296;
      }
    }
  }
  if (v209 != 2 && begin == v211)
    v216 = 5;
  else
    v216 = 0;
  *(_DWORD *)(v277 + 56) = v216;
  v217 = *((float *)v293 + v209);
  *(Uuid *)v327 = v282->var1.var1[-1].var0.var1->var0;
  *(_QWORD *)&v329 = 0;
  __sz[1] = 0;
  __sz[0] = 0;
  *((double *)&v329 + 1) = v217;
  LODWORD(v330[0]) = v209;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  v218 = v337.__begin_;
  if (v337.__end_ != v337.__begin_)
  {
    v219 = 0;
    v220 = 0;
    v221 = &buf[16];
    do
    {
      v222 = &v218[v219];
      v223 = SHIBYTE(v222->__r_.__value_.__r.__words[2]);
      if (v223 >= 0)
        v224 = (uint64_t)v222;
      else
        v224 = v222->__r_.__value_.__r.__words[0];
      if (v223 >= 0)
        v225 = HIBYTE(v222->__r_.__value_.__r.__words[2]);
      else
        v225 = v222->__r_.__value_.__l.__size_;
      v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, v224, v225);
      ++v220;
      v218 = v337.__begin_;
      ++v219;
    }
    while (v220 < 0xAAAAAAAAAAAAAAABLL * (((char *)v337.__end_ - (char *)v337.__begin_) >> 3));
  }
  std::stringbuf::str();
  if (SBYTE7(v329) < 0)
    operator delete((void *)__sz[0]);
  *(_OWORD *)__sz = v338;
  *(_QWORD *)&v329 = v339;
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
  v226 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&buf[16] = v226;
  *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v348) < 0)
    operator delete((void *)v347);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](&v350);
  v227 = *(_QWORD *)(v277 + 16);
  v228 = *(_QWORD *)(v277 + 8);
  if (v228 >= v227)
  {
    v231 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v228 - *(_QWORD *)v277) >> 3);
    if ((unint64_t)(v231 + 1) > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v232 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v227 - *(_QWORD *)v277) >> 3);
    v233 = 2 * v232;
    if (2 * v232 <= v231 + 1)
      v233 = v231 + 1;
    if (v232 >= 0x249249249249249)
      v234 = 0x492492492492492;
    else
      v234 = v233;
    *(_QWORD *)&buf[32] = v277 + 16;
    if (v234)
    {
      v236 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v234);
    }
    else
    {
      v236 = 0;
      v235 = 0;
    }
    v240 = &v236[56 * v231];
    *(_QWORD *)buf = v236;
    *(_QWORD *)&buf[8] = v240;
    *(_QWORD *)&buf[16] = v240;
    *(_QWORD *)&buf[24] = &v236[56 * v235];
    *(_OWORD *)v240 = *(_OWORD *)v327;
    v241 = (std::string *)(v240 + 16);
    if (SBYTE7(v329) < 0)
    {
      std::string::__init_copy_ctor_external(v241, (const std::string::value_type *)__sz[0], __sz[1]);
      v240 = *(char **)&buf[16];
    }
    else
    {
      v242 = *(_OWORD *)__sz;
      *((_QWORD *)v240 + 4) = v329;
      *(_OWORD *)&v241->__r_.__value_.__l.__data_ = v242;
    }
    v243 = &v236[56 * v231];
    v244 = *((_QWORD *)&v329 + 1);
    *((_DWORD *)v243 + 12) = v330[0];
    *((_QWORD *)v243 + 5) = v244;
    *(_QWORD *)&buf[16] = v240 + 56;
    v239 = v277;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer((uint64_t *)v277, buf);
    v238 = *(_QWORD *)(v277 + 8);
    std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *(_OWORD *)v228 = *(_OWORD *)v327;
    v229 = (std::string *)(v228 + 16);
    if (SBYTE7(v329) < 0)
    {
      std::string::__init_copy_ctor_external(v229, (const std::string::value_type *)__sz[0], __sz[1]);
    }
    else
    {
      v230 = *(_OWORD *)__sz;
      *(_QWORD *)(v228 + 32) = v329;
      *(_OWORD *)&v229->__r_.__value_.__l.__data_ = v230;
    }
    v237 = *((_QWORD *)&v329 + 1);
    *(_DWORD *)(v228 + 48) = v330[0];
    *(_QWORD *)(v228 + 40) = v237;
    v238 = v228 + 56;
    v239 = v277;
    *(_QWORD *)(v277 + 8) = v238;
  }
  *(_QWORD *)(v239 + 8) = v238;
  v245 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG))
  {
    v252 = *(unsigned int *)(v277 + 56);
    if (v252 > 5)
      v253 = "UNKNOWN_TYPE";
    else
      v253 = off_1E7C67558[v252];
    std::string::basic_string[abi:ne180100]<0>(&v338, v253);
    if (LODWORD(v330[0]) > 2)
      v254 = "UNKNOWN_TYPE";
    else
      v254 = off_1E7C67540[LODWORD(v330[0])];
    v255 = SHIBYTE(v339);
    v256 = (__int128 *)v338;
    v257 = SBYTE7(v329);
    v258 = __sz[0];
    v259 = *((_QWORD *)&v329 + 1);
    std::string::basic_string[abi:ne180100]<0>(v325, v254);
    if (v257 >= 0)
      v260 = __sz;
    else
      v260 = (std::string::size_type *)v258;
    v261 = &v338;
    if (v255 < 0)
      v261 = v256;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "predict";
    if (v326 >= 0)
      v262 = v325;
    else
      v262 = (void **)v325[0];
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v261;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = v260;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v259;
    *(_WORD *)&buf[42] = 2080;
    *(_QWORD *)&buf[44] = v262;
    _os_log_debug_impl(&dword_1C281A000, v245, OS_LOG_TYPE_DEBUG, "%s Constructing QRResponse. ccqrInferenceStatus: %s, utterance: %s, confidence: %.2f, rewriteType: %s", buf, 0x34u);
    if (SHIBYTE(v326) < 0)
      operator delete(v325[0]);
    if (SHIBYTE(v339) < 0)
      operator delete((void *)v338);
  }
  if (v286 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v163))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v163, OS_SIGNPOST_INTERVAL_END, v286, "PostProcessDuration", " enableTelemetry=YES ", buf, 2u);
  }
  if (SBYTE7(v329) < 0)
    operator delete((void *)__sz[0]);
  *(_QWORD *)buf = &v337;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v293)
  {
    v294 = (char *)v293;
    operator delete(v293);
  }
  if (v292.__r_.__value_.__r.__words[0])
  {
    v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)buf = &v300;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v297)
  {
    v298 = (unint64_t *)v297;
    operator delete(v297);
  }
  *(_QWORD *)buf = &v305;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v308;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v311)
    operator delete(v311);
  *(_QWORD *)buf = &v314;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C286B7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, marrs::inference_engine::InferenceTensor *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a71;

  std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  a71 = &STACK[0x280];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&a27);
  JointCCQRModuleInput::~JointCCQRModuleInput((JointCCQRModuleInput *)&a34);
  a71 = &a44;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  a71 = &a47;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  if (a50)
    operator delete(a50);
  a71 = &a53;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  a71 = a16;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  _Unwind_Resume(a1);
}

void CcqrOrchestrator::~CcqrOrchestrator(CcqrOrchestrator *this)
{
  CcqrOrchestrator::~CcqrOrchestrator(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7C674F8;
  std::unique_ptr<JointCCQRModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)this + 34, 0);
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 80);
  v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t CcqrOrchestrator::validate(CcqrOrchestrator *this, const QRRequest *a2)
{
  QRInteraction *var0;
  QRInteraction *var1;
  _QWORD *exception;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD v11[3];

  if (!marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper((uint64_t *)a2->var1.var0, (uint64_t *)a2->var1.var1, 0))
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Received empty ASR utterance / tokens in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(exception, (uint64_t)v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 165);
  }
  if ((marrs::qr::orchestration::PreviousNLUtteranceChecker::verify((marrs::qr::orchestration::PreviousNLUtteranceChecker *)v11, a2) & 1) == 0)
  {
    v7 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Received empty inputs in QRRequest.prevQRUtterances");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(v7, (uint64_t)v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 168);
  }
  var0 = a2->var1.var0;
  var1 = a2->var1.var1;
  if (var0 != var1 && var1[-1].var2.var1 != var1[-1].var2.var2.var0)
  {
    v9 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Received non-empty SiriResponse for current turn in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(v9, (uint64_t)v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 172);
  }
  if ((marrs::qr::orchestration::AsrConfidenceChecker::verify((const QRRequest *)var0, (const QRRequest *)var1) & 1) == 0)
  {
    v8 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid ASR confidence score in turn inputs");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(v8, (uint64_t)v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 175);
  }
  return 1;
}

void sub_1C286C254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

marrs::inference_engine::EspressoModule *std::unique_ptr<JointCCQRModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  marrs::inference_engine::EspressoModule *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1C3BC5C7CLL);
  }
  return result;
}

uint64_t std::tuple<std::vector<marrs::qr::orchestration::QRToken>,std::vector<unsigned long>,std::vector<std::vector<unsigned long>>,std::vector<std::vector<unsigned long>>>::~tuple(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 72);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 48);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

_QWORD *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C286C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void JointCCQRModuleInput::~JointCCQRModuleInput(JointCCQRModuleInput *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 24);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C286C5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1C3BC5BC8](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x1C3BC5A84](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C3BC5A90](v23);
  return a1;
}

void sub_1C286C810(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1C3BC5A90](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C286C7E4);
}

void sub_1C286C870(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void RepetitionDetectionUtil::getIndices(char **a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  _QWORD *v5;
  char **v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  _DWORD *v15;
  int v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  NSObject *v32;
  uint8_t buf[4];
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  if (a2[1] != *a2)
  {
    v5 = a2;
    v6 = a1;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *a3;
      if (!*a3)
      {
        v14 = v5;
        v15 = a3;
        v16 = v12 + 1;
        if ((unint64_t)v10 >= v9)
        {
          v18 = (v10 - v8) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v20 = v9 - (_QWORD)v8;
          if (v20 >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v21);
          else
            v22 = 0;
          v23 = (char *)(v21 + 4 * v18);
          *(_DWORD *)v23 = v16;
          v17 = v23 + 4;
          a3 = v15;
          while (v10 != v8)
          {
            v24 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          v7 = v21 + 4 * v22;
          *a1 = v23;
          a1[1] = v17;
          a1[2] = (char *)v7;
          v5 = v14;
          if (v8)
            operator delete(v8);
          v8 = v23;
          v9 = v7;
        }
        else
        {
          *(_DWORD *)v10 = v16;
          v17 = v10 + 4;
          a3 = v15;
          v5 = v14;
        }
        v6 = a1;
        a1[1] = v17;
        v3 = *v5;
        v10 = v17;
        v13 = *a3;
      }
      v12 += (*(_QWORD *)(v3 + 24 * v11 + 8) - *(_QWORD *)(v3 + 24 * v11)) >> 2;
      if (v13 == 1)
      {
        if ((unint64_t)v10 >= v7)
        {
          v26 = (v10 - v8) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v7 - (_QWORD)v8) >> 1 > v27)
            v27 = (uint64_t)(v7 - (_QWORD)v8) >> 1;
          if (v7 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
            v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
          else
            v29 = 0;
          v30 = (char *)(v28 + 4 * v26);
          *(_DWORD *)v30 = v12;
          v25 = v30 + 4;
          while (v10 != v8)
          {
            v31 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          v7 = v28 + 4 * v29;
          *v6 = v30;
          v6[1] = v25;
          v6[2] = (char *)v7;
          if (v8)
            operator delete(v8);
          v8 = v30;
        }
        else
        {
          *(_DWORD *)v10 = v12;
          v25 = v10 + 4;
        }
        v6[1] = v25;
        v3 = *v5;
        v9 = v7;
        v10 = v25;
      }
      ++v11;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v5[1] - v3) >> 3));
  }
  v32 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v35 = "getIndices";
    _os_log_debug_impl(&dword_1C281A000, v32, OS_LOG_TYPE_DEBUG, "%s Indices fetching complete", buf, 0xCu);
  }
}

void sub_1C286CB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v4 - 3);
        v4 -= 24;
        v6 = v7;
        if (v7)
          operator delete(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void RepetitionDetectionUtil::constructUtterance(std::string *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  unint64_t v11;
  NSObject *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v3 + v5;
      v8 = *(char *)(v7 + 23);
      if (v8 >= 0)
        v9 = (const std::string::value_type *)v7;
      else
        v9 = *(const std::string::value_type **)v7;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v7 + 23);
      else
        v10 = *(_QWORD *)(v7 + 8);
      std::string::append(this, v9, v10);
      v3 = *a2;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      if (v6 < v11 - 1)
      {
        std::string::append(this, " ");
        v3 = *a2;
        v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      }
      ++v6;
      v5 += 24;
    }
    while (v6 < v11);
  }
  v12 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = 136315138;
    v14 = "constructUtterance";
    _os_log_debug_impl(&dword_1C281A000, v12, OS_LOG_TYPE_DEBUG, "%s Utterance construction completed", (uint8_t *)&v13, 0xCu);
  }
}

void sub_1C286CD60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1C286E93C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, marrs::inference_engine::EspressoModule **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,std::exception_ptr a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t buf,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::exception_ptr a64;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(*(_QWORD **)(a16 + 144));
    if (*(char *)(a16 + 127) < 0)
      operator delete(*a11);
    if (*(char *)(a16 + 87) < 0)
      operator delete(*(void **)(a16 + 64));
    if (*(char *)(a16 + 63) < 0)
      operator delete(*a12);
    std::unique_ptr<marrs::mrr::md::inference_engine::MentionDetectorModule>::reset[abi:ne180100](a15);
    *(_QWORD *)a16 = &unk_1E7C67780;
    if (*(char *)(a16 + 31) < 0)
      operator delete(*a10);
    if (a41 < 0)
      operator delete(__p);
    MEMORY[0x1C3BC5C7C](a16, 0x10B3C409358F699);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::exception_ptr(&a32, &a64);
    +[PredictorUtils handleInitException:](PredictorUtils, "handleInitException:", &a32);
    std::exception_ptr::~exception_ptr(&a32);
    std::exception_ptr::~exception_ptr(&a64);
    __cxa_end_catch();
    JUMPOUT(0x1C286E6BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C286F1A8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1C286F1D4);
  JUMPOUT(0x1C286F180);
}

void sub_1C286F994(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18, uint64_t a19, uint64_t a20,__int16 buf)
{
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;

  v24 = a20;
  a20 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  MEMORY[0x1C3BC5598](&buf);
  v25 = *(_QWORD *)(v22 - 88);
  *(_QWORD *)(v22 - 88) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  __cxa_begin_catch(a1);
  MRRLoggerForCategory(1);
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    buf = 0;
    _os_log_impl(&dword_1C281A000, v26, OS_LOG_TYPE_ERROR, "Exception encountered when running detectMentionsInUtteranceImpl", (uint8_t *)&buf, 2u);
  }

  std::current_exception();
  +[PredictorUtils handlePredictException:](PredictorUtils, "handlePredictException:", &a18);
  std::exception_ptr::~exception_ptr(&a18);
  __cxa_end_catch();
  JUMPOUT(0x1C286F828);
}

void sub_1C286FB80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
  std::exception_ptr::~exception_ptr(&a18);
  __cxa_end_catch();
  JUMPOUT(0x1C286FBA4);
}

void sub_1C2870068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C28702CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C2870554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2870814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1C28709A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2870A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1C2870C84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1C2871AC4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, marrs::mrr::mr::MRFilterInterface *a9, marrs::mrr::mr::MRFilterInterface *a10, uint64_t a11, marrs::mrr::mr::OrdinalFilter *a12, marrs::mrr::mr::ModelBasedMR *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id obj, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::exception_ptr a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,__int128 buf,uint64_t a57,uint64_t a58,void **a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  NSObject *v65;
  void **v66;

  if (a2)
  {
    if (a45 < 0)
      operator delete(__p);
    __cxa_begin_catch(a1);
    v65 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&a59, (uint64_t)&a37, (std::__fs::filesystem::path *)&marrs::mrr::mr::keywordFilename);
      if (a64 >= 0)
        v66 = (void **)&a59;
      else
        v66 = a59;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v66;
      _os_log_impl(&dword_1C281A000, v65, OS_LOG_TYPE_DEBUG, "[UtteranceKeywordFilter] Error parsing keyword asset at %s, This filter will be skipped.", (uint8_t *)&buf, 0xCu);
      if (a64 < 0)
        operator delete(a59);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C28716CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C2872D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2873514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1C2873824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a18, 8);

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1C2873AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;
  void *v31;

  _Block_object_dispose(&a18, 8);

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1C2873E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a18, 8);

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1C28740FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Block_object_dispose((const void *)(v5 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C2874468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C2874774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C2874B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  _Block_object_dispose((const void *)(v15 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C2874CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2874D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2874E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2874F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::reserve(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __requested_capacity)
{
  unint64_t v3;
  std::basic_string<char16_t>::size_type v4;
  std::basic_string<char16_t>::size_type v5;
  unint64_t v6;
  unint64_t v7;
  std::basic_string<char16_t>::size_type v8;
  std::basic_string<char16_t>::size_type v9;
  uint64_t v10;
  uint64_t v11;
  std::basic_string<char16_t> *v12;
  int v13;
  void *v14;
  uint64_t v15;
  std::basic_string<char16_t>::size_type size;
  int v17;
  BOOL v18;
  std::basic_string<char16_t>::size_type v19;

  if (__requested_capacity >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    if (__requested_capacity <= 0xA)
      return;
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v4 <= __requested_capacity)
      v5 = __requested_capacity;
    else
      v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v5 | 3) != 0xB)
    {
      v11 = (v5 | 3) + 1;
      goto LABEL_24;
    }
    v6 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
LABEL_20:
    v11 = v6 + 1;
    if (v6 < 0xB)
    {
      v12 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      v13 = 1;
      v14 = this;
      if ((v3 & 0x80) != 0)
        goto LABEL_28;
      goto LABEL_26;
    }
LABEL_24:
    v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v11);
    v11 = v15;
    LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v3 & 0x80000000) != 0)
    {
      LOBYTE(v13) = 0;
      v12 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
LABEL_28:
      size = this->__r_.__value_.__l.__size_;
      v17 = 1;
LABEL_29:
      v18 = __CFADD__(size, 1);
      v19 = size + 1;
      if (v18)
      {
        if (v17)
          goto LABEL_35;
      }
      else
      {
        memmove(v14, v12, 2 * v19);
        if (v17)
        {
LABEL_35:
          operator delete(v12);
          if ((v13 & 1) == 0)
            goto LABEL_36;
          goto LABEL_33;
        }
      }
      if ((v13 & 1) == 0)
      {
LABEL_36:
        this->__r_.__value_.__l.__size_ = v4;
        this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
        this->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v14;
        return;
      }
LABEL_33:
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v4 & 0x7F;
      return;
    }
    v13 = 0;
    v12 = this;
LABEL_26:
    size = v3;
    v17 = v13;
    goto LABEL_29;
  }
  v7 = this->__r_.__value_.__r.__words[2];
  v8 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 < __requested_capacity)
  {
    v4 = this->__r_.__value_.__l.__size_;
    if (v4 <= __requested_capacity)
      v9 = __requested_capacity;
    else
      v9 = this->__r_.__value_.__l.__size_;
    v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v9 | 3) != 0xB)
      v10 = v9 | 3;
    v6 = v9 >= 0xB ? v10 : 10;
    if (v6 != v8)
    {
      v3 = HIBYTE(v7);
      goto LABEL_20;
    }
  }
}

void sub_1C2875378(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  int v6;
  std::basic_string<char16_t>::size_type size;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::basic_string<char16_t> *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::basic_string<char16_t> *v15;
  std::basic_string<char16_t>::size_type v16;
  void *v17;
  std::basic_string<char16_t>::size_type v18;
  uint64_t v19;
  uint64_t v20;
  std::basic_string<char16_t> *v21;

  v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v6 < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v9 = HIBYTE(v10);
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v8 = 10;
    LOBYTE(v9) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if (v8 - size < __n)
  {
    if (0x7FFFFFFFFFFFFFF6 - v8 < __n - v8 + size)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = this;
    if ((v9 & 0x80) != 0)
      v11 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    if (v8 > 0x3FFFFFFFFFFFFFF2)
    {
      v14 = 0x7FFFFFFFFFFFFFF7;
    }
    else
    {
      v12 = size + __n;
      if (size + __n <= 2 * v8)
        v12 = 2 * v8;
      v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v12 | 3) != 0xB)
        v13 = v12 | 3;
      if (v12 >= 0xB)
        v14 = v13 + 1;
      else
        v14 = 11;
    }
    v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
    v18 = (std::basic_string<char16_t>::size_type)v17;
    v20 = v19;
    if (size)
      memmove(v17, v11, 2 * size);
    memmove((void *)(v18 + 2 * size), __s, 2 * __n);
    if (v8 != 10)
      operator delete(v11);
    this->__r_.__value_.__r.__words[0] = v18;
    this->__r_.__value_.__l.__size_ = size + __n;
    this->__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    v21 = (std::basic_string<char16_t> *)(v18 + 2 * (size + __n));
LABEL_29:
    v21->__r_.__value_.__s.__data_[0] = 0;
    return this;
  }
  if (__n)
  {
    v15 = this;
    if (v6 < 0)
      v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    memmove((char *)v15 + 2 * size, __s, 2 * __n);
    v16 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v16;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    v21 = (std::basic_string<char16_t> *)((char *)v15 + 2 * v16);
    goto LABEL_29;
  }
  return this;
}

void ICUStringOperations::toU16String(std::basic_string<char16_t> *a1, uint64_t *a2)
{
  int v3;
  uint64_t *v4;
  std::basic_string<char16_t>::size_type v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  std::basic_string<char16_t>::size_type v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  std::basic_string<char16_t>::value_type __s[2];
  __int16 v20;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  std::basic_string<char16_t>::reserve(a1, v5);
  LODWORD(v6) = 0;
  v20 = 0;
  *(_DWORD *)__s = 0;
  while ((int)v6 < (int)v5)
  {
    v7 = v6;
    v8 = (int)v6 + 1;
    v9 = *((char *)v4 + (int)v6);
    v10 = *((unsigned __int8 *)v4 + (int)v6);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_10;
    if ((_DWORD)v8 == (_DWORD)v5)
      goto LABEL_12;
    if (v10 < 0xE0)
    {
      if (v10 < 0xC2)
        goto LABEL_29;
      v15 = v10 & 0x1F;
    }
    else
    {
      if (v10 > 0xEF)
      {
        if (v10 > 0xF4
          || (v18 = v10 - 240,
              v13 = *((unsigned __int8 *)v4 + v8),
              ((byte_1C289E84F[v13 >> 4] >> v18) & 1) == 0))
        {
LABEL_29:
          v12 = -1;
          LOWORD(v10) = -1;
          LODWORD(v6) = v8;
          goto LABEL_30;
        }
        v6 = (int)v6 + 2;
        if (v7 + 2 == (_DWORD)v5)
        {
LABEL_12:
          v12 = -1;
          LOWORD(v10) = -1;
          LODWORD(v6) = v5;
          goto LABEL_30;
        }
        v14 = *((unsigned __int8 *)v4 + v6) ^ 0x80;
        if (v14 > 0x3F)
        {
          v12 = -1;
          LOWORD(v10) = -1;
          goto LABEL_30;
        }
        LODWORD(v13) = v13 & 0x3F | (v18 << 6);
        LODWORD(v8) = v6;
      }
      else
      {
        v13 = v9 & 0xF;
        if (((a00000000000000[v13] >> (*((_BYTE *)v4 + v8) >> 5)) & 1) == 0)
          goto LABEL_29;
        v14 = *((_BYTE *)v4 + v8) & 0x3F;
      }
      LODWORD(v8) = v8 + 1;
      if ((_DWORD)v8 == (_DWORD)v5)
        goto LABEL_12;
      v15 = v14 | ((_DWORD)v13 << 6);
    }
    v16 = *((unsigned __int8 *)v4 + (int)v8) ^ 0x80;
    if (v16 >= 0x40)
      goto LABEL_29;
    v10 = v16 | (v15 << 6);
    LODWORD(v8) = v8 + 1;
    v17 = (unsigned __int16)(v15 >> 10);
    LODWORD(v6) = v8;
    v12 = v10;
    if (!v17)
    {
LABEL_10:
      __s[0] = v10;
      LODWORD(v6) = v8;
      v11 = 1;
      goto LABEL_31;
    }
LABEL_30:
    __s[0] = (v12 >> 10) - 10304;
    __s[1] = v10 & 0x3FF | 0xDC00;
    v11 = 2;
LABEL_31:
    std::basic_string<char16_t>::append(a1, __s, v11);
  }
}

void sub_1C28756E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *ICUStringOperations::toString(std::string *this, uint64_t **a2)
{
  uint64_t *v2;
  std::string *v3;
  int v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  std::string::size_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type __s[4];
  char v16;

  v2 = (uint64_t *)a2;
  v3 = this;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    LODWORD(v5) = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if ((int)v5 >= 23)
  {
    std::string::reserve(this, (int)v5);
    v6 = *((char *)v2 + 23);
    v16 = 0;
    *(_DWORD *)__s = 0;
    if (v6 < 0)
      v2 = (uint64_t *)*v2;
LABEL_11:
    v7 = 0;
    while (1)
    {
      v8 = v7 + 1;
      v9 = *((unsigned __int16 *)v2 + v7);
      if ((v9 & 0xFC00) == 0xD800 && (_DWORD)v8 != (_DWORD)v5)
        break;
      if (v9 > 0x7F)
      {
        if (v9 <= 0x7FF)
        {
          __s[0] = (v9 >> 6) | 0xC0;
          v14 = 1;
LABEL_25:
          v11 = v14 + 1;
          __s[v14] = v9 & 0x3F | 0x80;
          v7 = v8;
          goto LABEL_26;
        }
LABEL_23:
        __s[0] = (v9 >> 12) | 0xE0;
        v13 = 1;
LABEL_24:
        v14 = v13 + 1;
        *(_BYTE *)((unint64_t)__s | v13) = (v9 >> 6) & 0x3F | 0x80;
        goto LABEL_25;
      }
      __s[0] = *((_WORD *)v2 + v7++);
      v11 = 1;
LABEL_26:
      this = std::string::append(v3, __s, v11);
      if (v7 >= (int)v5)
        return this;
    }
    v12 = *((unsigned __int16 *)v2 + v8);
    if ((v12 & 0xFC00) != 0xDC00)
      goto LABEL_23;
    LODWORD(v8) = v7 + 2;
    v9 = v12 + (v9 << 10) - 56613888;
    __s[0] = (v9 >> 18) | 0xF0;
    __s[1] = (v9 >> 12) & 0x3F | 0x80;
    v13 = 2;
    goto LABEL_24;
  }
  v16 = 0;
  *(_DWORD *)__s = 0;
  if (v4 < 0)
    v2 = *a2;
  if ((int)v5 >= 1)
    goto LABEL_11;
  return this;
}

void sub_1C28758A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void marrs::mrr::md::getMatchingSpanForBoundary(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t> *p_p;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  std::basic_string<char16_t>::size_type v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *exception;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  uint64_t *v52;
  int v53;
  std::basic_string<char16_t> v54;
  std::basic_string<char16_t> __p;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string __s;

  v12 = operator new();
  sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)v12);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(int *)(*(_QWORD *)(v13 + 8 * a4) + 72);
  v15 = *(int *)(*(_QWORD *)(v13 + 8 * a5) + 76);
  if (v15 <= v14)
  {
    *a1 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    ICUStringOperations::toU16String(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size < v15)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      std::to_string(&v57, v15);
      v44 = std::string::insert(&v57, 0, "Invalid substring range. The endIndex");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = std::string::append(&v58, " >= src length ");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v56, size);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v56;
      else
        v48 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v49 = v56.__r_.__value_.__l.__size_;
      v50 = std::string::append(&v59, (const std::string::value_type *)v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x1C3BC5934](exception, &__s);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v53 = a5;
    v52 = a1;
    memset(&v54, 0, sizeof(v54));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::basic_string<char16_t> *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)&__s.__r_.__value_.__s.__data_[2] = 0;
    std::basic_string<char16_t>::reserve(&v54, v15 - v14);
    v18 = 0;
    do
    {
      v19 = v18 + 1;
      v20 = (unsigned __int16)p_p->__r_.__value_.__s.__data_[v18];
      if (v18 + 1 != size && (v20 & 0xFC00) == 0xD800)
      {
        v21 = (unsigned __int16)p_p->__r_.__value_.__s.__data_[v19];
        v22 = (v21 & 0xFC00) == 56320;
        v23 = v21 + (v20 << 10) - 56613888;
        if (v22)
          v20 = v23;
        if (v22)
          v19 = v18 + 2;
        else
          v19 = v18 + 1;
      }
      if (v18 >= v14)
      {
        if (HIWORD(v20))
        {
          v25 = v20 & 0x3FF | 0xDC00;
          v20 = (v20 >> 10) - 10304;
          *(_WORD *)&__s.__r_.__value_.__s.__data_[2] = v25;
          v24 = 2;
        }
        else
        {
          v24 = 1;
        }
        LOWORD(__s.__r_.__value_.__l.__data_) = v20;
        std::basic_string<char16_t>::append(&v54, (const std::basic_string<char16_t>::value_type *)&__s, v24);
      }
      v18 = v19;
    }
    while (v19 < v15);
    ICUStringOperations::toString(&__s, (uint64_t **)&v54);
    v26 = *(_QWORD *)(v12 + 32);
    if (!v26)
    {
      v26 = operator new();
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v26 + 16) = 0;
      v27 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 32) = v26;
      if (v27)
      {
        std::default_delete<std::string>::operator()[abi:ne180100](v27);
        v26 = *(_QWORD *)(v12 + 32);
      }
    }
    if (*(char *)(v26 + 23) < 0)
      operator delete(*(void **)v26);
    v28 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
    *(_QWORD *)(v26 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
    *(_OWORD *)v26 = v28;
    v30 = *(char **)(v12 + 16);
    v29 = *(_QWORD *)(v12 + 24);
    *(_BYTE *)(v12 + 80) |= 3u;
    *(_DWORD *)(v12 + 72) = v53 + 1;
    *(_DWORD *)(v12 + 76) = a4;
    if ((unint64_t)v30 >= v29)
    {
      v32 = *(char **)(v12 + 8);
      v33 = (v30 - v32) >> 2;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v35 = v29 - (_QWORD)v32;
      if (v35 >> 1 > v34)
        v34 = v35 >> 1;
      v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL;
      v37 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v36)
        v37 = v34;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v37);
        v32 = *(char **)(v12 + 8);
        v30 = *(char **)(v12 + 16);
      }
      else
      {
        v38 = 0;
      }
      v39 = (_DWORD *)(v37 + 4 * v33);
      v40 = v37 + 4 * v38;
      *v39 = 6;
      v31 = v39 + 1;
      while (v30 != v32)
      {
        v41 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *--v39 = v41;
      }
      *(_QWORD *)(v12 + 8) = v39;
      *(_QWORD *)(v12 + 16) = v31;
      *(_QWORD *)(v12 + 24) = v40;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_DWORD *)v30 = 6;
      v31 = v30 + 4;
    }
    *(_QWORD *)(v12 + 16) = v31;
    sirinluinternal::MatchingSpan::makeInternalSpanData((sirinluinternal::MatchingSpan *)v12);
    sirinluinternal::InternalSpanData::makeMentionDetectorSpanData(*(sirinluinternal::InternalSpanData **)(v12 + 40));
    v42 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
    *(_BYTE *)(v42 + 16) |= 1u;
    *(double *)(v42 + 8) = a6;
    *v52 = v12;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C2875CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  void *v50;
  int v51;
  uint64_t v52;

  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  if (a30 < 0)
    operator delete(__p);
  if (a49 < 0)
    operator delete(a44);
  if (a42 < 0)
    operator delete(a37);
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v51 & 1) == 0)
    {
LABEL_14:
      if (a24 < 0)
        operator delete(a19);
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v50);
  goto LABEL_14;
}

void marrs::inference_engine::EspressoModule::~EspressoModule(marrs::inference_engine::EspressoModule *this)
{
  espresso_plan_destroy();
  espresso_context_destroy();
}

uint64_t marrs::inference_engine::EspressoModule::EspressoModule(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t context;
  uint64_t plan;
  int v7;
  void *exception;
  int v10;
  void *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  if (a3 == 16)
    v4 = 65552;
  else
    v4 = 65568;
  *(_DWORD *)(a1 + 32) = v4;
  context = espresso_create_context();
  *(_QWORD *)a1 = context;
  if (!context)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3BC5928](exception, "Could not deserialise espresso context.");
    goto LABEL_10;
  }
  plan = espresso_create_plan();
  *(_QWORD *)(a1 + 8) = plan;
  if (!plan)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3BC5928](exception, "Could not create espresso plan.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = espresso_plan_add_network();
  if (v7)
  {
    v10 = v7;
    v11 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v12 = std::string::append(&v19, " with error code");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v18, v10);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    else
      v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v20, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22 = v16->__r_.__value_.__r.__words[2];
    v21 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3BC5934](v11, &v21);
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1C2875FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  int v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v26 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v27);
  goto LABEL_12;
}

uint64_t marrs::inference_engine::EspressoModule::buildPlan(marrs::inference_engine::EspressoModule *this)
{
  uint64_t result;
  void *exception;

  result = espresso_plan_build();
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3BC5928](exception, "Failed to build espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C28760D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t marrs::inference_engine::EspressoModule::executePlan(marrs::inference_engine::EspressoModule *this)
{
  uint64_t result;
  int v2;
  void *exception;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    v2 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, v2);
    v4 = std::string::insert(&v6, 0, "Failed to execute espresso plan with error code");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v8 = v4->__r_.__value_.__r.__words[2];
    v7 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3BC5934](exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2876194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t marrs::inference_engine::EspressoModule::cleanPlan(marrs::inference_engine::EspressoModule *this)
{
  uint64_t result;
  void *exception;

  result = espresso_plan_build_clean();
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3BC5928](exception, "Failed to clean up espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2876244(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t marrs::inference_engine::EspressoModule::setInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  void *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  __int128 v16;
  std::string::size_type v17;
  uint64_t v18;
  int v19;

  v18 = *(_QWORD *)(a3 + 24);
  espresso_buffer_pack_tensor_shape();
  v19 = *(_DWORD *)(a1 + 32);
  result = espresso_network_bind_buffer();
  if ((_DWORD)result)
  {
    v5 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, v5);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v15, (const std::string::value_type *)v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17 = v11->__r_.__value_.__r.__words[2];
    v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3BC5934](exception, &v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C287639C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  int v33;
  void *v34;

  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v33 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v33)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v34);
  goto LABEL_12;
}

void marrs::inference_engine::EspressoModule::getOutput(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  uint64_t *v5;
  std::string::size_type v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *exception;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  void *v21;
  int v22;
  __int128 v23;
  std::string::size_type v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22 = *(_DWORD *)(a2 + 32);
  v3 = espresso_network_bind_buffer();
  if (v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v18, v3);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    else
      v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v20, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v24 = v16->__r_.__value_.__r.__words[2];
    v23 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3BC5934](exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19.__r_.__value_.__r.__words[0] = 0;
  espresso_buffer_unpack_tensor_shape();
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  memset(&v20, 0, sizeof(v20));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v20, &v23, (uint64_t)&v23 + 8 * v19.__r_.__value_.__r.__words[0], v19.__r_.__value_.__r.__words[0]);
  v4 = v21;
  v5 = (uint64_t *)v20.__r_.__value_.__r.__words[0];
  *(_QWORD *)a1 = v20.__r_.__value_.__r.__words[0];
  v6 = v20.__r_.__value_.__l.__size_;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v20.__r_.__value_.__r.__words[1];
  if ((uint64_t *)v6 == v5)
  {
    v8 = 1;
  }
  else
  {
    v7 = (uint64_t)(v6 - (_QWORD)v5) >> 3;
    if (v7 <= 1)
      v7 = 1;
    v8 = 1;
    do
    {
      v9 = *v5++;
      v8 *= v9;
      --v7;
    }
    while (v7);
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v20, v4, (uint64_t)v4 + 4 * v8, v8);
  v10 = (void *)v20.__r_.__value_.__r.__words[0];
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 24), v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_, (uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 2);
  free(v21);
  if (v10)
    operator delete(v10);
}

void sub_1C2876650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v27 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v26);
  goto LABEL_12;
}

void marrs::mrr::mr::UtteranceKeywordFilter::filterEntities(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  const char *v24;
  size_t v25;
  size_t v26;
  std::string *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t **v34;
  char *i;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t **v41;
  BOOL v42;
  unint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t **v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  _QWORD *v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t **v68;
  NSObject *v69;
  void *v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  _BYTE *v74;
  _QWORD *v75;
  unint64_t v77;
  __int128 v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  char **v82;
  char *v83[2];
  std::vector<std::string> v84;
  std::string v85;
  _QWORD *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (a1[22])
  {
    v83[0] = 0;
    v83[1] = 0;
    v81 = 0;
    v82 = v83;
    v79 = &v80;
    v80 = 0;
    v6 = *(_QWORD **)(a3 + 24);
    v7 = *(_QWORD **)(a3 + 32);
    while (v6 != v7)
    {
      MEMORY[0x1C3BC552C](&v85, *v6);
      if (!v87)
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v82, v86, (uint64_t)v86);
      MEMORY[0x1C3BC5538](&v85);
      ++v6;
    }
    v74 = a4;
    v8 = (_QWORD *)a1[20];
    v9 = a1 + 21;
    if (v8 != a1 + 21)
    {
      v75 = a1 + 21;
LABEL_9:
      memset(&v84, 0, sizeof(v84));
      std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::back_insert_iterator<std::vector<std::string>>>((std::vector<std::string> **)&v85, v82, v83, (_QWORD *)v8[7], v8 + 8, &v84);
      begin = v84.__begin_;
      end = v84.__end_;
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      if (end == begin)
        goto LABEL_105;
      if (*((char *)v8 + 55) < 0)
        std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)v8[4], v8[5]);
      else
        v85 = *(std::string *)(v8 + 4);
      v12 = *a2;
      v13 = a2[1];
      if (v13 == *a2)
        goto LABEL_103;
      v14 = 0;
      v15 = 0;
      v77 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = qword_1ED7B1C58;
        if (!qword_1ED7B1C58)
          goto LABEL_50;
        v19 = *(_DWORD *)(v12 + 216 * v17);
        v20 = &qword_1ED7B1C58;
        do
        {
          v21 = *(_DWORD *)(v18 + 32);
          v22 = v21 < v19;
          if (v21 >= v19)
            v23 = (uint64_t *)v18;
          else
            v23 = (uint64_t *)(v18 + 8);
          if (!v22)
            v20 = (uint64_t *)v18;
          v18 = *v23;
        }
        while (*v23);
        if (v20 == &qword_1ED7B1C58 || v19 < *((_DWORD *)v20 + 8))
          goto LABEL_50;
        v24 = (const char *)v20[5];
        v25 = strlen(v24);
        v26 = v25;
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v25 == v85.__r_.__value_.__l.__size_)
          {
            if (v25 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v27 = (std::string *)v85.__r_.__value_.__r.__words[0];
            goto LABEL_31;
          }
        }
        else if (v25 == HIBYTE(v85.__r_.__value_.__r.__words[2]))
        {
          v27 = &v85;
LABEL_31:
          if (!memcmp(v27, v24, v26))
          {
            if ((unint64_t)v16 >= v77)
            {
              v28 = (v16 - v14) >> 3;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v77 - (_QWORD)v14) >> 2 > v29)
                v29 = (uint64_t)(v77 - (_QWORD)v14) >> 2;
              if (v77 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v29;
              if (v30)
              {
                v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
                v16 = v15;
              }
              else
              {
                v31 = 0;
              }
              v32 = (char *)(v30 + 8 * v28);
              *(_QWORD *)v32 = v17;
              v15 = v32 + 8;
              while (v16 != v14)
              {
                v33 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *((_QWORD *)v32 - 1) = v33;
                v32 -= 8;
              }
              v77 = v30 + 8 * v31;
              if (v14)
                operator delete(v14);
              v14 = v32;
            }
            else
            {
              *(_QWORD *)v16 = v17;
              v15 = v16 + 8;
            }
            v12 = *a2;
            v13 = a2[1];
            v16 = v15;
          }
        }
LABEL_50:
        if (++v17 >= 0x84BDA12F684BDA13 * ((v13 - v12) >> 3))
        {
          if (v14 != v15)
          {
            v34 = &v80;
            for (i = v14; i != v15; i += 8)
            {
              if (&v80 == v34 || (v36 = *(_QWORD *)i, v37 = v34[4], *(_QWORD *)i < (unint64_t)v37))
              {
                v38 = *v34;
                v39 = v34;
                if (v79 == v34)
                  goto LABEL_61;
                v40 = *v34;
                v41 = v34;
                if (v38)
                {
                  do
                  {
                    v39 = (uint64_t **)v40;
                    v40 = (uint64_t *)v40[1];
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    v39 = (uint64_t **)v41[2];
                    v42 = *v39 == (uint64_t *)v41;
                    v41 = v39;
                  }
                  while (v42);
                }
                v43 = *(_QWORD *)i;
                if ((unint64_t)v39[4] < *(_QWORD *)i)
                {
LABEL_61:
                  if (v38)
                    v44 = v39 + 1;
                  else
                    v44 = v34;
                  if (v38)
                    v34 = v39;
                }
                else
                {
                  v48 = v80;
                  v44 = &v80;
                  v34 = &v80;
                  if (!v80)
                    goto LABEL_92;
                  v44 = &v80;
                  while (1)
                  {
                    while (1)
                    {
                      v34 = (uint64_t **)v48;
                      v49 = v48[4];
                      if (v43 >= v49)
                        break;
                      v48 = *v34;
                      v44 = v34;
                      if (!*v34)
                        goto LABEL_92;
                    }
                    if (v49 >= v43)
                      break;
                    v44 = v34 + 1;
                    v48 = v34[1];
                    if (!v48)
                      goto LABEL_92;
                  }
                }
              }
              else
              {
                if ((unint64_t)v37 >= v36)
                {
                  v45 = (uint64_t *)v34;
                  goto LABEL_95;
                }
                v44 = v34 + 1;
                v46 = v34[1];
                if (v46)
                {
                  do
                  {
                    v44 = (uint64_t **)v46;
                    v46 = (uint64_t *)*v46;
                    v34 = v44;
                    v47 = v44;
                  }
                  while (v46);
                }
                else
                {
                  v47 = v34;
                  do
                  {
                    v50 = (uint64_t *)v47;
                    v47 = (uint64_t **)v47[2];
                  }
                  while (*v47 != v50);
                }
                if (v47 != &v80 && v36 >= (unint64_t)v47[4])
                {
                  v51 = v80;
                  v44 = &v80;
                  v34 = &v80;
                  if (!v80)
                  {
LABEL_92:
                    v45 = (uint64_t *)operator new(0x28uLL);
                    v45[4] = *(_QWORD *)i;
                    *v45 = 0;
                    v45[1] = 0;
                    v45[2] = (uint64_t)v34;
                    *v44 = v45;
                    v53 = v45;
                    if (*v79)
                    {
                      v79 = (uint64_t **)*v79;
                      v53 = *v44;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v80, v53);
                    ++v81;
                    goto LABEL_95;
                  }
                  v44 = &v80;
                  while (1)
                  {
                    while (1)
                    {
                      v34 = (uint64_t **)v51;
                      v52 = v51[4];
                      if (v36 >= v52)
                        break;
                      v51 = *v34;
                      v44 = v34;
                      if (!*v34)
                        goto LABEL_92;
                    }
                    if (v52 >= v36)
                      break;
                    v44 = v34 + 1;
                    v51 = v34[1];
                    if (!v51)
                      goto LABEL_92;
                  }
                }
              }
              v45 = *v44;
              if (!*v44)
                goto LABEL_92;
LABEL_95:
              v54 = (uint64_t *)v45[1];
              if (v54)
              {
                do
                {
                  v34 = (uint64_t **)v54;
                  v54 = (uint64_t *)*v54;
                }
                while (v54);
              }
              else
              {
                do
                {
                  v34 = (uint64_t **)v45[2];
                  v42 = *v34 == v45;
                  v45 = (uint64_t *)v34;
                }
                while (!v42);
              }
            }
          }
          v9 = v75;
          if (v14)
            operator delete(v14);
LABEL_103:
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
LABEL_105:
          v55 = (_QWORD *)v8[1];
          if (v55)
          {
            do
            {
              v56 = v55;
              v55 = (_QWORD *)*v55;
            }
            while (v55);
          }
          else
          {
            do
            {
              v56 = (_QWORD *)v8[2];
              v42 = *v56 == (_QWORD)v8;
              v8 = v56;
            }
            while (!v42);
          }
          v8 = v56;
          if (v56 == v9)
            break;
          goto LABEL_9;
        }
      }
    }
    v57 = (uint64_t *)v79;
    if (v79 == &v80)
    {
      v66 = 0;
      v64 = 0uLL;
    }
    else
    {
      v58 = 0;
      v59 = v79;
      do
      {
        v60 = v58;
        v61 = v59[1];
        if (v61)
        {
          do
          {
            v62 = (uint64_t **)v61;
            v61 = (uint64_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = (uint64_t **)v59[2];
            v42 = *v62 == (uint64_t *)v59;
            v59 = v62;
          }
          while (!v42);
        }
        ++v58;
        v59 = v62;
      }
      while (v62 != &v80);
      if (v60 >= 0x1FFFFFFFFFFFFFFFLL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v63 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v58);
      *(_QWORD *)&v64 = v63;
      v66 = &v63[v65];
      do
      {
        *v63 = v57[4];
        v67 = (uint64_t *)v57[1];
        if (v67)
        {
          do
          {
            v68 = (uint64_t **)v67;
            v67 = (uint64_t *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            v68 = (uint64_t **)v57[2];
            v42 = *v68 == v57;
            v57 = (uint64_t *)v68;
          }
          while (!v42);
        }
        ++v63;
        v57 = (uint64_t *)v68;
      }
      while (v68 != &v80);
      *((_QWORD *)&v64 + 1) = v63;
    }
    v70 = (void *)v64;
    v78 = v64;
    v71 = *((_QWORD *)&v64 + 1);
    if ((_QWORD)v64 == *((_QWORD *)&v64 + 1))
    {
      v73 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        LOWORD(v85.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v73, OS_LOG_TYPE_INFO, "[Utterance Keyword Filter] failed to match any keywords, returning null", (uint8_t *)&v85, 2u);
      }
      *v74 = 0;
      v74[24] = 0;
      if (v70)
        operator delete(v70);
    }
    else
    {
      v72 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        LODWORD(v85.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (v71 - (uint64_t)v70) >> 3;
        _os_log_impl(&dword_1C281A000, v72, OS_LOG_TYPE_INFO, "[Utterance Keyword Filter] matched %lu entities", (uint8_t *)&v85, 0xCu);
      }
      *(_OWORD *)v74 = v78;
      *((_QWORD *)v74 + 2) = v66;
      v74[24] = 1;
    }
    std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(v80);
    std::__tree<std::string>::destroy(v83[0]);
  }
  else
  {
    v69 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v85.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C281A000, v69, OS_LOG_TYPE_ERROR, "[Utterance Keyword Filter] Failed to load asset. The utteranceKeywordMap is empty, skipping", (uint8_t *)&v85, 2u);
    }
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_1C2876E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  if (v30)
    operator delete(v30);
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(a16);
  std::__tree<std::string>::destroy(a19);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::UtteranceKeywordFilter::~UtteranceKeywordFilter(marrs::mrr::mr::UtteranceKeywordFilter *this)
{
  *(_QWORD *)this = &off_1E7C67900;
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((_QWORD **)this + 21));
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface((void **)this);
}

{
  *(_QWORD *)this = &off_1E7C67900;
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((_QWORD **)this + 21));
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface((void **)this);
  JUMPOUT(0x1C3BC5C7CLL);
}

uint64_t *marrs::qr::processing::filterTokensForAER(uint64_t *result, marrs::qr::orchestration::QRToken *a2, marrs::qr::orchestration::QRToken *a3, int a4, int a5)
{
  marrs::qr::orchestration::QRToken *v8;
  uint64_t *v9;
  std::string *v10;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  unint64_t v20;
  _QWORD *v21;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2 != a3)
  {
    v8 = a2;
    v9 = result;
    v10 = 0;
    v11 = result + 2;
    do
    {
      if (*((_BYTE *)v8 + 72) || (*((_BYTE *)v8 + 73) ? (v12 = a5) : (v12 = a4), v12 == 1))
      {
        if ((unint64_t)v10 >= *v11)
        {
          v13 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v10 - *v9) >> 5);
          v14 = v13 + 1;
          if (v13 + 1 > 0x199999999999999)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((*v11 - *v9) >> 5) > v14)
            v14 = 0x999999999999999ALL * ((*v11 - *v9) >> 5);
          if (0xCCCCCCCCCCCCCCCDLL * ((*v11 - *v9) >> 5) >= 0xCCCCCCCCCCCCCCLL)
            v15 = 0x199999999999999;
          else
            v15 = v14;
          v21 = v11;
          if (v15)
            v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v15);
          else
            v16 = 0;
          v17 = v15;
          v18 = (std::string *)(v15 + 160 * v13);
          v19 = v18;
          v20 = v15 + 160 * v16;
          marrs::qr::orchestration::QRToken::QRToken(v18, v8);
          v19 = (std::string *)((char *)v19 + 160);
          std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(v9, &v17);
          v10 = (std::string *)v9[1];
          result = (uint64_t *)std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v17);
        }
        else
        {
          result = (uint64_t *)marrs::qr::orchestration::QRToken::QRToken(v10, v8);
          v10 = (std::string *)((char *)v10 + 160);
          v9[1] = (uint64_t)v10;
        }
        v9[1] = (uint64_t)v10;
      }
      v8 = (marrs::qr::orchestration::QRToken *)((char *)v8 + 160);
    }
    while (v8 != a3);
  }
  return result;
}

void sub_1C2877110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void marrs::qr::processing::getFlattenedNormalizedValuesIndices(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  __int128 v36;
  unint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  void **v42[5];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v4 = *a2;
  v3 = a2[1];
  if (v3 == *a2)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = v4 + 160 * v8;
      v12 = *(_QWORD *)(v9 + 48);
      v11 = (uint64_t *)(v9 + 48);
      v10 = v12;
      if (v11[1] != v12)
      {
        v38 = v8;
        v13 = 0;
        do
        {
          v14 = marrs::qr::processing::Vocab::toIndex(a3, (unsigned __int8 *)(v10 + 24 * v13));
          v15 = v14;
          if ((unint64_t)v6 >= v7)
          {
            v16 = v6 - v5;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v7 - (_QWORD)v5) >> 2 > v17)
              v17 = (uint64_t)(v7 - (_QWORD)v5) >> 2;
            if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
              v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
            else
              v19 = 0;
            v20 = (uint64_t *)(v18 + 8 * v16);
            *v20 = v15;
            v21 = v20 + 1;
            while (v6 != v5)
            {
              v22 = *--v6;
              *--v20 = v22;
            }
            v7 = v18 + 8 * v19;
            if (v5)
              operator delete(v5);
            v5 = v20;
            v6 = v21;
          }
          else
          {
            *v6++ = v14;
          }
          v23 = operator new(0x10uLL);
          v24 = v23 + 2;
          *v23 = v38;
          v23[1] = v13;
          *(_QWORD *)&v25 = v23;
          *((_QWORD *)&v25 + 1) = v23 + 2;
          v26 = v40;
          if ((unint64_t)v40 >= v41)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - v39) >> 3);
            v29 = v28 + 1;
            if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v36 = v25;
            if (0x5555555555555556 * ((uint64_t)(v41 - v39) >> 3) > v29)
              v29 = 0x5555555555555556 * ((uint64_t)(v41 - v39) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v39) >> 3) >= 0x555555555555555)
              v30 = 0xAAAAAAAAAAAAAAALL;
            else
              v30 = v29;
            v42[4] = (void **)&v41;
            v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v30);
            v32 = &v31[3 * v28];
            v42[0] = v31;
            v42[1] = v32;
            v42[3] = &v31[3 * v33];
            *(_OWORD *)v32 = v36;
            v32[2] = v24;
            v42[2] = v32 + 3;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v39, v42);
            v27 = v40;
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v42);
          }
          else
          {
            *v40 = v25;
            *((_QWORD *)v26 + 2) = v24;
            v27 = (_OWORD *)((char *)v26 + 24);
          }
          v40 = v27;
          v10 = *v11;
          ++v13;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v11[1] - *v11) >> 3));
        v4 = *a2;
        v3 = a2[1];
        v8 = v38;
      }
      ++v8;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 5));
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, v5, (uint64_t)v6, v6 - v5);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(a1 + 3, v39, (uint64_t)v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - v39) >> 3));
  v42[0] = (void **)&v39;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v42);
  if (v5)
    operator delete(v5);
}

void sub_1C2877454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21)
{
  void **v21;
  void *v22;
  void *v24;

  v24 = *v21;
  if (*v21)
  {
    *(_QWORD *)(a10 + 8) = v24;
    operator delete(v24);
  }
  a21 = (void **)&a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (v22)
    operator delete(v22);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C2877518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1C28775CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(std::string *result, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  std::string *v6;
  uint64_t *v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  unint64_t size;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  void **v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  std::string::size_type v40;
  __int128 v41;
  void **v42;
  __int128 v43;
  void **v44;
  uint64_t v45;
  __int128 v46;
  std::string *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  if (a5 >= 1)
  {
    v6 = a3;
    v7 = (uint64_t *)result;
    v8 = result->__r_.__value_.__r.__words[0];
    v9 = (int64_t)(a2 - result->__r_.__value_.__r.__words[0]) / 160;
    v10 = result->__r_.__value_.__r.__words[0] + 160 * v9;
    v12 = (uint64_t)&result->__r_.__value_.__r.__words[2];
    v11 = result->__r_.__value_.__r.__words[2];
    size = result->__r_.__value_.__l.__size_;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - size) >> 5)) >= a5)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(size - v10) >> 5)) >= a5)
      {
        v18 = (std::string *)((char *)a3 + 160 * a5);
        v19 = result->__r_.__value_.__l.__size_;
      }
      else
      {
        v18 = (std::string *)((char *)a3 + 32 * ((uint64_t)(size - v10) >> 5));
        result = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)&result->__r_.__value_.__r.__words[2], (uint64_t)v18, a4, size);
        v19 = (std::string::size_type)result;
        v7[1] = (uint64_t)result;
        if ((uint64_t)(size - v10) < 1)
          return result;
      }
      v20 = v10 + 160 * a5;
      v21 = v19 - 160 * a5;
      v22 = v19;
      if (v21 < size)
      {
        v22 = v19;
        do
        {
          v23 = *(_OWORD *)v21;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
          *(_OWORD *)v22 = v23;
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)v21 = 0;
          v24 = *(_OWORD *)(v21 + 24);
          *(_QWORD *)(v22 + 40) = *(_QWORD *)(v21 + 40);
          *(_OWORD *)(v22 + 24) = v24;
          *(_QWORD *)(v21 + 32) = 0;
          *(_QWORD *)(v21 + 40) = 0;
          *(_QWORD *)(v21 + 24) = 0;
          *(_QWORD *)(v22 + 48) = 0;
          *(_QWORD *)(v22 + 56) = 0;
          *(_QWORD *)(v22 + 64) = 0;
          *(_OWORD *)(v22 + 48) = *(_OWORD *)(v21 + 48);
          *(_QWORD *)(v22 + 64) = *(_QWORD *)(v21 + 64);
          *(_QWORD *)(v21 + 48) = 0;
          *(_QWORD *)(v21 + 56) = 0;
          *(_QWORD *)(v21 + 64) = 0;
          v25 = *(_OWORD *)(v21 + 72);
          *(_OWORD *)(v22 + 88) = *(_OWORD *)(v21 + 88);
          *(_OWORD *)(v22 + 72) = v25;
          v26 = *(_OWORD *)(v21 + 104);
          *(_QWORD *)(v22 + 120) = *(_QWORD *)(v21 + 120);
          *(_OWORD *)(v22 + 104) = v26;
          *(_QWORD *)(v21 + 112) = 0;
          *(_QWORD *)(v21 + 120) = 0;
          *(_QWORD *)(v21 + 104) = 0;
          *(_BYTE *)(v22 + 128) = *(_BYTE *)(v21 + 128);
          v27 = *(_OWORD *)(v21 + 136);
          *(_QWORD *)(v22 + 152) = *(_QWORD *)(v21 + 152);
          *(_OWORD *)(v22 + 136) = v27;
          *(_QWORD *)(v21 + 144) = 0;
          *(_QWORD *)(v21 + 152) = 0;
          *(_QWORD *)(v21 + 136) = 0;
          v22 += 160;
          v21 += 160;
        }
        while (v21 < size);
      }
      v7[1] = v22;
      if (v19 != v20)
      {
        v28 = 0;
        v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v20) >> 5);
        v30 = -160 * v29;
        v31 = v8 + 160 * v29 + 160 * v9;
        do
        {
          v32 = v19 + v28;
          v33 = (void **)(v19 + v28 - 160);
          if (*(char *)(v19 + v28 - 137) < 0)
            operator delete(*v33);
          v34 = v31 + v28;
          v35 = (__int128 *)(v31 + v28 - 160);
          v36 = *v35;
          *(_QWORD *)(v19 + v28 - 144) = *(_QWORD *)(v31 + v28 - 144);
          *(_OWORD *)v33 = v36;
          *(_BYTE *)(v31 + v28 - 137) = 0;
          *(_BYTE *)v35 = 0;
          v37 = v32 - 136;
          if (*(char *)(v32 - 113) < 0)
            operator delete(*(void **)v37);
          v38 = v31 + v28;
          v39 = *(_OWORD *)(v34 - 136);
          *(_QWORD *)(v37 + 16) = *(_QWORD *)(v34 - 120);
          *(_OWORD *)v37 = v39;
          *(_BYTE *)(v31 + v28 - 113) = 0;
          *(_BYTE *)(v34 - 136) = 0;
          v40 = v19 + v28;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v19 + v28 - 112));
          *(_OWORD *)(v40 - 112) = *(_OWORD *)(v31 + v28 - 112);
          *(_QWORD *)(v40 - 96) = *(_QWORD *)(v31 + v28 - 96);
          *(_QWORD *)(v38 - 104) = 0;
          *(_QWORD *)(v38 - 96) = 0;
          *(_QWORD *)(v38 - 112) = 0;
          v41 = *(_OWORD *)(v31 + v28 - 88);
          *(_OWORD *)(v40 - 72) = *(_OWORD *)(v31 + v28 - 72);
          *(_OWORD *)(v40 - 88) = v41;
          v42 = (void **)(v19 + v28 - 56);
          if (*(char *)(v19 + v28 - 33) < 0)
            operator delete(*v42);
          v43 = *(_OWORD *)(v38 - 56);
          *(_QWORD *)(v40 - 40) = *(_QWORD *)(v38 - 40);
          *(_OWORD *)v42 = v43;
          *(_BYTE *)(v38 - 33) = 0;
          *(_BYTE *)(v38 - 56) = 0;
          *(_BYTE *)(v40 - 32) = *(_BYTE *)(v38 - 32);
          v44 = (void **)(v40 - 24);
          if (*(char *)(v40 - 1) < 0)
            operator delete(*v44);
          v45 = v31 + v28;
          v46 = *(_OWORD *)(v31 + v28 - 24);
          *(_QWORD *)(v40 - 8) = *(_QWORD *)(v31 + v28 - 8);
          *(_OWORD *)v44 = v46;
          *(_BYTE *)(v45 - 1) = 0;
          *(_BYTE *)(v45 - 24) = 0;
          v28 -= 160;
        }
        while (v30 != v28);
      }
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(v6, v18, (std::string *)v10);
    }
    else
    {
      v14 = a5 - 0x3333333333333333 * ((uint64_t)(size - v8) >> 5);
      if (v14 > 0x199999999999999)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v8) >> 5);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0xCCCCCCCCCCCCCCLL)
        v16 = 0x199999999999999;
      else
        v16 = v14;
      v64 = v12;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v16);
      else
        v17 = 0;
      v47 = (std::string *)(v16 + 160 * v9);
      v60 = v16;
      v61 = (uint64_t)v47;
      v62 = (uint64_t)v47;
      v63 = v16 + 160 * v17;
      v48 = 5 * a5;
      v49 = (char *)v47 + 160 * a5;
      v50 = 32 * v48;
      do
      {
        marrs::qr::orchestration::QRToken::QRToken(v47, (const marrs::qr::orchestration::QRToken *)v6);
        v47 = (std::string *)((char *)v47 + 160);
        v6 = (std::string *)((char *)v6 + 160);
        v50 -= 160;
      }
      while (v50);
      v51 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>>(v12, v10, v10, *v7, *v7, v61, v61);
      v52 = v7[1];
      if (v10 != v52)
      {
        do
        {
          v53 = *(_OWORD *)v10;
          *((_QWORD *)v49 + 2) = *(_QWORD *)(v10 + 16);
          *(_OWORD *)v49 = v53;
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          *(_QWORD *)v10 = 0;
          v54 = *(_OWORD *)(v10 + 24);
          *((_QWORD *)v49 + 5) = *(_QWORD *)(v10 + 40);
          *(_OWORD *)(v49 + 24) = v54;
          *(_QWORD *)(v10 + 32) = 0;
          *(_QWORD *)(v10 + 40) = 0;
          *(_QWORD *)(v10 + 24) = 0;
          *((_QWORD *)v49 + 6) = 0;
          *((_QWORD *)v49 + 7) = 0;
          *((_QWORD *)v49 + 8) = 0;
          *((_OWORD *)v49 + 3) = *(_OWORD *)(v10 + 48);
          *((_QWORD *)v49 + 8) = *(_QWORD *)(v10 + 64);
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 56) = 0;
          *(_QWORD *)(v10 + 64) = 0;
          v55 = *(_OWORD *)(v10 + 72);
          *(_OWORD *)(v49 + 88) = *(_OWORD *)(v10 + 88);
          *(_OWORD *)(v49 + 72) = v55;
          v56 = *(_OWORD *)(v10 + 104);
          *((_QWORD *)v49 + 15) = *(_QWORD *)(v10 + 120);
          *(_OWORD *)(v49 + 104) = v56;
          *(_QWORD *)(v10 + 112) = 0;
          *(_QWORD *)(v10 + 120) = 0;
          *(_QWORD *)(v10 + 104) = 0;
          v49[128] = *(_BYTE *)(v10 + 128);
          v57 = *(_OWORD *)(v10 + 136);
          *((_QWORD *)v49 + 19) = *(_QWORD *)(v10 + 152);
          *(_OWORD *)(v49 + 136) = v57;
          *(_QWORD *)(v10 + 144) = 0;
          *(_QWORD *)(v10 + 152) = 0;
          *(_QWORD *)(v10 + 136) = 0;
          v49 += 160;
          v10 += 160;
        }
        while (v10 != v52);
        v10 = v7[1];
      }
      v58 = *v7;
      *v7 = v51;
      v7[1] = (uint64_t)v49;
      v59 = v7[2];
      v7[2] = v63;
      v62 = v10;
      v63 = v59;
      v60 = v58;
      v61 = v58;
      return (std::string *)std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v60);
    }
  }
  return result;
}

void sub_1C2877AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<unsigned long> &,std::vector<std::vector<unsigned long>> &>,std::tuple<std::vector<unsigned long>,std::vector<std::vector<unsigned long>>>,0ul,1ul>(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t *v5;

  v4 = *(char **)a1;
  if (v4 != (char *)a2)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5 != (uint64_t *)(a2 + 24))
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v5, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
}

char **std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>(const void **a1)
{
  uint64_t v1;
  char v2;
  size_t v3;
  const void *v4;
  void *v5;

  v1 = 0;
  v2 = *((_BYTE *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = *a1;
  v5 = &unk_1E7C66030;
  while ((&marrs::qr::processing::Vocab::reservedTokens)[v1 + 1] != (char *)v3
       || memcmp((&marrs::qr::processing::Vocab::reservedTokens)[v1], v4, v3))
  {
    v1 += 2;
    if (v1 == 14)
      return (char **)v5;
  }
  return &(&marrs::qr::processing::Vocab::reservedTokens)[v1];
}

void marrs::qr::processing::filterTokens(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::string __p;
  char *v26;
  std::string *v27;
  std::string *v28;
  char *v29;
  uint64_t v30;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *a2;
  v6 = a2[1];
  while (v7 < v6 && !*(_BYTE *)(v7 + 72))
    v7 += 160;
  if (v7 < v6)
  {
    v8 = 0;
    do
    {
      if (v8 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3) > a3)
        break;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      for (i = v7 + 160; i < a2[1] && !*(_BYTE *)(i + 72); i += 160)
      {
        v10 = *(char *)(i + 23);
        if (v10 >= 0)
          v11 = (const std::string::value_type *)i;
        else
          v11 = *(const std::string::value_type **)i;
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(i + 23);
        else
          v12 = *(_QWORD *)(i + 8);
        std::string::append(&__p, v11, v12);
      }
      v14 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      if (v14 >= v13)
      {
        v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - *(_QWORD *)a1) >> 5);
        v17 = v16 + 1;
        if (v16 + 1 > 0x199999999999999)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *(_QWORD *)a1) >> 5);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        v19 = (char *)(v18 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v17);
        v30 = a1 + 16;
        if (v19)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>((unint64_t)v19);
        else
          v20 = 0;
        v26 = v19;
        v27 = (std::string *)&v19[160 * v16];
        v28 = v27;
        v29 = &v19[160 * v20];
        marrs::qr::orchestration::QRToken::QRToken(v27, (const marrs::qr::orchestration::QRToken *)v7);
        v28 = (std::string *)((char *)v28 + 160);
        std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer((uint64_t *)a1, &v26);
        v15 = *(_QWORD *)(a1 + 8);
        std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v26);
      }
      else
      {
        marrs::qr::orchestration::QRToken::QRToken(*(std::string **)(a1 + 8), (const marrs::qr::orchestration::QRToken *)v7);
        v15 = v14 + 160;
        *(_QWORD *)(a1 + 8) = v15;
      }
      *(_QWORD *)(a1 + 8) = v15;
      std::string::operator=((std::string *)(v15 - 24), &__p);
      v23 = v7 + 48;
      v22 = *(_QWORD *)(v7 + 48);
      v21 = *(_QWORD *)(v23 + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 -= 0x5555555555555555 * ((v21 - v22) >> 3);
      v7 = i;
    }
    while (i < a2[1]);
    v24 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v24)
      MEMORY[0x1C3BC59A0](v24 - 24, " ");
  }
}

void sub_1C2877E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::RuleBasedMR::resolveMentionsInUtterance(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  _DWORD *v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  __int128 v27;
  char *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  NSObject *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t j;
  char *v41;
  char *v42;
  char *v43;
  unint64_t *v44;
  unint64_t *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v82;
  __int128 v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  void *v88[2];
  uint64_t v89;
  void *v90[3];
  char v91;
  void *v92[3];
  char v93;
  void *v94[3];
  char v95;
  void *v96[3];
  char v97;
  __int128 v98;
  _QWORD v99[2];
  void *v100[3];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  void *v106;
  __int128 v107;
  unint64_t v108;
  uint64_t *v109;
  _BYTE __p[24];
  char *v111;
  void *v112;
  char v113;
  void *v114;
  char v115;
  double v116;
  uint64_t v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  _QWORD v122[6];

  v5 = a3;
  v7 = a5;
  v122[3] = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v8 = *(uint64_t **)(a3 + 96);
  for (i = *(uint64_t **)(a3 + 104); v8 != i; ++v8)
  {
    marrs::mrr::mr::SpanTypeFilter::filterEntities(a2, *v8, (uint64_t)__p);
    std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>(&v101, (uint64_t)__p);
    if ((_BYTE)v111 && *(_QWORD *)__p)
      operator delete(*(void **)__p);
  }
  v10 = operator new(4uLL);
  v100[0] = v10;
  *v10 = 1;
  v100[1] = v10 + 1;
  v100[2] = v10 + 1;
  v11 = *(uint64_t **)(v5 + 40);
  v78 = *(uint64_t **)(v5 + 48);
  if (v11 != v78)
  {
    v84 = v7 + 2;
    v77 = v5;
    v80 = a2;
    do
    {
      v85 = *v11;
      if (*(_QWORD *)(*v11 + 32))
      {
        v12 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = *(uint64_t ***)(v85 + 32);
          if (*((char *)v13 + 23) < 0)
            v13 = (uint64_t **)*v13;
          v14 = a1 + 8;
          if (*(char *)(a1 + 31) < 0)
            v14 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = v13;
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = v14;
          _os_log_impl(&dword_1C281A000, v12, OS_LOG_TYPE_INFO, "[RulebasedMR] Mention Result '%s' to be resolved, locale = %s", __p, 0x16u);
        }
        v98 = 0uLL;
        v99[0] = 0;
        v15 = v101;
        if (v102 - v101 >= 1)
        {
          v16 = v11;
          v17 = (v102 - v101) >> 5;
          v112 = v99;
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(v17);
          *(_QWORD *)__p = v18;
          *(_QWORD *)&__p[8] = v18;
          *(_QWORD *)&__p[16] = v18;
          v111 = &v18[32 * v19];
          v20 = &v18[32 * v17];
          v21 = 32 * v17;
          v5 = v77;
          v11 = v16;
          do
          {
            std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v18, v15);
            v18 += 32;
            v15 += 32;
            v21 -= 32;
          }
          while (v21);
          *(_QWORD *)&__p[16] = v20;
          *(_QWORD *)&__p[8] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::optional<std::vector<unsigned long>>>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>>((uint64_t)v99, 0, 0, v98, v98, *(uint64_t *)&__p[8], *(uint64_t *)&__p[8]);
          v22 = *((_QWORD *)&v98 + 1);
          v23 = *(char **)&__p[16];
          v96[0] = *(void **)&__p[16];
          v94[0] = *(void **)&__p[16];
          v106 = v99;
          *(_QWORD *)&v107 = v94;
          *((_QWORD *)&v107 + 1) = v96;
          if (*((_QWORD *)&v98 + 1))
          {
            v24 = 0;
            do
            {
              v25 = &v23[v24];
              *v25 = 0;
              v25[24] = 0;
              if (*(_BYTE *)(v24 + 24))
              {
                *(_OWORD *)v25 = *(_OWORD *)v24;
                *((_QWORD *)v25 + 2) = *(_QWORD *)(v24 + 16);
                *(_QWORD *)(v24 + 8) = 0;
                *(_QWORD *)(v24 + 16) = 0;
                *(_QWORD *)v24 = 0;
                v25[24] = 1;
              }
              v24 += 32;
            }
            while (v24 != v22);
            v23 += v24;
            v96[0] = v23;
          }
          LOBYTE(v108) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::vector<unsigned long>>>,std::optional<std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v106);
          v27 = v98;
          *(_QWORD *)&v98 = *(_QWORD *)&__p[8];
          *((_QWORD *)&v98 + 1) = v23;
          *(_OWORD *)&__p[8] = v27;
          v28 = (char *)v99[0];
          v99[0] = v111;
          v111 = v28;
          *(_QWORD *)__p = v27;
          std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer((uint64_t)__p);
        }
        LOBYTE(v96[0]) = 0;
        v97 = 0;
        if ((*(_BYTE *)(v5 + 176) & 2) != 0 && *(int *)(v5 + 160) >= 1)
        {
          marrs::mrr::mr::OrdinalFilter::filterEntities(a1 + 32, (uint64_t)a2, v85, __p);
          std::__optional_storage_base<std::vector<unsigned long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long>,false>>((uint64_t)v96, (__n128 *)__p);
          if ((_BYTE)v111 && *(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          if (v97)
          {
            *(_DWORD *)__p = 2;
            std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType const*,marrs::mrr::mr::MRResultType const*>(v100, __p, &__p[4]);
          }
          std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v96);
        }
        else
        {
          v29 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            v30 = *(_QWORD *)(v5 + 160);
            *(_DWORD *)__p = 134217984;
            *(_QWORD *)&__p[4] = v30;
            _os_log_impl(&dword_1C281A000, v29, OS_LOG_TYPE_DEBUG, "[Ordinal MR] Request(turnIndex='%llu') is not a follow-up turn, skipping ordinal filter", __p, 0xCu);
          }
        }
        marrs::mrr::mr::SpanTypeFilter::filterEntities(a2, v85, (uint64_t)v94);
        std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v94);
        marrs::mrr::mr::UtteranceKeywordFilter::filterEntities((_QWORD *)(a1 + 400), a2, *(_QWORD *)(v5 + 152), v92);
        std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v92);
        marrs::mrr::mr::MentionKeywordFilter::filterEntities(v90);
        std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v90);
        v88[0] = 0;
        v88[1] = 0;
        v89 = 0;
        v31 = *((_QWORD *)&v98 + 1);
        v32 = v98;
        v79 = v11;
        if ((_QWORD)v98 == *((_QWORD *)&v98 + 1))
          goto LABEL_44;
        v33 = 1;
        do
        {
          std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, v32);
          v34 = (_BYTE)v111 == 0;
          if ((_BYTE)v111 && *(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          v33 &= v34;
          v32 += 32;
        }
        while (v32 != v31);
        if (v33)
        {
LABEL_44:
          v35 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__p = 0;
            _os_log_impl(&dword_1C281A000, v35, OS_LOG_TYPE_INFO, "[RulebasedMR] - None of filters fired, attempting to output most salient visual entity", __p, 2u);
          }
          marrs::mrr::mr::GazeBasedFilter::filterEntities(a2, (uint64_t)__p);
          if ((_BYTE)v111)
          {
            v36 = *(void **)__p;
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v88, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
            if (v36)
              operator delete(v36);
          }
          v38 = v88[0];
          v37 = v88[1];
        }
        else
        {
          marrs::mrr::mr::enumerateAllIndices(&v86, *a2, a2[1]);
          v39 = *((_QWORD *)&v98 + 1);
          v82 = *((_QWORD *)&v98 + 1);
          for (j = v98; j != v39; j += 32)
          {
            std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, j);
            v106 = 0;
            v107 = 0uLL;
            if ((_BYTE)v111)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v106, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
            }
            else
            {
              marrs::mrr::mr::enumerateAllIndices(&v104, *a2, a2[1]);
              v106 = v104;
              v107 = v105;
            }
            std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
            std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
            v41 = 0;
            v42 = (char *)v86;
            v43 = v87;
            if (v86 == v87)
            {
              v46 = 0;
            }
            else
            {
              v44 = (unint64_t *)v106;
              v45 = (unint64_t *)v107;
              v46 = 0;
              if (v106 != (void *)v107)
              {
                v41 = 0;
                v46 = 0;
                v47 = 0;
                do
                {
                  v48 = *(_QWORD *)v42;
                  if (*(_QWORD *)v42 >= *v44)
                  {
                    if (*v44 >= v48)
                    {
                      if ((unint64_t)v46 >= v47)
                      {
                        v50 = (v46 - v41) >> 3;
                        v51 = v50 + 1;
                        if ((unint64_t)(v50 + 1) >> 61)
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        if ((uint64_t)(v47 - (_QWORD)v41) >> 2 > v51)
                          v51 = (uint64_t)(v47 - (_QWORD)v41) >> 2;
                        if (v47 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                          v52 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v52 = v51;
                        if (v52)
                        {
                          v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v52);
                          v48 = *(_QWORD *)v42;
                        }
                        else
                        {
                          v53 = 0;
                        }
                        v54 = (char *)(v52 + 8 * v50);
                        *(_QWORD *)v54 = v48;
                        v49 = v54 + 8;
                        while (v46 != v41)
                        {
                          v55 = *((_QWORD *)v46 - 1);
                          v46 -= 8;
                          *((_QWORD *)v54 - 1) = v55;
                          v54 -= 8;
                        }
                        v47 = v52 + 8 * v53;
                        if (v41)
                          operator delete(v41);
                        v41 = v54;
                      }
                      else
                      {
                        *(_QWORD *)v46 = v48;
                        v49 = v46 + 8;
                      }
                      v42 += 8;
                      v46 = v49;
                    }
                    ++v44;
                  }
                  else
                  {
                    v42 += 8;
                  }
                }
                while (v42 != v43 && v44 != v45);
              }
            }
            v7 = a5;
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v86, v41, (uint64_t)v46, (v46 - v41) >> 3);
            a2 = v80;
            if (v41)
              operator delete(v41);
            if (v106)
              operator delete(v106);
            if ((_BYTE)v111 && *(_QWORD *)__p)
            {
              *(_QWORD *)&__p[8] = *(_QWORD *)__p;
              operator delete(*(void **)__p);
            }
            v39 = v82;
          }
          v56 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__p = 134217984;
            *(_QWORD *)&__p[4] = (v87 - (_BYTE *)v86) >> 3;
            _os_log_impl(&dword_1C281A000, v56, OS_LOG_TYPE_INFO, "[RulebasedMR] - intersection of all filters  - %lu", __p, 0xCu);
          }
          marrs::mrr::mr::pickTopSalientEntity((char **)__p, a2, (unint64_t *)v86, (unint64_t *)v87);
          if (v88[0])
            operator delete(v88[0]);
          v83 = *(_OWORD *)__p;
          *(_OWORD *)v88 = *(_OWORD *)__p;
          v89 = *(_QWORD *)&__p[16];
          v57 = MRRLoggerForCategory(2);
          v37 = (_QWORD *)*((_QWORD *)&v83 + 1);
          v38 = (_QWORD *)v83;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__p = 134217984;
            *(_QWORD *)&__p[4] = (uint64_t)(*((_QWORD *)&v83 + 1) - v83) >> 3;
            _os_log_impl(&dword_1C281A000, v57, OS_LOG_TYPE_INFO, "[RulebasedMR] - most salient entity count  - %lu", __p, 0xCu);
          }
          if (v86)
          {
            v87 = (char *)v86;
            operator delete(v86);
          }
        }
        if (v38 != v37)
        {
          do
          {
            if (0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) <= *v38)
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)__p, (const marrs::mrr::mr::MRREntity *)(*a2 + 216 * *v38));
            v59 = v7[1];
            v58 = v7[2];
            if (v59 >= v58)
            {
              v61 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v59 - *v7) >> 3);
              v62 = v61 + 1;
              if (v61 + 1 > 0xBE82FA0BE82FA0)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v63 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v58 - *v7) >> 3);
              if (2 * v63 > v62)
                v62 = 2 * v63;
              if (v63 >= 0x5F417D05F417D0)
                v64 = 0xBE82FA0BE82FA0;
              else
                v64 = v62;
              v109 = v84;
              if (v64)
                v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v64);
              else
                v65 = 0;
              v106 = (void *)v64;
              *(_QWORD *)&v107 = v64 + 344 * v61;
              *((_QWORD *)&v107 + 1) = v107;
              v108 = v64 + 344 * v65;
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,double &,marrs::mrr::mr::MRREntity &,std::vector<marrs::mrr::mr::MRResultType> &>(v107, v85, (marrs::mrr::mr::MRREntity *)__p, (uint64_t)v100, v116);
              *((_QWORD *)&v107 + 1) += 344;
              std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(v7, &v106);
              v60 = v7[1];
              std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v106);
            }
            else
            {
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,double &,marrs::mrr::mr::MRREntity &,std::vector<marrs::mrr::mr::MRResultType> &>(v7[1], v85, (marrs::mrr::mr::MRREntity *)__p, (uint64_t)v100, v116);
              v60 = v59 + 344;
              v7[1] = v59 + 344;
            }
            v7[1] = v60;
            v106 = v122;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
            if (v121 < 0)
              operator delete(v120);
            if (v119 < 0)
              operator delete(v118);
            v106 = &v117;
            std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
            if (v115 < 0)
              operator delete(v114);
            if (v113 < 0)
              operator delete(v112);
            if (SHIBYTE(v111) < 0)
              operator delete(*(void **)&__p[8]);
            ++v38;
          }
          while (v38 != v37);
          v37 = v88[0];
        }
        v5 = v77;
        v11 = v79;
        if (v37)
        {
          v88[1] = v37;
          operator delete(v37);
        }
        if (v91 && v90[0])
          operator delete(v90[0]);
        if (v93 && v92[0])
          operator delete(v92[0]);
        if (v95 && v94[0])
          operator delete(v94[0]);
        if (v97 && v96[0])
          operator delete(v96[0]);
        *(_QWORD *)__p = &v98;
        std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      else
      {
        v26 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__p = 0;
          _os_log_impl(&dword_1C281A000, v26, OS_LOG_TYPE_INFO, "[RulebasedMR] missing mention", __p, 2u);
        }
      }
      ++v11;
    }
    while (v11 != v78);
  }
  v66 = *a4;
  v67 = a4[1];
  if (*a4 != v67)
  {
    do
    {
      v68 = *v66;
      LODWORD(v106) = 1;
      v69 = operator new(4uLL);
      *v69 = 3;
      *(_QWORD *)&__p[16] = v69 + 1;
      *(_QWORD *)__p = v69;
      *(_QWORD *)&__p[8] = v69 + 1;
      v70 = v7[1];
      if (v70 >= v7[2])
      {
        v71 = std::vector<marrs::mrr::mr::MRMatchingResult>::__emplace_back_slow_path<sirinluinternal::MatchingSpan const&,int,std::vector<marrs::mrr::mr::MRResultType>>(v7, v68, (int *)&v106, (uint64_t)__p);
      }
      else
      {
        marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v7[1], 1.0, v68, (uint64_t)__p);
        v71 = v70 + 344;
        v7[1] = v70 + 344;
      }
      v7[1] = v71;
      operator delete(v69);
      ++v66;
    }
    while (v66 != v67);
  }
  v72 = v7[1];
  v73 = 126 - 2 * __clz(0x82FA0BE82FA0BE83 * ((uint64_t)(v72 - *v7) >> 3));
  if (v72 == *v7)
    v74 = 0;
  else
    v74 = v73;
  std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(*v7, v72, v74, 1);
  if (v100[0])
    operator delete(v100[0]);
  *(_QWORD *)__p = &v101;
  std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C2878A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a64;

  a53 = &a64;
  std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::RuleBasedMR::~RuleBasedMR(void **this)
{
  marrs::mrr::mr::RuleBasedMR::~RuleBasedMR(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  *this = &off_1E7C678A0;
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 113);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 93);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 73);
  this[50] = &off_1E7C67900;
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(this[71]);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 50);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 30);
  marrs::mrr::mr::OrdinalFilter::~OrdinalFilter((marrs::mrr::mr::OrdinalFilter *)(this + 4));
  *this = &unk_1E7C67840;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v4 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v20 = v5;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(v12);
    else
      v13 = 0;
    v17 = v12;
    *(_QWORD *)&v18 = v12 + 32 * v9;
    *((_QWORD *)&v18 + 1) = v18;
    v19 = v12 + 32 * v13;
    std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100](v18, a2);
    v8 = v18 + 32;
    v14 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::optional<std::vector<unsigned long>>>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>>(v5, a1[1], a1[1], *a1, *a1, v18, v18);
    v15 = *(_OWORD *)a1;
    *a1 = v14;
    a1[1] = v8;
    v18 = v15;
    v16 = a1[2];
    a1[2] = v19;
    v19 = v16;
    v17 = v15;
    result = std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    result = std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100](a1[1], a2);
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1C2878E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<std::vector<unsigned long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long>,false>>(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;
  void *v6;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*(v4 - 8))
        {
          v6 = (void *)*((_QWORD *)v4 - 4);
          if (v6)
          {
            *((_QWORD *)v4 - 3) = v6;
            operator delete(v6);
          }
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,double &,marrs::mrr::mr::MRREntity &,std::vector<marrs::mrr::mr::MRResultType> &>(uint64_t a1, uint64_t a2, marrs::mrr::mr::MRREntity *a3, uint64_t a4, double a5)
{
  float v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;
  void **v22;

  v8 = a5;
  marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&v9, a3);
  marrs::mrr::mr::MRMatchingResult::MRMatchingResult(a1, v8, a2, (const marrs::mrr::mr::MRREntity *)&v9, a4);
  v22 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  v22 = (void **)&v16;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
}

void sub_1C28790A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  marrs::mrr::mr::MRREntity::~MRREntity(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__emplace_back_slow_path<sirinluinternal::MatchingSpan const&,int,std::vector<marrs::mrr::mr::MRResultType>>(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;

  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = a1 + 2;
  if (0x5F417D05F417D06 * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x5F417D05F417D06 * ((a1[2] - *a1) >> 3);
  if (0x82FA0BE82FA0BE83 * ((a1[2] - *a1) >> 3) >= 0x5F417D05F417D0)
    v11 = 0xBE82FA0BE82FA0;
  else
    v11 = v5;
  v19 = v10;
  if (v11)
    v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v11);
  else
    v12 = 0;
  v15 = v11;
  v16 = v11 + 344 * v4;
  v17 = v16;
  v18 = v11 + 344 * v12;
  marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v16, (float)*a3, a2, a4);
  v17 = v16 + 344;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_1C28791D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1C2879244(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((_BYTE *)v2 - 8))
      {
        v5 = *v4;
        if (*v4)
        {
          *(v2 - 3) = v5;
          operator delete(v5);
          v4 = *(void ***)(a1 + 16);
        }
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::optional<std::vector<unsigned long>>>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = a7;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      *(_BYTE *)(a7 + v8 - 32) = 0;
      v10 = a3 + v8;
      *(_BYTE *)(a7 + v8 - 8) = 0;
      if (*(_BYTE *)(a3 + v8 - 8))
      {
        v11 = (_QWORD *)(v10 - 32);
        *(_QWORD *)(a7 + v8 - 32) = 0;
        *(_QWORD *)(a7 + v8 - 24) = 0;
        *(_QWORD *)(a7 + v8 - 16) = 0;
        *(_OWORD *)(v9 - 32) = *(_OWORD *)(v10 - 32);
        *(_QWORD *)(v9 - 16) = *(_QWORD *)(v10 - 16);
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        *(_BYTE *)(v9 - 8) = 1;
      }
      v8 -= 32;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::vector<unsigned long>>>,std::optional<std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 - 8))
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
      }
      v3 -= 32;
    }
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [7],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C28793E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float *marrs::TensorConvertor<float>::convert(_QWORD *a1, float a2)
{
  _QWORD *v4;
  float *v5;
  float *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = operator new(8uLL);
  *v4 = 1;
  *a1 = v4;
  a1[1] = v4 + 1;
  a1[2] = v4 + 1;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v5 = (float *)operator new(4uLL);
  a1[3] = v5;
  *v5 = a2;
  result = v5 + 1;
  a1[4] = result;
  a1[5] = result;
  return result;
}

void sub_1C287946C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer marrs::qr::processing::Vocab::addWord(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  std::vector<std::string>::pointer result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  std::vector<std::string> *v26;
  std::string *v27;

  result = (std::vector<std::string>::pointer)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)a2);
  if (result)
    return result;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, (unsigned __int8 *)a2))
            {
              goto LABEL_44;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v16 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v13 + 4) = *(_QWORD *)(a2 + 16);
    v16 = v6;
  }
  *((_QWORD *)v13 + 5) = 0;
  v17 = (float)(unint64_t)(v16 + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v24)
  {
    *(_QWORD *)v13 = *v24;
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(v23 + 8 * v2) = a1 + 16;
    if (!*(_QWORD *)v13)
      goto LABEL_43;
    v25 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
  }
  *v24 = v13;
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
LABEL_44:
  *((_QWORD *)v13 + 5) = v6;
  v26 = (std::vector<std::string> *)(a1 + 40);
  v27 = *(std::string **)(a1 + 48);
  if ((unint64_t)v27 >= *(_QWORD *)(a1 + 56))
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v26, (__int128 *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v26, (__int128 *)a2);
    result = v27 + 1;
  }
  *(_QWORD *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

void sub_1C28796F8(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

marrs::qr::processing::Vocab *marrs::qr::processing::Vocab::Vocab(marrs::qr::processing::Vocab *this, char a2, unsigned int a3)
{
  std::vector<std::string> *v6;
  char **i;
  size_t v8;
  char *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *__dst[2];
  unint64_t v15;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 5) = 0;
  v6 = (std::vector<std::string> *)((char *)this + 40);
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)this, (unint64_t)(float)a3);
  std::vector<std::string>::reserve(v6, a3);
  if ((a2 & 1) == 0)
  {
    for (i = &marrs::qr::processing::Vocab::reservedTokens; i != (char **)&unk_1E7C66030; i += 2)
    {
      v8 = (size_t)i[1];
      if (v8 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = *i;
      if (v8 >= 0x17)
      {
        v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v11 = v8 | 7;
        v12 = v11 + 1;
        v10 = (void **)operator new(v11 + 1);
        __dst[1] = (void *)v8;
        v15 = v12 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v15) = i[1];
        v10 = __dst;
        if (!v8)
          goto LABEL_11;
      }
      memmove(v10, v9, v8);
LABEL_11:
      *((_BYTE *)v10 + v8) = 0;
      marrs::qr::processing::Vocab::addWord((uint64_t)this, (uint64_t)__dst);
      if (SHIBYTE(v15) < 0)
        operator delete(__dst[0]);
    }
  }
  *((_BYTE *)this + 64) = 0;
  return this;
}

void sub_1C287985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

uint64_t marrs::qr::processing::Vocab::toIndex(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void *__p[2];
  char v10;

  v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a1, a2);
  if (v3)
    return *((_QWORD *)v3 + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "[OOV]");
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  v7 = v6;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_6;
    return 0;
  }
  if (!v6)
    return 0;
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "[OOV]");
  v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v4 = *((_QWORD *)v8 + 5);
  if (v10 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1C2879958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t marrs::qr::orchestration::AsrConfidenceChecker::verify(const QRRequest *this, const QRRequest *a2)
{
  QRInteraction *i;
  QRToken *j;
  uint64_t v4;
  double v5;

  for (; this != a2; this = (const QRRequest *)((char *)this + 112))
  {
    for (i = *(QRInteraction **)&this->var0; i != this->var1.var0; i = (QRInteraction *)((char *)i + 96))
    {
      for (j = i->var2.var2.var0; j != (QRToken *)i->var3.var0.var0.var0.var1.var0; j = (QRToken *)((char *)j + 160))
      {
        v4 = 0;
        v5 = *(double *)&j[2].var0.var0.var0.var0.var1.var0;
        if (v5 < 0.0 || v5 > 1000.0)
          return v4;
      }
    }
  }
  return 1;
}

uint64_t marrs::qr::orchestration::PreviousNLUtteranceChecker::verify(marrs::qr::orchestration::PreviousNLUtteranceChecker *this, const QRRequest *a2)
{
  QRInteraction *var0;
  QRInteraction *var1;
  QRUtterance *v4;
  QRUtterance *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  var0 = a2->var1.var0;
  var1 = a2->var1.var1;
  if (var0 != var1)
  {
    while (2)
    {
      v4 = var0->var1.var0;
      v5 = var0->var1.var1;
      while (v4 != v5)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(&v8, v4->var1.var0.var1.var0[0], v4->var1.var0.var1.var0[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4->var1.var0.var1.var0[1] - v4->var1.var0.var1.var0[0]) >> 5));
        if (v8 == v9)
        {
          v11 = (void **)&v8;
          std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v11);
          return 0;
        }
        if (*((char *)&v4->var1.var0.var0.var0.var1 + 23) < 0)
          v6 = v4->var1.var0.var0.var0.var1.var1;
        else
          v6 = *((unsigned __int8 *)&v4->var1.var0.var0.var0.var1 + 23);
        v11 = (void **)&v8;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (!v6)
          return 0;
        v4 = (QRUtterance *)((char *)v4 + 96);
      }
      var0 = (QRInteraction *)((char *)var0 + 112);
      if (var0 != var1)
        continue;
      break;
    }
  }
  return 1;
}

void RepetitionPredictorResult::RepetitionPredictorResult(RepetitionPredictorResult *this, const RepetitionPredictorResult *a2)
{
  void **v4;
  std::string *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;

  *((_QWORD *)this + 2) = 0;
  v4 = (void **)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 0;
  v5 = (std::string *)((char *)this + 48);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 2);
  if (*((_QWORD *)a2 + 3) != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *((_QWORD *)this + 4);
      if ((unint64_t)v7 >= v9)
      {
        v11 = (char *)*v4;
        v12 = (v7 - (_BYTE *)*v4) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v15);
          v11 = (char *)*((_QWORD *)this + 2);
          v7 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v16 = 0;
        }
        v17 = (_DWORD *)(v15 + 4 * v12);
        *v17 = *(_DWORD *)(v6 + 4 * v8);
        v10 = (char *)(v17 + 1);
        while (v7 != v11)
        {
          v18 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v17 = v18;
        }
        *((_QWORD *)this + 2) = v17;
        *((_QWORD *)this + 3) = v10;
        *((_QWORD *)this + 4) = v15 + 4 * v16;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_DWORD *)v7 = *(_DWORD *)(v6 + 4 * v8);
        v10 = v7 + 4;
      }
      *((_QWORD *)this + 3) = v10;
      ++v8;
      v6 = *((_QWORD *)a2 + 2);
      v7 = v10;
    }
    while (v8 < (*((_QWORD *)a2 + 3) - v6) >> 2);
  }
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  std::string::operator=(v5, (const std::string *)a2 + 2);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
}

void sub_1C2879C20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void RepetitionPredictorResult::AugmentationToWords(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  std::string *v13;
  std::vector<std::string>::pointer v14;

  std::vector<std::string>::__clear[abi:ne180100](a4);
  v9 = *(_DWORD **)(a1 + 16);
  v8 = *(_DWORD **)(a1 + 24);
  if (v9 != v8)
  {
    v10 = -1431655765 * ((a2[1] - *a2) >> 3);
    do
    {
      v11 = *v9 - 1;
      if (v11 >= v10)
        v12 = (__int128 *)(*a3 + 24 * (v11 - v10));
      else
        v12 = (__int128 *)(*a2 + 24 * v11);
      v13 = (std::string *)a4[1];
      if ((unint64_t)v13 >= a4[2])
      {
        v14 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)a4, v12);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v12);
        v14 = v13 + 1;
      }
      a4[1] = (uint64_t)v14;
      ++v9;
    }
    while (v9 != v8);
  }
}

void RepetitionPredictorResult::get_model_output_string(RepetitionPredictorResult *this, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  size_t v25;
  std::string *v26;
  RepetitionPredictorResult *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  char v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  std::to_string(&v40, *(float *)a2);
  v4 = std::string::insert(&v40, 0, "No:");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v41, ", ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v42, "Partial:");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, *(float *)(a2 + 4));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v39;
  else
    v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v43, (const std::string::value_type *)v10, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v44, ", ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v47, "Full:");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, *(float *)(a2 + 8));
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v38;
  else
    v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v19 = v38.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v45, (const std::string::value_type *)v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v46, ", ");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  *((_QWORD *)this + 2) = *((_QWORD *)&v22->__r_.__value_.__l + 2);
  *(_OWORD *)this = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v24 = *((char *)this + 23);
  if (v24 >= 0)
    v25 = *((unsigned __int8 *)this + 23);
  else
    v25 = *((_QWORD *)this + 1);
  v26 = &v46;
  std::string::basic_string[abi:ne180100]((uint64_t)&v46, v25 + 16);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if (v25)
  {
    if (v24 >= 0)
      v27 = this;
    else
      v27 = *(RepetitionPredictorResult **)this;
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "AugmentationIdx:");
  if (v24 < 0)
    operator delete(*(void **)this);
  *(std::string *)this = v46;
  v28 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 24) != v28)
  {
    v29 = 0;
    do
    {
      std::to_string(&v45, *(_DWORD *)(v28 + 4 * v29));
      v30 = *((char *)this + 23);
      if (v30 >= 0)
        v31 = (const std::string::value_type *)this;
      else
        v31 = *(const std::string::value_type **)this;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)this + 23);
      else
        v32 = *((_QWORD *)this + 1);
      v33 = std::string::insert(&v45, 0, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v46, " ");
      v36 = v35->__r_.__value_.__r.__words[0];
      v47.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
      v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 23) < 0)
        operator delete(*(void **)this);
      *(_QWORD *)this = v36;
      *((_QWORD *)this + 1) = v47.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)this + 15) = *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
      *((_BYTE *)this + 23) = v37;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      ++v29;
      v28 = *(_QWORD *)(a2 + 16);
    }
    while (v29 < (*(_QWORD *)(a2 + 24) - v28) >> 2);
  }
}

void sub_1C287A12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void **v54;
  char v55;

  if (v55 < 0)
    operator delete(*v54);
  _Unwind_Resume(exception_object);
}

uint64_t PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = operator new();
  result = MEMORY[0x1C3BC54C0](v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (uint64_t *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C287A3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *marrs::qr::orchestration::InputCheckerUtil::getUtteranceTokens(_QWORD *result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 == 1)
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    v4 = a2[8];
    v3 = a2[9];
    return std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(result, v4, v3, 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 5));
  }
  if (!a3)
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    v4 = a2[5];
    v3 = a2[6];
    return std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(result, v4, v3, 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 5));
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

BOOL marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  _QWORD v11[3];
  void **v12;

  if (a1 == a2)
    return 0;
  v5 = a1;
  while (2)
  {
    v6 = *v5;
    v7 = v5[1];
    v8 = *v5 != v7;
    if (*v5 != v7)
    {
      do
      {
        marrs::qr::orchestration::InputCheckerUtil::getUtteranceTokens(v11, (_QWORD *)v6, a3);
        if (v11[0] == v11[1])
        {
          v12 = (void **)v11;
          std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v12);
          return 0;
        }
        if (*(char *)(v6 + 39) < 0)
          v9 = *(_QWORD *)(v6 + 24);
        else
          v9 = *(unsigned __int8 *)(v6 + 39);
        v12 = (void **)v11;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v12);
        if (!v9)
          return 0;
        v6 += 96;
      }
      while (v6 != v7);
      v5 += 14;
      if (v5 != a2)
        continue;
    }
    break;
  }
  return v8;
}

_QWORD *std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_23;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_23:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v12];
    v13 = a3 - v6;
    if (v13)
      result = memmove(result, v6, v13);
    v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v14 = (void **)(result + 1);
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 3;
  if (v16 >= a4)
  {
    v13 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  v17 = &__src[8 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    v9 = (char *)*v14;
  }
  v13 = a3 - v17;
  if (v13)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v14 = &v9[v13];
  return result;
}

_QWORD *std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::construct[abi:ne180100]<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType,marrs::qr::inference_engine::ANEEmbeddingModuleOutputType const&>(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 3, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
}

void sub_1C287A674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType(marrs::qr::inference_engine::LSTMDecoderInputType *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 16) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
  v9 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v9;
    operator delete(v9);
  }
}

marrs::qr::inference_engine::LSTMDecoderInputType *marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType(marrs::qr::inference_engine::LSTMDecoderInputType *this, const marrs::qr::inference_engine::LSTMDecoderInputType *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 12, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 15, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 2);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 18, *((const void **)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 3);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 21, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  return this;
}

void sub_1C287A89C(_Unwind_Exception *a1)
{
  marrs::inference_engine::InferenceTensor *v1;
  marrs::inference_engine::InferenceTensor *v2;
  marrs::inference_engine::InferenceTensor *v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 19) = v6;
    operator delete(v6);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor(v3);
  marrs::inference_engine::InferenceTensor::~InferenceTensor(v2);
  marrs::inference_engine::InferenceTensor::~InferenceTensor(v1);
  _Unwind_Resume(a1);
}

void sub_1C287A918()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    *(_QWORD *)(v0 + 8) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1C287A910);
}

void marrs::qr::inference_engine::EspressoQueryRewriteModel::forward_decoder(_QWORD *a1, std::chrono::steady_clock::time_point *a2, _QWORD *a3, uint64_t **a4)
{
  std::chrono::steady_clock::time_point *v5;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  os_signpost_id_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31;
  unint64_t v32;
  char *rep;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v42;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43;
  std::chrono::steady_clock::time_point v44;
  uint64_t v45;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v56;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float *v62;
  float v63;
  float v64;
  unint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  size_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _DWORD *v93;
  std::string::size_type size;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  _QWORD *exception;
  std::string *v104;
  __int128 v105;
  _QWORD *v106;
  os_signpost_id_t v107;
  NSObject *log;
  _QWORD *v109;
  unint64_t v110;
  std::chrono::steady_clock::time_point *v111;
  uint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  void *v120;
  char *v121;
  uint8_t buf[16];
  uint64_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  _QWORD v141[3];
  _QWORD v142[3];
  _QWORD v143[3];
  _QWORD v144[3];
  const void *v145;
  uint64_t v146;
  uint64_t v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[3];
  _QWORD v152[3];
  int v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  char *v157;
  char *v158;
  char *v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  void *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  _QWORD *v174;
  __int128 __p;
  uint64_t v176;
  std::string v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[3];
  _QWORD v182[3];
  _QWORD v183[3];
  _QWORD v184[3];
  _QWORD v185[3];
  _QWORD v186[3];
  _OWORD v187[3];
  __int128 v188;
  _QWORD v189[4];
  __int128 v190;
  _QWORD v191[8];

  v5 = a2;
  v191[5] = *MEMORY[0x1E0C80C00];
  a2[32].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = (char *)a4[12];
  if ((char *)a4[13] - v7 != 24)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::to_string(&v177, a4[13] - a4[12]);
    v104 = std::string::insert(&v177, 0, "encodingsShape rank mismatch, should be 3, found");
    v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v123 = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v187, "QueryRewrite");
    InferenceError::InferenceError(exception, (uint64_t)buf, (uint64_t)v187, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_decoder_module.cpp", 58);
  }
  *(_QWORD *)&v187[0] = "encoder_outputs";
  LODWORD(v173) = *((_QWORD *)v7 + 2);
  LODWORD(v167) = *(_QWORD *)v7;
  LODWORD(v160) = -1;
  LODWORD(v154) = -1;
  LODWORD(v166[0]) = -1;
  v153 = 2;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    v106 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Failed to reshape the decoder.");
    std::string::basic_string[abi:ne180100]<0>(&v177, "QueryRewrite");
    InferenceError::InferenceError(v106, (uint64_t)buf, (uint64_t)&v177, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_decoder_module.cpp", 70);
  }
  v5[33].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[32].__d_.__rep_) / 1000;
  v5[34].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(v5[2].__d_.__rep_ + 8));
  v5[35].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[34].__d_.__rep_) / 1000;
  v5[50].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v5[51].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[50].__d_.__rep_) / 1000;
  v5[52].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v5[53].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[52].__d_.__rep_) / 1000;
  v5[54].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = a4[12];
  v9 = *v8;
  v10 = v8[2];
  v11 = operator new(0x10uLL);
  *v11 = v9;
  v11[1] = v10;
  memset(buf, 0, sizeof(buf));
  v123 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v11, (uint64_t)(v11 + 2), 2uLL);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v124, a4[15], (uint64_t)a4[16], ((char *)a4[16] - (char *)a4[15]) >> 2);
  v12 = **a4;
  v13 = (*a4)[2];
  v14 = operator new(0x10uLL);
  *v14 = v12;
  v14[1] = v13;
  memset(&v177, 0, sizeof(v177));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v177, v14, (uint64_t)(v14 + 2), 2uLL);
  v179 = 0;
  v178 = 0;
  v180 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v178, a4[3], (uint64_t)a4[4], ((char *)a4[4] - (char *)a4[3]) >> 2);
  memset(v187, 0, 24);
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v187, v14, (uint64_t)(v14 + 2), 2uLL);
  memset((char *)&v187[1] + 8, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)&v187[1] + 1, a4[9], (uint64_t)a4[10], ((char *)a4[10] - (char *)a4[9]) >> 2);
  v5[55].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[54].__d_.__rep_) / 1000;
  v15 = v11[1];
  v16 = operator new(0x10uLL);
  v174 = v16 + 2;
  *v16 = 1;
  v16[1] = v15;
  *(_QWORD *)&v173 = v16;
  *((_QWORD *)&v173 + 1) = v16 + 2;
  LODWORD(v167) = 0;
  std::vector<float>::vector(&__p, v15, &v167);
  memset(v141, 0, sizeof(v141));
  v17 = (void *)v177.__r_.__value_.__r.__words[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v141, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_, (uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 3);
  memset(v142, 0, sizeof(v142));
  v18 = v178;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v142, v178, v179, (v179 - (uint64_t)v178) >> 2);
  memset(v143, 0, sizeof(v143));
  v19 = *(void **)&v187[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v143, *(const void **)&v187[0], *((uint64_t *)&v187[0] + 1), (uint64_t)(*((_QWORD *)&v187[0] + 1) - *(_QWORD *)&v187[0]) >> 3);
  memset(v144, 0, sizeof(v144));
  v20 = (void *)*((_QWORD *)&v187[1] + 1);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v144, *((const void **)&v187[1] + 1), *(uint64_t *)&v187[2], (uint64_t)(*(_QWORD *)&v187[2] - *((_QWORD *)&v187[1] + 1)) >> 2);
  v146 = 0;
  v145 = 0;
  v147 = 0;
  v21 = *(void **)buf;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v145, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
  v109 = a1;
  v149 = 0;
  v148 = 0;
  v150 = 0;
  v22 = v124;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v148, v124, (uint64_t)v125, (v125 - (_BYTE *)v124) >> 2);
  memset(v151, 0, sizeof(v151));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v151, (const void *)v173, *((uint64_t *)&v173 + 1), (uint64_t)(*((_QWORD *)&v173 + 1) - v173) >> 3);
  memset(v152, 0, sizeof(v152));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v152, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v173)
  {
    *((_QWORD *)&v173 + 1) = v173;
    operator delete((void *)v173);
  }
  if (v20)
    operator delete(v20);
  if (v19)
    operator delete(v19);
  if (v18)
    operator delete(v18);
  if (v17)
    operator delete(v17);
  operator delete(v14);
  if (v22)
    operator delete(v22);
  if (v21)
    operator delete(v21);
  operator delete(v11);
  v5[42].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1)
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_4);
  v23 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  v24 = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v24, "RunDecoderDuration", "CCQRAer Run decoder duration", buf, 2u);
  }
  v110 = v24 - 1;
  v107 = v24;
  log = v23;
  if (v5[58].__d_.__rep_)
  {
    v25 = 0;
    v26 = 0;
    v114 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 1;
    v111 = v5;
    while (1)
    {
      v113 = v30;
      v118 = v29;
      v119 = v25;
      v5[44].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v31 = (std::chrono::steady_clock::now().__d_.__rep_ - v5[44].__d_.__rep_) / 1000;
      v5[45].__d_.__rep_ = v31;
      rep = (char *)v5[37].__d_.__rep_;
      v32 = v5[38].__d_.__rep_;
      if ((unint64_t)rep >= v32)
      {
        v35 = (char *)v5[36].__d_.__rep_;
        v36 = (rep - v35) >> 3;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 2 > v37)
          v37 = v38 >> 2;
        v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8;
        v40 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v39)
          v40 = v37;
        if (v40)
        {
          v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
          v35 = (char *)v5[36].__d_.__rep_;
          rep = (char *)v5[37].__d_.__rep_;
          v31 = v5[45].__d_.__rep_;
        }
        else
        {
          v41 = 0;
        }
        v42 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)(v40 + 8 * v36);
        *v42 = v31;
        v34 = v42 + 1;
        while (rep != v35)
        {
          v43 = *((_QWORD *)rep - 1);
          rep -= 8;
          *--v42 = v43;
        }
        v5[36].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v42;
        v5[37].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v34;
        v5[38].__d_.__rep_ = v40 + 8 * v41;
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)rep = v31;
        v34 = rep + 8;
      }
      v5[37].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v34;
      v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v45 = v5[2].__d_.__rep_;
      marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v177, (const marrs::qr::inference_engine::LSTMDecoderInputType *)v141);
      std::string::basic_string[abi:ne180100]<0>(&v173, "h_0");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)&v177);
      if (SHIBYTE(v174) < 0)
        operator delete((void *)v173);
      std::string::basic_string[abi:ne180100]<0>(&v173, "c_0");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)v181);
      if (SHIBYTE(v174) < 0)
        operator delete((void *)v173);
      std::string::basic_string[abi:ne180100]<0>(&v173, "embedded_inputs");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)v185);
      if (SHIBYTE(v174) < 0)
        operator delete((void *)v173);
      std::string::basic_string[abi:ne180100]<0>(&v173, "encoder_outputs");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)v183);
      if (SHIBYTE(v174) < 0)
        operator delete((void *)v173);
      marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(v45 + 8));
      memset(v191, 0, 32);
      v190 = 0u;
      v188 = 0u;
      memset(v189, 0, sizeof(v189));
      memset(v187, 0, sizeof(v187));
      std::string::basic_string[abi:ne180100]<0>(&v167, "h");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v173, v45);
      if (SHIBYTE(v169) < 0)
        operator delete(v167);
      v188 = v173;
      *(_OWORD *)&v189[1] = __p;
      v189[0] = v174;
      v189[3] = v176;
      std::string::basic_string[abi:ne180100]<0>(&v167, "c");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v173, v45);
      if (SHIBYTE(v169) < 0)
        operator delete(v167);
      v190 = v173;
      *(_OWORD *)&v191[1] = __p;
      v191[0] = v174;
      v191[3] = v176;
      std::string::basic_string[abi:ne180100]<0>(&v167, "logits");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v173, v45);
      if (SHIBYTE(v169) < 0)
        operator delete(v167);
      v187[0] = v173;
      *(_OWORD *)((char *)&v187[1] + 8) = __p;
      *(_QWORD *)&v187[1] = v174;
      *((_QWORD *)&v187[2] + 1) = v176;
      marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v177);
      v46 = (std::chrono::steady_clock::now().__d_.__rep_ - v44.__d_.__rep_) / 1000;
      v5[47].__d_.__rep_ = v46;
      v48 = (char *)v5[40].__d_.__rep_;
      v47 = v5[41].__d_.__rep_;
      if ((unint64_t)v48 >= v47)
      {
        v50 = (char *)v5[39].__d_.__rep_;
        v51 = (v48 - v50) >> 3;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v53 = v47 - (_QWORD)v50;
        if (v53 >> 2 > v52)
          v52 = v53 >> 2;
        v39 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8;
        v54 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v39)
          v54 = v52;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v54);
          v50 = (char *)v5[39].__d_.__rep_;
          v48 = (char *)v5[40].__d_.__rep_;
          v46 = v5[47].__d_.__rep_;
        }
        else
        {
          v55 = 0;
        }
        v56 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)(v54 + 8 * v51);
        *v56 = v46;
        v49 = v56 + 1;
        while (v48 != v50)
        {
          v57 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *--v56 = v57;
        }
        v5[39].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v56;
        v5[40].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v49;
        v5[41].__d_.__rep_ = v54 + 8 * v55;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v48 = v46;
        v49 = v48 + 8;
      }
      v5[40].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v49;
      v173 = 0uLL;
      v174 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v173, (const void *)v188, *((uint64_t *)&v188 + 1), (uint64_t)(*((_QWORD *)&v188 + 1) - v188) >> 3);
      __p = 0uLL;
      v176 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)v189[1], v189[2], (uint64_t)(v189[2] - v189[1]) >> 2);
      v168 = 0;
      v167 = 0;
      v169 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v167, (const void *)v190, *((uint64_t *)&v190 + 1), (uint64_t)(*((_QWORD *)&v190 + 1) - v190) >> 3);
      v170 = 0;
      v171 = 0;
      v172 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v170, (const void *)v191[1], v191[2], (uint64_t)(v191[2] - v191[1]) >> 2);
      v58 = *((_QWORD *)&v187[1] + 1);
      if (*((_QWORD *)&v187[1] + 1) == *(_QWORD *)&v187[2])
      {
        v60 = *((_QWORD *)&v187[1] + 1);
      }
      else
      {
        v59 = *((_QWORD *)&v187[1] + 1) + 4;
        v60 = *((_QWORD *)&v187[1] + 1);
        if (*((_QWORD *)&v187[1] + 1) + 4 != *(_QWORD *)&v187[2])
        {
          v61 = **((float **)&v187[1] + 1);
          v60 = *((_QWORD *)&v187[1] + 1);
          v62 = (float *)(*((_QWORD *)&v187[1] + 1) + 4);
          do
          {
            v63 = *v62++;
            v64 = v63;
            if (v61 < v63)
            {
              v61 = v64;
              v60 = v59;
            }
            v59 = (uint64_t)v62;
          }
          while (v62 != *(float **)&v187[2]);
        }
      }
      memset(v166, 0, sizeof(v166));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v166, v145, v146, (v146 - (uint64_t)v145) >> 3);
      v161 = 0;
      v160 = 0;
      v162 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v160, v145, v146, (v146 - (uint64_t)v145) >> 3);
      v163 = 0;
      v164 = 0;
      v165 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v163, v148, v149, (v149 - (uint64_t)v148) >> 2);
      v65 = (unint64_t *)v166[0];
      v66 = *(_QWORD *)(v166[0] + 8);
      v67 = operator new(0x10uLL);
      v68 = (v60 - v58) >> 2;
      v156 = v67 + 2;
      *v67 = 1;
      v67[1] = v66;
      v154 = v67;
      v117 = (uint64_t)(v67 + 2);
      v155 = v67 + 2;
      v120 = v67;
      v121 = v163;
      v69 = v65[1];
      v158 = 0;
      v159 = 0;
      v157 = 0;
      if (v69)
      {
        if (v69 >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v69);
        v71 = v70;
        v73 = v72;
        v74 = v69 * v68;
        v75 = &v121[4 * v69 * v68];
        v76 = v69 + v69 * v68;
        v157 = v70;
        v159 = &v70[4 * v73];
        v77 = 4 * v76 - 4 * v69 * v68;
        if (v76 != v74)
          memmove(v70, v75, v77);
        v78 = (uint64_t)&v71[v77];
        v158 = &v71[v77];
      }
      else
      {
        v78 = 0;
        v71 = 0;
      }
      memset(&v177, 0, sizeof(v177));
      v79 = (void *)v173;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v177, (const void *)v173, *((uint64_t *)&v173 + 1), (uint64_t)(*((_QWORD *)&v173 + 1) - v173) >> 3);
      v115 = v65;
      v116 = v79;
      v178 = 0;
      v179 = 0;
      v180 = 0;
      v80 = (void *)__p;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v178, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
      v81 = v68;
      memset(v181, 0, sizeof(v181));
      v82 = v167;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v181, v167, v168, (v168 - (uint64_t)v167) >> 3);
      memset(v182, 0, sizeof(v182));
      v83 = v170;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v182, v170, v171, (v171 - (uint64_t)v170) >> 2);
      memset(v183, 0, sizeof(v183));
      v84 = v160;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v183, v160, v161, (v161 - (uint64_t)v160) >> 3);
      memset(v184, 0, sizeof(v184));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v184, v121, v164, (v164 - (uint64_t)v121) >> 2);
      memset(v185, 0, sizeof(v185));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v185, v120, v117, 2uLL);
      memset(v186, 0, sizeof(v186));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v186, v71, v78, (v78 - (uint64_t)v71) >> 2);
      *(_QWORD *)buf = v81;
      v123 = 0;
      v124 = 0;
      *(_QWORD *)&buf[8] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[8], *((const void **)&v187[1] + 1), *(uint64_t *)&v187[2], (uint64_t)(*(_QWORD *)&v187[2] - *((_QWORD *)&v187[1] + 1)) >> 2);
      marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v125, (const marrs::qr::inference_engine::LSTMDecoderInputType *)&v177);
      marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v177);
      if (v71)
      {
        v158 = v71;
        operator delete(v71);
      }
      operator delete(v120);
      if (v121)
        operator delete(v121);
      v29 = v118;
      if (v84)
        operator delete(v84);
      operator delete(v115);
      if (v83)
        operator delete(v83);
      v5 = v111;
      if (v82)
        operator delete(v82);
      if (v80)
        operator delete(v80);
      v25 = v119;
      if (v116)
        operator delete(v116);
      if (v191[1])
      {
        v191[2] = v191[1];
        operator delete((void *)v191[1]);
      }
      if ((_QWORD)v190)
      {
        *((_QWORD *)&v190 + 1) = v190;
        operator delete((void *)v190);
      }
      if (v189[1])
      {
        v189[2] = v189[1];
        operator delete((void *)v189[1]);
      }
      if ((_QWORD)v188)
      {
        *((_QWORD *)&v188 + 1) = v188;
        operator delete((void *)v188);
      }
      if (*((_QWORD *)&v187[1] + 1))
      {
        *(_QWORD *)&v187[2] = *((_QWORD *)&v187[1] + 1);
        operator delete(*((void **)&v187[1] + 1));
      }
      if (*(_QWORD *)&v187[0])
      {
        *((_QWORD *)&v187[0] + 1) = *(_QWORD *)&v187[0];
        operator delete(*(void **)&v187[0]);
      }
      memset(&v177, 0, sizeof(v177));
      v85 = *(_QWORD *)buf;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v177, *(const void **)&buf[8], v123, (v123 - *(_QWORD *)&buf[8]) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v141, v125, v126, (v126 - (uint64_t)v125) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v142, v127, v128, (v128 - (uint64_t)v127) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v143, v129, v130, (v130 - (uint64_t)v129) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v144, v131, v132, (v132 - (uint64_t)v131) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v145, v133, v134, (v134 - (uint64_t)v133) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v148, v135, v136, (v136 - (uint64_t)v135) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v151, v137, v138, (v138 - (uint64_t)v137) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v152, v139, v140, (v140 - (uint64_t)v139) >> 2);
      if (*(float *)(*a3 + 4 * v85) == (float)SLODWORD(v111[59].__d_.__rep_))
        break;
      if ((unint64_t)v26 >= v114)
      {
        v86 = (v26 - v119) >> 3;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v114 - (_QWORD)v119) >> 2 > v87)
          v87 = (uint64_t)(v114 - (_QWORD)v119) >> 2;
        if (v114 - (unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
          v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v88);
        else
          v89 = 0;
        v90 = (char *)(v88 + 8 * v86);
        *(_QWORD *)v90 = v85;
        v91 = v90 + 8;
        while (v26 != v119)
        {
          v92 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v90 - 1) = v92;
          v90 -= 8;
        }
        v114 = v88 + 8 * v89;
        if (v119)
          operator delete(v119);
        v25 = v90;
        v26 = v91;
      }
      else
      {
        *(_QWORD *)v26 = v85;
        v26 += 8;
      }
      size = v177.__r_.__value_.__l.__size_;
      v93 = (_DWORD *)v177.__r_.__value_.__r.__words[0];
      if (v177.__r_.__value_.__r.__words[0] != v177.__r_.__value_.__l.__size_)
      {
        do
        {
          if ((unint64_t)v28 >= v29)
          {
            v95 = (v28 - v27) >> 2;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v29 - (_QWORD)v27) >> 1 > v96)
              v96 = (uint64_t)(v29 - (_QWORD)v27) >> 1;
            if (v29 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v97 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v97 = v96;
            if (v97)
              v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v97);
            else
              v98 = 0;
            v99 = (char *)(v97 + 4 * v95);
            *(_DWORD *)v99 = *v93;
            v100 = v99 + 4;
            while (v28 != v27)
            {
              v101 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *((_DWORD *)v99 - 1) = v101;
              v99 -= 4;
            }
            v102 = v97 + 4 * v98;
            if (v27)
              operator delete(v27);
            v27 = v99;
            v28 = v100;
            v29 = v102;
          }
          else
          {
            *(_DWORD *)v28 = *v93;
            v28 += 4;
          }
          ++v93;
        }
        while (v93 != (_DWORD *)size);
        v93 = (_DWORD *)v177.__r_.__value_.__r.__words[0];
      }
      if (v93)
        operator delete(v93);
      marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v125);
      if (*(_QWORD *)&buf[8])
      {
        v123 = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
      v30 = v113 + 1;
      if ((unint64_t)(v113 + 1) > v111[58].__d_.__rep_)
        goto LABEL_159;
    }
    if (v177.__r_.__value_.__r.__words[0])
      operator delete(v177.__r_.__value_.__l.__data_);
    marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v125);
    if (*(_QWORD *)&buf[8])
    {
      v123 = *(_QWORD *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
  }
LABEL_159:
  if (v110 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(log))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_END, v107, "RunDecoderDuration", " enableTelemetry=YES ", buf, 2u);
  }
  v5[43].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[42].__d_.__rep_) / 1000;
  v5[48].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(v5[2].__d_.__rep_ + 8));
  v5[49].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[48].__d_.__rep_) / 1000;
  v109[1] = 0;
  v109[2] = 0;
  *v109 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v109, v27, (uint64_t)v28, (v28 - v27) >> 2);
  v109[3] = 0;
  v109[4] = 0;
  v109[5] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v109 + 3, v25, (uint64_t)v26, (v26 - v25) >> 3);
  marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)(v109 + 6), (const marrs::qr::inference_engine::LSTMDecoderInputType *)v141);
  if (v27)
    operator delete(v27);
  if (v25)
    operator delete(v25);
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)v141);
}

void sub_1C287BBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;
  uint64_t v54;

  if (*(char *)(v54 - 233) < 0)
    operator delete(*(void **)(v54 - 256));
  if (a52 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x3C7]) < 0)
  {
    operator delete((void *)STACK[0x3B0]);
    if ((v53 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v53)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v52);
  goto LABEL_10;
}

void sub_1C287BC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void **v13;
  void *v14;
  void *v15;
  void *v17;
  void *v18;

  v17 = *v13;
  if (*v13)
  {
    *(_QWORD *)(a13 + 32) = v17;
    operator delete(v17);
  }
  v18 = *(void **)a13;
  if (*(_QWORD *)a13)
  {
    *(_QWORD *)(a13 + 8) = v18;
    operator delete(v18);
  }
  if (v14)
    operator delete(v14);
  if (v15)
    operator delete(v15);
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_1C287BCD8()
{
  void *v0;
  void *v1;

  if (v0)
    operator delete(v0);
  if (v1)
    operator delete(v1);
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&STACK[0x210]);
  JUMPOUT(0x1C287C5E8);
}

void sub_1C287C5AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::exception_ptr a46)
{
  std::exception_ptr::~exception_ptr(&a46);
  __cxa_end_catch();
  JUMPOUT(0x1C287C5BCLL);
}

_QWORD *std::tuple<unsigned long,std::vector<float>,marrs::qr::inference_engine::LSTMDecoderInputType>::~tuple(_QWORD *a1)
{
  void *v2;

  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)(a1 + 4));
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void marrs::qr::inference_engine::EspressoQueryRewriteModel::logMetrics(marrs::qr::inference_engine::EspressoQueryRewriteModel *this, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  float i;
  double v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  float v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t *v19;
  uint64_t *v20;
  float j;
  double v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  std::string::size_type v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  std::string::size_type v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  std::string::size_type v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  __int128 v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  std::string::size_type v164;
  std::string *v165;
  __int128 v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  std::string *v171;
  std::string::size_type v172;
  std::string *v173;
  __int128 v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  std::string::size_type v180;
  std::string *v181;
  __int128 v182;
  std::string *v183;
  __int128 v184;
  NSObject *v185;
  std::string *v186;
  std::string v187;
  std::string v188;
  std::string v189;
  std::string v190;
  std::string v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  std::string v196;
  std::string v197;
  std::string v198;
  std::string v199;
  std::string v200;
  std::string v201;
  std::string v202;
  std::string v203;
  std::string v204;
  std::string v205;
  std::string v206;
  std::string v207;
  std::string v208;
  std::string v209;
  std::string v210;
  std::string v211;
  std::string v212;
  std::string v213;
  std::string v214;
  std::string v215;
  std::string v216;
  std::string v217;
  std::string v218;
  std::string v219;
  std::string v220;
  std::string v221;
  std::string v222;
  std::string v223;
  std::string v224;
  std::string v225;
  std::string v226;
  std::string v227;
  std::string v228;
  std::string v229;
  std::string v230;
  std::string v231;
  std::string v232;
  std::string v233;
  std::string v234;
  std::string v235;
  std::string v236;
  std::string v237;
  std::string v238;
  std::string v239;
  std::string v240;
  std::string v241;
  std::string v242;
  std::string v243;
  std::string v244;
  std::string v245;
  std::string v246;
  std::string v247;
  std::string v248;
  std::string v249;
  std::string v250;
  std::string v251;
  std::string v252;
  std::string v253;
  std::string v254;
  std::string v255;
  std::string v256;
  std::string v257;
  std::string v258;
  std::string v259;
  std::string v260;
  std::string v261;
  std::string v262;
  std::string v263;
  uint64_t v264;

  v264 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v262, "[ ");
  v4 = (uint64_t *)*((_QWORD *)this + 36);
  v5 = (uint64_t *)*((_QWORD *)this + 37);
  for (i = 0.0; v4 != v5; ++v4)
  {
    v7 = (double)*v4 / 1000.0;
    std::to_string(&v260, v7);
    v8 = std::string::append(&v260, " ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v261.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v261;
    else
      v10 = (std::string *)v261.__r_.__value_.__r.__words[0];
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v261.__r_.__value_.__r.__words[2]);
    else
      size = v261.__r_.__value_.__l.__size_;
    std::string::append(&v262, (const std::string::value_type *)v10, size);
    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v261.__r_.__value_.__l.__data_);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v260.__r_.__value_.__l.__data_);
    i = v7 + i;
  }
  std::string::append(&v262, "]");
  v12 = (float)a2;
  if (a2 >= 1)
  {
    std::to_string(&v263, i / v12);
    v13 = std::string::insert(&v263, 0, " Avg: ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v260, " ms");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v261.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v261;
    else
      v17 = (std::string *)v261.__r_.__value_.__r.__words[0];
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v261.__r_.__value_.__r.__words[2]);
    else
      v18 = v261.__r_.__value_.__l.__size_;
    std::string::append(&v262, (const std::string::value_type *)v17, v18);
    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v261.__r_.__value_.__l.__data_);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v260.__r_.__value_.__l.__data_);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v261, "[ ");
  v19 = (uint64_t *)*((_QWORD *)this + 39);
  v20 = (uint64_t *)*((_QWORD *)this + 40);
  for (j = 0.0; v19 != v20; ++v19)
  {
    v22 = (double)*v19 / 1000.0;
    std::to_string(&v263, v22);
    v23 = std::string::append(&v263, " ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v260;
    else
      v25 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    else
      v26 = v260.__r_.__value_.__l.__size_;
    std::string::append(&v261, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v260.__r_.__value_.__l.__data_);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
    j = v22 + j;
  }
  std::string::append(&v261, "]");
  if (a2 >= 1)
  {
    std::to_string(&v259, j / v12);
    v27 = std::string::insert(&v259, 0, " Avg: ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v263.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v263, " ms");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v260;
    else
      v31 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    else
      v32 = v260.__r_.__value_.__l.__size_;
    std::string::append(&v261, (const std::string::value_type *)v31, v32);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v260.__r_.__value_.__l.__data_);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
  }
  os_log_create("com.apple.siri", "QR");
  std::to_string(&v203, (double)*((uint64_t *)this + 5) / 1000.0);
  v33 = std::string::insert(&v203, 0, "\nQueryRewrite:\n      Initialize Embedder Input: ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v204.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v204, " ms\n");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v205.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v205, "      Embedder Inference\n");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v206.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v206, "          Preprocessing-Reshape: ");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v207.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v202, (double)*((uint64_t *)this + 7) / 1000.0);
  if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v202;
  else
    v41 = (std::string *)v202.__r_.__value_.__r.__words[0];
  if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
  else
    v42 = v202.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v207, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v208.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = std::string::append(&v208, " ms\n");
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v209.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append(&v209, "          Preprocessing-BuildPlan: ");
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v210.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v201, (double)*((uint64_t *)this + 9) / 1000.0);
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v201;
  else
    v49 = (std::string *)v201.__r_.__value_.__r.__words[0];
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
  else
    v50 = v201.__r_.__value_.__l.__size_;
  v51 = std::string::append(&v210, (const std::string::value_type *)v49, v50);
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v211.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  v53 = std::string::append(&v211, " ms\n");
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  v55 = std::string::append(&v212, "          Forward Call: ");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v213.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v200, (double)*((uint64_t *)this + 11) / 1000.0);
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = &v200;
  else
    v57 = (std::string *)v200.__r_.__value_.__r.__words[0];
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
  else
    v58 = v200.__r_.__value_.__l.__size_;
  v59 = std::string::append(&v213, (const std::string::value_type *)v57, v58);
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v214.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  v61 = std::string::append(&v214, " ms\n");
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v215.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  v63 = std::string::append(&v215, "          Postprocessing: ");
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v216.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v199, (double)*((uint64_t *)this + 13) / 1000.0);
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = &v199;
  else
    v65 = (std::string *)v199.__r_.__value_.__r.__words[0];
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
  else
    v66 = v199.__r_.__value_.__l.__size_;
  v67 = std::string::append(&v216, (const std::string::value_type *)v65, v66);
  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v217.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  v69 = std::string::append(&v217, " ms\n");
  v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v218.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  v71 = std::string::append(&v218, "      Encoder Inference\n");
  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  v73 = std::string::append(&v219, "          Preprocessing-Reshape: ");
  v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v198, (double)*((uint64_t *)this + 25) / 1000.0);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = &v198;
  else
    v75 = (std::string *)v198.__r_.__value_.__r.__words[0];
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  else
    v76 = v198.__r_.__value_.__l.__size_;
  v77 = std::string::append(&v220, (const std::string::value_type *)v75, v76);
  v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  v79 = std::string::append(&v221, " ms\n");
  v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  v81 = std::string::append(&v222, "          Preprocessing-BuildPlan: ");
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v197, (double)*((uint64_t *)this + 27) / 1000.0);
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = &v197;
  else
    v83 = (std::string *)v197.__r_.__value_.__r.__words[0];
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v84 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
  else
    v84 = v197.__r_.__value_.__l.__size_;
  v85 = std::string::append(&v223, (const std::string::value_type *)v83, v84);
  v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  v87 = std::string::append(&v224, " ms\n");
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v89 = std::string::append(&v225, "          Forward Call: ");
  v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v226.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v196, (double)*((uint64_t *)this + 29) / 1000.0);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = &v196;
  else
    v91 = (std::string *)v196.__r_.__value_.__r.__words[0];
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v92 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  else
    v92 = v196.__r_.__value_.__l.__size_;
  v93 = std::string::append(&v226, (const std::string::value_type *)v91, v92);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = std::string::append(&v227, " ms\n");
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  v97 = std::string::append(&v228, "          Postprocessing: ");
  v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v195, (double)*((uint64_t *)this + 31) / 1000.0);
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v99 = &v195;
  else
    v99 = (std::string *)v195.__r_.__value_.__r.__words[0];
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
  else
    v100 = v195.__r_.__value_.__l.__size_;
  v101 = std::string::append(&v229, (const std::string::value_type *)v99, v100);
  v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
  v230.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v102;
  v101->__r_.__value_.__l.__size_ = 0;
  v101->__r_.__value_.__r.__words[2] = 0;
  v101->__r_.__value_.__r.__words[0] = 0;
  v103 = std::string::append(&v230, " ms\n");
  v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  v105 = std::string::append(&v231, "      Decoder Preprocessing-Reshape: ");
  v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v106;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v194, (double)*((uint64_t *)this + 33) / 1000.0);
  if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v107 = &v194;
  else
    v107 = (std::string *)v194.__r_.__value_.__r.__words[0];
  if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v108 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
  else
    v108 = v194.__r_.__value_.__l.__size_;
  v109 = std::string::append(&v232, (const std::string::value_type *)v107, v108);
  v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  v111 = std::string::append(&v233, " ms\n");
  v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
  v234.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v112;
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  v113 = std::string::append(&v234, "      Decoder Preprocessing-BuildPlan: ");
  v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v114;
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v193, (double)*((uint64_t *)this + 35) / 1000.0);
  if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v115 = &v193;
  else
    v115 = (std::string *)v193.__r_.__value_.__r.__words[0];
  if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
  else
    v116 = v193.__r_.__value_.__l.__size_;
  v117 = std::string::append(&v235, (const std::string::value_type *)v115, v116);
  v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  v119 = std::string::append(&v236, " ms\n");
  v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  v121 = std::string::append(&v237, "      Embedder Preprocessing-Reshape: ");
  v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v122;
  v121->__r_.__value_.__l.__size_ = 0;
  v121->__r_.__value_.__r.__words[2] = 0;
  v121->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v192, (double)*((uint64_t *)this + 51) / 1000.0);
  if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = &v192;
  else
    v123 = (std::string *)v192.__r_.__value_.__r.__words[0];
  if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v124 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
  else
    v124 = v192.__r_.__value_.__l.__size_;
  v125 = std::string::append(&v238, (const std::string::value_type *)v123, v124);
  v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v126;
  v125->__r_.__value_.__l.__size_ = 0;
  v125->__r_.__value_.__r.__words[2] = 0;
  v125->__r_.__value_.__r.__words[0] = 0;
  v127 = std::string::append(&v239, " ms\n");
  v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v128;
  v127->__r_.__value_.__l.__size_ = 0;
  v127->__r_.__value_.__r.__words[2] = 0;
  v127->__r_.__value_.__r.__words[0] = 0;
  v129 = std::string::append(&v240, "      Embedder Preprocessing-BuildPlan: ");
  v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
  v241.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v130;
  v129->__r_.__value_.__l.__size_ = 0;
  v129->__r_.__value_.__r.__words[2] = 0;
  v129->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v191, (double)*((uint64_t *)this + 53) / 1000.0);
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v131 = &v191;
  else
    v131 = (std::string *)v191.__r_.__value_.__r.__words[0];
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v132 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
  else
    v132 = v191.__r_.__value_.__l.__size_;
  v133 = std::string::append(&v241, (const std::string::value_type *)v131, v132);
  v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
  v242.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v134;
  v133->__r_.__value_.__l.__size_ = 0;
  v133->__r_.__value_.__r.__words[2] = 0;
  v133->__r_.__value_.__r.__words[0] = 0;
  v135 = std::string::append(&v242, " ms\n");
  v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v243.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  v137 = std::string::append(&v243, "      Reshape outputs: ");
  v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  v244.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v190, (double)*((uint64_t *)this + 55) / 1000.0);
  if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v139 = &v190;
  else
    v139 = (std::string *)v190.__r_.__value_.__r.__words[0];
  if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
  else
    v140 = v190.__r_.__value_.__l.__size_;
  v141 = std::string::append(&v244, (const std::string::value_type *)v139, v140);
  v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
  v245.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v142;
  v141->__r_.__value_.__l.__size_ = 0;
  v141->__r_.__value_.__r.__words[2] = 0;
  v141->__r_.__value_.__r.__words[0] = 0;
  v143 = std::string::append(&v245, " ms\n");
  v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  v246.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  v145 = std::string::append(&v246, "      Decoder Inference Multi-Steps: ");
  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v247.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v189, (double)*((uint64_t *)this + 43) / 1000.0);
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v147 = &v189;
  else
    v147 = (std::string *)v189.__r_.__value_.__r.__words[0];
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
  else
    v148 = v189.__r_.__value_.__l.__size_;
  v149 = std::string::append(&v247, (const std::string::value_type *)v147, v148);
  v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v150;
  v149->__r_.__value_.__l.__size_ = 0;
  v149->__r_.__value_.__r.__words[2] = 0;
  v149->__r_.__value_.__r.__words[0] = 0;
  v151 = std::string::append(&v248, " ms\n");
  v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  v153 = std::string::append(&v249, "          Embedder Forward Calls: ");
  v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  v250.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0;
  v153->__r_.__value_.__r.__words[2] = 0;
  v153->__r_.__value_.__r.__words[0] = 0;
  if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v155 = &v262;
  else
    v155 = (std::string *)v262.__r_.__value_.__r.__words[0];
  if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v156 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
  else
    v156 = v262.__r_.__value_.__l.__size_;
  v157 = std::string::append(&v250, (const std::string::value_type *)v155, v156);
  v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  v251.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v158;
  v157->__r_.__value_.__l.__size_ = 0;
  v157->__r_.__value_.__r.__words[2] = 0;
  v157->__r_.__value_.__r.__words[0] = 0;
  v159 = std::string::append(&v251, "\n");
  v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v160;
  v159->__r_.__value_.__l.__size_ = 0;
  v159->__r_.__value_.__r.__words[2] = 0;
  v159->__r_.__value_.__r.__words[0] = 0;
  v161 = std::string::append(&v252, "          Decoder Forward Calls: ");
  v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v163 = &v261;
  else
    v163 = (std::string *)v261.__r_.__value_.__r.__words[0];
  if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v164 = HIBYTE(v261.__r_.__value_.__r.__words[2]);
  else
    v164 = v261.__r_.__value_.__l.__size_;
  v165 = std::string::append(&v253, (const std::string::value_type *)v163, v164);
  v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  v254.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  v167 = std::string::append(&v254, "\n");
  v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
  v255.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v168;
  v167->__r_.__value_.__l.__size_ = 0;
  v167->__r_.__value_.__r.__words[2] = 0;
  v167->__r_.__value_.__r.__words[0] = 0;
  v169 = std::string::append(&v255, "      Number of decoder steps: ");
  v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v170;
  v169->__r_.__value_.__l.__size_ = 0;
  v169->__r_.__value_.__r.__words[2] = 0;
  v169->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v188, a2);
  if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v171 = &v188;
  else
    v171 = (std::string *)v188.__r_.__value_.__r.__words[0];
  if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v172 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
  else
    v172 = v188.__r_.__value_.__l.__size_;
  v173 = std::string::append(&v256, (const std::string::value_type *)v171, v172);
  v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v174;
  v173->__r_.__value_.__l.__size_ = 0;
  v173->__r_.__value_.__r.__words[2] = 0;
  v173->__r_.__value_.__r.__words[0] = 0;
  v175 = std::string::append(&v257, "\n");
  v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v176;
  v175->__r_.__value_.__l.__size_ = 0;
  v175->__r_.__value_.__r.__words[2] = 0;
  v175->__r_.__value_.__r.__words[0] = 0;
  v177 = std::string::append(&v258, "      Decoder Postprocessing: ");
  v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v259.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v187, (double)*((uint64_t *)this + 49) / 1000.0);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v179 = &v187;
  else
    v179 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v180 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v180 = v187.__r_.__value_.__l.__size_;
  v181 = std::string::append(&v259, (const std::string::value_type *)v179, v180);
  v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v182;
  v181->__r_.__value_.__l.__size_ = 0;
  v181->__r_.__value_.__r.__words[2] = 0;
  v181->__r_.__value_.__r.__words[0] = 0;
  v183 = std::string::append(&v263, " ms\n");
  v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v184;
  v183->__r_.__value_.__l.__size_ = 0;
  v183->__r_.__value_.__r.__words[2] = 0;
  v183->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v251.__r_.__value_.__l.__data_);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v189.__r_.__value_.__l.__data_);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v198.__r_.__value_.__l.__data_);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v204.__r_.__value_.__l.__data_);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v203.__r_.__value_.__l.__data_);
  v185 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
  {
    v186 = &v260;
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v186 = (std::string *)v260.__r_.__value_.__r.__words[0];
    LODWORD(v263.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 4) = (std::string::size_type)"logMetrics";
    WORD2(v263.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v263.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v186;
    _os_log_debug_impl(&dword_1C281A000, v185, OS_LOG_TYPE_DEBUG, "%s %s", (uint8_t *)&v263, 0x16u);
  }
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v261.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
}

void sub_1C287DB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 233) < 0)
    operator delete(*(void **)(v1 - 256));
  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  _Unwind_Resume(a1);
}

void marrs::qr::inference_engine::EspressoQueryRewriteModel::forward(marrs::qr::inference_engine::EspressoQueryRewriteModel *this, std::chrono::steady_clock::time_point *a2, uint64_t a3, int a4, int a5)
{
  NSObject *v9;
  uint64_t v10;
  const void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t rep;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t *v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  void *v65;
  uint64_t v66;
  const void *v67;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v68;
  char *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v78;
  uint64_t v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64x2_t *v87;
  __int128 v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  marrs::inference_engine::EspressoModule **v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  _QWORD *v100;
  _DWORD *v101;
  _QWORD *v102;
  _DWORD *v103;
  int v104;
  int v105;
  void *v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  _QWORD *v112;
  const void *v113;
  void *v114;
  unint64_t v115;
  void *v116;
  _QWORD *v117;
  _QWORD *v118;
  std::string *v119;
  __int128 v120;
  _QWORD *exception;
  NSObject *v122;
  _QWORD *v123;
  NSObject *v124;
  _QWORD *v125;
  uint8_t *v126;
  marrs::qr::inference_engine::EspressoQueryRewriteModel *v127;
  int v128;
  os_signpost_id_t spid;
  NSObject *v130;
  unint64_t v131;
  const marrs::qr::inference_engine::EspressoQueryRewriteModelInputType *v132;
  uint64_t v134;
  uint64_t v135;
  void *__p[2];
  _QWORD v137[4];
  void *v138[2];
  void *v139[4];
  void *v140[2];
  void *v141[4];
  void *v142[2];
  void *v143[2];
  __int128 v144;
  void *v145[2];
  void *v146[2];
  __int128 v147;
  char *v148;
  char *v149;
  char *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  void *v154[2];
  unint64_t v155;
  void *v156[2];
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  void *v160[2];
  void *v161[4];
  void *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  void *v168[2];
  void *v169;
  __int128 __src;
  void *v171;
  int64x2_t v172;
  unint64_t v173;
  void *v174[2];
  void *v175[4];
  void *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182[2];
  char v183;
  void *v184[2];
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint8_t buf[32];
  __int128 v192;
  _OWORD v193[14];
  void *v194[2];
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1)
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_4);
  v9 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  v163 = 0;
  v162 = 0;
  v164 = 0;
  spid = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  v131 = spid - 1;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v9, OS_SIGNPOST_INTERVAL_BEGIN, spid, "RunTokenEmbedding", "CCQRAer Run token embedding", buf, 2u);
  }
  a2[4].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v11 = *(const void **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  v12 = operator new(0x10uLL);
  *v12 = 1;
  v12[1] = (v10 - (uint64_t)v11) >> 2;
  v168[1] = 0;
  v168[0] = 0;
  v169 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v168, v12, (uint64_t)(v12 + 2), 2uLL);
  __src = 0uLL;
  v171 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__src, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v130 = v9;
  v127 = this;
  v184[1] = 0;
  v184[0] = 0;
  v185 = 0;
  v13 = v168[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
  v128 = a4;
  v187 = 0;
  v186 = 0;
  v188 = 0;
  v14 = (void *)__src;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 2);
  a2[5].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[4].__d_.__rep_) / 1000;
  a2[6].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v176 = "inputs";
  LODWORD(v174[0]) = v12[1];
  LODWORD(v156[0]) = -1;
  LODWORD(v182[0]) = -1;
  LODWORD(v154[0]) = -1;
  v172.i32[0] = -1;
  LODWORD(v190) = 2;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Failed to change input blob shapes in EmbeddingModule reshape");
    std::string::basic_string[abi:ne180100]<0>(__p, "QueryRewrite");
    InferenceError::InferenceError(exception, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_embedding_module.cpp", 68);
  }
  a2[7].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[6].__d_.__rep_) / 1000;
  a2[8].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2->__d_.__rep_ + 8));
  a2[9].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[8].__d_.__rep_) / 1000;
  a2[10].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = a2->__d_.__rep_;
  memset(buf, 0, 24);
  v16 = v184[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v184[0], (uint64_t)v184[1], ((char *)v184[1] - (char *)v184[0]) >> 3);
  v126 = (uint8_t *)&a2[4];
  v192 = 0uLL;
  *(_QWORD *)&buf[24] = 0;
  v17 = v186;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v186, v187, (v187 - (uint64_t)v186) >> 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "inputs");
  marrs::inference_engine::EspressoModule::setInput(rep, (uint64_t)__p, (uint64_t)buf);
  if (SHIBYTE(v137[0]) < 0)
    operator delete(__p[0]);
  marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(rep + 8));
  memset(v161, 0, sizeof(v161));
  *(_OWORD *)v160 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v176, "embedded_input");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)__p, rep);
  if (SHIBYTE(v178) < 0)
    operator delete(v176);
  *(_OWORD *)v160 = *(_OWORD *)__p;
  *(_OWORD *)&v161[1] = *(_OWORD *)&v137[1];
  v161[0] = (void *)v137[0];
  v161[3] = (void *)v137[3];
  if (*(_QWORD *)&buf[24])
    operator delete(*(void **)&buf[24]);
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
  a2[11].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[10].__d_.__rep_) / 1000;
  a2[12].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2->__d_.__rep_ + 8));
  a2[13].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[12].__d_.__rep_) / 1000;
  if (v17)
    operator delete(v17);
  if (v16)
    operator delete(v16);
  if (v14)
    operator delete(v14);
  if (v13)
    operator delete(v13);
  operator delete(v12);
  v156[0] = 0;
  v156[1] = 0;
  v157 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v156, v160[0], (uint64_t)v160[1], ((char *)v160[1] - (char *)v160[0]) >> 3);
  v18 = v130;
  v158 = 0uLL;
  v159 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v158, v161[1], (uint64_t)v161[2], ((char *)v161[2] - (char *)v161[1]) >> 2);
  if (v131 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (os_signpost_enabled(v130))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v130, OS_SIGNPOST_INTERVAL_END, spid, "RunTokenEmbedding", " enableTelemetry=YES ", buf, 2u);
    }
    if (os_signpost_enabled(v130))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v130, OS_SIGNPOST_INTERVAL_BEGIN, spid, "RunANEEmbedding", "CCQRAer Run token embedding", buf, 2u);
    }
  }
  v154[0] = 0;
  v154[1] = 0;
  v155 = 0;
  if (a5 && a2[3].__d_.__rep_)
  {
    a2[14].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v173 = 0;
    v172 = 0uLL;
    v19 = *(_QWORD *)(a3 + 24);
    v132 = (const marrs::qr::inference_engine::EspressoQueryRewriteModelInputType *)a2;
    if (*(_QWORD *)(a3 + 32) != v19)
    {
      v20 = 0;
      do
      {
        v21 = (uint64_t **)(v19 + 24 * v20);
        v22 = v21[1];
        v134 = v20;
        v23 = *v21;
        v24 = 0;
        if (v22 == *v21)
        {
          v26 = 0;
          v40 = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = &v23[3 * v28];
            v30 = *v29;
            if (v29[1] != *v29)
            {
              v31 = 0;
              do
              {
                if ((unint64_t)v27 >= v25)
                {
                  v32 = (v27 - v26) >> 2;
                  v33 = v32 + 1;
                  if ((unint64_t)(v32 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v25 - (_QWORD)v26) >> 1 > v33)
                    v33 = (uint64_t)(v25 - (_QWORD)v26) >> 1;
                  if (v25 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
                    v34 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v34 = v33;
                  if (v34)
                  {
                    v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34);
                    v27 = (char *)v24;
                  }
                  else
                  {
                    v35 = 0;
                  }
                  v36 = (char *)(v34 + 4 * v32);
                  *(_DWORD *)v36 = *(_DWORD *)(v30 + 4 * v31);
                  v24 = (uint64_t)(v36 + 4);
                  while (v27 != v26)
                  {
                    v37 = *((_DWORD *)v27 - 1);
                    v27 -= 4;
                    *((_DWORD *)v36 - 1) = v37;
                    v36 -= 4;
                  }
                  v25 = v34 + 4 * v35;
                  if (v26)
                    operator delete(v26);
                  v26 = v36;
                }
                else
                {
                  *(_DWORD *)v27 = *(_DWORD *)(v30 + 4 * v31);
                  v24 = (uint64_t)(v27 + 4);
                }
                ++v31;
                v23 = *v21;
                v38 = &(*v21)[3 * v28];
                v30 = *v38;
                v39 = v31 >= (v38[1] - *v38) >> 2;
                v27 = (char *)v24;
              }
              while (!v39);
              v22 = v21[1];
              v27 = (char *)v24;
            }
            ++v28;
            v40 = 0xAAAAAAAAAAAAAAABLL * (v22 - v23);
          }
          while (v28 < v40);
          v22 = v23;
          a2 = (std::chrono::steady_clock::time_point *)v132;
        }
        v42 = *v22;
        v41 = v22[1];
        v43 = operator new(0x18uLL);
        *v43 = 1;
        v43[1] = v40;
        v43[2] = (v41 - v42) >> 2;
        v169 = 0;
        v168[0] = 0;
        v168[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v168, v43, (uint64_t)(v43 + 3), 3uLL);
        __src = 0uLL;
        v171 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__src, v26, v24, (v24 - (uint64_t)v26) >> 2);
        operator delete(v43);
        if (v26)
          operator delete(v26);
        v184[1] = 0;
        v184[0] = 0;
        v185 = 0;
        v44 = v168[0];
        v45 = (char *)v168[1] - (char *)v168[0];
        v46 = ((char *)v168[1] - (char *)v168[0]) >> 3;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v168[0], (uint64_t)v168[1], v46);
        v186 = 0;
        v187 = 0;
        v188 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 2);
        v177 = 0;
        v176 = 0;
        v178 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v176, v184[0], (uint64_t)v184[1], ((char *)v184[1] - (char *)v184[0]) >> 3);
        v179 = 0;
        v180 = 0;
        v181 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v179, v186, v187, (v187 - (uint64_t)v186) >> 2);
        a2[15].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[14].__d_.__rep_) / 1000;
        a2[16].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (v45 != 24)
        {
          v118 = __cxa_allocate_exception(0x30uLL);
          std::to_string((std::string *)__p, v46);
          v119 = std::string::insert((std::string *)__p, 0, "ANE Embedding Module shape rank mismatch, should be 3, found");
          v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v119->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(v174, "QueryRewrite");
          InferenceError::InferenceError(v118, (uint64_t)buf, (uint64_t)v174, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_ane_module.cpp", 41);
        }
        v174[0] = "ane_in";
        v47 = v44[1];
        LODWORD(v182[0]) = v44[2];
        LODWORD(v190) = v47;
        LODWORD(v189) = *v44;
        v167 = 1;
        v166 = 1;
        v165 = 3;
        if (espresso_network_change_input_blob_shapes_seq_rank())
        {
          v117 = __cxa_allocate_exception(0x30uLL);
          std::string::basic_string[abi:ne180100]<0>(buf, "Failed to do reshape in ANE Embedding Module.");
          std::string::basic_string[abi:ne180100]<0>(__p, "QueryRewrite");
          InferenceError::InferenceError(v117, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_ane_module.cpp", 60);
        }
        a2[17].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[16].__d_.__rep_) / 1000;
        a2[18].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2[3].__d_.__rep_ + 8));
        a2[19].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[18].__d_.__rep_) / 1000;
        a2[20].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v48 = a2[3].__d_.__rep_;
        memset(buf, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v176, v177, (v177 - (uint64_t)v176) >> 3);
        *(_QWORD *)&buf[24] = 0;
        v192 = 0uLL;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v179, v180, (v180 - (uint64_t)v179) >> 2);
        std::string::basic_string[abi:ne180100]<0>(__p, "ane_in");
        marrs::inference_engine::EspressoModule::setInput(v48, (uint64_t)__p, (uint64_t)buf);
        if (SHIBYTE(v137[0]) < 0)
          operator delete(__p[0]);
        marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(v48 + 8));
        memset(v175, 0, sizeof(v175));
        *(_OWORD *)v174 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v182, "ane_out");
        marrs::inference_engine::EspressoModule::getOutput((uint64_t)__p, v48);
        if (v183 < 0)
          operator delete(v182[0]);
        *(_OWORD *)v174 = *(_OWORD *)__p;
        *(_OWORD *)&v175[1] = *(_OWORD *)&v137[1];
        v175[0] = (void *)v137[0];
        v175[3] = (void *)v137[3];
        if (*(_QWORD *)&buf[24])
          operator delete(*(void **)&buf[24]);
        if (*(_QWORD *)buf)
          operator delete(*(void **)buf);
        a2[21].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[20].__d_.__rep_) / 1000;
        a2[22].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2[3].__d_.__rep_ + 8));
        a2[23].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[22].__d_.__rep_) / 1000;
        v49 = v172.i64[1];
        if (v172.i64[1] >= v173)
        {
          v51 = 0xAAAAAAAAAAAAAAABLL * ((v172.i64[1] - v172.i64[0]) >> 4);
          v52 = v51 + 1;
          if (v51 + 1 > 0x555555555555555)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v173 - v172.i64[0]) >> 4) > v52)
            v52 = 0x5555555555555556 * ((uint64_t)(v173 - v172.i64[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v173 - v172.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v53 = 0x555555555555555;
          else
            v53 = v52;
          *(_QWORD *)&v192 = &v173;
          if (v53)
            v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(v53);
          else
            v54 = 0;
          *(_QWORD *)buf = v53;
          *(_QWORD *)&buf[8] = v53 + 48 * v51;
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          *(_QWORD *)&buf[24] = v53 + 48 * v54;
          std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::construct[abi:ne180100]<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType,marrs::qr::inference_engine::ANEEmbeddingModuleOutputType const&>(*(_QWORD **)&buf[8], (uint64_t)v174);
          v55 = *(_QWORD *)&buf[8];
          v50 = *(_QWORD *)&buf[16] + 48;
          *(_QWORD *)&buf[16] += 48;
          v56 = v172.i64[1];
          v57 = v172.i64[0];
          if (v172.i64[1] == v172.i64[0])
          {
            v61 = vdupq_n_s64(v172.u64[1]);
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = v55 + v58;
              v60 = v56 + v58;
              *(_QWORD *)(v59 - 48) = 0;
              *(_QWORD *)(v59 - 40) = 0;
              *(_QWORD *)(v59 - 32) = 0;
              *(_OWORD *)(v59 - 48) = *(_OWORD *)(v56 + v58 - 48);
              *(_QWORD *)(v59 - 32) = *(_QWORD *)(v56 + v58 - 32);
              *(_QWORD *)(v60 - 48) = 0;
              *(_QWORD *)(v60 - 40) = 0;
              *(_QWORD *)(v60 - 32) = 0;
              *(_QWORD *)(v59 - 24) = 0;
              *(_QWORD *)(v59 - 16) = 0;
              *(_QWORD *)(v59 - 8) = 0;
              *(_OWORD *)(v59 - 24) = *(_OWORD *)(v56 + v58 - 24);
              *(_QWORD *)(v59 - 8) = *(_QWORD *)(v56 + v58 - 8);
              *(_QWORD *)(v60 - 24) = 0;
              *(_QWORD *)(v60 - 16) = 0;
              *(_QWORD *)(v60 - 8) = 0;
              v58 -= 48;
            }
            while (v56 + v58 != v57);
            v55 += v58;
            v61 = v172;
            v50 = *(_QWORD *)&buf[16];
          }
          v172.i64[0] = v55;
          v172.i64[1] = v50;
          *(int64x2_t *)&buf[8] = v61;
          v62 = v173;
          v173 = *(_QWORD *)&buf[24];
          *(_QWORD *)&buf[24] = v62;
          *(_QWORD *)buf = v61.i64[0];
          std::__split_buffer<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::construct[abi:ne180100]<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType,marrs::qr::inference_engine::ANEEmbeddingModuleOutputType const&>((_QWORD *)v172.i64[1], (uint64_t)v174);
          v50 = v49 + 48;
        }
        v172.i64[1] = v50;
        if (v175[1])
        {
          v175[2] = v175[1];
          operator delete(v175[1]);
        }
        if (v174[0])
        {
          v174[1] = v174[0];
          operator delete(v174[0]);
        }
        if (v179)
          operator delete(v179);
        if (v176)
          operator delete(v176);
        if (v186)
          operator delete(v186);
        if (v184[0])
          operator delete(v184[0]);
        if ((_QWORD)__src)
          operator delete((void *)__src);
        if (v168[0])
          operator delete(v168[0]);
        v20 = v134 + 1;
        v19 = *(_QWORD *)(a3 + 24);
      }
      while (v134 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 32) - v19) >> 3));
    }
    v63 = (char *)v154[0];
    if (v154[0])
    {
      v64 = (char *)v154[1];
      v65 = v154[0];
      if (v154[1] != v154[0])
      {
        do
        {
          v64 -= 48;
          std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100]((uint64_t)v64);
        }
        while (v64 != v63);
        v65 = v154[0];
      }
      v154[1] = v63;
      operator delete(v65);
    }
    *(int64x2_t *)v154 = v172;
    v155 = v173;
    v173 = 0;
    v172 = 0uLL;
    *(_QWORD *)buf = &v172;
    std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v67 = *(const void **)a3;
    v66 = *(_QWORD *)(a3 + 8);
    v152 = 0;
    v153 = 0;
    v151 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v151, v161[1], (uint64_t)v161[2], ((char *)v161[2] - (char *)v161[1]) >> 2);
    v68 = a2[56].__d_.__rep_;
    v149 = 0;
    v150 = 0;
    v148 = 0;
    v69 = (char *)v154[0];
    v70 = (char *)v154[1];
    __p[0] = &v148;
    LOBYTE(__p[1]) = 0;
    if (v154[1] != v154[0])
    {
      v71 = 0xAAAAAAAAAAAAAAABLL * (((char *)v154[1] - (char *)v154[0]) >> 4);
      if (v71 > 0x555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(v71);
      v73 = 0;
      v148 = v72;
      v149 = v72;
      v150 = &v72[48 * v74];
      do
      {
        v75 = &v72[v73];
        v76 = &v69[v73];
        *(_QWORD *)v75 = 0;
        *((_QWORD *)v75 + 1) = 0;
        *((_QWORD *)v75 + 2) = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v72[v73], *(const void **)&v69[v73], *(_QWORD *)&v69[v73 + 8], (uint64_t)(*(_QWORD *)&v69[v73 + 8] - *(_QWORD *)&v69[v73]) >> 3);
        *((_QWORD *)v75 + 3) = 0;
        *((_QWORD *)v75 + 4) = 0;
        *((_QWORD *)v75 + 5) = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v72[v73 + 24], *((const void **)v76 + 3), *((_QWORD *)v76 + 4), (uint64_t)(*((_QWORD *)v76 + 4) - *((_QWORD *)v76 + 3)) >> 2);
        v73 += 48;
      }
      while (v76 + 48 != v70);
      v149 = &v72[v73];
    }
    v77 = (v66 - (uint64_t)v67) >> 2;
    v78 = a2[57].__d_.__rep_;
    v79 = v78 + v68;
    LODWORD(v174[0]) = 0;
    std::vector<float>::vector(__p, (v78 + v68) * v77, v174);
    v80 = (char *)__p[0];
    v81 = __p[1];
    if (__p[1] == __p[0])
    {
      v80 = (char *)__p[1];
    }
    else
    {
      v135 = v77;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 4 * v68;
      v86 = 24;
      do
      {
        if (v68)
        {
          memmove(&v80[v82], (char *)v151 + v83, 4 * v68);
          v80 = (char *)__p[0];
        }
        if (v78)
        {
          memmove(&v80[v85 + v82], *(const void **)&v148[v86], 4 * v78);
          v80 = (char *)__p[0];
        }
        v84 += v68 + v78;
        v81 = __p[1];
        v83 += v85;
        v86 += 48;
        v82 += 4 * (v68 + v78);
      }
      while (v84 < ((char *)__p[1] - (char *)v80) >> 2);
      a2 = (std::chrono::steady_clock::time_point *)v132;
      v77 = v135;
      v79 = v78 + v68;
    }
    v87 = (int64x2_t *)operator new(0x20uLL);
    *v87 = vdupq_n_s64(1uLL);
    v87[1].i64[0] = v77;
    v87[1].i64[1] = v79;
    *(_QWORD *)&v88 = v87;
    *((_QWORD *)&v88 + 1) = v87 + 2;
    *(_OWORD *)buf = v88;
    *(_QWORD *)&buf[16] = v87 + 2;
    *(_QWORD *)&buf[24] = 0;
    v192 = 0uLL;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v80, (uint64_t)v81, (v81 - v80) >> 2);
    v18 = v130;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &v148;
    std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v151)
    {
      v152 = v151;
      operator delete(v151);
    }
    __p[0] = 0;
    __p[1] = 0;
    v137[0] = 0;
    v89 = *(void **)buf;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
    memset(&v137[1], 0, 24);
    v90 = *(void **)&buf[24];
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v137[1], *(const void **)&buf[24], v192, (uint64_t)(v192 - *(_QWORD *)&buf[24]) >> 2);
    if (v156[0])
      operator delete(v156[0]);
    *(_OWORD *)v156 = *(_OWORD *)__p;
    v157 = v137[0];
    __p[1] = 0;
    v137[0] = 0;
    __p[0] = 0;
    if ((_QWORD)v158)
      operator delete((void *)v158);
    v158 = *(_OWORD *)&v137[1];
    v159 = v137[3];
    if (v90)
      operator delete(v90);
    if (v89)
      operator delete(v89);
  }
  if (v131 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v18, OS_SIGNPOST_INTERVAL_END, spid, "RunANEEmbedding", " enableTelemetry=YES ", buf, 2u);
    }
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v18, OS_SIGNPOST_INTERVAL_BEGIN, spid, "RunEncoderDuration", "CCQRAer Run token embedding", buf, 2u);
    }
  }
  a2[24].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v92 = v156[0];
  v91 = v156[1];
  if ((void *)((char *)v156[1] - (char *)v156[0]) != (void *)32)
  {
    v122 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "reshape";
      _os_log_error_impl(&dword_1C281A000, v122, OS_LOG_TYPE_ERROR, "%s [ERR]: encodingsShape size is not 4", buf, 0xCu);
    }
    v123 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "encodingsShape size is not 4");
    std::string::basic_string[abi:ne180100]<0>(v168, "QueryRewrite");
    InferenceError::InferenceError(v123, (uint64_t)buf, (uint64_t)v168, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_encoder_module.cpp", 67);
  }
  *(_OWORD *)v184 = xmmword_1E7C66F30;
  LODWORD(v176) = *((_DWORD *)v156[0] + 6);
  HIDWORD(v176) = (_DWORD)v176;
  LODWORD(v174[0]) = *((_DWORD *)v156[0] + 4);
  HIDWORD(v174[0]) = 1;
  LODWORD(v182[0]) = 1;
  HIDWORD(v182[0]) = v174[0];
  v172.i64[0] = 0x100000001;
  v190 = -1;
  v189 = 0x300000002;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    v124 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "reshape";
      _os_log_error_impl(&dword_1C281A000, v124, OS_LOG_TYPE_ERROR, "%s [ERR]: Failed to change input blob shapes in LSTMEncoderModule reshape", buf, 0xCu);
    }
    v125 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Failed to change input blob shapes in LSTMEncoderModule reshape");
    std::string::basic_string[abi:ne180100]<0>(v168, "QueryRewrite");
    InferenceError::InferenceError(v125, (uint64_t)buf, (uint64_t)v168, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_encoder_module.cpp", 83);
  }
  a2[25].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[24].__d_.__rep_) / 1000;
  a2[26].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2[1].__d_.__rep_ + 8));
  v184[1] = 0;
  v184[0] = 0;
  v185 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v92, (uint64_t)v91, 4uLL);
  v187 = 0;
  v186 = 0;
  v188 = 0;
  v93 = (void *)v158;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)v158, *((uint64_t *)&v158 + 1), (uint64_t)(*((_QWORD *)&v158 + 1) - v158) >> 2);
  a2[27].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[26].__d_.__rep_) / 1000;
  a2[28].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v94 = (marrs::inference_engine::EspressoModule **)a2[1].__d_.__rep_;
  memset(buf, 0, 24);
  v95 = v184[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v184[0], (uint64_t)v184[1], ((char *)v184[1] - (char *)v184[0]) >> 3);
  v192 = 0uLL;
  *(_QWORD *)&buf[24] = 0;
  v96 = v186;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v186, v187, (v187 - (uint64_t)v186) >> 2);
  marrs::qr::inference_engine::LSTMEncoderModule::setUtteranceTokensEmbeddings((marrs::qr::inference_engine::LSTMEncoderModule *)v94, (marrs::inference_engine::InferenceTensor *)buf);
  marrs::inference_engine::EspressoModule::executePlan(v94[1]);
  *(_OWORD *)v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  *(_OWORD *)v145 = 0u;
  *(_OWORD *)v142 = 0u;
  *(_OWORD *)v143 = 0u;
  memset(v141, 0, sizeof(v141));
  *(_OWORD *)v140 = 0u;
  *(_OWORD *)v138 = 0u;
  memset(v139, 0, sizeof(v139));
  memset(v137, 0, sizeof(v137));
  *(_OWORD *)__p = 0u;
  marrs::qr::inference_engine::LSTMEncoderModule::setUtteranceTokensEmbeddings((marrs::qr::inference_engine::LSTMEncoderModule *)v94, (marrs::inference_engine::InferenceTensor *)buf);
  std::string::basic_string[abi:ne180100]<0>(&v176, "h_n");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
  if (SHIBYTE(v178) < 0)
    operator delete(v176);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = *(_OWORD *)v168;
  v137[0] = v169;
  v169 = 0;
  v168[1] = 0;
  v168[0] = 0;
  v97 = (void *)v137[1];
  if (v137[1])
  {
    v137[2] = v137[1];
    operator delete((void *)v137[1]);
    v97 = v168[0];
  }
  *(_OWORD *)&v137[1] = __src;
  v137[3] = v171;
  v171 = 0;
  __src = 0uLL;
  if (v97)
  {
    v168[1] = v97;
    operator delete(v97);
  }
  std::string::basic_string[abi:ne180100]<0>(&v176, "encoded_outputs");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
  if (SHIBYTE(v178) < 0)
    operator delete(v176);
  if (v140[0])
  {
    v140[1] = v140[0];
    operator delete(v140[0]);
  }
  *(_OWORD *)v140 = *(_OWORD *)v168;
  v141[0] = v169;
  v169 = 0;
  v168[1] = 0;
  v168[0] = 0;
  v98 = v141[1];
  if (v141[1])
  {
    v141[2] = v141[1];
    operator delete(v141[1]);
    v98 = v168[0];
  }
  *(_OWORD *)&v141[1] = __src;
  v141[3] = v171;
  v171 = 0;
  __src = 0uLL;
  if (v98)
  {
    v168[1] = v98;
    operator delete(v98);
  }
  std::string::basic_string[abi:ne180100]<0>(&v176, "c_n");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
  if (SHIBYTE(v178) < 0)
    operator delete(v176);
  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }
  *(_OWORD *)v138 = *(_OWORD *)v168;
  v139[0] = v169;
  v169 = 0;
  v168[1] = 0;
  v168[0] = 0;
  v99 = v139[1];
  if (v139[1])
  {
    v139[2] = v139[1];
    operator delete(v139[1]);
    v99 = v168[0];
  }
  *(_OWORD *)&v139[1] = __src;
  v139[3] = v171;
  v171 = 0;
  __src = 0uLL;
  if (v99)
  {
    v168[1] = v99;
    operator delete(v99);
  }
  if (v128)
  {
    std::string::basic_string[abi:ne180100]<0>(&v176, "gate_prob");
    marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
    if (SHIBYTE(v178) < 0)
      operator delete(v176);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v142, (char *)v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v143[1], (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 2);
    if ((_QWORD)__src)
    {
      *((_QWORD *)&__src + 1) = __src;
      operator delete((void *)__src);
    }
    if (v168[0])
    {
      v168[1] = v168[0];
      operator delete(v168[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v176, "gate_prediction");
    marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
    if (SHIBYTE(v178) < 0)
      operator delete(v176);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v145, (char *)v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v146[1], (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 2);
    if ((_QWORD)__src)
    {
      *((_QWORD *)&__src + 1) = __src;
      operator delete((void *)__src);
    }
    if (v168[0])
    {
      v168[1] = v168[0];
      operator delete(v168[0]);
    }
  }
  else
  {
    v100 = operator new(8uLL);
    *v100 = 1;
    v101 = operator new(4uLL);
    *v101 = 1065353216;
    if (v142[0])
    {
      v142[1] = v142[0];
      operator delete(v142[0]);
    }
    v142[0] = v100;
    v142[1] = v100 + 1;
    v143[0] = v100 + 1;
    if (v143[1])
    {
      *(void **)&v144 = v143[1];
      operator delete(v143[1]);
    }
    v143[1] = v101;
    *(_QWORD *)&v144 = v101 + 1;
    *((_QWORD *)&v144 + 1) = v101 + 1;
    v102 = operator new(8uLL);
    *v102 = 1;
    v103 = operator new(4uLL);
    *v103 = 1065353216;
    if (v145[0])
    {
      v145[1] = v145[0];
      operator delete(v145[0]);
    }
    v145[0] = v102;
    v145[1] = v102 + 1;
    v146[0] = v102 + 1;
    if (v146[1])
    {
      *(void **)&v147 = v146[1];
      operator delete(v146[1]);
    }
    v146[1] = v103;
    *(_QWORD *)&v147 = v103 + 1;
    *((_QWORD *)&v147 + 1) = v103 + 1;
  }
  if (*(_QWORD *)&buf[24])
    operator delete(*(void **)&buf[24]);
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
  a2[29].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[28].__d_.__rep_) / 1000;
  a2[30].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2[1].__d_.__rep_ + 8));
  a2[31].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[30].__d_.__rep_) / 1000;
  if (v96)
    operator delete(v96);
  if (v95)
    operator delete(v95);
  v104 = (int)*(float *)v146[1];
  v105 = *(_DWORD *)v143[1];
  if (v131 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v130))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C281A000, v130, OS_SIGNPOST_INTERVAL_END, spid, "RunEncoderDuration", " enableTelemetry=YES ", buf, 2u);
  }
  if (v104)
  {
    marrs::qr::inference_engine::EspressoQueryRewriteModel::forward_decoder(buf, a2, (_QWORD *)a3, (uint64_t **)__p);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v162, *(char **)&buf[24], v192, (uint64_t)(v192 - *(_QWORD *)&buf[24]) >> 3);
    marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)v193);
    if (*(_QWORD *)&buf[24])
    {
      *(_QWORD *)&v192 = *(_QWORD *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  v168[1] = 0;
  v168[0] = 0;
  v169 = 0;
  v106 = v162;
  v107 = v163 - (_QWORD)v162;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v168, v162, v163, (v163 - (uint64_t)v162) >> 3);
  marrs::qr::inference_engine::EspressoQueryRewriteModel::logMetrics((marrs::qr::inference_engine::EspressoQueryRewriteModel *)a2, v107 >> 3);
  a2[37].__d_.__rep_ = a2[36].__d_.__rep_;
  a2[40].__d_.__rep_ = a2[39].__d_.__rep_;
  v202 = 0u;
  v201 = 0u;
  v200 = 0u;
  v199 = 0u;
  v198 = 0u;
  v197 = 0u;
  v196 = 0u;
  v195 = 0u;
  *(_OWORD *)v194 = 0u;
  v192 = 0u;
  memset(v193, 0, sizeof(v193));
  memset(buf, 0, sizeof(buf));
  *((_OWORD *)v126 + 14) = 0u;
  *((_OWORD *)v126 + 15) = 0u;
  *((_OWORD *)v126 + 12) = 0u;
  *((_OWORD *)v126 + 13) = 0u;
  *((_OWORD *)v126 + 10) = 0u;
  *((_OWORD *)v126 + 11) = 0u;
  *((_OWORD *)v126 + 8) = 0u;
  *((_OWORD *)v126 + 9) = 0u;
  *((_OWORD *)v126 + 6) = 0u;
  *((_OWORD *)v126 + 7) = 0u;
  *((_OWORD *)v126 + 4) = 0u;
  *((_OWORD *)v126 + 5) = 0u;
  *((_OWORD *)v126 + 2) = 0u;
  *((_OWORD *)v126 + 3) = 0u;
  *(_OWORD *)v126 = 0u;
  *((_OWORD *)v126 + 1) = 0u;
  if (v126 != buf)
  {
    std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>(&a2[36].__d_.__rep_, 0, 0, 0);
    std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>(&a2[39].__d_.__rep_, (char *)v194[1], (char *)v195, (uint64_t)(v195 - (unint64_t)v194[1]) >> 3);
  }
  v108 = v201;
  *(_OWORD *)&a2[50].__d_.__rep_ = v200;
  *(_OWORD *)&a2[52].__d_.__rep_ = v108;
  *(_OWORD *)&a2[54].__d_.__rep_ = v202;
  v109 = v197;
  *(_OWORD *)&a2[42].__d_.__rep_ = v196;
  *(_OWORD *)&a2[44].__d_.__rep_ = v109;
  v110 = v199;
  *(_OWORD *)&a2[46].__d_.__rep_ = v198;
  *(_OWORD *)&a2[48].__d_.__rep_ = v110;
  marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType::~EspressoQueryRewriteTimingMetricsType((marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType *)buf);
  v184[1] = 0;
  v184[0] = 0;
  v185 = 0;
  v111 = v168[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
  LODWORD(v186) = v105;
  *((_QWORD *)v127 + 1) = 0;
  *((_QWORD *)v127 + 2) = 0;
  *(_QWORD *)v127 = 0;
  v176 = v127;
  LOBYTE(v177) = 0;
  v112 = operator new(0x20uLL);
  *(_QWORD *)v127 = v112;
  *((_QWORD *)v127 + 1) = v112;
  *((_QWORD *)v127 + 2) = v112 + 4;
  v174[0] = v112;
  v182[0] = v112;
  *(_QWORD *)buf = (char *)v127 + 16;
  *(_QWORD *)&buf[8] = v182;
  *(_QWORD *)&buf[16] = v174;
  buf[24] = 0;
  v112[1] = 0;
  v112[2] = 0;
  v113 = v184[0];
  v114 = v184[1];
  v115 = ((char *)v184[1] - (char *)v184[0]) >> 3;
  *v112 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v112, v113, (uint64_t)v114, v115);
  *((_DWORD *)v112 + 6) = (_DWORD)v186;
  v174[0] = (char *)v174[0] + 32;
  v116 = v174[0];
  buf[24] = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>,marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
  *((_QWORD *)v127 + 1) = v116;
  if (v184[0])
  {
    v184[1] = v184[0];
    operator delete(v184[0]);
  }
  if (v111)
    operator delete(v111);
  JointCCQRModuleInputTensor::~JointCCQRModuleInputTensor((JointCCQRModuleInputTensor *)__p);
  *(_QWORD *)buf = v154;
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v93)
    operator delete(v93);
  operator delete(v92);
  if (v161[1])
  {
    v161[2] = v161[1];
    operator delete(v161[1]);
  }
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  if (v106)
    operator delete(v106);
}

void sub_1C287FFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  void *v67;
  int v68;

  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
    operator delete((void *)STACK[0x370]);
    if ((v68 & 1) == 0)
    {
LABEL_8:
      STACK[0x260] = (unint64_t)&a63;
      std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&a67);
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x200]);
      if (STACK[0x238])
        operator delete((void *)STACK[0x238]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v68)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v67);
  goto LABEL_8;
}

void sub_1C2880044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  void *v34;

  if (a32 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
    operator delete((void *)STACK[0x370]);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x330]);
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x260]);
      operator delete(v34);
      if (STACK[0x238])
        operator delete((void *)STACK[0x238]);
      JUMPOUT(0x1C28810B8);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void sub_1C2880D50()
{
  std::__split_buffer<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::~__split_buffer((uint64_t)&STACK[0x370]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2B0]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2E8]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x330]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x260]);
  STACK[0x260] = (unint64_t)&STACK[0x290];
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  JUMPOUT(0x1C2880F88);
}

void sub_1C2880D64()
{
  unint64_t v0;

  STACK[0x298] = v0;
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2B0]);
  JUMPOUT(0x1C2880F44);
}

void sub_1C2880D74()
{
  JUMPOUT(0x1C2880D80);
}

void sub_1C2880DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;

  STACK[0x260] = (unint64_t)&a63;
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100](&STACK[0x260]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&a67);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x200]);
  if (STACK[0x238])
    operator delete((void *)STACK[0x238]);
  JUMPOUT(0x1C28810B8);
}

void sub_1C2880DD0()
{
  void *v0;

  v0 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v0;
    operator delete(v0);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2E8]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x330]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x260]);
  JUMPOUT(0x1C2880F78);
}

void sub_1C2880DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x370]);
  JUMPOUT(0x1C2880F44);
}

void sub_1C2880E08()
{
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2B0]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x370]);
  JUMPOUT(0x1C2880F44);
}

void sub_1C2880E3C()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1C2880F6CLL);
}

void sub_1C2880E6C()
{
  JUMPOUT(0x1C2880F54);
}

void sub_1C2880E78()
{
  if (STACK[0x330])
    operator delete((void *)STACK[0x330]);
  JUMPOUT(0x1C2880F54);
}

void sub_1C2880E90()
{
  JUMPOUT(0x1C2880F4CLL);
}

void sub_1C2880E9C()
{
  if (STACK[0x2E8])
    operator delete((void *)STACK[0x2E8]);
  JUMPOUT(0x1C2880F4CLL);
}

void sub_1C2880EB8()
{
  void **v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    v1[1] = v2;
    operator delete(v2);
  }
  while (v1 != v0)
  {
    v1 -= 6;
    std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100]((uint64_t)v1);
  }
  JUMPOUT(0x1C2880EF8);
}

void sub_1C2880F14()
{
  JUMPOUT(0x1C2880F1CLL);
}

void sub_1C2880F28()
{
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2E8]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x330]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x260]);
  JUMPOUT(0x1C2880F78);
}

void sub_1C2880F34()
{
  JUMPOUT(0x1C2880F3CLL);
}

void sub_1C2880F64()
{
  void *v0;

  if (v0)
    operator delete(v0);
  STACK[0x260] = (unint64_t)&STACK[0x290];
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  JUMPOUT(0x1C2880F88);
}

void sub_1C288101C()
{
  void *v0;
  int v1;

  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x277]) < 0)
  {
    operator delete((void *)STACK[0x260]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    MEMORY[0x1C3BC594C](&STACK[0x2E8]);
    __cxa_end_catch();
    JUMPOUT(0x1C2881080);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_1C28810B0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1C28810B8);
  __clang_call_terminate(a1);
}

uint64_t std::tuple<std::vector<float>,std::vector<unsigned long>,marrs::qr::inference_engine::LSTMDecoderInputType>::~tuple(uint64_t a1)
{
  void *v2;
  void *v3;

  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)(a1 + 48));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>,marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 32);
        v4 -= 32;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 24) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,5ul>>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a1);
}

uint64_t marrs::mrr::mr::logFeatureVectorArray<5ul>(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::locale::id *v11;
  _QWORD *v12;
  uint64_t i;
  _QWORD *v14;
  const std::locale::facet *v15;
  NSObject *v16;
  void **v17;
  void *__p[2];
  char v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;
  uint8_t buf[4];
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"feature ", 8);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24)));
  v7 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v8 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    v10 = 0;
    v11 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") - ", 4);
      for (i = 0; i != 20; i += 4)
      {
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24)));
      v15 = std::locale::use_facet((const std::locale *)__p, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      ++v10;
      v8 += 20;
    }
    while (v8 != v9);
  }
  v16 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    v17 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v25 = v17;
    _os_log_impl(&dword_1C281A000, v16, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3BC5BC8](&v23);
}

void sub_1C2881484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C2881588(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BC5BC8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BC5BC8](a1 + 112);
  return a1;
}

void marrs::mrr::mr::fetchNeighboringEntities(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  float *v9;
  unint64_t v10;
  float v11;
  float v12;
  float *v13;
  double v14;
  double v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int64x2_t v32;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  const marrs::mrr::mr::MRREntity *v37;
  const marrs::mrr::mr::MRREntity *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  int64x2_t v55;
  void **v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v61;
  void **v62;
  __int128 v63;
  void **v64;
  __int128 v65;
  unint64_t v66;
  void **v67;
  int64x2_t v68;
  void **v69;
  unint64_t *v70;

  v65 = 0uLL;
  v66 = 0;
  v6 = *a4;
  v5 = a4[1];
  if (v5 == *a4)
  {
    v9 = 0;
    v34 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = *(float *)(a2 + 80) + (float)(*(float *)(a2 + 88) * 0.5);
    v12 = *(float *)(a2 + 84) + (float)(*(float *)(a2 + 92) * 0.5);
    do
    {
      if (v10 != a3)
      {
        v13 = (float *)(v6 + 216 * v10);
        v14 = (float)((float)(v13[20] + (float)(v13[22] * 0.5)) - v11);
        v15 = (float)((float)(v13[21] + (float)(v13[23] * 0.5)) - v12);
        v16 = v14 * v14 + v15 * v15;
        if ((unint64_t)v9 >= v66)
        {
          v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v9 - v65) >> 5);
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) > 0x124924924924924)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v66 - v65) >> 5) > v18)
            v18 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v66 - v65) >> 5);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v66 - v65) >> 5)) >= 0x92492492492492)
            v19 = 0x124924924924924;
          else
            v19 = v18;
          v70 = &v66;
          if (v19)
          {
            if (v19 > 0x124924924924924)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v20 = (void **)operator new(224 * v19);
          }
          else
          {
            v20 = 0;
          }
          v67 = v20;
          v68.i64[0] = (uint64_t)&v20[28 * v17];
          v68.i64[1] = v68.i64[0];
          v69 = &v20[28 * v19];
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v68.i64[0], (const marrs::mrr::mr::MRREntity *)v13);
          *(float *)&v20[28 * v17 + 27] = v16;
          v21 = v68.i64[0];
          v9 = (float *)(v68.i64[1] + 224);
          v68.i64[1] += 224;
          v22 = v65;
          if (*((_QWORD *)&v65 + 1) == (_QWORD)v65)
          {
            v32 = vdupq_n_s64(*((unint64_t *)&v65 + 1));
          }
          else
          {
            v23 = 0;
            do
            {
              v24 = v21 + v23;
              v25 = *((_QWORD *)&v22 + 1) + v23;
              *(_QWORD *)(v24 - 224) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 224);
              v26 = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 216);
              *(_QWORD *)(v24 - 200) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 200);
              *(_OWORD *)(v24 - 216) = v26;
              *(_QWORD *)(v25 - 208) = 0;
              *(_QWORD *)(v25 - 200) = 0;
              *(_QWORD *)(v25 - 216) = 0;
              v27 = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 192);
              *(_QWORD *)(v24 - 176) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 176);
              *(_OWORD *)(v24 - 192) = v27;
              *(_QWORD *)(v25 - 184) = 0;
              *(_QWORD *)(v25 - 176) = 0;
              *(_QWORD *)(v25 - 192) = 0;
              v28 = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 168);
              *(_QWORD *)(v24 - 152) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 152);
              *(_OWORD *)(v24 - 168) = v28;
              *(_QWORD *)(v25 - 160) = 0;
              *(_QWORD *)(v25 - 152) = 0;
              *(_QWORD *)(v25 - 168) = 0;
              v29 = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 144);
              *(_OWORD *)(v24 - 132) = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 132);
              *(_OWORD *)(v24 - 144) = v29;
              *(_QWORD *)(v24 - 104) = 0;
              *(_QWORD *)(v24 - 96) = 0;
              *(_QWORD *)(v24 - 112) = 0;
              *(_OWORD *)(v24 - 112) = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 112);
              *(_QWORD *)(v24 - 96) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 96);
              *(_QWORD *)(v25 - 112) = 0;
              *(_QWORD *)(v25 - 104) = 0;
              *(_QWORD *)(v25 - 96) = 0;
              v30 = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 88);
              *(_QWORD *)(v24 - 72) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 72);
              *(_OWORD *)(v24 - 88) = v30;
              *(_QWORD *)(v25 - 80) = 0;
              *(_QWORD *)(v25 - 72) = 0;
              *(_QWORD *)(v25 - 88) = 0;
              *(_DWORD *)(v24 - 64) = *(_DWORD *)(*((_QWORD *)&v22 + 1) + v23 - 64);
              v31 = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 56);
              *(_QWORD *)(v24 - 40) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 40);
              *(_OWORD *)(v24 - 56) = v31;
              *(_QWORD *)(v25 - 48) = 0;
              *(_QWORD *)(v25 - 40) = 0;
              *(_QWORD *)(v25 - 56) = 0;
              *(_QWORD *)(v24 - 32) = 0;
              *(_QWORD *)(v24 - 24) = 0;
              *(_QWORD *)(v24 - 16) = 0;
              *(_OWORD *)(v24 - 32) = *(_OWORD *)(*((_QWORD *)&v22 + 1) + v23 - 32);
              *(_QWORD *)(v24 - 16) = *(_QWORD *)(*((_QWORD *)&v22 + 1) + v23 - 16);
              *(_QWORD *)(v25 - 32) = 0;
              *(_QWORD *)(v25 - 24) = 0;
              *(_QWORD *)(v25 - 16) = 0;
              *(_DWORD *)(v24 - 8) = *(_DWORD *)(*((_QWORD *)&v22 + 1) + v23 - 8);
              v23 -= 224;
            }
            while (*((_QWORD *)&v22 + 1) + v23 != (_QWORD)v22);
            v21 += v23;
            v32 = (int64x2_t)v65;
            v9 = (float *)v68.i64[1];
          }
          *(_QWORD *)&v65 = v21;
          *((_QWORD *)&v65 + 1) = v9;
          v68 = v32;
          v33 = (void **)v66;
          v66 = (unint64_t)v69;
          v69 = v33;
          v67 = (void **)v32.i64[0];
          std::__split_buffer<marrs::mrr::mr::EntityWithDistance>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v9, (const marrs::mrr::mr::MRREntity *)(v6 + 216 * v10));
          v9[54] = v16;
          v9 += 56;
        }
        *((_QWORD *)&v65 + 1) = v9;
        v6 = *a4;
        v5 = a4[1];
      }
      ++v10;
    }
    while (v10 < 0x84BDA12F684BDA13 * ((v5 - v6) >> 3));
    v34 = v65;
  }
  v35 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - v34) >> 5));
  if (v9 == (float *)v34)
    v36 = 0;
  else
    v36 = v35;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *,false>(v34, (unint64_t)v9, v36, 1);
  v63 = 0uLL;
  v64 = 0;
  v61 = 0uLL;
  v62 = 0;
  v38 = (const marrs::mrr::mr::MRREntity *)*((_QWORD *)&v65 + 1);
  v37 = (const marrs::mrr::mr::MRREntity *)v65;
  if ((_QWORD)v65 == *((_QWORD *)&v65 + 1))
  {
    v59 = 0;
    v58 = 0;
  }
  else
  {
    do
    {
      if (*(_DWORD *)v37 == *(_DWORD *)a2)
      {
        v39 = *((_QWORD *)&v63 + 1);
        if (*((_QWORD *)&v63 + 1) >= (unint64_t)v64)
        {
          v42 = 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)&v63 + 1) - v63) >> 3);
          v43 = v42 + 1;
          if (v42 + 1 > 0x12F684BDA12F684)
            goto LABEL_69;
          if (0x97B425ED097B426 * ((uint64_t)((uint64_t)v64 - v63) >> 3) > v43)
            v43 = 0x97B425ED097B426 * ((uint64_t)((uint64_t)v64 - v63) >> 3);
          if (0x84BDA12F684BDA13 * ((uint64_t)((uint64_t)v64 - v63) >> 3) >= 0x97B425ED097B42)
            v44 = 0x12F684BDA12F684;
          else
            v44 = v43;
          v70 = (unint64_t *)&v64;
          if (v44)
            v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v44);
          else
            v45 = 0;
          v67 = (void **)v44;
          v68.i64[0] = v44 + 216 * v42;
          v68.i64[1] = v68.i64[0];
          v69 = (void **)(v44 + 216 * v45);
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v68.i64[0], v37);
          v49 = v68.i64[0];
          v40 = v68.i64[1] + 216;
          v68.i64[1] += 216;
          v50 = *((_QWORD *)&v63 + 1);
          v51 = v63;
          if (*((_QWORD *)&v63 + 1) == (_QWORD)v63)
          {
            v52 = vdupq_n_s64(*((unint64_t *)&v63 + 1));
          }
          else
          {
            do
            {
              v49 -= 216;
              v50 -= 216;
              std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v49, v50);
            }
            while (v50 != v51);
            v52 = (int64x2_t)v63;
            v40 = v68.i64[1];
          }
          *(_QWORD *)&v63 = v49;
          *((_QWORD *)&v63 + 1) = v40;
          v68 = v52;
          v56 = v64;
          v64 = v69;
          v69 = v56;
          v67 = (void **)v52.i64[0];
          std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          marrs::mrr::mr::MRREntity::MRREntity(*((marrs::mrr::mr::MRREntity **)&v63 + 1), v37);
          v40 = v39 + 216;
        }
        *((_QWORD *)&v63 + 1) = v40;
      }
      else
      {
        if (*((_QWORD *)&v61 + 1) >= (unint64_t)v62)
        {
          v46 = 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3) + 1;
          if (v46 > 0x12F684BDA12F684)
LABEL_69:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x97B425ED097B426 * ((uint64_t)((uint64_t)v62 - v61) >> 3) > v46)
            v46 = 0x97B425ED097B426 * ((uint64_t)((uint64_t)v62 - v61) >> 3);
          if (0x84BDA12F684BDA13 * ((uint64_t)((uint64_t)v62 - v61) >> 3) >= 0x97B425ED097B42)
            v47 = 0x12F684BDA12F684;
          else
            v47 = v46;
          v70 = (unint64_t *)&v62;
          if (v47)
            v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v47);
          else
            v48 = 0;
          v67 = (void **)v47;
          v68.i64[0] = v47 + 8 * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3);
          v68.i64[1] = v68.i64[0];
          v69 = (void **)(v47 + 216 * v48);
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v68.i64[0], v37);
          v53 = v68.i64[0];
          v41 = v68.i64[1] + 216;
          v68.i64[1] += 216;
          v54 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1) == (_QWORD)v61)
          {
            v55 = vdupq_n_s64(*((unint64_t *)&v61 + 1));
          }
          else
          {
            do
            {
              v53 -= 216;
              v54 -= 216;
              std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v53, v54);
            }
            while (v54 != (_QWORD)v61);
            v55 = (int64x2_t)v61;
            v41 = v68.i64[1];
          }
          *(_QWORD *)&v61 = v53;
          *((_QWORD *)&v61 + 1) = v41;
          v68 = v55;
          v57 = v62;
          v62 = v69;
          v69 = v57;
          v67 = (void **)v55.i64[0];
          std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          marrs::mrr::mr::MRREntity::MRREntity(*((marrs::mrr::mr::MRREntity **)&v61 + 1), v37);
          v41 = *((_QWORD *)&v61 + 1) + 216;
        }
        *((_QWORD *)&v61 + 1) = v41;
      }
      v37 = (const marrs::mrr::mr::MRREntity *)((char *)v37 + 224);
    }
    while (v37 != v38);
    v59 = *((_QWORD *)&v61 + 1);
    v58 = v61;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<marrs::mrr::mr::MRREntity>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRREntity*,marrs::mrr::mr::MRREntity*>(a1, v58, v59, 0x84BDA12F684BDA13 * ((v59 - v58) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<marrs::mrr::mr::MRREntity>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRREntity*,marrs::mrr::mr::MRREntity*>(a1 + 3, v63, *((uint64_t *)&v63 + 1), 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)&v63 + 1) - v63) >> 3));
  v67 = (void **)&v61;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v67);
  v67 = (void **)&v63;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v67);
  v67 = (void **)&v65;
  std::vector<marrs::mrr::mr::EntityWithDistance>::__destroy_vector::operator()[abi:ne180100](&v67);
}

void sub_1C2881D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  va_list va3;
  va_list va4;

  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void **);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, void **);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v20 = va_arg(va4, void **);
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)va4);
  va_copy((va_list)v20, va);
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  va_copy((va_list)v6, va1);
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  va_copy((va_list)v11, va2);
  std::vector<marrs::mrr::mr::EntityWithDistance>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  float v30;
  float v31;
  BOOL v32;
  void **v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  float v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  float v49;
  void ***v50;
  uint64_t v51;
  uint64_t v52;
  void ***v53;
  float v54;
  void **v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  void ***v107;
  void ***v108;
  float v109;
  void **v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  __int128 *v119;
  void **v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  _OWORD v128[2];
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  int v138;
  void **v139;
  void **v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  _OWORD v147[2];
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  int v152;
  __int128 __p;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  float v157;

void std::vector<marrs::mrr::mr::EntityWithDistance>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        marrs::mrr::mr::MRREntity::~MRREntity(v4 - 28);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<marrs::mrr::mr::MRREntity>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRREntity*,marrs::mrr::mr::MRREntity*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  if (a4)
  {
    if (a4 >= 0x12F684BDA12F685)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[27 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&v7[v9 / 8], (const marrs::mrr::mr::MRREntity *)(a2 + v9));
        v9 += 216;
      }
      while (a2 + v9 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1C2883150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<marrs::mrr::mr::EntityWithDistance>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    marrs::mrr::mr::MRREntity::~MRREntity((void **)(i - 224));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  _BYTE v16[28];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 __p;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  void **v27;

  v9 = *(_QWORD *)a1;
  *(_OWORD *)v10 = *(_OWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)v14 = *(_OWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v16[12] = *(_OWORD *)(a1 + 92);
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)v16 = v3;
  v17 = v4;
  v5 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v6 = *(_OWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v18 = v5;
  v20 = v7;
  v19 = v6;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v21 = *(_DWORD *)(a1 + 160);
  v8 = *(_OWORD *)(a1 + 168);
  v23 = *(_QWORD *)(a1 + 184);
  __p = v8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v24 = *(_OWORD *)(a1 + 192);
  v25 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v26 = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(a1, a2) + 216) = *(_DWORD *)(a2 + 216);
  marrs::mrr::mr::MRREntity::operator=(a2, (uint64_t)&v9);
  *(_DWORD *)(a2 + 216) = v26;
  v27 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)v19);
  v27 = (void **)&v17;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;

  v5 = a1;
  v6 = *(float *)(a2 + 216);
  v7 = *(float *)(a3 + 216);
  if (v6 < *(float *)(a1 + 216))
  {
    if (v7 >= v6)
    {
      std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2);
      if (*(float *)(a3 + 216) >= *(float *)(a2 + 216))
        return;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a2, a3);
    if (*(float *)(a2 + 216) < *(float *)(v5 + 216))
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, v8);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a2, a3);
  if (*(float *)(a4 + 216) < *(float *)(a3 + 216))
  {
    std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a3, a4);
    if (*(float *)(a3 + 216) < *(float *)(a2 + 216))
    {
      std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a2, a3);
      if (*(float *)(a2 + 216) < *(float *)(a1 + 216))
        std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a2, a3, a4);
  if (*(float *)(a5 + 216) < *(float *)(a4 + 216))
  {
    std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a4, a5);
    if (*(float *)(a4 + 216) < *(float *)(a3 + 216))
    {
      std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a3, a4);
      if (*(float *)(a3 + 216) < *(float *)(a2 + 216))
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a2, a3);
        if (*(float *)(a2 + 216) < *(float *)(a1 + 216))
          std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 __p;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  float v35;
  void **v36[2];

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 216))
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2 - 224);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a2 - 224);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, a1 + 672, a2 - 224);
      return 1;
    default:
      v6 = a1 + 448;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448);
      v7 = a1 + 672;
      if (a1 + 672 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(float *)(v7 + 216);
    if (v10 < *(float *)(v6 + 216))
    {
      v18 = *(_QWORD *)v7;
      v19 = *(_OWORD *)(v7 + 8);
      v20 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      v21 = *(_OWORD *)(v7 + 32);
      v22 = *(_QWORD *)(v7 + 48);
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      v23 = *(_OWORD *)(v7 + 56);
      v24 = *(_QWORD *)(v7 + 72);
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      v11 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(v7 + 92);
      v25[0] = v11;
      v26 = *(_OWORD *)(v7 + 112);
      v27 = *(_QWORD *)(v7 + 128);
      *(_QWORD *)(v7 + 112) = 0;
      *(_QWORD *)(v7 + 120) = 0;
      v12 = *(_OWORD *)(v7 + 136);
      v29 = *(_QWORD *)(v7 + 152);
      v28 = v12;
      *(_QWORD *)(v7 + 128) = 0;
      *(_QWORD *)(v7 + 136) = 0;
      *(_QWORD *)(v7 + 144) = 0;
      *(_QWORD *)(v7 + 152) = 0;
      v30 = *(_DWORD *)(v7 + 160);
      v13 = *(_OWORD *)(v7 + 168);
      v32 = *(_QWORD *)(v7 + 184);
      __p = v13;
      *(_QWORD *)(v7 + 168) = 0;
      *(_QWORD *)(v7 + 176) = 0;
      v33 = *(_OWORD *)(v7 + 192);
      v34 = *(_QWORD *)(v7 + 208);
      *(_QWORD *)(v7 + 184) = 0;
      *(_QWORD *)(v7 + 192) = 0;
      *(_QWORD *)(v7 + 200) = 0;
      *(_QWORD *)(v7 + 208) = 0;
      v14 = v8;
      v35 = v10;
      while (1)
      {
        v15 = a1 + v14;
        marrs::mrr::mr::MRREntity::operator=(a1 + v14 + 672, a1 + v14 + 448);
        *(_DWORD *)(a1 + v14 + 888) = *(_DWORD *)(a1 + v14 + 664);
        if (v14 == -448)
          break;
        v14 -= 224;
        if (v35 >= *(float *)(v15 + 440))
        {
          v16 = a1 + v14 + 672;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      v17 = marrs::mrr::mr::MRREntity::operator=(v16, (uint64_t)&v18);
      *(float *)(v17 + 216) = v35;
      v36[0] = (void **)&v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
      if (SHIBYTE(v32) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v29) < 0)
        operator delete((void *)v28);
      v36[0] = (void **)&v26;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v36);
      if (SHIBYTE(v24) < 0)
        operator delete((void *)v23);
      if (SHIBYTE(v22) < 0)
        operator delete((void *)v21);
      if (SHIBYTE(v20) < 0)
        operator delete((void *)v19);
      if (++v9 == 8)
        return v7 + 224 == a2;
    }
    v6 = v7;
    v8 += 224;
    v7 += 224;
    if (v7 == a2)
      return 1;
  }
}

_QWORD *std::vector<std::array<float,25ul>>::vector(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x28F5C28F5C28F5DLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,25ul>>>(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = (char *)v6 + 100 * v7;
    v8 = 100 * a2;
    v9 = (char *)v6 + 100 * a2;
    do
    {
      v10 = *a3;
      v11 = a3[2];
      v6[1] = a3[1];
      v6[2] = v11;
      *v6 = v10;
      v12 = a3[3];
      v13 = a3[4];
      v14 = a3[5];
      *((_DWORD *)v6 + 24) = *((_DWORD *)a3 + 24);
      v6[4] = v13;
      v6[5] = v14;
      v6[3] = v12;
      v6 = (_OWORD *)((char *)v6 + 100);
      v8 -= 100;
    }
    while (v8);
    a1[1] = v9;
  }
  return a1;
}

void sub_1C2883934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marrs::mrr::mr::logFeatureVectorArray<25ul>(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::locale::id *v11;
  _QWORD *v12;
  uint64_t i;
  _QWORD *v14;
  const std::locale::facet *v15;
  NSObject *v16;
  void **v17;
  void *__p[2];
  char v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;
  uint8_t buf[4];
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"feature ", 8);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24)));
  v7 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v8 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    v10 = 0;
    v11 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") - ", 4);
      for (i = 0; i != 100; i += 4)
      {
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24)));
      v15 = std::locale::use_facet((const std::locale *)__p, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      ++v10;
      v8 += 100;
    }
    while (v8 != v9);
  }
  v16 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    v17 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v25 = v17;
    _os_log_impl(&dword_1C281A000, v16, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3BC5BC8](&v23);
}

void sub_1C2883C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,25ul>>>(unint64_t a1)
{
  if (a1 >= 0x28F5C28F5C28F5DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(100 * a1);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  if (a1 != a2)
  {
    v5 = a1;
    v6 = (unint64_t *)(a3 + 2);
    v7 = a3[1];
    do
    {
      if (v7 >= *v6)
      {
        v8 = 0x84BDA12F684BDA13 * ((uint64_t)(v7 - *a3) >> 3);
        v9 = v8 + 1;
        if (v8 + 1 > 0x12F684BDA12F684)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x97B425ED097B426 * ((uint64_t)(*v6 - *a3) >> 3) > v9)
          v9 = 0x97B425ED097B426 * ((uint64_t)(*v6 - *a3) >> 3);
        if (0x84BDA12F684BDA13 * ((uint64_t)(*v6 - *a3) >> 3) >= 0x97B425ED097B42)
          v10 = 0x12F684BDA12F684;
        else
          v10 = v9;
        v13[4] = v6;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v10);
        else
          v11 = 0;
        v12 = v10 + 216 * v8;
        v13[0] = v10;
        v13[1] = v12;
        v13[3] = v10 + 216 * v11;
        std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v12, v5);
        v13[2] = v12 + 216;
        std::vector<marrs::mrr::mr::MRREntity>::__swap_out_circular_buffer(a3, v13);
        v7 = a3[1];
        std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)v13);
      }
      else
      {
        std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v7, v5);
        v7 += 216;
      }
      a3[1] = v7;
      v5 += 216;
    }
    while (v5 != a2);
  }
}

void **std::pair<std::vector<marrs::mrr::mr::MRREntity>,std::vector<marrs::mrr::mr::MRREntity>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_QWORD *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1C2883E80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  else
    v8 = 0;
  v9 = (_QWORD *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  v13 = v9;
  v14 = v7 + 24 * v8;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v13 += 3;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v12);
  v10 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v12);
  return v10;
}

void sub_1C2883F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void marrs::mrr::mr::computeStringMatchFeatures(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  _BOOL4 v14;
  _BOOL4 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  const char *v22;
  int v23;
  uint64_t *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  _BOOL4 v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  float v33;
  uint64_t v34;
  char *v35;
  uint64_t i;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *locale;
  uint64_t v45;
  char *v46;
  int64_t v47;
  char *v48;
  _BOOL4 v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int *v54;
  std::locale *v55;
  char *v56;
  char *v57;
  int64_t v58;
  char *v59;
  int v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  std::string v77;
  std::locale v78;
  uint64_t v79;
  unsigned __int8 v80;
  std::string v81;
  std::locale v82;
  int64_t v83;
  unsigned __int8 v84;
  std::locale v85;
  std::locale v86;
  std::locale v87;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    MEMORY[0x1C3BC5B8C](&v78);
    std::locale::locale(&v82, &v78);
    v14 = boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>((uint64_t *)a3, (uint64_t *)a2, &v82);
    std::locale::~locale(&v82);
    std::locale::~locale(&v78);
    if (v14)
      *(_DWORD *)a1 = 1065353216;
    MEMORY[0x1C3BC5B8C](&v78);
    std::locale::locale(&v82, &v78);
    v15 = boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>((uint64_t *)a2, (uint64_t *)a3, &v82);
    std::locale::~locale(&v82);
    std::locale::~locale(&v78);
    if (v15)
      *(_DWORD *)(a1 + 4) = 1065353216;
    v16 = a4 + 1;
    v17 = (_QWORD *)*a4;
    if ((_QWORD *)*a4 != a4 + 1)
    {
      v74 = a4;
      v75 = a5;
      v18 = (_QWORD *)(a7 + 8);
      do
      {
        v19 = *v18;
        if (!*v18)
          goto LABEL_26;
        v20 = *((char *)v17 + 55) >= 0 ? (const char *)(v17 + 4) : (const char *)v17[4];
        v21 = v18;
        do
        {
          if (*(char *)(v19 + 55) >= 0)
            v22 = (const char *)(v19 + 32);
          else
            v22 = *(const char **)(v19 + 32);
          v23 = strcasecmp(v22, v20);
          v24 = (uint64_t *)(v19 + 8);
          if (v23 >= 0)
          {
            v24 = (uint64_t *)v19;
            v21 = (_QWORD *)v19;
          }
          v19 = *v24;
        }
        while (*v24);
        if (v18 == v21
          || ((v27 = (const char *)v21[4], v26 = (const char *)(v21 + 4), v25 = v27, v26[23] >= 0)
            ? (v28 = v26)
            : (v28 = v25),
              strcasecmp(v20, v28) < 0))
        {
LABEL_26:
          MEMORY[0x1C3BC5B8C](&v78);
          std::locale::locale(&v82, &v78);
          v29 = boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>((uint64_t *)a2, v17 + 4, &v82);
          std::locale::~locale(&v82);
          std::locale::~locale(&v78);
          if (v29)
            *(float *)(a1 + 8) = *(float *)(a1 + 8) + 1.0;
        }
        v30 = (_QWORD *)v17[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v17[2];
            v32 = *v31 == (_QWORD)v17;
            v17 = v31;
          }
          while (!v32);
        }
        v17 = v31;
      }
      while (v31 != v16);
      a4 = v74;
      a5 = v75;
      v17 = (_QWORD *)*v74;
    }
    if (v17 != v16)
    {
      v33 = *(float *)(a1 + 12);
      v34 = MEMORY[0x1E0C80978];
      do
      {
        if (*((char *)v17 + 55) < 0)
        {
          v35 = (char *)v17[4];
          for (i = v17[5]; i; --i)
          {
LABEL_39:
            if ((*v35 & 0x80000000) == 0)
            {
              v37 = *v35;
              if ((*(_DWORD *)(v34 + 4 * v37 + 60) & 0x400) != 0
                && std::string::find((const std::string *)a2, v37, 0) != -1)
              {
                v33 = v33 + 1.0;
                *(float *)(a1 + 12) = v33;
              }
            }
            ++v35;
          }
        }
        else
        {
          v35 = (char *)(v17 + 4);
          i = *((unsigned __int8 *)v17 + 55);
          if (*((_BYTE *)v17 + 55))
            goto LABEL_39;
        }
        v38 = (_QWORD *)v17[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (_QWORD *)v17[2];
            v32 = *v39 == (_QWORD)v17;
            v17 = v39;
          }
          while (!v32);
        }
        v17 = v39;
      }
      while (v39 != v16);
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v81 = *(std::string *)a3;
    getDigitsInString(&v82, (unsigned __int8 *)&v81);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v77 = *(std::string *)a2;
    getDigitsInString(&v78, (unsigned __int8 *)&v77);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    v40 = v84;
    if ((v84 & 0x80u) != 0)
      v40 = v83;
    if (!v40)
      goto LABEL_146;
    v41 = v80;
    if ((v80 & 0x80u) != 0)
      v41 = v79;
    if (!v41)
      goto LABEL_146;
    if (tokenIntersection(a4, a6))
    {
      v42 = v80;
      if ((v80 & 0x80u) != 0)
        v42 = v79;
      v43 = v84;
      if ((v84 & 0x80u) != 0)
        v43 = v83;
      if (v42 >= v43)
      {
        MEMORY[0x1C3BC5B8C](&v85);
        std::locale::locale(&v86, &v85);
        if ((v80 & 0x80u) == 0)
          locale = (char *)&v78;
        else
          locale = (char *)v78.__locale_;
        if ((v80 & 0x80u) == 0)
          v45 = v80;
        else
          v45 = v79;
        if ((v84 & 0x80u) == 0)
          v46 = (char *)&v82;
        else
          v46 = (char *)v82.__locale_;
        if ((v84 & 0x80u) == 0)
          v47 = v84;
        else
          v47 = v83;
        std::locale::locale(&v87, &v86);
        v48 = locale - 1;
        while (v45 && v47)
        {
          if (!boost::algorithm::is_iequal::operator()<char,char>(&v87, v48[v45--], &v46[--v47]))
          {
            v50 = 0;
            goto LABEL_100;
          }
        }
        v50 = &v46[v47] == v46;
LABEL_100:
        std::locale::~locale(&v87);
        std::locale::~locale(&v86);
        v55 = &v85;
        goto LABEL_142;
      }
    }
    else
    {
      v51 = tokenIntersection(a4, a5);
      v52 = v80;
      if (!v51)
      {
        if ((v80 & 0x80u) == 0)
          v56 = (char *)&v78;
        else
          v56 = (char *)v78.__locale_;
        if ((v80 & 0x80u) != 0)
          v52 = v79;
        if ((v84 & 0x80u) == 0)
          v57 = (char *)&v82;
        else
          v57 = (char *)v82.__locale_;
        if ((v84 & 0x80u) == 0)
          v58 = v84;
        else
          v58 = v83;
        if (v58)
        {
          if (v52 >= v58)
          {
            v59 = &v56[v52];
            v60 = *v57;
            v61 = v56;
            while (1)
            {
              v62 = v52 - v58;
              if (v62 == -1)
                break;
              v63 = (char *)memchr(v61, v60, v62 + 1);
              if (!v63)
                break;
              v64 = v63;
              if (!memcmp(v63, v57, v58))
              {
                if (v64 == v59 || v64 - v56 == -1)
                  goto LABEL_146;
                goto LABEL_153;
              }
              v61 = v64 + 1;
              v52 = v59 - (v64 + 1);
              if (v52 < v58)
                goto LABEL_146;
            }
          }
        }
        else
        {
LABEL_153:
          *(_DWORD *)(a1 + 16) = 1065353216;
        }
        goto LABEL_146;
      }
      if ((v80 & 0x80u) != 0)
        v52 = v79;
      v53 = v84;
      if ((v84 & 0x80u) != 0)
        v53 = v83;
      if (v52 >= v53)
      {
        MEMORY[0x1C3BC5B8C](&v86);
        std::locale::locale(&v87, &v86);
        if ((v80 & 0x80u) == 0)
          v65 = (char *)&v78;
        else
          v65 = (char *)v78.__locale_;
        v66 = v80;
        if ((v80 & 0x80u) != 0)
          v66 = v79;
        if ((v84 & 0x80u) == 0)
          v67 = (char *)&v82;
        else
          v67 = (char *)v82.__locale_;
        if ((v84 & 0x80u) == 0)
          v68 = v84;
        else
          v68 = v83;
        if (v66 && v68)
        {
          v69 = v68 - 1;
          v70 = v66 - 1;
          v71 = v67;
          while (boost::algorithm::is_iequal::operator()<char,char>(&v87, *v65, v71))
          {
            ++v71;
            if (v70)
            {
              ++v65;
              v72 = v69--;
              --v70;
              if (v72)
                continue;
            }
            goto LABEL_139;
          }
          v50 = 0;
        }
        else
        {
          v71 = v67;
LABEL_139:
          v50 = v71 == &v67[v68];
        }
        std::locale::~locale(&v87);
        v55 = &v86;
LABEL_142:
        std::locale::~locale(v55);
        v54 = (int *)(a1 + 16);
        if (v50)
        {
          v73 = 1065353216;
LABEL_145:
          *v54 = v73;
LABEL_146:
          if ((char)v80 < 0)
            operator delete(v78.__locale_);
          if ((char)v84 < 0)
            operator delete(v82.__locale_);
          return;
        }
LABEL_144:
        v73 = -1082130432;
        goto LABEL_145;
      }
    }
    v54 = (int *)(a1 + 16);
    goto LABEL_144;
  }
}

void sub_1C2884660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::locale a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;

  std::locale::~locale((std::locale *)(v37 - 112));
  std::locale::~locale((std::locale *)(v37 - 120));
  if (a24 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31.__locale_);
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>(uint64_t *a1, uint64_t *a2, std::locale *a3)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _BOOL8 v16;
  std::locale v18;
  uint64_t *v19;
  uint64_t *v20;
  std::locale v21;
  std::locale v22;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (!v3)
    return 1;
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = (uint64_t *)((char *)v5 + v3);
  v7 = *((char *)a1 + 23);
  if (v7 >= 0)
    v8 = a1;
  else
    v8 = (uint64_t *)*a1;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = a1[1];
  std::locale::locale(&v18, a3);
  std::locale::locale(&v22, &v18);
  v19 = v5;
  v20 = v6;
  std::locale::locale(&v21, &v22);
  std::locale::~locale(&v22);
  if (v9)
  {
    v10 = (uint64_t *)((char *)v8 + v9);
    v11 = v20;
    while (1)
    {
      v12 = (char *)v19;
      if (v19 == v11)
      {
LABEL_24:
        v8 = v10;
        goto LABEL_28;
      }
      v13 = 0;
      v14 = v19;
      v15 = v8;
      while (&v12[v13] != (char *)v20)
      {
        if (!boost::algorithm::is_iequal::operator()<char,char>(&v21, *((_BYTE *)v8 + v13), &v12[v13]))
          goto LABEL_22;
        v15 = (uint64_t *)((char *)v15 + 1);
        v14 = (uint64_t *)((char *)v14 + 1);
        if (v9 == ++v13)
        {
          v14 = (uint64_t *)&v12[v13];
          v15 = v10;
          goto LABEL_22;
        }
      }
      v15 = (uint64_t *)((char *)v8 + v13);
      v14 = (uint64_t *)&v12[v13];
LABEL_22:
      v11 = v20;
      if (v14 == v20)
        break;
      v8 = (uint64_t *)((char *)v8 + 1);
      --v9;
      if (v8 == v10)
        goto LABEL_24;
    }
    v10 = v15;
  }
  else
  {
    v10 = v8;
  }
LABEL_28:
  v16 = v8 != v10;
  std::locale::~locale(&v21);
  std::locale::~locale(&v18);
  return v16;
}

void sub_1C2884884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *marrs::mrr::mr::getMentionStringSet(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[64];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result[1] = 0;
  result[2] = 0;
  *result = result + 1;
  v3 = *(unsigned int *)(a2 + 76);
  if (v3 < *(_DWORD *)(a2 + 72))
  {
    v6 = (uint64_t)result;
    do
    {
      v7 = *(_QWORD *)(a3 + 24);
      if (v3 >= (*(_QWORD *)(a3 + 32) - v7) >> 3)
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      MEMORY[0x1C3BC552C](v8, *(_QWORD *)(v7 + 8 * v3));
      if (!v10)
        std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v6, v9, v9);
      result = (_QWORD *)MEMORY[0x1C3BC5538](v8);
      ++v3;
    }
    while (v3 < *(unsigned int *)(a2 + 72));
  }
  return result;
}

void sub_1C2884978(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  char **v13;
  NSObject *v16;
  _QWORD *exception;

  MEMORY[0x1C3BC5538](&buf);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v16 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "Mention token indices out of bounds in token chain";
      _os_log_impl(&dword_1C281A000, v16, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)&buf, 0xCu);
    }
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Mention token indices out of bounds in token chain");
    std::string::basic_string[abi:ne180100]<0>(&a10, "MultimodalReferenceResolution");
    IOContentError::IOContentError(exception, (uint64_t)&buf, (uint64_t)&a10, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 465);
  }
  std::__tree<std::string>::destroy(*v13);
  _Unwind_Resume(a1);
}

void sub_1C2884A64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v22)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C2884AC8);
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C2884AD8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1C2884AD0);
}

void std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,false>(uint64_t a1, uint64_t *a2, float32x2_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  float32x2_t v19;
  float32x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  char v24;
  float32x2_t v25;
  float64x2_t v26;
  float v27;
  float32x2_t *v28;
  float32x2_t *v29;
  float64x2_t v30;
  uint64_t v31;
  unint64_t v32;
  float64x2_t v33;
  unint64_t v34;
  float64x2_t v35;
  unint64_t v36;
  float32x2_t v37;
  float64x2_t v38;
  float v39;
  float32x2_t v40;
  float32x2_t v41;
  float64x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float64x2_t v45;
  void **v46;
  __int128 v47;
  __int128 v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  float32x2_t v52;
  float64x2_t v53;
  float v54;
  float64x2_t v55;
  float32x2_t *v56;
  float64x2_t v57;
  float32x2_t *v58;
  float64x2_t v59;
  unint64_t v60;
  uint64_t *v61;
  float64x2_t v62;
  float32x2_t v63;
  float64x2_t v64;
  float v65;
  float32x2_t v66;
  float32x2_t v67;
  float64x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float64x2_t v71;
  void **v72;
  __int128 v73;
  __int128 v74;
  float32x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t *v78;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  float32x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  char v88;
  float32x2_t v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  float32x2_t v93;
  float64x2_t v94;
  uint64_t v95;
  float64x2_t v96;
  uint64_t v97;
  _DWORD *v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  uint64_t v102;
  float32x2_t *v103;
  float32x2_t *v104;
  float32x2_t v105;
  float32x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float32x2_t *v110;
  float32x2_t *v111;
  float32x2_t v112;
  float64x2_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float32x2_t *v116;
  __int128 v117;
  uint64_t v118;
  float32x2_t *v119;
  float32x2_t v120;
  float32x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  __int128 v126;
  int64_t v127;
  void **v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int64_t v136;
  float32x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  __int128 v140;
  _OWORD *v141;
  int v142;
  __int128 v143;
  uint64_t v144;
  unint64_t v145;
  float32x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  void *v149;
  char v150;
  float32x2_t v151;
  unint64_t v152;
  __int128 v153;
  float32x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  __int128 v157;
  uint64_t v159;
  uint64_t *v160;
  float32x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  uint64_t v164;
  char v165;
  float32x2_t v166;
  uint64_t v167;
  void **v168;
  uint64_t v169;
  float32x2_t v170;
  float64x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float64x2_t v174;
  __int128 v175;
  float32x2_t *v176;
  float32x2_t *v177;
  float32x2_t *v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  __int8 v186;
  float32x2_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float32x2_t v191;
  uint64_t v192;
  char v193;
  void **v194;
  _BYTE v195[15];
  __int128 v196;
  _BYTE v197[15];
  _BYTE v198[15];
  _BYTE v199[15];
  _BYTE v200[15];
  __int128 v201;
  _BYTE v202[15];
  __int128 v203;
  _BYTE v204[15];

uint64_t std::__split_buffer<std::vector<marrs::mrr::mr::SurroundingText>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 *v6;
  __n128 result;
  __n128 v8;
  _BYTE v9[15];

  v3 = *a1;
  *(_QWORD *)v9 = a1[1];
  *(_QWORD *)&v9[7] = *(uint64_t *)((char *)a1 + 15);
  v4 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = *(__n128 *)(a1 + 3);
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v6 = (__n128 *)(a2 + 24);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)v9;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)&v9[7];
  *(_BYTE *)(a2 + 23) = v4;
  result = v8;
  *v6 = v8;
  return result;
}

double std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t **a4)
{
  float32x2_t *v7;
  float32x2_t v8;
  float64x2_t v9;
  double result;
  float64x2_t v11;
  float64x2_t v12;
  float v13;
  float32x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float32x2_t v18;
  float64x2_t v19;
  float64x2_t v20;

  v7 = a1;
  v8 = vadd_f32(**a4, vmul_f32((*a4)[1], (float32x2_t)0x3F0000003F000000));
  v9 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
  result = vaddvq_f64(vmulq_f64(v9, v9));
  *(float *)&result = result;
  v11 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(a1[3], vmul_f32(a1[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v11.f64 = vaddvq_f64(vmulq_f64(v11, v11));
  v12 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
  v13 = vaddvq_f64(vmulq_f64(v12, v12));
  if (*(float *)&result < *(float *)v11.f64)
  {
    if (v13 >= *(float *)&result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2);
      v14 = vadd_f32(**a4, vmul_f32((*a4)[1], (float32x2_t)0x3F0000003F000000));
      v15 = vcvtq_f64_f32(vsub_f32(v14, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
      *(float *)v15.f64 = vaddvq_f64(vmulq_f64(v15, v15));
      v16 = vcvtq_f64_f32(vsub_f32(v14, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
      result = vaddvq_f64(vmulq_f64(v16, v16));
      *(float *)&result = result;
      if (*(float *)v15.f64 >= *(float *)&result)
        return result;
      a1 = (float32x2_t *)a2;
    }
    v17 = (uint64_t)a3;
    goto LABEL_9;
  }
  if (v13 < *(float *)&result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a2, (uint64_t)a3);
    v18 = vadd_f32(**a4, vmul_f32((*a4)[1], (float32x2_t)0x3F0000003F000000));
    v19 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
    *(float *)v19.f64 = vaddvq_f64(vmulq_f64(v19, v19));
    v20 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(v7[3], vmul_f32(v7[4], (float32x2_t)0x3F0000003F000000))));
    result = vaddvq_f64(vmulq_f64(v20, v20));
    *(float *)&result = result;
    if (*(float *)v19.f64 < *(float *)&result)
    {
      a1 = v7;
      v17 = a2;
LABEL_9:
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, v17).n128_u64[0];
    }
  }
  return result;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t **a5)
{
  float32x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float32x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float32x2_t v16;
  float64x2_t v17;
  float64x2_t v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(a1, a2, a3, a5);
  v10 = vadd_f32(**a5, vmul_f32((*a5)[1], (float32x2_t)0x3F0000003F000000));
  v11 = vcvtq_f64_f32(vsub_f32(v10, vadd_f32(a4[3], vmul_f32(a4[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v11.f64 = vaddvq_f64(vmulq_f64(v11, v11));
  v12 = vcvtq_f64_f32(vsub_f32(v10, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v12.f64 = vaddvq_f64(vmulq_f64(v12, v12));
  if (*(float *)v11.f64 < *(float *)v12.f64)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a3, (uint64_t)a4);
    v13 = vadd_f32(**a5, vmul_f32((*a5)[1], (float32x2_t)0x3F0000003F000000));
    v14 = vcvtq_f64_f32(vsub_f32(v13, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v14.f64 = vaddvq_f64(vmulq_f64(v14, v14));
    v15 = vcvtq_f64_f32(vsub_f32(v13, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
    *(float *)v15.f64 = vaddvq_f64(vmulq_f64(v15, v15));
    if (*(float *)v14.f64 < *(float *)v15.f64)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a2, (uint64_t)a3);
      v16 = vadd_f32(**a5, vmul_f32((*a5)[1], (float32x2_t)0x3F0000003F000000));
      v17 = vcvtq_f64_f32(vsub_f32(v16, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
      *(float *)v17.f64 = vaddvq_f64(vmulq_f64(v17, v17));
      v18 = vcvtq_f64_f32(vsub_f32(v16, vadd_f32(a1[3], vmul_f32(a1[4], (float32x2_t)0x3F0000003F000000))));
      *(float *)v18.f64 = vaddvq_f64(vmulq_f64(v18, v18));
      if (*(float *)v17.f64 < *(float *)v18.f64)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2);
    }
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,0>(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t **a6)
{
  float32x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float32x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float32x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float32x2_t v21;
  float64x2_t v22;
  float64x2_t v23;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(a1, a2, a3, a4, a6);
  v12 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
  v13 = vcvtq_f64_f32(vsub_f32(v12, vadd_f32(a5[3], vmul_f32(a5[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v13.f64 = vaddvq_f64(vmulq_f64(v13, v13));
  v14 = vcvtq_f64_f32(vsub_f32(v12, vadd_f32(a4[3], vmul_f32(a4[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v14.f64 = vaddvq_f64(vmulq_f64(v14, v14));
  if (*(float *)v13.f64 < *(float *)v14.f64)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a4, (uint64_t)a5);
    v15 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
    v16 = vcvtq_f64_f32(vsub_f32(v15, vadd_f32(a4[3], vmul_f32(a4[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v16.f64 = vaddvq_f64(vmulq_f64(v16, v16));
    v17 = vcvtq_f64_f32(vsub_f32(v15, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v17.f64 = vaddvq_f64(vmulq_f64(v17, v17));
    if (*(float *)v16.f64 < *(float *)v17.f64)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a3, (uint64_t)a4);
      v18 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
      v19 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
      *(float *)v19.f64 = vaddvq_f64(vmulq_f64(v19, v19));
      v20 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
      *(float *)v20.f64 = vaddvq_f64(vmulq_f64(v20, v20));
      if (*(float *)v19.f64 < *(float *)v20.f64)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a2, (uint64_t)a3);
        v21 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
        v22 = vcvtq_f64_f32(vsub_f32(v21, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
        *(float *)v22.f64 = vaddvq_f64(vmulq_f64(v22, v22));
        v23 = vcvtq_f64_f32(vsub_f32(v21, vadd_f32(a1[3], vmul_f32(a1[4], (float32x2_t)0x3F0000003F000000))));
        *(float *)v23.f64 = vaddvq_f64(vmulq_f64(v23, v23));
        if (*(float *)v22.f64 < *(float *)v23.f64)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(uint64_t a1, uint64_t a2, float32x2_t **a3)
{
  unint64_t v6;
  _BOOL8 result;
  float32x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float32x2_t *v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x2_t v16;
  float32x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  float32x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  uint64_t v28;
  _DWORD *v29;
  float32x2_t v30;
  float32x2_t v31;
  float64x2_t v32;
  _BYTE v33[15];

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
      v9 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(*(float32x2_t *)(a2 - 16), vmul_f32(*(float32x2_t *)(a2 - 8), (float32x2_t)0x3F0000003F000000))));
      *(float *)v9.f64 = vaddvq_f64(vmulq_f64(v9, v9));
      v10 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(*(float32x2_t *)(a1 + 24), vmul_f32(*(float32x2_t *)(a1 + 32), (float32x2_t)0x3F0000003F000000))));
      *(float *)v10.f64 = vaddvq_f64(vmulq_f64(v10, v10));
      if (*(float *)v9.f64 < *(float *)v10.f64)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2 - 40);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), (float32x2_t *)(a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,0>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), (float32x2_t *)(a1 + 120), (float32x2_t *)(a2 - 40), a3);
      return 1;
    default:
      v11 = (float32x2_t *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), a3);
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
    v12.f64[0] = *(float64_t *)(v13 + 32);
    v31 = *(float32x2_t *)(v13 + 24);
    v32 = v12;
    v17 = vadd_f32(v31, vmul_f32(*(float32x2_t *)&v12.f64[0], (float32x2_t)0x3F0000003F000000));
    v18 = vcvtq_f64_f32(vsub_f32(v16, v17));
    v12 = vmulq_f64(v18, v18);
    *(float *)v12.f64 = vaddvq_f64(v12);
    v19 = vcvtq_f64_f32(vsub_f32(v16, vadd_f32(v11[3], vmul_f32(v11[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v19.f64 = vaddvq_f64(vmulq_f64(v19, v19));
    if (*(float *)v12.f64 < *(float *)v19.f64)
    {
      v30 = *(float32x2_t *)v13;
      *(_QWORD *)v33 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)&v33[7] = *(_QWORD *)(v13 + 15);
      v20 = *(_BYTE *)(v13 + 23);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v21 = v14;
      while (1)
      {
        v22 = a1 + v21;
        v23 = (void **)(a1 + v21 + 120);
        if (*(char *)(a1 + v21 + 143) < 0)
          operator delete(*v23);
        *(_OWORD *)v23 = *(_OWORD *)(v22 + 80);
        *(_QWORD *)(a1 + v21 + 136) = *(_QWORD *)(v22 + 96);
        *(_BYTE *)(v22 + 103) = 0;
        *(_BYTE *)(v22 + 80) = 0;
        *(_OWORD *)(v22 + 144) = *(_OWORD *)(v22 + 104);
        if (v21 == -80)
          break;
        v24 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
        v25 = vcvtq_f64_f32(vsub_f32(v24, v17));
        *(float *)v25.f64 = vaddvq_f64(vmulq_f64(v25, v25));
        v26 = a1 + v21;
        v27 = vcvtq_f64_f32(vsub_f32(v24, vadd_f32(*(float32x2_t *)(a1 + v21 + 64), vmul_f32(*(float32x2_t *)(a1 + v21 + 72), (float32x2_t)0x3F0000003F000000))));
        *(float *)v27.f64 = vaddvq_f64(vmulq_f64(v27, v27));
        v21 -= 40;
        if (*(float *)v27.f64 <= *(float *)v25.f64)
        {
          v28 = a1 + v21 + 120;
          v29 = (_DWORD *)(v26 + 104);
          goto LABEL_14;
        }
      }
      v29 = (_DWORD *)(a1 + 24);
      v28 = a1;
LABEL_14:
      if (*(char *)(v28 + 23) < 0)
        operator delete(*(void **)v28);
      *(float32x2_t *)v28 = v30;
      *(_QWORD *)(v28 + 8) = *(_QWORD *)v33;
      *(_QWORD *)(v28 + 15) = *(_QWORD *)&v33[7];
      *(_BYTE *)(v28 + 23) = v20;
      v12.f64[1] = v32.f64[1];
      *v29 = v31.i32[0];
      *(int8x8_t *)(v28 + 28) = vext_s8((int8x8_t)v31, *(int8x8_t *)&v32.f64[0], 4uLL);
      *(_DWORD *)(v28 + 36) = HIDWORD(v32.f64[0]);
      if (++v15 == 8)
        return v13 + 40 == a2;
    }
    v11 = (float32x2_t *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
}

void sub_1C28888E8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, os_signpost_id_t spid, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, NSObject *log, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;
  std::exception_ptr v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  if (a2)
  {
    MEMORY[0x1C3BC5A3C](v57);
    std::iostream::~basic_iostream();
    MEMORY[0x1C3BC5BC8](v58);
    __cxa_begin_catch(a1);
    if (a14 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
    {
      LOWORD(STACK[0x4D0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, log, OS_SIGNPOST_INTERVAL_END, spid, "AssetLoad", " enableTelemetry=YES ", (uint8_t *)&STACK[0x4D0], 2u);
    }
    std::current_exception();
    v60.__ptr_ = &a51;
    std::rethrow_exception(v60);
    sub_1C2889200(v61, v62, v63, v64, v65, v66, v67, v68, a9, spid, a11, a12, a13, a14, a15, a16, a17, log, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28.__ptr_,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49);
  }
  _Unwind_Resume(a1);
}

void sub_1C2889204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::exception_ptr a51)
{
  if (a2)
  {
    std::exception_ptr::~exception_ptr(&a51);
    __cxa_end_catch();
    JUMPOUT(0x1C2889218);
  }
  _Unwind_Resume(a1);
}

void sub_1C28892D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1C28897C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::vector<marrs::qr::orchestration::QRHypothesis>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRHypothesis*,marrs::qr::orchestration::QRHypothesis*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  _QWORD v17[3];
  char v18;
  char *v19;
  char *v20;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[56 * v9];
    v19 = v7;
    v20 = v7;
    v17[0] = v6 + 2;
    v17[1] = &v19;
    v17[2] = &v20;
    v18 = 0;
    if (a2 != a3)
    {
      v10 = a2 + 1;
      v11 = v7;
      do
      {
        *(_OWORD *)v11 = *(v10 - 1);
        v12 = (std::string *)(v11 + 16);
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
          v14 = v20;
        }
        else
        {
          v13 = *v10;
          *((_QWORD *)v11 + 4) = *((_QWORD *)v10 + 2);
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          v14 = v11;
        }
        v15 = v10 - 1;
        v16 = *((_QWORD *)v10 + 3);
        *((_DWORD *)v11 + 12) = *((_DWORD *)v10 + 8);
        *((_QWORD *)v11 + 5) = v16;
        v11 = v14 + 56;
        v20 = v14 + 56;
        v10 = (__int128 *)((char *)v10 + 56);
      }
      while ((__int128 *)((char *)v15 + 56) != a3);
      v8 = v14 + 56;
    }
    v18 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::orchestration::QRHypothesis>,marrs::qr::orchestration::QRHypothesis*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
    v6[1] = v8;
  }
  return result;
}

void sub_1C2889B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::SpanTypeFilter::filterEntities(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 v7;
  const sirinluexternal::UsoGraph *v8;
  NSObject *v9;
  std::string *v10;
  void *v11;
  const void *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  const void *v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;
  std::string *p_buf;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  NSObject *v28;
  std::string *v29;
  int v30;
  const void *v31;
  siri::ontology::UsoEntityNode *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  std::string::size_type v38;
  uint64_t v39;
  BOOL v40;
  _BOOL4 v41;
  NSObject *v42;
  std::string *p_p;
  siri::ontology::UsoGraph *v44;
  uint64_t v45;
  std::vector<std::string>::pointer end;
  __int128 v47;
  std::string *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v54;
  uint64_t v55;
  size_t v56;
  std::string::size_type size;
  int v58;
  std::string *v59;
  void **p_s1;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  char v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  _BYTE v90[64];
  const sirinluexternal::UsoGraph *v91;
  std::string __p;
  char v93;
  std::vector<std::string> v94;
  siri::ontology::UsoGraph *v95;
  void *v96;
  _QWORD *v97;
  std::string buf;
  char v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  uint64_t v105;
  void *v106;
  char v107;
  void *__s1;
  size_t __n;
  unsigned __int8 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v17 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C281A000, v17, OS_LOG_TYPE_INFO, "Empty MRR Entities in the input", (uint8_t *)&buf, 2u);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    v18 = 0;
    goto LABEL_195;
  }
  memset(&v94, 0, sizeof(v94));
  if (!*(_QWORD *)(a2 + 64))
    goto LABEL_106;
  MEMORY[0x1C3BC54C0](v90, a2);
  v6 = MRRLoggerForCategory(2);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v7)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C281A000, v6, OS_LOG_TYPE_INFO, "Extract entity type from span", (uint8_t *)&buf, 2u);
  }
  v8 = v91;
  marrs::mrr::mr::getUsoGraphProtoReader((marrs::mrr::mr *)v7);
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&marrs::mrr::mr::getUsoGraphProtoReader(void)::inst, v8);
  v9 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    siri::ontology::UsoGraph::prettyPrint(v95);
    v10 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v112) = 136315138;
    *(_QWORD *)((char *)&v112 + 4) = v10;
    _os_log_impl(&dword_1C281A000, v9, OS_LOG_TYPE_DEBUG, "Develop: %s", (uint8_t *)&v112, 0xCu);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  siri::ontology::UsoGraph::getSuccessors();
  v11 = (void *)buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0] != buf.__r_.__value_.__l.__size_)
  {
    v12 = *(const void **)buf.__r_.__value_.__l.__data_;
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf.__r_.__value_.__l.__data_ + 16))(*(_QWORD *)buf.__r_.__value_.__l.__data_);
    if (v13 == 1)
    {
      siri::ontology::UsoGraph::getSuccessors();
      if (buf.__r_.__value_.__r.__words[0] != buf.__r_.__value_.__l.__size_)
      {
        if (*((_QWORD *)&v112 + 1) == (_QWORD)v112)
          std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
        v19 = *(const void **)v112;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v112 + 16))(*(_QWORD *)v112) == 2)
        {
          if (!v20)
            __cxa_bad_cast();
          v15 = v20;
          if ((_QWORD)v112)
          {
            *((_QWORD *)&v112 + 1) = v112;
            operator delete((void *)v112);
          }
          goto LABEL_16;
        }
      }
      if ((_QWORD)v112)
      {
        *((_QWORD *)&v112 + 1) = v112;
        operator delete((void *)v112);
      }
    }
    else if (v13 == 2)
    {
      if (!v14)
        __cxa_bad_cast();
      v15 = v14;
LABEL_16:
      v16 = 1;
      goto LABEL_31;
    }
    v16 = 0;
    v15 = 0;
LABEL_31:
    v11 = (void *)buf.__r_.__value_.__r.__words[0];
    if (!buf.__r_.__value_.__r.__words[0])
      goto LABEL_33;
    goto LABEL_32;
  }
  v16 = 0;
  v15 = 0;
  if (buf.__r_.__value_.__r.__words[0])
  {
LABEL_32:
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    operator delete(v11);
  }
LABEL_33:
  if (!v16)
  {
    v30 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v93 = 0;
    goto LABEL_87;
  }
  siri::ontology::oname::graph::ontology_init::common_AppEntityType((siri::ontology::oname::graph::ontology_init *)v11);
  if (siri::ontology::operator!=())
  {
    v21 = v15[3];
    if (*(char *)(v21 + 31) >= 0)
      v22 = *(unsigned __int8 *)(v21 + 31);
    else
      v22 = *(_QWORD *)(v21 + 16);
    std::string::basic_string[abi:ne180100]((uint64_t)&buf, v22 + 49);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (v22)
    {
      v26 = *(char **)(v21 + 8);
      v25 = (char *)(v21 + 8);
      v24 = v26;
      if (v25[23] >= 0)
        v27 = v25;
      else
        v27 = v24;
      memmove(p_buf, v27, v22);
    }
    strcpy((char *)p_buf + v22, ": Unsupported entityType for reference resolution");
    v28 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      v29 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v29 = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v112) = 136315138;
      *(_QWORD *)((char *)&v112 + 4) = v29;
      _os_log_impl(&dword_1C281A000, v28, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v112, 0xCu);
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    v93 = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v30 = 0;
    goto LABEL_87;
  }
  siri::ontology::UsoGraph::getSuccessors();
  if ((_QWORD)v112 == *((_QWORD *)&v112 + 1)
    || (v31 = *(const void **)v112,
        (*(unsigned int (**)(_QWORD))(**(_QWORD **)v112 + 16))(*(_QWORD *)v112) != 3))
  {
LABEL_84:
    v30 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v93 = 0;
    goto LABEL_85;
  }
  if (!v32)
    __cxa_bad_cast();
  siri::ontology::UsoEntityNode::getIdentifiers(v32);
  v34 = v96;
  v33 = v97;
  if (v96 == v97)
  {
LABEL_82:
    if (v34)
    {
      v97 = v34;
      operator delete(v34);
    }
    goto LABEL_84;
  }
  while (1)
  {
    v35 = *v34;
    buf.__r_.__value_.__s.__data_[0] = 0;
    v99 = 0;
    v36 = *(unsigned __int8 *)(v35 + 72);
    if (!*(_BYTE *)(v35 + 72))
      goto LABEL_80;
    if (*(char *)(v35 + 71) < 0)
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v35 + 48), *(_QWORD *)(v35 + 56));
    else
      buf = *(std::string *)(v35 + 48);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_ != 15)
      {
        v41 = 0;
        if (!v36)
          break;
        goto LABEL_76;
      }
      v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 15)
        goto LABEL_80;
      v37 = &buf;
    }
    v38 = v37->__r_.__value_.__r.__words[0];
    v39 = *(std::string::size_type *)((char *)v37->__r_.__value_.__r.__words + 7);
    v40 = v38 == 0x69746E655F707061 && v39 == 0x657079745F797469;
    v41 = v40;
    if (!v36)
      break;
LABEL_76:
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      break;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v41)
      goto LABEL_198;
LABEL_80:
    if (++v34 == v33)
    {
      v34 = v96;
      goto LABEL_82;
    }
  }
  if (!v41)
    goto LABEL_80;
LABEL_198:
  if (*(char *)(v35 + 23) < 0)
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v35, *(_QWORD *)(v35 + 8));
  else
    buf = *(std::string *)v35;
  __p = buf;
  v93 = 1;
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  v30 = 1;
LABEL_85:
  if ((_QWORD)v112)
  {
    *((_QWORD *)&v112 + 1) = v112;
    operator delete((void *)v112);
  }
LABEL_87:
  v42 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (!v30)
      p_p = (std::string *)"entityType not generated from USO Graph";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_impl(&dword_1C281A000, v42, OS_LOG_TYPE_INFO, "entityType from USOGraph - %s", (uint8_t *)&buf, 0xCu);
  }
  v44 = v95;
  v95 = 0;
  if (v44)
  {
    v45 = MEMORY[0x1C3BC57FC]();
    MEMORY[0x1C3BC5C7C](v45, 0x10A0C403D23BABBLL);
  }
  MEMORY[0x1C3BC54D8](v90);
  if (v93)
  {
    end = v94.__end_;
    if (v94.__end_ >= v94.__end_cap_.__value_)
    {
      v48 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(&v94, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v94.__end_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v94.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v47;
      }
      v48 = end + 1;
    }
    v94.__end_ = v48;
    if (v93)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v4 = *a1;
  v5 = a1[1];
LABEL_106:
  if (v5 == v4)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    v49 = 0;
    v68 = 0;
    v81 = 0uLL;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v86 = a3;
    do
    {
      marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&buf, (const marrs::mrr::mr::MRREntity *)(v4 + 216 * v52));
      begin = v94.__begin_;
      v54 = v94.__end_;
      while (begin != v54)
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        else
          __p = *begin;
        v55 = v110;
        if ((v110 & 0x80u) == 0)
          v56 = v110;
        else
          v56 = __n;
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v58 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (v56 == size)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v59 = &__p;
          else
            v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((v110 & 0x80) != 0)
          {
            if (!memcmp(__s1, v59, __n))
            {
LABEL_132:
              if ((unint64_t)v50 >= v51)
              {
                v61 = v50 - v49;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 61)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v51 - (_QWORD)v49) >> 2 > v62)
                  v62 = (uint64_t)(v51 - (_QWORD)v49) >> 2;
                if (v51 - (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                  v63 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v63 = v62;
                if (v63)
                  v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
                else
                  v64 = 0;
                v65 = (unint64_t *)(v63 + 8 * v61);
                *v65 = v52;
                v66 = v65 + 1;
                while (v50 != v49)
                {
                  v67 = *--v50;
                  *--v65 = v67;
                }
                v51 = v63 + 8 * v64;
                if (v49)
                  operator delete(v49);
                v49 = v65;
                v50 = v66;
              }
              else
              {
                *v50++ = v52;
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              break;
            }
          }
          else
          {
            if (!v110)
              goto LABEL_132;
            p_s1 = &__s1;
            while (*(unsigned __int8 *)p_s1 == v59->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (void **)((char *)p_s1 + 1);
              v59 = (std::string *)((char *)v59 + 1);
              if (!--v55)
                goto LABEL_132;
            }
          }
        }
        if (v58 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++begin;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if ((char)v110 < 0)
        operator delete(__s1);
      if (v107 < 0)
        operator delete(v106);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v104 < 0)
        operator delete(v103);
      if (v102 < 0)
        operator delete(v101);
      if (v100 < 0)
        operator delete((void *)buf.__r_.__value_.__l.__size_);
      ++v52;
      v4 = *a1;
    }
    while (v52 < 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3));
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (v49 == v50)
    {
      v68 = 0;
      v81 = 0uLL;
      a3 = v86;
    }
    else
    {
      v68 = 0;
      v87 = 0u;
      v69 = v49;
      do
      {
        v70 = *v69;
        if (0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3) <= *v69)
          std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
        if (*(_DWORD *)(*a1 + 216 * v70) == 5)
        {
          v71 = *((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1) >= v68)
          {
            v73 = (void *)v87;
            v74 = (uint64_t)(*((_QWORD *)&v87 + 1) - v87) >> 3;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v68 - v87) >> 2 > v75)
              v75 = (uint64_t)(v68 - v87) >> 2;
            if (v68 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            if (v76)
              v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v76);
            else
              v77 = 0;
            v78 = (unint64_t *)(v76 + 8 * v74);
            *v78 = v70;
            v72 = (uint64_t)(v78 + 1);
            while (v71 != (_QWORD)v87)
            {
              v79 = *(_QWORD *)(v71 - 8);
              v71 -= 8;
              *--v78 = v79;
            }
            v68 = v76 + 8 * v77;
            *(_QWORD *)&v87 = v78;
            if (v73)
              operator delete(v73);
          }
          else
          {
            **((_QWORD **)&v87 + 1) = v70;
            v72 = *((_QWORD *)&v87 + 1) + 8;
          }
          *(_QWORD *)&v80 = v87;
          *((_QWORD *)&v80 + 1) = v72;
          v87 = v80;
        }
        ++v69;
      }
      while (v69 != v50);
      a3 = v86;
      v81 = v87;
    }
  }
  v82 = v81;
  v88 = v81;
  v83 = *((_QWORD *)&v81 + 1);
  if ((_QWORD)v81 == *((_QWORD *)&v81 + 1))
  {
    v85 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v84 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (v83 - v82) >> 3;
      _os_log_impl(&dword_1C281A000, v84, OS_LOG_TYPE_INFO, "[RulebasedMR] - span type filter matched  - %lu", (uint8_t *)&buf, 0xCu);
    }
    *(_OWORD *)a3 = v88;
    *(_QWORD *)(a3 + 16) = v68;
    v85 = 1;
    *(_QWORD *)&v88 = 0;
  }
  *(_BYTE *)(a3 + 24) = v85;
  if (v49)
    operator delete(v49);
  v18 = (void *)v88;
LABEL_195:
  if (v18)
    operator delete(v18);
}

void sub_1C288A720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  v47 = *(void **)(v45 - 128);
  if (v47)
  {
    *(_QWORD *)(v45 - 120) = v47;
    operator delete(v47);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a35);
  MEMORY[0x1C3BC54D8](&a13);
  a24 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::SpanTypeFilter::~SpanTypeFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

void RuleBasedRepetitionPredictor::Predict(uint64_t *a1, uint64_t *a2, char **a3, uint64_t *a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  NSObject *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  uint64_t i;
  unsigned __int8 *v41;
  unsigned __int8 **v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  NSObject *v48;
  char **v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char **v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  size_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  char **v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char **v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  size_t v98;
  char *v99;
  char *v100;
  char *v101;
  __int128 v102;
  char *v103;
  char *v104;
  size_t v105;
  _QWORD *v106;
  uint64_t v107;
  char **v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char **v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  size_t v123;
  char *v124;
  char *v125;
  char *v126;
  __int128 v127;
  char *v128;
  char *v129;
  size_t v130;
  char **v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  float *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  unint64_t v153;
  unint64_t v154;
  std::string::size_type v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int *v168;
  NSObject *v169;
  char *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  _BYTE *v181;
  _BYTE *v182;
  unint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int *v194;
  float *v195;
  unsigned int v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  float *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206;
  char *v207;
  char *v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  int v219;
  char *v220;
  char *v221;
  unint64_t v222;
  unint64_t v223;
  unsigned int v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  int v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  char *v237;
  void **v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  char *v285;
  float *v286;
  unint64_t v287;
  float *v288;
  unsigned int v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  int v310;
  int v311;
  unsigned int v312;
  __int32 v313;
  float v314;
  __int128 v315;
  size_t v316;
  __int32 *v317;
  __int32 *v318;
  unint64_t v319;
  __int32 v320;
  _BYTE *v321;
  __int32 *v322;
  size_t v323;
  __int32 *v324;
  __int32 *v325;
  uint64_t v326;
  float v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  char *v332;
  char *v333;
  __int128 v334;
  char *v335;
  uint64_t v336;
  float *v337;
  float *v338;
  float v339;
  unint64_t v340;
  char *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _DWORD *v350;
  int v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  unint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  _DWORD *v363;
  int v364;
  unint64_t v365;
  char *v366;
  unint64_t v367;
  char *v368;
  char *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  _DWORD *v375;
  int v376;
  int64_t v377;
  char v378;
  std::string *v379;
  int v380;
  void *v381;
  std::string *v382;
  int64_t size;
  float v384;
  NSObject *v385;
  __int128 *v386;
  NSObject *v387;
  char *v388;
  int v389;
  std::string *v390;
  int64_t v391;
  char *v392;
  char *v393;
  _QWORD *v394;
  _QWORD *v395;
  NSObject *v396;
  _QWORD *exception;
  NSObject *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v411;
  unsigned int v412;
  unint64_t v414;
  char *v415;
  uint64_t *v416;
  float *v417;
  float *v418;
  char **v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  char *v428;
  char *v429;
  void *__p;
  void *v431;
  uint64_t v432;
  std::string v433;
  void *v434;
  char *v435;
  char *v436;
  void *v437;
  char *v438;
  char *v439;
  uint64_t **v440;
  char *v441;
  char *v442;
  float v443;
  std::string v444;
  __int128 v445;
  uint64_t v446;
  __int128 buf;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;

  v451 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a7 + 24) = *(_QWORD *)(a7 + 16);
  v8 = a1[1] - *a1;
  if (v8)
  {
    v10 = a2[1];
    v11 = v10 - *a2;
    if (v10 != *a2 && v8 == a3[1] - *a3 && v11 == a4[1] - *a4)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      buf = 0uLL;
      v448 = 0;
      std::vector<BOOL>::__vallocate[abi:ne180100](&buf, v14);
      v15 = *((_QWORD *)&buf + 1);
      v16 = *((_QWORD *)&buf + 1) + v14;
      *((_QWORD *)&buf + 1) += v14;
      v416 = a4;
      v419 = a3;
      v400 = a7;
      v402 = a2;
      if (v15)
      {
        v17 = v16 - 1;
        if (((v16 - 1) ^ (v15 - 1)) <= 0x3F)
        {
          v18 = (char *)buf;
LABEL_16:
          v22 = &v18[8 * (v15 >> 6)];
          if ((v15 & 0x3F) != 0)
          {
            if (64 - (v15 & 0x3F) >= v14)
              v23 = v14;
            else
              v23 = 64 - (v15 & 0x3F);
            *(_QWORD *)v22 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v15 & 0x3Fu) - v23)) & (-1 << v15));
            v22 += 8;
            v24 = v14 - v23;
          }
          else
          {
            v24 = v14;
          }
          v25 = v24 >> 6;
          if (v24 >= 0x40)
            bzero(v22, 8 * v25);
          if ((v24 & 0x3F) != 0)
            *(_QWORD *)&v22[8 * v25] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
          v26 = v11 / 24;
          v427 = 0;
          v428 = 0;
          v429 = 0;
          v440 = (uint64_t **)&v427;
          LOBYTE(v441) = 0;
          if ((unint64_t)(v11 + 23) >= 0x2F)
          {
            if (v26 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v27 = 24 * v26;
            v28 = (char *)operator new(24 * v26);
            v427 = v28;
            v428 = v28;
            v29 = &v28[24 * v26];
            v429 = v29;
            do
            {
              std::vector<BOOL>::vector(v28, (uint64_t)&buf);
              v28 += 24;
              v27 -= 24;
            }
            while (v27);
            v428 = v29;
          }
          if (v18)
            operator delete(v18);
          v30 = 0;
          if (v14 <= 1)
            v31 = 1;
          else
            v31 = v14;
          if (v26 <= 1)
            v32 = 1;
          else
            v32 = v26;
          v404 = v32;
          v406 = v14;
          do
          {
            v33 = 0;
            v34 = *a1;
            v408 = v30;
            v35 = 3 * v30;
            v36 = *v402 + 8 * v35;
            v37 = &v427[8 * v35];
            v38 = v406;
            do
            {
              if (v38 >= v26)
              {
                if (!v26)
                  goto LABEL_61;
                v39 = 0;
                for (i = 0; i != v26; v39 = ++i >= v26)
                {
                  v41 = (unsigned __int8 *)(v34 + 24 * v33 + 24 * i);
                  v42 = (unsigned __int8 **)(v36 + 24 * i);
                  v43 = v41[23];
                  if ((v43 & 0x80u) == 0)
                    v44 = (unsigned __int8 *)v41[23];
                  else
                    v44 = (unsigned __int8 *)*((_QWORD *)v41 + 1);
                  v45 = (unsigned __int8 *)*((unsigned __int8 *)v42 + 23);
                  v46 = (char)v45;
                  if ((char)v45 < 0)
                    v45 = v42[1];
                  if (v44 != v45)
                    break;
                  if (v46 >= 0)
                    v47 = (unsigned __int8 *)(v36 + 24 * i);
                  else
                    v47 = *v42;
                  if ((v43 & 0x80) != 0)
                  {
                    if (memcmp(*(const void **)v41, v47, *((_QWORD *)v41 + 1)))
                      break;
                  }
                  else if (v41[23])
                  {
                    while (*v41 == *v47)
                    {
                      ++v41;
                      ++v47;
                      if (!--v43)
                        goto LABEL_59;
                    }
                    break;
                  }
LABEL_59:
                  ;
                }
                if (v39)
LABEL_61:
                  *(_QWORD *)(*(_QWORD *)v37 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
              }
              ++v33;
              --v38;
            }
            while (v33 != v31);
            v30 = v408 + 1;
            --v26;
          }
          while (v408 + 1 != v404);
          v48 = QRLoggerForCategory(0);
          v50 = v416;
          v49 = v419;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = "computeMatches";
            _os_log_debug_impl(&dword_1C281A000, v48, OS_LOG_TYPE_DEBUG, "%s Token Matching completed", (uint8_t *)&buf, 0xCu);
          }
          v424 = 0;
          v425 = 0;
          v426 = 0;
          v421 = 0;
          v422 = 0;
          v423 = 0;
          v52 = *v416;
          v51 = v416[1];
          if (v428 - v427 != v51 - *v416)
          {
            v396 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 136315138;
              *(_QWORD *)((char *)&buf + 4) = "alignmentMatrix";
              _os_log_error_impl(&dword_1C281A000, v396, OS_LOG_TYPE_ERROR, "%s [ERR]: Number of rows in matches does NOT match with number of words in turn 2", (uint8_t *)&buf, 0xCu);
            }
            exception = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(&buf, "Mismatch between size of matches and words in turn2");
            std::string::basic_string[abi:ne180100]<0>(&v440, "QueryRewrite");
            InferenceError::InferenceError(exception, (uint64_t)&buf, (uint64_t)&v440, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Tools/inc/AlignmentTools.hpp", 325);
          }
          v425 = 0;
          v422 = 0;
          v53 = v419[1];
          v54 = v53 - *v419;
          if (v53 == *v419 || v51 == v52)
          {
            v169 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf) = 136315138;
              *(_QWORD *)((char *)&buf + 4) = "alignmentMatrix";
              _os_log_debug_impl(&dword_1C281A000, v169, OS_LOG_TYPE_DEBUG, "%s No words in turn1 and/or turn2", (uint8_t *)&buf, 0xCu);
            }
            goto LABEL_273;
          }
          v55 = 0xAAAAAAAAAAAAAAABLL * (v54 >> 3);
          if (*((_QWORD *)v427 + 1) != v55)
          {
            v398 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v398, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 136315138;
              *(_QWORD *)((char *)&buf + 4) = "alignmentMatrix";
              _os_log_error_impl(&dword_1C281A000, v398, OS_LOG_TYPE_ERROR, "%s [ERR]: Number of columns in matches does NOT match with number of words in turn 1", (uint8_t *)&buf, 0xCu);
            }
            v399 = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(&buf, "Mismatch between size of matches and words in turn2");
            std::string::basic_string[abi:ne180100]<0>(&v440, "QueryRewrite");
            InferenceError::InferenceError(v399, (uint64_t)&buf, (uint64_t)&v440, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Tools/inc/AlignmentTools.hpp", 337);
          }
          v440 = 0;
          v441 = 0;
          v442 = 0;
          v437 = 0;
          v438 = 0;
          v439 = 0;
          v434 = 0;
          v435 = 0;
          v436 = 0;
          v445 = 0uLL;
          v446 = 0;
          memset(&v444, 0, sizeof(v444));
          memset(&v433, 0, sizeof(v433));
          __p = 0;
          v431 = 0;
          v432 = 0;
          if (v55 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v56 = (char *)operator new(v54);
          v57 = (v54 - 24) / 0x18uLL;
          bzero(v56, 24 * v57 + 24);
          v440 = (uint64_t **)v56;
          v441 = &v56[24 * v57 + 24];
          v442 = &v56[8 * (v54 >> 3)];
          v58 = (char *)operator new(v54);
          bzero(v58, 24 * v57 + 24);
          v437 = v58;
          v438 = &v58[24 * v57 + 24];
          v439 = &v58[8 * (v54 >> 3)];
          v59 = (char *)operator new(v54);
          v60 = 24 * v57 + 24;
          bzero(v59, v60);
          v61 = 0;
          v434 = v59;
          v435 = &v59[v60];
          v436 = &v59[8 * (v54 >> 3)];
          while (1)
          {
            v62 = (char *)&v440[3 * v61];
            v63 = v50[1] - *v50;
            v64 = (char **)(v62 + 8);
            v65 = (char *)*((_QWORD *)v62 + 1);
            v66 = 0xAAAAAAAAAAAAAAABLL * (v63 >> 3);
            v67 = *(_QWORD *)v62;
            v68 = (uint64_t)&v65[-*(_QWORD *)v62];
            v69 = 0xAAAAAAAAAAAAAAABLL * (v68 >> 3);
            if (v66 <= v69)
            {
              if (v66 < v69)
              {
                v80 = (char *)(v67 + 8 * (v63 >> 3));
                while (v65 != v80)
                {
                  v65 -= 24;
                  *(_QWORD *)&buf = v65;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                }
                *v64 = v80;
              }
            }
            else
            {
              v70 = (char *)&v440[3 * v61];
              v73 = *((_QWORD *)v70 + 2);
              v71 = v70 + 16;
              v72 = v73;
              if (0xAAAAAAAAAAAAAAABLL * ((v73 - (uint64_t)v65) >> 3) >= v66 - v69)
              {
                bzero(v65, 24 * ((v63 - v68 - 24) / 0x18uLL) + 24);
                *v64 = &v65[24 * ((v63 - v68 - 24) / 0x18uLL) + 24];
              }
              else
              {
                if (v66 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v450 = v71;
                v74 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v67) >> 3);
                if (2 * v74 > v66)
                  v66 = 2 * v74;
                if (v74 >= 0x555555555555555)
                  v75 = 0xAAAAAAAAAAAAAAALL;
                else
                  v75 = v66;
                v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v75);
                v77 = &v76[8 * (v68 >> 3)];
                *(_QWORD *)&buf = v76;
                *((_QWORD *)&buf + 1) = v77;
                v449 = &v76[24 * v78];
                v79 = 24 * ((v63 - v68 - 24) / 0x18uLL) + 24;
                bzero(v77, v79);
                v448 = &v77[v79];
                std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v62, &buf);
                std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&buf);
              }
            }
            v81 = (char *)v437 + 24 * v61;
            v50 = v416;
            v82 = v416[1] - *v416;
            v83 = (char **)(v81 + 1);
            v84 = (char *)v81[1];
            v85 = 0xAAAAAAAAAAAAAAABLL * (v82 >> 3);
            v86 = (char *)*v81;
            v87 = (uint64_t)&v84[-*v81];
            v88 = 0xAAAAAAAAAAAAAAABLL * (v87 >> 3);
            if (v85 <= v88)
            {
              if (v85 < v88)
              {
                v104 = &v86[8 * (v82 >> 3)];
                while (v84 != v104)
                {
                  v84 -= 24;
                  *(_QWORD *)&buf = v84;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                }
                *v83 = v104;
              }
            }
            else
            {
              v89 = (char *)v437 + 24 * v61;
              v92 = *((_QWORD *)v89 + 2);
              v91 = (char **)(v89 + 16);
              v90 = v92;
              if (0xAAAAAAAAAAAAAAABLL * ((v92 - (uint64_t)v84) >> 3) >= v85 - v88)
              {
                v105 = 24 * ((v82 - v87 - 24) / 0x18uLL) + 24;
                bzero(v84, v105);
                *v83 = &v84[v105];
                goto LABEL_112;
              }
              if (v85 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v93 = 0xAAAAAAAAAAAAAAABLL * ((v90 - (uint64_t)v86) >> 3);
              if (2 * v93 > v85)
                v85 = 2 * v93;
              if (v93 >= 0x555555555555555)
                v94 = 0xAAAAAAAAAAAAAAALL;
              else
                v94 = v85;
              if (v94 > 0xAAAAAAAAAAAAAAALL)
LABEL_461:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v95 = (char *)operator new(24 * v94);
              v96 = &v95[8 * (v87 >> 3)];
              v97 = &v95[24 * v94];
              v98 = 24 * ((v82 - v87 - 24) / 0x18uLL) + 24;
              bzero(v96, v98);
              v99 = &v96[v98];
              v100 = *v83;
              v101 = (char *)*v81;
              if (*v83 == (char *)*v81)
              {
                *v81 = v96;
                *v83 = v99;
                *v91 = v97;
LABEL_110:
                v50 = v416;
                if (!v100)
                  goto LABEL_112;
LABEL_111:
                operator delete(v100);
                goto LABEL_112;
              }
              do
              {
                *((_QWORD *)v96 - 3) = 0;
                *((_QWORD *)v96 - 2) = 0;
                v96 -= 24;
                *((_QWORD *)v96 + 2) = 0;
                v102 = *(_OWORD *)(v100 - 24);
                v100 -= 24;
                *(_OWORD *)v96 = v102;
                *((_QWORD *)v96 + 2) = *((_QWORD *)v100 + 2);
                *(_QWORD *)v100 = 0;
                *((_QWORD *)v100 + 1) = 0;
                *((_QWORD *)v100 + 2) = 0;
              }
              while (v100 != v101);
              v103 = (char *)*v81;
              v100 = *v83;
              *v81 = v96;
              *v83 = v99;
              *v91 = v97;
              if (v100 == v103)
                goto LABEL_110;
              v50 = v416;
              do
              {
                v100 -= 24;
                *(_QWORD *)&buf = v100;
                std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              }
              while (v100 != v103);
              v100 = v103;
              if (v103)
                goto LABEL_111;
            }
LABEL_112:
            v106 = (char *)v434 + 24 * v61;
            v107 = v50[1] - *v50;
            v108 = (char **)(v106 + 1);
            v109 = (char *)v106[1];
            v110 = 0xAAAAAAAAAAAAAAABLL * (v107 >> 3);
            v111 = (char *)*v106;
            v112 = (uint64_t)&v109[-*v106];
            v113 = 0xAAAAAAAAAAAAAAABLL * (v112 >> 3);
            if (v110 <= v113)
            {
              if (v110 < v113)
              {
                v129 = &v111[8 * (v107 >> 3)];
                while (v109 != v129)
                {
                  v109 -= 24;
                  *(_QWORD *)&buf = v109;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                }
                *v108 = v129;
              }
              goto LABEL_137;
            }
            v114 = (char *)v434 + 24 * v61;
            v117 = *((_QWORD *)v114 + 2);
            v116 = (char **)(v114 + 16);
            v115 = v117;
            if (0xAAAAAAAAAAAAAAABLL * ((v117 - (uint64_t)v109) >> 3) >= v110 - v113)
            {
              v130 = 24 * ((v107 - v112 - 24) / 0x18uLL) + 24;
              bzero(v109, v130);
              *v108 = &v109[v130];
            }
            else
            {
              if (v110 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v118 = 0xAAAAAAAAAAAAAAABLL * ((v115 - (uint64_t)v111) >> 3);
              if (2 * v118 > v110)
                v110 = 2 * v118;
              if (v118 >= 0x555555555555555)
                v119 = 0xAAAAAAAAAAAAAAALL;
              else
                v119 = v110;
              if (v119 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_461;
              v120 = (char *)operator new(24 * v119);
              v121 = &v120[8 * (v112 >> 3)];
              v122 = &v120[24 * v119];
              v123 = 24 * ((v107 - v112 - 24) / 0x18uLL) + 24;
              bzero(v121, v123);
              v124 = &v121[v123];
              v125 = *v108;
              v126 = (char *)*v106;
              if (*v108 == (char *)*v106)
              {
                *v106 = v121;
                *v108 = v124;
                *v116 = v122;
              }
              else
              {
                do
                {
                  *((_QWORD *)v121 - 3) = 0;
                  *((_QWORD *)v121 - 2) = 0;
                  v121 -= 24;
                  *((_QWORD *)v121 + 2) = 0;
                  v127 = *(_OWORD *)(v125 - 24);
                  v125 -= 24;
                  *(_OWORD *)v121 = v127;
                  *((_QWORD *)v121 + 2) = *((_QWORD *)v125 + 2);
                  *(_QWORD *)v125 = 0;
                  *((_QWORD *)v125 + 1) = 0;
                  *((_QWORD *)v125 + 2) = 0;
                }
                while (v125 != v126);
                v128 = (char *)*v106;
                v125 = *v108;
                *v106 = v121;
                *v108 = v124;
                *v116 = v122;
                if (v125 != v128)
                {
                  v50 = v416;
                  do
                  {
                    v125 -= 24;
                    *(_QWORD *)&buf = v125;
                    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  }
                  while (v125 != v128);
                  v125 = v128;
                  if (!v128)
                    goto LABEL_137;
LABEL_136:
                  operator delete(v125);
                  goto LABEL_137;
                }
              }
              v50 = v416;
              if (v125)
                goto LABEL_136;
            }
LABEL_137:
            if (++v61 >= 0xAAAAAAAAAAAAAAABLL * ((v419[1] - *v419) >> 3))
            {
              computeAlignmentMatrix<unsigned int>(*v419, *v50, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, 0.0, 0.0, 0, 0, *v440, *(uint64_t **)v437, *(uint64_t **)v434);
              v131 = v419;
              v132 = *v419;
              if (v419[1] - *v419 != 24)
              {
                v133 = 0;
                LODWORD(v134) = 0;
                v135 = v445;
                do
                {
                  v136 = (uint64_t *)&v132[24 * v133];
                  v138 = *v136;
                  v137 = v136[1];
                  *((_QWORD *)&v445 + 1) = v135;
                  std::vector<float>::resize(&v444.__r_.__value_.__l.__data_, -1 - 0x5555555555555555 * ((v440[3 * v133][1] - *v440[3 * v133]) >> 3));
                  v139 = v440[3 * v133];
                  v140 = *v139;
                  v141 = -1 - 0x5555555555555555 * ((v139[1] - *v139) >> 3);
                  if (v141)
                  {
                    v142 = (_DWORD *)v444.__r_.__value_.__r.__words[0];
                    v143 = (uint64_t *)(v140 + 32);
                    do
                    {
                      v144 = *v143;
                      v143 += 3;
                      *v142++ = *(_DWORD *)(v144 - 4);
                      --v141;
                    }
                    while (v141);
                  }
                  v433.__r_.__value_.__l.__size_ = v433.__r_.__value_.__r.__words[0];
                  std::vector<float>::resize((char **)&__p, -1- 0x5555555555555555* ((uint64_t)(*(_QWORD *)(*((_QWORD *)v434 + 3 * v133) + 8) - **((_QWORD **)v434 + 3 * v133)) >> 3));
                  v145 = (char *)v434;
                  v146 = **((_QWORD **)v434 + 3 * v133);
                  v147 = -1 - 0x5555555555555555 * ((*(_QWORD *)(*((_QWORD *)v434 + 3 * v133) + 8) - v146) >> 3);
                  if (v147)
                  {
                    v148 = (float *)__p;
                    v149 = (uint64_t *)(v146 + 32);
                    do
                    {
                      v150 = *v149;
                      v149 += 3;
                      *v148++ = (float)*(unsigned int *)(v150 - 4);
                      --v147;
                    }
                    while (v147);
                  }
                  v134 = v134 + ((unint64_t)(v137 - v138) >> 2);
                  v151 = 24 * v133;
                  v152 = *(float *)(*(_QWORD *)(*v440[3 * v133++] + 8) - 4);
                  computeAlignmentMatrix<unsigned int>(&(*v419)[v151 + 24], *v50, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, v152, (float)*(unsigned int *)(*(_QWORD *)(v146 + 8) - 4), v134 << 32, ((*(_QWORD *)(*(_QWORD *)v427 + ((v133 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v133) & 1) == 0, v440[(unint64_t)v151 / 8 + 3], *(uint64_t **)((char *)v437 + v151 + 24), *(uint64_t **)&v145[v151 + 24]);
                  removeFirstColumn<float>(v440[3 * v133]);
                  removeFirstColumn<std::pair<unsigned int,unsigned int>>(**((_QWORD **)v437 + 3 * v133), *(_QWORD *)(*((_QWORD *)v437 + 3 * v133) + 8));
                  removeFirstColumn<float>(*((uint64_t **)v434 + 3 * v133));
                  v132 = *v419;
                }
                while (v133 < -1 - 0x5555555555555555 * ((v419[1] - *v419) >> 3));
              }
              LODWORD(v153) = 0;
              v154 = 0;
              v155 = v444.__r_.__value_.__r.__words[0];
              v156 = __p;
              while (1)
              {
                v157 = *v50;
                v158 = v50[1];
                if (v154 >= -1 - 0x5555555555555555 * ((v158 - *v50) >> 3))
                  break;
                v159 = (uint64_t *)(v157 + 24 * v154);
                v161 = *v159;
                v160 = v159[1];
                std::vector<float>::resize((char **)&v445, ((uint64_t)(*(_QWORD *)((*v440)[3 * v154 + 1] - 16) - *(_QWORD *)((*v440)[3 * v154 + 1] - 24)) >> 2)- 1);
                v162 = (*v440)[3 * v154 + 1];
                v164 = *(_QWORD *)(v162 - 24);
                v163 = *(_QWORD *)(v162 - 16);
                if (v163 != v164 + 4)
                  memmove((void *)v445, (const void *)(v164 + 4), v163 - (v164 + 4));
                v444.__r_.__value_.__l.__size_ = v155;
                v433.__r_.__value_.__l.__size_ = v433.__r_.__value_.__r.__words[0];
                v165 = v434;
                v166 = *(_QWORD *)(*(_QWORD *)v434 + 24 * v154 + 8);
                v167 = *(unsigned int **)(v166 - 16);
                v168 = (unsigned int *)(*(_QWORD *)(v166 - 24) + 4);
                *(_QWORD *)&buf = &v433;
                if (v168 != v167)
                {
                  do
                  {
                    v443 = (float)*v168;
                    std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&buf, &v443);
                    ++v168;
                  }
                  while (v168 != v167);
                  v165 = v434;
                }
                v153 = v153 + ((unint64_t)(v160 - v161) >> 2);
                v431 = v156;
                v50 = v416;
                v131 = v419;
                computeAlignmentMatrix<unsigned int>(*v419, *v416 + 24 * v154 + 24, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, **(float **)((*v440)[3 * v154 + 1] - 24), (float)**(unsigned int **)(*(_QWORD *)(*v165 + 24 * v154 + 8) - 24), v153, 0, &(*v440)[3 * v154 + 3], (uint64_t *)(*(_QWORD *)v437 + 24 * v154 + 24), (uint64_t *)(*v165 + 24 * v154 + 24));
                ++v154;
                removeFirstRow<float>(&(*v440)[3 * v154]);
                removeFirstRow<float>((uint64_t *)(*(_QWORD *)v437 + 24 * v154));
                removeFirstRow<float>((uint64_t *)(*(_QWORD *)v434 + 24 * v154));
              }
              v170 = *v131;
              if (v131[1] - *v131 != 24)
              {
                v171 = 0;
                v172 = 0;
                do
                {
                  LODWORD(v173) = 0;
                  v174 = 0;
                  v175 = v171 + 1;
                  v401 = v172 + ((*(_QWORD *)&v170[24 * v171 + 8] - *(_QWORD *)&v170[24 * v171]) >> 2);
                  while (v174 < -1 - 0x5555555555555555 * ((v158 - v157) >> 3))
                  {
                    v176 = (uint64_t *)(v157 + 24 * v174);
                    v178 = *v176;
                    v177 = v176[1];
                    std::vector<float>::resize((char **)&v445, (uint64_t)(*(_QWORD *)(v440[3 * v175][3 * v174 + 1] - 16)- *(_QWORD *)(v440[3 * v175][3 * v174 + 1] - 24)) >> 2);
                    v179 = (char *)v440;
                    v180 = v440[3 * v175][3 * v174 + 1];
                    v181 = *(_BYTE **)(v180 - 24);
                    v182 = *(_BYTE **)(v180 - 16);
                    if (v182 != v181)
                    {
                      memmove((void *)v445, v181, v182 - v181);
                      v179 = (char *)v440;
                    }
                    v183 = v174 + 1;
                    std::vector<float>::resize(&v444.__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v179[24 * v171] + 24 * (v174 + 1) + 8)- *(_QWORD *)(*(_QWORD *)&v179[24 * v171] + 24 * (v174 + 1))) >> 3));
                    v184 = &v440[3 * v171][3 * v174 + 3];
                    v185 = *v184;
                    v186 = v184[1] - *v184;
                    if (v186)
                    {
                      v187 = v186 / 24;
                      v188 = (_DWORD *)v444.__r_.__value_.__r.__words[0];
                      if (v187 <= 1)
                        v187 = 1;
                      v189 = (uint64_t *)(v185 + 8);
                      do
                      {
                        v190 = *v189;
                        v189 += 3;
                        *v188++ = *(_DWORD *)(v190 - 4);
                        --v187;
                      }
                      while (v187);
                    }
                    std::vector<float>::resize(&v433.__r_.__value_.__l.__data_, (uint64_t)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v434 + 3 * v175) + 24 * v174 + 8) - 16)- *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v434 + 3 * v175) + 24 * v174 + 8) - 24)) >> 2);
                    v191 = v434;
                    v192 = *(_QWORD *)(*((_QWORD *)v434 + 3 * v175) + 24 * v174 + 8);
                    v193 = *(unsigned int **)(v192 - 24);
                    v194 = *(unsigned int **)(v192 - 16);
                    if (v193 != v194)
                    {
                      v195 = (float *)v433.__r_.__value_.__r.__words[0];
                      do
                      {
                        v196 = *v193++;
                        *v195++ = (float)v196;
                      }
                      while (v193 != v194);
                    }
                    std::vector<float>::resize((char **)&__p, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v191[3 * v171] + 24 * v183 + 8) - *(_QWORD *)(v191[3 * v171] + 24 * v183)) >> 3));
                    v197 = v434;
                    v198 = *((_QWORD *)v434 + 3 * v171);
                    v199 = (uint64_t *)(v198 + 24 * v183);
                    v200 = *v199;
                    v201 = v199[1] - *v199;
                    if (v201)
                    {
                      v202 = v201 / 24;
                      v203 = (float *)__p;
                      if (v202 <= 1)
                        v202 = 1;
                      v204 = (uint64_t *)(v200 + 8);
                      do
                      {
                        v205 = *v204;
                        v204 += 3;
                        *v203++ = (float)*(unsigned int *)(v205 - 4);
                        --v202;
                      }
                      while (v202);
                    }
                    v173 = v173 + ((unint64_t)(v177 - v178) >> 2);
                    computeAlignmentMatrix<unsigned int>(&(*v419)[24 * v175], *v416 + 24 * v183, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, *(float *)(*(_QWORD *)(v440[3 * v171][3 * v174 + 1] - 16) - 4), (float)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v198 + 24 * v174 + 8) - 16) - 4), (v401 << 32) | v173, (*(_QWORD *)(*(_QWORD *)&v427[24 * v183] + 8 * ((unint64_t)(v171 + 1) >> 6)) & (1 << (v171 + 1))) == 0, &v440[3 * v175][3 * v183], (uint64_t *)(*((_QWORD *)v437 + 3 * v175) + 24 * v183), (uint64_t *)(v197[3 * v175] + 24 * v183));
                    removeFirstColumn<float>(&v440[3 * v175][3 * v183]);
                    v206 = (uint64_t *)(*((_QWORD *)v437 + 3 * v175) + 24 * v183);
                    removeFirstColumn<std::pair<unsigned int,unsigned int>>(*v206, v206[1]);
                    removeFirstColumn<float>((uint64_t *)(*((_QWORD *)v434 + 3 * v175) + 24 * v183));
                    removeFirstRow<float>(&v440[3 * v175][3 * v183]);
                    removeFirstRow<float>((uint64_t *)(*((_QWORD *)v437 + 3 * v175) + 24 * v183));
                    removeFirstRow<float>((uint64_t *)(*((_QWORD *)v434 + 3 * v175) + 24 * v183));
                    v157 = *v416;
                    v158 = v416[1];
                    ++v174;
                  }
                  v170 = *v419;
                  ++v171;
                  v172 = v401;
                }
                while (v175 < -1 - 0x5555555555555555 * ((v419[1] - *v419) >> 3));
              }
              v207 = v441;
              if (v441 == (char *)v440)
              {
                v208 = 0;
                v212 = 0;
              }
              else
              {
                v208 = 0;
                v209 = 0;
                v210 = 0;
                v211 = 0;
                v212 = 0;
                do
                {
                  if ((unint64_t)v209 >= v210)
                  {
                    v214 = (v209 - v208) >> 2;
                    v215 = v214 + 1;
                    if ((unint64_t)(v214 + 1) >> 62)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    if ((uint64_t)(v210 - (_QWORD)v208) >> 1 > v215)
                      v215 = (uint64_t)(v210 - (_QWORD)v208) >> 1;
                    if (v210 - (unint64_t)v208 >= 0x7FFFFFFFFFFFFFFCLL)
                      v216 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v216 = v215;
                    if (v216)
                      v216 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v216);
                    else
                      v217 = 0;
                    v218 = (char *)(v216 + 4 * v214);
                    *(_DWORD *)v218 = v212;
                    v213 = v218 + 4;
                    while (v209 != v208)
                    {
                      v219 = *((_DWORD *)v209 - 1);
                      v209 -= 4;
                      *((_DWORD *)v218 - 1) = v219;
                      v218 -= 4;
                    }
                    v210 = v216 + 4 * v217;
                    if (v208)
                      operator delete(v208);
                    v208 = v218;
                  }
                  else
                  {
                    *(_DWORD *)v209 = v212;
                    v213 = v209 + 4;
                  }
                  v207 = (char *)v440;
                  v212 += (*(_QWORD *)(**(_QWORD **)&v207[24 * v211] + 8) - ***(_QWORD ***)&v207[24 * v211]) >> 2;
                  ++v211;
                  v209 = v213;
                }
                while (v211 < 0xAAAAAAAAAAAAAAABLL * ((v441 - (char *)v440) >> 3));
              }
              if (*((_QWORD *)v207 + 1) == *(_QWORD *)v207)
              {
                v220 = 0;
                v224 = 0;
              }
              else
              {
                v220 = 0;
                v221 = 0;
                v222 = 0;
                v223 = 0;
                v224 = 0;
                do
                {
                  if ((unint64_t)v221 >= v222)
                  {
                    v226 = (v221 - v220) >> 2;
                    v227 = v226 + 1;
                    if ((unint64_t)(v226 + 1) >> 62)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    if ((uint64_t)(v222 - (_QWORD)v220) >> 1 > v227)
                      v227 = (uint64_t)(v222 - (_QWORD)v220) >> 1;
                    if (v222 - (unint64_t)v220 >= 0x7FFFFFFFFFFFFFFCLL)
                      v228 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v228 = v227;
                    if (v228)
                      v228 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v228);
                    else
                      v229 = 0;
                    v230 = (char *)(v228 + 4 * v226);
                    *(_DWORD *)v230 = v224;
                    v225 = v230 + 4;
                    while (v221 != v220)
                    {
                      v231 = *((_DWORD *)v221 - 1);
                      v221 -= 4;
                      *((_DWORD *)v230 - 1) = v231;
                      v230 -= 4;
                    }
                    v222 = v228 + 4 * v229;
                    if (v220)
                      operator delete(v220);
                    v220 = v230;
                  }
                  else
                  {
                    *(_DWORD *)v221 = v224;
                    v225 = v221 + 4;
                  }
                  v232 = (char *)v440;
                  v224 -= 1431655765
                        * ((*(_QWORD *)(*(_QWORD *)v232 + 24 * v223 + 8) - *(_QWORD *)(*(_QWORD *)v232 + 24 * v223)) >> 3);
                  ++v223;
                  v221 = v225;
                }
                while (v223 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v232 + 1) - *(_QWORD *)v232) >> 3));
              }
              v233 = v224;
              std::vector<std::vector<float>>::resize(&v424, v224);
              std::vector<std::vector<std::pair<unsigned int,unsigned int>>>::resize((uint64_t)&v421, v224);
              v49 = v419;
              if (v224)
              {
                v234 = 0;
                v235 = v212;
                v405 = v212;
                while (1)
                {
                  std::vector<float>::resize((char **)(v424 + 24 * v234), v235);
                  v236 = (_QWORD *)(v421 + 24 * v234);
                  v238 = (void **)(v236 + 1);
                  v237 = (char *)v236[1];
                  v239 = (char *)*v236;
                  v240 = (uint64_t)&v237[-*v236] >> 3;
                  if (v235 > v240)
                    break;
                  if (v235 < v240)
                  {
                    v257 = &v239[8 * v235];
LABEL_238:
                    *v238 = v257;
                  }
LABEL_242:
                  ++v234;
                  v49 = v419;
                  if (v234 == v233)
                    goto LABEL_243;
                }
                v241 = v421 + 24 * v234;
                v244 = *(_QWORD *)(v241 + 16);
                v243 = (_QWORD *)(v241 + 16);
                v242 = v244;
                if (v235 - v240 > (v244 - (uint64_t)v237) >> 3)
                {
                  v411 = v243;
                  v414 = v235 - v240;
                  v245 = v242 - (_QWORD)v239;
                  v246 = v245 >> 2;
                  if (v245 >> 2 <= v235)
                    v246 = v235;
                  if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
                    v247 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v247 = v246;
                  v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v247);
                  v409 = v249;
                  v250 = (char *)*v238;
                  v251 = (char *)*v236;
                  v407 = v248;
                  v252 = &v248[8 * v240];
                  bzero(v252, 8 * v414);
                  v253 = v252;
                  if (v250 == v251)
                  {
                    v254 = v411;
                    v256 = v414;
                  }
                  else
                  {
                    v254 = v411;
                    do
                    {
                      v255 = *((_QWORD *)v250 - 1);
                      v250 -= 8;
                      *((_QWORD *)v253 - 1) = v255;
                      v253 -= 8;
                    }
                    while (v250 != v251);
                    v251 = (char *)*v236;
                    v256 = v414;
                  }
                  *v236 = v253;
                  *v238 = &v252[8 * v256];
                  *v254 = &v407[8 * v409];
                  v235 = v405;
                  if (v251)
                    operator delete(v251);
                  goto LABEL_242;
                }
                bzero(v237, 8 * (v235 - v240));
                v257 = &v237[8 * (v235 - v240)];
                goto LABEL_238;
              }
LABEL_243:
              v258 = (char *)v440;
              v50 = v416;
              if (v441 != (char *)v440)
              {
                v259 = 0;
                v260 = (v441 - (char *)v440) / 24;
                if (v260 <= 1)
                  v260 = 1;
                do
                {
                  v261 = *(_QWORD *)&v258[24 * v259];
                  v262 = *(_QWORD *)&v258[24 * v259 + 8];
                  v263 = v262 - v261;
                  if (v262 != v261)
                  {
                    v264 = 0;
                    v265 = v263 / 24;
                    if (v265 <= 1)
                      v265 = 1;
                    do
                    {
                      v266 = *(_QWORD *)(v261 + 24 * v264);
                      v267 = *(_QWORD *)(v261 + 24 * v264 + 8);
                      v268 = v267 - v266;
                      if (v267 != v266)
                      {
                        v269 = 0;
                        v270 = v268 / 24;
                        v271 = v424;
                        v272 = (char *)v437 + 24 * v259;
                        v273 = v421;
                        if (v270 <= 1)
                          v270 = 1;
                        do
                        {
                          v274 = *(_QWORD *)(v266 + 24 * v269);
                          v275 = *(_QWORD *)(v266 + 24 * v269 + 8);
                          v276 = v275 - v274;
                          if (v275 != v274)
                          {
                            v277 = 0;
                            v278 = v276 >> 2;
                            v279 = *(_QWORD *)(*(_QWORD *)(*v272 + 24 * v264) + 24 * v269);
                            if (v278 <= 1)
                              v280 = 1;
                            else
                              v280 = v278;
                            do
                            {
                              v281 = 3 * (v269 + *(unsigned int *)&v220[4 * v264]);
                              v282 = v277 + *(unsigned int *)&v208[4 * v259];
                              *(_DWORD *)(*(_QWORD *)(v271 + 24 * (v269 + *(unsigned int *)&v220[4 * v264])) + 4 * v282) = *(_DWORD *)(v274 + 4 * v277);
                              *(_QWORD *)(*(_QWORD *)(v273 + 8 * v281) + 8 * v282) = *(_QWORD *)(v279 + 8 * v277++);
                            }
                            while (v280 != v277);
                          }
                          ++v269;
                        }
                        while (v269 != v270);
                      }
                      ++v264;
                    }
                    while (v264 != v265);
                  }
                  ++v259;
                }
                while (v259 != v260);
              }
              if (v220)
                operator delete(v220);
              if (v208)
                operator delete(v208);
              if (__p)
                operator delete(__p);
              if (v433.__r_.__value_.__r.__words[0])
              {
                v433.__r_.__value_.__l.__size_ = v433.__r_.__value_.__r.__words[0];
                operator delete(v433.__r_.__value_.__l.__data_);
              }
              if (v444.__r_.__value_.__r.__words[0])
                operator delete(v444.__r_.__value_.__l.__data_);
              if ((_QWORD)v445)
                operator delete((void *)v445);
              *(_QWORD *)&buf = &v434;
              std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              *(_QWORD *)&buf = &v437;
              std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              *(_QWORD *)&buf = &v440;
              std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_273:
              LODWORD(v440) = 0;
              RepetitionDetectionUtil::getIndices((char **)&buf, v49, &v440);
              LODWORD(v437) = 1;
              RepetitionDetectionUtil::getIndices((char **)&v440, v49, &v437);
              LODWORD(v434) = 0;
              RepetitionDetectionUtil::getIndices((char **)&v437, v50, &v434);
              LODWORD(v445) = 1;
              RepetitionDetectionUtil::getIndices((char **)&v434, v50, &v445);
              v283 = (char *)v440;
              if (v441 == (char *)v440)
              {
                v284 = 0;
                v286 = 0;
                v336 = v400;
LABEL_425:
                *(_QWORD *)v336 = 1065353216;
                *(_DWORD *)(v336 + 8) = 0;
LABEL_426:
                v385 = QRLoggerForCategory(0);
                if (os_log_type_enabled(v385, OS_LOG_TYPE_DEBUG)
                  && ((RepetitionPredictorResult::get_model_output_string((RepetitionPredictorResult *)&v445, v336),
                       v446 >= 0)
                    ? (v386 = &v445)
                    : (v386 = (__int128 *)v445),
                      LODWORD(v444.__r_.__value_.__l.__data_) = 136315394,
                      *(std::string::size_type *)((char *)v444.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Predict",
                      WORD2(v444.__r_.__value_.__r.__words[1]) = 2080,
                      *(std::string::size_type *)((char *)&v444.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v386,
                      _os_log_debug_impl(&dword_1C281A000, v385, OS_LOG_TYPE_DEBUG, "%s RuleBasedRepetitionPredictor Result: %s", (uint8_t *)&v444, 0x16u), SHIBYTE(v446) < 0))
                {
                  operator delete((void *)v445);
                  if (!v284)
                    goto LABEL_436;
                }
                else
                {
LABEL_434:
                  if (!v284)
                    goto LABEL_436;
                }
              }
              else
              {
                v284 = 0;
                v285 = 0;
                v286 = 0;
                v287 = 0;
                v288 = 0;
                v412 = *((_DWORD *)v435 - 1);
                v415 = 0;
                while (1)
                {
                  v289 = *(_DWORD *)&v283[4 * v287];
                  v417 = v288;
                  v420 = v289;
                  if (v284 >= v285)
                  {
                    v291 = (v285 - v284) >> 2;
                    if (v291 <= 1)
                      v291 = 1;
                    if ((unint64_t)(v285 - v284) >= 0x7FFFFFFFFFFFFFF8)
                      v292 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v292 = v291;
                    v293 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v292);
                    v285 = &v293[8 * v294];
                    *(_DWORD *)v293 = v289;
                    *((_DWORD *)v293 + 1) = v412;
                    v290 = v293 + 8;
                    if (v284)
                      operator delete(v284);
                    v284 = v293;
                  }
                  else
                  {
                    *(_DWORD *)v284 = v289;
                    *((_DWORD *)v284 + 1) = v412;
                    v290 = v284 + 8;
                  }
                  v296 = *((unsigned int *)v290 - 2);
                  v297 = *((unsigned int *)v290 - 1);
                  v295 = v290 - 8;
                  if (v296 | v297)
                  {
                    do
                    {
                      v298 = *(_QWORD *)(*(_QWORD *)(v421 + 24 * v297) + 8 * v296);
                      v299 = HIDWORD(v298);
                      if (v290 >= v285)
                      {
                        v300 = (v290 - v284) >> 3;
                        v301 = v300 + 1;
                        if ((unint64_t)(v300 + 1) >> 61)
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        if ((v285 - v284) >> 2 > v301)
                          v301 = (v285 - v284) >> 2;
                        if ((unint64_t)(v285 - v284) >= 0x7FFFFFFFFFFFFFF8)
                          v302 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v302 = v301;
                        if (v302)
                          v302 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v302);
                        else
                          v303 = 0;
                        v304 = (char *)(v302 + 8 * v300);
                        *(_QWORD *)v304 = v299 | (v298 << 32);
                        v305 = v304 + 8;
                        while (v290 != v284)
                        {
                          v306 = *((_QWORD *)v290 - 1);
                          v290 -= 8;
                          *((_QWORD *)v304 - 1) = v306;
                          v304 -= 8;
                        }
                        v285 = (char *)(v302 + 8 * v303);
                        if (v284)
                          operator delete(v284);
                        v284 = v304;
                        v290 = v305;
                      }
                      else
                      {
                        *(_QWORD *)v290 = v299 | (v298 << 32);
                        v290 += 8;
                      }
                      v296 = *((unsigned int *)v290 - 2);
                      v297 = *((unsigned int *)v290 - 1);
                    }
                    while (v296 | v297);
                    v295 = v290 - 8;
                  }
                  if (v284 != v290 && v295 > v284)
                  {
                    v307 = v290;
                    v308 = v284;
                    do
                    {
                      v309 = v295;
                      v310 = *(_DWORD *)v308;
                      *(_DWORD *)v308 = *(_DWORD *)v295;
                      *(_DWORD *)v295 = v310;
                      v295 -= 8;
                      v311 = *((_DWORD *)v308 + 1);
                      *((_DWORD *)v308 + 1) = *((_DWORD *)v307 - 1);
                      *((_DWORD *)v307 - 1) = v311;
                      v308 += 8;
                      v307 = v309;
                    }
                    while (v308 < v295);
                  }
                  if ((unint64_t)(v290 - v284) <= 8)
                    break;
                  v312 = *((_DWORD *)v284 + 3);
                  if (*((_DWORD *)v284 + 2) <= 1u)
                    v313 = 1;
                  else
                    v313 = *((_DWORD *)v284 + 2);
                  v314 = *(float *)(*(_QWORD *)(v424 + 24 * v412) + 4 * v420);
                  v315 = buf;
                  v316 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 2;
                  v317 = wmemchr((__int32 *)buf, v313, v316);
                  if (v317)
                    v318 = v317;
                  else
                    v318 = (__int32 *)*((_QWORD *)&v315 + 1);
                  v319 = (unint64_t)v318 - v315;
                  if (v316 <= (uint64_t)((uint64_t)v318 - v315) >> 2)
                  {
                    v395 = __cxa_allocate_exception(0x30uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v445, "Could not find start from path in turn_1_starts");
                    std::string::basic_string[abi:ne180100]<0>(&v444, "QueryRewrite");
                    InferenceError::InferenceError(v395, (uint64_t)&v445, (uint64_t)&v444, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RuleBasedRepetitionPredictor.cpp", 98);
                  }
                  if (v312 <= 1)
                    v320 = 1;
                  else
                    v320 = v312;
                  v321 = v437;
                  v322 = (__int32 *)v438;
                  v323 = (v438 - (_BYTE *)v437) >> 2;
                  v324 = wmemchr((__int32 *)v437, v320, v323);
                  if (v324)
                    v325 = v324;
                  else
                    v325 = v322;
                  v326 = (char *)v325 - v321;
                  if (v323 <= v326 >> 2)
                  {
                    v394 = __cxa_allocate_exception(0x30uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v445, "Could not find start from path in turn_2_starts");
                    std::string::basic_string[abi:ne180100]<0>(&v444, "QueryRewrite");
                    InferenceError::InferenceError(v394, (uint64_t)&v445, (uint64_t)&v444, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RuleBasedRepetitionPredictor.cpp", 106);
                  }
                  v327 = v314 / (float)(v420 - v313 + 1);
                  v328 = ((v435 - (_BYTE *)v434) >> 2) - 1;
                  if (v286 >= (float *)v415)
                  {
                    v329 = 0xCCCCCCCCCCCCCCCDLL * (v286 - v417) + 1;
                    if (v329 > 0xCCCCCCCCCCCCCCCLL)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    if (0x999999999999999ALL * ((v415 - (char *)v417) >> 2) > v329)
                      v329 = 0x999999999999999ALL * ((v415 - (char *)v417) >> 2);
                    if (0xCCCCCCCCCCCCCCCDLL * ((v415 - (char *)v417) >> 2) >= 0x666666666666666)
                      v330 = 0xCCCCCCCCCCCCCCCLL;
                    else
                      v330 = v329;
                    if (v330 > 0xCCCCCCCCCCCCCCCLL)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v331 = (char *)operator new(20 * v330);
                    v332 = &v331[4 * (v286 - v417)];
                    *(_DWORD *)v332 = v319 >> 2;
                    *((_DWORD *)v332 + 1) = v287;
                    *((_DWORD *)v332 + 2) = (unint64_t)v326 >> 2;
                    *((_DWORD *)v332 + 3) = v328;
                    *((float *)v332 + 4) = v327;
                    if (v286 == v417)
                    {
                      v335 = &v331[4 * (v286 - v417)];
                    }
                    else
                    {
                      v333 = &v331[4 * (v286 - v417)];
                      do
                      {
                        v334 = *(_OWORD *)(v286 - 5);
                        v335 = v333 - 20;
                        *((float *)v333 - 1) = *(v286 - 1);
                        *(_OWORD *)(v333 - 20) = v334;
                        v286 -= 5;
                        v333 -= 20;
                      }
                      while (v286 != v417);
                    }
                    v415 = &v331[20 * v330];
                    v286 = (float *)(v332 + 20);
                    if (v417)
                      operator delete(v417);
                    v288 = (float *)v335;
                  }
                  else
                  {
                    *(_DWORD *)v286 = v319 >> 2;
                    *((_DWORD *)v286 + 1) = v287;
                    *((_DWORD *)v286 + 2) = (unint64_t)v326 >> 2;
                    *((_DWORD *)v286 + 3) = v328;
                    v286[4] = v327;
                    v286 += 5;
                    v288 = v417;
                  }
                  ++v287;
                  v283 = (char *)v440;
                  if (v287 >= (v441 - (char *)v440) >> 2)
                  {
                    v336 = v400;
                    if (v286 == v288)
                      goto LABEL_425;
                    v337 = v288 + 5;
                    v338 = v288;
                    if (v288 + 5 != v286)
                    {
                      v338 = v288;
                      do
                      {
                        if (v337[4] < v338[4])
                          v338 = v337;
                        v337 += 5;
                      }
                      while (v337 != v286);
                    }
                    v339 = 1.0 / (v338[4] + 1.0);
                    *(float *)v400 = 1.0 - v339;
                    v418 = v288;
                    if (*(_DWORD *)v338)
                    {
                      v340 = 0;
                      v341 = *(char **)(v400 + 24);
                      do
                      {
                        ++v340;
                        v342 = *(_QWORD *)(v400 + 32);
                        if ((unint64_t)v341 >= v342)
                        {
                          v344 = *(char **)(v400 + 16);
                          v345 = (v341 - v344) >> 2;
                          v346 = v345 + 1;
                          if ((unint64_t)(v345 + 1) >> 62)
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          v347 = v342 - (_QWORD)v344;
                          if (v347 >> 1 > v346)
                            v346 = v347 >> 1;
                          if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL)
                            v348 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v348 = v346;
                          if (v348)
                          {
                            v348 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v348);
                            v344 = *(char **)(v400 + 16);
                            v341 = *(char **)(v400 + 24);
                          }
                          else
                          {
                            v349 = 0;
                          }
                          v350 = (_DWORD *)(v348 + 4 * v345);
                          *v350 = v340;
                          v343 = (char *)(v350 + 1);
                          while (v341 != v344)
                          {
                            v351 = *((_DWORD *)v341 - 1);
                            v341 -= 4;
                            *--v350 = v351;
                          }
                          *(_QWORD *)(v400 + 16) = v350;
                          *(_QWORD *)(v400 + 24) = v343;
                          *(_QWORD *)(v400 + 32) = v348 + 4 * v349;
                          if (v344)
                            operator delete(v344);
                        }
                        else
                        {
                          *(_DWORD *)v341 = v340;
                          v343 = v341 + 4;
                        }
                        *(_QWORD *)(v400 + 24) = v343;
                        v341 = v343;
                      }
                      while (v340 < *(unsigned int *)v338);
                    }
                    v352 = *((unsigned int *)v338 + 2);
                    if (v352 < *((_DWORD *)v338 + 3) + 1)
                    {
                      v353 = *(char **)(v400 + 24);
                      do
                      {
                        v354 = ++v352 - 0x5555555555555555 * ((a1[1] - *a1) >> 3);
                        v355 = *(_QWORD *)(v400 + 32);
                        if ((unint64_t)v353 >= v355)
                        {
                          v357 = *(char **)(v400 + 16);
                          v358 = (v353 - v357) >> 2;
                          v359 = v358 + 1;
                          if ((unint64_t)(v358 + 1) >> 62)
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          v360 = v355 - (_QWORD)v357;
                          if (v360 >> 1 > v359)
                            v359 = v360 >> 1;
                          if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFFCLL)
                            v361 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v361 = v359;
                          if (v361)
                          {
                            v361 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v361);
                            v357 = *(char **)(v400 + 16);
                            v353 = *(char **)(v400 + 24);
                          }
                          else
                          {
                            v362 = 0;
                          }
                          v363 = (_DWORD *)(v361 + 4 * v358);
                          *v363 = v354;
                          v356 = (char *)(v363 + 1);
                          while (v353 != v357)
                          {
                            v364 = *((_DWORD *)v353 - 1);
                            v353 -= 4;
                            *--v363 = v364;
                          }
                          *(_QWORD *)(v400 + 16) = v363;
                          *(_QWORD *)(v400 + 24) = v356;
                          *(_QWORD *)(v400 + 32) = v361 + 4 * v362;
                          if (v357)
                            operator delete(v357);
                        }
                        else
                        {
                          *(_DWORD *)v353 = v354;
                          v356 = v353 + 4;
                        }
                        *(_QWORD *)(v400 + 24) = v356;
                        v353 = v356;
                      }
                      while (v352 < (*((_DWORD *)v338 + 3) + 1));
                    }
                    v365 = (*((_DWORD *)v338 + 1) + 1);
                    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v365)
                    {
                      v366 = *(char **)(v400 + 24);
                      do
                      {
                        ++v365;
                        v367 = *(_QWORD *)(v400 + 32);
                        if ((unint64_t)v366 >= v367)
                        {
                          v369 = *(char **)(v400 + 16);
                          v370 = (v366 - v369) >> 2;
                          v371 = v370 + 1;
                          if ((unint64_t)(v370 + 1) >> 62)
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          v372 = v367 - (_QWORD)v369;
                          if (v372 >> 1 > v371)
                            v371 = v372 >> 1;
                          if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFFCLL)
                            v373 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v373 = v371;
                          if (v373)
                          {
                            v373 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v373);
                            v369 = *(char **)(v400 + 16);
                            v366 = *(char **)(v400 + 24);
                          }
                          else
                          {
                            v374 = 0;
                          }
                          v375 = (_DWORD *)(v373 + 4 * v370);
                          *v375 = v365;
                          v368 = (char *)(v375 + 1);
                          while (v366 != v369)
                          {
                            v376 = *((_DWORD *)v366 - 1);
                            v366 -= 4;
                            *--v375 = v376;
                          }
                          *(_QWORD *)(v400 + 16) = v375;
                          *(_QWORD *)(v400 + 24) = v368;
                          *(_QWORD *)(v400 + 32) = v373 + 4 * v374;
                          if (v369)
                            operator delete(v369);
                        }
                        else
                        {
                          *(_DWORD *)v366 = v365;
                          v368 = v366 + 4;
                        }
                        *(_QWORD *)(v400 + 24) = v368;
                        v366 = v368;
                      }
                      while (v365 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
                    }
                    v445 = 0uLL;
                    v446 = 0;
                    RepetitionPredictorResult::AugmentationToWords(v400, a1, v402, (uint64_t *)&v445);
                    RepetitionDetectionUtil::constructUtterance(&v444, v402);
                    RepetitionDetectionUtil::constructUtterance(&v433, (uint64_t *)&v445);
                    v377 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
                    v378 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
                    if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v379 = &v444;
                    else
                      v379 = (std::string *)v444.__r_.__value_.__r.__words[0];
                    v380 = SHIBYTE(v433.__r_.__value_.__r.__words[2]);
                    v381 = (void *)v433.__r_.__value_.__r.__words[0];
                    if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v382 = &v433;
                    else
                      v382 = (std::string *)v433.__r_.__value_.__r.__words[0];
                    if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v433.__r_.__value_.__r.__words[2]);
                    else
                      size = v433.__r_.__value_.__l.__size_;
                    v384 = 0.0;
                    if (size)
                    {
                      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v377 = v444.__r_.__value_.__l.__size_;
                      if (v377 >= size)
                      {
                        v388 = (char *)v379 + v377;
                        v389 = v382->__r_.__value_.__s.__data_[0];
                        v390 = v379;
                        do
                        {
                          v391 = v377 - size;
                          if (v391 == -1)
                            break;
                          v392 = (char *)memchr(v390, v389, v391 + 1);
                          if (!v392)
                            break;
                          v393 = v392;
                          if (!memcmp(v392, v382, size))
                          {
                            if (v393 != v388 && v393 - (char *)v379 != -1)
                              goto LABEL_419;
                            break;
                          }
                          v390 = (std::string *)(v393 + 1);
                          v377 = v388 - (v393 + 1);
                        }
                        while (v377 >= size);
                      }
                      v384 = v339;
                      v339 = 0.0;
                    }
LABEL_419:
                    v336 = v400;
                    *(float *)(v400 + 4) = v384;
                    *(float *)(v400 + 8) = v339;
                    if (v380 < 0)
                    {
                      operator delete(v381);
                      v378 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
                    }
                    if (v378 < 0)
                      operator delete(v444.__r_.__value_.__l.__data_);
                    v444.__r_.__value_.__r.__words[0] = (std::string::size_type)&v445;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v444);
                    v286 = v418;
                    goto LABEL_426;
                  }
                }
                v387 = QRLoggerForCategory(0);
                v286 = v417;
                if (!os_log_type_enabled(v387, OS_LOG_TYPE_DEBUG))
                  goto LABEL_434;
                LODWORD(v445) = 136315138;
                *(_QWORD *)((char *)&v445 + 4) = "Predict";
                _os_log_debug_impl(&dword_1C281A000, v387, OS_LOG_TYPE_DEBUG, "%s Path size less than two.", (uint8_t *)&v445, 0xCu);
                if (!v284)
                {
LABEL_436:
                  if (v286)
                    operator delete(v286);
                  if (v434)
                    operator delete(v434);
                  if (v437)
                    operator delete(v437);
                  if (v440)
                    operator delete(v440);
                  if ((_QWORD)buf)
                    operator delete((void *)buf);
                  *(_QWORD *)&buf = &v421;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  *(_QWORD *)&buf = &v424;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  *(_QWORD *)&buf = &v427;
                  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  return;
                }
              }
              operator delete(v284);
              goto LABEL_436;
            }
          }
        }
      }
      else
      {
        v17 = v16 - 1;
      }
      v18 = (char *)buf;
      v20 = v17 >> 6;
      if (v16 >= 0x41)
        v21 = v20;
      else
        v21 = 0;
      *(_QWORD *)(buf + 8 * v21) = 0;
      goto LABEL_16;
    }
  }
  *(_QWORD *)a7 = 1065353216;
  *(_DWORD *)(a7 + 8) = 0;
  v19 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "Predict";
    _os_log_error_impl(&dword_1C281A000, v19, OS_LOG_TYPE_ERROR, "%s [ERR]: Invalid inputs/Pronounciation Mismatch", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1C288CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  if (*(char *)(v46 - 233) < 0)
    operator delete(*(void **)(v46 - 256));
  if (*(char *)(v46 - 137) < 0)
  {
    operator delete(*(void **)(v46 - 160));
    if ((v45 & 1) == 0)
    {
LABEL_8:
      *(_QWORD *)(v46 - 256) = &a26;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
      *(_QWORD *)(v46 - 256) = &a29;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
      *(_QWORD *)(v46 - 256) = &a32;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v44);
  goto LABEL_8;
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[4 * v5];
  v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

uint64_t *removeFirstColumn<float>(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v1 = result[1];
  if (v1 != *result)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = v2 + v4;
      v8 = *(_QWORD *)(v2 + v4);
      v7 = *(_QWORD *)(v2 + v4 + 8);
      v9 = v7 - (v8 + 4);
      if (v7 != v8 + 4)
      {
        result = (uint64_t *)memmove(*(void **)(v2 + v4), (const void *)(v8 + 4), v7 - (v8 + 4));
        v2 = *v3;
        v1 = v3[1];
      }
      *(_QWORD *)(v6 + 8) = v8 + v9;
      ++v5;
      v4 += 24;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3));
  }
  return result;
}

uint64_t removeFirstColumn<std::pair<unsigned int,unsigned int>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;

  if (a2 != result)
  {
    v2 = 0;
    v3 = (a2 - result) / 24;
    if (v3 <= 1)
      v3 = 1;
    do
    {
      v4 = (_QWORD *)(result + 24 * v2);
      v5 = (_DWORD *)*v4;
      v6 = (_DWORD *)(*v4 + 8);
      v9 = (_DWORD *)v4[1];
      v7 = v4 + 1;
      v8 = v9;
      while (v6 != v8)
      {
        v5 = v6;
        v10 = v6[1];
        *(v6 - 2) = *v6;
        *(v6 - 1) = v10;
        v6 += 2;
      }
      *v7 = v5;
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void removeFirstRow<float>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a1 + 24;
  if (v4 != v3)
  {
    do
    {
      v5 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v5;
        operator delete(v5);
        *(_QWORD *)(v2 + 16) = 0;
      }
      v6 = v2 + 24;
      *(_OWORD *)v2 = *(_OWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 16) = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 40) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      v7 = v2 + 48;
      v2 += 24;
    }
    while (v7 != v3);
    v4 = a1[1];
    v2 = v6;
  }
  if (v4 != v2)
  {
    v8 = v4;
    do
    {
      v10 = *(void **)(v8 - 24);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *(_QWORD *)(v4 - 16) = v9;
        operator delete(v9);
      }
      v4 = v8;
    }
    while (v8 != v2);
  }
  a1[1] = v2;
}

void std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::mrr::md::MRRVisualAndScreenMentionDetector::detectMentionsInUtterance(marrs::mrr::md::MRRVisualAndScreenMentionDetector *this@<X0>, const sirinluinternalmention_detector::MentionDetectorRequest *a2@<X1>, sirinluinternalmention_detector::MentionDetectorResponse *a3@<X8>)
{
  NSObject *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::string *v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_id_t v18;
  NSObject *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  int *v27;
  int *i;
  std::string::size_type v29;
  NSObject *v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::vector<std::string>::pointer end;
  __int128 v48;
  std::string *v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v59;
  unint64_t v60;
  _BYTE *v61;
  _QWORD *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  std::string *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  uint64_t *v72;
  std::string::size_type v73;
  unsigned __int8 *v74;
  BOOL v75;
  BOOL v76;
  unint64_t v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  int v84;
  std::string::size_type v85;
  unsigned __int8 *v86;
  std::string *v87;
  std::string *v88;
  uint64_t v89;
  int v90;
  int v91;
  BOOL v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  _BYTE *v100;
  void *v101;
  unint64_t v102;
  NSObject *v103;
  NSObject *v104;
  NSObject *v105;
  NSObject *v106;
  os_signpost_id_t v107;
  NSObject *v108;
  NSObject *v109;
  NSObject *v110;
  int64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  __int128 v143;
  _QWORD *v144;
  unint64_t v145;
  void *v146;
  NSObject *v147;
  NSObject *v148;
  NSObject *v149;
  NSObject *v150;
  os_signpost_id_t v151;
  NSObject *v152;
  NSObject *v153;
  NSObject *v154;
  char *v155;
  std::string::size_type v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  unint64_t v161;
  float v162;
  _QWORD *j;
  std::string::size_type v164;
  std::string::size_type v165;
  NSObject *v166;
  NSObject *v167;
  NSObject *v168;
  NSObject *v169;
  std::string *v170;
  NSObject *v171;
  _QWORD *exception;
  NSObject *v173;
  _QWORD *v174;
  NSObject *v175;
  _QWORD *v176;
  NSObject *v177;
  _QWORD *v178;
  NSObject *v179;
  _QWORD *v180;
  NSObject *v181;
  _QWORD *v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  std::string *v187;
  std::string::size_type size;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  NSObject *v193;
  uint8_t *v194;
  _QWORD *v195;
  char *v196;
  os_signpost_id_t spid;
  void *v198;
  void *v199;
  uint64_t **v200;
  uint64_t v201;
  unint64_t v202;
  marrs::mrr::md::MRRVisualAndScreenMentionDetector *v203;
  const sirinluinternalmention_detector::MentionDetectorRequest *v204;
  unint64_t *v205;
  void *v206;
  _BYTE *v207;
  uint64_t v208;
  _BYTE v209[72];
  std::vector<std::string> v210;
  _BYTE v211[40];
  char v212;
  unint64_t *v213;
  unint64_t *v214;
  uint64_t v215;
  std::string v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  std::string v220;
  void *v221[3];
  uint8_t buf[16];
  char *v223;
  uint64_t v224;
  const void *v225;
  uint64_t v226;
  uint64_t v227;
  void *__p;
  uint64_t v229;
  char v230;
  uint64_t v231;
  void *v232[3];
  void *v233;
  uint64_t v234;
  uint64_t v235;
  std::string v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  std::string v247;
  void *v248;
  _BYTE *v249;
  std::string v250;
  void *v251[3];
  void *v252[4];
  void *v253;
  char v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v6 = MRRLoggerForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"MDRequest", 9);
    std::ios_base::getloc((const std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)]);
    v7 = std::locale::use_facet((const std::locale *)&v250, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale((std::locale *)&v250);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"utterance - ", 12);
    v8 = *((_QWORD *)a2 + 8);
    v9 = *(char *)(v8 + 23);
    if (v9 >= 0)
      v10 = *((_QWORD *)a2 + 8);
    else
      v10 = *(_QWORD *)v8;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v8 + 23);
    else
      v11 = *(_QWORD *)(v8 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, v10, v11);
    std::ios_base::getloc((const std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)]);
    v12 = std::locale::use_facet((const std::locale *)&v250, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)&v250);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"maxCandidates - ", 16);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet((const std::locale *)&v250, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale((std::locale *)&v250);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
    if (v230 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BC5BC8](&v231);
    v15 = &v250;
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v250.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl(&dword_1C281A000, v6, OS_LOG_TYPE_INFO, "MD Request - %s", buf, 0xCu);
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
  }
  if (!*((_QWORD *)a2 + 5))
  {
    v171 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "Invalid Mention Detector input: requestId not set";
      _os_log_impl(&dword_1C281A000, v171, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
    }
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: requestId not set");
    std::string::basic_string[abi:ne180100]<0>(&v250, "MultimodalReferenceResolution");
    IOContentError::IOContentError(exception, (uint64_t)buf, (uint64_t)&v250, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 47);
  }
  v16 = *((_QWORD *)a2 + 2);
  if (!v16)
  {
    v173 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "Invalid Mention Detector input: no embeddingTensor in request";
      _os_log_impl(&dword_1C281A000, v173, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
    }
    v174 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: no embeddingTensor in request");
    std::string::basic_string[abi:ne180100]<0>(&v250, "MultimodalReferenceResolution");
    IOContentError::IOContentError(v174, (uint64_t)buf, (uint64_t)&v250, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 50);
  }
  if (!*((_QWORD *)a2 + 7))
  {
    v175 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "Invalid Mention Detector input: no tokenChain in request";
      _os_log_impl(&dword_1C281A000, v175, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
    }
    v176 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: no tokenChain in request");
    std::string::basic_string[abi:ne180100]<0>(&v250, "MultimodalReferenceResolution");
    IOContentError::IOContentError(v176, (uint64_t)buf, (uint64_t)&v250, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 53);
  }
  if (!*((_QWORD *)a2 + 8))
  {
    v177 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "Invalid Mention Detector input: no utterance in request";
      _os_log_impl(&dword_1C281A000, v177, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
    }
    v178 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: no utterance in request");
    std::string::basic_string[abi:ne180100]<0>(&v250, "MultimodalReferenceResolution");
    IOContentError::IOContentError(v178, (uint64_t)buf, (uint64_t)&v250, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 56);
  }
  if (*(_QWORD *)(v16 + 40) != *((_QWORD *)this + 16))
  {
    v179 = MRRLoggerForCategory(1);
    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "OwlEmbeddingMismatch";
      _os_log_impl(&dword_1C281A000, v179, OS_LOG_TYPE_ERROR, "InferenceError - %s", buf, 0xCu);
    }
    v180 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "OwlEmbeddingMismatch");
    std::string::basic_string[abi:ne180100]<0>(&v250, "MultimodalReferenceResolution");
    InferenceError::InferenceError(v180, (uint64_t)buf, (uint64_t)&v250, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 59);
  }
  v17 = MRRLoggerForCategory(3);
  v18 = os_signpost_id_generate(v17);
  v19 = MRRLoggerForCategory(3);
  v20 = v18 - 1;
  if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v21 = v19;
    if (os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v21, OS_SIGNPOST_INTERVAL_BEGIN, v18, "MDPreProcessing", "", buf, 2u);
    }
  }
  v22 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C281A000, v22, OS_LOG_TYPE_INFO, "BEGIN \"MDPreProcessing\"", buf, 2u);
  }
  sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse((sirinluinternalmention_detector::MentionDetectorResponse *)buf);
  v203 = this;
  v23 = (_QWORD *)*((_QWORD *)this + 18);
  if (!v23)
  {
LABEL_30:
    v25 = 0;
    v211[0] = 0;
    goto LABEL_43;
  }
  v24 = (_QWORD *)*((_QWORD *)a2 + 8);
  while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v24, v23 + 4))
  {
LABEL_29:
    v23 = (_QWORD *)*v23;
    if (!v23)
      goto LABEL_30;
  }
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v23 + 4, v24))
  {
    ++v23;
    goto LABEL_29;
  }
  v26 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v203 + 136, &v250, v24);
  if (!v26)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v27 = *(int **)(v26 + 56);
  for (i = *(int **)(v26 + 64); v27 != i; v27 += 8)
  {
    marrs::mrr::md::getMatchingSpanForBoundary((uint64_t *)&v250, *((uint64_t **)a2 + 8), *((_QWORD *)a2 + 7), *v27, v27[1], 0.5);
    v29 = v250.__r_.__value_.__r.__words[0];
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>((uint64_t **)&buf[8], (uint64_t)v250.__r_.__value_.__l.__data_);
    (*(void (**)(std::string::size_type))(*(_QWORD *)v29 + 8))(v29);
  }
  v30 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    marrs::mrr::MRRCPPPrintUtils::getMdResponseString((marrs::mrr::MRRCPPPrintUtils *)&v250, (const sirinluinternalmention_detector::MentionDetectorResponse *)buf);
    v31 = (v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v250
        : (std::string *)v250.__r_.__value_.__r.__words[0];
    LODWORD(v236.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v236.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    _os_log_impl(&dword_1C281A000, v30, OS_LOG_TYPE_INFO, "MD Response due to override - %s", (uint8_t *)&v236, 0xCu);
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
  }
  v32 = *((_QWORD *)a2 + 5);
  v33 = operator new();
  v34 = (const void *)MEMORY[0x1C3BC5484](v33, v32);
  v35 = v225;
  v225 = v34;
  if (v35)
    (*(void (**)(const void *))(*(_QWORD *)v35 + 8))(v35);
  MEMORY[0x1C3BC5574](v211, buf);
  v25 = 1;
LABEL_43:
  v212 = v25;
  MEMORY[0x1C3BC5598](buf);
  if (v212)
  {
    MEMORY[0x1C3BC5580](a3, v211);
    goto LABEL_329;
  }
  sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(a3);
  v36 = *((_QWORD *)a2 + 5);
  v200 = (uint64_t **)a3;
  v37 = operator new();
  v38 = MEMORY[0x1C3BC5484](v37, v36);
  v39 = *((_QWORD *)a3 + 4);
  *((_QWORD *)a3 + 4) = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  memset(&v210, 0, sizeof(v210));
  v40 = *((_QWORD *)a2 + 7);
  v41 = *(_QWORD *)(v40 + 24);
  v204 = a2;
  if (*(_QWORD *)(v40 + 32) == v41)
  {
    if (!*(_QWORD *)(*((_QWORD *)a2 + 2) + 56))
    {
      v205 = 0;
      goto LABEL_175;
    }
    v60 = 0;
LABEL_356:
    std::to_string(&v247, v60);
    v183 = std::string::insert(&v247, 0, "Invalid Mention Detector input: number of non-whitespace tokens (");
    v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v184;
    v183->__r_.__value_.__l.__size_ = 0;
    v183->__r_.__value_.__r.__words[2] = 0;
    v183->__r_.__value_.__r.__words[0] = 0;
    v185 = std::string::append(&v220, ") does not match the number of tokens in the embeddings (");
    v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v186;
    v185->__r_.__value_.__l.__size_ = 0;
    v185->__r_.__value_.__r.__words[2] = 0;
    v185->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v216, *(_QWORD *)(*((_QWORD *)a2 + 2) + 56));
    if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v187 = &v216;
    else
      v187 = (std::string *)v216.__r_.__value_.__r.__words[0];
    if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v216.__r_.__value_.__r.__words[2]);
    else
      size = v216.__r_.__value_.__l.__size_;
    v189 = std::string::append(&v236, (const std::string::value_type *)v187, size);
    v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
    v250.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v190;
    v189->__r_.__value_.__l.__size_ = 0;
    v189->__r_.__value_.__r.__words[2] = 0;
    v189->__r_.__value_.__r.__words[0] = 0;
    v191 = std::string::append(&v250, ")");
    v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
    v223 = (char *)v191->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = v192;
    v191->__r_.__value_.__l.__size_ = 0;
    v191->__r_.__value_.__r.__words[2] = 0;
    v191->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v216.__r_.__value_.__l.__data_);
    if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v236.__r_.__value_.__l.__data_);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v220.__r_.__value_.__l.__data_);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v247.__r_.__value_.__l.__data_);
    v193 = MRRLoggerForCategory(1);
    if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
    {
      v194 = buf;
      if (SHIBYTE(v223) < 0)
        v194 = *(uint8_t **)buf;
      LODWORD(v250.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v250.__r_.__value_.__r.__words + 4) = (std::string::size_type)v194;
      _os_log_impl(&dword_1C281A000, v193, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)&v250, 0xCu);
    }
    v195 = __cxa_allocate_exception(0x30uLL);
    if (SHIBYTE(v223) >= 0)
      v196 = (char *)buf;
    else
      v196 = *(char **)buf;
    std::string::basic_string[abi:ne180100]<0>(&v250, v196);
    std::string::basic_string[abi:ne180100]<0>(&v236, "MultimodalReferenceResolution");
    IOContentError::IOContentError(v195, (uint64_t)&v250, (uint64_t)&v236, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 86);
  }
  v205 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  do
  {
    v45 = *(_QWORD *)(v41 + 8 * v44);
    if (!*(_BYTE *)(v45 + 89))
    {
      v46 = *(_QWORD *)(v45 + 64);
      end = v210.__end_;
      if (v210.__end_ >= v210.__end_cap_.__value_)
      {
        v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v210, (__int128 *)v46);
      }
      else
      {
        if (*(char *)(v46 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v210.__end_, *(const std::string::value_type **)v46, *(_QWORD *)(v46 + 8));
        }
        else
        {
          v48 = *(_OWORD *)v46;
          v210.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v46 + 16);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v48;
        }
        v49 = end + 1;
      }
      v210.__end_ = v49;
      if ((unint64_t)v42 >= v43)
      {
        v51 = v42 - v205;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v43 - (_QWORD)v205) >> 2 > v52)
          v52 = (uint64_t)(v43 - (_QWORD)v205) >> 2;
        if (v43 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v53);
        else
          v54 = 0;
        v55 = (unint64_t *)(v53 + 8 * v51);
        *v55 = v44;
        v50 = v55 + 1;
        if (v42 == v205)
        {
          v56 = v205;
        }
        else
        {
          v56 = v205;
          do
          {
            v57 = *--v42;
            *--v55 = v57;
          }
          while (v42 != v205);
        }
        v43 = v53 + 8 * v54;
        if (v56)
          operator delete(v56);
        v205 = v55;
      }
      else
      {
        *v42 = v44;
        v50 = v42 + 1;
      }
      v40 = *((_QWORD *)a2 + 7);
      v42 = v50;
    }
    ++v44;
    v41 = *(_QWORD *)(v40 + 24);
  }
  while (v44 < (*(_QWORD *)(v40 + 32) - v41) >> 3);
  begin = v210.__begin_;
  v59 = v210.__end_;
  v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v210.__end_ - (char *)v210.__begin_) >> 3);
  if (v60 != *(_QWORD *)(*((_QWORD *)a2 + 2) + 56))
    goto LABEL_356;
  if (v210.__end_ == v210.__begin_)
  {
LABEL_175:
    v61 = 0;
    v62 = 0;
    goto LABEL_176;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = (-85 * (((char *)v210.__end_ - (char *)v210.__begin_) >> 3));
  v201 = v66;
  do
  {
    if (v60 >= v65 + v66)
      v67 = v65 + v66;
    else
      v67 = v60;
    if (v65 >= v60)
      break;
    if (v65 < v67)
    {
      v68 = v65;
      while (1)
      {
        begin = v210.__begin_;
        v59 = v210.__end_;
        if (v68 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v210.__end_ - (char *)v210.__begin_) >> 3))
          break;
        v69 = &v210.__begin_[v65];
        if (SHIBYTE(v69->__r_.__value_.__r.__words[2]) < 0)
        {
          v69 = (std::string *)v69->__r_.__value_.__r.__words[0];
          v70 = v210.__begin_[v65].__r_.__value_.__l.__size_;
        }
        else
        {
          v70 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
        }
        v71 = byte_1ED7B1BA7;
        if (byte_1ED7B1BA7 >= 0)
          v72 = &marrs::mrr::md::MRRVisualAndScreenMentionDetector::WORD_PIECE_SUFFIX_SYMBOL;
        else
          v72 = (uint64_t *)marrs::mrr::md::MRRVisualAndScreenMentionDetector::WORD_PIECE_SUFFIX_SYMBOL;
        if (byte_1ED7B1BA7 < 0)
          v71 = unk_1ED7B1B98;
        if (v70 >= v71)
          v73 = v71;
        else
          v73 = v70;
        v74 = (unsigned __int8 *)v69 + v73;
        if (v71)
          v75 = v73 == 0;
        else
          v75 = 1;
        if (v75)
        {
          v81 = (std::string *)((char *)v69 + v73);
        }
        else
        {
          v80 = v69;
          v81 = (std::string *)((char *)v69 + v73);
          do
          {
            if (v80->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v72)
            {
              v82 = 1;
              while (v71 != v82)
              {
                v83 = (unsigned __int8 *)v80 + v82;
                if ((unsigned __int8 *)((char *)v80 + v82) == v74)
                  goto LABEL_104;
                v84 = *((unsigned __int8 *)v72 + v82++);
                if (*v83 != v84)
                  goto LABEL_114;
              }
              v81 = v80;
            }
LABEL_114:
            v80 = (std::string *)((char *)v80 + 1);
          }
          while (v80 != (std::string *)v74);
        }
LABEL_104:
        v76 = v81 != (std::string *)v74 || v71 == 0;
        if (v76 && v81 == v69)
        {
          v77 = v68 + 1;
        }
        else
        {
          v78 = &v210.__begin_[v68];
          if (SHIBYTE(v78->__r_.__value_.__r.__words[2]) < 0)
          {
            v78 = (std::string *)v78->__r_.__value_.__r.__words[0];
            v79 = v210.__begin_[v68].__r_.__value_.__l.__size_;
          }
          else
          {
            v79 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
          }
          if (v79 >= v71)
            v85 = v71;
          else
            v85 = v79;
          v86 = (unsigned __int8 *)v78 + v85;
          if (v71 && v85)
          {
            v87 = v78;
            v88 = (std::string *)((char *)v78 + v85);
            do
            {
              if (v87->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v72)
              {
                v89 = 1;
                while (v71 != v89)
                {
                  if ((unsigned __int8 *)((char *)v87 + v89) == v86)
                    goto LABEL_139;
                  v90 = v87->__r_.__value_.__s.__data_[v89];
                  v91 = *((unsigned __int8 *)v72 + v89++);
                  if (v90 != v91)
                    goto LABEL_130;
                }
                v88 = v87;
              }
LABEL_130:
              v87 = (std::string *)((char *)v87 + 1);
            }
            while (v87 != (std::string *)v86);
          }
          else
          {
            v88 = (std::string *)((char *)v78 + v85);
          }
LABEL_139:
          if (v71)
            v92 = v88 == (std::string *)v86;
          else
            v92 = 0;
          v93 = v92;
          v77 = v68 + 1;
          if (v68 + 1 == v67 || (v93 & 1) != 0 || v88 != v78)
          {
            if ((unint64_t)v64 >= v63)
            {
              v94 = (v64 - v61) >> 4;
              v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v63 - (_QWORD)v61) >> 3 > v95)
                v95 = (uint64_t)(v63 - (_QWORD)v61) >> 3;
              if (v63 - (unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
                v96 = 0xFFFFFFFFFFFFFFFLL;
              else
                v96 = v95;
              if (v96)
                v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v96);
              else
                v97 = 0;
              v98 = (unint64_t *)(v96 + 16 * v94);
              *v98 = v65;
              v98[1] = v68;
              if (v62 == (_QWORD *)v61)
              {
                v100 = (_BYTE *)(v96 + 16 * v94);
              }
              else
              {
                v99 = v96 + 16 * v94;
                do
                {
                  v100 = (_BYTE *)(v99 - 16);
                  *(_OWORD *)(v99 - 16) = *((_OWORD *)v62 - 1);
                  v62 -= 2;
                  v99 -= 16;
                }
                while (v62 != (_QWORD *)v61);
              }
              v63 = v96 + 16 * v97;
              v62 = v98 + 2;
              if (v61)
              {
                v101 = v61;
                v102 = v63;
                operator delete(v101);
                v63 = v102;
              }
              v61 = v100;
            }
            else
            {
              *(_QWORD *)v64 = v65;
              *((_QWORD *)v64 + 1) = v68;
              v62 = v64 + 16;
            }
            v64 = (char *)v62;
          }
        }
        v68 = v77;
        if (v77 >= v67)
        {
          begin = v210.__begin_;
          v59 = v210.__end_;
          break;
        }
      }
      v66 = v201;
    }
    ++v65;
    v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (char *)begin) >> 3);
  }
  while (v65 < v60);
  a2 = v204;
  v20 = v18 - 1;
LABEL_176:
  v103 = MRRLoggerForCategory(3);
  if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v104 = v103;
    if (os_signpost_enabled(v103))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v104, OS_SIGNPOST_INTERVAL_END, v18, "MDPreProcessing", " enableTelemetry=YES ", buf, 2u);
    }
  }
  v105 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C281A000, v105, OS_LOG_TYPE_INFO, "END \"MDPreProcessing\"", buf, 2u);
  }
  v106 = MRRLoggerForCategory(3);
  v107 = os_signpost_id_generate(v106);
  v108 = MRRLoggerForCategory(3);
  if (v107 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v109 = v108;
    if (os_signpost_enabled(v108))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v109, OS_SIGNPOST_INTERVAL_BEGIN, v107, "MDModelInference", "", buf, 2u);
    }
  }
  v110 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C281A000, v110, OS_LOG_TYPE_INFO, "BEGIN \"MDModelInference\"", buf, 2u);
  }
  MEMORY[0x1C3BC5514](v209, *((_QWORD *)a2 + 2));
  memset(buf, 0, sizeof(buf));
  v223 = 0;
  v111 = (char *)v62 - v61;
  if (v62 != (_QWORD *)v61)
  {
    if (v111 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v111 >> 4);
    *(_QWORD *)buf = v112;
    *(_QWORD *)&buf[8] = v112;
    v223 = &v112[16 * v113];
    memmove(v112, v61, v111);
    *(_QWORD *)&buf[8] = &v112[16 * (v111 >> 4)];
  }
  v202 = v107 - 1;
  spid = v107;
  MEMORY[0x1C3BC5514]();
  MEMORY[0x1C3BC5520](v209);
  v114 = *(uint64_t **)buf;
  v115 = *(uint64_t **)&buf[8];
  if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
  {
    v117 = 0;
    v118 = 0;
  }
  else
  {
    v116 = 0;
    v117 = 0;
    v118 = 0;
    do
    {
      v119 = *v114;
      v120 = v114[1];
      if ((unint64_t)v117 >= v116)
      {
        v122 = v117 - v118;
        v123 = v122 + 1;
        if ((unint64_t)(v122 + 1) >> 61)
          goto LABEL_332;
        if ((uint64_t)(v116 - (_QWORD)v118) >> 2 > v123)
          v123 = (uint64_t)(v116 - (_QWORD)v118) >> 2;
        if (v116 - (unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
          v124 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v124 = v123;
        if (v124)
          v124 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v124);
        else
          v125 = 0;
        v126 = (_QWORD *)(v124 + 8 * v122);
        *v126 = v119;
        v121 = v126 + 1;
        while (v117 != v118)
        {
          v127 = *--v117;
          *--v126 = v127;
        }
        v116 = v124 + 8 * v125;
        if (v118)
          operator delete(v118);
        v118 = v126;
      }
      else
      {
        *v117 = v119;
        v121 = v117 + 1;
      }
      if ((unint64_t)v121 >= v116)
      {
        v128 = v121 - v118;
        v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 61)
LABEL_332:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v116 - (_QWORD)v118) >> 2 > v129)
          v129 = (uint64_t)(v116 - (_QWORD)v118) >> 2;
        if (v116 - (unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
          v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v130);
        else
          v131 = 0;
        v132 = (_QWORD *)(v130 + 8 * v128);
        *v132 = v120;
        v117 = v132 + 1;
        while (v121 != v118)
        {
          v133 = *--v121;
          *--v132 = v133;
        }
        v116 = v130 + 8 * v131;
        if (v118)
          operator delete(v118);
        v118 = v132;
      }
      else
      {
        *v121 = v120;
        v117 = v121 + 1;
      }
      v114 += 2;
    }
    while (v114 != v115);
  }
  v134 = v229;
  v135 = v227;
  v136 = operator new(0x10uLL);
  *v136 = v134;
  v136[1] = v135;
  v216.__r_.__value_.__r.__words[0] = (std::string::size_type)v136;
  v216.__r_.__value_.__l.__size_ = (std::string::size_type)(v136 + 2);
  v216.__r_.__value_.__r.__words[2] = (std::string::size_type)(v136 + 2);
  v217 = 0;
  v218 = 0;
  v219 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v217, v225, v226, (v226 - (uint64_t)v225) >> 2);
  v214 = 0;
  v215 = 0;
  v213 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v213, v118, (uint64_t)v117, v117 - v118);
  v137 = v213;
  memset(&v236, 0, sizeof(v236));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&v236, v213, v214, v214 - v213);
  v238 = 0;
  v237 = 0;
  v239 = 0;
  v138 = (void *)v216.__r_.__value_.__r.__words[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v237, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_, (uint64_t)(v216.__r_.__value_.__l.__size_ - v216.__r_.__value_.__r.__words[0]) >> 3);
  v241 = 0;
  v240 = 0;
  v242 = 0;
  v139 = v217;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v240, v217, v218, (v218 - (uint64_t)v217) >> 2);
  if (v137)
  {
    v214 = v137;
    operator delete(v137);
  }
  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = xmmword_1E7C66730;
  LODWORD(v232[0]) = 2;
  HIDWORD(v232[0]) = v227;
  LODWORD(v253) = v229 + ((int)v229 - 1) * (int)v229 / 2;
  HIDWORD(v253) = v229;
  v246 = 0x100000001;
  v245 = 0x100000001;
  v244 = -1;
  v243 = 0x200000002;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    v181 = MRRLoggerForCategory(1);
    if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v250.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v250.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to reshape input blobs";
      _os_log_impl(&dword_1C281A000, v181, OS_LOG_TYPE_ERROR, "InferenceError - %s", (uint8_t *)&v250, 0xCu);
    }
    v182 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v250, "Failed to reshape input blobs");
    std::string::basic_string[abi:ne180100]<0>(&v220, "MultimodalReferenceResolution");
    InferenceError::InferenceError(v182, (uint64_t)&v250, (uint64_t)&v220, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/InferenceEngine/MRRMentionDetectorEspressoModule.cpp", 57);
  }
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(*((_QWORD *)v203 + 4)
                                                                                                 + 8));
  v140 = *((_QWORD *)v203 + 4);
  memset(&v250, 0, sizeof(v250));
  v199 = (void *)v236.__r_.__value_.__r.__words[0];
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v250, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_, (uint64_t)(v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 2);
  memset(v251, 0, sizeof(v251));
  v141 = v237;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v251, v237, v238, (v238 - (uint64_t)v237) >> 3);
  v198 = v139;
  memset(v252, 0, 24);
  v142 = v240;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v252, v240, v241, (v241 - (uint64_t)v240) >> 2);
  v143 = *(_OWORD *)&v250.__r_.__value_.__l.__data_;
  v144 = operator new(0x10uLL);
  v145 = (uint64_t)(*((_QWORD *)&v143 + 1) - v143) >> 2;
  *v144 = v145 >> 1;
  v144[1] = 2;
  v220.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  v220.__r_.__value_.__l.__size_ = (std::string::size_type)(v144 + 2);
  v220.__r_.__value_.__r.__words[2] = (std::string::size_type)(v144 + 2);
  memset(v221, 0, sizeof(v221));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v221, (const void *)v143, *((uint64_t *)&v143 + 1), v145);
  std::string::basic_string[abi:ne180100]<0>(&v247, "embedding");
  marrs::inference_engine::EspressoModule::setInput(v140, (uint64_t)&v247, (uint64_t)v251);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v247, "spans");
  marrs::inference_engine::EspressoModule::setInput(v140, (uint64_t)&v247, (uint64_t)&v220);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(v140 + 8));
  std::string::basic_string[abi:ne180100]<0>(&v253, "sigmoided_scores");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v247, v140);
  if (v254 < 0)
    operator delete(v253);
  memset(v232, 0, sizeof(v232));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v232, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_, (uint64_t)(v247.__r_.__value_.__l.__size_ - v247.__r_.__value_.__r.__words[0]) >> 3);
  v234 = 0;
  v233 = 0;
  v235 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v233, v248, (uint64_t)v249, (v249 - (_BYTE *)v248) >> 2);
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v247.__r_.__value_.__r.__words[0])
  {
    v247.__r_.__value_.__l.__size_ = v247.__r_.__value_.__r.__words[0];
    operator delete(v247.__r_.__value_.__l.__data_);
  }
  if (v221[0])
    operator delete(v221[0]);
  if (v220.__r_.__value_.__r.__words[0])
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v252[0])
    operator delete(v252[0]);
  if (v251[0])
    operator delete(v251[0]);
  if ((_QWORD)v143)
    operator delete((void *)v143);
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(*((_QWORD *)v203 + 4)
                                                                                                 + 8));
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v146 = v233;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v206, v233, v234, (v234 - (uint64_t)v233) >> 2);
  if (v146)
    operator delete(v146);
  if (v232[0])
    operator delete(v232[0]);
  if (v142)
    operator delete(v142);
  if (v141)
    operator delete(v141);
  if (v199)
    operator delete(v199);
  if (v198)
    operator delete(v198);
  if (v138)
    operator delete(v138);
  if (v118)
    operator delete(v118);
  v147 = MRRLoggerForCategory(3);
  if (v202 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v148 = v147;
    if (os_signpost_enabled(v147))
    {
      LOWORD(v250.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v148, OS_SIGNPOST_INTERVAL_END, spid, "MDModelInference", " enableTelemetry=YES ", (uint8_t *)&v250, 2u);
    }
  }
  v149 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v149, OS_LOG_TYPE_INFO))
  {
    LOWORD(v250.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C281A000, v149, OS_LOG_TYPE_INFO, "END \"MDModelInference\"", (uint8_t *)&v250, 2u);
  }
  v150 = MRRLoggerForCategory(3);
  v151 = os_signpost_id_generate(v150);
  v152 = MRRLoggerForCategory(3);
  if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v153 = v152;
    if (os_signpost_enabled(v152))
    {
      LOWORD(v250.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v153, OS_SIGNPOST_INTERVAL_BEGIN, v151, "MDPostProcessing", "", (uint8_t *)&v250, 2u);
    }
  }
  v154 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
  {
    LOWORD(v250.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C281A000, v154, OS_LOG_TYPE_INFO, "BEGIN \"MDPostProcessing\"", (uint8_t *)&v250, 2u);
  }
  if (*((_DWORD *)v203 + 22) == 1)
    v155 = "high_f1";
  else
    v155 = "high_recall";
  std::string::basic_string[abi:ne180100]<0>(&v250, v155);
  v156 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
  if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v157 = (unsigned int *)&v250;
  else
    v157 = (unsigned int *)v250.__r_.__value_.__r.__words[0];
  if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v156 = v250.__r_.__value_.__l.__size_;
  if (v156 == 7)
  {
    if (bswap32(*v157) != 1751738216 || bswap32(*(unsigned int *)((char *)v157 + 3)) != 1751082545)
      goto LABEL_300;
    v162 = *((float *)v203 + 23);
    v161 = (unint64_t)(v207 - (_BYTE *)v206) >> 2;
  }
  else
  {
    if (v156 != 11
      || ((v158 = *(_QWORD *)v157, v159 = *(_QWORD *)((char *)v157 + 3), v158 == 0x6365725F68676968)
        ? (v160 = v159 == 0x6C6C616365725F68)
        : (v160 = 0),
          !v160))
    {
LABEL_300:
      memset(&v236, 0, sizeof(v236));
      goto LABEL_301;
    }
    if (*((int *)v203 + 24) <= 1)
      LODWORD(v161) = 1;
    else
      LODWORD(v161) = *((_DWORD *)v203 + 24);
    v162 = 0.0;
  }
  marrs::mrr::md::preprocessing::getIndexesOfTopMentions(&v236.__r_.__value_.__l.__data_, (uint64_t *)&v206, v161, v162);
LABEL_301:
  v164 = v236.__r_.__value_.__l.__size_;
  for (j = (_QWORD *)v236.__r_.__value_.__r.__words[0]; j != (_QWORD *)v164; ++j)
  {
    marrs::mrr::md::getMatchingSpanForBoundary((uint64_t *)&v220, *((uint64_t **)v204 + 8), *((_QWORD *)v204 + 7), v205[*(_QWORD *)&v61[16 * *j]], v205[*(_QWORD *)&v61[16 * *j + 8]], *((float *)v206 + *j));
    v165 = v220.__r_.__value_.__r.__words[0];
    if (v220.__r_.__value_.__r.__words[0])
    {
      PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>(v200 + 1, (uint64_t)v220.__r_.__value_.__l.__data_);
      (*(void (**)(std::string::size_type))(*(_QWORD *)v165 + 8))(v165);
    }
  }
  v166 = MRRLoggerForCategory(3);
  if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v167 = v166;
    if (os_signpost_enabled(v166))
    {
      LOWORD(v220.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v167, OS_SIGNPOST_INTERVAL_END, v151, "MDPostProcessing", " enableTelemetry=YES ", (uint8_t *)&v220, 2u);
    }
  }
  v168 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
  {
    LOWORD(v220.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C281A000, v168, OS_LOG_TYPE_INFO, "END \"MDPostProcessing\"", (uint8_t *)&v220, 2u);
  }
  v169 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v169, OS_LOG_TYPE_INFO))
  {
    marrs::mrr::MRRCPPPrintUtils::getMdResponseString((marrs::mrr::MRRCPPPrintUtils *)&v220, (const sirinluinternalmention_detector::MentionDetectorResponse *)v200);
    v170 = (v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v220
         : (std::string *)v220.__r_.__value_.__r.__words[0];
    LODWORD(v247.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 4) = (std::string::size_type)v170;
    _os_log_impl(&dword_1C281A000, v169, OS_LOG_TYPE_INFO, "MD Response - %s", (uint8_t *)&v247, 0xCu);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v220.__r_.__value_.__l.__data_);
  }
  if (v236.__r_.__value_.__r.__words[0])
  {
    v236.__r_.__value_.__l.__size_ = v236.__r_.__value_.__r.__words[0];
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  MEMORY[0x1C3BC5520](&v224);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (v61)
    operator delete(v61);
  if (v205)
    operator delete(v205);
  *(_QWORD *)buf = &v210;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_329:
  if (v212)
    MEMORY[0x1C3BC5598](v211);
}

void sub_1C288EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  void *v62;
  int v63;
  uint64_t v64;

  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (*(char *)(v64 - 185) < 0)
  {
    operator delete(*(void **)(v64 - 208));
    if ((v63 & 1) == 0)
    {
LABEL_8:
      if (a62 < 0)
        operator delete(a57);
      if (a20)
        operator delete(a20);
      a57 = &a33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
      MEMORY[0x1C3BC5598](a16);
      if (a41)
        MEMORY[0x1C3BC5598](&a36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v63)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v62);
  goto LABEL_8;
}

void marrs::mrr::md::MRRVisualAndScreenMentionDetector::~MRRVisualAndScreenMentionDetector(marrs::mrr::md::MRRVisualAndScreenMentionDetector *this)
{
  marrs::mrr::md::MRRVisualAndScreenMentionDetector::~MRRVisualAndScreenMentionDetector(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  *(_QWORD *)this = &off_1E7C67730;
  std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(*((_QWORD **)this + 18));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::unique_ptr<marrs::mrr::md::inference_engine::MentionDetectorModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)this + 4);
  *(_QWORD *)this = &unk_1E7C67780;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::mrr::md::inference_engine::MentionDetectorModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1)
{
  marrs::inference_engine::EspressoModule *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1C3BC5C7CLL);
  }
  return result;
}

void marrs::mrr::md::inference_engine::EspressoMentionDetectorModelInputType::~EspressoMentionDetectorModelInputType(marrs::mrr::md::inference_engine::EspressoMentionDetectorModelInputType *this)
{
  void *v2;

  MEMORY[0x1C3BC5520]((char *)this + 24);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void marrs::mrr::mr::MROrchestrator::resolveMentionsInUtterance(marrs::mrr::mr::MROrchestrator *this@<X0>, const sirinluinternalmention_resolver::MentionResolverRequest *a2@<X1>, sirinluinternalmention_resolver::MentionResolverResponse *a3@<X8>)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  std::string *v14;
  const std::string *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  _BYTE *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  std::string::size_type *p_size;
  uint64_t j;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  __int128 *v53;
  __int128 v54;
  NSObject *v55;
  std::string *v56;
  std::string::size_type v57;
  const std::locale::facet *v58;
  const std::locale::facet *v59;
  const std::locale::facet *v60;
  const sirinluinternal::MatchingSpan **v61;
  const sirinluinternal::MatchingSpan **v62;
  std::locale::id *v63;
  std::string *v64;
  std::string::size_type v65;
  const std::locale::facet *v66;
  const std::locale::facet *v67;
  const std::locale::facet *v68;
  const sirinluinternal::MatchingSpan **v69;
  const sirinluinternal::MatchingSpan **v70;
  std::locale::id *v71;
  std::string *v72;
  std::string::size_type v73;
  const std::locale::facet *v74;
  const std::locale::facet *v75;
  const std::locale::facet *v76;
  const sirinluinternal::MatchingSpan **v77;
  const sirinluinternal::MatchingSpan **v78;
  std::locale::id *v79;
  std::string *v80;
  std::string::size_type v81;
  const std::locale::facet *v82;
  const std::locale::facet *v83;
  uint64_t *v84;
  uint64_t *v85;
  std::string::size_type v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::string *v90;
  std::string::size_type v91;
  std::string *v92;
  std::string::size_type v93;
  const std::locale::facet *v94;
  std::string *p_sz;
  _QWORD *v96;
  int v97;
  _QWORD *v98;
  NSObject *v99;
  uint64_t v100;
  NSObject *v101;
  _BOOL8 v102;
  NSObject *v103;
  os_signpost_id_t v104;
  NSObject *v105;
  NSObject *v106;
  NSObject *v107;
  _BOOL8 v108;
  NSObject *v109;
  NSObject *v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  std::string *v114;
  uint64_t v115;
  int USONodeIndex;
  int v117;
  uint64_t v118;
  uint64_t v119;
  signed int v120;
  siri::ontology::oname::graph::ontology_init *v121;
  int v122;
  NSObject *v123;
  std::string *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t *v127;
  int v128;
  BOOL v129;
  uint64_t *v130;
  siri::ontology::oname::graph::ontology_init *v131;
  std::string::size_type v132;
  NSObject *v133;
  uint64_t v134;
  siri::ontology::oname::graph::ontology_init *v135;
  uint64_t v136;
  std::string *StringNodeValueNluGraph;
  int v138;
  siri::ontology::oname::graph::ontology_init *v139;
  std::string::value_type *v140;
  int v141;
  siri::ontology::oname::graph::ontology_init *v142;
  int v143;
  siri::ontology::oname::graph::ontology_init *v144;
  int v145;
  siri::ontology::oname::graph::ontology_init *v146;
  int v147;
  uint64_t v148;
  std::string *v149;
  int v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t *v154;
  std::string *v155;
  std::string::size_type v156;
  std::string::size_type v157;
  char v158;
  std::string::size_type v159;
  std::string *v160;
  std::string::size_type v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  const std::string *v166;
  const std::string *v167;
  int v168;
  std::string *v169;
  std::string::size_type v170;
  std::string::size_type v171;
  uint64_t v172;
  std::string *v174;
  int data;
  int v176;
  std::string *v178;
  _OWORD *v179;
  __int128 v180;
  std::vector<std::string>::pointer v181;
  uint64_t v182;
  uint64_t *v183;
  int v184;
  int v185;
  int v186;
  const std::string *v188;
  std::string::size_type v189;
  NSObject *v190;
  std::string *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  int v196;
  int v197;
  NSObject *v198;
  NSObject *v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  const std::string *v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  std::string *v212;
  __int128 v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  std::string *v219;
  std::string *v220;
  __int128 v221;
  std::string *v222;
  std::string *v223;
  std::string *v224;
  __int128 v225;
  int64x2_t v226;
  std::string *v227;
  uint64_t v228;
  uint64_t v229;
  const std::string *v230;
  NSObject *v231;
  NSObject *v232;
  const char *v233;
  NSObject *v234;
  NSObject *v235;
  _BYTE *v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  std::string::size_type v241;
  uint64_t v242;
  int64x2_t v243;
  unint64_t v244;
  uint64_t **v245;
  int v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int64x2_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t *v267;
  int v268;
  uint64_t *v269;
  double v270;
  uint64_t **v271;
  uint64_t **v272;
  uint64_t v273;
  std::string::size_type v274;
  float v275;
  double v276;
  std::string::size_type v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  NSObject *v282;
  _QWORD *v283;
  std::string::size_type v284;
  std::string::size_type v285;
  std::string::size_type v286;
  std::string::size_type v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  std::string::size_type v292;
  int64x2_t v293;
  std::string::size_type v294;
  NSObject *v295;
  NSObject *v296;
  NSObject *v297;
  NSObject *v298;
  std::string::size_type v299;
  uint64_t v300;
  NSObject *v301;
  sirinluinternal::MatchingSpan *k;
  std::string::size_type v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  sirinluinternal::MatchingSpan *v316;
  sirinluinternal::MatchingSpan *m;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  __int128 *v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  _QWORD *v339;
  unsigned __int8 *v340;
  unsigned __int8 *v341;
  NSObject *v342;
  std::string *v343;
  float v344;
  _QWORD *v345;
  std::string::size_type v346;
  std::string::size_type v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  NSObject *v352;
  std::string *v353;
  void *v354;
  unint64_t v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t *n;
  uint64_t v359;
  _DWORD *v360;
  uint64_t v361;
  uint64_t v362;
  NSObject *v363;
  std::string::size_type v364;
  std::string::size_type v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  unint64_t v373;
  unint64_t v374;
  uint8x8_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  unint64_t v381;
  uint8x8_t v382;
  unint64_t v383;
  _QWORD *v384;
  _QWORD *v385;
  unint64_t v386;
  _QWORD *v387;
  float v388;
  _BOOL8 v389;
  unint64_t v390;
  unint64_t v391;
  int8x8_t prime;
  void *v393;
  void *v394;
  uint64_t v395;
  _QWORD **v396;
  unint64_t v397;
  uint8x8_t v398;
  unint64_t v399;
  uint8x8_t v400;
  uint64_t v401;
  _QWORD *ii;
  unint64_t v403;
  std::string::size_type *v404;
  std::string::size_type v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  void *v410;
  NSObject *v411;
  NSObject *v412;
  _QWORD *exception;
  NSObject *v414;
  _QWORD *v415;
  void *v416;
  std::string::size_type v417;
  std::string::value_type *v418;
  uint64_t v420;
  const sirinluinternalmention_resolver::MentionResolverRequest *v421;
  int v422;
  _QWORD *v423;
  NSObject *v424;
  uint64_t v425;
  std::string::size_type v426;
  std::string::size_type v427;
  std::string v428;
  sirinluinternal::MatchingSpan *v429;
  std::string::size_type v430;
  int64x2_t v431;
  unint64_t v432;
  uint64_t *v433;
  uint64_t *v434;
  uint64_t v435;
  _BYTE v436[32];
  std::string v437;
  __int128 v438;
  void *__p;
  _BYTE v440[28];
  __int128 v441;
  std::string *v442;
  std::string v443;
  int v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  char v449;
  std::string __sz;
  uint64_t v451;
  std::string v452;
  std::string v453;
  std::string v454;
  _BYTE v455[56];
  _BYTE v456[28];
  char v457;
  std::string *v458[2];
  std::string *v459;
  std::string v460;
  int v461;
  __int128 v462;
  uint64_t v463;
  __int128 v464;
  uint64_t v465;
  char v466;
  _BYTE v467[56];
  std::string v468;
  _BYTE v469[28];
  __int128 v470;
  _QWORD v471[4];
  int v472;
  __int128 v473;
  _QWORD v474[11];
  std::string buf;
  std::string v476;
  __int128 v477;
  std::string v478;
  uint64_t v479;

  v479 = *MEMORY[0x1E0C80C00];
  sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(a3);
  v420 = (uint64_t)a3;
  if (!*((_QWORD *)a2 + 17))
  {
    v412 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v412, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v454.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Invalid Mention Resolver input: requestId not set";
      _os_log_impl(&dword_1C281A000, v412, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)&v454, 0xCu);
    }
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v454, "Invalid Mention Resolver input: requestId not set");
    std::string::basic_string[abi:ne180100]<0>(v436, "MultimodalReferenceResolution");
    IOContentError::IOContentError(exception, (uint64_t)&v454, (uint64_t)v436, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/MROrchestrator.cpp", 404);
  }
  v421 = a2;
  if (!*((_QWORD *)a2 + 8))
  {
    v414 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v414, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v454.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Invalid Mention Resolver input: no embeddingTensor in request";
      _os_log_impl(&dword_1C281A000, v414, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)&v454, 0xCu);
    }
    v415 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v454, "Invalid Mention Resolver input: no embeddingTensor in request");
    std::string::basic_string[abi:ne180100]<0>(v436, "MultimodalReferenceResolution");
    IOContentError::IOContentError(v415, (uint64_t)&v454, (uint64_t)v436, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/MROrchestrator.cpp", 408);
  }
  v433 = 0;
  v434 = 0;
  v435 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v476, "app_entity");
  *(_QWORD *)&v467[16] = 0;
  *(_QWORD *)&v467[8] = 0;
  *(_QWORD *)v467 = &v467[8];
  v5 = *((_QWORD *)a2 + 12);
  for (i = *((_QWORD *)a2 + 13); v5 != i; v5 += 8)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v5 + 64);
    if (v7)
    {
      memset(v436, 0, 24);
      v8 = *(_QWORD **)(v7 + 56);
      v9 = *(_QWORD **)(v7 + 64);
      while (v8 != v9)
      {
        MEMORY[0x1C3BC5460](&v454, *v8);
        if (v454.__r_.__value_.__r.__words[2])
        {
          v10 = *(unsigned __int8 **)(v454.__r_.__value_.__r.__words[2] + 8);
          if (v10)
          {
            v11 = v10[23];
            if ((v11 & 0x80u) == 0)
              v12 = v10[23];
            else
              v12 = *((_QWORD *)v10 + 1);
            size = HIBYTE(v476.__r_.__value_.__r.__words[2]);
            if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v476.__r_.__value_.__l.__size_;
            if (v12 == size)
            {
              if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v14 = &v476;
              else
                v14 = (std::string *)v476.__r_.__value_.__r.__words[0];
              if ((v11 & 0x80) != 0)
              {
                v16 = memcmp(*(const void **)v10, v14, *((_QWORD *)v10 + 1));
                v15 = *(const std::string **)&v455[8];
                if (v16)
                  v17 = 1;
                else
                  v17 = *(_QWORD *)&v455[8] == 0;
                if (!v17)
                {
LABEL_30:
                  std::string::operator=((std::string *)v436, v15);
                  MEMORY[0x1C3BC5478](&v454);
                  break;
                }
              }
              else if (v10[23])
              {
                while (*v10 == v14->__r_.__value_.__s.__data_[0])
                {
                  ++v10;
                  v14 = (std::string *)((char *)v14 + 1);
                  if (!--v11)
                    goto LABEL_22;
                }
              }
              else
              {
LABEL_22:
                v15 = *(const std::string **)&v455[8];
                if (*(_QWORD *)&v455[8])
                  goto LABEL_30;
              }
            }
          }
        }
        MEMORY[0x1C3BC5478](&v454);
        ++v8;
      }
      std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v467, v436, (uint64_t)v436);
      sirinluinternal::MatchingSpan::operator=();
      if ((v436[23] & 0x80000000) != 0)
        operator delete(*(void **)v436);
    }
  }
  if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v476.__r_.__value_.__l.__data_);
  *(_OWORD *)&v476.__r_.__value_.__r.__words[1] = 0uLL;
  v476.__r_.__value_.__r.__words[0] = (std::string::size_type)&v476.__r_.__value_.__l.__size_;
  v18 = *((_QWORD *)a2 + 9);
  v19 = *((_QWORD *)a2 + 10);
  while (v18 != v19)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v18 + 48);
    if (v20)
    {
      v21 = *(_QWORD **)(v20 + 8);
      if (v21)
      {
        std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v476, v21, *(_QWORD *)(v20 + 8));
        sirinluexternal::EntityCandidate::operator=();
      }
    }
    v18 += 8;
  }
  *(_OWORD *)&__sz.__r_.__value_.__r.__words[1] = 0uLL;
  __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz.__r_.__value_.__l.__size_;
  v22 = *(_BYTE **)v467;
  v478.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz;
  v478.__r_.__value_.__l.__size_ = (std::string::size_type)&__sz.__r_.__value_.__l.__size_;
  if (*(_BYTE **)v467 != &v467[8])
  {
    do
    {
      if ((char)v22[55] < 0)
        std::string::__init_copy_ctor_external(&v454, *((const std::string::value_type **)v22 + 4), *((_QWORD *)v22 + 5));
      else
        v454 = *(std::string *)(v22 + 32);
      MEMORY[0x1C3BC54C0](v455, v22 + 56);
      if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v436, v454.__r_.__value_.__l.__data_, v454.__r_.__value_.__l.__size_);
      else
        *(std::string *)v436 = v454;
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t *)&v478, v436);
      if ((v436[23] & 0x80000000) != 0)
        operator delete(*(void **)v436);
      MEMORY[0x1C3BC54D8](v455);
      if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v454.__r_.__value_.__l.__data_);
      v23 = (_QWORD *)*((_QWORD *)v22 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_BYTE *)*((_QWORD *)v22 + 2);
          v17 = *(_QWORD *)v24 == (_QWORD)v22;
          v22 = v24;
        }
        while (!v17);
      }
      v22 = v24;
    }
    while (v24 != &v467[8]);
  }
  *(_OWORD *)&v478.__r_.__value_.__r.__words[1] = 0uLL;
  v478.__r_.__value_.__r.__words[0] = (std::string::size_type)&v478.__r_.__value_.__l.__size_;
  v25 = v476.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v478;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v478.__r_.__value_.__l.__size_;
  if ((std::string::size_type *)v476.__r_.__value_.__l.__data_ == &v476.__r_.__value_.__r.__words[1])
  {
    p_size = &v478.__r_.__value_.__l.__size_;
  }
  else
  {
    do
    {
      if (*(char *)(v25 + 55) < 0)
        std::string::__init_copy_ctor_external(&v454, *(const std::string::value_type **)(v25 + 32), *(_QWORD *)(v25 + 40));
      else
        v454 = *(std::string *)(v25 + 32);
      MEMORY[0x1C3BC5400](v455, v25 + 56);
      if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v436, v454.__r_.__value_.__l.__data_, v454.__r_.__value_.__l.__size_);
      else
        *(std::string *)v436 = v454;
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t *)&buf, v436);
      if ((v436[23] & 0x80000000) != 0)
        operator delete(*(void **)v436);
      MEMORY[0x1C3BC5418](v455);
      if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v454.__r_.__value_.__l.__data_);
      v26 = *(std::string **)(v25 + 8);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (std::string *)v26->__r_.__value_.__r.__words[0];
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = *(std::string **)(v25 + 16);
          v17 = v27->__r_.__value_.__r.__words[0] == v25;
          v25 = (std::string::size_type)v27;
        }
        while (!v17);
      }
      v25 = (std::string::size_type)v27;
    }
    while (v27 != (std::string *)&v476.__r_.__value_.__r.__words[1]);
    p_size = (std::string::size_type *)v478.__r_.__value_.__r.__words[0];
  }
  memset(v436, 0, 24);
  std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::back_insert_iterator<std::vector<std::string>>>((std::vector<std::string> **)&v454, __sz.__r_.__value_.__l.__data_, &__sz.__r_.__value_.__l.__size_, p_size, &v478.__r_.__value_.__l.__size_, (std::vector<std::string> *)v436);
  v30 = *(_QWORD *)&v436[8];
  for (j = *(_QWORD *)v436; j != v30; j += 24)
  {
    if (std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v467, (_QWORD *)j, j)[13])
    {
      v31 = std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v467, (_QWORD *)j, j)[13];
      v32 = *((char *)v31 + 23);
      if (v32 < 0)
      {
        if (v31[1] == 9)
        {
          v31 = (uint64_t *)*v31;
LABEL_85:
          v33 = *v31;
          v34 = *((unsigned __int8 *)v31 + 8);
          if (v33 == 0x7469746E45707061 && v34 == 121)
          {
            v36 = std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v467, (_QWORD *)j, j);
            MEMORY[0x1C3BC54C0](&v454, v36 + 7);
            if (std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v476, (_QWORD *)j, j)[12])
            {
              v37 = std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v476, (_QWORD *)j, j)[12];
              v38 = operator new();
              v39 = MEMORY[0x1C3BC5490](v38, v37);
              v40 = *(_QWORD *)&v455[40];
              *(_QWORD *)&v455[40] = v39;
              if (v40)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            }
            v41 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
            {
              v42 = *(_QWORD *)&v455[8];
              if (*(char *)(*(_QWORD *)&v455[8] + 23) < 0)
                v42 = **(_QWORD **)&v455[8];
              v43 = j;
              if (*(char *)(j + 23) < 0)
                v43 = *(_QWORD *)j;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v42;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v43;
              _os_log_impl(&dword_1C281A000, v41, OS_LOG_TYPE_INFO, "found span \"%s\" in matching spans that matches with salient entity %s", (uint8_t *)&buf, 0x16u);
            }
            PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>(&v433, (uint64_t)&v454);
            MEMORY[0x1C3BC54D8](&v454);
          }
        }
      }
      else if (v32 == 9)
      {
        goto LABEL_85;
      }
    }
  }
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v436;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  std::__tree<std::string>::destroy((char *)v478.__r_.__value_.__l.__size_);
  std::__tree<std::string>::destroy((char *)__sz.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy((_QWORD *)v476.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(*(_QWORD **)&v467[8]);
  v44 = (uint64_t *)*((_QWORD *)v421 + 2);
  v45 = (uint64_t *)*((_QWORD *)v421 + 3);
  while (v44 != v45)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(&v433, *v44++);
  if (*((_QWORD *)v421 + 5) == *((_QWORD *)v421 + 6) && v433 == v434)
  {
    v55 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      LOWORD(v454.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C281A000, v55, OS_LOG_TYPE_INFO, "No mentions or contextual spans in request returning empty", (uint8_t *)&v454, 2u);
    }
    goto LABEL_876;
  }
  v46 = *((_QWORD *)v421 + 17);
  v47 = operator new();
  v48 = MEMORY[0x1C3BC5484](v47, v46);
  v49 = *((_QWORD *)a3 + 4);
  *((_QWORD *)a3 + 4) = v48;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = MRRLoggerForCategory(2);
  v51 = (_QWORD *)&loc_1C289D000;
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v467);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"MR Request", 10);
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v52 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"utterance - ", 12);
    v53 = (__int128 *)*((_QWORD *)v421 + 21);
    if (v53)
    {
      if (*((char *)v53 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v454, *(const std::string::value_type **)v53, *((_QWORD *)v53 + 1));
      }
      else
      {
        v54 = *v53;
        v454.__r_.__value_.__r.__words[2] = *((_QWORD *)v53 + 2);
        *(_OWORD *)&v454.__r_.__value_.__l.__data_ = v54;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v454, "NULL");
    }
    if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v454;
    else
      v56 = (std::string *)v454.__r_.__value_.__r.__words[0];
    if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
    else
      v57 = v454.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)v56, v57);
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v58 = std::locale::use_facet((const std::locale *)v436, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale((std::locale *)v436);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v454.__r_.__value_.__l.__data_);
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v59 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"Mentions in MR Request", 22);
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v60 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    v61 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)v421 + 5);
    v62 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)v421 + 6);
    if (v61 != v62)
    {
      v63 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        marrs::mrr::MRRCPPPrintUtils::getMatchingSpanString((marrs::mrr::MRRCPPPrintUtils *)&v454, *v61);
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v454;
        else
          v64 = (std::string *)v454.__r_.__value_.__r.__words[0];
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
        else
          v65 = v454.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)v64, v65);
        std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
        v66 = std::locale::use_facet((const std::locale *)v436, v63);
        ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
        std::locale::~locale((std::locale *)v436);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v454.__r_.__value_.__l.__data_);
        ++v61;
      }
      while (v61 != v62);
    }
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v67 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"Contextual Spans in MR Request", 30);
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v68 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    v69 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)v421 + 2);
    v70 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)v421 + 3);
    if (v69 != v70)
    {
      v71 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        marrs::mrr::MRRCPPPrintUtils::getMatchingSpanString((marrs::mrr::MRRCPPPrintUtils *)&v454, *v69);
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = &v454;
        else
          v72 = (std::string *)v454.__r_.__value_.__r.__words[0];
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
        else
          v73 = v454.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)v72, v73);
        std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
        v74 = std::locale::use_facet((const std::locale *)v436, v71);
        ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
        std::locale::~locale((std::locale *)v436);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v454.__r_.__value_.__l.__data_);
        ++v69;
      }
      while (v69 != v70);
    }
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v75 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"Matching Spans in MR Request", 28);
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v76 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    v77 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)v421 + 12);
    v78 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)v421 + 13);
    if (v77 != v78)
    {
      v79 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        marrs::mrr::MRRCPPPrintUtils::getMatchingSpanString((marrs::mrr::MRRCPPPrintUtils *)&v454, *v77);
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v454;
        else
          v80 = (std::string *)v454.__r_.__value_.__r.__words[0];
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
        else
          v81 = v454.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)v80, v81);
        std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
        v82 = std::locale::use_facet((const std::locale *)v436, v79);
        ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
        std::locale::~locale((std::locale *)v436);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v454.__r_.__value_.__l.__data_);
        ++v77;
      }
      while (v77 != v78);
    }
    std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
    v83 = std::locale::use_facet((const std::locale *)&v454, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
    std::locale::~locale((std::locale *)&v454);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"Entities (USOGraph and Respective Score) in MR Request\n", 55);
    v424 = v50;
    v85 = (uint64_t *)*((_QWORD *)v421 + 9);
    v84 = (uint64_t *)*((_QWORD *)v421 + 10);
    if (v85 != v84)
    {
      v86 = *MEMORY[0x1E0DE4F50];
      v427 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v426 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v87 = *MEMORY[0x1E0DE4F60];
      v425 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v88 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        v89 = *v85;
        marrs::mrr::MRRCPPPrintUtils::getUsoGraphDotString((marrs::mrr::MRRCPPPrintUtils *)&v454, *(const sirinluexternal::UsoGraph **)(*v85 + 40));
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v90 = &v454;
        else
          v90 = (std::string *)v454.__r_.__value_.__r.__words[0];
        if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v91 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
        else
          v91 = v454.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)v90, v91);
        if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v454.__r_.__value_.__l.__data_);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v454);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"score for entity - ", 19);
        if (*(_QWORD *)(v89 + 72))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v436);
          std::ostream::operator<<();
          std::stringbuf::str();
          *(_QWORD *)v436 = v87;
          *(_QWORD *)&v436[*(_QWORD *)(v87 - 24)] = v425;
          *(_QWORD *)&v436[8] = MEMORY[0x1E0DE4FB8] + 16;
          if ((v440[15] & 0x80000000) != 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1C3BC5BC8](&v441);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v476, "NULL");
        }
        if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = &v476;
        else
          v92 = (std::string *)v476.__r_.__value_.__r.__words[0];
        if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v93 = HIBYTE(v476.__r_.__value_.__r.__words[2]);
        else
          v93 = v476.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)v92, v93);
        std::ios_base::getloc((const std::ios_base *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)]);
        v94 = std::locale::use_facet((const std::locale *)v436, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
        std::locale::~locale((std::locale *)v436);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v476.__r_.__value_.__l.__data_);
        v454.__r_.__value_.__r.__words[0] = v86;
        *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + *(_QWORD *)(v86 - 24)) = v427;
        v454.__r_.__value_.__r.__words[2] = v426;
        *(_QWORD *)v455 = v88;
        if (v457 < 0)
          operator delete(*(void **)&v456[8]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3BC5BC8](&v459);
        ++v85;
      }
      while (v85 != v84);
    }
    std::stringbuf::str();
    *(_QWORD *)v467 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)&v467[*(_QWORD *)(*(_QWORD *)v467 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *(_QWORD *)&v467[8] = MEMORY[0x1E0DE4FB8] + 16;
    if ((v469[15] & 0x80000000) != 0)
      operator delete((void *)v468.__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BC5BC8](&v470);
    p_sz = &__sz;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
    v51 = &loc_1C289D000;
    LODWORD(v478.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v478.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_sz;
    _os_log_impl(&dword_1C281A000, v424, OS_LOG_TYPE_DEBUG, "Develop: %s", (uint8_t *)&v478, 0xCu);
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__sz.__r_.__value_.__l.__data_);
  }
  v431 = 0uLL;
  v432 = 0;
  v96 = (_QWORD *)*((_QWORD *)v421 + 9);
  v423 = (_QWORD *)*((_QWORD *)v421 + 10);
  if (v96 == v423)
  {
    memset(&buf, 0, sizeof(buf));
    *(_OWORD *)&v436[8] = 0uLL;
    *(_QWORD *)v436 = &v436[8];
    goto LABEL_618;
  }
  v97 = 0;
  v422 = v51[414];
  do
  {
    v98 = (_QWORD *)*v96;
    v99 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
    {
      LOWORD(v454.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C281A000, v99, OS_LOG_TYPE_INFO, "Converting USO Graph to MRR Entity with optimized converters", (uint8_t *)&v454, 2u);
    }
    v100 = v98[5];
    v101 = MRRLoggerForCategory(2);
    v102 = os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG);
    if (v102)
    {
      v103 = MRRLoggerForCategory(3);
      v104 = os_signpost_id_generate(v103);
      v105 = MRRLoggerForCategory(3);
      if (v104 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v106 = v105;
        if (os_signpost_enabled(v105))
        {
          LOWORD(v454.__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C281A000, v106, OS_SIGNPOST_INTERVAL_BEGIN, v104, "MRUsoDotStringForLogging", "", (uint8_t *)&v454, 2u);
        }
      }
      v107 = MRRLoggerForCategory(0);
      v108 = os_log_type_enabled(v107, OS_LOG_TYPE_INFO);
      if (v108)
      {
        LOWORD(v454.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v107, OS_LOG_TYPE_INFO, "BEGIN \"MRUsoDotStringForLogging\"", (uint8_t *)&v454, 2u);
      }
      marrs::mrr::mr::getUsoGraphProtoReader((marrs::mrr::mr *)v108);
      siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&marrs::mrr::mr::getUsoGraphProtoReader(void)::inst, (const sirinluexternal::UsoGraph *)v100);
      siri::ontology::UsoGraph::prettyPrint(*(siri::ontology::UsoGraph **)v467);
      v109 = MRRLoggerForCategory(3);
      if (v104 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v110 = v109;
        if (os_signpost_enabled(v109))
        {
          LOWORD(v476.__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C281A000, v110, OS_SIGNPOST_INTERVAL_END, v104, "MRUsoDotStringForLogging", " enableTelemetry=YES ", (uint8_t *)&v476, 2u);
        }
      }
      v111 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        LOWORD(v476.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v111, OS_LOG_TYPE_INFO, "END \"MRUsoDotStringForLogging\"", (uint8_t *)&v476, 2u);
      }
      v112 = *(_QWORD *)v467;
      *(_QWORD *)v467 = 0;
      if (v112)
      {
        v113 = MEMORY[0x1C3BC57FC]();
        MEMORY[0x1C3BC5C7C](v113, 0x10A0C403D23BABBLL);
      }
      v114 = &v454;
      if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v114 = (std::string *)v454.__r_.__value_.__r.__words[0];
      *(_DWORD *)v467 = v422;
      *(_QWORD *)&v467[4] = v114;
      _os_log_impl(&dword_1C281A000, v101, OS_LOG_TYPE_DEBUG, "Develop: %s", v467, 0xCu);
      if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v454.__r_.__value_.__l.__data_);
    }
    v115 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)v102);
    USONodeIndex = marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(v100 + 32), *(uint64_t **)(v100 + 40), -1, *(_DWORD *)(v115 + 36));
    if (USONodeIndex == -1)
    {
      v125 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v467 = 0;
        _os_log_impl(&dword_1C281A000, v125, OS_LOG_TYPE_INFO, "Could not find entity node in entity candidate nlu graph", v467, 2u);
      }
      v454.__r_.__value_.__s.__data_[0] = 0;
      v466 = 0;
LABEL_386:
      v436[0] = 0;
      v449 = 0;
LABEL_387:
      v454.__r_.__value_.__s.__data_[0] = 0;
      goto LABEL_388;
    }
    v117 = USONodeIndex;
    marrs::mrr::mr::getEntityDescendants((uint64_t *)&__sz, v100, USONodeIndex);
    *(_QWORD *)v467 = 0x50000001ELL;
    memset(&v467[8], 0, 48);
    *(_OWORD *)v469 = xmmword_1C289DFF0;
    *(_QWORD *)&v469[16] = 0x3FF0000000000000;
    memset(v471, 0, sizeof(v471));
    v470 = 0u;
    *(_DWORD *)&v469[24] = -1;
    v472 = -1;
    v473 = 0u;
    memset(v474, 0, 32);
    v118 = *(_QWORD *)(v100 + 80);
    v119 = *(_QWORD *)(v100 + 88) - v118;
    memset(&v468, 0, sizeof(v468));
    if (v117 >= (unint64_t)(v119 >> 3))
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    v120 = *(_DWORD *)(*(_QWORD *)(v118 + 8 * v117) + 72);
    v121 = (siri::ontology::oname::graph::ontology_init *)marrs::mrr::mr::mapNodeIdToMRREntityType((siri::ontology::oname::graph::ontology_init *)v120, (siri::ontology::oname::graph::ontology_init *)v100, (unint64_t *)&__sz);
    v122 = (int)v121;
    memset(&v453, 0, sizeof(v453));
    if ((_DWORD)v121 == 30)
    {
      std::string::basic_string[abi:ne180100]<0>(&v476, "Entity is unsupported entity for reference resolution");
      MRRLoggerForCategory(2);
      v123 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
      {
        v124 = &v476;
        if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v124 = (std::string *)v476.__r_.__value_.__r.__words[0];
        LODWORD(v478.__r_.__value_.__l.__data_) = v422;
        *(std::string::size_type *)((char *)v478.__r_.__value_.__r.__words + 4) = (std::string::size_type)v124;
        _os_log_impl(&dword_1C281A000, v123, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v478, 0xCu);
      }

      v454.__r_.__value_.__s.__data_[0] = 0;
      v466 = 0;
      if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v476.__r_.__value_.__l.__data_);
      goto LABEL_371;
    }
    v126 = qword_1ED7B1B38;
    if (qword_1ED7B1B38)
    {
      v127 = &qword_1ED7B1B38;
      do
      {
        v128 = *(_DWORD *)(v126 + 28);
        v129 = v128 < v120;
        if (v128 >= v120)
          v130 = (uint64_t *)v126;
        else
          v130 = (uint64_t *)(v126 + 8);
        if (!v129)
          v127 = (uint64_t *)v126;
        v126 = *v130;
      }
      while (*v130);
      if (v127 != &qword_1ED7B1B38 && v120 >= *((_DWORD *)v127 + 7))
      {
        v139 = (siri::ontology::oname::graph::ontology_init *)std::string::basic_string[abi:ne180100]<0>(&v476, "");
        v140 = &__sz.__r_.__value_.__s.__data_[16];
        do
        {
          v140 = *(std::string::value_type **)v140;
          if (!v140)
          {
            v478 = v476;
            goto LABEL_278;
          }
          v141 = *((_DWORD *)v140 + 4);
          v142 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::Argument_value(v139);
          if (v141 == *((_DWORD *)v142 + 9))
            break;
          v143 = *((_DWORD *)v140 + 4);
          v144 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::Argument_stringValue(v142);
          if (v143 == *((_DWORD *)v144 + 9))
            break;
          v145 = *((_DWORD *)v140 + 4);
          v146 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::Argument_name(v144);
          if (v145 == *((_DWORD *)v146 + 9))
            break;
          v147 = *((_DWORD *)v140 + 4);
          v139 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::Argument_names(v146);
        }
        while (v147 != *((_DWORD *)v139 + 9));
        marrs::mrr::mr::getStringNodeValueNluGraph(&v478, (const sirinluexternal::UsoGraph *)v100, *((_DWORD *)v140 + 5), -1, -1);
        if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v476.__r_.__value_.__l.__data_);
LABEL_278:
        if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v453.__r_.__value_.__l.__data_);
        *(_OWORD *)&v453.__r_.__value_.__l.__data_ = *(_OWORD *)&v478.__r_.__value_.__l.__data_;
        v132 = v478.__r_.__value_.__r.__words[2];
        goto LABEL_299;
      }
    }
    v131 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_PostalAddress(v121);
    if (v120 == *((_DWORD *)v131 + 9))
    {
      marrs::mrr::mr::getPostalAddressEntityValueNluGraph(&v476, (const sirinluexternal::UsoGraph *)v100, (uint64_t *)&__sz);
      if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v453.__r_.__value_.__l.__data_);
      *(_OWORD *)&v453.__r_.__value_.__l.__data_ = *(_OWORD *)&v476.__r_.__value_.__l.__data_;
      v132 = v476.__r_.__value_.__r.__words[2];
LABEL_299:
      v453.__r_.__value_.__r.__words[2] = v132;
      goto LABEL_300;
    }
    if (v120 == *(_DWORD *)(siri::ontology::oname::graph::ontology_init::common_LocalBusiness(v131) + 36))
    {
      MRRLoggerForCategory(2);
      v133 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
      {
        LOWORD(v476.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v133, OS_LOG_TYPE_INFO, "Calling local business optimized parser", (uint8_t *)&v476, 2u);
      }

      v134 = v451;
      v135 = (siri::ontology::oname::graph::ontology_init *)std::string::basic_string[abi:ne180100]<0>(&v452, "");
      if (!v134)
        goto LABEL_296;
      *(_DWORD *)((char *)&v429 + 3) = 0;
      LODWORD(v429) = 0;
      memset(&v478, 0, sizeof(v478));
      v136 = siri::ontology::oname::graph::ontology_init::Argument_name(v135);
      StringNodeValueNluGraph = (std::string *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>((uint64_t)__sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_, *(_DWORD *)(v136 + 36));
      if (StringNodeValueNluGraph)
      {
        StringNodeValueNluGraph = marrs::mrr::mr::getStringNodeValueNluGraph(&v476, (const sirinluexternal::UsoGraph *)v100, HIDWORD(StringNodeValueNluGraph->__r_.__value_.__r.__words[2]), -1, -1);
        v417 = v476.__r_.__value_.__l.__size_;
        v418 = (std::string::value_type *)v476.__r_.__value_.__r.__words[0];
        LODWORD(v429) = v476.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v429 + 3) = *(_DWORD *)((char *)&v476.__r_.__value_.__r.__words[2] + 3);
        v138 = HIBYTE(v476.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v138 = 0;
        v417 = 0;
        v418 = 0;
      }
      v148 = siri::ontology::oname::graph::ontology_init::Argument_specifyingContactAddress((siri::ontology::oname::graph::ontology_init *)StringNodeValueNluGraph);
      v149 = (std::string *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>((uint64_t)__sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_, *(_DWORD *)(v148 + 36));
      if (v149)
      {
        v150 = HIDWORD(v149->__r_.__value_.__r.__words[2]);
        v151 = siri::ontology::oname::graph::ontology_init::Argument_value((siri::ontology::oname::graph::ontology_init *)v149);
        v149 = marrs::mrr::mr::getStringNodeValueNluGraph(&v476, (const sirinluexternal::UsoGraph *)v100, -1, v150, *(_DWORD *)(v151 + 36));
        v416 = (void *)v476.__r_.__value_.__r.__words[0];
        v152 = HIBYTE(v476.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v152 = 0;
        v416 = 0;
      }
      v153 = siri::ontology::oname::graph::ontology_init::Argument_address((siri::ontology::oname::graph::ontology_init *)v149);
      v154 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>((uint64_t)__sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_, *(_DWORD *)(v153 + 36));
      if (v154)
      {
        marrs::mrr::mr::getEntityDescendants((uint64_t *)&v476, v100, *((_DWORD *)v154 + 5));
        marrs::mrr::mr::getPostalAddressEntityValueNluGraph(&buf, (const sirinluexternal::UsoGraph *)v100, (uint64_t *)&v476);
        v478 = buf;
        std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)&v476);
      }
      if ((v138 & 0x80) != 0)
      {
        if (v417)
        {
          std::string::__init_copy_ctor_external(&v476, v418, v417);
          goto LABEL_262;
        }
      }
      else if (v138)
      {
        v476.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
        v476.__r_.__value_.__l.__size_ = v417;
        LODWORD(v476.__r_.__value_.__r.__words[2]) = (_DWORD)v429;
        *(_DWORD *)((char *)&v476.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v429 + 3);
        *((_BYTE *)&v476.__r_.__value_.__s + 23) = v138;
        goto LABEL_262;
      }
      std::string::basic_string[abi:ne180100]<0>(&v476, "");
LABEL_262:
      if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v155 = &v476;
      else
        v155 = (std::string *)v476.__r_.__value_.__r.__words[0];
      if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v156 = HIBYTE(v476.__r_.__value_.__r.__words[2]);
      else
        v156 = v476.__r_.__value_.__l.__size_;
      std::string::append(&v452, (const std::string::value_type *)v155, v156);
      if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v476.__r_.__value_.__l.__data_);
      v157 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
      v158 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
      if ((v478.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v157 = v478.__r_.__value_.__l.__size_;
      if (v157)
      {
        v159 = HIBYTE(v452.__r_.__value_.__r.__words[2]);
        if ((v452.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v159 = v452.__r_.__value_.__l.__size_;
        if (v159)
        {
          std::operator+<char>();
        }
        else if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v476, v478.__r_.__value_.__l.__data_, v478.__r_.__value_.__l.__size_);
        }
        else
        {
          v476 = v478;
        }
        if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v160 = &v476;
        else
          v160 = (std::string *)v476.__r_.__value_.__r.__words[0];
        if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v161 = HIBYTE(v476.__r_.__value_.__r.__words[2]);
        else
          v161 = v476.__r_.__value_.__l.__size_;
        std::string::append(&v452, (const std::string::value_type *)v160, v161);
        if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v476.__r_.__value_.__l.__data_);
        v158 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
      }
      if (v158 < 0)
      {
        operator delete(v478.__r_.__value_.__l.__data_);
        if ((v152 & 0x80) == 0)
        {
LABEL_295:
          if ((v138 & 0x80) == 0)
          {
LABEL_296:
            if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v453.__r_.__value_.__l.__data_);
            *(_OWORD *)&v453.__r_.__value_.__l.__data_ = *(_OWORD *)&v452.__r_.__value_.__l.__data_;
            v132 = v452.__r_.__value_.__r.__words[2];
            goto LABEL_299;
          }
LABEL_534:
          operator delete(v418);
          goto LABEL_296;
        }
      }
      else if ((v152 & 0x80) == 0)
      {
        goto LABEL_295;
      }
      operator delete(v416);
      if ((v138 & 0x80) == 0)
        goto LABEL_296;
      goto LABEL_534;
    }
LABEL_300:
    *(_DWORD *)v467 = v122;
    std::string::operator=((std::string *)&v467[8], &v453);
    std::string::basic_string[abi:ne180100]<0>(&v476, "");
    std::string::basic_string[abi:ne180100]<0>(&v478, "");
    v162 = *(_QWORD *)(v100 + 56);
    v163 = *(_QWORD *)(v100 + 64);
    while (v162 != v163)
    {
      v164 = *(_QWORD **)v162;
      if (*(_DWORD *)(*(_QWORD *)v162 + 48) != v117)
        goto LABEL_343;
      v165 = v164[2];
      if (v165)
      {
        v166 = *(const std::string **)(v165 + 8);
        if (v166)
          std::string::operator=(&v478, v166);
      }
      v167 = (const std::string *)v164[4];
      if (v167)
        std::string::operator=(&v476, v167);
      v168 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
      {
        v170 = v478.__r_.__value_.__l.__size_;
        if (v478.__r_.__value_.__l.__size_ != 15)
          goto LABEL_322;
        v169 = (std::string *)v478.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(v478.__r_.__value_.__r.__words[2]) != 15)
          goto LABEL_318;
        v169 = &v478;
      }
      v171 = v169->__r_.__value_.__r.__words[0];
      v172 = *(std::string::size_type *)((char *)v169->__r_.__value_.__r.__words + 7);
      if (v171 == 0x69746E655F707061 && v172 == 0x657079745F797469)
      {
        std::string::operator=((std::string *)&v473, &v476);
        v168 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&v478.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_318:
          if (v168 != 7)
            goto LABEL_329;
          v174 = &v478;
          goto LABEL_324;
        }
      }
      else if ((*((_BYTE *)&v478.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        goto LABEL_318;
      }
      v170 = v478.__r_.__value_.__l.__size_;
LABEL_322:
      if (v170 != 7)
        goto LABEL_333;
      v174 = (std::string *)v478.__r_.__value_.__r.__words[0];
LABEL_324:
      data = (int)v174->__r_.__value_.__l.__data_;
      v176 = *(_DWORD *)((char *)v174->__r_.__value_.__r.__words + 3);
      if (data == 1835365481 && v176 == 1684627309)
      {
        std::string::operator=(&v468, &v476);
        v168 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&v478.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_329:
          if (v168 != 8)
            goto LABEL_343;
          v178 = &v478;
          goto LABEL_335;
        }
      }
      else if ((v168 & 0x80) == 0)
      {
        goto LABEL_329;
      }
      v170 = v478.__r_.__value_.__l.__size_;
LABEL_333:
      if (v170 != 8)
        goto LABEL_343;
      v178 = (std::string *)v478.__r_.__value_.__r.__words[0];
LABEL_335:
      if (v178->__r_.__value_.__r.__words[0] == 0x6C6F636F746F7270)
      {
        v179 = (_OWORD *)v474[2];
        if (v474[2] >= v474[3])
        {
          v181 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((std::vector<std::string> *)&v474[1], (__int128 *)&v476);
        }
        else
        {
          if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v474[2], v476.__r_.__value_.__l.__data_, v476.__r_.__value_.__l.__size_);
          }
          else
          {
            v180 = *(_OWORD *)&v476.__r_.__value_.__l.__data_;
            *(_QWORD *)(v474[2] + 16) = *((_QWORD *)&v476.__r_.__value_.__l + 2);
            *v179 = v180;
          }
          v181 = (std::vector<std::string>::pointer)((char *)v179 + 24);
        }
        v474[2] = v181;
      }
LABEL_343:
      v182 = v164[2];
      if (v182)
      {
        v183 = *(uint64_t **)(v182 + 8);
        if (v183)
        {
          v184 = *((char *)v183 + 23);
          if (v184 < 0)
          {
            if (v183[1] != 7)
              goto LABEL_357;
            v183 = (uint64_t *)*v183;
          }
          else if (v184 != 7)
          {
            goto LABEL_357;
          }
          v185 = *(_DWORD *)v183;
          v186 = *(_DWORD *)((char *)v183 + 3);
          if (v185 == 1835365481 && v186 == 1684627309)
          {
            v188 = (const std::string *)v164[1];
            if (v188)
              std::string::operator=((std::string *)&v467[32], v188);
          }
        }
      }
LABEL_357:
      v162 += 8;
    }
    v189 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
    if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v189 = v468.__r_.__value_.__l.__size_;
    if (!v189)
    {
      MRRLoggerForCategory(0);
      v190 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
      {
        v191 = &v476;
        if ((v476.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v191 = (std::string *)v476.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = v422;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v191;
        _os_log_impl(&dword_1C281A000, v190, OS_LOG_TYPE_ERROR, "Entity USO UsoIdentifiers doesn't contain item_id namespace. Identifier value: %s", (uint8_t *)&buf, 0xCu);
      }

    }
    if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v478.__r_.__value_.__l.__data_);
    if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v476.__r_.__value_.__l.__data_);
    v454 = *(std::string *)v467;
    *(_QWORD *)v455 = *(_QWORD *)&v467[24];
    memset(&v467[8], 0, 48);
    *(_OWORD *)&v455[8] = *(_OWORD *)&v467[32];
    *(_QWORD *)&v455[24] = *(_QWORD *)&v467[48];
    *(std::string *)&v455[32] = v468;
    memset(&v468, 0, sizeof(v468));
    *(_OWORD *)&v456[12] = *(_OWORD *)&v469[12];
    *(_OWORD *)v456 = *(_OWORD *)v469;
    *(_OWORD *)v458 = v470;
    v459 = (std::string *)v471[0];
    v470 = 0uLL;
    memset(v471, 0, sizeof(v471));
    v460 = *(std::string *)&v471[1];
    v461 = v472;
    v463 = v474[0];
    v462 = v473;
    v473 = 0uLL;
    memset(v474, 0, 32);
    v464 = *(_OWORD *)&v474[1];
    v465 = v474[3];
    v466 = 1;
LABEL_371:
    if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v453.__r_.__value_.__l.__data_);
    v476.__r_.__value_.__r.__words[0] = (std::string::size_type)&v474[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v476);
    if (SHIBYTE(v474[0]) < 0)
      operator delete((void *)v473);
    if (SHIBYTE(v471[3]) < 0)
      operator delete((void *)v471[1]);
    v476.__r_.__value_.__r.__words[0] = (std::string::size_type)&v470;
    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)&v476);
    if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v468.__r_.__value_.__l.__data_);
    if ((v467[55] & 0x80000000) != 0)
      operator delete(*(void **)&v467[32]);
    if ((v467[31] & 0x80000000) != 0)
      operator delete(*(void **)&v467[8]);
    std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)&__sz);
    if (!v466)
      goto LABEL_386;
    v192 = v98[9];
    if (v192)
    {
      v193 = *(_QWORD *)(v192 + 8);
      goto LABEL_404;
    }
    v194 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v467 = 0;
      _os_log_impl(&dword_1C281A000, v194, OS_LOG_TYPE_INFO, "Entity Candidate does not have score. Assigning default 0 to saliency score", v467, 2u);
    }
    v193 = 0;
    if (!v466)
      goto LABEL_879;
LABEL_404:
    *(_QWORD *)&v456[16] = v193;
    v195 = v98[8];
    if (v195)
    {
      if ((*(_BYTE *)(v195 + 44) & 1) != 0)
      {
        v196 = *(_DWORD *)(v195 + 40);
        if ((v196 - 1) >= 5)
        {
          v198 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v198, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v467 = 67109120;
            *(_DWORD *)&v467[4] = v196;
            _os_log_impl(&dword_1C281A000, v198, OS_LOG_TYPE_INFO, "Source of entity not in EntitySource enum - %d", v467, 8u);
          }
          v197 = 5;
        }
        else
        {
          v197 = dword_1C289E9CC[v196 - 1];
        }
        HIDWORD(v454.__r_.__value_.__r.__words[0]) = v197;
        v199 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v199, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v467 = 67109120;
          *(_DWORD *)&v467[4] = HIDWORD(v454.__r_.__value_.__r.__words[0]);
          _os_log_impl(&dword_1C281A000, v199, OS_LOG_TYPE_INFO, "Entity source added - %u", v467, 8u);
        }
      }
      v200 = *(_QWORD *)(v195 + 8);
      if (v200)
      {
        *(_DWORD *)v456 = marrs::mrr::mr::getRectangleFromRRBoundingBox(v200).n128_u32[0];
        *(_DWORD *)&v456[4] = v201;
        *(_DWORD *)&v456[8] = v202;
        *(_DWORD *)&v456[12] = v203;
      }
      v204 = *(uint64_t **)(v195 + 16);
      v205 = *(uint64_t **)(v195 + 24);
      while (v204 != v205)
      {
        v206 = *v204;
        std::string::basic_string[abi:ne180100]<0>(&__sz, "");
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v476, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          v477 = xmmword_1C289DFF0;
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__sz.__r_.__value_.__l.__data_);
        }
        else
        {
          v476 = __sz;
          v477 = xmmword_1C289DFF0;
        }
        v207 = *(const std::string **)(v206 + 16);
        if (v207)
          std::string::operator=(&v476, v207);
        v208 = *(_QWORD *)(v206 + 8);
        if (v208)
        {
          LODWORD(v477) = marrs::mrr::mr::getRectangleFromRRBoundingBox(v208).n128_u32[0];
          *(_QWORD *)((char *)&v477 + 4) = __PAIR64__(v210, v209);
          HIDWORD(v477) = v211;
        }
        v212 = v458[1];
        if (v458[1] >= v459)
        {
          v214 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v458[1] - (char *)v458[0]) >> 3);
          v215 = v214 + 1;
          if (v214 + 1 > 0x666666666666666)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * (((char *)v459 - (char *)v458[0]) >> 3) > v215)
            v215 = 0x999999999999999ALL * (((char *)v459 - (char *)v458[0]) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v459 - (char *)v458[0]) >> 3) >= 0x333333333333333)
            v216 = 0x666666666666666;
          else
            v216 = v215;
          *(_QWORD *)&v467[32] = &v459;
          if (v216)
          {
            v218 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>>(v216);
          }
          else
          {
            v218 = 0;
            v217 = 0;
          }
          v220 = (std::string *)&v218[40 * v214];
          *(_QWORD *)v467 = v218;
          *(_QWORD *)&v467[8] = v220;
          *(_QWORD *)&v467[16] = v220;
          *(_QWORD *)&v467[24] = &v218[40 * v217];
          if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v220, v476.__r_.__value_.__l.__data_, v476.__r_.__value_.__l.__size_);
            v220 = *(std::string **)&v467[16];
          }
          else
          {
            v221 = *(_OWORD *)&v476.__r_.__value_.__l.__data_;
            v220->__r_.__value_.__r.__words[2] = v476.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v220->__r_.__value_.__l.__data_ = v221;
          }
          *(_OWORD *)&v218[40 * v214 + 24] = v477;
          v219 = (std::string *)((char *)v220 + 40);
          *(_QWORD *)&v467[16] = (char *)v220 + 40;
          v222 = v458[1];
          v223 = v458[0];
          v224 = *(std::string **)&v467[8];
          if (v458[1] == v458[0])
          {
            v226 = vdupq_n_s64((unint64_t)v458[1]);
          }
          else
          {
            do
            {
              v225 = *(_OWORD *)&v222[-2].__r_.__value_.__r.__words[1];
              v224[-1].__r_.__value_.__r.__words[0] = v222[-1].__r_.__value_.__r.__words[0];
              *(_OWORD *)&v224[-2].__r_.__value_.__r.__words[1] = v225;
              v222[-2].__r_.__value_.__r.__words[2] = 0;
              v222[-1].__r_.__value_.__r.__words[0] = 0;
              v222[-2].__r_.__value_.__l.__size_ = 0;
              *(_OWORD *)&v224[-1].__r_.__value_.__r.__words[1] = *(_OWORD *)&v222[-1].__r_.__value_.__r.__words[1];
              v224 = (std::string *)((char *)v224 - 40);
              v222 = (std::string *)((char *)v222 - 40);
            }
            while (v222 != v223);
            v226 = *(int64x2_t *)v458;
            v219 = *(std::string **)&v467[16];
          }
          v458[0] = v224;
          v458[1] = v219;
          *(int64x2_t *)&v467[8] = v226;
          v227 = v459;
          v459 = *(std::string **)&v467[24];
          *(_QWORD *)&v467[24] = v227;
          *(_QWORD *)v467 = v226.i64[0];
          std::__split_buffer<marrs::mrr::mr::SurroundingText>::~__split_buffer((uint64_t)v467);
        }
        else
        {
          if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v458[1], v476.__r_.__value_.__l.__data_, v476.__r_.__value_.__l.__size_);
          }
          else
          {
            v213 = *(_OWORD *)&v476.__r_.__value_.__l.__data_;
            v458[1]->__r_.__value_.__r.__words[2] = v476.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v212->__r_.__value_.__l.__data_ = v213;
          }
          *(_OWORD *)&v212[1].__r_.__value_.__l.__data_ = v477;
          v219 = (std::string *)((char *)v212 + 40);
        }
        v458[1] = v219;
        if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v476.__r_.__value_.__l.__data_);
        ++v204;
      }
    }
    v228 = v98[7];
    if (!v228)
      goto LABEL_456;
    v229 = *(_QWORD *)(v228 + 8);
    if (v229 && (v230 = *(const std::string **)(v229 + 8)) != 0)
    {
      if (!v466)
        goto LABEL_879;
      std::string::operator=(&v460, v230);
      v228 = v98[7];
      if (v228)
        goto LABEL_455;
LABEL_456:
      if (!v466)
LABEL_879:
        std::__throw_bad_optional_access[abi:ne180100]();
    }
    else
    {
LABEL_455:
      if ((*(_BYTE *)(v228 + 20) & 1) == 0)
        goto LABEL_456;
      if (!v466)
        goto LABEL_879;
      v461 = *(_DWORD *)(v228 + 16);
    }
    if (HIDWORD(v454.__r_.__value_.__r.__words[0]) == 4)
    {
      if (LODWORD(v454.__r_.__value_.__l.__data_) == 23)
      {
        *(double *)&v456[16] = *(double *)&v456[16] * 0.5;
        v231 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v231, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v467 = 0;
          v232 = v231;
          v233 = "Saliency score adjusted using VISUAL_APP_SALIENCY_FACTOR";
          goto LABEL_466;
        }
      }
      else
      {
        *(double *)&v456[16] = *(double *)&v456[16] * 1.3;
        v234 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v467 = 0;
          v232 = v234;
          v233 = "Saliency score adjusted using VISUAL_ENTITY_SALIENCY_FACTOR";
LABEL_466:
          _os_log_impl(&dword_1C281A000, v232, OS_LOG_TYPE_INFO, v233, v467, 2u);
        }
      }
    }
    v235 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v235, OS_LOG_TYPE_INFO))
    {
      if (!v466)
        std::__throw_bad_optional_access[abi:ne180100]();
      marrs::mrr::mr::MRREntity::getDebugDescription((marrs::mrr::mr::MRREntity *)v467, (int *)&v454);
      v236 = v467;
      if (v467[23] < 0)
        v236 = *(_BYTE **)v467;
      LODWORD(v476.__r_.__value_.__l.__data_) = v422;
      *(std::string::size_type *)((char *)v476.__r_.__value_.__r.__words + 4) = (std::string::size_type)v236;
      _os_log_impl(&dword_1C281A000, v235, OS_LOG_TYPE_INFO, "MRREntity from USOGraph - %s", (uint8_t *)&v476, 0xCu);
      if ((v467[23] & 0x80000000) != 0)
        operator delete(*(void **)v467);
    }
    v436[0] = 0;
    v449 = 0;
    if (!v466)
      goto LABEL_387;
    *(std::string *)v436 = v454;
    *(_QWORD *)&v436[24] = *(_QWORD *)v455;
    *(_OWORD *)&v454.__r_.__value_.__r.__words[1] = 0uLL;
    memset(v455, 0, sizeof(v455));
    v437 = *(std::string *)&v455[8];
    __p = *(void **)&v455[48];
    v438 = *(_OWORD *)&v455[32];
    *(_OWORD *)&v440[12] = *(_OWORD *)&v456[12];
    *(_OWORD *)v440 = *(_OWORD *)v456;
    v441 = *(_OWORD *)v458;
    v442 = v459;
    v458[0] = 0;
    v458[1] = 0;
    v459 = 0;
    v443 = v460;
    memset(&v460, 0, sizeof(v460));
    v444 = v461;
    v446 = v463;
    v445 = v462;
    v462 = 0uLL;
    v463 = 0;
    v447 = v464;
    v448 = v465;
    v464 = 0uLL;
    v465 = 0;
    v449 = 1;
    *(_QWORD *)v467 = &v464;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v467);
    if (SHIBYTE(v463) < 0)
      operator delete((void *)v462);
    if (SHIBYTE(v460.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v460.__r_.__value_.__l.__data_);
    *(_QWORD *)v467 = v458;
    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)v467);
    if ((v455[55] & 0x80000000) != 0)
      operator delete(*(void **)&v455[32]);
    if ((v455[31] & 0x80000000) != 0)
      operator delete(*(void **)&v455[8]);
    if ((v455[7] & 0x80000000) != 0)
      operator delete((void *)v454.__r_.__value_.__l.__size_);
    if (!v449)
      goto LABEL_387;
    *(_DWORD *)&v440[24] = v97;
    if (v431.i64[1] >= v432)
    {
      v238 = 0x84BDA12F684BDA13 * ((v431.i64[1] - v431.i64[0]) >> 3) + 1;
      if (v238 > 0x12F684BDA12F684)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x97B425ED097B426 * ((uint64_t)(v432 - v431.i64[0]) >> 3) > v238)
        v238 = 0x97B425ED097B426 * ((uint64_t)(v432 - v431.i64[0]) >> 3);
      v239 = (char *)(0x84BDA12F684BDA13 * ((uint64_t)(v432 - v431.i64[0]) >> 3) >= 0x97B425ED097B42
                    ? 0x12F684BDA12F684
                    : v238);
      *(_QWORD *)&v455[8] = &v432;
      if (v239)
        v239 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>((unint64_t)v239);
      else
        v240 = 0;
      v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
      v454.__r_.__value_.__l.__size_ = (std::string::size_type)&v239[8 * ((v431.i64[1] - v431.i64[0]) >> 3)];
      v454.__r_.__value_.__r.__words[2] = v454.__r_.__value_.__l.__size_;
      *(_QWORD *)v455 = &v239[216 * v240];
      marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v454.__r_.__value_.__l.__size_, (const marrs::mrr::mr::MRREntity *)v436);
      v241 = v454.__r_.__value_.__l.__size_;
      v237 = v454.__r_.__value_.__r.__words[2] + 216;
      v454.__r_.__value_.__r.__words[2] += 216;
      v242 = v431.i64[1];
      if (v431.i64[1] == v431.i64[0])
      {
        v243 = vdupq_n_s64(v431.u64[1]);
      }
      else
      {
        do
        {
          v241 -= 216;
          v242 -= 216;
          std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v241, v242);
        }
        while (v242 != v431.i64[0]);
        v243 = v431;
        v237 = v454.__r_.__value_.__r.__words[2];
      }
      v431.i64[0] = v241;
      v431.i64[1] = v237;
      *(int64x2_t *)&v454.__r_.__value_.__r.__words[1] = v243;
      v244 = v432;
      v432 = *(_QWORD *)v455;
      *(_QWORD *)v455 = v244;
      v454.__r_.__value_.__r.__words[0] = v243.i64[0];
      std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)&v454);
    }
    else
    {
      marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v431.i64[1], (const marrs::mrr::mr::MRREntity *)v436);
      v237 = v431.i64[1] + 216;
    }
    v431.i64[1] = v237;
    if (!v449)
      goto LABEL_387;
    if (*(_DWORD *)v436 != 5)
      goto LABEL_387;
    v245 = (uint64_t **)v447;
    if (*((_QWORD *)&v447 + 1) == (_QWORD)v447)
      goto LABEL_387;
    while (2)
    {
      v246 = *((char *)v245 + 23);
      if (v246 < 0)
      {
        if (v245[1] != (uint64_t *)20)
          goto LABEL_516;
        v247 = *v245;
      }
      else
      {
        v247 = (uint64_t *)v245;
        if (v246 != 20)
          goto LABEL_516;
      }
      v248 = *v247;
      v249 = v247[1];
      v250 = *((_DWORD *)v247 + 4);
      if (v248 != 0x52746361746E6F43 || v249 != 0x746E657365727065 || v250 != 1701601889)
      {
LABEL_516:
        v245 += 3;
        if (v245 == *((uint64_t ***)&v447 + 1))
          goto LABEL_388;
        continue;
      }
      break;
    }
    memset(&v468, 0, sizeof(v468));
    memset(&v467[8], 0, 48);
    *(_OWORD *)v469 = xmmword_1C289DFF0;
    *(_QWORD *)&v469[16] = 0x3FF0000000000000;
    v470 = 0u;
    memset(v471, 0, sizeof(v471));
    v473 = 0u;
    memset(v474, 0, 32);
    *(_QWORD *)v467 = 0x500000001;
    v472 = -1;
    *(_DWORD *)&v469[24] = *(_DWORD *)&v440[24];
    std::string::operator=((std::string *)&v467[32], &v437);
    if (!v449)
      std::__throw_bad_optional_access[abi:ne180100]();
    *(_DWORD *)&v467[4] = *(_DWORD *)&v436[4];
    *(_QWORD *)&v469[16] = *(_QWORD *)&v440[16];
    v454 = *(std::string *)v467;
    *(_QWORD *)v455 = *(_QWORD *)&v467[24];
    memset(&v467[8], 0, 48);
    *(_OWORD *)&v455[8] = *(_OWORD *)&v467[32];
    *(_QWORD *)&v455[24] = *(_QWORD *)&v467[48];
    *(std::string *)&v455[32] = v468;
    memset(&v468, 0, sizeof(v468));
    *(_OWORD *)&v456[12] = *(_OWORD *)&v469[12];
    *(_OWORD *)v456 = *(_OWORD *)v469;
    *(_OWORD *)v458 = v470;
    v459 = (std::string *)v471[0];
    v470 = 0uLL;
    memset(v471, 0, sizeof(v471));
    v460 = *(std::string *)&v471[1];
    v461 = v472;
    v463 = v474[0];
    v462 = v473;
    v473 = 0uLL;
    memset(v474, 0, 32);
    v464 = *(_OWORD *)&v474[1];
    v465 = v474[3];
    v466 = 1;
    v476.__r_.__value_.__r.__words[0] = (std::string::size_type)&v474[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v476);
    if (SHIBYTE(v474[0]) < 0)
      operator delete((void *)v473);
    if (SHIBYTE(v471[3]) < 0)
      operator delete((void *)v471[1]);
    v476.__r_.__value_.__r.__words[0] = (std::string::size_type)&v470;
    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)&v476);
    if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v468.__r_.__value_.__l.__data_);
    if ((v467[55] & 0x80000000) != 0)
      operator delete(*(void **)&v467[32]);
    if ((v467[31] & 0x80000000) != 0)
      operator delete(*(void **)&v467[8]);
    if (v466)
    {
      if (v431.i64[1] >= v432)
      {
        v254 = 0x84BDA12F684BDA13 * ((v431.i64[1] - v431.i64[0]) >> 3) + 1;
        if (v254 > 0x12F684BDA12F684)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x97B425ED097B426 * ((uint64_t)(v432 - v431.i64[0]) >> 3) > v254)
          v254 = 0x97B425ED097B426 * ((uint64_t)(v432 - v431.i64[0]) >> 3);
        if (0x84BDA12F684BDA13 * ((uint64_t)(v432 - v431.i64[0]) >> 3) >= 0x97B425ED097B42)
          v255 = 0x12F684BDA12F684;
        else
          v255 = v254;
        *(_QWORD *)&v467[32] = &v432;
        if (v255)
          v255 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v255);
        else
          v256 = 0;
        *(_QWORD *)v467 = v255;
        *(_QWORD *)&v467[8] = v255 + 8 * ((v431.i64[1] - v431.i64[0]) >> 3);
        *(_QWORD *)&v467[16] = *(_QWORD *)&v467[8];
        *(_QWORD *)&v467[24] = v255 + 216 * v256;
        marrs::mrr::mr::MRREntity::MRREntity(*(marrs::mrr::mr::MRREntity **)&v467[8], (const marrs::mrr::mr::MRREntity *)&v454);
        v257 = *(_QWORD *)&v467[8];
        v253 = *(_QWORD *)&v467[16] + 216;
        *(_QWORD *)&v467[16] += 216;
        v258 = v431.i64[1];
        if (v431.i64[1] == v431.i64[0])
        {
          v259 = vdupq_n_s64(v431.u64[1]);
        }
        else
        {
          do
          {
            v257 -= 216;
            v258 -= 216;
            std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v257, v258);
          }
          while (v258 != v431.i64[0]);
          v259 = v431;
          v253 = *(_QWORD *)&v467[16];
        }
        v431.i64[0] = v257;
        v431.i64[1] = v253;
        *(int64x2_t *)&v467[8] = v259;
        v260 = v432;
        v432 = *(_QWORD *)&v467[24];
        *(_QWORD *)&v467[24] = v260;
        *(_QWORD *)v467 = v259.i64[0];
        std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)v467);
      }
      else
      {
        marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v431.i64[1], (const marrs::mrr::mr::MRREntity *)&v454);
        v253 = v431.i64[1] + 216;
      }
      v431.i64[1] = v253;
      if (v466)
      {
        *(_QWORD *)v467 = &v464;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v467);
        if (SHIBYTE(v463) < 0)
          operator delete((void *)v462);
        if (SHIBYTE(v460.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v460.__r_.__value_.__l.__data_);
        *(_QWORD *)v467 = v458;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)v467);
        if ((v455[55] & 0x80000000) != 0)
          operator delete(*(void **)&v455[32]);
        if ((v455[31] & 0x80000000) != 0)
          operator delete(*(void **)&v455[8]);
        if ((v455[7] & 0x80000000) != 0)
          operator delete((void *)v454.__r_.__value_.__l.__size_);
      }
    }
LABEL_388:
    if (v449)
    {
      v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v447;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
      if (SHIBYTE(v446) < 0)
        operator delete((void *)v445);
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
      v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v441;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
      if (SHIBYTE(__p) < 0)
        operator delete((void *)v438);
      if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v437.__r_.__value_.__l.__data_);
      if ((v436[31] & 0x80000000) != 0)
        operator delete(*(void **)&v436[8]);
    }
    ++v97;
    ++v96;
  }
  while (v96 != v423);
  v262 = v431.i64[1];
  v261 = v431.i64[0];
  memset(&buf, 0, sizeof(buf));
  *(_OWORD *)&v436[8] = 0uLL;
  *(_QWORD *)v436 = &v436[8];
  if (v431.i64[0] == v431.i64[1])
  {
LABEL_618:
    memset(&v453, 0, sizeof(v453));
    goto LABEL_619;
  }
  do
  {
    if (*(_DWORD *)(v261 + 4))
      goto LABEL_573;
    v263 = *(_QWORD *)&v436[8];
    v264 = *(_DWORD *)v261;
    if (!*(_QWORD *)&v436[8])
      goto LABEL_571;
    v265 = (uint64_t *)&v436[8];
    do
    {
      v266 = (uint64_t *)v263;
      v267 = v265;
      v268 = *(_DWORD *)(v263 + 32);
      v269 = (uint64_t *)(v263 + 8);
      if (v268 >= v264)
      {
        v269 = v266;
        v265 = v266;
      }
      v263 = *v269;
    }
    while (v263);
    if (v265 == (uint64_t *)&v436[8])
      goto LABEL_571;
    if (v268 < v264)
      v266 = v267;
    if (v264 < *((_DWORD *)v266 + 8))
    {
LABEL_571:
      v270 = *(double *)(v261 + 96);
      v271 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,double>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,double>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,double>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v436, v264, (_DWORD *)v261);
LABEL_572:
      *((double *)v271 + 5) = v270;
      goto LABEL_573;
    }
    v272 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,double>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,double>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,double>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v436, v264, (_DWORD *)v261);
    v270 = *(double *)(v261 + 96);
    if (*((double *)v272 + 5) < v270)
    {
      v271 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,double>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,double>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,double>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v436, *(_DWORD *)v261, (_DWORD *)v261);
      goto LABEL_572;
    }
LABEL_573:
    v261 += 216;
  }
  while (v261 != v262);
  v273 = v431.i64[0];
  memset(&v453, 0, sizeof(v453));
  if (v431.i64[0] != v431.i64[1])
  {
    do
    {
      if (*(_DWORD *)(v273 + 4))
      {
        v274 = v453.__r_.__value_.__l.__size_;
        if (v453.__r_.__value_.__l.__size_ >= v453.__r_.__value_.__r.__words[2])
        {
          v278 = 0x84BDA12F684BDA13
               * ((uint64_t)(v453.__r_.__value_.__l.__size_ - v453.__r_.__value_.__r.__words[0]) >> 3);
          v279 = v278 + 1;
          if (v278 + 1 > 0x12F684BDA12F684)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x97B425ED097B426
             * ((uint64_t)(v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0]) >> 3) > v279)
            v279 = 0x97B425ED097B426
                 * ((uint64_t)(v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0]) >> 3);
          if (0x84BDA12F684BDA13
             * ((uint64_t)(v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0]) >> 3) >= 0x97B425ED097B42)
            v280 = 0x12F684BDA12F684;
          else
            v280 = v279;
          *(_QWORD *)&v455[8] = (char *)&v453.__r_.__value_.__l + 16;
          if (v280)
            v280 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v280);
          else
            v281 = 0;
          v454.__r_.__value_.__r.__words[0] = v280;
          v454.__r_.__value_.__l.__size_ = v280 + 216 * v278;
          v454.__r_.__value_.__r.__words[2] = v454.__r_.__value_.__l.__size_;
          *(_QWORD *)v455 = v280 + 216 * v281;
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v454.__r_.__value_.__l.__size_, (const marrs::mrr::mr::MRREntity *)v273);
          v285 = v454.__r_.__value_.__l.__size_;
          v277 = v454.__r_.__value_.__r.__words[2] + 216;
          v454.__r_.__value_.__r.__words[2] += 216;
          v286 = v453.__r_.__value_.__l.__size_;
          v287 = v453.__r_.__value_.__r.__words[0];
          if (v453.__r_.__value_.__l.__size_ != v453.__r_.__value_.__r.__words[0])
          {
            do
            {
              v285 -= 216;
              v286 -= 216;
              std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v285, v286);
            }
            while (v286 != v287);
            goto LABEL_611;
          }
          goto LABEL_612;
        }
      }
      else
      {
        v275 = *((double *)std::__tree<std::__value_type<marrs::mrr::mr::EntityType,double>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,double>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,double>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v436, *(_DWORD *)v273, (_DWORD *)v273)+ 5);
        v276 = v275;
        if (vabdd_f64(v275, *(double *)(v273 + 96)) >= 0.001)
        {
          v282 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v282, OS_LOG_TYPE_INFO))
          {
            v283 = (_QWORD *)(v273 + 8);
            if (*(char *)(v273 + 31) < 0)
              v283 = (_QWORD *)*v283;
            v284 = *(_QWORD *)(v273 + 96);
            LODWORD(v454.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = (std::string::size_type)v283;
            WORD2(v454.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v454.__r_.__value_.__r.__words[1] + 6) = v284;
            HIWORD(v454.__r_.__value_.__r.__words[2]) = 2048;
            *(double *)v455 = v276;
            _os_log_impl(&dword_1C281A000, v282, OS_LOG_TYPE_INFO, "skipping screen entity - %s with saliency score - %f, since it has less same than that of max score of %f for this entity type", (uint8_t *)&v454, 0x20u);
          }
          goto LABEL_615;
        }
        v274 = v453.__r_.__value_.__l.__size_;
        if (v453.__r_.__value_.__l.__size_ >= v453.__r_.__value_.__r.__words[2])
        {
          v288 = 0x84BDA12F684BDA13
               * ((uint64_t)(v453.__r_.__value_.__l.__size_ - v453.__r_.__value_.__r.__words[0]) >> 3);
          v289 = v288 + 1;
          if (v288 + 1 > 0x12F684BDA12F684)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x97B425ED097B426
             * ((uint64_t)(v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0]) >> 3) > v289)
            v289 = 0x97B425ED097B426
                 * ((uint64_t)(v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0]) >> 3);
          if (0x84BDA12F684BDA13
             * ((uint64_t)(v453.__r_.__value_.__r.__words[2] - v453.__r_.__value_.__r.__words[0]) >> 3) >= 0x97B425ED097B42)
            v290 = 0x12F684BDA12F684;
          else
            v290 = v289;
          *(_QWORD *)&v455[8] = (char *)&v453.__r_.__value_.__l + 16;
          if (v290)
            v290 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v290);
          else
            v291 = 0;
          v454.__r_.__value_.__r.__words[0] = v290;
          v454.__r_.__value_.__l.__size_ = v290 + 216 * v288;
          v454.__r_.__value_.__r.__words[2] = v454.__r_.__value_.__l.__size_;
          *(_QWORD *)v455 = v290 + 216 * v291;
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v454.__r_.__value_.__l.__size_, (const marrs::mrr::mr::MRREntity *)v273);
          v285 = v454.__r_.__value_.__l.__size_;
          v277 = v454.__r_.__value_.__r.__words[2] + 216;
          v454.__r_.__value_.__r.__words[2] += 216;
          v286 = v453.__r_.__value_.__l.__size_;
          v292 = v453.__r_.__value_.__r.__words[0];
          if (v453.__r_.__value_.__l.__size_ != v453.__r_.__value_.__r.__words[0])
          {
            do
            {
              v285 -= 216;
              v286 -= 216;
              std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v285, v286);
            }
            while (v286 != v292);
LABEL_611:
            v293 = *(int64x2_t *)&v453.__r_.__value_.__l.__data_;
            v277 = v454.__r_.__value_.__r.__words[2];
LABEL_613:
            v453.__r_.__value_.__r.__words[0] = v285;
            v453.__r_.__value_.__l.__size_ = v277;
            *(int64x2_t *)&v454.__r_.__value_.__r.__words[1] = v293;
            v294 = v453.__r_.__value_.__r.__words[2];
            v453.__r_.__value_.__r.__words[2] = *(_QWORD *)v455;
            *(_QWORD *)v455 = v294;
            v454.__r_.__value_.__r.__words[0] = v293.i64[0];
            std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)&v454);
            goto LABEL_614;
          }
LABEL_612:
          v293 = vdupq_n_s64(v286);
          goto LABEL_613;
        }
      }
      marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v453.__r_.__value_.__l.__size_, (const marrs::mrr::mr::MRREntity *)v273);
      v277 = v274 + 216;
LABEL_614:
      v453.__r_.__value_.__l.__size_ = v277;
LABEL_615:
      v273 += 216;
    }
    while (v273 != v431.i64[1]);
  }
LABEL_619:
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(_QWORD **)&v436[8]);
  v295 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v295, OS_LOG_TYPE_INFO))
  {
    LOWORD(v454.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C281A000, v295, OS_LOG_TYPE_INFO, "Rulebased MR triggering", (uint8_t *)&v454, 2u);
  }
  memset(&v454, 0, sizeof(v454));
  marrs::mrr::mr::RuleBasedMR::resolveMentionsInUtterance((uint64_t)this + 304, (uint64_t *)&v453, (uint64_t)v421, (uint64_t **)&v454, (uint64_t *)&v452);
  *(_QWORD *)v436 = &v454;
  std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
  v296 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v296, OS_LOG_TYPE_INFO))
  {
    LODWORD(v454.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = 0x82FA0BE82FA0BE83
                                                                            * ((uint64_t)(v452.__r_.__value_.__l.__size_
                                                                                       - v452.__r_.__value_.__r.__words[0]) >> 3);
    _os_log_impl(&dword_1C281A000, v296, OS_LOG_TYPE_INFO, "[RulebasedMR] - num matching results - %lu", (uint8_t *)&v454, 0xCu);
  }
  if (v452.__r_.__value_.__r.__words[0] != v452.__r_.__value_.__l.__size_
    && *(_QWORD *)(v452.__r_.__value_.__r.__words[0] + 320) != *(_QWORD *)(v452.__r_.__value_.__r.__words[0] + 328))
  {
    marrs::mrr::mr::MROrchestrator::doCoreAnalytics();
    if (v452.__r_.__value_.__l.__size_ == v452.__r_.__value_.__r.__words[0])
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    if (**(_DWORD **)(v452.__r_.__value_.__r.__words[0] + 320) == 2)
    {
      marrs::mrr::mr::MROrchestrator::processMRResultsToFinalResponse((uint64_t *)&v452, (uint64_t)v421, v420);
      v297 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v297, OS_LOG_TYPE_INFO))
      {
        LOWORD(v454.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C281A000, v297, OS_LOG_TYPE_INFO, "Returning ordinal results early", (uint8_t *)&v454, 2u);
      }
      goto LABEL_875;
    }
  }
  marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance((uint64_t)this + 8, (uint64_t *)&v453, (uint64_t)v421, &v433, (uint64_t)&v429);
  v298 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v298, OS_LOG_TYPE_INFO))
  {
    LODWORD(v454.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = 0x82FA0BE82FA0BE83
                                                                            * ((uint64_t)(v430 - (_QWORD)v429) >> 3);
    _os_log_impl(&dword_1C281A000, v298, OS_LOG_TYPE_INFO, "Model based MR - num matching results - %lu", (uint8_t *)&v454, 0xCu);
  }
  v299 = (std::string::size_type)v429;
  if (v429 == (sirinluinternal::MatchingSpan *)v430)
  {
    v300 = (uint64_t)v429;
  }
  else
  {
    marrs::mrr::mr::MROrchestrator::doCoreAnalytics();
    v300 = (uint64_t)v429;
    v299 = v430;
  }
  memset(&v476, 0, sizeof(v476));
  if (v452.__r_.__value_.__r.__words[0] == v452.__r_.__value_.__l.__size_)
  {
    if (v300 == v299)
    {
      memset(&v428, 0, sizeof(v428));
      memset(&v476, 0, sizeof(v476));
      goto LABEL_727;
    }
    goto LABEL_726;
  }
  if (v300 == v299)
  {
    v299 = v452.__r_.__value_.__l.__size_;
    v300 = v452.__r_.__value_.__r.__words[0];
LABEL_726:
    memset(&v428, 0, sizeof(v428));
    std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)&v428, v300, v299, 0x82FA0BE82FA0BE83 * ((uint64_t)(v299 - v300) >> 3));
    goto LABEL_727;
  }
  v301 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v301, OS_LOG_TYPE_INFO))
  {
    LOWORD(v454.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C281A000, v301, OS_LOG_TYPE_INFO, "Integrating rule and model result", (uint8_t *)&v454, 2u);
  }
  memset(v436, 0, sizeof(v436));
  LODWORD(v437.__r_.__value_.__l.__data_) = 1065353216;
  v303 = v452.__r_.__value_.__l.__size_;
  for (k = (sirinluinternal::MatchingSpan *)v452.__r_.__value_.__r.__words[0];
        k != (sirinluinternal::MatchingSpan *)v303;
        k = (sirinluinternal::MatchingSpan *)((char *)k + 344))
  {
    v454.__r_.__value_.__r.__words[0] = (std::string::size_type)k;
    v304 = std::__hash_table<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::__unordered_map_hasher<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,true>,std::__unordered_map_equal<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::equal_to<sirinluinternal::MatchingSpan>,std::hash<sirinluinternal::MatchingSpan>,true>,std::allocator<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>>>::__emplace_unique_key_args<sirinluinternal::MatchingSpan,std::piecewise_construct_t const&,std::tuple<sirinluinternal::MatchingSpan const&>,std::tuple<>>((uint64_t)v436, k, &v454);
    v305 = v304;
    v306 = v304 + 15;
    v307 = v304[15];
    v308 = v304[14];
    if (v308 >= v307)
    {
      v310 = v304[13];
      v311 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v308 - v310) >> 3);
      v312 = v311 + 1;
      if (v311 + 1 > 0xBE82FA0BE82FA0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v313 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v307 - v310) >> 3);
      if (2 * v313 > v312)
        v312 = 2 * v313;
      if (v313 >= 0x5F417D05F417D0)
        v314 = 0xBE82FA0BE82FA0;
      else
        v314 = v312;
      *(_QWORD *)&v455[8] = v306;
      if (v314)
        v314 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v314);
      else
        v315 = 0;
      v454.__r_.__value_.__r.__words[0] = v314;
      v454.__r_.__value_.__l.__size_ = v314 + 344 * v311;
      v454.__r_.__value_.__r.__words[2] = v454.__r_.__value_.__l.__size_;
      *(_QWORD *)v455 = v314 + 344 * v315;
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)v454.__r_.__value_.__l.__size_, (uint64_t)k);
      v454.__r_.__value_.__r.__words[2] += 344;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(v305 + 13, &v454);
      v309 = v305[14];
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v454);
    }
    else
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)v304[14], (uint64_t)k);
      v309 = v308 + 344;
      v305[14] = v308 + 344;
    }
    v305[14] = v309;
  }
  v316 = v429;
  for (m = (sirinluinternal::MatchingSpan *)v430; v316 != m; v316 = (sirinluinternal::MatchingSpan *)((char *)v316 + 344))
  {
    v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v316;
    v318 = std::__hash_table<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::__unordered_map_hasher<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,true>,std::__unordered_map_equal<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::equal_to<sirinluinternal::MatchingSpan>,std::hash<sirinluinternal::MatchingSpan>,true>,std::allocator<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>>>::__emplace_unique_key_args<sirinluinternal::MatchingSpan,std::piecewise_construct_t const&,std::tuple<sirinluinternal::MatchingSpan const&>,std::tuple<>>((uint64_t)v436, v316, &v454);
    v319 = v318;
    v320 = v318 + 18;
    v321 = v318[18];
    v322 = v318[17];
    if (v322 >= v321)
    {
      v324 = v318[16];
      v325 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v322 - v324) >> 3);
      v326 = v325 + 1;
      if (v325 + 1 > 0xBE82FA0BE82FA0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v327 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v321 - v324) >> 3);
      if (2 * v327 > v326)
        v326 = 2 * v327;
      if (v327 >= 0x5F417D05F417D0)
        v328 = 0xBE82FA0BE82FA0;
      else
        v328 = v326;
      *(_QWORD *)&v455[8] = v320;
      if (v328)
        v328 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v328);
      else
        v329 = 0;
      v454.__r_.__value_.__r.__words[0] = v328;
      v454.__r_.__value_.__l.__size_ = v328 + 344 * v325;
      v454.__r_.__value_.__r.__words[2] = v454.__r_.__value_.__l.__size_;
      *(_QWORD *)v455 = v328 + 344 * v329;
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)v454.__r_.__value_.__l.__size_, (uint64_t)v316);
      v454.__r_.__value_.__r.__words[2] += 344;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(v319 + 16, &v454);
      v323 = v319[17];
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v454);
    }
    else
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)v318[17], (uint64_t)v316);
      v323 = v322 + 344;
      v319[17] = v322 + 344;
    }
    v319[17] = v323;
  }
  v330 = *(_QWORD **)&v436[16];
  if (*(_QWORD *)&v436[16])
  {
    do
    {
      v331 = (__int128 *)v330[6];
      if (v331)
      {
        if (*((char *)v331 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__sz, *(const std::string::value_type **)v331, *((_QWORD *)v331 + 1));
        }
        else
        {
          v332 = *v331;
          __sz.__r_.__value_.__r.__words[2] = *((_QWORD *)v331 + 2);
          *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v332;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__sz, "");
      }
      memset(v467, 0, 32);
      *(_DWORD *)&v467[32] = 1065353216;
      v333 = v330[13];
      v334 = v330[14];
      while (v333 != v334)
      {
        if (!*(_BYTE *)(v333 + 312))
          std::__throw_bad_optional_access[abi:ne180100]();
        v335 = *(_DWORD *)(v333 + 88);
        v454.__r_.__value_.__r.__words[0] = v333 + 152;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v467, (unsigned __int8 *)(v333 + 152), (__int128 **)&v454)+ 10) = v335;
        v333 += 344;
      }
      v336 = v330[16];
      v337 = v330[17];
      if (v336 == v337)
        goto LABEL_711;
      v338 = 0;
      do
      {
        while (*(_BYTE *)(v336 + 312))
        {
          v339 = (_QWORD *)(v336 + 152);
          v340 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(v467, (unsigned __int8 *)(v336 + 152));
          if (!v340)
            break;
          v341 = v340;
          v342 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v342, OS_LOG_TYPE_INFO))
          {
            if (!*(_BYTE *)(v336 + 312))
              std::__throw_bad_optional_access[abi:ne180100]();
            if (*(char *)(v336 + 175) < 0)
              v339 = (_QWORD *)*v339;
            if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v343 = &__sz;
            else
              v343 = (std::string *)__sz.__r_.__value_.__r.__words[0];
            LODWORD(v454.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = (std::string::size_type)v339;
            WORD2(v454.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v454.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v343;
            _os_log_impl(&dword_1C281A000, v342, OS_LOG_TYPE_INFO, "Rule and model intersected with entityID %s for mention \"%s\".", (uint8_t *)&v454, 0x16u);
          }
          if (*((float *)v341 + 10) >= *(float *)(v336 + 88))
            v344 = *((float *)v341 + 10);
          else
            v344 = *(float *)(v336 + 88);
          v345 = operator new(8uLL);
          v478.__r_.__value_.__r.__words[0] = (std::string::size_type)v345;
          *v345 = 1;
          v478.__r_.__value_.__l.__size_ = (std::string::size_type)(v345 + 1);
          v478.__r_.__value_.__r.__words[2] = (std::string::size_type)(v345 + 1);
          if (!*(_BYTE *)(v336 + 312))
            std::__throw_bad_optional_access[abi:ne180100]();
          v346 = v476.__r_.__value_.__l.__size_;
          if (v476.__r_.__value_.__l.__size_ >= v476.__r_.__value_.__r.__words[2])
          {
            v348 = 0x82FA0BE82FA0BE83
                 * ((uint64_t)(v476.__r_.__value_.__l.__size_ - v476.__r_.__value_.__r.__words[0]) >> 3);
            v349 = v348 + 1;
            if (v348 + 1 > 0xBE82FA0BE82FA0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5F417D05F417D06
               * ((uint64_t)(v476.__r_.__value_.__r.__words[2] - v476.__r_.__value_.__r.__words[0]) >> 3) > v349)
              v349 = 0x5F417D05F417D06
                   * ((uint64_t)(v476.__r_.__value_.__r.__words[2] - v476.__r_.__value_.__r.__words[0]) >> 3);
            if (0x82FA0BE82FA0BE83
               * ((uint64_t)(v476.__r_.__value_.__r.__words[2] - v476.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
              v350 = 0xBE82FA0BE82FA0;
            else
              v350 = v349;
            *(_QWORD *)&v455[8] = (char *)&v476.__r_.__value_.__l + 16;
            if (v350)
              v350 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v350);
            else
              v351 = 0;
            v454.__r_.__value_.__r.__words[0] = v350;
            v454.__r_.__value_.__l.__size_ = v350 + 344 * v348;
            v454.__r_.__value_.__r.__words[2] = v454.__r_.__value_.__l.__size_;
            *(_QWORD *)v455 = v350 + 344 * v351;
            std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(v454.__r_.__value_.__l.__size_, v336, (marrs::mrr::mr::MRREntity *)(v336 + 96), (uint64_t)&v478, v344);
            v454.__r_.__value_.__r.__words[2] += 344;
            std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v476, &v454);
            v347 = v476.__r_.__value_.__l.__size_;
            std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v454);
          }
          else
          {
            std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(v476.__r_.__value_.__l.__size_, v336, (marrs::mrr::mr::MRREntity *)(v336 + 96), (uint64_t)&v478, v344);
            v347 = v346 + 344;
          }
          v476.__r_.__value_.__l.__size_ = v347;
          if (v478.__r_.__value_.__r.__words[0])
            operator delete(v478.__r_.__value_.__l.__data_);
          v336 += 344;
          v338 = 1;
          if (v336 == v337)
            goto LABEL_717;
        }
        v336 += 344;
      }
      while (v336 != v337);
      if ((v338 & 1) == 0)
      {
LABEL_711:
        v352 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v352, OS_LOG_TYPE_INFO))
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v353 = &__sz;
          else
            v353 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          LODWORD(v454.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = (std::string::size_type)v353;
          _os_log_impl(&dword_1C281A000, v352, OS_LOG_TYPE_INFO, "Rule and model result did not intersect for mention \"%s\". Adding all results", (uint8_t *)&v454, 0xCu);
        }
        std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>>((uint64_t *)&v476, (__n128 *)v476.__r_.__value_.__l.__size_, v330[13], v330[14], 0x82FA0BE82FA0BE83 * ((uint64_t)(v330[14] - v330[13]) >> 3));
        std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>>((uint64_t *)&v476, (__n128 *)v476.__r_.__value_.__l.__size_, v330[16], v330[17], 0x82FA0BE82FA0BE83 * ((uint64_t)(v330[17] - v330[16]) >> 3));
      }
LABEL_717:
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&v467[16]);
      v354 = *(void **)v467;
      *(_QWORD *)v467 = 0;
      if (v354)
        operator delete(v354);
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__sz.__r_.__value_.__l.__data_);
      v330 = (_QWORD *)*v330;
    }
    while (v330);
  }
  v428 = v476;
  memset(&v476, 0, sizeof(v476));
  std::__hash_table<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::__unordered_map_hasher<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,true>,std::__unordered_map_equal<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::equal_to<sirinluinternal::MatchingSpan>,std::hash<sirinluinternal::MatchingSpan>,true>,std::allocator<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>>>::~__hash_table((uint64_t)v436);
LABEL_727:
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v476;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  v355 = buf.__r_.__value_.__l.__size_;
  if (v428.__r_.__value_.__r.__words[0] != v428.__r_.__value_.__l.__size_)
  {
    if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
    {
      v355 = std::vector<std::vector<marrs::mrr::mr::MRMatchingResult>>::__emplace_back_slow_path<std::vector<marrs::mrr::mr::MRMatchingResult>&>((uint64_t *)&buf, (uint64_t *)&v428);
    }
    else
    {
      *(_QWORD *)buf.__r_.__value_.__l.__size_ = 0;
      *(_QWORD *)(v355 + 8) = 0;
      *(_QWORD *)(v355 + 16) = 0;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(v355, (uint64_t)v428.__r_.__value_.__l.__data_, v428.__r_.__value_.__l.__size_, 0x82FA0BE82FA0BE83 * ((uint64_t)(v428.__r_.__value_.__l.__size_ - v428.__r_.__value_.__r.__words[0]) >> 3));
      v355 += 24;
    }
    buf.__r_.__value_.__l.__size_ = v355;
  }
  v356 = (uint64_t *)buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0] == v355)
  {
    memset(v436, 0, 24);
    v357 = v433;
    for (n = v434; v357 != n; ++v357)
    {
      v359 = *v357;
      *(_DWORD *)v467 = 1;
      v360 = operator new(4uLL);
      *v360 = 3;
      v454.__r_.__value_.__r.__words[2] = (std::string::size_type)(v360 + 1);
      v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v360;
      v454.__r_.__value_.__l.__size_ = (std::string::size_type)(v360 + 1);
      v361 = *(_QWORD *)&v436[8];
      if (*(_QWORD *)&v436[8] >= *(_QWORD *)&v436[16])
      {
        v362 = std::vector<marrs::mrr::mr::MRMatchingResult>::__emplace_back_slow_path<sirinluinternal::MatchingSpan const&,int,std::vector<marrs::mrr::mr::MRResultType>>((uint64_t *)v436, v359, (int *)v467, (uint64_t)&v454);
      }
      else
      {
        marrs::mrr::mr::MRMatchingResult::MRMatchingResult(*(uint64_t *)&v436[8], 1.0, v359, (uint64_t)&v454);
        v362 = v361 + 344;
      }
      *(_QWORD *)&v436[8] = v362;
      operator delete(v360);
    }
    v363 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v363, OS_LOG_TYPE_INFO))
    {
      LODWORD(v454.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = 0x82FA0BE82FA0BE83
                                                                              * ((uint64_t)(*(_QWORD *)&v436[8]
                                                                                         - *(_QWORD *)v436) >> 3);
      _os_log_impl(&dword_1C281A000, v363, OS_LOG_TYPE_INFO, "Contextual Spans MR - num matching results - %lu", (uint8_t *)&v454, 0xCu);
    }
    if (*(_QWORD *)v436 != *(_QWORD *)&v436[8])
    {
      marrs::mrr::mr::MROrchestrator::doCoreAnalytics();
      v364 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
      {
        v365 = std::vector<std::vector<marrs::mrr::mr::MRMatchingResult>>::__emplace_back_slow_path<std::vector<marrs::mrr::mr::MRMatchingResult>&>((uint64_t *)&buf, (uint64_t *)v436);
      }
      else
      {
        *(_QWORD *)buf.__r_.__value_.__l.__size_ = 0;
        *(_QWORD *)(v364 + 8) = 0;
        *(_QWORD *)(v364 + 16) = 0;
        std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(v364, *(uint64_t *)v436, *(uint64_t *)&v436[8], 0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)&v436[8] - *(_QWORD *)v436) >> 3));
        v365 = v364 + 24;
      }
      buf.__r_.__value_.__l.__size_ = v365;
    }
    v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v436;
    std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
    v355 = buf.__r_.__value_.__l.__size_;
    v356 = (uint64_t *)buf.__r_.__value_.__r.__words[0];
  }
  memset(v467, 0, 24);
  if (v356 == (uint64_t *)v355)
  {
    v367 = 0;
    v366 = 0;
  }
  else
  {
    do
    {
      memset(&v454, 0, sizeof(v454));
      std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)&v454, *v356, v356[1], 0x82FA0BE82FA0BE83 * ((v356[1] - *v356) >> 3));
      std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>>((uint64_t *)v467, *(__n128 **)&v467[8], (uint64_t)v454.__r_.__value_.__l.__data_, v454.__r_.__value_.__l.__size_, 0x82FA0BE82FA0BE83 * ((uint64_t)(v454.__r_.__value_.__l.__size_ - v454.__r_.__value_.__r.__words[0]) >> 3));
      *(_QWORD *)v436 = &v454;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
      v356 += 3;
    }
    while (v356 != (uint64_t *)v355);
    v366 = *(_QWORD *)v467;
    v367 = *(_QWORD *)&v467[8];
  }
  v368 = 126 - 2 * __clz(0x82FA0BE82FA0BE83 * ((uint64_t)(v367 - v366) >> 3));
  if (v367 == v366)
    v369 = 0;
  else
    v369 = v368;
  std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v366, v367, v369, 1);
  memset(&v476, 0, sizeof(v476));
  memset(v436, 0, sizeof(v436));
  LODWORD(v437.__r_.__value_.__l.__data_) = 1065353216;
  v370 = *(_QWORD *)v467;
  v371 = *(_QWORD *)&v467[8];
  if (*(_QWORD *)v467 != *(_QWORD *)&v467[8])
  {
    v372 = 0;
    while (2)
    {
      v373 = marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash::operator()(v370);
      v374 = *(_QWORD *)&v436[8];
      if (!*(_QWORD *)&v436[8])
      {
        v378 = marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash::operator()(v370);
        goto LABEL_790;
      }
      v355 = v373;
      v375 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v436[8]);
      v375.i16[0] = vaddlv_u8(v375);
      v376 = v375.u32[0];
      if (v375.u32[0] > 1uLL)
      {
        v377 = v373;
        if (v373 >= *(_QWORD *)&v436[8])
          v377 = v373 % *(_QWORD *)&v436[8];
      }
      else
      {
        v377 = (*(_QWORD *)&v436[8] - 1) & v373;
      }
      v379 = *(_QWORD **)(*(_QWORD *)v436 + 8 * v377);
      if (!v379 || (v380 = (_QWORD *)*v379) == 0)
      {
        v378 = marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash::operator()(v370);
        goto LABEL_775;
      }
      do
      {
        v381 = v380[1];
        if (v381 == v355)
        {
          if (marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDComparator::operator()((uint64_t)(v380 + 2), v370))
            goto LABEL_859;
          goto LABEL_771;
        }
        if (v376 > 1)
        {
          if (v381 >= v374)
            v381 %= v374;
        }
        else
        {
          v381 &= v374 - 1;
        }
        if (v381 != v377)
          break;
LABEL_771:
        v380 = (_QWORD *)*v380;
      }
      while (v380);
      v378 = marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash::operator()(v370);
      if (!v374)
        goto LABEL_790;
LABEL_775:
      v382 = (uint8x8_t)vcnt_s8((int8x8_t)v374);
      v382.i16[0] = vaddlv_u8(v382);
      v383 = v382.u32[0];
      if (v382.u32[0] > 1uLL)
      {
        v355 = v378;
        if (v378 >= v374)
          v355 = v378 % v374;
      }
      else
      {
        v355 = (v374 - 1) & v378;
      }
      v384 = *(_QWORD **)(*(_QWORD *)v436 + 8 * v355);
      if (v384)
      {
        v385 = (_QWORD *)*v384;
        if (*v384)
        {
          do
          {
            v386 = v385[1];
            if (v386 == v378)
            {
              if (marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDComparator::operator()((uint64_t)(v385 + 2), v370))
                goto LABEL_846;
            }
            else
            {
              if (v383 > 1)
              {
                if (v386 >= v374)
                  v386 %= v374;
              }
              else
              {
                v386 &= v374 - 1;
              }
              if (v386 != v355)
                break;
            }
            v385 = (_QWORD *)*v385;
          }
          while (v385);
        }
      }
LABEL_790:
      v387 = operator new(0x168uLL);
      v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v387;
      v454.__r_.__value_.__l.__size_ = (std::string::size_type)&v436[16];
      v454.__r_.__value_.__s.__data_[16] = 0;
      *v387 = 0;
      v387[1] = v378;
      MEMORY[0x1C3BC54C0](v387 + 2, v370);
      *((_DWORD *)v387 + 26) = *(_DWORD *)(v370 + 88);
      std::__optional_copy_base<marrs::mrr::mr::MRREntity,false>::__optional_copy_base[abi:ne180100]((marrs::mrr::mr::MRREntity *)(v387 + 14), (const marrs::mrr::mr::MRREntity *)(v370 + 96));
      v387[42] = 0;
      v387[43] = 0;
      v387[44] = 0;
      std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(v387 + 42, *(const void **)(v370 + 320), *(_QWORD *)(v370 + 328), (uint64_t)(*(_QWORD *)(v370 + 328) - *(_QWORD *)(v370 + 320)) >> 2);
      v454.__r_.__value_.__s.__data_[16] = 1;
      v388 = (float)(unint64_t)(*(_QWORD *)&v436[24] + 1);
      if (!v374 || (float)(*(float *)&v437.__r_.__value_.__l.__data_ * (float)v374) < v388)
      {
        v389 = (v374 & (v374 - 1)) != 0;
        if (v374 < 3)
          v389 = 1;
        v390 = v389 | (2 * v374);
        v391 = vcvtps_u32_f32(v388 / *(float *)&v437.__r_.__value_.__l.__data_);
        if (v390 <= v391)
          prime = (int8x8_t)v391;
        else
          prime = (int8x8_t)v390;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v374 = *(_QWORD *)&v436[8];
        if (*(_QWORD *)&prime <= *(_QWORD *)&v436[8])
        {
          if (*(_QWORD *)&prime < *(_QWORD *)&v436[8])
          {
            v399 = vcvtps_u32_f32((float)*(unint64_t *)&v436[24] / *(float *)&v437.__r_.__value_.__l.__data_);
            if (*(_QWORD *)&v436[8] < 3uLL
              || (v400 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v436[8]), v400.i16[0] = vaddlv_u8(v400), v400.u32[0] > 1uLL))
            {
              v399 = std::__next_prime(v399);
            }
            else
            {
              v401 = 1 << -(char)__clz(v399 - 1);
              if (v399 >= 2)
                v399 = v401;
            }
            if (*(_QWORD *)&prime <= v399)
              prime = (int8x8_t)v399;
            if (*(_QWORD *)&prime >= v374)
            {
              v374 = *(_QWORD *)&v436[8];
            }
            else
            {
              if (prime)
                goto LABEL_802;
              v410 = *(void **)v436;
              *(_QWORD *)v436 = 0;
              if (v410)
                operator delete(v410);
              v374 = 0;
              *(_QWORD *)&v436[8] = 0;
            }
          }
        }
        else
        {
LABEL_802:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v393 = operator new(8 * *(_QWORD *)&prime);
          v394 = *(void **)v436;
          *(_QWORD *)v436 = v393;
          if (v394)
            operator delete(v394);
          v395 = 0;
          *(int8x8_t *)&v436[8] = prime;
          do
            *(_QWORD *)(*(_QWORD *)v436 + 8 * v395++) = 0;
          while (*(_QWORD *)&prime != v395);
          v396 = *(_QWORD ***)&v436[16];
          if (*(_QWORD *)&v436[16])
          {
            v397 = *(_QWORD *)(*(_QWORD *)&v436[16] + 8);
            v398 = (uint8x8_t)vcnt_s8(prime);
            v398.i16[0] = vaddlv_u8(v398);
            if (v398.u32[0] > 1uLL)
            {
              if (v397 >= *(_QWORD *)&prime)
                v397 %= *(_QWORD *)&prime;
            }
            else
            {
              v397 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v436 + 8 * v397) = &v436[16];
            for (ii = *v396; ii; v397 = v403)
            {
              v403 = ii[1];
              if (v398.u32[0] > 1uLL)
              {
                if (v403 >= *(_QWORD *)&prime)
                  v403 %= *(_QWORD *)&prime;
              }
              else
              {
                v403 &= *(_QWORD *)&prime - 1;
              }
              if (v403 != v397)
              {
                if (!*(_QWORD *)(*(_QWORD *)v436 + 8 * v403))
                {
                  *(_QWORD *)(*(_QWORD *)v436 + 8 * v403) = v396;
                  goto LABEL_827;
                }
                *v396 = (_QWORD *)*ii;
                *ii = **(_QWORD **)(*(_QWORD *)v436 + 8 * v403);
                **(_QWORD **)(*(_QWORD *)v436 + 8 * v403) = ii;
                ii = v396;
              }
              v403 = v397;
LABEL_827:
              v396 = (_QWORD **)ii;
              ii = (_QWORD *)*ii;
            }
          }
          v374 = (unint64_t)prime;
        }
        if ((v374 & (v374 - 1)) != 0)
        {
          if (v378 >= v374)
            v355 = v378 % v374;
          else
            v355 = v378;
        }
        else
        {
          v355 = (v374 - 1) & v378;
        }
      }
      v404 = *(std::string::size_type **)(*(_QWORD *)v436 + 8 * v355);
      v405 = v454.__r_.__value_.__r.__words[0];
      if (v404)
      {
        *(_QWORD *)v454.__r_.__value_.__l.__data_ = *v404;
        goto LABEL_844;
      }
      *(_QWORD *)v454.__r_.__value_.__l.__data_ = *(_QWORD *)&v436[16];
      *(_QWORD *)&v436[16] = v405;
      *(_QWORD *)(*(_QWORD *)v436 + 8 * v355) = &v436[16];
      if (*(_QWORD *)v405)
      {
        v406 = *(_QWORD *)(*(_QWORD *)v405 + 8);
        if ((v374 & (v374 - 1)) != 0)
        {
          if (v406 >= v374)
            v406 %= v374;
        }
        else
        {
          v406 &= v374 - 1;
        }
        v404 = (std::string::size_type *)(*(_QWORD *)v436 + 8 * v406);
LABEL_844:
        *v404 = v405;
      }
      v454.__r_.__value_.__r.__words[0] = 0;
      ++*(_QWORD *)&v436[24];
      std::unique_ptr<std::__hash_node<marrs::mrr::mr::MRMatchingResult,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<marrs::mrr::mr::MRMatchingResult,void *>>>>::reset[abi:ne180100]((uint64_t)&v454);
      v372 = (_QWORD *)v476.__r_.__value_.__l.__size_;
LABEL_846:
      if ((unint64_t)v372 >= v476.__r_.__value_.__r.__words[2])
      {
        v355 = 0x82FA0BE82FA0BE83 * ((uint64_t)((uint64_t)v372 - v476.__r_.__value_.__r.__words[0]) >> 3);
        v407 = v355 + 1;
        if (v355 + 1 > 0xBE82FA0BE82FA0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5F417D05F417D06
           * ((uint64_t)(v476.__r_.__value_.__r.__words[2] - v476.__r_.__value_.__r.__words[0]) >> 3) > v407)
          v407 = 0x5F417D05F417D06
               * ((uint64_t)(v476.__r_.__value_.__r.__words[2] - v476.__r_.__value_.__r.__words[0]) >> 3);
        if (0x82FA0BE82FA0BE83
           * ((uint64_t)(v476.__r_.__value_.__r.__words[2] - v476.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
          v408 = 0xBE82FA0BE82FA0;
        else
          v408 = v407;
        *(_QWORD *)&v455[8] = (char *)&v476.__r_.__value_.__l + 16;
        if (v408)
          v408 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v408);
        else
          v409 = 0;
        v454.__r_.__value_.__r.__words[0] = v408;
        v454.__r_.__value_.__l.__size_ = v408 + 344 * v355;
        v454.__r_.__value_.__r.__words[2] = v454.__r_.__value_.__l.__size_;
        *(_QWORD *)v455 = v408 + 344 * v409;
        std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)v454.__r_.__value_.__l.__size_, v370);
        v454.__r_.__value_.__r.__words[2] += 344;
        std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v476, &v454);
        v372 = (_QWORD *)v476.__r_.__value_.__l.__size_;
        std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v454);
      }
      else
      {
        std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v372, v370);
        v372 += 43;
      }
      v476.__r_.__value_.__l.__size_ = (std::string::size_type)v372;
LABEL_859:
      v370 += 344;
      if (v370 != v371)
        continue;
      break;
    }
  }
  std::__hash_table<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash,marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDComparator,std::allocator<marrs::mrr::mr::MRMatchingResult>>::~__hash_table((uint64_t)v436);
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v467;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  marrs::mrr::mr::MROrchestrator::processMRResultsToFinalResponse((uint64_t *)&v476, (uint64_t)v421, v420);
  if (*(_QWORD *)(v420 + 8) == *(_QWORD *)(v420 + 16))
  {
    v411 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v411, OS_LOG_TYPE_INFO))
    {
      LOWORD(v454.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C281A000, v411, OS_LOG_TYPE_INFO, "MR Orchestrator - No matching results", (uint8_t *)&v454, 2u);
    }
    marrs::mrr::mr::MROrchestrator::doCoreAnalytics();
  }
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v476;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v428;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
LABEL_875:
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v452;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v453;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<std::vector<marrs::mrr::mr::MRMatchingResult>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v431;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
LABEL_876:
  v454.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
  std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v454);
}

void sub_1C2893BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,void *__p)
{
  uint64_t v63;

  if (LOBYTE(STACK[0x3F8]))
    marrs::mrr::mr::MRREntity::~MRREntity((void **)&STACK[0x320]);
  if (LOBYTE(STACK[0x288]))
    marrs::mrr::mr::MRREntity::~MRREntity(&__p);
  __p = &a57;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)(v63 - 160) = &a60;
  std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 160));
  MEMORY[0x1C3BC55C8](a18);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::MROrchestrator::~MROrchestrator(void **this)
{
  marrs::mrr::mr::MROrchestrator::~MROrchestrator(this);
  JUMPOUT(0x1C3BC5C7CLL);
}

{
  *this = &off_1E7C677A8;
  if (*((char *)this + 1391) < 0)
    operator delete(this[171]);
  marrs::mrr::mr::RuleBasedMR::~RuleBasedMR(this + 38);
  marrs::mrr::mr::ModelBasedMR::~ModelBasedMR((marrs::mrr::mr::ModelBasedMR *)(this + 1));
}

void marrs::mrr::mr::MROrchestrator::doCoreAnalytics()
{
  NSObject *v0;
  os_signpost_id_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::string v10;
  uint8_t buf[16];
  std::string::size_type v12;

  v0 = MRRLoggerForCategory(3);
  v1 = os_signpost_id_generate(v0);
  v2 = MRRLoggerForCategory(3);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "MRDoCoreAnalytics", "", buf, 2u);
    }
  }
  v4 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C281A000, v4, OS_LOG_TYPE_INFO, "BEGIN \"MRDoCoreAnalytics\"", buf, 2u);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "com.apple.siri.marrs");
  v5 = std::string::append(&v10, ".MentionDetectorMentionResolver.MentionResolver.Resolve");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v12 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)buf = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  analytics_send_event_lazy();
  if (SHIBYTE(v12) < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v7 = MRRLoggerForCategory(3);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = v7;
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C281A000, v8, OS_SIGNPOST_INTERVAL_END, v1, "MRDoCoreAnalytics", " enableTelemetry=YES ", buf, 2u);
    }
  }
  v9 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C281A000, v9, OS_LOG_TYPE_INFO, "END \"MRDoCoreAnalytics\"", buf, 2u);
  }
}

void sub_1C28946B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void marrs::mrr::mr::MROrchestrator::processMRResultsToFinalResponse(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  NSObject *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD **v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *i;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  NSObject *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  int v66;
  NSObject *v67;
  void **v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  std::basic_string<char16_t>::size_type v73;
  std::basic_string<char16_t>::size_type v74;
  std::allocator<char16_t> *v75;
  void *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  NSObject *v81;
  const std::locale::facet *v82;
  const std::locale::facet *v83;
  const sirinluinternal::MatchingSpan **v84;
  const sirinluinternal::MatchingSpan **j;
  void **v86;
  uint64_t v87;
  __int128 *v88;
  __int128 v89;
  void **v90;
  uint64_t v91;
  const std::locale::facet *v92;
  void **v93;
  std::basic_string<char16_t> *v94;
  std::basic_string<char16_t>::size_type size;
  std::allocator<char16_t> *v96;
  std::basic_string<char16_t> *v97;
  std::basic_string<char16_t>::size_type v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  void *__p[2];
  __int128 v108;
  float v109;
  std::basic_string<char16_t> v110;
  std::basic_string<char16_t> v111;
  std::basic_string<char16_t> v112;
  std::basic_string<char16_t> v113;
  std::basic_string<char16_t> v114;
  __int128 buf;
  uint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  void *v120;
  char v121;
  _QWORD v122[22];

  v122[19] = *MEMORY[0x1E0C80C00];
  v5 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1C281A000, v5, OS_LOG_TYPE_DEBUG, "Number of matching results before postResolveFilter - %ld", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)__p = 0u;
  v108 = 0u;
  v109 = 1.0;
  v7 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
  {
    v104 = 0;
    v105 = 0;
    v106 = 0;
    goto LABEL_130;
  }
  do
  {
    if (*(_BYTE *)(v7 + 312) && *(_DWORD *)(v7 + 96) == 14)
    {
      v9 = sirinluinternal::MatchingSpan::hash_value((sirinluinternal::MatchingSpan *)v7);
      v10 = v9;
      v11 = (unint64_t)__p[1];
      if (__p[1])
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v12.i16[0] = vaddlv_u8(v12);
        v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          v3 = v9;
          if ((void *)v9 >= __p[1])
            v3 = v9 % (unint64_t)__p[1];
        }
        else
        {
          v3 = ((unint64_t)__p[1] - 1) & v9;
        }
        v14 = (_QWORD *)*((_QWORD *)__p[0] + v3);
        if (v14)
        {
          v15 = (_QWORD *)*v14;
          if (*v14)
          {
            do
            {
              v16 = v15[1];
              if (v16 == v10)
              {
                if ((sirinluinternal::MatchingSpan::operator==() & 1) != 0)
                  goto LABEL_78;
              }
              else
              {
                if (v13 > 1)
                {
                  if ((void *)v16 >= __p[1])
                    v16 %= (unint64_t)__p[1];
                }
                else
                {
                  v16 &= (unint64_t)__p[1] - 1;
                }
                if (v16 != v3)
                  break;
              }
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
      }
      v17 = operator new(0x68uLL);
      *v17 = 0;
      v17[1] = v10;
      MEMORY[0x1C3BC54C0](v17 + 2, v7);
      v18 = (float)(unint64_t)(*((_QWORD *)&v108 + 1) + 1);
      if (v11 && (float)(v109 * (float)v11) >= v18)
      {
LABEL_68:
        v34 = __p[0];
        v35 = (_QWORD *)*((_QWORD *)__p[0] + v3);
        if (v35)
        {
          *v17 = *v35;
        }
        else
        {
          *v17 = v108;
          *(_QWORD *)&v108 = v17;
          v34[v3] = &v108;
          if (!*v17)
          {
LABEL_77:
            ++*((_QWORD *)&v108 + 1);
            goto LABEL_78;
          }
          v36 = *(_QWORD *)(*v17 + 8);
          if ((v11 & (v11 - 1)) != 0)
          {
            if (v36 >= v11)
              v36 %= v11;
          }
          else
          {
            v36 &= v11 - 1;
          }
          v35 = (char *)__p[0] + 8 * v36;
        }
        *v35 = v17;
        goto LABEL_77;
      }
      v19 = (v11 & (v11 - 1)) != 0;
      if (v11 < 3)
        v19 = 1;
      v20 = v19 | (2 * v11);
      v21 = vcvtps_u32_f32(v18 / v109);
      if (v20 <= v21)
        prime = (int8x8_t)v21;
      else
        prime = (int8x8_t)v20;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v11 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_34;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v29 = vcvtps_u32_f32((float)*((unint64_t *)&v108 + 1) / v109);
        if (__p[1] < (void *)3
          || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
        {
          v29 = std::__next_prime(v29);
        }
        else
        {
          v31 = 1 << -(char)__clz(v29 - 1);
          if (v29 >= 2)
            v29 = v31;
        }
        if (*(_QWORD *)&prime <= v29)
          prime = (int8x8_t)v29;
        if ((void *)*(_QWORD *)&prime >= __p[1])
        {
          v11 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v23 = operator new(8 * *(_QWORD *)&prime);
            v24 = __p[0];
            __p[0] = v23;
            if (v24)
              operator delete(v24);
            v25 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v25++) = 0;
            while (*(_QWORD *)&prime != v25);
            v26 = (_QWORD **)v108;
            if ((_QWORD)v108)
            {
              v27 = *(_QWORD *)(v108 + 8);
              v28 = (uint8x8_t)vcnt_s8(prime);
              v28.i16[0] = vaddlv_u8(v28);
              if (v28.u32[0] > 1uLL)
              {
                if (v27 >= *(_QWORD *)&prime)
                  v27 %= *(_QWORD *)&prime;
              }
              else
              {
                v27 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v27) = &v108;
              for (i = *v26; i; v27 = v33)
              {
                v33 = i[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*((_QWORD *)__p[0] + v33))
                  {
                    *((_QWORD *)__p[0] + v33) = v26;
                    goto LABEL_59;
                  }
                  *v26 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v33);
                  **((_QWORD **)__p[0] + v33) = i;
                  i = v26;
                }
                v33 = v27;
LABEL_59:
                v26 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v11 = (unint64_t)prime;
            goto LABEL_63;
          }
          v37 = __p[0];
          __p[0] = 0;
          if (v37)
            operator delete(v37);
          v11 = 0;
          __p[1] = 0;
        }
      }
LABEL_63:
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v10 >= v11)
          v3 = v10 % v11;
        else
          v3 = v10;
      }
      else
      {
        v3 = (v11 - 1) & v10;
      }
      goto LABEL_68;
    }
LABEL_78:
    v7 += 344;
  }
  while (v7 != v8);
  v38 = *a1;
  v39 = a1[1];
  v105 = 0;
  v106 = 0;
  v104 = 0;
  if (v39 != v38)
  {
    v40 = 0x82FA0BE82FA0BE83 * ((v39 - v38) >> 3);
    if (v40 > 0xBE82FA0BE82FA0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v118 = &v106;
    *(_QWORD *)&buf = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v40);
    *((_QWORD *)&buf + 1) = buf;
    v116 = buf;
    v117 = buf + 344 * v41;
    std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(&v104, &buf);
    std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&buf);
    v38 = *a1;
    v39 = a1[1];
  }
  if (v38 == v39)
    goto LABEL_130;
  while (2)
  {
    v42 = sirinluinternal::MatchingSpan::hash_value((sirinluinternal::MatchingSpan *)v38);
    v43 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_114;
    v44 = v42;
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v45.i16[0] = vaddlv_u8(v45);
    v46 = v45.u32[0];
    if (v45.u32[0] > 1uLL)
    {
      v47 = v42;
      if ((void *)v42 >= __p[1])
        v47 = v42 % (unint64_t)__p[1];
    }
    else
    {
      v47 = ((unint64_t)__p[1] - 1) & v42;
    }
    v48 = (_QWORD *)*((_QWORD *)__p[0] + v47);
    if (!v48)
      goto LABEL_114;
    v49 = (_QWORD *)*v48;
    if (!*v48)
      goto LABEL_114;
    while (2)
    {
      v50 = v49[1];
      if (v44 != v50)
      {
        if (v46 > 1)
        {
          if (v50 >= v43)
            v50 %= v43;
        }
        else
        {
          v50 &= v43 - 1;
        }
        if (v50 != v47)
          goto LABEL_114;
        goto LABEL_108;
      }
      if ((sirinluinternal::MatchingSpan::operator==() & 1) == 0)
      {
LABEL_108:
        v49 = (_QWORD *)*v49;
        if (!v49)
          goto LABEL_114;
        continue;
      }
      break;
    }
    if (!*(_BYTE *)(v38 + 312))
      std::__throw_bad_optional_access[abi:ne180100]();
    if (*(_DWORD *)(v38 + 96) == 7)
    {
      v51 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1C281A000, v51, OS_LOG_TYPE_DEBUG, "ignoring media artist since common person is already present for the same span", (uint8_t *)&buf, 2u);
      }
      goto LABEL_127;
    }
LABEL_114:
    v52 = v105;
    if ((unint64_t)v105 >= v106)
    {
      v54 = 0x82FA0BE82FA0BE83 * (((uint64_t)v105 - v104) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 > 0xBE82FA0BE82FA0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5F417D05F417D06 * ((uint64_t)(v106 - v104) >> 3) > v55)
        v55 = 0x5F417D05F417D06 * ((uint64_t)(v106 - v104) >> 3);
      if (0x82FA0BE82FA0BE83 * ((uint64_t)(v106 - v104) >> 3) >= 0x5F417D05F417D0)
        v56 = 0xBE82FA0BE82FA0;
      else
        v56 = v55;
      v118 = &v106;
      if (v56)
        v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v56);
      else
        v57 = 0;
      *(_QWORD *)&buf = v56;
      *((_QWORD *)&buf + 1) = v56 + 344 * v54;
      v116 = *((_QWORD *)&buf + 1);
      v117 = v56 + 344 * v57;
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(*((_QWORD **)&buf + 1), v38);
      v116 += 344;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(&v104, &buf);
      v53 = v105;
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v105, v38);
      v53 = v52 + 43;
    }
    v105 = v53;
LABEL_127:
    v38 += 344;
    if (v38 != v39)
      continue;
    break;
  }
LABEL_130:
  v58 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = 0x82FA0BE82FA0BE83 * (((uint64_t)v105 - v104) >> 3);
    _os_log_impl(&dword_1C281A000, v58, OS_LOG_TYPE_DEBUG, "Number of matching results after postResolveFilter - %ld", (uint8_t *)&buf, 0xCu);
  }
  std::__hash_table<sirinluinternal::MatchingSpan,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,std::allocator<sirinluinternal::MatchingSpan>>::~__hash_table((uint64_t)__p);
  v59 = 126 - 2 * __clz(0x82FA0BE82FA0BE83 * (((uint64_t)v105 - v104) >> 3));
  if (v105 == (_QWORD *)v104)
    v60 = 0;
  else
    v60 = v59;
  std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v104, (unint64_t)v105, v60, 1);
  if ((_QWORD *)v104 != v105)
  {
    v61 = *(uint64_t **)(a2 + 168);
    marrs::mrr::mr::MRMatchingResult::toMatchingSpan((uint64_t)&buf, v104, (_QWORD *)(a2 + 72), a2 + 152);
    v62 = v104;
    if (v105 == (_QWORD *)v104)
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    if (*(_BYTE *)(v104 + 312))
    {
      v63 = v119;
      v64 = *(_DWORD *)(v104 + 96);
      if (v64 == 10)
        goto LABEL_146;
      if (v64 == 14)
      {
        v65 = (_QWORD *)(v104 + 128);
        v66 = *(char *)(v104 + 151);
        if (v66 < 0)
        {
          if (*(_QWORD *)(v104 + 136) == 8)
          {
            v65 = (_QWORD *)*v65;
            goto LABEL_145;
          }
LABEL_146:
          v67 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
          {
            marrs::mrr::mr::MRREntity::getDebugDescription((marrs::mrr::mr::MRREntity *)__p, (int *)(v62 + 96));
            v68 = (SBYTE7(v108) & 0x80u) == 0 ? __p : (void **)__p[0];
            LODWORD(v114.__r_.__value_.__l.__data_) = 136315138;
            *(std::basic_string<char16_t>::size_type *)((char *)v114.__r_.__value_.__r.__words + 4) = (std::basic_string<char16_t>::size_type)v68;
            _os_log_impl(&dword_1C281A000, v67, OS_LOG_TYPE_DEBUG, "rewriting with mrrEntity - %s", (uint8_t *)&v114, 0xCu);
            if (SBYTE7(v108) < 0)
              operator delete(__p[0]);
          }
          v69 = *(uint64_t **)(v63 + 8);
          if (v69 != *(uint64_t **)(v63 + 16))
          {
            v70 = *v69;
            v71 = *(uint64_t **)(*v69 + 8);
            if (v71 != *(uint64_t **)(v70 + 16))
            {
              if (!*(_BYTE *)(v62 + 312))
                std::__throw_bad_optional_access[abi:ne180100]();
              if (*(char *)(v62 + 127) < 0)
              {
                if (!*(_QWORD *)(v62 + 112))
                  goto LABEL_167;
              }
              else if (!*(_BYTE *)(v62 + 127))
              {
                goto LABEL_167;
              }
              v72 = *v71;
              v73 = *(unsigned int *)(v72 + 20);
              v74 = *(unsigned int *)(v72 + 8);
              ICUStringOperations::toU16String((std::basic_string<char16_t> *)__p, v61);
              if (!*(_BYTE *)(v62 + 312))
                std::__throw_bad_optional_access[abi:ne180100]();
              ICUStringOperations::toU16String(&v114, (uint64_t *)(v62 + 104));
              v76 = (void *)BYTE7(v108);
              v77 = BYTE7(v108);
              if (SBYTE7(v108) < 0)
                v76 = __p[1];
              if ((unint64_t)v76 >= v74)
              {
                std::basic_string<char16_t>::basic_string(&v111, (const std::basic_string<char16_t> *)__p, 0, v73, v75);
                if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v94 = &v114;
                else
                  v94 = (std::basic_string<char16_t> *)v114.__r_.__value_.__r.__words[0];
                if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
                else
                  size = v114.__r_.__value_.__l.__size_;
                std::basic_string<char16_t>::append(&v111, (const std::basic_string<char16_t>::value_type *)v94, size);
                v112 = v111;
                memset(&v111, 0, sizeof(v111));
                std::basic_string<char16_t>::basic_string(&v110, (const std::basic_string<char16_t> *)__p, v74, 0xFFFFFFFFFFFFFFFFLL, v96);
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v97 = &v110;
                else
                  v97 = (std::basic_string<char16_t> *)v110.__r_.__value_.__r.__words[0];
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v98 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
                else
                  v98 = v110.__r_.__value_.__l.__size_;
                std::basic_string<char16_t>::append(&v112, (const std::basic_string<char16_t>::value_type *)v97, v98);
                v113 = v112;
                memset(&v112, 0, sizeof(v112));
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v110.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v112.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v111.__r_.__value_.__l.__data_);
                ICUStringOperations::toString((std::string *)&v112, (uint64_t **)&v113);
                v99 = *(_QWORD *)(a3 + 40);
                if (!v99)
                {
                  v99 = operator new();
                  *(_QWORD *)v99 = 0;
                  *(_QWORD *)(v99 + 8) = 0;
                  *(_QWORD *)(v99 + 16) = 0;
                  v100 = *(_QWORD *)(a3 + 40);
                  *(_QWORD *)(a3 + 40) = v99;
                  if (v100)
                  {
                    std::default_delete<std::string>::operator()[abi:ne180100](v100);
                    v99 = *(_QWORD *)(a3 + 40);
                  }
                }
                if (*(char *)(v99 + 23) < 0)
                  operator delete(*(void **)v99);
                v101 = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
                *(_QWORD *)(v99 + 16) = *((_QWORD *)&v112.__r_.__value_.__l + 2);
                *(_OWORD *)v99 = v101;
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v113.__r_.__value_.__l.__data_);
                if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v114.__r_.__value_.__l.__data_);
                if ((SBYTE7(v108) & 0x80000000) == 0)
                  goto LABEL_167;
              }
              else
              {
                if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v114.__r_.__value_.__l.__data_);
                  v77 = BYTE7(v108);
                }
                if ((v77 & 0x80) == 0)
                  goto LABEL_167;
              }
              operator delete(__p[0]);
            }
          }
        }
        else
        {
          if (v66 != 8)
            goto LABEL_146;
LABEL_145:
          if (*v65 != 0x73746361746E6F43)
            goto LABEL_146;
        }
      }
    }
LABEL_167:
    MEMORY[0x1C3BC54D8](&buf);
    v78 = v104;
    if (v105 != (_QWORD *)v104)
    {
      v79 = 0;
      v80 = 0;
      do
      {
        marrs::mrr::mr::MRMatchingResult::toMatchingSpan((uint64_t)&buf, v78 + v79, (_QWORD *)(a2 + 72), a2 + 152);
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>((uint64_t **)(a3 + 8), (uint64_t)&buf);
        MEMORY[0x1C3BC54D8](&buf);
        ++v80;
        v78 = v104;
        v79 += 344;
      }
      while (v80 < 0x82FA0BE82FA0BE83 * (((uint64_t)v105 - v104) >> 3));
    }
  }
  v81 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"MR Response", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24)));
    v82 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"Mentions in MR Response", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24)));
    v83 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    v84 = *(const sirinluinternal::MatchingSpan ***)(a3 + 8);
    for (j = *(const sirinluinternal::MatchingSpan ***)(a3 + 16); v84 != j; ++v84)
    {
      marrs::mrr::MRRCPPPrintUtils::getMatchingSpanString((marrs::mrr::MRRCPPPrintUtils *)__p, *v84);
      if ((SBYTE7(v108) & 0x80u) == 0)
        v86 = __p;
      else
        v86 = (void **)__p[0];
      if ((SBYTE7(v108) & 0x80u) == 0)
        v87 = BYTE7(v108);
      else
        v87 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)v86, v87);
      if (SBYTE7(v108) < 0)
        operator delete(__p[0]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"Rewritten utterance - ", 22);
    v88 = *(__int128 **)(a3 + 40);
    if (v88)
    {
      if (*((char *)v88 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v88, *((_QWORD *)v88 + 1));
      }
      else
      {
        v89 = *v88;
        *(_QWORD *)&v108 = *((_QWORD *)v88 + 2);
        *(_OWORD *)__p = v89;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
    }
    if ((SBYTE7(v108) & 0x80u) == 0)
      v90 = __p;
    else
      v90 = (void **)__p[0];
    if ((SBYTE7(v108) & 0x80u) == 0)
      v91 = BYTE7(v108);
    else
      v91 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)v90, v91);
    std::ios_base::getloc((const std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24)));
    v92 = std::locale::use_facet((const std::locale *)&v114, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
    std::locale::~locale((std::locale *)&v114);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v108) < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    *(_QWORD *)&buf = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&buf + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (v121 < 0)
      operator delete(v120);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BC5BC8](v122);
    v93 = __p;
    if (SBYTE7(v108) < 0)
      v93 = (void **)__p[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v93;
    _os_log_impl(&dword_1C281A000, v81, OS_LOG_TYPE_DEBUG, "Develop: MR Model Response - %s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v108) < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)&buf = &v104;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_1C2895610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::locale a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57)
{
  if (a41 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  if (a55 < 0)
    operator delete(a50.__locale_);
  if (a20 < 0)
    operator delete(a15.__locale_);
  MEMORY[0x1C3BC54D8](&a57);
  a43 = &a12;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<marrs::mrr::mr::MRMatchingResult>>::__emplace_back_slow_path<std::vector<marrs::mrr::mr::MRMatchingResult>&>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)v8, *a2, a2[1], 0x82FA0BE82FA0BE83 * ((a2[1] - *a2) >> 3));
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<marrs::mrr::mr::MRMatchingResult>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_1C289593C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<marrs::mrr::mr::MRMatchingResult>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<marrs::mrr::mr::MRMatchingResult>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash,marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDComparator,std::allocator<marrs::mrr::mr::MRMatchingResult>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100](v2 + 16);
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

unint64_t marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash::operator()(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 312))
  {
    v1 = (char *)(a1 + 152);
    if (*(char *)(a1 + 175) >= 0)
    {
      v2 = *(unsigned __int8 *)(a1 + 175);
    }
    else
    {
      v1 = *(char **)(a1 + 152);
      v2 = *(_QWORD *)(a1 + 160);
    }
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = *v1++;
        v3 = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ v3);
        --v2;
      }
      while (v2);
      v5 = 0xC6A4A7935BD1E995 * v3;
    }
    else
    {
      v5 = 0;
    }
    v6 = 3864292196u
       - 0x395B586CA42E166BLL
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 96)) ^ ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 96)) >> 47))) ^ (0x35A98F4D286A90B9 * (v5 ^ (v5 >> 47)) + 3864292196u));
  }
  else
  {
    v6 = 0x8FCD151130102815;
  }
  return 3864292196u
       - 0x395B586CA42E166BLL
       * ((3864292196u
         - 0x395B586CA42E166BLL
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 76)) ^ ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 76)) >> 47))) ^ v6)) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 72)) ^ ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 72)) >> 47))));
}

BOOL marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDComparator::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
    return 0;
  v2 = *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72) || *(_BYTE *)(a1 + 312) == 0;
  if (v2 || *(_BYTE *)(a2 + 312) == 0)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 175);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 175);
  else
    v5 = *(_QWORD *)(a1 + 160);
  v6 = *(unsigned __int8 *)(a2 + 175);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 160);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 152);
  v11 = *(unsigned __int8 **)(a2 + 152);
  v9 = (unsigned __int8 *)(a2 + 152);
  v10 = v11;
  if (v7 < 0)
    v9 = v10;
  if ((v4 & 0x80) != 0)
    return memcmp(*v8, v9, *(_QWORD *)(a1 + 160)) == 0;
  result = 1;
  if ((_DWORD)v4)
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        return result;
    }
    return 0;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<marrs::mrr::mr::MRMatchingResult,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<marrs::mrr::mr::MRMatchingResult,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<std::vector<marrs::mrr::mr::MRMatchingResult>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::__unordered_map_hasher<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,true>,std::__unordered_map_equal<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::equal_to<sirinluinternal::MatchingSpan>,std::hash<sirinluinternal::MatchingSpan>,true>,std::allocator<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>>>::__emplace_unique_key_args<sirinluinternal::MatchingSpan,std::piecewise_construct_t const&,std::tuple<sirinluinternal::MatchingSpan const&>,std::tuple<>>(uint64_t a1, sirinluinternal::MatchingSpan *this, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  void *v36;
  _QWORD v37[2];
  char v38;

  v6 = sirinluinternal::MatchingSpan::hash_value(this);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v8)
        v3 = v6 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v6;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if ((sirinluinternal::MatchingSpan::operator==() & 1) != 0)
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0x98uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  MEMORY[0x1C3BC54C0](v15 + 16, *a3);
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  v38 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(void **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v14;
          if (*v14)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v14;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v37[0];
  if (v33)
  {
    *(_QWORD *)v37[0] = *v33;
LABEL_72:
    *v33 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8)
        v34 %= v8;
    }
    else
    {
      v34 &= v8 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  v37[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
  return i;
}

void sub_1C28960A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::__unordered_map_hasher<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,true>,std::__unordered_map_equal<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::equal_to<sirinluinternal::MatchingSpan>,std::hash<sirinluinternal::MatchingSpan>,true>,std::allocator<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    std::__destroy_at[abi:ne180100]<std::pair<sirinluinternal::MatchingSpan const,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,0>(v2 + 16);
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __n128 *v7;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v27[2];
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;

  if (a5 < 1)
    return;
  v6 = a3;
  v7 = a2;
  v9 = a1 + 2;
  v10 = a1[2];
  v11 = a1[1];
  if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v10 - v11) >> 3)) >= a5)
  {
    v19 = v11 - (_QWORD)a2;
    if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v11 - (_QWORD)a2) >> 3)) >= a5)
    {
      v21 = a3 + 344 * a5;
    }
    else
    {
      v21 = a3 + 8 * ((uint64_t)(v11 - (_QWORD)a2) >> 3);
      if (v21 == a4)
      {
        v23 = a1[1];
      }
      else
      {
        v22 = 0;
        do
        {
          std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((_QWORD *)(v11 + v22), v21 + v22);
          v22 += 344;
        }
        while (v21 + v22 != a4);
        v23 = v11 + v22;
      }
      a1[1] = v23;
      if (v19 < 1)
        return;
    }
    std::vector<marrs::mrr::mr::MRMatchingResult>::__move_range((uint64_t)a1, (uint64_t)v7, v11, (uint64_t)v7 + 344 * a5);
    for (; v6 != v21; v7 = (__n128 *)((char *)v7 + 344))
    {
      sirinluinternal::MatchingSpan::operator=();
      v7[5].n128_u32[2] = *(_DWORD *)(v6 + 88);
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<marrs::mrr::mr::MRREntity,false> const&>((marrs::mrr::mr::MRREntity *)&v7[6], (marrs::mrr::mr::MRREntity *)(v6 + 96));
      if (v7 != (__n128 *)v6)
        std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((char *)&v7[20], *(char **)(v6 + 320), *(_QWORD *)(v6 + 328), (uint64_t)(*(_QWORD *)(v6 + 328) - *(_QWORD *)(v6 + 320)) >> 2);
      v6 += 344;
    }
  }
  else
  {
    v12 = *a1;
    v13 = a5 - 0x7D05F417D05F417DLL * ((uint64_t)(v11 - *a1) >> 3);
    if (v13 > 0xBE82FA0BE82FA0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = 0x82FA0BE82FA0BE83 * (((uint64_t)a2 - v12) >> 3);
    v15 = 0x82FA0BE82FA0BE83 * ((v10 - v12) >> 3);
    v16 = 2 * v15;
    if (2 * v15 <= v13)
      v16 = v13;
    if (v15 >= 0x5F417D05F417D0)
      v17 = 0xBE82FA0BE82FA0;
    else
      v17 = v16;
    v30 = v9;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v17);
    else
      v18 = 0;
    v24 = (_QWORD *)(v17 + 344 * v14);
    v27[0] = v17;
    v27[1] = v24;
    v28 = v24;
    v29 = v17 + 344 * v18;
    v25 = 344 * a5;
    v26 = &v24[43 * a5];
    do
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v24, v6);
      v24 += 43;
      v6 += 344;
      v25 -= 344;
    }
    while (v25);
    v28 = v26;
    std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a1, v27, v7);
    std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)v27);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<sirinluinternal::MatchingSpan const,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,0>(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 88);
  v2 = (void **)(a1 + 112);
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1C3BC54D8);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<sirinluinternal::MatchingSpan const,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::basic_string(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str, std::basic_string<char16_t>::size_type __pos, std::basic_string<char16_t>::size_type __n, std::allocator<char16_t> *__a)
{
  const std::basic_string<char16_t> *v6;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v9;
  std::basic_string<char16_t>::size_type v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_18;
    v6 = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_18:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v9 = size - __pos;
  if (v9 >= __n)
    v10 = __n;
  else
    v10 = v9;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10 >= 0xB)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v10 | 3) != 0xB)
      v12 = v10 | 3;
    v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v11;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v10;
    v11 = this;
    if (!v10)
      goto LABEL_17;
  }
  memmove(v11, (char *)v6 + 2 * __pos, 2 * v10);
LABEL_17:
  *((_WORD *)v11 + v10) = 0;
  return this;
}

uint64_t marrs::mrr::mr::MRREntity::getDebugDescription(marrs::mrr::mr::MRREntity *this, int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type size;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  int v32;
  BOOL v33;
  uint64_t *v34;
  const char *v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  std::string::size_type v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void **v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *i;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  const char *v59;
  size_t v60;
  const char *v61;
  size_t v62;
  int *v63;
  std::string::size_type v64;
  void *v65[2];
  unsigned __int8 v66;
  std::string v67;
  __int128 v68;
  _QWORD v69[11];
  char v70;
  uint64_t v71;
  std::string v72;
  void *__p;
  char v74;
  _BYTE v75[160];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"MRREntity:\n", 11);
  v3 = qword_1ED7B1C58;
  if (!qword_1ED7B1C58)
    goto LABEL_11;
  v4 = *a2;
  v5 = &qword_1ED7B1C58;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 < v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = (uint64_t *)v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != &qword_1ED7B1C58 && v4 >= *((_DWORD *)v5 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  entityType - ", 15);
    v59 = (const char *)v5[5];
    v60 = strlen(v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v59, v60);
    v9 = "\n";
    v10 = 1;
  }
  else
  {
LABEL_11:
    v9 = "  entityType - Unknown key in EntityTypeStr \n";
    v10 = 45;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  entityValue - ", 16);
  v11 = *((char *)a2 + 31);
  if (v11 >= 0)
    v12 = (uint64_t)(a2 + 2);
  else
    v12 = *((_QWORD *)a2 + 1);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a2 + 31);
  else
    v13 = *((_QWORD *)a2 + 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  entityId - ", 13);
  v14 = *((char *)a2 + 79);
  if (v14 >= 0)
    v15 = (uint64_t)(a2 + 14);
  else
    v15 = *((_QWORD *)a2 + 7);
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a2 + 79);
  else
    v16 = *((_QWORD *)a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  appBundleId - ", 16);
  v17 = *((char *)a2 + 55);
  if (v17 >= 0)
    v18 = (uint64_t)(a2 + 8);
  else
    v18 = *((_QWORD *)a2 + 4);
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)a2 + 55);
  else
    v19 = *((_QWORD *)a2 + 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  ", 2);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"BoundingBox: [x:", 16);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", y:", 4);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", width:", 8);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", height:", 9);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
  std::stringbuf::str();
  v24 = *MEMORY[0x1E0DE4F60];
  v72.__r_.__value_.__r.__words[0] = v24;
  v64 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + *(_QWORD *)(v24 - 24)) = v64;
  v72.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (v74 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BC5BC8](v75);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v67;
  else
    v25 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    size = v67.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v25, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  saliencyScore - ", 18);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  Index from entities in request - ", 35);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
  v29 = qword_1ED7B1C70;
  if (!qword_1ED7B1C70)
    goto LABEL_50;
  v30 = a2[1];
  v31 = &qword_1ED7B1C70;
  do
  {
    v32 = *(_DWORD *)(v29 + 32);
    v33 = v32 < v30;
    if (v32 >= v30)
      v34 = (uint64_t *)v29;
    else
      v34 = (uint64_t *)(v29 + 8);
    if (!v33)
      v31 = (uint64_t *)v29;
    v29 = *v34;
  }
  while (*v34);
  if (v31 != &qword_1ED7B1C70 && v30 >= *((_DWORD *)v31 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  Source of entity - ", 21);
    v61 = (const char *)v31[5];
    v62 = strlen(v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v61, v62);
    v35 = "\n";
    v36 = 1;
  }
  else
  {
LABEL_50:
    v35 = "  Source of entity - Unknown key in EntitySourceStrMap \n";
    v36 = 56;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v35, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  Surroundingtexts to the entity - ", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
  v63 = a2;
  v37 = (__int128 *)*((_QWORD *)a2 + 14);
  v38 = (__int128 *)*((_QWORD *)a2 + 15);
  if (v37 != v38)
  {
    v39 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      if (*((char *)v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v40 = *v37;
        v67.__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v40;
      }
      v68 = *(__int128 *)((char *)v37 + 24);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"SurroundingText: [text: ", 24);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v67;
      else
        v41 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      else
        v42 = v67.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)v41, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"; BoundingBox: [x:",
        18);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", y:", 4);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", width:", 8);
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", height:", 9);
      v46 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"] ]", 3);
      std::stringbuf::str();
      v72.__r_.__value_.__r.__words[0] = v24;
      *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + *(_QWORD *)(v24 - 24)) = v64;
      v72.__r_.__value_.__l.__size_ = v39;
      if (v74 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BC5BC8](v75);
      if ((v66 & 0x80u) == 0)
        v47 = v65;
      else
        v47 = (void **)v65[0];
      if ((v66 & 0x80u) == 0)
        v48 = v66;
      else
        v48 = (uint64_t)v65[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v47, v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
      if ((char)v66 < 0)
        operator delete(v65[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      v37 = (__int128 *)((char *)v37 + 40);
    }
    while (v37 != v38);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"  Protocols to the entity - ", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
  v49 = (__int128 *)*((_QWORD *)v63 + 24);
  for (i = (__int128 *)*((_QWORD *)v63 + 25); v49 != i; v49 = (__int128 *)((char *)v49 + 24))
  {
    if (*((char *)v49 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
    }
    else
    {
      v51 = *v49;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v51;
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v72;
    else
      v52 = (std::string *)v72.__r_.__value_.__r.__words[0];
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    else
      v53 = v72.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v52, v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"groupId - ", 10);
  v54 = *((char *)v63 + 159);
  if (v54 >= 0)
    v55 = (uint64_t)(v63 + 34);
  else
    v55 = *((_QWORD *)v63 + 17);
  if (v54 >= 0)
    v56 = *((unsigned __int8 *)v63 + 159);
  else
    v56 = *((_QWORD *)v63 + 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v55, v56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"seqNum - ", 9);
  v57 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"\n", 1);
  std::stringbuf::str();
  v69[0] = v24;
  *(_QWORD *)((char *)v69 + *(_QWORD *)(v24 - 24)) = v64;
  v69[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v70 < 0)
    operator delete((void *)v69[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3BC5BC8](&v71);
}

void sub_1C2896D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<sirinluinternal::MatchingSpan,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,std::allocator<sirinluinternal::MatchingSpan>>::~__hash_table(uint64_t a1)
{
  void (***v2)(uint64_t);
  void (**v3)(uint64_t);
  void *v4;

  v2 = *(void (****)(uint64_t))(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      (*v2[2])((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = (void (***)(uint64_t))v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

xpc_object_t ___ZNK5marrs3mrr2mr14MROrchestrator15doCoreAnalyticsENS1_12MRResultTypeE_block_invoke(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  void *__p[2];
  char v8;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    if (v3 > 3)
      v4 = "NO_MR_TRIGGERED";
    else
      v4 = off_1E7C67588[v3];
    std::string::basic_string[abi:ne180100]<0>(__p, v4);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    xpc_dictionary_set_string(v2, "MrResolverType", (const char *)v5);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return v2;
}

void sub_1C2896E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<marrs::mrr::mr::EntityType,double>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,double>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,double>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x88uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    sirinluexternal::EntityCandidate::EntityCandidate((sirinluexternal::EntityCandidate *)(v11 + 7));
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1C28970AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v22;
  uint64_t *v23;

  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v6 = *a1 + 8;
  if ((uint64_t *)v6 != v5
    && !std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4))
  {
    if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v5 + 4, a2))
    {
      v22 = v5;
      v23 = v5;
      v12 = &v22;
      if (v5)
        goto LABEL_34;
LABEL_30:
      v5 = v23;
      goto LABEL_31;
    }
    v10 = v5[1];
    if (v10)
    {
      v11 = (uint64_t *)v5[1];
      do
      {
        v12 = (uint64_t **)v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      v15 = (uint64_t **)v5;
      do
      {
        v12 = (uint64_t **)v15[2];
        v14 = *v12 == (uint64_t *)v15;
        v15 = v12;
      }
      while (!v14);
    }
    if (v12 == (uint64_t **)v6
      || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v12 + 4))
    {
      if (v10)
      {
        v23 = (uint64_t *)v12;
      }
      else
      {
        v23 = v5;
        v12 = (uint64_t **)(v5 + 1);
      }
LABEL_29:
      v5 = *v12;
      if (*v12)
        goto LABEL_34;
      goto LABEL_30;
    }
LABEL_28:
    v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v4, &v23, a2);
    goto LABEL_29;
  }
  v7 = *v5;
  v8 = v5;
  if (*(uint64_t **)v4 != v5)
  {
    if (v7)
    {
      v9 = (uint64_t *)*v5;
      do
      {
        v8 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = v5;
      do
      {
        v8 = (uint64_t *)v13[2];
        v14 = *v8 == (_QWORD)v13;
        v13 = v8;
      }
      while (v14);
    }
    if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8 + 4, a2))
      goto LABEL_28;
  }
  if (v7)
  {
    v23 = v8;
    v12 = (uint64_t **)(v8 + 1);
    goto LABEL_29;
  }
  v23 = v5;
  v12 = (uint64_t **)v5;
LABEL_31:
  v16 = v5;
  v5 = (uint64_t *)operator new(0x38uLL);
  *((_OWORD *)v5 + 2) = *(_OWORD *)a2;
  v5[6] = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *v5 = 0;
  v5[1] = 0;
  v5[2] = (uint64_t)v16;
  *v12 = v5;
  v17 = **(_QWORD **)v4;
  v18 = v5;
  if (v17)
  {
    *(_QWORD *)v4 = v17;
    v18 = *v12;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v18);
  ++*(_QWORD *)(v4 + 16);
LABEL_34:
  a1[1] = (uint64_t)v5;
  v19 = (uint64_t *)v5[1];
  if (v19)
  {
    do
    {
      v20 = v19;
      v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
  else
  {
    do
    {
      v20 = (uint64_t *)v5[2];
      v14 = *v20 == (_QWORD)v5;
      v5 = v20;
    }
    while (!v14);
  }
  a1[1] = (uint64_t)v20;
  return a1;
}

uint64_t std::pair<std::string const,sirinluinternal::MatchingSpan>::~pair(uint64_t a1)
{
  MEMORY[0x1C3BC54D8](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string const,sirinluexternal::EntityCandidate>::~pair(uint64_t a1)
{
  MEMORY[0x1C3BC5418](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluexternal::EntityCandidate>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluinternal::MatchingSpan>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x90uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)(v11 + 7));
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1C28974F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluinternal::MatchingSpan>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluinternal::MatchingSpan>,0>(uint64_t a1)
{
  MEMORY[0x1C3BC54D8](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluexternal::EntityCandidate>,0>(uint64_t a1)
{
  MEMORY[0x1C3BC5418](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluexternal::EntityCandidate>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void sub_1C28977CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C2897968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C28979F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2897A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2897BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C2897D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C2897EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1C2898028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C28980E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C2898114()
{
  JUMPOUT(0x1C2898108);
}

void sub_1C28981B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C28981EC()
{
  JUMPOUT(0x1C28981E0);
}

void sub_1C28983A4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 64) = v2;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 64));

  _Unwind_Resume(a1);
}

void sub_1C2898558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 56) = v4;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 56));

  _Unwind_Resume(a1);
}

void sub_1C289867C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C28987B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2898884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C2898970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C2898A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2898C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C2898E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C2898FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C289915C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C2899318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C28994E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C2899664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id MRRLoggerForCategory(int a1)
{
  if (MRRLoggerForCategory::onceToken != -1)
    dispatch_once(&MRRLoggerForCategory::onceToken, &__block_literal_global_1264);
  return (id)MRRLoggerForCategory::logObjects[a1];
}

uint64_t **std::map<marrs::mrr::mr::EntityType,char const*>::map[abi:ne180100](uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  int *v5;
  uint64_t *v6;
  int *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  _OWORD *v16;
  uint64_t *v17;
  int v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[4 * a3];
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4;
      if (v8 == (uint64_t **)v4)
        goto LABEL_9;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v5;
      if (*((_DWORD *)v9 + 8) < *v5)
      {
LABEL_9:
        v14 = v6 ? v9 : v4;
        v15 = v6 ? v9 + 1 : v4;
      }
      else
      {
        v14 = v4;
        v15 = v4;
        if (v6)
        {
          v15 = v4;
          while (1)
          {
            while (1)
            {
              v14 = v6;
              v18 = *((_DWORD *)v6 + 8);
              if (v13 >= v18)
                break;
              v6 = (uint64_t *)*v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v18 >= v13)
              break;
            v15 = v14 + 1;
            v6 = (uint64_t *)v14[1];
            if (!v6)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x30uLL);
        v16[2] = *(_OWORD *)v5;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v14;
        *v15 = (uint64_t)v16;
        v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          v16 = (_OWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 4;
      if (v5 == v7)
        break;
      v8 = (uint64_t **)*a1;
      v6 = a1[1];
    }
  }
  return a1;
}

void sub_1C28998F4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<marrs::mrr::mr::EntityType,char const*>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::map<marrs::mrr::mr::EntitySource,char const*>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,marrs::mrr::mr::EntityType>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 8));
  return a1;
}

void marrs::mrr::mr::getUsoGraphProtoReader(marrs::mrr::mr *this)
{
  unsigned __int8 v1;
  siri::ontology *v2;
  uint64_t *SharedUsoVocabManager;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v2);
      v4 = *SharedUsoVocabManager;
      v5 = SharedUsoVocabManager[1];
      v9[0] = *SharedUsoVocabManager;
      v9[1] = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
        qword_1EF7866C0 = v5;
        do
          v8 = __ldxr(v6);
        while (__stxr(v8 + 1, v6));
      }
      else
      {
        qword_1EF7866C0 = 0;
      }
      marrs::mrr::mr::getUsoGraphProtoReader(void)::inst = v4;
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)v9);
      __cxa_atexit((void (*)(void *))siri::ontology::UsoGraphProtoReader::~UsoGraphProtoReader, &marrs::mrr::mr::getUsoGraphProtoReader(void)::inst, &dword_1C281A000);
    }
  }
}

void sub_1C2899A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 marrs::mrr::mr::getRectangleFromRRBoundingBox(uint64_t a1)
{
  float32x2_t v1;
  float32x2_t v2;
  int32x2_t v3;
  __n128 result;
  int32x2_t v5;
  NSObject *v6;
  _BOOL4 v7;
  uint8_t buf[16];

  v1 = vcvt_f32_f64(*(float64x2_t *)(a1 + 8));
  v2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 24));
  v3 = vceqz_f32(v2);
  result.n128_u64[0] = (unint64_t)v2;
  result.n128_u64[1] = __PAIR64__(v1.u32[0], v1.u32[1]);
  if ((vand_s8((int8x8_t)v3, (int8x8_t)vdup_lane_s32(v3, 1)).u8[0] & 1) != 0)
  {
    v5 = vceqz_f32(v1);
    if ((vand_s8((int8x8_t)vdup_lane_s32(v5, 1), (int8x8_t)v5).u8[0] & 1) != 0)
    {
      v6 = MRRLoggerForCategory(2);
      v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      result = (__n128)xmmword_1C289DFF0;
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C281A000, v6, OS_LOG_TYPE_ERROR, "Received a bounding box with all zeroes, setting it to default values of 0.1, 0.1, 1, 1", buf, 2u);
        return (__n128)xmmword_1C289DFF0;
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<marrs::mrr::mr::SurroundingText>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1C3BC57FC]();
    JUMPOUT(0x1C3BC5C7CLL);
  }
  return result;
}

uint64_t std::set<int>::~set[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t marrs::mrr::mr::mapMediaNodeToMRREntityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  siri::ontology::oname::graph::ontology_init *USONodeIndex;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  siri::ontology::oname::graph::ontology_init *v18;
  uint64_t v19;
  int v20;
  siri::ontology::oname::graph::ontology_init *v21;
  uint32_t v23;
  siri::ontology::oname::graph::ontology_init *v24;
  siri::ontology::oname::graph::ontology_init *v25;
  _DWORD v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = siri::ontology::oname::graph::ontology_init::Argument_playbackState((siri::ontology::oname::graph::ontology_init *)a1);
  USONodeIndex = (siri::ontology::oname::graph::ontology_init *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(v4 + 36));
  if (USONodeIndex)
  {
    v6 = *((_DWORD *)USONodeIndex + 5);
    v7 = siri::ontology::oname::graph::ontology_init::Argument_definedValue(USONodeIndex);
    USONodeIndex = (siri::ontology::oname::graph::ontology_init *)marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v6, *(_DWORD *)(v7 + 36));
    if ((_DWORD)USONodeIndex != -1)
    {
      v8 = *(_QWORD *)(a1 + 80);
      if (USONodeIndex >= (unint64_t)((*(_QWORD *)(a1 + 88) - v8) >> 3))
        goto LABEL_26;
      v9 = *(_QWORD *)(v8 + 8 * USONodeIndex);
      USONodeIndex = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_PlaybackState_Paused(USONodeIndex);
      if (*((_DWORD *)USONodeIndex + 9) == *(_DWORD *)(v9 + 72))
      {
        MRRLoggerForCategory(2);
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          LOWORD(v26[0]) = 0;
          v11 = "Media entity is paused skipping";
          v12 = v10;
          v13 = OS_LOG_TYPE_INFO;
LABEL_14:
          v23 = 2;
LABEL_15:
          _os_log_impl(&dword_1C281A000, v12, v13, v11, (uint8_t *)v26, v23);
          goto LABEL_16;
        }
        goto LABEL_16;
      }
    }
  }
  v14 = siri::ontology::oname::graph::ontology_init::Argument_mediaItemType(USONodeIndex);
  v15 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(v14 + 36));
  if (v15)
  {
    v16 = *((_DWORD *)v15 + 5);
    v17 = siri::ontology::oname::graph::ontology_init::Argument_definedValue((siri::ontology::oname::graph::ontology_init *)v15);
    v18 = (siri::ontology::oname::graph::ontology_init *)marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v16, *(_DWORD *)(v17 + 36));
    if ((_DWORD)v18 != -1)
    {
      v19 = *(_QWORD *)(a1 + 80);
      if (v18 < (unint64_t)((*(_QWORD *)(a1 + 88) - v19) >> 3))
      {
        v20 = *(_DWORD *)(*(_QWORD *)(v19 + 8 * v18) + 72);
        v21 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItemType_Song(v18);
        if (*((_DWORD *)v21 + 9) == v20)
          return 8;
        v24 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItemType_Artist(v21);
        if (*((_DWORD *)v24 + 9) == v20)
          return 7;
        v25 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItemType_Album(v24);
        if (*((_DWORD *)v25 + 9) == v20)
          return 9;
        if (*(_DWORD *)(siri::ontology::oname::graph::ontology_init::common_MediaItemType_Video(v25) + 36) == v20)
          return 10;
        MRRLoggerForCategory(2);
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v26[0] = 67109120;
          v26[1] = v20;
          v11 = "%d mediaItemTypeNodeId not supported";
          v12 = v10;
          v13 = OS_LOG_TYPE_DEBUG;
          v23 = 8;
          goto LABEL_15;
        }
        goto LABEL_16;
      }
LABEL_26:
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    }
  }
  MRRLoggerForCategory(2);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v26[0]) = 0;
    v11 = "unable to parse media entity";
    v12 = v10;
    v13 = OS_LOG_TYPE_ERROR;
    goto LABEL_14;
  }
LABEL_16:

  return 30;
}

