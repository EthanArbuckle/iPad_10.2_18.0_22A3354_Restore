CVPixelBufferRef CreatePixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CreatePixelBufferExtended(a1, a2, a3, 0, 0);
}

uint64_t CMIRangeAllocatorListAllocateFirstFit(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  result = 0;
  if (!a2 || !a3)
    return result;
  if (a4)
    v8 = a4 - 1;
  else
    v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(a1 + 8);
  if (!v9)
    return 0;
  v10 = 0;
  v11 = (*(_QWORD *)(a1 + 32) + a2) & ~*(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)a1;
  v13 = v11 + v8;
  v14 = ~v8;
  v15 = v11 - 1;
  v16 = v9 - 1;
  v17 = v16;
  while (1)
  {
    v18 = a5 ? v17 : v10;
    v19 = (unint64_t *)(v12 + 16 * v18);
    v20 = *v19;
    v23 = v19[1];
    v21 = v19 + 1;
    v22 = v23;
    if (a5)
      break;
    v25 = (v20 + v8) & v14;
    v26 = v15 + v25;
    if (v15 + v25 <= v22)
      goto LABEL_21;
LABEL_19:
    ++v10;
    if (--v17 == -1)
      return 0;
  }
  v24 = v22 - v13;
  if (v22 < v13)
    goto LABEL_19;
  v25 = v24 & v14;
  v26 = v15 + (v24 & v14);
  if ((v24 & v14) < v20 || v26 > v22)
    goto LABEL_19;
LABEL_21:
  if (v25 == v20)
  {
    v28 = (_QWORD *)(v12 + 16 * v18);
    if (v26 == v22)
    {
      *(_DWORD *)(a1 + 8) = v16;
      memmove(v28, v28 + 2, 16 * (v16 - v18));
    }
    else
    {
      *v28 = v26 + 1;
    }
LABEL_29:
    *a3 = v25;
    return 1;
  }
  else
  {
    if (v26 == v22)
    {
      *v21 = v25 - 1;
      goto LABEL_29;
    }
    result = allocElement(a1, (int)v18 + 1);
    if ((_DWORD)result)
    {
      v29 = *(_QWORD *)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 16 * v18 + 8) = v25 - 1;
      v30 = (_QWORD *)(v29 + 16 * (v18 + 1));
      *v30 = v26 + 1;
      v30[1] = v22;
      goto LABEL_29;
    }
  }
  return result;
}

uint64_t CMILSCOISAdaptation_convertV2LSCTableToV1LSCTable(void *a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = *MEMORY[0x1E0D05938];
  v4 = a1;
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = CMILSCOISAdaptation_convertV2LSCTableToV1LSCTableWithOISOffset(v4, v5, a2, 0.0, 0.0);

  return v6;
}

uint64_t allocElement(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 != v4 || (v6 = *(_QWORD *)(a1 + 24)) == 0)
  {
    if (*(_QWORD *)a1)
    {
      memmove((void *)(*(_QWORD *)a1 + 16 * a2 + 16), (const void *)(*(_QWORD *)a1 + 16 * a2), 16 * (v4 - a2));
LABEL_11:
      ++*(_DWORD *)(a1 + 8);
      return 1;
    }
    v6 = *(_QWORD *)(a1 + 24);
  }
  v7 = v6 + v5;
  if (v6 + v5)
  {
    result = (uint64_t)malloc_type_malloc(16 * v7, 0x12F13041uLL);
    if (!result)
      return result;
    v9 = result;
    if (*(_QWORD *)a1)
    {
      memmove((void *)result, *(const void **)a1, 16 * a2);
      memmove((void *)(v9 + 16 * a2 + 16), (const void *)(*(_QWORD *)a1 + 16 * a2), 16 * (*(_DWORD *)(a1 + 8) - a2));
      free(*(void **)a1);
    }
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_11;
  }
  return 0;
}

uint64_t CMILSCOISAdaptation_convertV2LSCTableToV1LSCTableWithOISOffset(void *a1, void *a2, _QWORD *a3, float a4, float a5)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  id v17;
  int32x2_t *v18;
  int32x2_t *v19;
  size_t v20;
  char *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  float32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  __int32 v30;
  char *v31;
  void *v32;
  uint64_t v33;
  float32x2_t v34;
  int32x2_t *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t i;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v47;
  float32x2_t v48;
  int32x2_t v49;
  size_t v50;
  void *v53;
  _DWORD v54[4];
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = v8;
  if (!v7 || !v8 || !a3)
  {
    FigDebugAssert3();
    v24 = FigSignalErrorAt();
    goto LABEL_24;
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D05978]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0D05BC8]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0D05B90]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v11, "unsignedIntValue");
  v14 = objc_msgSend(v12, "unsignedIntValue");
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D075B8]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
    v16 = 2;
  else
    v16 = 1;
  v53 = v9;
  v17 = objc_retainAutorelease(v9);
  v18 = (int32x2_t *)objc_msgSend(v17, "bytes");
  if (v18->i32[0] == 1)
  {
    *a3 = objc_retainAutorelease(v17);
LABEL_12:

    v24 = 0;
LABEL_13:
    v9 = v53;
    goto LABEL_24;
  }
  v19 = v18;
  if ((v18->i8[4] & 1) == 0)
  {
    v20 = 4 * (4 * v18[3].i32[0] * v18[3].i32[1]) + 48;
    v21 = (char *)malloc_type_malloc(v20, 0x21E87B46uLL);
    if (v21)
    {
      v22 = v21;
      *(_DWORD *)v21 = 1;
      *(_OWORD *)(v21 + 4) = *(_OWORD *)v19[1].i8;
      v23 = *(_OWORD *)v19[3].i8;
      *(_OWORD *)(v21 + 20) = v23;
      *(int32x2_t *)(v21 + 36) = v19[5];
      memcpy(v21 + 44, &v19[6], 4 * (4 * v23 * DWORD1(v23)));
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v22, v20);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      free(v22);
      goto LABEL_12;
    }
LABEL_26:
    FigDebugAssert3();
    v24 = FigSignalErrorAt();

    goto LABEL_13;
  }
  v25.i32[0] = v13 / v16;
  v25.i32[1] = v14 / v16;
  v48 = v25;
  v49 = v18[3];
  v26 = vadd_s32(v18[2], v18[2]);
  v26.i32[0] = v13 / v16 / v26.i32[0];
  v26.i32[1] = v14 / v16 / v26.i32[1];
  v27 = vadd_s32(v26, (int32x2_t)0x100000001);
  v28 = v27.u32[0];
  v47 = (float32x2_t)v27;
  v29 = v27.u32[1];
  v30 = v27.i32[0] * v27.i32[1];
  v50 = 16 * (v27.i32[0] * v27.i32[1]) + 48;
  v31 = (char *)malloc_type_malloc(v50, 0xF31A64A7uLL);
  if (!v31)
    goto LABEL_26;
  v32 = v31;
  v33 = 0;
  v34 = vsub_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)vsub_s32(v49, (int32x2_t)v47)), (float32x2_t)0x3F0000003F000000), vdiv_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(a5), LODWORD(a4)), v47), v48));
  *(_DWORD *)v31 = 1;
  *(_OWORD *)(v31 + 4) = *(_OWORD *)v19[1].i8;
  *(float32x2_t *)(v31 + 20) = v47;
  *((_DWORD *)v31 + 7) = 0;
  *((_DWORD *)v31 + 8) = v30;
  *((_DWORD *)v31 + 9) = 2 * v30;
  *((_DWORD *)v31 + 10) = 3 * v30;
  v37 = *(_OWORD *)v19[4].i8;
  v55 = v37;
  v54[0] = 0;
  v54[1] = v30;
  v54[2] = 2 * v30;
  v54[3] = 3 * v30;
  v35 = v19 + 6;
  v36 = v31 + 44;
  LODWORD(v37) = 1.0;
  v9 = v53;
  do
  {
    if ((_DWORD)v29)
    {
      v38 = 0;
      v39 = (uint64_t)v35 + 4 * *((unsigned int *)&v55 + v33);
      v40 = &v36[4 * v54[v33]];
      do
      {
        if ((_DWORD)v28)
        {
          for (i = 0; i != v28; ++i)
          {
            v42.f32[0] = (float)(int)i;
            v42.f32[1] = (float)(int)v38;
            v43 = vadd_f32(v34, v42);
            v44 = vrnd_f32(v43);
            v45 = vsub_f32(v43, v44);
            *(float *)&v40[4 * i] = vmuls_lane_f32((float)(*(float *)(v39+ 4* ((unint64_t)(float)(v44.f32[1] + 1.0) * v49.u32[0]+ (unint64_t)(float)(v44.f32[0] + 1.0)))* v45.f32[0])+ (float)(*(float *)(v39+ 4* ((unint64_t)(float)(v44.f32[1] + 1.0) * v49.u32[0]+ (unint64_t)v44.f32[0]))* (float)(1.0 - v45.f32[0])), v45, 1)+ (float)((float)((float)(*(float *)(v39+ 4* ((unint64_t)v44.f32[1] * v49.u32[0]+ (unint64_t)(float)(v44.f32[0] + 1.0)))* v45.f32[0])+ (float)(*(float *)(v39+ 4
                                                                     * ((unint64_t)v44.f32[1] * v49.u32[0]
                                                                      + (unint64_t)v44.f32[0]))
                                                          * (float)(1.0 - v45.f32[0])))
                                          * (float)(1.0 - v45.f32[1]));
          }
        }
        ++v38;
        v40 += 4 * v28;
      }
      while (v38 != v29);
    }
    ++v33;
  }
  while (v33 != 4);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v32, v50, *(double *)&v34, *(double *)&v37);
  *a3 = (id)objc_claimAutoreleasedReturnValue();
  free(v32);

  v24 = 0;
LABEL_24:

  return v24;
}

CVPixelBufferRef CreatePixelBufferExtended(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  CVPixelBufferRef PixelBufferWithAttributes;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AA70], *MEMORY[0x1E0CA8FF0]);
  if ((int)a4 >= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0CA8F68]);

  }
  if (a5 >= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (((_DWORD)a2 + a5 - 1) & -a5) - a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, *MEMORY[0x1E0CA8FA0]);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v13, *MEMORY[0x1E0CA90E0]);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v14, *MEMORY[0x1E0CA8FD8]);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v15, *MEMORY[0x1E0CA9040]);

  PixelBufferWithAttributes = CreatePixelBufferWithAttributes(a1, a2, a3, (CFDictionaryRef)v10);
  return PixelBufferWithAttributes;
}

CVPixelBufferRef CreatePixelBufferWithAttributes(int a1, int a2, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes)
{
  CVReturn v4;
  CVPixelBufferRef result;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v4 = CVPixelBufferCreate(0, a1, a2, pixelFormatType, pixelBufferAttributes, &pixelBufferOut);
  result = pixelBufferOut;
  if (v4)
  {
    if (pixelBufferOut)
    {
      CFRelease(pixelBufferOut);
      return 0;
    }
  }
  return result;
}

void filter_coefficients(int a1, int a2, int a3, int a4, int a5, int a6, unsigned int *a7, float a8)
{
  float v9;
  signed int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  BOOL v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int *v46;
  uint64_t v47;
  float v48;
  int v49;
  float v50;
  float v51;
  uint64_t v52;
  int v53;
  unsigned int *v54;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int *v63;
  int v64;
  float v65;
  int v66;
  float v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v63 = a7;
  if ((a3 - 1) >= 2)
  {
    v9 = 0.0;
    if (!a3)
    {
      if (a1 >= 1)
      {
        v43 = 0;
        v44 = a1 >> 1;
        do
        {
          if (v43 == v44)
            v45 = (int)(float)(unint64_t)(1 << a6) & ~(-1 << (a6
                                                                                     + a5));
          else
            v45 = 0;
          if (v43 == v44 && a6 + a5 >= 33)
            filter_coefficients_cold_1();
          v46 = v63;
          v47 = a2;
          if (a2 >= 1)
          {
            do
            {
              *v46++ = v45;
              --v47;
            }
            while (v47);
          }
          ++v43;
          v63 += a2;
        }
        while (v43 != a1);
      }
      return;
    }
  }
  else
  {
    v9 = a8;
    a8 = 1.0;
  }
  if (a8 > 1.0)
    a8 = 1.0;
  v67 = a8;
  v10 = a1 & 0xFFFFFFFE;
  if (a1 < 0)
    v10 = a1 & 0xFFFFFFFE | 1;
  if (a2 >= 1)
  {
    v58 = 0;
    v11 = v10 >> 1;
    v12 = (float)v11;
    v13 = (float)a1;
    v50 = (float)(0.5 / a8) + -0.5;
    v51 = (float)a2;
    v14 = -1.0;
    v15 = (float)((float)a1 + -1.0) * 0.5;
    v16 = (float)(int)floorf(v15);
    v61 = v9 * 0.5;
    v62 = (float)-vcvtms_s32_f32(v15);
    v60 = v9 + v9;
    v59 = sqrtf((float)(v9 + v9) * 3.1416);
    v49 = a6 + a5;
    v17 = -1 << (a6 + a5);
    v18 = 1 << (a6 + a5 - 1);
    v54 = &a7[v11 * a2];
    v53 = 1 << a6;
    v52 = a2;
    v48 = (float)(unint64_t)(1 << a6);
    v66 = -v11;
    v19 = 4 * a2;
    v20 = (unint64_t)a1 << 7;
    v21 = (float *)&v68;
    v64 = a3;
    v65 = v16;
    v57 = (float)v11;
    v56 = (float)a1;
    do
    {
      if (a1 < 1)
      {
        v38 = 0;
        v39 = v63;
      }
      else
      {
        v22 = 0;
        v23 = (float)(int)v58 / v51;
        if ((a1 & (v23 >= 0.5)) != 0)
          v24 = v23 + v14;
        else
          v24 = (float)(int)v58 / v51;
        v25 = 0.0;
        v26 = v21;
        do
        {
          if (a4 == 1)
            v27 = v24 + 1.0;
          else
            v27 = v24;
          if (a4 == 2)
            v27 = v50 + v24;
          v28 = 0.0;
          if (vabds_f32((float)(int)v22, v27 + v12) <= fminf(v27 + v12, (float)(v13 - (float)(v27 + v12)) + v14))
          {
            v29 = v67 * (float)((float)(v66 + v22) - v27);
            switch(a3)
            {
              case 1:
                v28 = 0.0;
                if (fabsf(v29) <= v61)
                  v28 = 1.0;
                break;
              case 3:
                if (v29 == 0.0)
                {
                  v35 = 1.0;
                }
                else
                {
                  v31 = sinf(v29 * 3.1416) / (float)(v29 * 3.1416);
                  v32 = (float)(v29 / v65) * 3.1416;
                  v33 = sinf(v32);
                  v16 = v65;
                  a3 = v64;
                  v34 = v33 / v32;
                  v12 = v57;
                  v35 = v31 * v34;
                  v13 = v56;
                  v14 = -1.0;
                }
                v36 = v35 < v16 && v35 > v62;
                v28 = 0.0;
                if (v36)
                  v28 = v35;
                break;
              case 2:
                v30 = expf((float)-(float)(v29 * v29) / v60);
                v16 = v65;
                a3 = v64;
                v28 = v30 / v59;
                break;
              default:
                return;
            }
          }
          *v26 = v28;
          v26 += 32;
          v25 = v25 + v28;
          ++v22;
        }
        while (a1 != v22);
        if (v49 > 32)
          filter_coefficients_cold_1();
        v37 = 0;
        v38 = 0;
        v39 = v63;
        v40 = v63;
        do
        {
          v41 = llroundf((float)(v21[v37 / 4] / v25) * v48) & ~v17;
          *v40 = v41;
          if ((v41 & v18) != 0)
            v42 = v17;
          else
            v42 = 0;
          v38 += v42 | v41;
          v40 = (unsigned int *)((char *)v40 + v19);
          v37 += 128;
        }
        while (v20 != v37);
      }
      v54[v58] += v53 - v38;
      ++v21;
      v63 = v39 + 1;
      ++v58;
    }
    while (v58 != v52);
  }
}

void FigMetalDecRef(id *a1)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  id v6;
  id *v7;

  if (a1)
  {
    objc_getAssociatedObject(*a1, 0);
    v2 = objc_claimAutoreleasedReturnValue();
    v7 = (id *)v2;
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 8);
      v4 = __OFSUB__(v3, 1);
      v5 = v3 - 1;
      if (v5 < 0 == v4)
      {
        *(_DWORD *)(v2 + 8) = v5;
        if (!v5)
        {
          if (*(_QWORD *)(v2 + 32))
          {
            objc_msgSend(*(id *)(v2 + 24), "makeBufferAliasable:", a1);
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              fig_log_get_emitter();
              FigDebugAssert3();
              goto LABEL_11;
            }
            objc_msgSend(v7[3], "makeTextureAliasable:", a1);
          }
        }
      }
    }
    v6 = *a1;
    *a1 = 0;

LABEL_11:
  }
}

CMSampleBufferRef CreateSampleBuffer(CVImageBufferRef imageBuffer, const CMSampleTimingInfo *a2)
{
  const __CFAllocator *v4;
  const CMSampleTimingInfo *v5;
  int v6;
  CMSampleBufferRef result;
  _OWORD v8[4];
  uint64_t v9;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CMSampleBufferRef sampleBufferOut;

  formatDescriptionOut = 0;
  sampleBufferOut = 0;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  if (imageBuffer)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], imageBuffer, &formatDescriptionOut))
    {
      fig_log_get_emitter();
    }
    else
    {
      if (a2)
        v5 = a2;
      else
        v5 = (const CMSampleTimingInfo *)v8;
      if (!CMSampleBufferCreateForImageBuffer(v4, imageBuffer, 1u, 0, 0, formatDescriptionOut, v5, &sampleBufferOut))
      {
        v6 = 0;
        goto LABEL_8;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
    v6 = 1;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v6 = FigSignalErrorAt();
  }
LABEL_8:
  if (formatDescriptionOut)
  {
    CFRelease(formatDescriptionOut);
    formatDescriptionOut = 0;
  }
  result = sampleBufferOut;
  if (v6)
  {
    if (sampleBufferOut)
    {
      CFRelease(sampleBufferOut);
      return 0;
    }
  }
  return result;
}

uint64_t rwppRegEngine_computeMemoryBlockSize(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  *(_DWORD *)(a4 + 112) = 0;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  v4 = *(_DWORD *)(result + 40);
  if (v4)
  {
    v5 = 0;
    v4 = 0;
    v6 = a3;
    v7 = a2;
    do
    {
      v8 = (v7 + 3) & 0xFFFFFFFC;
      v9 = (_DWORD *)(a4 + 4 * v5);
      *v9 = v8 * v6;
      v9[8] = v8;
      v9[16] = v6;
      v4 += 2 * v8 * v6;
      v7 >>= 1;
      v6 >>= 1;
      ++v5;
    }
    while (v5 < *(unsigned int *)(result + 40));
  }
  v10 = (a2 + 3) & 0xFFFFFFFC;
  v11 = v10 * a3;
  *(_DWORD *)(a4 + 96) = v10 * a3;
  *(_DWORD *)(a4 + 100) = v10;
  v12 = (2 * a2 + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a4 + 104) = v12 * a3;
  *(_DWORD *)(a4 + 108) = v12;
  *(_DWORD *)(a4 + 112) = v12 * a3 + v11 + v4;
  return result;
}

uint64_t rwppRegEngine_checkDefaults(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;

  if ((*(_DWORD *)a1 - 5) > 0xFFFFFFFB && (*(_DWORD *)(a1 + 40) - 9) > 0xFFFFFFF8)
  {
    v1 = *(_DWORD *)(a1 + 4);
    if (v1 > 1)
    {
      v2 = *(_DWORD *)(a1 + 8);
      if (v2 > 1
        && v2 * v1 < 0x401
        && (*(_DWORD *)(a1 + 12) - 6) > 0xFFFFFFFA
        && *(_DWORD *)(a1 + 16) == 11
        && *(_DWORD *)(a1 + 24) == 10
        && *(float *)(a1 + 28) >= 1.0
        && *(_DWORD *)(a1 + 36) > 3u)
      {
        return 0;
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0xFFFFFFFFLL;
}

uint64_t getIOPort(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  NSObject *v6;

  if (a4)
  {
    if (e5rt_execution_stream_operation_retain_input_port())
      goto LABEL_8;
  }
  else if (e5rt_execution_stream_operation_retain_output_port())
  {
LABEL_8:
    fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();

    return 0xFFFFFFFFLL;
  }
  result = 0;
  if (a1)
    *a1 = 0;
  return result;
}

uint64_t __getDefaultStorageMode_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  if (getDefaultStorageMode_defaultStorageMode != result)
    getDefaultStorageMode_defaultStorageMode = result;
  return result;
}

void sub_1D3244954(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CMIGetColorSpaceWithName(signed int a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t result;

  if (a1 > 5)
    return 0xFFFFFFFFLL;
  v3 = dword_1D33050F8[a1];
  if (a2)
  {
    v4 = dword_1D33050E0[a1];
    v5 = dword_1D33050C8[a1];
    *a2 = dword_1D33050B0[a1];
    a2[1] = v5;
    a2[2] = v4;
  }
  result = 0;
  if (a3)
    *a3 = v3;
  return result;
}

double CMIGetBaseYCCFromRGBConversionMatrix(int a1)
{
  __int128 *v1;
  __int128 v2;

  switch(a1)
  {
    case 3:
      v1 = &_PromotedConst;
      break;
    case 2:
      v1 = &_PromotedConst_16;
      break;
    case 1:
      v1 = &_PromotedConst_17;
      break;
    default:
      *(_QWORD *)&v2 = 0;
      return *(double *)&v2;
  }
  v2 = *v1;
  return *(double *)&v2;
}

double CMIGetBaseRGBFromYCCConversionMatrix(int a1)
{
  __int128 *v1;
  __int128 v2;

  switch(a1)
  {
    case 3:
      v1 = &_PromotedConst_18;
      break;
    case 2:
      v1 = &_PromotedConst_19;
      break;
    case 1:
      v1 = &_PromotedConst_20;
      break;
    default:
      *(_QWORD *)&v2 = 0;
      return *(double *)&v2;
  }
  v2 = *v1;
  return *(double *)&v2;
}

double CMIGetYCCFromRGBConversionMatrix(int a1, unsigned __int8 a2, int a3, double a4, double a5, double a6, int32x4_t a7, int32x4_t a8)
{
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  _OWORD v25[4];
  _OWORD v26[4];

  switch(a1)
  {
    case 3:
      v8 = &_PromotedConst;
      goto LABEL_7;
    case 2:
      v8 = &_PromotedConst_16;
      goto LABEL_7;
    case 1:
      v8 = &_PromotedConst_17;
LABEL_7:
      v10 = v8[1];
      v9 = v8[2];
      v11 = *v8;
      goto LABEL_9;
  }
  *(_QWORD *)&v11 = 0;
  DWORD2(v11) = 0;
  *(_QWORD *)&v10 = 0;
  DWORD2(v10) = 0;
  *(_QWORD *)&v9 = 0;
  DWORD2(v9) = 0;
LABEL_9:
  if ((a2 | 2) == 0xA)
  {
    v12 = a2 | 2;
    if (a3)
    {
      if (v12 == 10)
      {
        a7.i32[0] = 8;
        a8.i32[0] = a2;
        v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a8, a7), 0);
        v14 = (int8x16_t)xmmword_1D3304E30;
        v15 = (int8x16_t)xmmword_1D3304E40;
LABEL_16:
        v16 = (int32x4_t)vbslq_s8(v13, v15, v14);
        goto LABEL_18;
      }
    }
    else if (v12 == 10)
    {
      a7.i32[0] = 8;
      a8.i32[0] = a2;
      v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a8, a7), 0);
      v14 = (int8x16_t)xmmword_1D3304E10;
      v15 = (int8x16_t)xmmword_1D3304E20;
      goto LABEL_16;
    }
    v16 = 0uLL;
    goto LABEL_18;
  }
  v16 = (int32x4_t)xmmword_1D3304E00;
LABEL_18:
  v17 = 0;
  v18.i32[0] = 0;
  v18.i32[1] = v16.i32[2];
  v19 = vdupq_lane_s32(v18, 1);
  v20 = (float32x4_t)v16.u32[0];
  v21 = (float32x4_t)vzip2q_s32((int32x4_t)0, v19);
  v22.i64[0] = 0;
  v22.i64[1] = v16.u32[2];
  v23 = (float32x4_t)vzip2q_s32(vzip2q_s32(vdupq_lane_s32(*(int32x2_t *)v16.i8, 1), v16), vdupq_laneq_s32(v16, 3));
  HIDWORD(v11) = 0;
  HIDWORD(v10) = 0;
  HIDWORD(v9) = 0;
  v25[0] = v11;
  v25[1] = v10;
  v25[2] = v9;
  v25[3] = xmmword_1D3304E50;
  memset(v26, 0, sizeof(v26));
  do
  {
    v26[v17] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(v25[v17])), v21, *(float32x2_t *)&v25[v17], 1), v22, (float32x4_t)v25[v17], 2), v23, (float32x4_t)v25[v17], 3);
    ++v17;
  }
  while (v17 != 4);
  return *(double *)v26;
}

double CMIGetRGBFromYCCConversionMatrix(int a1, unsigned __int8 a2, int a3, double a4, double a5, double a6, int32x4_t a7, int32x2_t a8)
{
  __int128 *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  int32x4_t v17;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  _OWORD v31[4];
  _OWORD v32[4];

  switch(a1)
  {
    case 3:
      v8 = &_PromotedConst_18;
      goto LABEL_7;
    case 2:
      v8 = &_PromotedConst_19;
      goto LABEL_7;
    case 1:
      v8 = &_PromotedConst_20;
LABEL_7:
      v10 = (float32x4_t)v8[1];
      v9 = (float32x4_t)v8[2];
      v11 = (float32x4_t)*v8;
      goto LABEL_9;
  }
  v11 = 0uLL;
  v10 = 0uLL;
  v9 = 0uLL;
LABEL_9:
  a7.i32[0] = 0;
  v12 = 1.0;
  if ((a2 | 2) != 0xA)
  {
    a8.i32[0] = 1.0;
    v13 = 0.0;
    goto LABEL_20;
  }
  if (!a3)
  {
    if (a2 == 8)
    {
      v13 = 0.50196;
      a8.i32[0] = 1065287423;
    }
    else
    {
      if (a2 != 10)
      {
        v14 = 0.0;
        a8.i32[0] = 0;
        v13 = 0.0;
        goto LABEL_21;
      }
      v13 = 0.50049;
      a8.i32[0] = 1065336816;
    }
    goto LABEL_20;
  }
  if (a2 == 8)
  {
    v13 = 0.50196;
    a8.i32[0] = 1063313633;
    a7.i32[0] = 1031831681;
    v12 = 1062984668;
LABEL_20:
    v14 = *(float *)a7.i32;
    a7.i32[0] = v12;
    goto LABEL_21;
  }
  v14 = 0.0;
  a8.i32[0] = 0;
  v13 = 0.0;
  if (a2 == 10)
  {
    v13 = 0.50049;
    a8.i32[0] = 1063270414;
    a7.i32[0] = 1031806984;
    v12 = 1062942414;
    goto LABEL_20;
  }
LABEL_21:
  v15 = 0;
  v16 = 1.0 / *(float *)a7.i32;
  v17.i64[0] = 0;
  v17.i32[2] = 0;
  *(float *)&v17.i32[3] = (float)-v14 / *(float *)a7.i32;
  *(float *)a7.i32 = -v13;
  __asm { FMOV            V5.2S, #1.0 }
  _Q5.i32[1] = a7.i32[0];
  *(float32x2_t *)a7.i8 = vdiv_f32(*(float32x2_t *)_Q5.i8, (float32x2_t)vdup_lane_s32(a8, 0));
  v23 = vtrn1q_s32((int32x4_t)0, a7);
  _Q5.i64[1] = a7.i64[0];
  v24 = vzip2q_s32(v17, _Q5);
  v25 = vdupq_lane_s32(*(int32x2_t *)v23.i8, 1);
  v23.i32[3] = a7.i32[1];
  v26 = vzip2q_s32(v23, (int32x4_t)0);
  *(float *)v23.i32 = v16;
  v27 = vzip1q_s32(v24, v26);
  v28 = vzip2q_s32((int32x4_t)0, v25);
  v28.i32[3] = 0;
  v27.i32[3] = 0;
  v29 = vzip2q_s32(v24, v26);
  v29.i32[3] = 0;
  v31[0] = v23.u32[0];
  v31[1] = v28;
  v31[2] = v27;
  v31[3] = v29;
  memset(v32, 0, sizeof(v32));
  do
  {
    v32[v15] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(v31[v15])), v10, *(float32x2_t *)&v31[v15], 1), v9, (float32x4_t)v31[v15], 2);
    ++v15;
  }
  while (v15 != 4);
  return *(double *)v32;
}

double CMIGetXYZForIlluminant(int a1)
{
  double result;

  if (a1 == 2)
    return 0.00781250185;
  result = 0.0;
  if (a1 == 1)
    return 0.00781250185;
  return result;
}

double CMIGetChromaticAdaptationMatrix(unsigned int a1, unsigned int a2)
{
  double result;
  float32x4_t v3;
  float32x4_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  result = 0.0;
  if (a1 <= 2 && a2 <= 2)
  {
    if (a1 == a2)
    {
      return *(double *)&_PromotedConst_21;
    }
    else
    {
      if (a1 == 2)
      {
        v3 = (float32x4_t)xmmword_1D3304E60;
      }
      else
      {
        v3 = 0uLL;
        if (a1 == 1)
          v3 = (float32x4_t)xmmword_1D3304E70;
      }
      if (a2 == 2)
      {
        v4 = (float32x4_t)xmmword_1D3304E60;
      }
      else
      {
        v4 = 0uLL;
        if (a2 == 1)
          v4 = (float32x4_t)xmmword_1D3304E70;
      }
      v5 = 0;
      v6 = vdivq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1D3304E80, v3.f32[0]), (float32x4_t)xmmword_1D3304E90, *(float32x2_t *)v3.f32, 1), (float32x4_t)xmmword_1D3304EA0, v3, 2), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1D3304E80, v4.f32[0]), (float32x4_t)xmmword_1D3304E90, *(float32x2_t *)v4.f32, 1), (float32x4_t)xmmword_1D3304EA0, v4, 2));
      v7.i32[0] = 0;
      v7.i64[1] = 0;
      v7.i32[1] = v6.i32[1];
      v8.i64[0] = 0;
      v8.i64[1] = v6.u32[2];
      v10 = xmmword_1D3304E80;
      v11 = xmmword_1D3304E90;
      v12 = xmmword_1D3304EA0;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      do
      {
        *(__int128 *)((char *)&v13 + v5) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v6.u32[0], COERCE_FLOAT(*(__int128 *)((char *)&v10 + v5))), v7, *(float32x2_t *)((char *)&v10 + v5), 1), v8, *(float32x4_t *)((char *)&v10 + v5), 2);
        v5 += 16;
      }
      while (v5 != 48);
      v9 = 0;
      v10 = v13;
      v11 = v14;
      v12 = v15;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      do
      {
        *(__int128 *)((char *)&v13 + v9) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1D3304EB0, COERCE_FLOAT(*(__int128 *)((char *)&v10 + v9))), (float32x4_t)xmmword_1D3304EC0, *(float32x2_t *)((char *)&v10 + v9), 1), (float32x4_t)xmmword_1D3304ED0, *(float32x4_t *)((char *)&v10 + v9), 2);
        v9 += 16;
      }
      while (v9 != 48);
      return *(double *)&v13;
    }
  }
  return result;
}

double CMIGetColorConversionMatrix(int a1, int a2)
{
  float32x4_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  _OWORD v10[3];
  _OWORD v11[3];

  v2 = 0uLL;
  *(_QWORD *)&v3 = 0;
  DWORD2(v3) = 0;
  *(_QWORD *)&v4 = 0;
  DWORD2(v4) = 0;
  *(_QWORD *)&v5 = 0;
  DWORD2(v5) = 0;
  switch(a2)
  {
    case 0:
      v5 = *MEMORY[0x1E0C83FE8];
      v4 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 16);
      v3 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 32);
      break;
    case 1:
      v5 = xmmword_1D3304F70;
      v4 = xmmword_1D3304F80;
      v3 = xmmword_1D3304F90;
      break;
    case 2:
      v5 = xmmword_1D3304F40;
      v4 = xmmword_1D3304F50;
      v3 = xmmword_1D3304F60;
      break;
    case 3:
      v5 = xmmword_1D3304F10;
      v4 = xmmword_1D3304F20;
      v3 = xmmword_1D3304F30;
      break;
    case 4:
      v5 = xmmword_1D3304EE0;
      v4 = xmmword_1D3304EF0;
      v3 = xmmword_1D3304F00;
      break;
    default:
      break;
  }
  HIDWORD(v5) = 0;
  HIDWORD(v4) = 0;
  v6 = 0uLL;
  HIDWORD(v3) = 0;
  v7 = 0uLL;
  switch(a1)
  {
    case 0:
      v7 = *(float32x4_t *)MEMORY[0x1E0C83FE8];
      v6 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
      v2 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 32);
      break;
    case 1:
      v7 = (float32x4_t)xmmword_1D3305030;
      v6 = (float32x4_t)xmmword_1D3305040;
      v2 = (float32x4_t)xmmword_1D3305050;
      break;
    case 2:
      v7 = (float32x4_t)xmmword_1D3305000;
      v6 = (float32x4_t)xmmword_1D3305010;
      v2 = (float32x4_t)xmmword_1D3305020;
      break;
    case 3:
      v7 = (float32x4_t)xmmword_1D3304FD0;
      v6 = (float32x4_t)xmmword_1D3304FE0;
      v2 = (float32x4_t)xmmword_1D3304FF0;
      break;
    case 4:
      v7 = (float32x4_t)xmmword_1D3304FA0;
      v6 = (float32x4_t)xmmword_1D3304FB0;
      v2 = (float32x4_t)xmmword_1D3304FC0;
      break;
    default:
      break;
  }
  v8 = 0;
  v10[0] = v5;
  v10[1] = v4;
  v10[2] = v3;
  memset(v11, 0, sizeof(v11));
  do
  {
    v11[v8] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(v10[v8])), v6, *(float32x2_t *)&v10[v8], 1), v2, (float32x4_t)v10[v8], 2);
    ++v8;
  }
  while (v8 != 3);
  return *(double *)v11;
}

uint64_t CMIGetPixelFormatInfo(OSType pixelFormat)
{
  CFDictionaryRef v1;
  void *v2;
  unsigned int v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, pixelFormat);
  -[__CFDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9180]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  -[__CFDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9188]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLValue");

  -[__CFDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9178]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "BOOLValue");

  -[__CFDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9168]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  -[__CFDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA91B0]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = objc_msgSend(v10, "count") << 32;
  else
    v12 = 0x100000000;
  -[__CFDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA90F0]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "unsignedIntValue");

  -[__CFDictionary objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9120]);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14
    && (objc_msgSend(v14, "isEqual:", *MEMORY[0x1E0CA9128]) & 1) == 0
    && !objc_msgSend(v15, "isEqual:", *MEMORY[0x1E0CA9130]))
  {
    objc_msgSend(v15, "isEqual:", *MEMORY[0x1E0CA9138]);
  }

  v16 = 0x1000000;
  if (!v9)
    v16 = 0;
  v17 = 0x10000;
  if (!v7)
    v17 = 0;
  v18 = 256;
  if (!v5)
    v18 = 0;
  return v18 | v3 | v17 | v16 | v12;
}

uint64_t CMIGetPixelBufferYCCMatrix(__CVBuffer *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0CA8F18];
  v9[0] = *MEMORY[0x1E0CA8F10];
  v9[1] = v2;
  v10[0] = &unk_1E9513978;
  v10[1] = &unk_1E9513990;
  v9[2] = *MEMORY[0x1E0CA8F00];
  v10[2] = &unk_1E95139A8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
  if (v4)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "unsignedCharValue");

    }
    else
    {
      v7 = 5;
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t CMIGetPixelBufferColorSpace(__CVBuffer *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[4];
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0CA8D80];
  v23[0] = *MEMORY[0x1E0CA8D88];
  v23[1] = v2;
  v24[0] = &unk_1E9513978;
  v24[1] = &unk_1E9513990;
  v3 = *MEMORY[0x1E0CA8D98];
  v23[2] = *MEMORY[0x1E0CA8D70];
  v23[3] = v3;
  v24[2] = &unk_1E95139A8;
  v24[3] = &unk_1E95139C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *MEMORY[0x1E0CA8ED8];
  v21[0] = *MEMORY[0x1E0CA8EB8];
  v21[1] = v5;
  v22[0] = &unk_1E9513978;
  v22[1] = &unk_1E9513990;
  v6 = *MEMORY[0x1E0CA8EB0];
  v21[2] = *MEMORY[0x1E0CA8EE0];
  v21[3] = v6;
  v22[2] = &unk_1E95139A8;
  v22[3] = &unk_1E95139C0;
  v7 = *MEMORY[0x1E0CA8EA8];
  v21[4] = *MEMORY[0x1E0CA8EA0];
  v21[5] = v7;
  v22[4] = &unk_1E95139D8;
  v22[5] = &unk_1E95139F0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  if (v9)
  {
    objc_msgSend(v4, "objectForKeyedSubscript:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v10, "unsignedCharValue");

    }
    else
    {
      v12 = 6;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (v13)
  {
    objc_msgSend(v8, "objectForKeyedSubscript:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      v16 = objc_msgSend(v14, "unsignedCharValue");
      if (v16 == 2)
      {
        v17 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8DF8], 0);
        if (v17)
        {
          v18 = v17;
          objc_msgSend(v17, "floatValue");

        }
        v19 = 2;
      }
      else
      {
        v19 = v16;
      }
    }
    else
    {
      v19 = 9;
    }
  }
  else
  {
    v19 = 0;
    v15 = 0;
  }

  return v12 | (v19 << 32);
}

uint64_t CMIGetYCCFromRGBConversionMatrixForPixelBuffer(__CVBuffer *a1, uint64_t a2)
{
  OSType PixelFormatType;
  __int16 v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  int v9;
  int32x4_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  double v16;
  int v17;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CMIGetPixelFormatInfo(PixelFormatType);
  *(_QWORD *)&v7 = 0;
  DWORD2(v7) = 0;
  if ((v5 & 0x100) != 0)
  {
    v8 = v6;
    v9 = CMIGetPixelBufferYCCMatrix(a1);
    result = 0xFFFFFFFFLL;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0.0;
    v17 = 0;
    if ((_BYTE)v9)
    {
      v7 = 0uLL;
      if (v9 != 5)
      {
        v16 = CMIGetYCCFromRGBConversionMatrix(v9, v8, HIDWORD(v8) == 1, 0.0, 0.0, 0.0, (int32x4_t)0, v10);
        result = 0;
      }
    }
    else
    {
      *(_QWORD *)&v7 = 0;
      DWORD2(v7) = 0;
    }
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0.0;
    v17 = 0;
  }
  *(_DWORD *)(a2 + 8) = v17;
  *(double *)a2 = v16;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 56) = DWORD2(v7);
  *(_QWORD *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 60) = 0;
  return result;
}

uint64_t CMIGetRGBFromYCCConversionMatrixForPixelBuffer(__CVBuffer *a1, uint64_t a2)
{
  OSType PixelFormatType;
  __int16 v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  int v9;
  int32x2_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  double v16;
  int v17;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CMIGetPixelFormatInfo(PixelFormatType);
  *(_QWORD *)&v7 = 0;
  DWORD2(v7) = 0;
  if ((v5 & 0x100) != 0)
  {
    v8 = v6;
    v9 = CMIGetPixelBufferYCCMatrix(a1);
    result = 0xFFFFFFFFLL;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0.0;
    v17 = 0;
    if ((_BYTE)v9)
    {
      v7 = 0uLL;
      if (v9 != 5)
      {
        v16 = CMIGetRGBFromYCCConversionMatrix(v9, v8, HIDWORD(v8) == 1, 0.0, 0.0, 0.0, (int32x4_t)0, v10);
        result = 0;
      }
    }
    else
    {
      *(_QWORD *)&v7 = 0;
      DWORD2(v7) = 0;
    }
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0.0;
    v17 = 0;
  }
  *(_DWORD *)(a2 + 8) = v17;
  *(double *)a2 = v16;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 56) = DWORD2(v7);
  *(_QWORD *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 60) = 0;
  return result;
}

uint64_t CMIGetMetalPixelFormatForPixelBuffer(__CVBuffer *a1, char *a2, BOOL *a3)
{
  int PixelFormatType;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  __int16 v19;
  char v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v7 = 540;
  if (PixelFormatType > 875704949)
  {
    if (PixelFormatType <= 1886860339)
    {
      if (PixelFormatType > 1380411456)
      {
        if (PixelFormatType <= 1885745711)
        {
          if (PixelFormatType > 1882468911)
          {
            if (PixelFormatType != 1882468912)
            {
              if (PixelFormatType != 1882468914)
              {
                v8 = 1882469428;
                goto LABEL_104;
              }
              goto LABEL_109;
            }
LABEL_137:
            v7 = 546;
            goto LABEL_139;
          }
          if (PixelFormatType != 1380411457)
          {
            if (PixelFormatType == 1815491698)
            {
              v7 = 110;
              goto LABEL_139;
            }
LABEL_204:
            v7 = 0;
            goto LABEL_139;
          }
LABEL_129:
          v7 = 115;
          goto LABEL_139;
        }
        if (PixelFormatType <= 1885746227)
        {
          if (PixelFormatType == 1885745712)
            goto LABEL_137;
          v14 = 1885745714;
          goto LABEL_108;
        }
        if (PixelFormatType != 1885746228)
        {
          if (PixelFormatType == 1886859824)
            goto LABEL_137;
          v14 = 1886859826;
LABEL_108:
          if (PixelFormatType != v14)
            goto LABEL_204;
LABEL_109:
          v7 = 547;
          goto LABEL_139;
        }
        goto LABEL_138;
      }
      if (PixelFormatType > 1278226487)
      {
        if (PixelFormatType <= 1278226535)
        {
          if (PixelFormatType == 1278226488)
          {
            v7 = 10;
            goto LABEL_139;
          }
          if (PixelFormatType == 1278226534)
          {
            v7 = 55;
            goto LABEL_139;
          }
          goto LABEL_204;
        }
        if (PixelFormatType == 1278226536)
        {
          v7 = 25;
          goto LABEL_139;
        }
        if (PixelFormatType == 1380401729)
        {
          v7 = 70;
          goto LABEL_139;
        }
        if (PixelFormatType != 1380410945)
          goto LABEL_204;
        v7 = 125;
        goto LABEL_139;
      }
      if (PixelFormatType <= 875836533)
      {
        if (PixelFormatType != 875704950)
        {
          v16 = 875836518;
          goto LABEL_118;
        }
        goto LABEL_120;
      }
      if (PixelFormatType != 875836534)
      {
        v10 = 1111970369;
LABEL_123:
        if (PixelFormatType != v10)
          goto LABEL_204;
LABEL_124:
        v7 = 80;
        goto LABEL_139;
      }
LABEL_125:
      v7 = 542;
      goto LABEL_139;
    }
    if (PixelFormatType > 2021078067)
    {
      if (PixelFormatType <= 2085775424)
      {
        if (PixelFormatType > 2084070959)
        {
          if (PixelFormatType == 2084070960 || PixelFormatType == 2084075056)
            goto LABEL_139;
          v10 = 2084718401;
          goto LABEL_123;
        }
        if (PixelFormatType != 2021078068)
        {
          v17 = 2037741158;
LABEL_112:
          if (PixelFormatType != v17)
            goto LABEL_204;
LABEL_113:
          v7 = 501;
          goto LABEL_139;
        }
LABEL_132:
        v7 = 545;
        goto LABEL_139;
      }
      if (PixelFormatType > 2088265265)
      {
        if (PixelFormatType == 2088265266)
          goto LABEL_109;
        if (PixelFormatType == 2088269360)
          goto LABEL_137;
        v14 = 2088269362;
        goto LABEL_108;
      }
      if (PixelFormatType == 2085775425)
        goto LABEL_129;
      v9 = 2088265264;
LABEL_136:
      if (PixelFormatType == v9)
        goto LABEL_137;
      goto LABEL_204;
    }
    if (PixelFormatType <= 2019963439)
    {
      if (PixelFormatType > 2016686641)
      {
        if (PixelFormatType != 2016686642)
        {
          if (PixelFormatType != 2016687156)
            goto LABEL_204;
          goto LABEL_132;
        }
LABEL_133:
        v7 = 544;
        goto LABEL_139;
      }
      if (PixelFormatType == 1886860340)
        goto LABEL_138;
      if (PixelFormatType != 2016686640)
        goto LABEL_204;
    }
    else if (PixelFormatType <= 2019963955)
    {
      if (PixelFormatType != 2019963440)
      {
        v13 = 2019963442;
LABEL_99:
        if (PixelFormatType != v13)
          goto LABEL_204;
        goto LABEL_133;
      }
    }
    else
    {
      if (PixelFormatType == 2019963956)
        goto LABEL_132;
      if (PixelFormatType != 2021077552)
      {
        v13 = 2021077554;
        goto LABEL_99;
      }
    }
    v7 = 543;
    goto LABEL_139;
  }
  if (PixelFormatType <= 758674991)
  {
    if (PixelFormatType > 645424687)
    {
      if (PixelFormatType <= 645428785)
      {
        if (PixelFormatType <= 645424691)
        {
          if (PixelFormatType == 645424688)
            goto LABEL_137;
          v14 = 645424690;
          goto LABEL_108;
        }
        if (PixelFormatType == 645424692)
        {
LABEL_138:
          v7 = 548;
          goto LABEL_139;
        }
        v9 = 645428784;
        goto LABEL_136;
      }
      if (PixelFormatType <= 645494117)
      {
        if (PixelFormatType != 645428786)
        {
          v8 = 645428788;
LABEL_104:
          if (PixelFormatType != v8)
            goto LABEL_204;
          goto LABEL_138;
        }
        goto LABEL_109;
      }
      if (PixelFormatType == 645494118 || PixelFormatType == 645494131)
        goto LABEL_113;
      v12 = 758670896;
    }
    else
    {
      if (PixelFormatType > 641234479)
      {
        if (PixelFormatType > 641234483)
        {
          if (PixelFormatType == 641234484)
            goto LABEL_125;
          if (PixelFormatType == 641877825)
            goto LABEL_124;
          v11 = 642934849;
          goto LABEL_84;
        }
        if (PixelFormatType == 641234480)
          goto LABEL_139;
        v15 = 641234482;
LABEL_90:
        if (PixelFormatType != v15)
          goto LABEL_204;
        goto LABEL_120;
      }
      if (PixelFormatType > 641230385)
      {
        if (PixelFormatType != 641230386)
        {
          v16 = 641230388;
LABEL_118:
          if (PixelFormatType != v16)
            goto LABEL_204;
          goto LABEL_125;
        }
LABEL_120:
        v7 = 541;
        goto LABEL_139;
      }
      if (PixelFormatType == 32)
      {
        v7 = 84;
        goto LABEL_139;
      }
      v12 = 641230384;
    }
LABEL_64:
    if (PixelFormatType != v12)
      goto LABEL_204;
    goto LABEL_139;
  }
  if (PixelFormatType > 792872768)
  {
    if (PixelFormatType <= 796423729)
    {
      if (PixelFormatType > 796419631)
      {
        if (PixelFormatType == 796419632)
          goto LABEL_137;
        if (PixelFormatType == 796419634)
          goto LABEL_109;
        v9 = 796423728;
        goto LABEL_136;
      }
      if (PixelFormatType == 792872769)
        goto LABEL_124;
      v11 = 793929793;
LABEL_84:
      if (PixelFormatType != v11)
        goto LABEL_204;
      goto LABEL_129;
    }
    if (PixelFormatType <= 875704421)
    {
      if (PixelFormatType == 796423730)
        goto LABEL_109;
      v17 = 846624121;
      goto LABEL_112;
    }
    if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
      goto LABEL_139;
    v15 = 875704934;
    goto LABEL_90;
  }
  if (PixelFormatType <= 762865201)
  {
    if (PixelFormatType <= 760375360)
    {
      if (PixelFormatType == 758674992)
        goto LABEL_139;
      v10 = 759318337;
      goto LABEL_123;
    }
    if (PixelFormatType == 760375361)
      goto LABEL_129;
    v18 = 26160;
    goto LABEL_128;
  }
  if (PixelFormatType <= 762869297)
  {
    if (PixelFormatType == 762865202)
      goto LABEL_109;
    v18 = 30256;
LABEL_128:
    v9 = v18 | 0x2D780000;
    goto LABEL_136;
  }
  if (PixelFormatType == 762869298)
    goto LABEL_109;
  if (PixelFormatType != 792225328)
  {
    v12 = 792229424;
    goto LABEL_64;
  }
LABEL_139:
  v19 = CMIGetPixelFormatInfo(PixelFormatType);
  if (a2 && *a2)
  {
    if ((v19 & 0x100) == 0)
      goto LABEL_142;
    if (v7 > 539)
    {
      v28 = v7 - 540;
      v20 = 1;
      v7 = 500;
      switch(v28)
      {
        case 0:
          goto LABEL_143;
        case 1:
          v7 = 502;
          break;
        case 2:
          v7 = 503;
          break;
        case 3:
          v7 = 505;
          break;
        case 4:
          v7 = 506;
          break;
        case 5:
          v7 = 507;
          break;
        case 6:
          v7 = 508;
          break;
        case 7:
          v7 = 509;
          break;
        case 8:
          v7 = 510;
          break;
        default:
          goto LABEL_142;
      }
      goto LABEL_143;
    }
    if (v7 == 70 || v7 == 80)
    {
      v20 = 1;
      v7 = 560;
    }
    else
    {
LABEL_142:
      v20 = 0;
    }
LABEL_143:
    *a2 = v20;
  }
  if (a3 && *a3)
  {
    v21 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
    v22 = v21;
    if (v21)
    {
      v23 = v21;
      v24 = v23;
      v25 = 0;
      if (v7 <= 499)
      {
        if (v7 > 83)
        {
          if (v7 > 93)
          {
            v26 = 0;
            v27 = 0;
          }
          else
          {
            v25 = 0;
            v26 = 0;
            v27 = 85;
          }
        }
        else if (v7 > 69)
        {
          v25 = 0;
          v26 = 0;
          if (v7 == 70)
            v27 = 71;
          else
            v27 = 81;
        }
        else if (v7 == 10)
        {
          v25 = 0;
          v26 = 0;
          v27 = 11;
        }
        else
        {
          v26 = 0;
          v27 = 0;
        }
      }
      else if (v7 > 549)
      {
        v26 = 0;
        v27 = 0;
      }
      else
      {
        v26 = 0;
        v27 = 0;
        switch(v7)
        {
          case 500:
            v25 = 0;
            v26 = 0;
            v27 = 520;
            break;
          case 501:
            v25 = 0;
            v26 = 0;
            v27 = 521;
            break;
          case 502:
            v25 = 0;
            v26 = 0;
            v27 = 522;
            break;
          case 503:
            v25 = 0;
            v26 = 0;
            v27 = 523;
            break;
          case 504:
            v27 = 524;
            v26 = 607;
            v25 = 563;
            break;
          case 505:
            v27 = 525;
            v26 = 608;
            goto LABEL_187;
          case 506:
            v27 = 526;
            v26 = 609;
            goto LABEL_189;
          case 507:
            v27 = 527;
            v26 = 610;
            goto LABEL_191;
          case 508:
            v27 = 528;
            v26 = 611;
LABEL_187:
            v25 = 564;
            break;
          case 509:
            v27 = 529;
            v26 = 612;
LABEL_189:
            v25 = 565;
            break;
          case 510:
            v27 = 530;
            v26 = 613;
LABEL_191:
            v25 = 566;
            break;
          default:
            break;
        }
      }
      if ((objc_msgSend(v23, "isEqual:", *MEMORY[0x1E0CA8EE0]) & 1) == 0)
      {
        v27 = v26;
        if ((objc_msgSend(v24, "isEqual:", *MEMORY[0x1E0CA8EA8]) & 1) == 0)
        {
          if (objc_msgSend(v24, "isEqual:", *MEMORY[0x1E0CA8EC8]))
            v27 = v25;
          else
            v27 = 0;
        }
      }

      if (v27)
        v7 = v27;
      *a3 = v27 != 0;
    }

  }
  return v7;
}

uint64_t bfpn_update_running_stats(uint64_t *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, float a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  float v42;

  if (!a1 || (v8 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v9 = a1[2];
  v10 = a1[3];
  if (v10 < 4 * v9)
    goto LABEL_50;
  if (!a3)
    goto LABEL_49;
  v11 = *a3;
  if (!*a3)
    goto LABEL_49;
  v12 = a3[2];
  v13 = a3[3];
  if (v13 < 4 * v12)
    goto LABEL_50;
  if (!a4)
    goto LABEL_49;
  v14 = *a4;
  if (!*a4)
    goto LABEL_49;
  v16 = a4[2];
  v15 = a4[3];
  if (v15 < 4 * v16)
    goto LABEL_50;
  if (!a5 || (v17 = *a5) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v19 = a5[2];
  v18 = a5[3];
  if (v18 < 4 * v19)
    goto LABEL_50;
  if (!a6 || (v20 = *a6) == 0)
  {
LABEL_49:
    FigDebugAssert3();
    return 4294967268;
  }
  v22 = a6[2];
  v21 = a6[3];
  if (v21 < 4 * v22)
  {
LABEL_50:
    FigDebugAssert3();
    return 4294967277;
  }
  if (v9 != v12)
    goto LABEL_57;
  v23 = a1[1];
  if (v23 != a3[1])
    goto LABEL_58;
  if (v9 != v16)
    goto LABEL_57;
  if (v23 != a4[1])
    goto LABEL_58;
  if (v9 != v19)
    goto LABEL_57;
  if (v23 != a5[1])
    goto LABEL_58;
  if (v9 != v22)
  {
LABEL_57:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v23 != a6[1])
  {
LABEL_58:
    FigDebugAssert3();
    return 4294967279;
  }
  v24 = v10 >> 2;
  v25 = v13 >> 2;
  v26 = v15 >> 2;
  v27 = v18 >> 2;
  v28 = v21 >> 2;
  if ((a2 & 1) != 0)
  {
    if (v23)
    {
      v29 = 4 * v28;
      v30 = 4 * v27;
      v31 = 4 * v26;
      v32 = 4 * v25;
      v33 = 4 * v24;
      do
      {
        if (v9)
        {
          for (i = 0; i != v9; ++i)
          {
            v35 = (float)(*(float *)(v8 + 4 * i) + a8) * a7;
            *(float *)(v11 + 4 * i) = v35;
            *(float *)(v14 + 4 * i) = v35 * v35;
            *(float *)(v17 + 4 * i) = v35;
            *(float *)(v20 + 4 * i) = v35;
          }
        }
        v20 += v29;
        v17 += v30;
        v14 += v31;
        v11 += v32;
        v8 += v33;
        --v23;
      }
      while (v23);
    }
  }
  else if (v23)
  {
    v36 = 4 * v28;
    v37 = 4 * v27;
    v38 = 4 * v26;
    v39 = 4 * v25;
    v40 = 4 * v24;
    do
    {
      if (v9)
      {
        for (j = 0; j != v9; ++j)
        {
          v42 = (float)(*(float *)(v8 + 4 * j) + a8) * a7;
          *(float *)(v11 + 4 * j) = *(float *)(v11 + 4 * j) + v42;
          *(float *)(v14 + 4 * j) = *(float *)(v14 + 4 * j) + (float)(v42 * v42);
          *(float *)(v17 + 4 * j) = fminf(*(float *)(v17 + 4 * j), v42);
          *(float *)(v20 + 4 * j) = fmaxf(*(float *)(v20 + 4 * j), v42);
        }
      }
      v20 += v36;
      v17 += v37;
      v14 += v38;
      v11 += v39;
      v8 += v40;
      --v23;
    }
    while (v23);
  }
  return 0;
}

uint64_t bfpn_upsample2x(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t Row;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  int v20;
  int v21;
  float v22;
  float v23;
  uint64_t v24;
  _OWORD v26[11];
  uint64_t v27;

  v27 = 0;
  memset(v26, 0, sizeof(v26));
  if (!a1)
    goto LABEL_39;
  if (!a2)
    goto LABEL_41;
  if (!*a1)
  {
LABEL_39:
    FigDebugAssert3();
    v24 = 4294967281;
    goto LABEL_35;
  }
  v3 = a1[2];
  if (a1[3] < (unint64_t)(4 * v3))
    goto LABEL_44;
  v4 = *a2;
  if (!*a2)
  {
LABEL_41:
    FigDebugAssert3();
    v24 = 4294967278;
    goto LABEL_35;
  }
  v5 = a2[2];
  if (v3 != (unint64_t)(v5 + 1) >> 1)
  {
    FigDebugAssert3();
    v24 = 4294967280;
    goto LABEL_35;
  }
  v6 = a2[1];
  v7 = (unint64_t)(v6 + 1) >> 1;
  if (v7 != a1[1])
  {
    FigDebugAssert3();
    v24 = 4294967279;
    goto LABEL_35;
  }
  v8 = a2[3];
  if (v8 < 4 * v5)
  {
LABEL_44:
    FigDebugAssert3();
    v24 = 4294967277;
    goto LABEL_35;
  }
  v9 = bfpn_sampler_init((uint64_t)v26, a1[2], v7, 1);
  if ((_DWORD)v9)
  {
    v24 = v9;
    FigDebugAssert3();
  }
  else if ((int)v6 < 1)
  {
LABEL_34:
    v24 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 4 * (v8 >> 2);
    while (1)
    {
      v12 = v10 - 1;
      if (v10 < 1)
        v12 = v10;
      v13 = v12 >> 1;
      Row = bfpn_sampler_fetchRow((uint64_t)v26, a1, v12 >> 1);
      if (!Row)
        break;
      v15 = Row;
      v16 = bfpn_sampler_fetchRow((uint64_t)v26, a1, v13 + 1);
      if (!v16)
        break;
      if ((v10 & 1) != 0)
        v17 = 0.75;
      else
        v17 = 0.25;
      if ((v10 & 1) != 0)
        v18 = 0.25;
      else
        v18 = 0.75;
      if ((int)v5 >= 1)
      {
        v19 = 0;
        do
        {
          v20 = v19 - 1;
          if ((int)v19 - 1 < 0)
            v20 = v19;
          v21 = v20 >> 1;
          if ((v19 & 1) != 0)
            v22 = 0.75;
          else
            v22 = 0.25;
          if ((v19 & 1) != 0)
            v23 = 0.25;
          else
            v23 = 0.75;
          *(float *)(v4 + 4 * v19++) = (float)(v18
                                             * (float)((float)(v23 * *(float *)(v16 + 4 * v21 + 4))
                                                     + (float)(v22 * *(float *)(v16 + 4 * v21))))
                                     + (float)(v17
                                             * (float)((float)(v23 * *(float *)(v15 + 4 * v21 + 4))
                                                     + (float)(v22 * *(float *)(v15 + 4 * v21))));
        }
        while ((_DWORD)v5 != (_DWORD)v19);
      }
      ++v10;
      v4 += v11;
      if (v10 == (_DWORD)v6)
        goto LABEL_34;
    }
    FigDebugAssert3();
    v24 = 4294967269;
  }
LABEL_35:
  bfpn_sampler_free((uint64_t)v26);
  return v24;
}

uint64_t strideForTexture(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v1 = a1;
  v2 = objc_msgSend(v1, "pixelFormat");
  if (v2 == 589)
  {
    v3 = 2 * objc_msgSend(v1, "width") + 2;
  }
  else
  {
    if (v2 != 588)
    {
      v5 = objc_msgSend(v1, "width");
      objc_msgSend(v1, "device");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "pixelFormat");
      MTLPixelFormatGetInfoForDevice();
      v4 = v8 * v5;

      goto LABEL_7;
    }
    v3 = objc_msgSend(v1, "width") + 2;
  }
  v4 = (2 * (((unint64_t)v3 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_7:

  return v4;
}

void sub_1D324F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t pixelBufferLineIterator(__CVBuffer *a1, void *a2)
{
  uint64_t (**v3)(id, char *, size_t, uint64_t, uint64_t, size_t, unint64_t, unint64_t);
  uint64_t v4;
  int IsPlanar;
  size_t PlaneCount;
  size_t v7;
  unint64_t v8;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFArray *Value;
  const __CFArray *v17;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v19;
  unsigned int v20;
  int v21;
  const __CFDictionary *v22;
  const __CFNumber *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *key;
  __CVBuffer *v34;
  OSType pixelFormat[2];
  int v36;
  int v37;
  int valuePtr;

  v3 = a2;
  if (CVPixelBufferLockBaseAddress(a1, 0))
  {
    NSLog(CFSTR("CMIBareMetalTexture: Unable to lock pixel buffer for reading/writing."));
    v4 = 0xFFFFFFFFLL;
    goto LABEL_41;
  }
  IsPlanar = CVPixelBufferIsPlanar(a1);
  if (IsPlanar)
  {
    PlaneCount = CVPixelBufferGetPlaneCount(a1);
    *(_QWORD *)pixelFormat = CVPixelBufferGetPixelFormatType(a1);
    v30 = PlaneCount;
    if (!PlaneCount)
    {
LABEL_5:
      v4 = 0;
      goto LABEL_40;
    }
  }
  else
  {
    *(_QWORD *)pixelFormat = CVPixelBufferGetPixelFormatType(a1);
    v30 = 1;
  }
  v7 = 0;
  v8 = 0;
  key = (void *)*MEMORY[0x1E0CA91B0];
  v32 = (void *)*MEMORY[0x1E0CA90E8];
  v31 = (void *)*MEMORY[0x1E0CA9108];
  v34 = a1;
  v29 = IsPlanar;
  while (1)
  {
    if (IsPlanar)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v7);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v7);
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v7);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v7);
    }
    else
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(a1);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
      WidthOfPlane = CVPixelBufferGetWidth(a1);
      HeightOfPlane = CVPixelBufferGetHeight(a1);
    }
    v13 = HeightOfPlane;
    v14 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, pixelFormat[0]);
    if (!v14)
      goto LABEL_38;
    v15 = v14;
    Value = (const __CFArray *)CFDictionaryGetValue(v14, key);
    v17 = Value;
    if (v7 && !Value)
      goto LABEL_37;
    ValueAtIndex = v15;
    if (v17)
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v7);
    v19 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v32);
    if (!v19)
    {
      NSLog(CFSTR("CMIBareMetalTexture: No kCVPixelFormatBitsPerBlock entry in the description of format %08x plane %ld\n"), *(_QWORD *)pixelFormat, v7);
LABEL_37:
      CFRelease(v15);
LABEL_38:
      NSLog(CFSTR("CMIBareMetalTexture: Unexpected pixelSizeInBytes for texture."), v28);
      goto LABEL_39;
    }
    valuePtr = 0;
    CFNumberGetValue(v19, kCFNumberIntType, &valuePtr);
    v20 = valuePtr;
    if ((valuePtr & 7) != 0)
      pixelBufferLineIterator_cold_1();
    v21 = valuePtr + 7;
    if (valuePtr >= 0)
      v21 = valuePtr;
    v36 = v21;
    v22 = v15;
    if (v17)
      v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v7);
    v23 = (const __CFNumber *)CFDictionaryGetValue(v22, v31);
    if (v23)
    {
      v37 = 0;
      CFNumberGetValue(v23, kCFNumberIntType, &v37);
      v24 = v37;
    }
    else
    {
      v24 = 1;
    }
    CFRelease(v15);
    if (v20 <= 7)
      goto LABEL_38;
    v25 = v36 >> 3;
    if (!v7)
      break;
    if (v13)
      goto LABEL_30;
LABEL_33:
    ++v7;
    a1 = v34;
    IsPlanar = v29;
    if (v7 == v30)
      goto LABEL_5;
  }
  v8 = (WidthOfPlane + v24 - 1) / v24 * v25;
  if (!v13)
    goto LABEL_33;
LABEL_30:
  v26 = 0;
  while ((v3[2](v3, BaseAddressOfPlane, v7, v26, v25, WidthOfPlane, v24, v8) & 1) != 0)
  {
    ++v26;
    BaseAddressOfPlane += BytesPerRowOfPlane;
    if (v13 == v26)
      goto LABEL_33;
  }
  NSLog(CFSTR("CMIBareMetalTexture: Something went wrong at row %ld\n"), v26);
LABEL_39:
  v4 = 0xFFFFFFFFLL;
  a1 = v34;
LABEL_40:
  CVPixelBufferUnlockBaseAddress(a1, 0);
LABEL_41:

  return v4;
}

BOOL is1DTexture(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  if (objc_msgSend(v1, "textureType"))
    v2 = objc_msgSend(v1, "textureType") == 1;
  else
    v2 = 1;

  return v2;
}

uint64_t bfpn_convert_uint8_to_float(uint64_t *a1, uint64_t *a2, float a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;

  if (!a1 || (v5 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v7 = a1[2];
  v6 = a1[3];
  if (v6 < v7)
    goto LABEL_19;
  if (!a2 || (v8 = *a2) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v9 = a2[2];
  v10 = a2[3];
  if (v10 < 4 * v9)
  {
LABEL_19:
    FigDebugAssert3();
    return 4294967277;
  }
  else if (v7 == v9)
  {
    v11 = a1[1];
    if (v11 == a2[1])
    {
      if (v11)
      {
        v12 = 4 * (v10 >> 2);
        do
        {
          if (v7)
          {
            for (i = 0; i != v7; ++i)
            {
              LOBYTE(a5) = *(_BYTE *)(v5 + i);
              a5 = a4 + (float)(a3 * (float)LODWORD(a5));
              *(float *)(v8 + 4 * i) = a5;
            }
          }
          v5 += v6;
          v8 += v12;
          --v11;
        }
        while (v11);
      }
      return 0;
    }
    else
    {
      FigDebugAssert3();
      return 4294967279;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967280;
  }
}

uint64_t bfpn_bilateral_weights(uint64_t *a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;

  if (!a1 || (v4 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v6 = a1[2];
  v5 = a1[3];
  if (v5 < 4 * v6)
    goto LABEL_26;
  if (!a2 || (v7 = *a2) == 0)
  {
    FigDebugAssert3();
    return 4294967268;
  }
  v9 = a2[2];
  v8 = a2[3];
  if (v8 < 4 * v9)
    goto LABEL_26;
  if (!a3 || (v10 = *a3) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v12 = a3[2];
  v11 = a3[3];
  if (v11 < 4 * v12)
  {
LABEL_26:
    FigDebugAssert3();
    return 4294967277;
  }
  if (v6 != v9)
    goto LABEL_29;
  v13 = a1[1];
  if (v13 != a2[1])
    goto LABEL_30;
  if (v6 != v12)
  {
LABEL_29:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v13 != a3[1])
  {
LABEL_30:
    FigDebugAssert3();
    return 4294967279;
  }
  if (v13)
  {
    v14 = 4 * (v11 >> 2);
    v15 = -1.0 / (float)((float)(a4 + a4) * a4);
    v16 = 4 * (v8 >> 2);
    v17 = 4 * (v5 >> 2);
    do
    {
      if (v6)
      {
        for (i = 0; i != v6; ++i)
          *(float *)(v10 + 4 * i) = expf(v15* (float)((float)(*(float *)(v4 + 4 * i) - *(float *)(v7 + 4 * i))* (float)(*(float *)(v4 + 4 * i) - *(float *)(v7 + 4 * i))));
      }
      v10 += v14;
      v7 += v16;
      v4 += v17;
      --v13;
    }
    while (v13);
  }
  return 0;
}

uint64_t bfpn_spatial_minimum_and_maximum(uint64_t *a1, float *a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t i;
  float v11;
  uint64_t result;

  if (a1 && (v3 = *a1) != 0)
  {
    v4 = a1[2];
    v5 = a1[3];
    if (v5 < 4 * v4)
    {
      FigDebugAssert3();
      return 4294967277;
    }
    else if (a2 && a3)
    {
      v6 = a1[1];
      if (v6)
      {
        v7 = 4 * (v5 >> 2);
        v8 = 3.4028e38;
        v9 = 1.1755e-38;
        do
        {
          if (v4)
          {
            for (i = 0; i != v4; ++i)
            {
              v11 = *(float *)(v3 + 4 * i);
              v8 = fminf(v8, v11);
              v9 = fmaxf(v9, v11);
            }
          }
          v3 += v7;
          --v6;
        }
        while (v6);
      }
      else
      {
        v9 = 1.1755e-38;
        v8 = 3.4028e38;
      }
      result = 0;
      *a2 = v8;
      *a3 = v9;
    }
    else
    {
      FigDebugAssert3();
      return 4294967266;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967281;
  }
  return result;
}

void maximizeThreadgroupParameters(void *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  id v15;

  v15 = a1;
  v7 = objc_msgSend(v15, "threadExecutionWidth");
  v8 = objc_msgSend(v15, "maxTotalThreadsPerThreadgroup");
  if (!(a2 % v7))
  {
    v9 = v8 / v7;
    if (!(v8 % v7) && !(a3 % v9))
      goto LABEL_17;
  }
  if (!v7)
  {
    v7 = 1;
    v9 = 1;
LABEL_17:
    v11 = v15;
    goto LABEL_18;
  }
  v9 = 1;
  v10 = v7;
  v7 = 1;
  v11 = v15;
  do
  {
    if (a2 % v10)
      v12 = 1;
    else
      v12 = v10 > v8;
    if (!v12)
    {
      v13 = 1;
      v14 = v10;
      do
      {
        if (a3 % v13 == 0 && v14 > v9 * v7)
        {
          v7 = v10;
          v9 = v13;
        }
        ++v13;
        v14 += v10;
      }
      while (v14 <= v8);
    }
    --v10;
  }
  while (v10);
LABEL_18:
  *a4 = a2 / v7;
  a4[1] = a3 / v9;
  a4[2] = 1;
  a4[3] = v7;
  a4[4] = v9;
  a4[5] = 1;

}

uint64_t buildHistogramMapping(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  int32x4_t v5;
  uint64_t v6;
  unsigned int v7;
  float v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  _DWORD v21[256];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *a3 = 1.0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_DWORD *)(result + 4 + 4 * v9);
        v11 += v12;
        v21[v9] = v11;
        v10 += v12 * v9++;
      }
      while (v9 != 256);
      if (v10 / v11 < 0x60)
      {
        v13 = 0;
        v14 = 95 * v11 / 0x64;
        v15 = 255;
        v16 = -1;
        do
        {
          v17 = v21[v13];
          v18 = v14 - v17;
          v19 = v17 >= v14;
          v20 = v17 - v14;
          if (!v19)
            v20 = v18;
          if (v20 < v16)
          {
            v15 = v13;
            v16 = v20;
          }
          ++v13;
        }
        while (v13 != 256);
        *a3 = fminf(255.0 / (float)v15, 2.0);
      }
    }
    else if (*(_DWORD *)result == 1)
    {
      v3 = 0;
      v4 = result + 4;
      v5 = 0uLL;
      do
      {
        v5 = vaddq_s32(*(int32x4_t *)(v4 + v3), v5);
        v3 += 16;
      }
      while (v3 != 1024);
      v6 = 0;
      v7 = 0;
      v8 = 255.0 / (float)vaddvq_s32(v5);
      do
      {
        v7 += *(_DWORD *)(v4 + 4 * v6);
        *(_BYTE *)(a2 + v6++) = vcvtms_s32_f32(v8 * (float)v7);
      }
      while (v6 != 256);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t verifyRoi(uint64_t result)
{
  double v1;
  double v3;
  double v5;
  double v7;
  double v8;
  BOOL v9;

  if (result)
  {
    v1 = *(double *)result;
    if (*(double *)result < 0.0 || v1 > 1.0)
      return 0xFFFFFFFFLL;
    v3 = *(double *)(result + 8);
    if (v3 < 0.0 || v3 > 1.0)
      return 0xFFFFFFFFLL;
    v5 = *(double *)(result + 16);
    if (v5 < 0.0 || v5 > 1.0)
      return 0xFFFFFFFFLL;
    v7 = *(double *)(result + 24);
    v8 = v1 + v5;
    v9 = v3 + v7 > 1.0 || v8 > 1.0;
    if (v9 || v7 < 0.0 || v7 > 1.0)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

id cmimes_resourceId(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  if ((objc_msgSend(v1, "conformsToProtocol:", &unk_1EFCE4480) & 1) != 0
    || objc_msgSend(v1, "conformsToProtocol:", &unk_1EFCECA78))
  {
    v2 = (void *)objc_msgSend(v1, "iosurface");
  }
  else
  {
    v2 = 0;
  }
  if (!v2)
    v2 = v1;
  v3 = v2;

  return v3;
}

void sub_1D3261168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D3261250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D3261374(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double rwppGeomTrans_estimate(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4, int a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v13;
  uint64_t v14;
  double result;
  float32x2_t v16;
  float v17;
  float v18;
  uint64_t v19;
  unsigned __int16 *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  unsigned int v26;
  uint64_t v27;
  float32x2_t v29;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float v39;

  if (a5)
    v13 = a1 + 111648;
  else
    v13 = a1 + 103456;
  if (a5)
    v14 = a1 + 103456;
  else
    v14 = a1 + 111648;
  if (*(_DWORD *)a2 != 1)
  {
    if (*(_DWORD *)a2 != 2)
      return rwppGeomTrans_estimateRigidTransform(a2 + 16, v13, v14, a3, a4);
    if (!rwppGeomTrans_estimateHomographyTransform(a2 + 16, v13, v14, a3, a4, a6, a7, a8, a9, a10))
      return result;
  }
  if (a4)
  {
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = a4;
    v20 = a3;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    v25 = 0;
    do
    {
      v26 = *v20++;
      v27 = 8 * v26;
      _D18 = *(float32x2_t *)(v14 + v27);
      v29 = *(float32x2_t *)(v13 + v27);
      v17 = vmlas_n_f32(v17, _D18.f32[0], _D18.f32[0]);
      _S21 = _D18.i32[1];
      v18 = vmlas_n_f32(v18, _D18.f32[1], _D18.f32[0]);
      v21 = v21 + _D18.f32[0];
      __asm { FMLA            S16, S21, V18.S[1] }
      v22 = v22 + _D18.f32[1];
      v16 = vmla_n_f32(v16, _D18, v29.f32[0]);
      v24 = v24 + v29.f32[0];
      v25 = vmla_lane_f32(v25, _D18, v29, 1);
      v23 = v23 + v29.f32[1];
      --v19;
    }
    while (v19);
  }
  else
  {
    v24 = 0.0;
    v23 = 0.0;
    v16 = 0;
    v25 = 0;
  }
  v36 = v16;
  v37 = v24;
  v38 = v25;
  v39 = v23;
  sposv_NEWLAPACK();
  result = COERCE_DOUBLE(__PAIR64__(v38.u32[0], v36.u32[0]));
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = __PAIR64__(v38.u32[0], v36.u32[0]);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 32) = __PAIR64__(v38.u32[1], v36.u32[1]);
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(_QWORD *)(a2 + 48) = __PAIR64__(LODWORD(v39), LODWORD(v37));
  return result;
}

uint64_t rwppGeomTrans_estimateHomographyTransform(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned int a5, double a6, double a7, double a8, double a9, double a10)
{
  float32x2_t v10;
  unsigned __int16 *v12;
  uint64_t v16;
  float32x2_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  float32x2_t v20;
  unsigned int v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  unsigned __int16 *v27;
  float v28;
  unsigned int v29;
  uint64_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  unsigned int v45;
  uint64_t v46;
  float32x2_t v69;
  float32x2_t v70;
  float v74;
  uint64_t result;
  float v76;
  float v77;
  float v78;
  uint64_t v81;
  uint64_t v88;
  float v92;
  float v93;
  float32x2_t v94;
  float v95;
  float32x2_t v96;
  _BYTE v97[3];
  float v98;
  float v99;
  float v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  float v121;
  uint64_t v122;

  v12 = a4;
  v122 = *MEMORY[0x1E0C80C00];
  v10.f32[0] = (float)a5;
  v95 = (float)a5;
  if (a5)
  {
    v16 = a5;
    v17 = 0;
    v18 = a5;
    v19 = a4;
    v20 = 0;
    do
    {
      v21 = *v19++;
      v22 = 8 * v21;
      v17 = vadd_f32(v17, *(float32x2_t *)(a3 + v22));
      v20 = vadd_f32(v20, *(float32x2_t *)(a2 + v22));
      --v18;
    }
    while (v18);
    v23 = (float32x2_t)vdup_lane_s32((int32x2_t)v10, 0);
    v24 = vdiv_f32(v17, v23);
    v25 = vdiv_f32(v20, v23);
    v26 = 0.0;
    v27 = a4;
    v28 = 0.0;
    do
    {
      v29 = *v27++;
      v30 = 8 * v29;
      v31 = vsub_f32(*(float32x2_t *)(a3 + v30), v24);
      v28 = v28 + hypotf(v31.f32[0], v31.f32[1]);
      v32 = vsub_f32(*(float32x2_t *)(a2 + v30), v25);
      v26 = v26 + hypotf(v32.f32[0], v32.f32[1]);
      --v16;
    }
    while (v16);
    v10.f32[0] = v95;
  }
  else
  {
    v28 = 0.0;
    *(float *)&a6 = 0.0 / v10.f32[0];
    v24 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
    v26 = 0.0;
    v25 = v24;
  }
  *(float *)&a9 = (float)(v10.f32[0] * 1.4142) / v28;
  v121 = 0.0;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  *(float *)&a10 = (float)(v10.f32[0] * 1.4142) / v26;
  v108 = 0u;
  v107 = 0u;
  v106 = 0u;
  v105 = 0u;
  v104 = 0u;
  v103 = 0u;
  v102 = 0u;
  v101 = 0u;
  v33 = vmul_n_f32(v25, -*(float *)&a10);
  v94 = vmul_n_f32(v24, -*(float *)&a9);
  v92 = *(float *)&a10;
  v93 = *(float *)&a9;
  if (a5)
  {
    v96 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
    v10 = 0;
    v35 = a5;
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    v39 = 0.0;
    v40 = 0.0;
    v41 = 0.0;
    v42 = 0.0;
    v43 = 0.0;
    v44 = 0;
    do
    {
      v45 = *v12++;
      v46 = 8 * v45;
      _D9 = vmla_f32(v94, *(float32x2_t *)(a3 + v46), v96);
      v40 = _D9.f32[0] + v40;
      _S10 = _D9.i32[1];
      v39 = _D9.f32[1] + v39;
      v43 = vmlas_n_f32(v43, _D9.f32[0], _D9.f32[0]);
      v38 = vmlas_n_f32(v38, _D9.f32[1], _D9.f32[0]);
      __asm { FMLA            S7, S10, V9.S[1] }
      _D11 = vmul_n_f32(_D9, _D9.f32[0]);
      _D12 = vmla_f32(v33, *(float32x2_t *)(a2 + v46), v34);
      v42 = v42 - _D12.f32[0];
      _S8 = _D12.i32[1];
      _S10 = vmuls_lane_f32(_D9.f32[1], _D9, 1);
      v41 = v41 - _D12.f32[1];
      __asm
      {
        FMLS            S6, S12, V9.S[0]
        FMLS            S2, S8, V9.S[0]
        FMLS            S3, S12, V9.S[1]
        FMLS            S0, S8, V9.S[1]
        FMLS            S25, S12, V11.S[0]
        FMLS            S16, S8, V11.S[0]
        FMLS            S22, S10, V12.S[0]
        FMLS            S23, S12, V11.S[1]
        FMLS            S4, S10, V12.S[1]
        FMLS            S1, S8, V11.S[1]
        FMLS            S20, S12, V11.S[1]
      }
      v37 = vmlas_n_f32(vmuls_lane_f32(_D12.f32[1], _D12, 1), _D12.f32[0], _D12.f32[0]) + v37;
      v69 = (float32x2_t)vrev64_s32((int32x2_t)_D12);
      v36 = vmlas_n_f32(vmuls_lane_f32(vmuls_lane_f32(_D9.f32[0], _D12, 1), _D12, 1), _D12.f32[0], vmul_f32(_D9, _D12).f32[0])+ v36;
      v70.i32[0] = vdup_lane_s32((int32x2_t)_D9, 1).u32[0];
      v70.f32[1] = _S10;
      v10 = vadd_f32(vmla_n_f32(vmul_lane_f32(vmul_lane_f32(_D11, _D12, 1), _D12, 1), vmul_n_f32(_D11, _D12.f32[0]), _D12.f32[0]), v10);
      v44 = vadd_f32(vmla_f32(vmul_f32(v69, vmul_f32(v70, v69)), _D12, vmul_f32(v70, _D12)), v44);
      --v35;
    }
    while (v35);
    *(_QWORD *)&v101 = __PAIR64__(LODWORD(v38), LODWORD(v43));
    *((_QWORD *)&v103 + 1) = __PAIR64__(LODWORD(v39), _S7);
    *((float *)&v107 + 2) = v42;
    *((float *)&v114 + 1) = v41;
    LODWORD(v112) = _S0;
    *((float *)&v101 + 2) = v40;
    *((_QWORD *)&v102 + 1) = __PAIR64__(_S23, _S25);
    HIDWORD(v111) = _S4;
    LODWORD(v103) = _S6;
    DWORD1(v109) = _S16;
    *((_QWORD *)&v109 + 1) = __PAIR64__(_S2, _S1);
    *(_QWORD *)&v105 = __PAIR64__(_S3, _S22);
    HIDWORD(v104) = _S20;
    v121 = v37;
    *((float *)&v116 + 2) = v36;
    *(float32x2_t *)&v116 = v10;
    *((int32x2_t *)&v118 + 1) = vrev64_s32((int32x2_t)v44);
    v10.f32[0] = v95;
  }
  else
  {
    v41 = 0.0;
    _S0 = 0;
    _S4 = 0;
    _S7 = 0;
    _S2 = 0;
    _S1 = 0;
    _S16 = 0;
    v43 = 0.0;
    v42 = 0.0;
    _S3 = 0;
    _S22 = 0;
    _S20 = 0;
    v39 = 0.0;
    _S6 = 0;
    _S23 = 0;
    _S25 = 0;
    v40 = 0.0;
    v38 = 0.0;
  }
  *((float *)&v103 + 1) = v38;
  *((_QWORD *)&v105 + 1) = __PAIR64__(LODWORD(v39), LODWORD(v40));
  *(_QWORD *)&v119 = __PAIR64__(_S3, _S6);
  *((_QWORD *)&v114 + 1) = __PAIR64__(_S20, _S25);
  HIDWORD(v116) = _S23;
  *(_QWORD *)&v117 = __PAIR64__(_S3, _S22);
  LODWORD(v106) = v10.i32[0];
  *((_QWORD *)&v119 + 1) = __PAIR64__(_S2, LODWORD(v42));
  *(_QWORD *)&v115 = __PAIR64__(_S16, _S6);
  *((_QWORD *)&v117 + 1) = __PAIR64__(_S4, _S1);
  *((_QWORD *)&v108 + 1) = __PAIR64__(LODWORD(v38), LODWORD(v43));
  *(_QWORD *)&v120 = __PAIR64__(LODWORD(v41), _S0);
  *((float *)&v110 + 3) = v38;
  *(float *)&v109 = v40;
  *(_QWORD *)&v111 = __PAIR64__(LODWORD(v39), _S7);
  *((_QWORD *)&v113 + 1) = __PAIR64__(_S2, v10.u32[0]);
  *((_QWORD *)&v115 + 1) = __PAIR64__(_S2, _S1);
  *(_QWORD *)&v118 = __PAIR64__(DWORD1(v116), _S0);
  *(_QWORD *)&v113 = __PAIR64__(LODWORD(v39), LODWORD(v40));
  DWORD2(v111) = _S1;
  *((_QWORD *)&v120 + 1) = __PAIR64__(HIDWORD(v118), DWORD2(v116));
  *(_QWORD *)&v107 = __PAIR64__(_S3, _S6);
  LODWORD(v114) = _S0;
  qmemcpy(v97, "LIV", sizeof(v97));
  ssyevx_NEWLAPACK();
  _S0 = v98;
  _S1 = v99;
  _S2 = v100;
  v74 = v100 + vmlas_n_f32(vmuls_lane_f32(v99, v94, 1), v98, v94.f32[0]);
  if (fabsf(v74) < 1.0e-10)
    return 4294967291;
  result = 0;
  v76 = v93 / (float)(v92 * v74);
  v77 = 1.0 / (float)(v92 * v74);
  v78 = v93 / v74;
  _D23 = v33;
  __asm { FMLS            S7, S0, V23.S[0] }
  *(float *)&v81 = v76 * _S7;
  __asm { FMLS            S18, S0, V23.S[1] }
  *((float *)&v81 + 1) = v76 * _S18;
  *(float *)(a1 + 8) = v98 * v78;
  *(_QWORD *)a1 = v81;
  *(_DWORD *)(a1 + 40) = 1065353216;
  __asm { FMLS            S16, S1, V23.S[0] }
  *(float *)&v81 = v76 * _S16;
  __asm { FMLS            S20, S1, V23.S[1] }
  *((float *)&v81 + 1) = v76 * _S20;
  *(float *)(a1 + 24) = _S1 * v78;
  *(_QWORD *)(a1 + 16) = v81;
  _S0 = -(float)(_S0 * v94.f32[0]);
  _S1 = -(float)(_S1 * v94.f32[1]);
  __asm { FMLS            S5, S2, V23.S[0] }
  *(float *)&v88 = v77 * _S5;
  __asm
  {
    FMLA            S5, S0, V23.S[1]
    FMLA            S5, S1, V23.S[1]
    FMLS            S5, S2, V23.S[1]
  }
  *((float *)&v88 + 1) = v77 * _S5;
  *(_QWORD *)(a1 + 32) = v88;
  return result;
}

double rwppGeomTrans_estimateRigidTransform(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned int a5)
{
  uint64_t v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float32x2_t v11;
  unsigned int v12;
  uint64_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  double result;
  float32x2_t v21;
  double v22;

  if (a5)
  {
    v6 = a5;
    v7 = 0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0;
    do
    {
      v12 = *a4++;
      v13 = 8 * v12;
      v14 = *(float32x2_t *)(a3 + v13);
      v15.i32[1] = v14.i32[1];
      v15.f32[0] = -v14.f32[1];
      v16 = *(float32x2_t *)(a2 + v13);
      v10 = v10 + v14.f32[1];
      v9 = v9 + v14.f32[0];
      v8 = v8 + vmlas_n_f32(vmuls_lane_f32(v14.f32[1], v14, 1), v14.f32[0], v14.f32[0]);
      v7 = vadd_f32(v7, vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v16, v15)), v16, v14.f32[0]));
      v11 = vadd_f32(v11, v16);
      --v6;
    }
    while (v6);
  }
  else
  {
    v7 = 0;
    v11 = 0;
  }
  v21 = v7;
  v22 = *(double *)&v11;
  sposv_NEWLAPACK();
  *(_DWORD *)(a1 + 40) = 1065353216;
  LODWORD(v17) = v21.i32[0];
  v18 = 0.0;
  if (v21.f32[0] < 0.95)
    *(float *)&v17 = 1.0;
  else
    v18 = v21.f32[1];
  *(float *)&v19 = -v18;
  HIDWORD(v19) = v17;
  *((float *)&v17 + 1) = v18;
  result = v22;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v17;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v19;
  *(double *)(a1 + 32) = v22;
  return result;
}

double rwppGeomTrans_estimateRigidTransform2(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  uint64_t v8;
  float32x2_t v11;
  float32x2_t v17;
  float32x2_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  double result;
  float32x2_t v23;
  double v24;

  v5 = 8 * *a4;
  v6 = *(float32x2_t *)(a3 + v5);
  v7 = *(float32x2_t *)(a2 + v5);
  v8 = 8 * a4[1];
  _D3 = *(float32x2_t *)(a3 + v8);
  _S4 = _D3.i32[1];
  v11 = *(float32x2_t *)(a2 + v8);
  __asm { FMLA            S7, S4, V3.S[1] }
  v17.i32[1] = v6.i32[1];
  v17.f32[0] = -v6.f32[1];
  v18 = vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v7, v17)), v7, v6.f32[0]);
  v6.i32[0] = vdup_lane_s32((int32x2_t)_D3, 1).u32[0];
  v6.i32[1] = vneg_f32(_D3).i32[1];
  v23 = vmla_f32(vmla_n_f32(v18, v11, _D3.f32[0]), (float32x2_t)vrev64_s32((int32x2_t)v11), v6);
  v24 = COERCE_DOUBLE(vadd_f32(v7, v11));
  sposv_NEWLAPACK();
  *(_DWORD *)(a1 + 40) = 1065353216;
  LODWORD(v19) = v23.i32[0];
  v20 = 0.0;
  if (v23.f32[0] < 0.95)
    *(float *)&v19 = 1.0;
  else
    v20 = v23.f32[1];
  *(float *)&v21 = -v20;
  HIDWORD(v21) = v19;
  *((float *)&v19 + 1) = v20;
  result = v24;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v19;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v21;
  *(double *)(a1 + 32) = v24;
  return result;
}

uint64_t bfpn_spatial_median(uint64_t *a1, size_t count, float *a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v10;
  uint64_t v12;
  _DWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t i;
  signed int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  int v25;
  uint64_t v26;

  if (a1 && (v5 = *a1) != 0)
  {
    v6 = a1[2];
    v7 = a1[3];
    if (v7 < 4 * v6)
    {
      FigDebugAssert3();
      v13 = 0;
      v26 = 4294967277;
    }
    else if (a4 < a5 && (v10 = count, (int)count > 0) && a3)
    {
      v12 = a1[1];
      v13 = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
      if (v13)
      {
        v14 = a5 - a4;
        v15 = (float)(int)(v10 - 1);
        if (v12)
        {
          v16 = v12;
          do
          {
            if (v6)
            {
              for (i = 0; i != v6; ++i)
              {
                v18 = llroundf((float)(v15 / v14) * fminf(fmaxf(*(float *)(v5 + 4 * i) - a4, 0.0), v14));
                ++v13[v18];
              }
            }
            v5 += 4 * (v7 >> 2);
            --v16;
          }
          while (v16);
        }
        v19 = 0;
        v20 = 0;
        v21 = (v12 * v6) >> 1;
        if (v10 <= 1)
          v22 = 1;
        else
          v22 = v10;
        while (1)
        {
          v23 = v13[v19] + v20;
          if (v23 >= v21)
            break;
          ++v19;
          v20 = v23;
          if (v22 == v19)
          {
            v24 = 0.0;
            goto LABEL_24;
          }
        }
        if (v21 - v20 > v23 - v21)
          v25 = 0;
        else
          v25 = -1;
        v24 = a4 + (float)(v14 * (float)((float)(v25 + v19) / v15));
LABEL_24:
        v26 = 0;
        *a3 = v24;
      }
      else
      {
        FigDebugAssert3();
        v13 = 0;
        v26 = 4294967267;
      }
    }
    else
    {
      FigDebugAssert3();
      v13 = 0;
      v26 = 4294967266;
    }
  }
  else
  {
    FigDebugAssert3();
    v13 = 0;
    v26 = 4294967281;
  }
  free(v13);
  return v26;
}

void sub_1D32659DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t rwppRegEngine_getDefaults(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_1D3305340;
  *(_QWORD *)(a1 + 16) = 0x50000000BLL;
  *(_DWORD *)(a1 + 24) = 10;
  *(_QWORD *)(a1 + 28) = 0x3E99999A3F800000;
  *(_QWORD *)(a1 + 36) = 0x400000006;
  *(_WORD *)(a1 + 44) = 256;
  return rwppRegEngine_checkDefaults(a1);
}

_OWORD *rwppRegEngine_init(__int128 *a1)
{
  char *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;

  v2 = (char *)malloc_type_calloc(1uLL, 0x22D70uLL, 0x10B004054B16495uLL);
  v3 = v2;
  if (v2)
  {
    if (!a1)
    {
      *(_OWORD *)v2 = xmmword_1D3305340;
      *((_QWORD *)v2 + 2) = 0x50000000BLL;
      *((_DWORD *)v2 + 6) = 10;
      *(_QWORD *)(v2 + 28) = 0x3E99999A3F800000;
      *(_QWORD *)(v2 + 36) = 0x400000006;
      *((_WORD *)v2 + 22) = 256;
      rwppRegEngine_checkDefaults((uint64_t)v2);
      goto LABEL_6;
    }
    if (!rwppRegEngine_checkDefaults((uint64_t)a1))
    {
      v4 = *a1;
      v5 = a1[2];
      v3[1] = a1[1];
      v3[2] = v5;
      *v3 = v4;
LABEL_6:
      *((_BYTE *)v3 + 4420) = 0;
      *((_BYTE *)v3 + 4416) = 0;
      *((_BYTE *)v3 + 4400) = *((_BYTE *)v3 + 45);
      *((_QWORD *)v3 + 7) = v3;
      *((_QWORD *)v3 + 143) = v3;
      *((_QWORD *)v3 + 279) = v3;
      *((_QWORD *)v3 + 415) = v3;
      return v3;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  rwppRegEngine_destroy(v3);
  return 0;
}

void rwppRegEngine_destroy(void *a1)
{
  if (a1)
  {
    rwppRegEngine_freeResources((uint64_t)a1, 1);
    free(a1);
  }
}

void rwppRegEngine_freeResources(uint64_t a1, char a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  void *v7;
  void *v8;
  int v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if (!a1)
    return;
  v4 = a1 + 136512;
  v5 = (_BYTE *)(a1 + 4420);
  if (!*(_BYTE *)(a1 + 4420))
  {
    free(*(void **)v4);
    free(*(void **)(v4 + 16));
    v6 = *v5;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    if (v6)
      goto LABEL_6;
    free(*(void **)(a1 + 4512));
    free(*(void **)(a1 + 4520));
    v9 = *v5;
    *(_OWORD *)(a1 + 4512) = 0u;
    v10 = (_QWORD *)(a1 + 4584);
    if (v9)
    {
      *v10 = 0;
      *(_QWORD *)(a1 + 4592) = 0;
    }
    else
    {
      free(*(void **)(a1 + 4584));
      free(*(void **)(a1 + 4592));
      v11 = *v5;
      *v10 = 0;
      *(_QWORD *)(a1 + 4592) = 0;
      if (!v11)
      {
        free(*(void **)(a1 + 4656));
        free(*(void **)(a1 + 4664));
        v12 = *v5;
        *(_QWORD *)(a1 + 4664) = 0;
        *(_QWORD *)(a1 + 4656) = 0;
        if (!v12)
        {
          free(*(void **)(a1 + 4728));
          free(*(void **)(a1 + 4736));
          v13 = *v5;
          *(_QWORD *)(a1 + 4736) = 0;
          *(_QWORD *)(a1 + 4728) = 0;
          if (!v13)
          {
            free(*(void **)(a1 + 4800));
            free(*(void **)(a1 + 4808));
            v14 = *v5;
            *(_QWORD *)(a1 + 4808) = 0;
            *(_QWORD *)(a1 + 4800) = 0;
            if (!v14)
            {
              free(*(void **)(a1 + 4872));
              free(*(void **)(a1 + 4880));
              v15 = *v5;
              *(_QWORD *)(a1 + 4880) = 0;
              *(_QWORD *)(a1 + 4872) = 0;
              if (!v15)
              {
                free(*(void **)(a1 + 4944));
                free(*(void **)(a1 + 4952));
                v16 = *v5;
                *(_QWORD *)(a1 + 4952) = 0;
                *(_QWORD *)(a1 + 4944) = 0;
                if (!v16)
                {
                  free(*(void **)(a1 + 5016));
                  free(*(void **)(a1 + 5024));
                }
                goto LABEL_7;
              }
              goto LABEL_17;
            }
LABEL_16:
            *(_QWORD *)(a1 + 4880) = 0;
            *(_QWORD *)(a1 + 4872) = 0;
LABEL_17:
            *(_QWORD *)(a1 + 4952) = 0;
            *(_QWORD *)(a1 + 4944) = 0;
            goto LABEL_7;
          }
LABEL_15:
          *(_QWORD *)(a1 + 4808) = 0;
          *(_QWORD *)(a1 + 4800) = 0;
          goto LABEL_16;
        }
LABEL_14:
        *(_QWORD *)(a1 + 4736) = 0;
        *(_QWORD *)(a1 + 4728) = 0;
        goto LABEL_15;
      }
    }
    *(_QWORD *)(a1 + 4664) = 0;
    *(_QWORD *)(a1 + 4656) = 0;
    goto LABEL_14;
  }
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(a1 + 136528) = 0;
LABEL_6:
  *(_OWORD *)(a1 + 4512) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_OWORD *)(a1 + 4800) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 4944) = 0u;
LABEL_7:
  *(_QWORD *)(a1 + 5024) = 0;
  *(_QWORD *)(a1 + 5016) = 0;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(a1 + 4404) = 0;
    *(_QWORD *)(a1 + 4536) = 0;
  }
  *v5 = 0;
  v7 = *(void **)(v4 + 6176);
  *(_QWORD *)(v4 + 6176) = 0;

  v8 = *(void **)(v4 + 6184);
  *(_QWORD *)(v4 + 6184) = 0;

}

uint64_t rwppRegEngine_reallocResources(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  float v27;
  float v28;
  size_t v29;
  void *v30;
  void *v31;
  unsigned int *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unsigned int v37;
  unsigned int v38;
  size_t v39;
  size_t size;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  _OWORD v44[2];
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;

  v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v7 = *(_DWORD *)(a1 + 4404);
  v8 = *(_DWORD *)(a1 + 4408);
  v9 = *(_DWORD *)(a1 + 16);
  memset(v44, 0, sizeof(v44));
  memset(v43, 0, sizeof(v43));
  v41 = 0u;
  v42 = 0u;
  v10 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = (unsigned int *)v44;
    v13 = v8;
    v14 = v7;
    do
    {
      v15 = (v14 + 3) & 0xFFFFFFFC;
      *(v12 - 16) = v15 * v13;
      *(v12 - 8) = v15;
      v11 += 2 * v15 * v13;
      *v12++ = v13;
      v14 >>= 1;
      v13 >>= 1;
      --v10;
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  v45 = ((v7 + 3) & 0xFFFFFFFC) * v8;
  v46 = (v7 + 3) & 0xFFFFFFFC;
  v38 = v46;
  v47 = ((2 * v7 + 3) & 0xFFFFFFFC) * v8;
  v48 = (2 * v7 + 3) & 0xFFFFFFFC;
  v39 = v47;
  v16 = v47 + v45 + v11;
  v49 = v16;
  if (a2 && v16 > a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v37 = (2 * v7 + 3) & 0xFFFFFFFC;
    rwppRegEngine_freeResources(a1, 0);
    v17 = 0;
    *(_BYTE *)(a1 + 4420) = a2 != 0;
    v18 = 2 * v9 + 4 * *(_DWORD *)(a1 + 4);
    if (v7 >= v18)
    {
      v19 = 2 * v9 + 4 * *(_DWORD *)(a1 + 8);
      if (v8 >= v19)
      {
        v17 = 0;
        v20 = v8;
        v21 = v7;
        while (*(_DWORD *)(a1 + 40) != v17)
        {
          ++v17;
          v21 >>= 1;
          if (v21 >= v18)
          {
            v20 >>= 1;
            if (v20 >= v19)
              continue;
          }
          goto LABEL_18;
        }
        v17 = *(_DWORD *)(a1 + 40);
      }
    }
LABEL_18:
    size = ((v7 + 3) & 0xFFFFFFFC) * v8;
    *(_DWORD *)(a1 + 4424) = v17;
    *(_OWORD *)(a1 + 4432) = 0u;
    *(_OWORD *)(a1 + 4448) = 0u;
    *(_DWORD *)(a1 + 4464) = 0;
    bzero((void *)(a1 + 4512), 0x240uLL);
    if (v17)
    {
      v22 = 0;
      v23 = 72 * v17;
      v24 = (int *)v43;
      do
      {
        v25 = a1 + v22;
        v26 = *v24;
        *(_QWORD *)(v25 + 4528) = 0;
        *(_DWORD *)(v25 + 4536) = v7;
        *(_DWORD *)(v25 + 4540) = v8;
        *(_DWORD *)(v25 + 4544) = v26;
        v27 = fmaxf((float)v7, (float)v8);
        *(float *)(v25 + 4556) = 2.0 / v27;
        *(float *)(v25 + 4548) = 2.0 / v27;
        *(float *)(v25 + 4552) = (float)-(float)v7 / v27;
        *(float *)(v25 + 4560) = (float)-(float)v8 / v27;
        v28 = v27 * 0.5;
        *(float *)(v25 + 4572) = v28;
        *(float *)(v25 + 4564) = v28;
        *(float *)(v25 + 4568) = (float)((float)v7 * 0.5) + 0.5;
        *(float *)(v25 + 4576) = (float)((float)v8 * 0.5) + 0.5;
        v29 = *(v24 - 8);
        if (a2)
        {
          if (a3 < v29)
            goto LABEL_38;
          *(_QWORD *)(v25 + 4512) = a2;
          if (v29 > a3 - v29)
            goto LABEL_38;
          v30 = (void *)(a2 + v29);
          a2 += v29 + v29;
          a3 = a3 - v29 - v29;
        }
        else
        {
          v31 = malloc_type_calloc(1uLL, *(v24 - 8), 0x7E36265DuLL);
          if (!v31 || (*(_QWORD *)(v25 + 4512) = v31, (v30 = malloc_type_calloc(1uLL, v29, 0xE84C231AuLL)) == 0))
          {
LABEL_38:
            fig_log_get_emitter();
            FigDebugAssert3();
            v35 = 4294967294;
            v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
            goto LABEL_39;
          }
          a2 = 0;
        }
        ++v24;
        *(_QWORD *)(a1 + v22 + 4520) = v30;
        v7 >>= 1;
        v8 >>= 1;
        v22 += 72;
      }
      while (v23 != v22);
    }
    v32 = (unsigned int *)(a1 + 136504);
    if (a2)
    {
      if (a3 >= size)
      {
        *v32 = v38;
        *(_QWORD *)(a1 + 136512) = a2;
        if (v39 <= a3 - size)
        {
          v33 = (void *)(a2 + size);
LABEL_34:
          v35 = 0;
          *(_DWORD *)(a1 + 136520) = v37;
          *(_QWORD *)(a1 + 136528) = v33;
          v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          goto LABEL_35;
        }
      }
    }
    else
    {
      v34 = malloc_type_calloc(1uLL, size, 0x661234A2uLL);
      if (v34)
      {
        *v32 = v38;
        *(_QWORD *)(a1 + 136512) = v34;
        v33 = malloc_type_calloc(1uLL, v39, 0x9AC16A07uLL);
        if (v33)
          goto LABEL_34;
      }
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  }
  v35 = FigSignalErrorAt();
  if ((_DWORD)v35)
LABEL_39:
    rwppRegEngine_freeResources(a1, 1);
LABEL_35:
  if (*v6 == 1)
    kdebug_trace();
  return v35;
}

uint64_t rwppRegEngine_updateConfiguration(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  float *v11;
  float v12;
  float v13;

  v3 = 2 * a1[4];
  v4 = v3 + 4 * a1[1];
  v5 = v3 + 4 * a1[2];
  if (v4 > a2 || v5 > a3)
  {
    a1[1106] = 0;
    return 0;
  }
  else
  {
    LODWORD(v8) = 0;
    v9 = a2;
    v10 = a3;
    while (a1[10] != (_DWORD)v8)
    {
      LODWORD(v8) = v8 + 1;
      v9 >>= 1;
      if (v9 >= v4)
      {
        v10 >>= 1;
        if (v10 >= v5)
          continue;
      }
      goto LABEL_12;
    }
    LODWORD(v8) = a1[10];
LABEL_12:
    a1[1106] = v8;
    if ((_DWORD)v8)
    {
      v8 = v8;
      v11 = (float *)(a1 + 1144);
      do
      {
        *((_QWORD *)v11 - 6) = 0;
        *((_DWORD *)v11 - 10) = a2;
        *((_DWORD *)v11 - 9) = a3;
        *((_DWORD *)v11 - 8) = (a2 + 3) & 0xFFFFFFFC;
        v12 = fmaxf((float)a2, (float)a3);
        *(v11 - 7) = 2.0 / v12;
        *(v11 - 6) = (float)-(float)a2 / v12;
        *(v11 - 5) = 2.0 / v12;
        *(v11 - 4) = (float)-(float)a3 / v12;
        v13 = v12 * 0.5;
        *(v11 - 3) = v13;
        *(v11 - 2) = (float)((float)a2 * 0.5) + 0.5;
        *(v11 - 1) = v13;
        *v11 = (float)((float)a3 * 0.5) + 0.5;
        v11 += 18;
        a2 >>= 1;
        a3 >>= 1;
        --v8;
      }
      while (v8);
    }
    return 0;
  }
}

uint64_t rwppRegEngine_execute(_DWORD *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  __int128 v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  unsigned int v16;
  uint32x2_t v17;
  float v18;
  float32x2_t v19;
  float v20;
  _DWORD *v21;
  float *v22;
  __int32 *v23;
  __int32 *v24;
  float v25;
  __int32 *v26;
  __int32 *v27;
  __int32 *v28;
  float32x2_t *v29;
  float32x2_t v30;
  int v31;
  float32x2_t v32;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint32x2_t *v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  _DWORD *v65;
  dispatch_time_t v66;
  simd_float3 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v72;
  _QWORD *context;
  unsigned int *v74;
  id v75;
  id v76;
  uint32x2_t *v77;
  uint64_t v79;
  unsigned int v80;
  float32x2_t *v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  unsigned int v86;
  _BYTE *v87;
  float *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  __int128 v92;
  simd_float3 v93;
  unsigned int *v94;
  float32x2_t v95;
  float32x4_t v96;
  simd_float3 v97;
  __int128 v98;

  v76 = a4;
  v75 = a5;
  v10 = a1[1106];
  if (!(_DWORD)v10)
    goto LABEL_48;
  v72 = 0;
  v94 = a1 + 33036;
  v84 = a1 + 25864;
  v85 = a1 + 21768;
  v82 = a1 + 23816;
  v83 = a1 + 27912;
  context = a1 + 12;
  v11 = (uint64_t)&a1[2562 * (v10 - 1) + 1274];
  __asm { FMOV            V0.4S, #1.0 }
  v74 = a1;
  v87 = a1 + 1104;
  do
  {
    v15 = a1[2562 * --v10 + 1272];
    if (v15 >= rwppCnstRegistrationMinNumInliers[v10])
    {
      v80 = rwppCnstRegistrationMinNumInliers[v10];
      v81 = (float32x2_t *)v11;
      v79 = v10;
      v16 = a1[6];
      v77 = (uint32x2_t *)&a1[18 * v10];
      v17 = v77[567];
      _Q0 = __invert_f3(*(simd_float3x3 *)a3);
      v90 = (float32x4_t)_Q0.columns[1];
      v91 = (float32x4_t)_Q0.columns[0];
      v89 = (float32x4_t)_Q0.columns[2];
      if ((_DWORD)v15)
      {
        v86 = 0;
        v18 = (float)v16;
        v19 = vcvt_f32_u32(v17);
        v20 = v19.f32[0] - v18;
        v95 = v19;
        v21 = &a1[18 * v10];
        v88 = (float *)(v21 + 1137);
        v22 = (float *)(v21 + 1138);
        v23 = v21 + 1139;
        v24 = v21 + 1141;
        v25 = v19.f32[1] - v18;
        v26 = v21 + 1142;
        v27 = v21 + 1143;
        v28 = v21 + 1144;
        v29 = v81;
        do
        {
          v30 = *v29;
          v31 = *v87;
          if (*v87)
          {
            *(float32x2_t *)_Q0.columns[0].f32 = vmul_f32(-[CMIDistortionModel undistortImageCoord:](*((float32x2_t **)v94 + 1318), vdiv_f32(v30, v95)), v95);
            v31 = *v87;
          }
          else
          {
            *(float32x2_t *)_Q0.columns[0].f32 = *v29;
          }
          *(float *)&v8 = vmlas_n_f32(*v22, *v88, _Q0.columns[0].f32[0]);
          _Q0.columns[1].i32[0] = *v23;
          __asm { FMLA            S2, S1, V0.S[1] }
          _Q0.columns[0] = (simd_float3)vaddq_f32(v89, vmlaq_n_f32(vmulq_n_f32(v91, *(float *)&v8), v90, _Q0.columns[2].f32[0]));
          v32 = vdiv_f32(*(float32x2_t *)_Q0.columns[0].f32, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q0.columns[0], 2));
          _Q0.columns[1].i32[0] = *v24;
          _Q0.columns[0].i32[0] = *v26;
          _Q0.columns[1].i32[1] = *v27;
          _Q0.columns[0].i32[1] = *v28;
          *(float32x2_t *)_Q0.columns[0].f32 = vmla_f32(*(float32x2_t *)_Q0.columns[0].f32, v32, *(float32x2_t *)_Q0.columns[1].f32);
          if (v31)
          {
            v93 = _Q0.columns[2];
            v92 = v8;
            *(float32x2_t *)_Q0.columns[0].f32 = -[CMIDistortionModel distortImageCoord:](*((float32x2_t **)v94 + 1319), vdiv_f32(*(float32x2_t *)_Q0.columns[0].f32, v95));
            v8 = v92;
            _Q0.columns[2] = v93;
            _Q0.columns[1].i32[1] = v95.i32[1];
            *(float32x2_t *)_Q0.columns[0].f32 = vmul_f32(*(float32x2_t *)_Q0.columns[0].f32, v95);
          }
          _NF = _Q0.columns[0].f32[0] >= v18 && _Q0.columns[0].f32[0] < v20;
          _Q0.columns[1].i32[0] = _Q0.columns[0].i32[1];
          if (_NF && _Q0.columns[0].f32[1] >= v18 && _Q0.columns[0].f32[1] < v25)
          {
            _Q0.columns[1].i64[0] = __PAIR64__(_Q0.columns[2].u32[0], v8);
            v36 = 2 * v86;
            *(float32x2_t *)&v85[v36] = v30;
            *(_QWORD *)&v84[v36] = __PAIR64__(_Q0.columns[2].u32[0], v8);
            *(float32x2_t *)&v83[v36] = v32;
            *(_QWORD *)&v82[v36] = _Q0.columns[0].i64[0];
            ++v86;
          }
          ++v29;
          --v15;
        }
        while (v15);
      }
      else
      {
        v86 = 0;
      }
      v37 = v80;
      v38 = v86;
      a1 = v74;
      v10 = v79;
      v11 = (uint64_t)v81;
      if (v86 >= v80)
      {
        v39 = *v74;
        if (!(_DWORD)v39)
        {
          v42 = v76;
          v43 = v75;
LABEL_42:
          *context = 0x100000000;
          rwppFeatMatch_execute((uint64_t)context, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56);
LABEL_43:

          v67 = *(simd_float3 *)(a3 + 16);
          v96 = *(float32x4_t *)a3;
          v97 = v67;
          v98 = *(_OWORD *)(a3 + 32);
          v72 = rwppRansac_execute((uint64_t)v74, v79, v38, &v96);
          if (v72 > v37)
          {
            _Q0.columns[1] = v97;
            *(float32x4_t *)a3 = v96;
            *(simd_float3 *)(a3 + 16) = _Q0.columns[1];
            _Q0.columns[0].i64[0] = v98;
            *(_OWORD *)(a3 + 32) = v98;
          }
          v11 = (uint64_t)v81;
          goto LABEL_4;
        }
        v40 = v77 + 564;
        if ((_DWORD)v39 == 1)
        {
          v41 = 0;
        }
        else
        {
          v41 = v39 & 0xFFFFFFFE;
          v57 = v41;
          v58 = v74;
          do
          {
            *((_QWORD *)v58 + 8) = v40;
            *((_QWORD *)v58 + 144) = v40;
            v58[282] = v86;
            v58[554] = v86;
            v58 += 544;
            v57 -= 2;
          }
          while (v57);
          if (v41 == v39)
          {
LABEL_37:
            v61 = v76;
            v62 = v75;
            if (v76)
            {
              if (v39 >= 2)
              {
                v63 = v62;
                v64 = 0;
                v65 = context;
                do
                {
                  *v65 = v64;
                  v65[1] = v39;
                  dispatch_group_async_f(v63, v61, v65, (dispatch_function_t)rwppFeatMatch_execute);
                  ++v64;
                  v65 += 272;
                }
                while (v39 != v64);
                v66 = dispatch_time(0, 500000000);
                v37 = v80;
                v38 = v86;
                if (!dispatch_group_wait(v63, v66))
                  goto LABEL_43;
              }
            }
            goto LABEL_42;
          }
        }
        v59 = &v74[272 * v41];
        v60 = v39 - v41;
        do
        {
          *((_QWORD *)v59 + 8) = v40;
          v59[282] = v86;
          v59 += 272;
          --v60;
        }
        while (v60);
        goto LABEL_37;
      }
    }
LABEL_4:
    v11 -= 10248;
  }
  while ((_DWORD)v10);
  if (v72 < 6)
  {
LABEL_48:
    fig_log_get_emitter();
    FigDebugAssert3();
    v69 = 4294967292;
    goto LABEL_49;
  }
  rwppGeomTrans_estimate((uint64_t)a1, a2, (unsigned __int16 *)&a1[512 * (unint64_t)*v94 + 33037], v72, 1, *(double *)_Q0.columns[0].i64, *(double *)_Q0.columns[1].i64, *(double *)_Q0.columns[2].i64, *(double *)&v8, v9);
  v69 = v68;
  if ((_DWORD)v68)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    a1[1107] = v72;
  }
LABEL_49:

  return v69;
}

uint64_t rwppRunThreads(uint64_t a1, void (__cdecl *a2)(void *), unsigned int a3, void *a4, void *a5)
{
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  dispatch_time_t v14;

  v9 = a4;
  v10 = a5;
  if (a3 < 2)
    goto LABEL_6;
  if (!v9)
    goto LABEL_6;
  v11 = 0;
  v12 = a3;
  v13 = (_DWORD *)(a1 + 48);
  do
  {
    *v13 = v11;
    v13[1] = v12;
    dispatch_group_async_f(v10, v9, v13, a2);
    ++v11;
    v13 += 272;
  }
  while (v12 != v11);
  v14 = dispatch_time(0, 500000000);
  if (dispatch_group_wait(v10, v14))
  {
LABEL_6:
    *(_QWORD *)(a1 + 48) = 0x100000000;
    ((void (*)(uint64_t))a2)(a1 + 48);
  }

  return 0;
}

uint64_t bfpn_bias_fitting_update_stats(uint64_t *a1, unint64_t a2, unint64_t a3, char a4, __int128 *a5)
{
  uint64_t v5;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t result;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  if (a1)
  {
    v5 = *a1;
    if (*a1)
    {
      if (a5 && (v8 = a2, a3 > a2))
      {
        if ((a4 & 1) == 0)
        {
          v9 = a5[3];
          v46 = a5[2];
          v47 = v9;
          v10 = a5[5];
          v48 = a5[4];
          v49 = v10;
          v11 = a5[1];
          v44 = *a5;
          v45 = v11;
        }
        v12 = a1[2];
        v13 = (unint64_t)a1[3] >> 1;
        v14 = 4 * (int)v12;
        v15 = v5 + 2 * v13 * a2;
        MEMORY[0x1E0C80A78]();
        v16 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v16, v14);
        bzero(v16, v14);
        v17 = 2 * v13;
        v18 = v15;
        v19 = v8;
        do
        {
          if ((int)v12 >= 1)
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned __int16 *)(v18 + 2 * v20);
              v22 = v21 >> 4;
              if (v21 >= 0x200)
                v22 = 32;
              *(_DWORD *)&v16[4 * v20++] += v22;
            }
            while (v12 != v20);
          }
          ++v19;
          v18 += v17;
        }
        while (v19 != a3);
        if ((int)v12 >= 1)
        {
          v23 = a3 - v8;
          if ((int)a3 >= (int)v8)
            v24 = a3 - v8;
          else
            v24 = v23 + 1;
          v25 = v24 >> 1;
          v26 = v12;
          v27 = (int *)((char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
          do
          {
            *v27 = (*v27 + v25) / v23;
            ++v27;
            --v26;
          }
          while (v26);
        }
        v29 = *((_QWORD *)&v46 + 1);
        v28 = v46;
        v30 = v49;
        do
        {
          v31 = (uint64_t *)&v44 + (v8 & 3);
          v32 = *v31;
          v35 = v31[6];
          v33 = v31 + 6;
          v34 = v35;
          if ((int)v12 >= 1)
          {
            v36 = 0;
            v37 = 1 - v12;
            do
            {
              v38 = (unint64_t)*(unsigned __int16 *)(v15 + 2 * v36) >> 4;
              v39 = v38 - *(_DWORD *)&v16[4 * v36];
              if (v39 < 0)
                v39 = *(_DWORD *)&v16[4 * v36] - v38;
              if (v39 <= 8)
              {
                ++v32;
                v28 += v37;
                v29 += (v37 * v37);
                v34 += v38;
                v30 += v37 * (int)v38;
              }
              ++v36;
              v37 += 2;
            }
            while (v12 != v36);
          }
          *((_QWORD *)&v44 + (v8 & 3)) = v32;
          *v33 = v34;
          ++v8;
          v15 += v17;
        }
        while (v8 != a3);
        result = 0;
        *(_QWORD *)&v46 = v28;
        *((_QWORD *)&v46 + 1) = v29;
        *(_QWORD *)&v49 = v30;
        DWORD2(v49) = v12;
        v41 = v45;
        *a5 = v44;
        a5[1] = v41;
        v42 = v47;
        a5[2] = v46;
        a5[3] = v42;
        v43 = v49;
        a5[4] = v48;
        a5[5] = v43;
      }
      else
      {
        FigDebugAssert3();
        return 4294967266;
      }
    }
    else
    {
      FigDebugAssert3();
      return 4294967274;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967281;
  }
  return result;
}

uint64_t bfpn_bias_fitting_calculate(uint64_t a1, int64x2_t *a2, _WORD *a3, float32x4_t *a4)
{
  int64x2_t v8;
  int64x2_t *v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  int64x2_t *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;

  srand(0x17326u);
  if (a1 && a2 && a3 && a4)
  {
    v8 = 0uLL;
    v9 = a2;
    v10 = a1;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    do
    {
      v11 = vaddq_s64(v9[4], v11);
      v8 = vaddq_s64(v9[3], v8);
      v14 = *v9;
      v15 = v9[1];
      v9 += 6;
      v13 = vaddq_s64(v15, v13);
      v12 = vaddq_s64(v14, v12);
      --v10;
    }
    while (v10);
    v16 = vdivq_f64(vcvtq_f64_s64(v11), vcvtq_f64_s64(v13));
    v17 = vdivq_f64(vcvtq_f64_s64(v8), vcvtq_f64_s64(v12));
    v18 = (v16.f64[1] + v16.f64[0] + vaddvq_f64(v17)) * 0.25;
    *a4 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v17), v16), (float32x4_t)vdupq_n_s32(0x42801F88u));
    v19 = a2 + 3;
    do
    {
      v20 = (double)vaddvq_s64(vaddq_s64(v19[-3], v19[-2]));
      v21 = (double)v19[-1].i64[0];
      v22 = (double)v19[-1].i64[1];
      v23 = (double)vaddvq_s64(vaddq_s64(*v19, v19[1]));
      v24 = (double)v19[2].i64[0];
      v25 = v22 * v20 - v21 * v21;
      v26 = v23 * v22 - v24 * v21;
      if (v25 == 0.0)
      {
        v31 = v23 * v22 - v24 * v21;
      }
      else
      {
        v27 = (double)(v19[2].i32[2] - 1);
        v28 = v24 * v20 - v23 * v21;
        v29 = v26 - v28 * v27;
        v30 = v26 + v28 * v27;
        v26 = v29 / v25;
        v31 = v30 / v25;
      }
      v32 = (double)rand() / 2147483650.0;
      v33 = rand();
      *a3 = llround((v26 - v18) * 64.0615836 + 1024.0 + v32);
      a3[1] = llround((v31 - v18) * 64.0615836 + 1024.0 + (double)v33 / 2147483650.0);
      a3 += 2;
      v19 += 6;
      --a1;
    }
    while (a1);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294967266;
  }
}

uint64_t bfpn_calc_window_shading_score(uint64_t a1, float *a2, float *a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  size_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  char v25;
  float v26;
  unint64_t v27;
  float v28;
  float *v29;
  unint64_t v30;
  float *v31;
  size_t v32;
  float v33;
  _QWORD *v34;
  unint64_t v35;
  float v36;
  float *v37;
  unint64_t v38;
  float v39;
  uint64_t v40;
  float *v42;
  float *v43;

  if (a1 && (v3 = *(_QWORD **)a1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    if (v5 < 4 * v4)
    {
      FigDebugAssert3();
      v12 = 0;
      v40 = 4294967277;
    }
    else if (a2 && a3)
    {
      if (v4 < 7 || (v8 = *(_QWORD *)(a1 + 8), v8 <= 5))
      {
        FigDebugAssert3();
        v12 = 0;
        v40 = 4294967250;
      }
      else
      {
        v9 = 4 * v4;
        if (4 * v8 <= 4 * v4)
          v10 = 4 * v4;
        else
          v10 = 4 * v8;
        v11 = malloc_type_calloc(v10, 4uLL, 0x100004052888210uLL);
        v12 = v11;
        if (v11)
        {
          v42 = a3;
          v13 = 0;
          v14 = v5 >> 2;
          v15 = 4 * (v5 >> 2);
          v16 = 0.0;
          v17 = 1;
          do
          {
            v18 = v17;
            v19 = (uint64_t)v3 + 4 * (v4 >> 1) + v15 * ((v8 >> 1) - 1 + v13);
            for (i = -4; i != 8; i += 4)
              v16 = v16 + *(float *)(v19 + i);
            v17 = 0;
            v13 = 1;
          }
          while ((v18 & 1) != 0);
          v43 = a2;
          v21 = 0;
          v22 = 8 * v4;
          v23 = 1;
          v24 = (char *)v11;
          do
          {
            v25 = v23;
            memcpy(v24, (char *)v3 + 4 * v21 * v14, v9);
            memcpy(&v24[v9], (char *)v3 + 4 * (v8 + ~v21) * v14, v9);
            v23 = 0;
            v24 += v22;
            v21 = 1;
          }
          while ((v25 & 1) != 0);
          v26 = v16 / 6.0;
          qsort(v12, v9, 4uLL, (int (__cdecl *)(const void *, const void *))floatCompare);
          v27 = vcvtas_u32_f32((float)v9 * 0.9);
          if (v27)
          {
            v28 = 0.0;
            v29 = (float *)v12;
            v30 = v27;
            v31 = v42;
            v32 = 4 * v8;
            do
            {
              v33 = *v29++;
              v28 = v28 + v33;
              --v30;
            }
            while (v30);
          }
          else
          {
            v28 = 0.0;
            v31 = v42;
            v32 = 4 * v8;
          }
          *v31 = (float)(v28 / (float)v27) - v26;
          v34 = v12 + 1;
          do
          {
            *(v34 - 1) = *v3;
            *v34 = *(_QWORD *)((char *)v3 + v9 - 8);
            v34 += 2;
            v3 = (_QWORD *)((char *)v3 + v15);
            --v8;
          }
          while (v8);
          qsort(v12, v32, 4uLL, (int (__cdecl *)(const void *, const void *))floatCompare);
          v35 = vcvtas_u32_f32((float)v32 * 0.9);
          if (v35)
          {
            v36 = 0.0;
            v37 = (float *)v12;
            v38 = v35;
            do
            {
              v39 = *v37++;
              v36 = v36 + v39;
              --v38;
            }
            while (v38);
          }
          else
          {
            v36 = 0.0;
          }
          v40 = 0;
          *v43 = (float)(v36 / (float)v35) - v26;
        }
        else
        {
          FigDebugAssert3();
          v40 = 4294967251;
        }
      }
    }
    else
    {
      FigDebugAssert3();
      v12 = 0;
      v40 = 4294967266;
    }
  }
  else
  {
    FigDebugAssert3();
    v12 = 0;
    v40 = 4294967281;
  }
  free(v12);
  return v40;
}

uint64_t floatCompare(float *a1, float *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

void fillGaps(uint64_t a1, int a2, float a3)
{
  int v6;
  int v7;
  char *v8;
  int *v9;
  int v10;
  unint64_t v11;
  int v12;
  int *i;
  int v14;
  int v15;
  int v16;
  int v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  int v21;
  int v22;
  float32x2_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  float v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[128];
  uint64_t v48;

  LOBYTE(v6) = 0;
  v48 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v7 = -1;
  v8 = v47;
  v9 = (int *)a1;
  do
  {
    v10 = *v9;
    if ((v6 & 1) != 0)
    {
      if (v10)
      {
        v6 = 0;
        *((_DWORD *)v8 + 1) = v7;
        v8 += 8;
        goto LABEL_10;
      }
    }
    else
    {
      if (v10)
      {
        v6 = 0;
        goto LABEL_10;
      }
      if (v8 - v47 >= 121)
      {
        puts("too many gaps");
        LODWORD(v11) = 16;
LABEL_16:
        v12 = 0;
        v43 = a1 + 12;
        for (i = (int *)v47; ; i += 2)
        {
          v14 = *i;
          v15 = i[1];
          v16 = v15 + 1;
          v17 = *i - 1;
          if (*i < 1)
          {
            if (v15 > 30)
            {
              puts("no gain samples");
              return;
            }
            if (!slopeScan(a1, v16, 1, (_DWORD *)&v46 + 1, &v46))
              return;
            multiBinLinearRegression(a1, SHIDWORD(v46), v46, (_DWORD *)&v45 + 1, &v45, (float *)&v44, a2, a3);
            v25 = *i;
            v26 = i[1];
            if (*i <= v26)
            {
              v27 = v45;
              v28 = v44;
              v29 = v43 + 140 * v25;
              v30 = v26 + 1;
              do
              {
                v31 = *((float *)&v27 + 1) + (float)(*(float *)&v27 * (float)((float)((float)v25 + 0.5) * 0.03125));
                v32 = vcvtms_s32_f32(v31 * 32.0);
                *(_DWORD *)(v29 - 12) = 1;
                if (v32 >= 31)
                  v32 = 31;
                *(float *)(v29 - 8) = v31;
                *(_DWORD *)(v29 - 4) = v28;
                *(_DWORD *)(v29 + 4 * (v32 & ~(v32 >> 31))) = 1;
                ++v25;
                v29 += 140;
              }
              while (v30 != v25);
            }
          }
          else if (v15 > 30)
          {
            if (!slopeScan(a1, v14 - 1, -1, (_DWORD *)&v46 + 1, &v46))
              return;
            multiBinLinearRegression(a1, SHIDWORD(v46), v46, (_DWORD *)&v45 + 1, &v45, (float *)&v44, a2, a3);
            v33 = (float)((float)v17 + 0.5) * 0.03125;
            v34 = *((float *)&v45 + 1);
            v35 = *(float *)&v45;
            if ((float)(*((float *)&v45 + 1) + *(float *)&v45) <= 1.0)
            {
              if (*(float *)&v45 < 0.0)
              {
                v34 = *((float *)&v45 + 1) + (float)(*(float *)&v45 * v33);
                *((float *)&v45 + 1) = v34;
                LODWORD(v45) = 0;
                v35 = 0.0;
              }
            }
            else
            {
              v35 = fmaxf((float)(1.0 - (float)(*((float *)&v45 + 1) + (float)(*(float *)&v45 * v33))) / (float)(1.0 - v33), 0.0);
              v34 = 1.0 - v35;
              *(float *)&v45 = v35;
              *((float *)&v45 + 1) = 1.0 - v35;
            }
            v36 = *i;
            v37 = i[1];
            if (*i <= v37)
            {
              v38 = v44;
              v39 = v43 + 140 * v36;
              v40 = v37 + 1;
              do
              {
                v41 = v34 + (float)(v35 * (float)((float)((float)v36 + 0.5) * 0.03125));
                v42 = vcvtms_s32_f32(v41 * 32.0);
                *(_DWORD *)(v39 - 12) = 50;
                if (v42 >= 31)
                  v42 = 31;
                *(float *)(v39 - 8) = v41;
                *(_DWORD *)(v39 - 4) = v38;
                *(_DWORD *)(v39 + 4 * (v42 & ~(v42 >> 31))) = 1;
                ++v36;
                v39 += 140;
              }
              while (v40 != v36);
            }
          }
          else if (v15 >= v14)
          {
            v18 = *(float32x2_t *)(a1 + 140 * v17 + 4);
            v19 = vsub_f32(*(float32x2_t *)(a1 + 140 * v16 + 4), v18);
            v20 = v43 + 140 * v14;
            v21 = v15 - v14;
            v22 = -1;
            do
            {
              v23 = vmla_n_f32(v18, v19, (float)(v22 + 2) / (float)(v16 - v17));
              *(_DWORD *)(v20 - 12) = 1;
              v24 = vcvtms_s32_f32(32.0 * v23.f32[0]);
              if (v24 >= 31)
                v24 = 31;
              *(float32x2_t *)(v20 - 8) = v23;
              *(_DWORD *)(v20 + 4 * (v24 & ~(v24 >> 31))) = 1;
              v20 += 140;
              ++v22;
            }
            while (v21 != v22);
          }
          if (++v12 == (_DWORD)v11)
            return;
        }
      }
      *(_DWORD *)v8 = v7 + 1;
    }
    v6 = 1;
LABEL_10:
    v9 += 35;
    ++v7;
  }
  while (v7 != 31);
  if (v6)
  {
    *((_DWORD *)v8 + 1) = 31;
    v8 += 8;
  }
  v11 = (unint64_t)(v8 - v47) >> 3;
  if ((int)v11 >= 1)
    goto LABEL_16;
}

void curveFit(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, float a5, float a6)
{
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  int v24;
  float v26;
  float v27;
  int v28;
  float v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float v37;
  int v38;
  int v39;
  float *v40;
  float v41;
  float v42;
  uint64_t v44;
  float v45;
  unsigned int v47;
  uint64_t v48;
  float v49[31];
  float v50;
  _OWORD v51[7];
  __int128 v52;
  _OWORD v53[16];
  uint64_t v54;

  v11 = 0;
  v54 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v12 = -1.0;
  do
  {
    *((float *)&v53[8] + v11 + 2) = (float)((float)(int)v11 + 0.5) * 0.03125;
    v13 = binY(a1, v11, a5);
    v14 = fmaxf(v13, v12);
    if (a2)
      v12 = v14;
    else
      v12 = v13;
    *((float *)v53 + v11++) = v12;
  }
  while ((_DWORD)v11 != 32);
  v15 = 0;
  do
  {
    v16 = v15;
    v17 = 31 - v15++;
    v18 = 2;
    do
    {
      v19 = 0;
      v20 = v16 - v18;
      if (v16 < v18)
        v20 = 0;
      LODWORD(v21) = v18 + v15;
      if (v17 <= v18)
        v21 = 32;
      else
        v21 = v21;
      if (v21 > v20)
      {
        v19 = 0;
        v22 = (int *)(a1 + 140 * v20);
        LODWORD(v23) = v16 - v18;
        if (v16 >= v18)
          v23 = v23;
        else
          v23 = 0;
        do
        {
          v24 = *v22;
          v22 += 35;
          v19 += v24;
          ++v23;
        }
        while (v23 < v21);
      }
      if (v19 > 200)
        break;
    }
    while (v18++ < 0xF);
    linearRegression((float *)&v53[8] + v20 + 2, (float *)v53 + v20, v21 - v20, (float *)&v48 + 1, (float *)&v48);
    v26 = *(float *)&v48;
    v27 = *((float *)&v48 + 1) + (float)(*(float *)&v48 * *((float *)&v53[8] + v16 + 2));
    *((float *)v51 + v16) = v27;
    v49[v16] = v26;
    if (v27 > 1.0)
    {
      *((_DWORD *)v51 + v16) = 1065353216;
      v49[v16] = 0.0;
    }
  }
  while (v15 != 32);
  v28 = 0;
  v53[4] = v51[4];
  v53[5] = v51[5];
  v53[6] = v51[6];
  v53[7] = v52;
  v53[0] = v51[0];
  v53[1] = v51[1];
  v53[2] = v51[2];
  v53[3] = v51[3];
  *(_DWORD *)a3 = 0;
  v29 = v49[0];
  *(float *)(a3 + 4) = fminf(fmaxf(*(float *)v51 + (float)(v49[0] * -0.015625), 0.0), 1.0);
  *(float *)(a3 + 8) = v29;
  v30 = a3 + 28;
  v31 = 1;
  do
  {
    v47 = v31;
    v32 = v30;
    v33 = v28 + 2;
    LODWORD(v34) = v28 + 2;
    if (v28 <= 29)
    {
      v34 = v33;
      if (v33 <= 31)
        v35 = 31;
      else
        v35 = v33;
      v36 = 3;
      while (1)
      {
        *(float *)(a3 + 28) = (float)((float)(int)v34 + 0.5) * 0.03125;
        *(_DWORD *)(a3 + 32) = *((_DWORD *)v51 + v34);
        *(float *)(a3 + 36) = v49[v34];
        computeCubic(a3);
        v37 = 0.0;
        if (v34 >= v28)
        {
          v37 = 0.0;
          v38 = v36;
          v39 = v28;
          v40 = (float *)v53 + v28;
          do
          {
            v41 = *v40++;
            v42 = *(float *)(a3 + 24)
                + (*(float *)(a3 + 20)
                 + (*(float *)(a3 + 16) + *(float *)(a3 + 12) * (float)((float)((float)v39 + 0.5) * 0.03125))
                 * (float)((float)((float)v39 + 0.5) * 0.03125))
                * (float)((float)((float)v39 + 0.5) * 0.03125);
            v37 = v37 + (float)((float)(v41 - v42) * (float)(v41 - v42));
            ++v39;
            --v38;
          }
          while (v38);
        }
        if (sqrtf(v37 / (float)(v34 - v28 + 1)) > a6)
          break;
        ++v36;
        if (v34++ == v35)
        {
          LODWORD(v34) = 32;
          break;
        }
      }
    }
    if ((int)v34 >= 32)
      v28 = 32;
    else
      v28 = v34;
    v44 = v28 - 1;
    *(float *)(a3 + 28) = (float)((float)(int)v44 + 0.5) * 0.03125;
    *(_DWORD *)(a3 + 32) = *((_DWORD *)v51 + v44);
    *(float *)(a3 + 36) = v49[v44];
    computeCubic(a3);
    if (v28 > 31)
      break;
    v31 = v47 + 1;
    v30 = v32 + 28;
    a3 = v32;
  }
  while (v47 < 0x1E);
  *(_DWORD *)(v32 + 28) = 1065353216;
  v45 = v50;
  *(float *)(v32 + 32) = fminf(fmaxf(*((float *)&v52 + 3) + (float)(v50 * 0.015625), 0.0), 1.0);
  *(float *)(v32 + 36) = v45;
  computeCubic(v32);
  *a4 = v47 + 2;
}

float binY(uint64_t a1, int a2, float a3)
{
  float v3;
  uint64_t v4;
  int v5;
  int v6;
  float v9;

  v3 = (float)(a3 / 100.0) * (float)*(int *)(a1 + 140 * a2);
  v4 = 0;
  if (v3 == 0.0)
  {
    while (*(int *)(a1 + 140 * a2 + 12 + 4 * v4) < 1)
    {
      if (++v4 == 32)
        return 0.0;
    }
    v9 = (float)(int)v4;
    return v9 * 0.03125;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)(a1 + 140 * a2 + 12 + 4 * v4);
      if (v3 >= (float)v5 && v3 <= (float)(v6 + v5))
      {
        v9 = (float)((float)(v3 - (float)v5) / (float)v6) + (float)(int)v4;
        return v9 * 0.03125;
      }
      ++v4;
      v5 += v6;
    }
    while (v4 != 32);
    return 0.0;
  }
}

float linearRegression(float *a1, float *a2, int a3, float *a4, float *a5)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float result;

  if (a3 <= 0)
  {
    v15 = 0.0;
    v16 = 0.0 / (float)a3;
    v13 = v16;
    v14 = 0.0;
  }
  else
  {
    v5 = a3;
    v6 = 0.0;
    v7 = a3;
    v8 = a2;
    v9 = a1;
    v10 = 0.0;
    do
    {
      v11 = *v8++;
      v10 = v10 + v11;
      v12 = *v9++;
      v6 = v6 + v12;
      --v7;
    }
    while (v7);
    v13 = v10 / (float)a3;
    v14 = 0.0;
    v15 = 0.0;
    v16 = v6 / (float)a3;
    do
    {
      v17 = *a1++;
      v18 = v17 - v16;
      v14 = v14 + (float)(v18 * v18);
      v19 = *a2++;
      v15 = v15 + (float)((float)(v19 - v13) * v18);
      --v5;
    }
    while (v5);
  }
  v20 = v15 / v14;
  v21 = v14 == 0.0;
  v22 = 0.0;
  if (!v21)
    v22 = v20;
  result = v13 - (float)(v22 * v16);
  *a4 = result;
  *a5 = v22;
  return result;
}

float computeCubic(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float result;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(float *)(a1 + 28);
  v5 = *(float *)(a1 + 36);
  v6 = (v3 + v5 - (*(float *)(a1 + 32) - v2 + *(float *)(a1 + 32) - v2) / (v4 - v1)) / ((v1 - v4) * (v1 - v4));
  v7 = (v5 - v3) / (v4 - v1 + v4 - v1) + (v1 + v4) * -1.5 * v6;
  v8 = v3 + v1 * -3.0 * v1 * v6 + v1 * -2.0 * v7;
  v9 = v2 + -(v1 * v1) * v1 * v6 + -(v1 * v1) * v7 - v1 * v8;
  *(float *)&v2 = v6;
  *(float *)&v7 = v7;
  *(_DWORD *)(a1 + 12) = LODWORD(v2);
  *(_DWORD *)(a1 + 16) = LODWORD(v7);
  *(float *)&v2 = v8;
  result = v9;
  *(_DWORD *)(a1 + 20) = LODWORD(v2);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t slopeScan(uint64_t a1, int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;

  if (a3 == 1)
    v5 = 32;
  else
    v5 = -1;
  v6 = *(_DWORD *)(a1 + 140 * a2);
  v7 = a3 + a2;
  v8 = a3 + (uint64_t)a2;
  v9 = v5 - v8;
  v10 = (int *)(a1 + 140 * v8);
  v11 = 1;
  do
  {
    v12 = v7;
    if (!v9)
      break;
    if (*v10 > 0)
      ++v11;
    v6 += *v10;
    v7 += a3;
    v9 -= a3;
    v10 += 35 * a3;
  }
  while (v6 < 200 || v11 < 5);
  v14 = v6 <= 199 || v11 <= 4;
  v15 = !v14;
  if (v14)
  {
    puts("too few samples");
  }
  else
  {
    if (a3 <= 0)
      v16 = v12;
    else
      v16 = a2;
    *a4 = v16;
    if (a3 <= 0)
      v17 = a2;
    else
      v17 = v12;
    *a5 = v17;
  }
  return v15;
}

void multiBinLinearRegression(uint64_t a1, int a2, int a3, _DWORD *a4, _DWORD *a5, float *a6, int a7, float a8)
{
  int v10;
  int v13;
  int v15;
  uint64_t v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  uint64_t v31;
  float v32[32];
  float v33[32];
  uint64_t v34;

  v10 = 0;
  v34 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  if (a2 <= a3)
  {
    v13 = a2;
    v10 = 0;
    v15 = a3 + 1;
    v16 = 140 * a2;
    v17 = -1.0;
    v18 = v33;
    v19 = v32;
    do
    {
      if (*(int *)(a1 + v16) >= 1)
      {
        *v18++ = (float)((float)v13 + 0.5) * 0.03125;
        v20 = binY(a1, v13, a8);
        v21 = fmaxf(v20, v17);
        if (a7)
          v17 = v21;
        else
          v17 = v20;
        *v19++ = v17;
        ++v10;
      }
      ++v13;
      v16 += 140;
    }
    while (v15 != v13);
  }
  linearRegression(v33, v32, v10, (float *)&v31 + 1, (float *)&v31);
  v22 = v31;
  *a4 = HIDWORD(v31);
  *a5 = v22;
  if (v10 < 1)
  {
    v24 = 0.0;
  }
  else
  {
    v23 = v10;
    v24 = 0.0;
    v25 = v32;
    v26 = v33;
    do
    {
      v27 = *v26++;
      v28 = *((float *)&v22 + 1) + (float)(*(float *)&v22 * v27);
      v29 = *v25++;
      v24 = v24 + (float)((float)(v29 - v28) * (float)(v29 - v28));
      --v23;
    }
    while (v23);
  }
  *a6 = sqrtf(v24 / (float)v10);
}

uint64_t bfpn_quadra_to_bayer_binning(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    goto LABEL_20;
  v2 = *a1;
  if (!*a1)
    goto LABEL_20;
  v3 = a1[2];
  v4 = a1[3];
  if (v4 < 2 * v3)
    goto LABEL_21;
  if (!a2)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v5 = *a2;
  if (!*a2)
  {
LABEL_20:
    FigDebugAssert3();
    return 4294967281;
  }
  v6 = a2[2];
  v7 = a2[3];
  if (v7 < 2 * v6)
  {
LABEL_21:
    FigDebugAssert3();
    return 4294967277;
  }
  if (v3 == 2 * v6)
  {
    v8 = a2[1];
    if (a1[1] == 2 * v8)
    {
      if (v8)
      {
        v9 = v4 >> 1;
        v10 = 2 * (v7 >> 1);
        v11 = 4 * v9;
        v12 = v2 + 2 * v9;
        do
        {
          if (v6)
          {
            v13 = 0;
            v14 = v6;
            do
            {
              *(_WORD *)(v5 + v13) = (*(unsigned __int16 *)(v2 + 2 * v13)
                                    + *(unsigned __int16 *)(v2 + 2 * v13 + 2)
                                    + *(unsigned __int16 *)(v12 + 2 * v13)
                                    + *(unsigned __int16 *)(v12 + 2 * v13 + 2)
                                    + 2) >> 2;
              v13 += 2;
              --v14;
            }
            while (v14);
          }
          v5 += v10;
          v12 += v11;
          v2 += v11;
          --v8;
        }
        while (v8);
      }
      return 0;
    }
    else
    {
      FigDebugAssert3();
      return 4294967279;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967280;
  }
}

void _fillPixelBufferWithCoefficients(__CVBuffer *a1, void *a2)
{
  id v3;
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  unsigned int BytesPerRow;
  char *BaseAddress;
  uint64_t v9;
  char *v10;
  BOOL v11;
  unsigned int v12;
  char v13;
  size_t v14;
  id v16;

  v3 = a2;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CVPixelBufferLockBaseAddress(a1, 0);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v16 = objc_retainAutorelease(v3);
  v9 = objc_msgSend(v16, "bytes");
  if (Height)
  {
    v10 = (char *)v9;
    v11 = PixelFormatType == 1278226534;
    v12 = 1;
    if (v11)
      v13 = 2;
    else
      v13 = 1;
    v14 = Width << v13;
    do
    {
      memcpy(BaseAddress, v10, v14);
      v10 += v14;
      BaseAddress += BytesPerRow;
    }
    while (Height > v12++);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);

}

id smartStyleCastTypesForVersion(int a1)
{
  if (a1 != 1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99E40], "orderedSetWithObjects:", CFSTR("Standard"), CFSTR("Neutral"), CFSTR("BlushWarm"), CFSTR("TanWarm"), CFSTR("Cool"), CFSTR("NoFilter"), CFSTR("WarmAuthentic"), CFSTR("Colorful"), CFSTR("Earthy"), CFSTR("CloudCover"), CFSTR("UrbanCool"), CFSTR("DreamyHues"), CFSTR("StarkBW"), CFSTR("GoldWarm"), CFSTR("LongGray"), 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id smartStyleTuningTypesForVersion(int a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 != 1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99E40], "orderedSetWithObjects:", CFSTR("DefaultParameters"), CFSTR("WYSIWYG"), CFSTR("UB"), CFSTR("DF"), CFSTR("DigitalFlash"), CFSTR("SWFR"), CFSTR("Video"), CFSTR("QuadraSFD"), 0, v1, v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t bfpn_correct_nuhm(uint64_t *a1, float *a2, float *a3)
{
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _BYTE *v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t i;
  float v25;
  uint64_t v26;
  float v27;
  _BYTE *v28;
  uint64_t j;
  uint64_t result;
  float64x2_t v31;
  _BYTE v32[3168];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_23;
  if (!a2 || !a3)
  {
    FigDebugAssert3();
    return 4294967266;
  }
  v5 = *a1;
  if (*a1)
  {
    if (a1[2] == 33)
    {
      if (a1[1] == 24)
      {
        v6 = a1[3];
        if (v6 <= 0x83)
        {
          FigDebugAssert3();
          return 4294967277;
        }
        else
        {
          v7 = v32;
          bzero(v32, 0xC60uLL);
          v8 = 0;
          v9 = 0.0;
          v10 = 0.0;
          do
          {
            v11 = 0;
            v31 = vmulq_n_f64((float64x2_t)xmmword_1D3305400, (float)((float)(int)v8 + -3.0));
            do
            {
              v12 = expf((float)((float)((float)(v11 - 16) * (float)(v11 - 16)) / -50.0)- (float)((float)((float)(v8 - 1) * (float)(v8 - 1)) / 18.0));
              v13 = vcvt_f32_f64(vmlaq_n_f64(v31, (float64x2_t)xmmword_1D3305410, (float)((float)(int)v11 + -15.0)));
              v14.i32[1] = v13.i32[1];
              v14.f32[0] = -v13.f32[0];
              v15 = vdiv_f32(vmul_f32(v14, v13), (float32x2_t)0x43B3D3FE4356A8C0);
              v16 = v12 + expf(vsub_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1)).f32[0]) * 0.681;
              v9 = fmaxf(v9, v16);
              v10 = v10 + v16;
              *(float *)&v7[4 * v11++] = v16;
            }
            while (v11 != 33);
            ++v8;
            v7 += 132;
          }
          while (v8 != 24);
          v17 = 0;
          v18 = 4 * (v6 >> 2);
          v19 = 0.0;
          v20 = v32;
          v21 = v5;
          v22 = 0.0;
          v23 = v10 / 792.0;
          do
          {
            for (i = 0; i != 132; i += 4)
            {
              v25 = (float)(*(float *)&v20[i] - v23) / v9;
              v22 = v22 + (float)(*(float *)(v21 + i) * v25);
              v19 = v19 + (float)(v25 * v25);
            }
            ++v17;
            v21 += v18;
            v20 += 132;
          }
          while (v17 != 24);
          v26 = 0;
          v27 = fmaxf(v22, 0.0) * 0.725 / fmaxf(v19, 0.000001);
          v28 = v32;
          do
          {
            for (j = 0; j != 132; j += 4)
              *(float *)(v5 + j) = fmaxf(fminf(*(float *)(v5 + j)+ (float)((float)-v27 * (float)((float)(*(float *)&v28[j] - v23) / v9)), 255.0), 0.0);
            ++v26;
            v5 += v18;
            v28 += 132;
          }
          while (v26 != 24);
          result = 0;
          *a2 = v27;
          *a3 = v23 * v27;
        }
      }
      else
      {
        FigDebugAssert3();
        return 4294967279;
      }
    }
    else
    {
      FigDebugAssert3();
      return 4294967280;
    }
  }
  else
  {
LABEL_23:
    FigDebugAssert3();
    return 4294967281;
  }
  return result;
}

void sub_1D3271284(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t getMetalLumaFormat(__CVBuffer *a1)
{
  signed int PixelFormatType;
  uint64_t v2;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v2 = 25;
  if (PixelFormatType <= 1751527983)
  {
    if (PixelFormatType > 1278226487)
    {
      if (PixelFormatType != 1278226488)
      {
        if (PixelFormatType == 1278226536)
          return v2;
        return 0;
      }
    }
    else if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
    {
      return 0;
    }
    return 10;
  }
  if (PixelFormatType <= 1885745711)
  {
    if (PixelFormatType == 1751527984)
      return v2;
    if (PixelFormatType == 1882468912)
      return 588;
    return 0;
  }
  if (PixelFormatType == 1885745712)
    return 588;
  if (PixelFormatType != 2016686640 && PixelFormatType != 2019963440)
    return 0;
  return 576;
}

id getSubDict(void *a1, uint64_t a2, _DWORD *a3)
{
  void *v4;

  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {

    v4 = 0;
    if (a3)
      *a3 = 4;
  }
  return v4;
}

id getSubArray(void *a1, uint64_t a2, _DWORD *a3)
{
  void *v4;

  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {

    v4 = 0;
    if (a3)
      *a3 = 4;
  }
  return v4;
}

uint64_t bfpn_temporal_mean_and_variance(uint64_t *a1, uint64_t *a2, int a3, uint64_t *a4, float *a5, float *a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t i;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t j;
  uint64_t result;

  if (!a1)
    goto LABEL_34;
  v6 = *a1;
  if (!*a1)
    goto LABEL_34;
  v7 = a1[2];
  v8 = a1[3];
  if (v8 < 4 * v7)
  {
LABEL_37:
    FigDebugAssert3();
    return 4294967277;
  }
  if (!a2 || (v9 = *a2) == 0)
  {
LABEL_34:
    FigDebugAssert3();
    return 4294967281;
  }
  v10 = a2[2];
  v11 = a2[3];
  if (v11 < 4 * v10)
    goto LABEL_37;
  if (!a4 || (v12 = *a4) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v14 = a4[2];
  v13 = a4[3];
  if (v13 < 4 * v14)
    goto LABEL_37;
  if (!a5 || !a6)
  {
    FigDebugAssert3();
    return 4294967266;
  }
  if (v7 != v10)
    goto LABEL_41;
  v15 = a1[1];
  if (v15 != a2[1])
    goto LABEL_42;
  if (v7 != v14)
  {
LABEL_41:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v15 != a4[1])
  {
LABEL_42:
    FigDebugAssert3();
    return 4294967279;
  }
  if (a3 <= 0)
  {
    FigDebugAssert3();
    return 4294967264;
  }
  else
  {
    if (v15)
    {
      v16 = v8 >> 2;
      v17 = 1.0 / (float)a3;
      v18 = 4 * (v13 >> 2);
      v19 = 4 * (v11 >> 2);
      v20 = 4 * v16;
      v21 = *a4;
      v22 = a1[1];
      v23 = 0.0;
      v24 = 0.0;
      do
      {
        if (v7)
        {
          for (i = 0; i != v7; ++i)
          {
            v26 = *(float *)(v6 + 4 * i);
            v24 = v24 + fmaxf(*(float *)(v9 + 4 * i) + (float)((float)-(float)(v26 * v26) * v17), 0.0);
            v23 = v23 + (float)(v17 * v26);
            *(float *)(v21 + 4 * i) = v17 * v26;
          }
        }
        v21 += v18;
        v9 += v19;
        v6 += v20;
        --v22;
      }
      while (v22);
      v27 = v15 * v7;
      v28 = v23 / (float)(unint64_t)(v15 * v7);
      v29 = 0.0;
      do
      {
        if (v7)
        {
          for (j = 0; j != v7; ++j)
            v29 = v29 + (float)((float)(*(float *)(v12 + 4 * j) - v28) * (float)(*(float *)(v12 + 4 * j) - v28));
        }
        v12 += v18;
        --v15;
      }
      while (v15);
    }
    else
    {
      v27 = 0;
      v24 = 0.0;
      v29 = 0.0;
    }
    result = 0;
    *a5 = v24 / (float)(unint64_t)(v27 * (a3 - 1));
    *a6 = v29 / (float)(unint64_t)(v27 - 1);
  }
  return result;
}

uint64_t bfpn_upsample2x_and_interleave(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  int v21;
  char *v22;
  _BYTE *v23;
  _BYTE *v24;
  float v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;

  if (!a1)
    goto LABEL_24;
  v3 = *a1;
  if (!*a1)
    goto LABEL_24;
  v4 = a1[2];
  v5 = a1[3];
  if (v5 < 4 * v4)
  {
LABEL_27:
    FigDebugAssert3();
    return 4294967277;
  }
  if (!a2 || !*a2)
  {
LABEL_24:
    FigDebugAssert3();
    return 4294967281;
  }
  v7 = a2[2];
  v6 = a2[3];
  if (v6 < v7)
    goto LABEL_27;
  if (!a3 || (v8 = *a3) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v9 = a3[2];
  v10 = a3[3];
  if (v10 < 2 * v9)
    goto LABEL_27;
  if (v4 != v9 >> 1)
    goto LABEL_30;
  v11 = a3[1];
  if (a1[1] != v11 >> 1)
    goto LABEL_31;
  if (v9 != v7)
  {
LABEL_30:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v11 != a2[1])
  {
LABEL_31:
    FigDebugAssert3();
    return 4294967279;
  }
  v12 = v11 >> 1;
  if ((int)(v11 >> 1) >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 2 * v10;
    v16 = v8 + v10;
    v17 = *a2 + 1;
    v18 = 29478;
    do
    {
      if ((int)v4 >= 1)
      {
        v19 = 0;
        v20 = (char *)v17;
        v21 = v4;
        do
        {
          v22 = &v20[v6];
          v23 = (_BYTE *)(v16 + v19);
          v24 = (_BYTE *)(v8 + v19);
          v25 = *(float *)(v3 + v19);
          *v24 = (int)fminf(fmaxf(roundf((float)((float)((float)v18 * 0.000015259) + -0.5) + v25), 0.0), 255.0);
          v26 = v14 + 65184 * v18;
          v24[1] = *(v20 - 1);
          v24[2] = (int)fminf(fmaxf(roundf((float)((float)((float)(unsigned __int16)v26 * 0.000015259) + -0.5) + v25), 0.0), 255.0);
          v27 = *v20;
          v20 += 2;
          v24[3] = v27;
          v28 = 65184 * (unsigned __int16)v26 + HIWORD(v26);
          *v23 = (int)fminf(fmaxf(roundf((float)((float)((float)(unsigned __int16)v28 * 0.000015259) + -0.5) + v25), 0.0), 255.0);
          v29 = 65184 * (unsigned __int16)v28 + HIWORD(v28);
          v23[1] = *(v22 - 1);
          v23[2] = (int)fminf(fmaxf(roundf((float)((float)((float)(unsigned __int16)v29 * 0.000015259) + -0.5) + v25), 0.0), 255.0);
          v18 = 65184 * (unsigned __int16)v29 + HIWORD(v29);
          v14 = HIWORD(v18);
          v23[3] = *v22;
          v18 = (unsigned __int16)v18;
          v19 += 4;
          --v21;
        }
        while (v21);
      }
      v8 += v15;
      v16 += v15;
      ++v13;
      v3 += 4 * (v5 >> 2);
      v17 += 2 * v6;
    }
    while (v13 != (_DWORD)v12);
  }
  return 0;
}

double ssccmpg_float3x4FromMatrix(uint64_t a1, int a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  double result;

  v2 = *(float32x4_t *)a1;
  v3 = *(int8x16_t *)(a1 + 16);
  v4 = (float32x4_t)vextq_s8(*(int8x16_t *)a1, v3, 0xCuLL);
  v5 = *(int8x16_t *)(a1 + 32);
  v6 = (float32x4_t)vextq_s8(v3, v5, 8uLL);
  v7 = (float32x4_t)vextq_s8(v5, (int8x16_t)v4, 4uLL);
  if (a2)
  {
    v8 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    v9 = vmulq_f32(v2, v8);
    v2 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))), 0);
    v10 = vmulq_f32(v4, v8);
    v4 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))), 0);
    v11 = vmulq_f32(v6, v8);
    v6 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))), 0);
    v12 = vmulq_f32(v7, v8);
    v7 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))), 0);
  }
  *(_QWORD *)&result = vzip1q_s32(vzip1q_s32((int32x4_t)v2, (int32x4_t)v6), vzip1q_s32((int32x4_t)v4, (int32x4_t)v7)).u64[0];
  return result;
}

void __ssccmpg_getPrior_block_invoke()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[14];
  _QWORD v3[15];

  v3[14] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("Colorful");
  v2[1] = CFSTR("DreamyHues");
  v3[0] = &unk_1E9513A80;
  v3[1] = &unk_1E9513A98;
  v2[2] = CFSTR("Earthy");
  v2[3] = CFSTR("NoFilter");
  v3[2] = &unk_1E9513AB0;
  v3[3] = &unk_1E9513AC8;
  v2[4] = CFSTR("StarkBW");
  v2[5] = CFSTR("UrbanCool");
  v3[4] = &unk_1E9513AE0;
  v3[5] = &unk_1E9513AF8;
  v2[6] = CFSTR("WarmAuthentic");
  v2[7] = CFSTR("CloudCover");
  v3[6] = &unk_1E9513B10;
  v3[7] = &unk_1E9513B28;
  v2[8] = CFSTR("TanWarm");
  v2[9] = CFSTR("BlushWarm");
  v3[8] = &unk_1E9513B40;
  v3[9] = &unk_1E9513B58;
  v2[10] = CFSTR("GoldWarm");
  v2[11] = CFSTR("Neutral");
  v3[10] = &unk_1E9513B70;
  v3[11] = &unk_1E9513B88;
  v2[12] = CFSTR("Cool");
  v2[13] = CFSTR("LongGray");
  v3[12] = &unk_1E9513BA0;
  v3[13] = &unk_1E9513BB8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 14);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ssccmpg_getPrior_castNameToID;
  ssccmpg_getPrior_castNameToID = v0;

}

uint64_t bfpn_apply_weights(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;

  if (!a1 || (v3 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v4 = a1[2];
  v5 = a1[3];
  if (v5 < 4 * v4)
    goto LABEL_26;
  if (!a2 || (v6 = *a2) == 0)
  {
    FigDebugAssert3();
    return 4294967268;
  }
  v7 = a2[2];
  v8 = a2[3];
  if (v8 < 4 * v7)
    goto LABEL_26;
  if (!a3 || (v9 = *a3) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v11 = a3[2];
  v10 = a3[3];
  if (v10 < 4 * v11)
  {
LABEL_26:
    FigDebugAssert3();
    return 4294967277;
  }
  if (v4 != v7)
    goto LABEL_29;
  v12 = a1[1];
  if (v12 != a2[1])
    goto LABEL_30;
  if (v4 != v11)
  {
LABEL_29:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v12 != a3[1])
  {
LABEL_30:
    FigDebugAssert3();
    return 4294967279;
  }
  if (v12)
  {
    v13 = v5 >> 2;
    v14 = 4 * (v10 >> 2);
    v15 = 4 * (v8 >> 2);
    v16 = 4 * v13;
    do
    {
      if (v4)
      {
        for (i = 0; i != v4; ++i)
          *(float *)(v9 + 4 * i) = *(float *)(v3 + 4 * i) * *(float *)(v6 + 4 * i);
      }
      v9 += v14;
      v6 += v15;
      v3 += v16;
      --v12;
    }
    while (v12);
  }
  return 0;
}

unsigned int *rwppPyramid_CopyLuma(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  int v8;
  size_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;

  v1 = (unsigned int *)*((_QWORD *)result + 5);
  v2 = *((_QWORD *)result + 6);
  v3 = v1[6];
  v4 = v1[8];
  v5 = *(_QWORD *)&v1[2 * result[8]] + v1[4] + v1[5] * v4;
  v6 = (_DWORD *)*((_QWORD *)result + 2);
  v7 = v6[6];
  v8 = v6[7];
  if (v7 >= v3)
    v9 = v3;
  else
    v9 = v7;
  v10 = v6[8];
  v11 = result[1];
  v12 = *result * v8;
  v13 = v12 / v11;
  v14 = *(_QWORD *)&v6[2 * result[8]];
  v15 = (v8 + v12) / v11;
  if (v2)
  {
    if (v13 < v15)
    {
      v16 = (v9 - 1);
      if ((_DWORD)v9)
      {
        do
        {
          v17 = 0;
          v18 = v14 + v10 * v13;
          v19 = v9;
          do
          {
            *(_BYTE *)(v18 + v17) = *(_BYTE *)(v2 + *(unsigned __int8 *)(v5 + v4 * v13 + v17));
            ++v17;
            --v19;
          }
          while (v19);
          result = (unsigned int *)memset((void *)(v18 + v9), *(unsigned __int8 *)(v18 + v16), (v10 - v9));
          ++v13;
        }
        while (v15 != v13);
      }
      else
      {
        do
        {
          result = (unsigned int *)memset((void *)(v14 + v10 * v13 + v9), *(unsigned __int8 *)(v14 + v10 * v13 + v16), (v10 - v9));
          ++v13;
        }
        while (v13 != v15);
      }
    }
  }
  else if (v13 < v15)
  {
    do
    {
      memcpy((void *)(v14 + v10 * v13), (const void *)(v5 + v4 * v13), v9);
      result = (unsigned int *)memset((void *)(v14 + v10 * v13 + v9), *(unsigned __int8 *)(v14 + v10 * v13 + (v9 - 1)), (v10 - v9));
      ++v13;
    }
    while (v13 != v15);
  }
  return result;
}

unsigned int *rwppPyramid_DownscaleLuma(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint8x16_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint8x16_t v35;
  uint16x8_t v36;
  uint8x16_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  int8x8_t *v44;
  uint8x16_t *v45;
  uint8x16_t *v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *i8;
  const char *v55;
  int v56;
  uint8x16_t *v57;
  unsigned int v58;
  uint8x16_t *v59;
  unsigned int v60;
  int8x8_t *v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  _BYTE *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int8x8x2_t v82;
  int8x8x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;

  v1 = (unsigned int *)*((_QWORD *)result + 5);
  v2 = *((_QWORD *)result + 6);
  v3 = v1[6];
  v4 = v1[7] - 1;
  v5 = v1[8];
  v6 = *(_QWORD *)&v1[2 * result[8]];
  v8 = v1 + 4;
  v7 = v1[4];
  v9 = v8[1] * v5;
  v79 = v6;
  v10 = v6 + v7 + v9;
  v11 = (_DWORD *)*((_QWORD *)result + 2);
  v12 = v3 >> 1;
  v13 = v11[6];
  v14 = v11[7];
  if (v13 >= v12)
    v15 = v12;
  else
    v15 = v13;
  v16 = v11[8];
  v17 = result[1];
  v18 = *result * v14;
  v19 = v18 / v17;
  v20 = *(_QWORD *)&v11[2 * result[8]];
  v21 = (v14 + v18) / v17;
  if (v2)
  {
    if (v19 < v21)
    {
      v81 = (v15 - 1);
      if (v15 >= 8)
      {
        v22 = (v15 & 7) - 1;
        v77 = v7 + 2 * v22 + v9 + 18;
        v78 = v22 + 9;
        v80 = (v15 & 7) - 1;
        v75 = (v22 + 1) & 0x1FFFFFFF0;
        v76 = v22 + 1;
        v73 = 2 * ((v22 + 1) & 0x1FFFFFFF8);
        v74 = (v22 + 1) & 0x1FFFFFFF8;
        v72 = 2 * v75;
        while (1)
        {
          v23 = 0;
          v24 = 2 * v19;
          if (2 * v19 >= v4)
            v24 = v4;
          v25 = v24 * v5;
          v26 = (uint8x16_t *)(v10 + v25);
          v27 = (2 * v19) | 1;
          if (v27 >= v4)
            v27 = v4;
          v28 = v27 * v5;
          v29 = (uint8x16_t *)(v10 + v28);
          v30 = v16 * v19;
          v31 = v20 + v30;
          v32 = (int8x8_t *)(v20 + v30);
          v33 = v15;
          do
          {
            v34 = v23;
            v33 -= 8;
            v35 = *v26++;
            v36 = vpaddlq_u8(v35);
            v37 = *v29++;
            *v32++ = vrshrn_n_s16((int16x8_t)vpadalq_u8(v36, v37), 2uLL);
            ++v23;
          }
          while (v33 > 7);
          if (!v33)
            goto LABEL_36;
          if (v80 < 7
            || ((v38 = v20 + v78 + v30 + 8 * v34,
                 v39 = v79 + 16 * v34 + v77 + v28,
                 (unint64_t)v32 < v79 + 16 * v34 + v77 + v25)
              ? (v40 = (unint64_t)v26 >= v38)
              : (v40 = 1),
                v40 ? (v41 = 0) : (v41 = 1),
                (unint64_t)v29 < v38 ? (v42 = (unint64_t)v32 >= v39) : (v42 = 1),
                !v42 || (v41 & 1) != 0))
          {
            v44 = v32;
            v45 = v26;
            v46 = v29;
          }
          else
          {
            if (v80 < 0xF)
            {
              v43 = 0;
LABEL_30:
              v44 = (int8x8_t *)((char *)v32 + v74);
              v45 = (uint8x16_t *)((char *)v26 + v73);
              v46 = (uint8x16_t *)((char *)v29 + v73);
              v33 -= v74;
              v47 = v43 - v74;
              do
              {
                v48 = &v26->i8[2 * v43];
                v82 = vld2_s8(v48);
                v49 = &v29->i8[2 * v43];
                v83 = vld2_s8(v49);
                *(int8x8_t *)((char *)v32 + v43) = vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v82.val[0], (uint8x8_t)v82.val[1]), (uint8x8_t)v83.val[0]), (uint8x8_t)v83.val[1]), 2uLL);
                v43 += 8;
                v47 += 8;
              }
              while (v47);
              if (v76 == v74)
                goto LABEL_36;
              goto LABEL_35;
            }
            v52 = 0;
            v53 = v75;
            do
            {
              i8 = v26[v52].i8;
              v84 = vld2q_s8(i8);
              v55 = v29[v52].i8;
              v85 = vld2q_s8(v55);
              *(int8x16_t *)v32[v52].i8 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v84.val[0].i8, *(uint8x8_t *)v84.val[1].i8), *(uint8x8_t *)v85.val[0].i8), *(uint8x8_t *)v85.val[1].i8), 2uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v84.val[0], (uint8x16_t)v84.val[1]), (uint8x16_t)v85.val[0]), (uint8x16_t)v85.val[1]), 2uLL);
              v52 += 2;
              v53 -= 16;
            }
            while (v53);
            if (v76 == v75)
              goto LABEL_36;
            v43 = v75;
            if ((v76 & 8) != 0)
              goto LABEL_30;
            v33 -= v75;
            v46 = (uint8x16_t *)((char *)v29 + v72);
            v45 = (uint8x16_t *)((char *)v26 + v72);
            v44 = (int8x8_t *)((char *)v32 + v75);
          }
          do
          {
LABEL_35:
            v44->i8[0] = (v45->u8[0] + v45->u8[1] + v46->u8[0] + v46->u8[1] + 2) >> 2;
            v44 = (int8x8_t *)((char *)v44 + 1);
            v45 = (uint8x16_t *)((char *)v45 + 2);
            v46 = (uint8x16_t *)((char *)v46 + 2);
            --v33;
          }
          while (v33);
LABEL_36:
          v50 = 0;
          v51 = v15;
          do
          {
            *(_BYTE *)(v31 + v50) = *(_BYTE *)(v2 + *(unsigned __int8 *)(v31 + v50));
            ++v50;
            --v51;
          }
          while (v51);
          result = (unsigned int *)memset((void *)(v31 + v15), *(unsigned __int8 *)(v31 + v81), (v16 - v15));
          if (v21 == ++v19)
            return result;
        }
      }
      if ((_DWORD)v15)
      {
        do
        {
          v65 = (_BYTE *)(v20 + v16 * v19);
          v66 = 2 * v19;
          v67 = (2 * v19) | 1;
          if (v67 >= v4)
            v67 = v4;
          v68 = (unsigned __int8 *)(v10 + v67 * v5);
          if (v66 >= v4)
            v66 = v4;
          v69 = (unsigned __int8 *)(v10 + v66 * v5);
          *v65 = (*v69 + v69[1] + *v68 + v68[1] + 2) >> 2;
          if ((_DWORD)v15 != 1)
          {
            v65[1] = (v69[2] + v69[3] + v68[2] + v68[3] + 2) >> 2;
            if ((_DWORD)v15 != 2)
            {
              v65[2] = (v69[4] + v69[5] + v68[4] + v68[5] + 2) >> 2;
              if ((_DWORD)v15 != 3)
              {
                v65[3] = (v69[6] + v69[7] + v68[6] + v68[7] + 2) >> 2;
                if ((_DWORD)v15 != 4)
                {
                  v65[4] = (v69[8] + v69[9] + v68[8] + v68[9] + 2) >> 2;
                  if ((_DWORD)v15 != 5)
                  {
                    v65[5] = (v69[10] + v69[11] + v68[10] + v68[11] + 2) >> 2;
                    if ((_DWORD)v15 != 6)
                      v65[6] = (v69[12] + v69[13] + v68[12] + v68[13] + 2) >> 2;
                  }
                }
              }
            }
          }
          v70 = 0;
          v71 = v15;
          do
          {
            v65[v70] = *(_BYTE *)(v2 + v65[v70]);
            ++v70;
            --v71;
          }
          while (v71);
          result = (unsigned int *)memset(&v65[v15], v65[v81], (v16 - v15));
          ++v19;
        }
        while (v21 != v19);
      }
      else
      {
        do
        {
          result = (unsigned int *)memset((void *)(v20 + v16 * v19 + v15), *(unsigned __int8 *)(v20 + v16 * v19 + v81), (v16 - v15));
          ++v19;
        }
        while (v19 != v21);
      }
    }
  }
  else if (v19 < v21)
  {
    do
    {
      v56 = 2 * v19;
      if (2 * v19 >= v4)
        v56 = v4;
      v57 = (uint8x16_t *)(v10 + v56 * v5);
      v58 = (2 * v19) | 1;
      if (v58 >= v4)
        v58 = v4;
      v59 = (uint8x16_t *)(v10 + v58 * v5);
      v60 = v15;
      v61 = (int8x8_t *)(v20 + v16 * v19);
      if (v15 >= 8)
      {
        do
        {
          v60 -= 8;
          v62 = *v57++;
          v63 = v62;
          v64 = *v59++;
          *v61++ = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8(v63), v64), 2uLL);
        }
        while (v60 > 7);
      }
      for (; v60; --v60)
      {
        v61->i8[0] = (v57->u8[0] + v57->u8[1] + v59->u8[0] + v59->u8[1] + 2) >> 2;
        v61 = (int8x8_t *)((char *)v61 + 1);
        v57 = (uint8x16_t *)((char *)v57 + 2);
        v59 = (uint8x16_t *)((char *)v59 + 2);
      }
      result = (unsigned int *)memset((void *)(v20 + v16 * v19 + v15), *(unsigned __int8 *)(v20 + v16 * v19 + (v15 - 1)), (v16 - v15));
      ++v19;
    }
    while (v21 != v19);
  }
  return result;
}

unsigned int *rwppPyramid_DownscaleLuma10Unpacked(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint16x8_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint16x8_t *v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t *v34;
  unsigned int i;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  int8x8_t *v47;
  uint16x8_t *v48;
  uint16x8_t *v49;
  uint64_t v50;
  const __int16 *v51;
  const __int16 *v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  const __int16 *i16;
  const __int16 *v60;
  uint32x4_t v61;
  int v62;
  uint16x8_t *v63;
  unsigned int v64;
  uint16x8_t *v65;
  unsigned int v66;
  int8x8_t *v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  _BYTE *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int16x8x2_t v89;
  int16x8x2_t v90;
  int16x8x2_t v91;
  int8x16x2_t v92;
  int16x8x2_t v93;
  int8x16x4_t v94;

  v1 = (unsigned int *)*((_QWORD *)result + 5);
  v2 = *((_QWORD *)result + 6);
  v3 = v1[6];
  v4 = v1[7] - 1;
  v5 = v1[8];
  v6 = *(_QWORD *)&v1[2 * result[8]];
  v8 = v1 + 4;
  v7 = v1[4];
  v9 = v8[1] * v5;
  v86 = v6;
  v10 = v6 + v7 + v9;
  v11 = (_DWORD *)*((_QWORD *)result + 2);
  v12 = v3 >> 1;
  v13 = v11[6];
  v14 = v11[7];
  if (v13 >= v12)
    v15 = v12;
  else
    v15 = v13;
  v16 = v11[8];
  v17 = result[1];
  v18 = *result * v14;
  v19 = v18 / v17;
  v20 = *(_QWORD *)&v11[2 * result[8]];
  v21 = (v14 + v18) / v17;
  if (v2)
  {
    if (v19 < v21)
    {
      v88 = (v15 - 1);
      if (v15 >= 8)
      {
        v22 = (v15 & 7) - 1;
        v84 = v7 + 4 * v22 + v9 + 36;
        v85 = v22 + 9;
        v87 = (v15 & 7) - 1;
        v82 = (v22 + 1) & 0x1FFFFFFF0;
        v83 = v22 + 1;
        v80 = 4 * ((v22 + 1) & 0x1FFFFFFF8);
        v81 = (v22 + 1) & 0x1FFFFFFF8;
        v79 = 4 * v82;
        v23 = (int8x16_t)xmmword_1D33054E0;
        v24 = (int8x16_t)xmmword_1D33054D0;
        while (1)
        {
          v25 = 0;
          v26 = 2 * v19;
          if (2 * v19 >= v4)
            v26 = v4;
          v27 = v26 * v5;
          v28 = (uint16x8_t *)(v10 + v27);
          v29 = (2 * v19) | 1;
          if (v29 >= v4)
            v29 = v4;
          v30 = v29 * v5;
          v31 = (uint16x8_t *)(v10 + v30);
          v32 = v16 * v19;
          v33 = v20 + v32;
          v34 = (int8x8_t *)(v20 + v32);
          for (i = v15; i > 7; i -= 8)
          {
            v36 = *v28;
            v37 = v28[1];
            v28 += 2;
            v38 = *v31;
            v39 = v31[1];
            v31 += 2;
            v40 = v25;
            *v34++ = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v38), v36), 0xAuLL), (int32x4_t)vpadalq_u16(vpaddlq_u16(v39), v37), 0xAuLL));
            ++v25;
          }
          if (!i)
            goto LABEL_36;
          if (v87 < 7
            || ((v41 = v20 + v85 + v32 + 8 * v40,
                 v42 = v86 + 32 * v40 + v84 + v30,
                 (unint64_t)v34 < v86 + 32 * v40 + v84 + v27)
              ? (v43 = (unint64_t)v28 >= v41)
              : (v43 = 1),
                v43 ? (v44 = 0) : (v44 = 1),
                (unint64_t)v31 < v41 ? (v45 = (unint64_t)v34 >= v42) : (v45 = 1),
                !v45 || (v44 & 1) != 0))
          {
            v47 = v34;
            v48 = v28;
            v49 = v31;
          }
          else
          {
            if (v87 < 0xF)
            {
              v46 = 0;
LABEL_30:
              v47 = (int8x8_t *)((char *)v34 + v81);
              v48 = (uint16x8_t *)((char *)v28 + v80);
              v49 = (uint16x8_t *)((char *)v31 + v80);
              i -= v81;
              v50 = v46 - v81;
              do
              {
                v51 = &v28->i16[2 * v46];
                v89 = vld2q_s16(v51);
                v52 = &v31->i16[2 * v46];
                v53 = vaddl_u16(*(uint16x4_t *)v89.val[1].i8, *(uint16x4_t *)v89.val[0].i8);
                v92 = (int8x16x2_t)vld2q_s16(v52);
                v89.val[0] = (int16x8_t)vaddw_high_u16(vaddl_high_u16((uint16x8_t)v89.val[1], (uint16x8_t)v89.val[0]), (uint16x8_t)v92.val[0]);
                v89.val[1] = (int16x8_t)vaddw_u16(vaddw_u16(v53, *(uint16x4_t *)v92.val[0].i8), *(uint16x4_t *)v92.val[1].i8);
                v92.val[0] = (int8x16_t)vshrq_n_u32(vaddw_high_u16((uint32x4_t)v89.val[0], (uint16x8_t)v92.val[1]), 0xAuLL);
                v54 = vshrq_n_u32((uint32x4_t)v89.val[1], 0xAuLL);
                *(int8x8_t *)((char *)v34 + v46) = (int8x8_t)vqtbl2q_s8(v92, v23).u64[0];
                v46 += 8;
                v50 += 8;
              }
              while (v50);
              if (v83 == v81)
                goto LABEL_36;
              goto LABEL_35;
            }
            v57 = 0;
            v58 = v82;
            do
            {
              i16 = v28[v57 / 4].i16;
              v90 = vld2q_s16(i16);
              i16 += 16;
              v60 = v31[v57 / 4].i16;
              v91 = vld2q_s16(i16);
              *(int16x8x2_t *)v94.val[1].i8 = vld2q_s16(v60);
              v60 += 16;
              v61 = vaddl_u16(*(uint16x4_t *)v90.val[1].i8, *(uint16x4_t *)v90.val[0].i8);
              v93 = vld2q_s16(v60);
              v90.val[0] = (int16x8_t)vaddw_high_u16(vaddl_high_u16((uint16x8_t)v90.val[1], (uint16x8_t)v90.val[0]), (uint16x8_t)v94.val[1]);
              v90.val[1] = (int16x8_t)vaddw_high_u16(vaddl_high_u16((uint16x8_t)v91.val[1], (uint16x8_t)v91.val[0]), (uint16x8_t)v93.val[0]);
              v91.val[1] = (int16x8_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v91.val[1].i8, *(uint16x4_t *)v91.val[0].i8), *(uint16x4_t *)v93.val[0].i8), *(uint16x4_t *)v93.val[1].i8);
              v91.val[0] = (int16x8_t)vaddw_u16(vaddw_u16(v61, *(uint16x4_t *)v94.val[1].i8), *(uint16x4_t *)v94.val[2].i8);
              v94.val[1] = (int8x16_t)vshrq_n_u32(vaddw_high_u16((uint32x4_t)v90.val[0], (uint16x8_t)v94.val[2]), 0xAuLL);
              v94.val[3] = (int8x16_t)vshrq_n_u32(vaddw_high_u16((uint32x4_t)v90.val[1], (uint16x8_t)v93.val[1]), 0xAuLL);
              v94.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v91.val[0], 0xAuLL);
              v94.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v91.val[1], 0xAuLL);
              *(int8x16_t *)v34[v57 / 8].i8 = vqtbl4q_s8(v94, v24);
              v57 += 16;
              v58 -= 16;
            }
            while (v58);
            if (v83 == v82)
              goto LABEL_36;
            v46 = v82;
            if ((v83 & 8) != 0)
              goto LABEL_30;
            i -= v82;
            v49 = (uint16x8_t *)((char *)v31 + v79);
            v48 = (uint16x8_t *)((char *)v28 + v79);
            v47 = (int8x8_t *)((char *)v34 + v82);
          }
          do
          {
LABEL_35:
            v47->i8[0] = (v48->u16[1] + v48->u16[0] + v49->u16[0] + v49->u16[1]) >> 10;
            v47 = (int8x8_t *)((char *)v47 + 1);
            v48 = (uint16x8_t *)((char *)v48 + 4);
            v49 = (uint16x8_t *)((char *)v49 + 4);
            --i;
          }
          while (i);
LABEL_36:
          v55 = 0;
          v56 = v15;
          do
          {
            *(_BYTE *)(v33 + v55) = *(_BYTE *)(v2 + *(unsigned __int8 *)(v33 + v55));
            ++v55;
            --v56;
          }
          while (v56);
          result = (unsigned int *)memset((void *)(v33 + v15), *(unsigned __int8 *)(v33 + v88), (v16 - v15));
          ++v19;
          v24 = (int8x16_t)xmmword_1D33054D0;
          v23 = (int8x16_t)xmmword_1D33054E0;
          if (v21 == v19)
            return result;
        }
      }
      if ((_DWORD)v15)
      {
        do
        {
          v72 = (_BYTE *)(v20 + v16 * v19);
          v73 = 2 * v19;
          v74 = (2 * v19) | 1;
          if (v74 >= v4)
            v74 = v4;
          v75 = (unsigned __int16 *)(v10 + v74 * v5);
          if (v73 >= v4)
            v73 = v4;
          v76 = (unsigned __int16 *)(v10 + v73 * v5);
          *v72 = (v76[1] + *v76 + *v75 + v75[1]) >> 10;
          if ((_DWORD)v15 != 1)
          {
            v72[1] = (v76[3] + v76[2] + v75[2] + v75[3]) >> 10;
            if ((_DWORD)v15 != 2)
            {
              v72[2] = (v76[5] + v76[4] + v75[4] + v75[5]) >> 10;
              if ((_DWORD)v15 != 3)
              {
                v72[3] = (v76[7] + v76[6] + v75[6] + v75[7]) >> 10;
                if ((_DWORD)v15 != 4)
                {
                  v72[4] = (v76[9] + v76[8] + v75[8] + v75[9]) >> 10;
                  if ((_DWORD)v15 != 5)
                  {
                    v72[5] = (v76[11] + v76[10] + v75[10] + v75[11]) >> 10;
                    if ((_DWORD)v15 != 6)
                      v72[6] = (v76[13] + v76[12] + v75[12] + v75[13]) >> 10;
                  }
                }
              }
            }
          }
          v77 = 0;
          v78 = v15;
          do
          {
            v72[v77] = *(_BYTE *)(v2 + v72[v77]);
            ++v77;
            --v78;
          }
          while (v78);
          result = (unsigned int *)memset(&v72[v15], v72[v88], (v16 - v15));
          ++v19;
        }
        while (v21 != v19);
      }
      else
      {
        do
        {
          result = (unsigned int *)memset((void *)(v20 + v16 * v19 + v15), *(unsigned __int8 *)(v20 + v16 * v19 + v88), (v16 - v15));
          ++v19;
        }
        while (v19 != v21);
      }
    }
  }
  else if (v19 < v21)
  {
    do
    {
      v62 = 2 * v19;
      if (2 * v19 >= v4)
        v62 = v4;
      v63 = (uint16x8_t *)(v10 + v62 * v5);
      v64 = (2 * v19) | 1;
      if (v64 >= v4)
        v64 = v4;
      v65 = (uint16x8_t *)(v10 + v64 * v5);
      v66 = v15;
      v67 = (int8x8_t *)(v20 + v16 * v19);
      if (v15 >= 8)
      {
        do
        {
          v68 = *v63;
          v69 = v63[1];
          v63 += 2;
          v70 = *v65;
          v71 = v65[1];
          v65 += 2;
          v66 -= 8;
          *v67++ = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v70), v68), 0xAuLL), (int32x4_t)vpadalq_u16(vpaddlq_u16(v71), v69), 0xAuLL));
        }
        while (v66 > 7);
      }
      for (; v66; --v66)
      {
        v67->i8[0] = (v63->u16[1] + v63->u16[0] + v65->u16[0] + v65->u16[1]) >> 10;
        v67 = (int8x8_t *)((char *)v67 + 1);
        v63 = (uint16x8_t *)((char *)v63 + 4);
        v65 = (uint16x8_t *)((char *)v65 + 4);
      }
      result = (unsigned int *)memset((void *)(v20 + v16 * v19 + v15), *(unsigned __int8 *)(v20 + v16 * v19 + (v15 - 1)), (v16 - v15));
      ++v19;
    }
    while (v21 != v19);
  }
  return result;
}

unsigned int *rwppPyramid_DownscaleLuma10Packed(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int8x16_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int8x16_t *v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int8x16_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  size_t __len;

  v1 = (unsigned int *)*((_QWORD *)result + 5);
  v2 = *((_QWORD *)result + 6);
  v3 = v1[6];
  v4 = v1[7] - 1;
  v5 = v1[8];
  v6 = *(_QWORD *)&v1[2 * result[8]] + v1[4] + v1[5] * v5;
  v7 = (_DWORD *)*((_QWORD *)result + 2);
  v8 = v3 >> 1;
  v9 = v7[6];
  v10 = v7[7];
  if (v9 >= v8)
    v11 = v8;
  else
    v11 = v9;
  v12 = v7[8];
  __len = (v12 - v11);
  v13 = result[1];
  v14 = *result * v10;
  v15 = v14 / v13;
  v16 = *(_QWORD *)&v7[2 * result[8]];
  v17 = (v10 + v14) / v13;
  v18 = v16;
  if (v2)
  {
    if (v15 < v17)
    {
      v33 = (v11 - 1);
      if ((_DWORD)v11)
      {
        do
        {
          v19 = 2 * v15;
          if (2 * v15 >= v4)
            v19 = v4;
          v20 = (int8x16_t *)(v6 + v19 * v5);
          v21 = (2 * v15) | 1;
          if (v21 >= v4)
            v21 = v4;
          v22 = v16 + v12 * v15;
          rwppPyramid_DownscaleLuma10PackedSingleLine(v22, v20, (int8x16_t *)(v6 + v21 * v5), v11);
          v23 = 0;
          v24 = v11;
          do
          {
            *(_BYTE *)(v22 + v23) = *(_BYTE *)(v2 + *(unsigned __int8 *)(v22 + v23));
            ++v23;
            --v24;
          }
          while (v24);
          result = (unsigned int *)memset((void *)(v22 + v11), *(unsigned __int8 *)(v22 + v33), __len);
          ++v15;
          v16 = v18;
        }
        while (v17 != v15);
      }
      else
      {
        do
        {
          v25 = 2 * v15;
          if (2 * v15 >= v4)
            v25 = v4;
          v26 = (int8x16_t *)(v6 + v25 * v5);
          v27 = (2 * v15) | 1;
          if (v27 >= v4)
            v27 = v4;
          v28 = v16 + v12 * v15;
          rwppPyramid_DownscaleLuma10PackedSingleLine(v28, v26, (int8x16_t *)(v6 + v27 * v5), 0);
          result = (unsigned int *)memset((void *)(v28 + v11), *(unsigned __int8 *)(v28 + v33), __len);
          v16 = v18;
          ++v15;
        }
        while (v15 != v17);
      }
    }
  }
  else if (v15 < v17)
  {
    do
    {
      v29 = 2 * v15;
      if (2 * v15 >= v4)
        v29 = v4;
      v30 = (int8x16_t *)(v6 + v29 * v5);
      v31 = (2 * v15) | 1;
      if (v31 >= v4)
        v31 = v4;
      v32 = v16 + v12 * v15;
      rwppPyramid_DownscaleLuma10PackedSingleLine(v32, v30, (int8x16_t *)(v6 + v31 * v5), v11);
      result = (unsigned int *)memset((void *)(v32 + v11), *(unsigned __int8 *)(v32 + (v11 - 1)), __len);
      v16 = v18;
      ++v15;
    }
    while (v15 != v17);
  }
  return result;
}

uint64_t rwppPyramid_DownscaleLuma10PackedSingleLine(uint64_t result, int8x16_t *a2, int8x16_t *a3, unsigned int a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;

  if (a4 >= 6)
  {
    v7.i64[0] = 0x300000003;
    v7.i64[1] = 0x300000003;
    do
    {
      a4 -= 6;
      v8 = *a2++;
      v9 = v8;
      v10 = *a3++;
      *(int16x4_t *)&v4 = vmovn_s32(vaddq_s32((int32x4_t)vandq_s8(v10, v7), (int32x4_t)vandq_s8(v9, v7)));
      *(int16x4_t *)&v5 = vmovn_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v10, 0xAuLL), v7), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v9, 0xAuLL), v7)));
      *(int16x4_t *)&v6 = vmovn_s32(vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v10, 0x14uLL) & __PAIR128__(0xFFFFF3FFFFFFF3FFLL, 0xFFFFF3FFFFFFF3FFLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v9, 0x14uLL) & __PAIR128__(0xFFFFF3FFFFFFF3FFLL, 0xFFFFF3FFFFFFF3FFLL))));
      *(uint8x8_t *)v9.i8 = vqrshrn_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v4, (int8x16_t)xmmword_1D33054F0), (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v5, (int8x16_t)xmmword_1D3305500)), 4uLL);
      *(_DWORD *)result = v9.i32[0];
      *(_WORD *)(result + 4) = v9.i16[2];
      result += 6;
    }
    while (a4 > 5);
  }
  if (a4 >= 3)
  {
    do
    {
      a4 -= 3;
      *(_BYTE *)result = ((a2->i32[0] & 0x3FF)
                        + (((unsigned __int32)a2->i32[0] >> 10) & 0x3FF)
                        + (a3->i32[0] & 0x3FF)
                        + (((unsigned __int32)a3->i32[0] >> 10) & 0x3FF)
                        + 8) >> 4;
      *(_BYTE *)(result + 1) = ((a2->i32[1] & 0x3FF)
                              + (((unsigned __int32)a2->i32[0] >> 20) & 0x3FF)
                              + (((unsigned __int32)a3->i32[0] >> 20) & 0x3FF)
                              + (a3->i32[1] & 0x3FF)
                              + 8) >> 4;
      *(_BYTE *)(result + 2) = ((((unsigned __int32)a2->i32[1] >> 20) & 0x3FF)
                              + (((unsigned __int32)a2->i32[1] >> 10) & 0x3FF)
                              + (((unsigned __int32)a3->i32[1] >> 10) & 0x3FF)
                              + (((unsigned __int32)a3->i32[1] >> 20) & 0x3FF)
                              + 8) >> 4;
      a2 = (int8x16_t *)((char *)a2 + 8);
      a3 = (int8x16_t *)((char *)a3 + 8);
      result += 3;
    }
    while (a4 > 2);
  }
  if (a4)
  {
    *(_BYTE *)result = ((a2->i32[0] & 0x3FF)
                      + (((unsigned __int32)a2->i32[0] >> 10) & 0x3FF)
                      + (a3->i32[0] & 0x3FF)
                      + (((unsigned __int32)a3->i32[0] >> 10) & 0x3FF)
                      + 8) >> 4;
    if (a4 == 2)
      *(_BYTE *)(result + 1) = ((a2->i32[1] & 0x3FF)
                              + (((unsigned __int32)a2->i32[0] >> 20) & 0x3FF)
                              + (((unsigned __int32)a3->i32[0] >> 20) & 0x3FF)
                              + (a3->i32[1] & 0x3FF)
                              + 8) >> 4;
  }
  return result;
}

void rwppPyramid_accumSparseHistogram(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint8x16_t *v14;
  unsigned int i;
  uint8x16_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  int j;
  unsigned int v24;

  v1 = a1 + 56;
  v2 = *(_DWORD **)(a1 + 16);
  v4 = v2[6];
  v3 = v2[7];
  v5 = v2[8];
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)a1 * v3;
  v8 = (v7 / v6 + 1) & 0xFFFFFFFE;
  v9 = (v3 + v7) / v6;
  v10 = *(_QWORD *)&v2[2 * *(unsigned int *)(a1 + 32)];
  bzero((void *)(a1 + 56), 0x400uLL);
  if (v8 < v9)
  {
    if (v4 >= 0x10)
    {
      do
      {
        v14 = (uint8x16_t *)(v10 + v8 * v5);
        for (i = v4; i > 0xF; i -= 16)
        {
          v16 = *v14++;
          v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
          v18 = vmovl_high_u16(v17);
          v19 = vmovl_u16(*(uint16x4_t *)v17.i8);
          ++*(_DWORD *)(v1 + 4 * v19.u32[0]);
          ++*(_DWORD *)(v1 + 4 * v19.u32[1]);
          ++*(_DWORD *)(v1 + 4 * v19.u32[2]);
          ++*(_DWORD *)(v1 + 4 * v19.u32[3]);
          ++*(_DWORD *)(v1 + 4 * v18.u32[0]);
          ++*(_DWORD *)(v1 + 4 * v18.u32[1]);
          v20 = vmovl_high_u8(v16);
          ++*(_DWORD *)(v1 + 4 * v18.u32[2]);
          v21 = vmovl_u16(*(uint16x4_t *)v20.i8);
          ++*(_DWORD *)(v1 + 4 * v18.u32[3]);
          ++*(_DWORD *)(v1 + 4 * v21.u32[0]);
          v22 = vmovl_high_u16(v20);
          ++*(_DWORD *)(v1 + 4 * v21.u32[1]);
          ++*(_DWORD *)(v1 + 4 * v21.u32[2]);
          ++*(_DWORD *)(v1 + 4 * v21.u32[3]);
          ++*(_DWORD *)(v1 + 4 * v22.u32[0]);
          ++*(_DWORD *)(v1 + 4 * v22.u32[1]);
          ++*(_DWORD *)(v1 + 4 * v22.u32[2]);
          ++*(_DWORD *)(v1 + 4 * v22.u32[3]);
        }
        if (i)
        {
          for (j = 0; j != i; ++j)
          {
            v24 = v14->u8[0];
            v14 = (uint8x16_t *)((char *)v14 + 1);
            ++*(_DWORD *)(v1 + 4 * v24);
          }
        }
        v8 += 2;
      }
      while (v8 < v9);
    }
    else if (v4)
    {
      do
      {
        v11 = (unsigned __int8 *)(v10 + v8 * v5);
        v12 = v4;
        do
        {
          v13 = *v11++;
          ++*(_DWORD *)(v1 + 4 * v13);
          --v12;
        }
        while (v12);
        v8 += 2;
      }
      while (v8 < v9);
    }
  }
}

void rwppPyramid_finalizeSparseHistogram(uint64_t a1, double a2)
{
  unint64_t v3;
  uint32x4_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16x4_t v29;

  v3 = *(unsigned int *)(a1 + 52);
  v4 = (uint32x4_t *)(a1 + 104);
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == 1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        v6 += v4->u32[v5];
        v4->i32[v5++] = v6;
      }
      while (v5 != 256);
    }
    else
    {
      v7 = v3 & 0xFFFFFFFE;
      v8 = v3 - v7;
      if (v3 == v7)
      {
        v6 = 0;
        v9 = a1;
        do
        {
          v10 = 0;
          v11 = v9;
          v12 = v7;
          do
          {
            v6 += *(_DWORD *)(v11 + 104);
            v10 += *(_DWORD *)(v11 + 1192);
            v11 += 2176;
            v12 -= 2;
          }
          while (v12);
          v6 += v10;
          v4->i32[v8++] = v6;
          v9 += 4;
        }
        while (v8 != 256);
      }
      else
      {
        v13 = 0;
        v6 = 0;
        v14 = (2176 * (v3 >> 1)) | 0x68;
        v15 = a1;
        do
        {
          v16 = 0;
          v17 = v7;
          v18 = v15;
          do
          {
            v6 += *(_DWORD *)(v18 + 104);
            v16 += *(_DWORD *)(v18 + 1192);
            v18 += 2176;
            v17 -= 2;
          }
          while (v17);
          v6 += v16;
          v19 = v8;
          v20 = v14;
          do
          {
            v6 += *(_DWORD *)(v15 + v20);
            v20 += 1088;
            --v19;
          }
          while (v19);
          v4->i32[v13++] = v6;
          v15 += 4;
        }
        while (v13 != 256);
      }
    }
    *(float *)&a2 = (float)v6;
  }
  else
  {
    bzero((void *)(a1 + 104), 0x400uLL);
    LODWORD(a2) = 0;
  }
  v21 = a1 + 136244;
  *(float *)&a2 = 255.0 / *(float *)&a2;
  if (a1 + 136244 >= (unint64_t)(a1 + 1128) || (unint64_t)v4 >= a1 + 136500)
  {
    v23 = 0;
    v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    do
    {
      v25.i64[0] = 0x3F0000003F000000;
      v25.i64[1] = 0x3F0000003F000000;
      v26.i64[0] = 0x3F0000003F000000;
      v26.i64[1] = 0x3F0000003F000000;
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      v29.val[2] = (int8x16_t)vcvtq_u32_f32(vrndmq_f32(vmlaq_f32(v25, v24, vcvtq_f32_u32(v4[2]))));
      v29.val[1] = (int8x16_t)vcvtq_u32_f32(vrndmq_f32(vmlaq_f32(v26, v24, vcvtq_f32_u32(v4[1]))));
      v29.val[0] = (int8x16_t)vcvtq_u32_f32(vrndmq_f32(vmlaq_f32(v27, v24, vcvtq_f32_u32(*v4))));
      v29.val[3] = (int8x16_t)vcvtq_u32_f32(vrndmq_f32(vmlaq_f32(v28, v24, vcvtq_f32_u32(v4[3]))));
      *(int8x16_t *)(v21 + v23) = vqtbl4q_s8(v29, (int8x16_t)xmmword_1D33054D0);
      v23 += 16;
      v4 += 4;
    }
    while (v23 != 256);
  }
  else
  {
    for (i = 0; i != 256; ++i)
      *(_BYTE *)(v21 + i) = vcvtms_s32_f32((float)((float)v4->u32[i] * *(float *)&a2) + 0.5);
  }
}

uint64_t rwppPyramid_applyHistogram(uint64_t result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  uint8x16_t *v13;
  unsigned int v14;
  uint16x8_t v15;
  uint32x4_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint64_t v21;
  int i;

  v1 = *(_DWORD **)(result + 16);
  v2 = v1[7];
  v3 = *(_DWORD *)(result + 4);
  v4 = *(_DWORD *)result * v2;
  v5 = v4 / v3;
  v6 = (v2 + v4) / v3;
  if (v4 / v3 < v6)
  {
    v7 = *(_QWORD *)(result + 48);
    v8 = v1[6];
    v9 = v1[8];
    v10 = *(_QWORD *)&v1[2 * *(unsigned int *)(result + 32)];
    if (v8 >= 0x10)
    {
      do
      {
        v13 = (uint8x16_t *)(v10 + (v9 * v5));
        v14 = v8;
        do
        {
          v14 -= 16;
          v15 = vmovl_high_u8(*v13);
          v16 = vmovl_high_u16(v15);
          v17 = vmovl_u8(*(uint8x8_t *)v13->i8);
          v18 = vmovl_high_u16(v17);
          v19 = vmovl_u16(*(uint16x4_t *)v15.i8);
          v20 = vmovl_u16(*(uint16x4_t *)v17.i8);
          result = v7 + v20.u32[1];
          v20.i8[0] = *(_BYTE *)(v7 + v20.u32[0]);
          v20.i8[1] = *(_BYTE *)result;
          v20.i8[2] = *(_BYTE *)(v7 + v20.u32[2]);
          v20.i8[3] = *(_BYTE *)(v7 + v20.u32[3]);
          v20.i8[4] = *(_BYTE *)(v7 + v18.u32[0]);
          v20.i8[5] = *(_BYTE *)(v7 + v18.u32[1]);
          v20.i8[6] = *(_BYTE *)(v7 + v18.u32[2]);
          v20.i8[7] = *(_BYTE *)(v7 + v18.u32[3]);
          LOBYTE(v21) = *(_BYTE *)(v7 + v19.u32[0]);
          BYTE1(v21) = *(_BYTE *)(v7 + v19.u32[1]);
          BYTE2(v21) = *(_BYTE *)(v7 + v19.u32[2]);
          BYTE3(v21) = *(_BYTE *)(v7 + v19.u32[3]);
          BYTE4(v21) = *(_BYTE *)(v7 + v16.u32[0]);
          BYTE5(v21) = *(_BYTE *)(v7 + v16.u32[1]);
          BYTE6(v21) = *(_BYTE *)(v7 + v16.u32[2]);
          v13->i64[0] = v20.i64[0];
          HIBYTE(v21) = *(_BYTE *)(v7 + v16.u32[3]);
          v13->i64[1] = v21;
          ++v13;
        }
        while (v14 > 0xF);
        if (v14)
        {
          for (i = 0; i != v14; ++i)
          {
            v13->i8[0] = *(_BYTE *)(v7 + v13->u8[0]);
            v13 = (uint8x16_t *)((char *)v13 + 1);
          }
        }
        ++v5;
      }
      while (v6 != v5);
    }
    else if (v8)
    {
      do
      {
        v11 = (_BYTE *)(v10 + (v9 * v5));
        v12 = v8;
        do
        {
          *v11 = *(_BYTE *)(v7 + *v11);
          ++v11;
          --v12;
        }
        while (v12);
        ++v5;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_1D3281E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t isValidCastType(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = isValidCastType_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&isValidCastType_onceToken, &__block_literal_global_3);
  v3 = objc_msgSend((id)isValidCastType_validCastTypes, "containsObject:", v2);

  return v3;
}

void __isValidCastType_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("Standard"), CFSTR("Neutral"), CFSTR("BlushWarm"), CFSTR("GoldWarm"), CFSTR("TanWarm"), CFSTR("Cool"), CFSTR("NoFilter"), CFSTR("WarmAuthentic"), CFSTR("Colorful"), CFSTR("Earthy"), CFSTR("CloudCover"), CFSTR("UrbanCool"), CFSTR("DreamyHues"), CFSTR("StarkBW"), CFSTR("LongGray"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)isValidCastType_validCastTypes;
  isValidCastType_validCastTypes = v0;

}

uint64_t isSystemStyleCastType(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = isSystemStyleCastType_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&isSystemStyleCastType_onceToken, &__block_literal_global_1_0);
  v3 = objc_msgSend((id)isSystemStyleCastType_systemWideCasts, "containsObject:", v2);

  return v3;
}

void __isSystemStyleCastType_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("Neutral"), CFSTR("TanWarm"), CFSTR("BlushWarm"), CFSTR("GoldWarm"), CFSTR("Cool"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)isSystemStyleCastType_systemWideCasts;
  isSystemStyleCastType_systemWideCasts = v0;

}

uint64_t isValidTuningType(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = isValidTuningType_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&isValidTuningType_onceToken, &__block_literal_global_2);
  v3 = objc_msgSend((id)isValidTuningType_validTuningTypes, "containsObject:", v2);

  return v3;
}

void __isValidTuningType_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("DefaultParameters"), CFSTR("WYSIWYG"), CFSTR("UB"), CFSTR("DF"), CFSTR("DigitalFlash"), CFSTR("SWFR"), CFSTR("Video"), CFSTR("QuadraSFD"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)isValidTuningType_validTuningTypes;
  isValidTuningType_validTuningTypes = v0;

}

uint64_t SSRCastTypeEnumFromString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  if (SSRCastTypeEnumFromString_onceToken != -1)
    dispatch_once(&SSRCastTypeEnumFromString_onceToken, &__block_literal_global_3);
  objc_msgSend((id)SSRCastTypeEnumFromString_map, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2 || (v3 = v2, v4 = objc_msgSend(v2, "intValue"), (_DWORD)v4 == 16))
    SSRCastTypeEnumFromString_cold_1();
  v5 = v4;

  return v5;
}

uint64_t SSRTuningTypeEnumFromString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  if (SSRTuningTypeEnumFromString_onceToken != -1)
    dispatch_once(&SSRTuningTypeEnumFromString_onceToken, &__block_literal_global_22);
  objc_msgSend((id)SSRTuningTypeEnumFromString_map, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2 || (v3 = v2, v4 = objc_msgSend(v2, "intValue"), (_DWORD)v4 == 9))
    SSRTuningTypeEnumFromString_cold_1();
  v5 = v4;

  return v5;
}

uint64_t SSRSceneTypeEnumFromSemanticStyleSceneType(int a1)
{
  if ((a1 - 1) > 2)
    return 4;
  else
    return dword_1D3305510[a1 - 1];
}

uint64_t SSRStatsTypeEnumFromString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  if (SSRStatsTypeEnumFromString_onceToken != -1)
    dispatch_once(&SSRStatsTypeEnumFromString_onceToken, &__block_literal_global_24);
  objc_msgSend((id)SSRStatsTypeEnumFromString_map, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2 || (v3 = v2, v4 = objc_msgSend(v2, "intValue"), (_DWORD)v4 == 10))
    SSRStatsTypeEnumFromString_cold_1();
  v5 = v4;

  return v5;
}

id SSRStatsTypeStringFromEnum(int a1)
{
  id v2;
  uint64_t i;
  _QWORD v5[11];

  v5[10] = *MEMORY[0x1E0C80C00];
  v5[0] = CFSTR("ToneMappedImage");
  v5[1] = CFSTR("ToneMappedImagePersonSegmentBased");
  v5[2] = CFSTR("ToneMappedImageRedChannelSkinBased");
  v5[3] = CFSTR("ToneMappedImageGreenChannelSkinBased");
  v5[4] = CFSTR("ToneMappedImageBlueChannelSkinBased");
  v5[5] = CFSTR("LinearImage");
  v5[6] = CFSTR("LinearImagePersonSegmentBased");
  v5[7] = CFSTR("LinearGTCImage");
  v5[8] = CFSTR("ToneMappedImageSkinBased");
  v5[9] = CFSTR("LinearImageSkinBased");
  v2 = (id)v5[a1];
  for (i = 9; i != -1; --i)

  return v2;
}

id SSRDictionaryFromStats(uint64_t a1)
{
  void *v2;
  double v3;
  uint64_t v4;
  _DWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 0;
  v5 = (_DWORD *)(a1 + 10240);
  do
  {
    NSDictionaryFromGlobalStats(v5, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    SSRStatsTypeStringFromEnum(v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, v7);

    ++v4;
    v5 += 9;
  }
  while (v4 != 10);
  LODWORD(v3) = *(_DWORD *)(a1 + 10608);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("PeopleRatio"));

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id NSDictionaryFromGlobalStats(_DWORD *a1, double a2)
{
  void *v3;
  double v4;
  void *v5;
  double v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  double v16;
  void *v17;
  double v18;
  void *v19;
  void *v20;
  _QWORD v22[9];
  _QWORD v23[11];

  v23[9] = *MEMORY[0x1E0C80C00];
  v22[0] = CFSTR("highKey");
  LODWORD(a2) = *a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a2, CFSTR("highKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v3;
  v22[1] = CFSTR("p02");
  LODWORD(v4) = a1[1];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = v5;
  v22[2] = CFSTR("p10");
  LODWORD(v6) = a1[2];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v23[2] = v7;
  v22[3] = CFSTR("p25");
  LODWORD(v8) = a1[3];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v23[3] = v9;
  v22[4] = CFSTR("p50");
  LODWORD(v10) = a1[4];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v23[4] = v11;
  v22[5] = CFSTR("p75");
  LODWORD(v12) = a1[5];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v23[5] = v13;
  v22[6] = CFSTR("p98");
  LODWORD(v14) = a1[6];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v23[6] = v15;
  v22[7] = CFSTR("blackPoint");
  LODWORD(v16) = a1[7];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v23[7] = v17;
  v22[8] = CFSTR("whitePoint");
  LODWORD(v18) = a1[8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v23[8] = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 9);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

void SSRPopulateStatsWithDictionary(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  unsigned int v8;
  _DWORD *v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  int v19;
  int v20;
  void *v21;
  int v22;
  int v23;
  void *v24;
  int v25;
  int v26;
  void *v27;
  int v28;
  int v29;
  void *v30;
  int v31;
  int v32;
  void *v33;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v35 = a2;
  objc_msgSend(v35, "allKeys");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v42;
    v33 = v2;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v42 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
        if ((objc_msgSend(v7, "isEqual:", CFSTR("PeopleRatio")) & 1) == 0)
        {
          v8 = SSRStatsTypeEnumFromString(v7);
          if (v8 <= 9)
          {
            v9 = (_DWORD *)(a1 + 36 * v8);
            objc_msgSend(v35, "objectForKeyedSubscript:", v7);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("highKey"));
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "floatValue");
            v39 = v11;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("p02"));
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "floatValue");
            v13 = v12;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("p10"));
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "floatValue");
            v15 = v14;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("p25"));
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "floatValue");
            v17 = v16;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("p50"));
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "floatValue");
            v20 = v19;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("p75"));
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "floatValue");
            v23 = v22;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("p98"));
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "floatValue");
            v26 = v25;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("blackPoint"));
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "floatValue");
            v29 = v28;
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("whitePoint"));
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "floatValue");
            v32 = v31;

            v2 = v33;
            *v9 = v39;
            v9[1] = v13;
            v9[2] = v15;
            v9[3] = v17;
            v9[4] = v20;
            v9[5] = v23;
            v9[6] = v26;
            v9[7] = v29;
            v9[8] = v32;

          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    }
    while (v4);
  }

}

{
  void *v3;
  void *v4;
  int v5;
  id v6;

  v6 = a2;
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PeopleRatio"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PeopleRatio"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "floatValue");
    *(_DWORD *)(a1 + 10608) = v5;

  }
  SSRPopulateStatsWithDictionary(a1 + 10240, v6);

}

void SSRAttachColorManagementMetadata(void *a1, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  unsigned int v9;
  CMISmartStyleColorManagementMetadata *value;

  v7 = a1;
  value = objc_alloc_init(CMISmartStyleColorManagementMetadata);
  -[CMISmartStyleColorManagementMetadata setYccMatrixType:](value, "setYccMatrixType:", CMIGetPixelBufferYCCMatrix(a2));
  v8 = CMIGetPixelBufferColorSpace(a2);
  -[CMISmartStyleColorManagementMetadata setColorSpace:](value, "setColorSpace:", v8, v9);
  -[CMISmartStyleColorManagementMetadata setCscYCCConversionEnabled:](value, "setCscYCCConversionEnabled:", a3);
  -[CMISmartStyleColorManagementMetadata setCscTransferFunctionEnabled:](value, "setCscTransferFunctionEnabled:", a4);
  -[CMISmartStyleColorManagementMetadata yccMatrixType](value, "yccMatrixType");
  -[CMISmartStyleColorManagementMetadata yccMatrixType](value, "yccMatrixType");
  -[CMISmartStyleColorManagementMetadata colorSpace](value, "colorSpace");
  -[CMISmartStyleColorManagementMetadata colorSpace](value, "colorSpace");
  -[CMISmartStyleColorManagementMetadata colorSpace](value, "colorSpace");
  -[CMISmartStyleColorManagementMetadata colorSpace](value, "colorSpace");
  objc_setAssociatedObject(v7, "SmartStyleColorManagementMetadata", value, (void *)0x301);

}

id SSRGetColorManagementMetadata(void *a1)
{
  return objc_getAssociatedObject(a1, "SmartStyleColorManagementMetadata");
}

uint64_t bfpn_spatial_mean(uint64_t *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t i;
  uint64_t result;

  if (a1 && (v2 = *a1) != 0)
  {
    v3 = a1[2];
    v4 = a1[3];
    if (v4 < 4 * v3)
    {
      FigDebugAssert3();
      return 4294967277;
    }
    else if (a2)
    {
      v5 = a1[1];
      if (v5)
      {
        v6 = 4 * (v4 >> 2);
        v7 = 0.0;
        v8 = 0.0;
        do
        {
          if (v3)
          {
            for (i = 0; i != v3; ++i)
            {
              v7 = v7 + 1.0;
              v8 = v8 + (float)((float)(1.0 / v7) * (float)(*(float *)(v2 + 4 * i) - v8));
            }
          }
          v2 += v6;
          --v5;
        }
        while (v5);
      }
      else
      {
        v8 = 0.0;
      }
      result = 0;
      *a2 = v8;
    }
    else
    {
      FigDebugAssert3();
      return 4294967266;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967281;
  }
  return result;
}

id createCMIInferenceDeviceEspressoV1()
{
  return (id)objc_opt_new();
}

void rwppCnrDet_execute(unsigned int *a1, unsigned int a2, unsigned int a3, void *a4, void *a5)
{
  unsigned int *v9;
  id v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const __int16 *v35;
  int32x4_t v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const __int16 *v41;
  unsigned __int128 v42;
  unsigned __int128 v43;
  unsigned __int16 *v44;
  uint64_t v45;
  int v46;
  id v47;

  v9 = a1 + 34135;
  v47 = a4;
  v10 = a5;
  v11 = 1;
  if (a3 > 1)
  {
    v12 = v47;
    goto LABEL_6;
  }
  v12 = v47;
  if (!v47 || (v11 = *a1) != 0)
  {
LABEL_6:
    v13 = (uint64_t)&a1[18 * a3 + 1128];
    v14 = a1[1];
    v15 = a1[2];
    if (v11 >= 2)
    {
      v16 = v11 & 0xFFFFFFFE;
      v17 = v16;
      v18 = a1;
      do
      {
        v18[19] = v15;
        v18[20] = a2;
        v18[292] = a2;
        *((_QWORD *)v18 + 8) = v13;
        *((_QWORD *)v18 + 144) = v13;
        v18[290] = v14;
        v18[18] = v14;
        v18[291] = v15;
        v18 += 544;
        v17 -= 2;
      }
      while (v17);
      if (v16 == v11)
        goto LABEL_13;
    }
    else
    {
      v16 = 0;
    }
    v19 = &a1[272 * v16 + 20];
    v20 = v11 - v16;
    do
    {
      *(v19 - 1) = v15;
      *v19 = a2;
      *((_QWORD *)v19 - 2) = v13;
      *(v19 - 2) = v14;
      v19 += 272;
      --v20;
    }
    while (v20);
  }
LABEL_13:
  rwppRunThreads((uint64_t)a1, (void (__cdecl *)(void *))rwppCnrDet_applyBoxFilter, v11, v12, v10);
  rwppRunThreads((uint64_t)a1, (void (__cdecl *)(void *))rwppCnrDet_computeCornerResponses, v11, v47, v10);
  rwppRunThreads((uint64_t)a1, (void (__cdecl *)(void *))rwppCnrDet_pickBestCorners, v11, v47, v10);
  v23 = a1[2] * a1[1];
  if (a2)
  {
    if ((_DWORD)v23)
    {
      if (v23 >= 0x11)
      {
        v34 = (*((_BYTE *)a1 + 8) * *((_BYTE *)a1 + 4)) & 0xF;
        if (((*((_BYTE *)a1 + 8) * *((_BYTE *)a1 + 4)) & 0xF) == 0)
          v34 = 16;
        v24 = v23 - v34;
        v35 = (const __int16 *)(a1 + 34147);
        v36 = 0uLL;
        v37 = v24;
        v38 = 0uLL;
        v39 = 0uLL;
        v40 = 0uLL;
        do
        {
          v41 = v35 - 24;
          v42 = (unsigned __int128)vld3q_s16(v41);
          v43 = (unsigned __int128)vld3q_s16(v35);
          v38 = (int32x4_t)vaddw_high_u16((uint32x4_t)v38, (uint16x8_t)v42);
          v36 = (int32x4_t)vaddw_u16((uint32x4_t)v36, *(uint16x4_t *)&v42);
          v40 = (int32x4_t)vaddw_high_u16((uint32x4_t)v40, (uint16x8_t)v43);
          v39 = (int32x4_t)vaddw_u16((uint32x4_t)v39, *(uint16x4_t *)&v43);
          v35 += 48;
          v37 -= 16;
        }
        while (v37);
        v25 = vaddvq_s32(vaddq_s32(vaddq_s32(v39, v36), vaddq_s32(v40, v38)));
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v44 = (unsigned __int16 *)a1 + 3 * v24 + 68270;
      v45 = v23 - v24;
      do
      {
        v46 = *v44;
        v44 += 3;
        v25 += v46;
        --v45;
      }
      while (v45);
    }
    else
    {
      v25 = 0;
    }
  }
  else
  {
    v26 = &a1[2562 * a3];
    v27 = v26 + 1272;
    if ((_DWORD)v23)
    {
      v28 = 0;
      v25 = 0;
      v29 = v26 + 1274;
      v30 = v26 + 3322;
      v31 = v9;
      do
      {
        v32 = *(unsigned __int16 *)v31;
        if (*(_WORD *)v31)
        {
          LOWORD(v21) = *((_WORD *)v31 - 2);
          *(float *)&v21 = (float)v21;
          v33 = 2 * v28;
          v29[v33] = v21;
          LOWORD(v22) = *((_WORD *)v31 - 1);
          v22 = (float)LODWORD(v22);
          *((float *)&v21 + 1) = v22;
          *(_QWORD *)&v29[v33] = v21;
          *((_WORD *)v30 + v28) = v32;
          v25 += v32;
          ++v28;
        }
        v31 = (unsigned int *)((char *)v31 + 6);
        --v23;
      }
      while (v23);
    }
    else
    {
      v25 = 0;
      v28 = 0;
    }
    *v27 = v28;
  }
  v9[1535] = v25;

}

uint64_t rwppCnrDet_applyBoxFilter(uint64_t result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int16x8_t v16;
  __int16 v17;
  _BYTE *v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint8x8_t *v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  int16x8_t v32;
  unsigned int v33;
  __int16 v34;
  __int16 v35;

  v1 = *(_DWORD **)(result + 16);
  v2 = v1[7];
  v3 = *(_DWORD *)(result + 4);
  v4 = *(_DWORD *)result * v2;
  v5 = v4 / v3;
  v6 = (v2 + v4) / v3;
  if (v5 < v6)
  {
    v7 = (v2 - 1);
    v8 = v1[8];
    v9 = *(_QWORD *)&v1[2 * *(unsigned int *)(result + 32)];
    v10 = *(_QWORD *)(*(_QWORD *)(result + 8) + 136512);
    v11 = *(_DWORD *)(*(_QWORD *)(result + 8) + 136504);
    v12 = v1[6];
    v13 = v12 - 2;
    v14 = (v12 - 1);
    v15 = ((v12 - 10) & 0xFFFFFFF8) + 9;
    result = 28;
    v16.i64[0] = 0x1C001C001C001CLL;
    v16.i64[1] = 0x1C001C001C001CLL;
    do
    {
      v18 = (_BYTE *)(v10 + (v11 * v5));
      v19 = v5 - 1;
      if (!(_DWORD)v5)
        v19 = 0;
      v20 = (unsigned __int8 *)(v9 + (v19 * v8));
      v21 = (unsigned __int8 *)(v9 + (v8 * v5));
      v22 = v5 + 1;
      if (v5 >= v7)
        v23 = v7;
      else
        v23 = v5 + 1;
      v24 = (v23 * v8);
      v25 = v9 + v24;
      *v18 = (unsigned __int16)(28
                              * (v21[1]
                               + v20[1]
                               + *(unsigned __int8 *)(v9 + v24 + 1)
                               + 2 * (*v21 + *v20 + *(unsigned __int8 *)(v9 + v24)))
                              + 112) >> 8;
      if (v13 < 8)
      {
        v33 = 1;
        v28 = v13;
      }
      else
      {
        v26 = (uint8x8_t *)(v9 + 2 + v24);
        v27 = 1;
        v28 = v13;
        do
        {
          v28 -= 8;
          v29 = *(uint8x8_t *)((char *)v26 - 2);
          v30 = *(uint8x8_t *)((char *)v26 - 1);
          v31 = *v26++;
          v32.i64[0] = 0x70007000700070;
          v32.i64[1] = 0x70007000700070;
          *(uint8x8_t *)&v18[v27] = vqshrn_n_u16((uint16x8_t)vmlaq_s16(v32, (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)&v20[v27 - 1], *(uint8x8_t *)&v20[v27]), *(uint8x8_t *)&v20[v27 + 1]), *(uint8x8_t *)&v21[v27 - 1]), *(uint8x8_t *)&v21[v27]), *(uint8x8_t *)&v21[v27 + 1]), v29), v30), v31),
                                                    v16),
                                      8uLL);
          v27 += 8;
        }
        while (v28 > 7);
        v33 = v15;
      }
      v34 = v21[v33 - 1] + v20[v33 - 1] + *(unsigned __int8 *)(v25 + v33 - 1);
      v35 = v21[v33] + v20[v33] + *(unsigned __int8 *)(v25 + v33);
      if (v28)
      {
        do
        {
          v17 = v35;
          v35 = v21[v33 + 1] + v20[v33 + 1] + *(unsigned __int8 *)(v25 + v33 + 1);
          v18[v33] = (unsigned __int16)(28 * (v17 + v34 + v35) + 112) >> 8;
          v34 = v17;
          ++v33;
          --v28;
        }
        while (v28);
      }
      else
      {
        v17 = v21[v33 - 1] + v20[v33 - 1] + *(unsigned __int8 *)(v25 + v33 - 1);
      }
      v18[v14] = (unsigned __int16)(28 * (v17 + 2 * v35) + 112) >> 8;
      v5 = v22;
    }
    while (v6 != (_DWORD)v22);
  }
  return result;
}

uint64_t rwppCnrDet_computeCornerResponses(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x8_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_DWORD *)(v1 + 28);
  v3 = *(_DWORD *)(result + 4);
  v4 = *(_DWORD *)result * v2;
  v5 = v4 / v3;
  v6 = (v2 + v4) / v3;
  if (v5 < v6)
  {
    v7 = *(_QWORD *)(result + 8) + 136504;
    v8 = *(_DWORD *)v7;
    v9 = *(unsigned int *)(v1 + 24);
    v10 = (v2 - 4);
    v11 = (2 * *(_DWORD *)v7);
    v12 = *(_DWORD *)(*(_QWORD *)(result + 8) + 136520);
    v13 = (3 * *(_DWORD *)v7);
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    while (1)
    {
      v15 = *(_QWORD *)(v7 + 24) + (v12 * v5);
      if (v5 >= 3 && v5 <= v10)
        break;
      if ((_DWORD)v9)
      {
        if (v9 >= 0x10)
        {
          v42 = 0;
          v43 = v9 & 0xFFFFFFF0;
          do
          {
            v44 = (_OWORD *)(v15 + 2 * v42);
            *v44 = v14;
            v44[1] = v14;
            v42 += 16;
            v43 -= 16;
          }
          while (v43);
          result = v9 & 0xFFFFFFF0;
          v35 = result;
          if (result == v9)
            goto LABEL_4;
        }
        else
        {
          v35 = 0;
        }
        v45 = v9 - v35;
        do
        {
          *(_WORD *)(v15 + 2 * v35++) = -1;
          --v45;
        }
        while (v45);
      }
LABEL_4:
      if (v6 == (_DWORD)++v5)
        return result;
    }
    *(_DWORD *)v15 = -1;
    v16 = *(_QWORD *)(v7 + 8) + (v8 * v5);
    v17 = v16 - 3;
    v18 = v16 + 3;
    v19 = v16 - v13;
    *(_WORD *)(v15 + 4) = -1;
    v20 = v16 + v13;
    v21 = v16 + v11 - 2;
    v22 = v16 + v11 + 2;
    v23 = v16 - v11 + 2;
    v24 = v16 - v11 - 2;
    if ((v9 - 6) < 8)
    {
      v34 = 3;
      v26 = v9 - 6;
      if ((_DWORD)v9 == 6)
      {
LABEL_3:
        *(_WORD *)(v15 + 2 * (v9 - 3)) = -1;
        *(_WORD *)(v15 + 2 * (v9 - 2)) = -1;
        *(_WORD *)(v15 + 2 * (v9 - 1)) = -1;
        goto LABEL_4;
      }
    }
    else
    {
      v25 = 3;
      v26 = v9 - 6;
      do
      {
        v26 -= 8;
        v27 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)(v16 + v25), 1uLL);
        v28 = vsubq_s16(v27, (int16x8_t)vaddl_u8(*(uint8x8_t *)(v17 + v25), *(uint8x8_t *)(v18 + v25)));
        v29 = vsubq_s16(v27, (int16x8_t)vaddl_u8(*(uint8x8_t *)(v19 + v25), *(uint8x8_t *)(v20 + v25)));
        v30 = vshrq_n_s16(vaddq_s16(v29, v28), 4uLL);
        v31 = vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v29.i8);
        v32 = vmull_high_s16(v28, v29);
        v33 = vsubq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)(v21 + v25), *(uint8x8_t *)(v23 + v25)), (int16x8_t)vaddl_u8(*(uint8x8_t *)(v22 + v25), *(uint8x8_t *)(v24 + v25)));
        result = 2 * v25;
        *(int16x8_t *)(v15 + 2 * v25) = vshrn_high_n_s32(vshrn_n_s32(vmlsl_s16(vmlsl_s16(v31, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8), 9uLL), vmlsl_high_s16(vmlsl_high_s16(v32, v30, v30), v33, v33), 9uLL);
        v25 += 8;
      }
      while (v26 > 7);
      v34 = ((v9 - 14) & 0xFFFFFFF8) + 11;
      if (!v26)
        goto LABEL_3;
    }
    do
    {
      v36 = 2 * *(unsigned __int8 *)(v16 + v34);
      v37 = v36 - (*(unsigned __int8 *)(v17 + v34) + *(unsigned __int8 *)(v18 + v34));
      v38 = v36 - (*(unsigned __int8 *)(v19 + v34) + *(unsigned __int8 *)(v20 + v34));
      v40 = *(unsigned __int8 *)(v21 + v34)
          + *(unsigned __int8 *)(v23 + v34)
          - (*(unsigned __int8 *)(v22 + v34)
           + *(unsigned __int8 *)(v24 + v34));
      v39 = (int)(v38 + v37 + (((v38 + v37) >> 27) & 0xF)) >> 4;
      v41 = v38 * v37 - v39 * v39 - v40 * v40;
      result = (v41 + (v41 < 0 ? 0x1FF : 0)) >> 9;
      *(_WORD *)(v15 + 2 * v34++) = result;
      --v26;
    }
    while (v26);
    goto LABEL_3;
  }
  return result;
}

uint64_t rwppCnrDet_pickBestCorners(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  _WORD *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int16x8_t v32;
  uint64_t v33;
  int16x8_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  unsigned int v38;
  signed int v39;
  uint64_t v40;
  uint64_t v41;
  signed int v42;
  signed int v43;
  signed int v44;
  signed int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;

  v1 = *(_DWORD *)(result + 28);
  v2 = *(_DWORD *)(result + 4);
  v3 = *(_DWORD *)result * v1;
  v4 = v3 / v2;
  v69 = v1;
  v67 = (v1 + v3) / v2;
  if (v3 / v2 < v67)
  {
    v5 = *(unsigned int *)(result + 24);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(result + 16);
      v8 = *(_DWORD *)(v6 + 16);
      v71 = *(_DWORD *)(v7 + 24) - 2 * v8;
      v9 = *(_DWORD *)(v7 + 28) - 2 * v8;
      v10 = *(_QWORD *)(v6 + 136528);
      v11 = (unint64_t)*(unsigned int *)(v6 + 136520) >> 1;
      result = -(uint64_t)v11;
      v70 = v4 * v9;
      v72 = v6;
      v66 = v9;
      do
      {
        v12 = v4 * v9 / v69 + v8;
        v13 = v4 * v5;
        v14 = v4 + 1;
        v15 = v14 * v9 / v69 + v8;
        v68 = v14;
        if (v12 < v15)
        {
          v16 = 0;
          do
          {
            v21 = v16;
            v22 = v71 * (int)v16++ / v5 + v8;
            v23 = v71 * (int)v16 / v5 + v8;
            if (v23 - v22 < 8)
            {
              if (v23 <= v22)
              {
                v17 = 0;
                v18 = 0;
                v19 = 0;
              }
              else
              {
                v19 = 0;
                v18 = 0;
                v17 = 0;
                v46 = v8 + v70 / v69;
                v47 = 1;
                do
                {
                  v48 = v10 + 2 * (v11 * v46);
                  v49 = v48 - 2 * v11;
                  v50 = v48 + 2 * v11;
                  v51 = v22;
                  do
                  {
                    v53 = *(__int16 *)(v48 + 2 * v51);
                    if (v47 > v53)
                    {
                      v52 = v51 + 1;
                    }
                    else
                    {
                      v54 = 2 * (int)v51 - 2;
                      v55 = *(__int16 *)(v49 + v54);
                      if (v55 <= v47)
                        v55 = v47;
                      v52 = v51 + 1;
                      if (v55 <= *(__int16 *)(v49 + 2 * (int)v51))
                        v55 = *(__int16 *)(v49 + 2 * (int)v51);
                      if (v55 <= *(__int16 *)(v49 + 2 * (int)v52))
                        v55 = *(__int16 *)(v49 + 2 * (int)v52);
                      if (v55 <= *(__int16 *)(v48 + v54))
                        v55 = *(__int16 *)(v48 + v54);
                      v56 = *(__int16 *)(v50 + v54);
                      if (v55 <= *(__int16 *)(v48 + 2 * (int)v52))
                        v55 = *(__int16 *)(v48 + 2 * (int)v52);
                      if (v55 > v56)
                        v56 = v55;
                      v57 = *(__int16 *)(v50 + 2 * (int)v51);
                      if (v56 > v57)
                        v57 = v56;
                      if (v57 <= *(__int16 *)(v50 + 2 * (int)v52))
                        v57 = *(__int16 *)(v50 + 2 * (int)v52);
                      if (v57 <= v53)
                      {
                        v47 = v53 + 1;
                        v17 = v46;
                        v18 = v51;
                        v19 = *(_WORD *)(v48 + 2 * v51);
                      }
                    }
                    v51 = v52;
                  }
                  while (v52 < v23);
                  ++v46;
                }
                while (v46 < v15);
              }
            }
            else
            {
              v19 = 0;
              v18 = 0;
              v17 = 0;
              v24 = v8 + v70 / v69;
              v25 = 1;
              do
              {
                v26 = v10 + 2 * (v11 * v24);
                v27 = v26 - 2 * v11;
                v28 = v26 + 2 * v11;
                v29 = v22;
                v30 = v23 - v22;
                do
                {
                  v31 = v26 + 2 * v29;
                  v32 = *(int16x8_t *)v31;
                  if (v25 <= vmaxvq_s16(*(int16x8_t *)v31))
                  {
                    v33 = 2 * v29;
                    v34 = vdupq_n_s16(v25);
                    v35 = (int8x16_t)vcgeq_s16(v32, vmaxq_s16(vmaxq_s16(vmaxq_s16(vmaxq_s16(*(int16x8_t *)(v27 + v33 - 2), *(int16x8_t *)(v27 + v33)), vmaxq_s16(*(int16x8_t *)(v27 + v33 + 2), *(int16x8_t *)(v31 - 2))), vmaxq_s16(vmaxq_s16(*(int16x8_t *)(v31 + 2), *(int16x8_t *)(v28 + v33 - 2)), vmaxq_s16(*(int16x8_t *)(v28 + v33), *(int16x8_t *)(v28 + v33 + 2)))), v34));
                    v34.i16[0] = vmaxvq_u16((uint16x8_t)v35);
                    if (v34.i32[0])
                    {
                      v36 = (int16x8_t)vandq_s8((int8x16_t)v32, v35);
                      v35.i16[0] = vmaxvq_s16(v36);
                      v19 = v35.i16[0];
                      v25 = v35.i16[0] + 1;
                      v37 = vcgeq_s16(v36, vdupq_lane_s16(*(int16x4_t *)v35.i8, 0));
                      if (v37.i16[0])
                      {
                        v17 = v24;
                        v18 = v29;
                      }
                      else
                      {
                        if (v37.i16[1])
                        {
                          v18 = v29 + 1;
                        }
                        else if (v37.i16[2])
                        {
                          v18 = v29 + 2;
                        }
                        else if (v37.i16[3])
                        {
                          v18 = v29 + 3;
                        }
                        else if (v37.i16[4])
                        {
                          v18 = v29 + 4;
                        }
                        else if (v37.i16[5])
                        {
                          v18 = v29 + 5;
                        }
                        else if (v37.i16[6])
                        {
                          v18 = v29 + 6;
                        }
                        else if (v37.i16[7])
                        {
                          v18 = v29 + 7;
                        }
                        else
                        {
                          v18 = v29;
                        }
                        v17 = v24;
                      }
                    }
                  }
                  v30 -= 8;
                  v29 += 8;
                }
                while (v30 > 7);
                if (v29 < v23)
                {
                  do
                  {
                    v39 = *(__int16 *)(v26 + 2 * v29);
                    if (v25 > v39)
                    {
                      v38 = v29 + 1;
                    }
                    else
                    {
                      v40 = 2 * (int)v29;
                      v41 = v40 - 2;
                      v42 = *(__int16 *)(v27 + v40);
                      if (*(__int16 *)(v27 + v40 - 2) <= v25)
                        v43 = v25;
                      else
                        v43 = *(__int16 *)(v27 + v40 - 2);
                      v38 = v29 + 1;
                      v44 = *(__int16 *)(v27 + 2 * (int)(v29 + 1));
                      if (v43 > v42)
                        v42 = v43;
                      if (v42 > v44)
                        v44 = v42;
                      if (v44 <= *(__int16 *)(v26 + v41))
                        v44 = *(__int16 *)(v26 + v41);
                      if (v44 <= *(__int16 *)(v26 + 2 * (int)v38))
                        v44 = *(__int16 *)(v26 + 2 * (int)v38);
                      if (v44 <= *(__int16 *)(v28 + v41))
                        v44 = *(__int16 *)(v28 + v41);
                      v45 = *(__int16 *)(v28 + 2 * (int)v29);
                      if (v44 > v45)
                        v45 = v44;
                      if (v45 <= *(__int16 *)(v28 + 2 * (int)v38))
                        v45 = *(__int16 *)(v28 + 2 * (int)v38);
                      if (v45 <= v39)
                      {
                        v25 = v39 + 1;
                        v17 = v24;
                        v18 = v29;
                        v19 = *(_WORD *)(v26 + 2 * v29);
                      }
                    }
                    v29 = v38;
                  }
                  while (v38 < v23);
                }
                ++v24;
              }
              while (v24 < v15);
            }
            v6 = v72;
            v20 = (_WORD *)(v72 + 6 * (v13 + v21) + 136536);
            v20[2] = v19;
            *v20 = v18;
            v20[1] = v17;
          }
          while (v16 != v5);
          goto LABEL_4;
        }
        if (v5 >= 0x10)
        {
          v58 = 0;
          if (!__CFADD__(v13, v5 - 1) && !((unint64_t)(v5 - 1) >> 32))
          {
            v62 = 0;
            v63 = v5 & 0xFFFFFFF0;
            do
            {
              v64 = (_OWORD *)(v6 + 136536 + 6 * (v13 + v62));
              v64[1] = 0uLL;
              v64[2] = 0uLL;
              *v64 = 0uLL;
              v65 = (_OWORD *)(v6 + 136536 + 6 * (v13 + (v62 | 8)));
              v65[1] = 0uLL;
              v65[2] = 0uLL;
              *v65 = 0uLL;
              v62 += 16;
              v63 -= 16;
            }
            while (v63);
            v58 = v5 & 0xFFFFFFF0;
            if (v58 == v5)
              goto LABEL_4;
          }
        }
        else
        {
          v58 = 0;
        }
        v59 = v5 - v58;
        do
        {
          v60 = v13 + v58++;
          v61 = v6 + 6 * v60 + 136536;
          *(_WORD *)(v61 + 4) = 0;
          *(_DWORD *)v61 = 0;
          --v59;
        }
        while (v59);
LABEL_4:
        v9 = v66;
        v70 += v66;
        v4 = v68;
      }
      while (v68 != v67);
    }
  }
  return result;
}

unint64_t GuessWidth(unint64_t a1, float a2)
{
  unint64_t result;
  unint64_t v4;
  unint64_t v5;

  result = (unint64_t)sqrtf((float)a1 * a2);
  v4 = result / 0xA + 1;
  v5 = result;
  while (a1 % result)
  {
    if (!(a1 % v5))
      return v5;
    --v5;
    ++result;
    if (!--v4)
      return 0;
  }
  return result;
}

uint64_t GetPixelBlockSizeInBytes(OSType pixelFormat, CFIndex a2, uint64_t *a3, uint64_t *a4)
{
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFArray *Value;
  const __CFArray *v10;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v12;
  int v13;
  uint64_t v14;
  const __CFDictionary *v15;
  const __CFNumber *v16;
  uint64_t v17;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  uint64_t v20;
  int v22;
  int v23;
  int valuePtr;

  v7 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, pixelFormat);
  if (!v7)
    return 0;
  v8 = v7;
  Value = (const __CFArray *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0CA91B0]);
  v10 = Value;
  if (a2 && !Value)
    goto LABEL_15;
  ValueAtIndex = v8;
  if (v10)
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, a2);
  v12 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA90E8]);
  if (v12)
  {
    valuePtr = 0;
    CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
    v13 = valuePtr;
    if ((valuePtr & 7) != 0)
      GetPixelBlockSizeInBytes_cold_1();
    if (valuePtr < 0)
      v13 = valuePtr + 7;
    v14 = (v13 >> 3);
    if (a3)
    {
      v15 = v8;
      if (v10)
        v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, a2);
      v16 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E0CA9108]);
      if (v16)
      {
        v23 = 0;
        CFNumberGetValue(v16, kCFNumberIntType, &v23);
        v17 = v23;
      }
      else
      {
        v17 = 1;
      }
      *a3 = v17;
    }
    if (a4)
    {
      v18 = v8;
      if (v10)
        v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, a2);
      v19 = (const __CFNumber *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x1E0CA9100]);
      if (v19)
      {
        v22 = 0;
        CFNumberGetValue(v19, kCFNumberIntType, &v22);
        v20 = v22;
      }
      else
      {
        v20 = 1;
      }
      *a4 = v20;
    }
  }
  else
  {
LABEL_15:
    v14 = 0;
  }
  CFRelease(v8);
  return v14;
}

uint64_t PixelBufferLineIterator(__CVBuffer *a1, void *a2)
{
  unsigned int (**v3)(id, void *, size_t, _QWORD, size_t, unint64_t, unint64_t);
  uint64_t v4;
  int IsPlanar;
  size_t PlaneCount;
  size_t v7;
  unint64_t v8;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  unint64_t v13;
  int PixelBlockSizeInBytes;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  OSType pixelFormat;
  unint64_t v20;
  unint64_t v21;

  v3 = a2;
  if (!CVPixelBufferLockBaseAddress(a1, 0))
  {
    IsPlanar = CVPixelBufferIsPlanar(a1);
    if (IsPlanar)
    {
      PlaneCount = CVPixelBufferGetPlaneCount(a1);
      pixelFormat = CVPixelBufferGetPixelFormatType(a1);
      v18 = PlaneCount;
      if (!PlaneCount)
      {
LABEL_5:
        v4 = 0;
LABEL_25:
        CVPixelBufferUnlockBaseAddress(a1, 0);
        goto LABEL_26;
      }
    }
    else
    {
      pixelFormat = CVPixelBufferGetPixelFormatType(a1);
      v18 = 1;
    }
    v7 = 0;
    v8 = 0;
    while (1)
    {
      if (IsPlanar)
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v7);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v7);
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v7);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v7);
      }
      else
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(a1);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
        WidthOfPlane = CVPixelBufferGetWidth(a1);
        HeightOfPlane = CVPixelBufferGetHeight(a1);
      }
      v13 = HeightOfPlane;
      v20 = 0;
      v21 = 0;
      PixelBlockSizeInBytes = GetPixelBlockSizeInBytes(pixelFormat, v7, (uint64_t *)&v21, (uint64_t *)&v20);
      v4 = 0;
      if (!PixelBlockSizeInBytes || !v21 || !v20)
        goto LABEL_25;
      v15 = PixelBlockSizeInBytes;
      if (!v7)
        v8 = (WidthOfPlane + v21 - 1) / v21 * PixelBlockSizeInBytes;
      if (v20 <= v13)
      {
        if (v13 / v20 <= 1)
          v16 = 1;
        else
          v16 = v13 / v20;
        while (v3[2](v3, BaseAddressOfPlane, v7, v15, WidthOfPlane, v21, v8))
        {
          BaseAddressOfPlane += BytesPerRowOfPlane;
          if (!--v16)
            goto LABEL_22;
        }
        v4 = 0xFFFFFFFFLL;
        goto LABEL_25;
      }
LABEL_22:
      if (++v7 == v18)
        goto LABEL_5;
    }
  }
  v4 = 0xFFFFFFFFLL;
LABEL_26:

  return v4;
}

uint64_t DerivePixelFormatTypeFromFilename(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a1, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "pathExtension");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  objc_msgSend(v2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v9, 4, &v8, 1, 0, 0, 4, 0);
  if (v8 != 4)
    goto LABEL_37;
  v3 = bswap32(v9);
  if ((int)v3 > 1647719520)
  {
    if ((int)v3 <= 1652056887)
    {
      if ((int)v3 > 1650943795)
      {
        if ((_DWORD)v3 == 1650943796 || (_DWORD)v3 == 1651925816)
          goto LABEL_38;
        v4 = 1651926376;
      }
      else
      {
        if ((_DWORD)v3 == 1647719521 || (_DWORD)v3 == 1647719528)
          goto LABEL_38;
        v4 = 1650942776;
      }
    }
    else if ((int)v3 <= 1919378231)
    {
      if ((_DWORD)v3 == 1652056888 || (_DWORD)v3 == 1751527984)
        goto LABEL_38;
      v4 = 1885745712;
    }
    else if ((int)v3 > 2016686639)
    {
      if ((_DWORD)v3 == 2016686640)
        goto LABEL_38;
      v4 = 2019963440;
    }
    else
    {
      if ((_DWORD)v3 == 1919378232)
        goto LABEL_38;
      v4 = 1919379252;
    }
    goto LABEL_36;
  }
  if ((int)v3 <= 1278226487)
  {
    if ((int)v3 > 875704421)
    {
      if ((_DWORD)v3 == 875704422 || (_DWORD)v3 == 875704438)
        goto LABEL_38;
      v4 = 1111970369;
      goto LABEL_36;
    }
    v5 = -843264056;
LABEL_20:
    v6 = v3 + v5;
    if (v6 > 0x30 || ((1 << v6) & 0x1400000000001) == 0)
      goto LABEL_37;
    goto LABEL_38;
  }
  if ((int)v3 <= 1380410944)
  {
    v5 = -1278226488;
    goto LABEL_20;
  }
  if ((int)v3 > 1647392358)
  {
    if ((_DWORD)v3 == 1647392359)
      goto LABEL_38;
    v4 = 1647522401;
  }
  else
  {
    if ((_DWORD)v3 == 1380410945)
      goto LABEL_38;
    v4 = 1380411457;
  }
LABEL_36:
  if ((_DWORD)v3 != v4)
LABEL_37:
    v3 = 0;
LABEL_38:

  return v3;
}

BOOL DeriveImageWidthHeightFromFilesize(unint64_t a1, signed int pixelFormat, _DWORD *a3, _DWORD *a4, float a5)
{
  _BOOL8 result;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int PixelBlockSizeInBytes;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = 0;
  if (a3 && a4)
  {
    if (pixelFormat > 1885745711)
    {
      if (pixelFormat == 1885745712)
      {
        if (*a3)
          return *a4 != 0;
        return 0;
      }
      if (pixelFormat == 2019963440)
        goto LABEL_11;
      v11 = 2016686640;
    }
    else
    {
      if (pixelFormat == 875704422 || pixelFormat == 875704438)
        goto LABEL_11;
      v11 = 1751527984;
    }
    if (pixelFormat != v11)
    {
      if (GetPixelBlockSizeInBytes(pixelFormat, 1, 0, 0))
        return 0;
      v19 = 1;
      v20 = 1;
      PixelBlockSizeInBytes = GetPixelBlockSizeInBytes(pixelFormat, 0, &v20, &v19);
      v13 = PixelBlockSizeInBytes ? v20 * a1 * v19 / PixelBlockSizeInBytes : 0;
      if (v13 * PixelBlockSizeInBytes / (v19 * v20) != a1)
        return 0;
      goto LABEL_13;
    }
LABEL_11:
    v12 = GetPixelBlockSizeInBytes(pixelFormat, 0, 0, 0);
    if (!v12)
    {
      fig_log_get_emitter();
LABEL_40:
      FigDebugAssert3();
      return 0;
    }
    v13 = 2 * (a1 / v12) / 3;
    if (a1 != (3 * v12 * v13) >> 1)
      return 0;
LABEL_13:
    v14 = *a3;
    if ((v14 & 0x80000000) == 0)
    {
      v15 = *a4;
      if ((v15 & 0x80000000) == 0)
      {
        if ((_DWORD)v14 && (_DWORD)v15)
          goto LABEL_26;
        if ((_DWORD)v14)
          goto LABEL_18;
        if ((_DWORD)v15)
        {
          v14 = v13 / v15;
          goto LABEL_26;
        }
        v14 = (unint64_t)sqrtf((float)v13 * a5);
        v17 = v14 / 0xA + 1;
        v18 = v14;
        result = 0;
        while (v13 % v14)
        {
          if (!(v13 % v18))
          {
            LODWORD(v14) = v18;
            break;
          }
          --v18;
          ++v14;
          if (!--v17)
            return result;
        }
        if ((_DWORD)v14)
        {
          v14 = (int)v14;
LABEL_18:
          v15 = v13 / v14;
LABEL_26:
          *a3 = v14;
          *a4 = v15;
          return v15 * v14 == v13;
        }
        return 0;
      }
    }
    fig_log_get_emitter();
    goto LABEL_40;
  }
  return result;
}

__CVBuffer *CreatePixelBufferFromCFData(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, float a5)
{
  return CreatePixelBufferExtendedFromCFData(a1, a2, a3, a4, 0, 0, a5);
}

__CVBuffer *CreatePixelBufferExtendedFromCFData(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int a6, float a7)
{
  id v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  __CVBuffer *PixelBufferExtended;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v23[6];
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v13 = a1;
  v14 = v13;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  if (a3)
    v15 = *a3;
  else
    v15 = 0;
  v25 = v15;
  if (a4)
    v16 = *a4;
  else
    v16 = 0;
  v29 = 0;
  v24 = v16;
  DeriveImageWidthHeightFromFilesize(objc_msgSend(v13, "length"), a2, &v25, &v24, a7);
  PixelBufferExtended = CreatePixelBufferExtended(v25, v24, a2, a5, a6);
  if (PixelBufferExtended)
  {
    v18 = objc_retainAutorelease(v14);
    v19 = objc_msgSend(v18, "bytes");
    v27[3] = v19;
    v20 = v19 + objc_msgSend(v18, "length");
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __CreatePixelBufferExtendedFromCFData_block_invoke;
    v23[3] = &unk_1E94EB1E0;
    v23[4] = &v26;
    v23[5] = v20;
    v21 = PixelBufferLineIterator(PixelBufferExtended, v23);
    if (v27[3] != v20 || v21)
    {
      CFRelease(PixelBufferExtended);
      PixelBufferExtended = 0;
    }
    else
    {
      if (a3)
        *a3 = v25;
      if (a4)
        *a4 = v24;
    }
  }
  _Block_object_dispose(&v26, 8);

  return PixelBufferExtended;
}

void sub_1D3288EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CVBuffer *CreatePixelBufferExtendedFromFile(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int a5, int a6, float a7)
{
  uint64_t v12;
  id v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  __CVBuffer *PixelBufferExtendedFromCFData;
  unsigned int *v22;
  unsigned int *v23;
  id v24;

  v12 = a2;
  if (!(_DWORD)a2)
  {
    v12 = DerivePixelFormatTypeFromFilename(a1);
    if (!(_DWORD)v12)
      return 0;
  }
  v22 = a3;
  v23 = a4;
  v14 = 0;
  v15 = 2;
  while (1)
  {
    v16 = v14;
    v17 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1, v22, v23);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v16;
    objc_msgSend(v17, "dataWithContentsOfFile:options:error:", v18, v15 != 1, &v24);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v24;

    if (v19)
      break;
    if (!--v15)
    {
      PixelBufferExtendedFromCFData = 0;
      goto LABEL_8;
    }
  }
  PixelBufferExtendedFromCFData = CreatePixelBufferExtendedFromCFData(v19, v12, v22, v23, a5, a6, a7);

  v14 = v19;
LABEL_8:

  return PixelBufferExtendedFromCFData;
}

__CVBuffer *CreatePixelBufferFromFile(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, float a5)
{
  return CreatePixelBufferExtendedFromFile(a1, a2, a3, a4, 0, 0, a5);
}

BOOL WritePixelBufferToFile(const char *a1, CVPixelBufferRef pixelBuffer)
{
  const char *v3;
  uint64_t v4;
  signed int PixelFormatType;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  size_t Width;
  size_t Height;
  __CVBuffer *PixelBufferExtended;
  __CVBuffer *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  FILE *v21;
  FILE *v22;
  int v23;
  _QWORD v25[5];

  if (!a1 || !pixelBuffer)
  {
LABEL_83:
    fig_log_get_emitter();
    FigDebugAssert3();
    v23 = FigSignalErrorAt();
    return v23 == 0;
  }
  v3 = a1;
  v4 = 1111970369;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType <= 796419631)
  {
    if (PixelFormatType <= 758674991)
    {
      if (PixelFormatType <= 645424687)
      {
        if (PixelFormatType <= 641877824)
        {
          if (PixelFormatType != 641230384)
          {
            v6 = 641234480;
            goto LABEL_52;
          }
          goto LABEL_66;
        }
        if (PixelFormatType == 641877825)
          goto LABEL_68;
        v7 = 644376112;
        goto LABEL_48;
      }
      if (PixelFormatType <= 645428783)
      {
        if (PixelFormatType != 645424688)
        {
          v9 = 645424692;
          goto LABEL_40;
        }
LABEL_62:
        v4 = 2019963440;
        goto LABEL_68;
      }
      if (PixelFormatType == 645428784)
        goto LABEL_67;
      v10 = 758670896;
    }
    else
    {
      if (PixelFormatType <= 762869295)
      {
        if (PixelFormatType > 761816623)
        {
          if (PixelFormatType != 761816624)
          {
            if (PixelFormatType != 762865200)
              goto LABEL_82;
            goto LABEL_62;
          }
LABEL_57:
          v4 = 1751527984;
          goto LABEL_68;
        }
        if (PixelFormatType != 758674992)
        {
          if (PixelFormatType == 759318337)
            goto LABEL_68;
          goto LABEL_82;
        }
        goto LABEL_53;
      }
      if (PixelFormatType > 792229423)
      {
        if (PixelFormatType != 792229424)
        {
          if (PixelFormatType == 792872769)
            goto LABEL_68;
          v7 = 795371056;
LABEL_48:
          if (PixelFormatType != v7)
            goto LABEL_82;
          goto LABEL_57;
        }
LABEL_53:
        v4 = 875704438;
        goto LABEL_68;
      }
      if (PixelFormatType == 762869296)
        goto LABEL_67;
      v10 = 792225328;
    }
    if (PixelFormatType != v10)
      goto LABEL_82;
    goto LABEL_66;
  }
  if (PixelFormatType > 2084718400)
  {
    if (PixelFormatType > 2100848175)
    {
      if (PixelFormatType > 2105042479)
      {
        if (PixelFormatType == 2105042480)
          goto LABEL_62;
        if (PixelFormatType == 2105042484)
          goto LABEL_41;
        v8 = 2105046576;
LABEL_60:
        if (PixelFormatType != v8)
          goto LABEL_82;
        goto LABEL_67;
      }
      if (PixelFormatType != 2100848176)
      {
        v6 = 2100852272;
        goto LABEL_52;
      }
LABEL_66:
      v4 = 875704422;
      goto LABEL_68;
    }
    if (PixelFormatType > 2088265263)
    {
      if (PixelFormatType == 2088265264)
        goto LABEL_62;
      v8 = 2088269360;
      goto LABEL_60;
    }
    if (PixelFormatType == 2084718401)
      goto LABEL_68;
    v7 = 2087216688;
    goto LABEL_48;
  }
  if (PixelFormatType <= 1534617135)
  {
    if (PixelFormatType <= 1530422831)
    {
      if (PixelFormatType == 796419632)
        goto LABEL_62;
      v8 = 796423728;
      goto LABEL_60;
    }
    if (PixelFormatType != 1530422832)
    {
      v6 = 1530426928;
LABEL_52:
      if (PixelFormatType == v6)
        goto LABEL_53;
LABEL_82:
      v14 = pixelBuffer;
LABEL_74:
      v21 = fopen(v3, "wb");
      v22 = v21;
      if (v21)
      {
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __WritePixelBufferToFile_block_invoke_2;
        v25[3] = &__block_descriptor_40_e23_B56__0_8Q16Q24Q32Q40Q48l;
        v25[4] = v21;
        v23 = PixelBufferLineIterator(v14, v25);
      }
      else
      {
        v23 = -1;
      }
      goto LABEL_77;
    }
    goto LABEL_66;
  }
  if (PixelFormatType <= 1534621231)
  {
    if (PixelFormatType != 1534617136)
    {
      v9 = 1534617140;
LABEL_40:
      if (PixelFormatType != v9)
        goto LABEL_82;
LABEL_41:
      v4 = 2019963956;
      goto LABEL_68;
    }
    goto LABEL_62;
  }
  if (PixelFormatType != 1534621232)
  {
    if (PixelFormatType != 2084070960)
    {
      v6 = 2084075056;
      goto LABEL_52;
    }
    goto LABEL_66;
  }
LABEL_67:
  v4 = 2016686640;
LABEL_68:
  if (WritePixelBufferToFile_onceToken != -1)
    dispatch_once(&WritePixelBufferToFile_onceToken, &__block_literal_global_4);
  if (!WritePixelBufferToFile_m2m)
    goto LABEL_83;
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  PixelBufferExtended = CreatePixelBufferExtended(Width, Height, v4, 0, 0);
  if (!PixelBufferExtended)
    goto LABEL_83;
  v14 = PixelBufferExtended;
  CVBufferPropagateAttachments(pixelBuffer, PixelBufferExtended);
  v15 = objc_msgSend((id)WritePixelBufferToFile_m2m, "downsample:dst:sync_m2m:", pixelBuffer, v14, 1);
  if (!v15)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%c%c%c%c"), BYTE3(v4), WORD1(v4) & 0x77, (v4 >> 8) & 0x76, v4 & 0x77);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v3, 4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "stringByDeletingPathExtension");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "stringByAppendingPathExtension:", v16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = objc_retainAutorelease(v19);
    v3 = (const char *)objc_msgSend(v20, "UTF8String");

    goto LABEL_74;
  }
  v23 = v15;
  fig_log_get_emitter();
  FigDebugAssert3();
  FigSignalErrorAt();
  v22 = 0;
LABEL_77:
  if (v14 != pixelBuffer)
    CFRelease(v14);
  if (v22)
    fclose(v22);
  return v23 == 0;
}

__CVBuffer *Create420PixelBufferFromPGMFiles(const char *a1, const char *a2, const char *a3)
{
  FILE *v5;
  FILE *v6;
  FILE *v7;
  FILE *v8;
  __CVBuffer *PixelBufferExtended;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _QWORD v16[7];
  uint64_t v17;
  uint64_t v18;

  v5 = fopen(a1, "rb");
  v6 = fopen(a2, "rb");
  v7 = fopen(a3, "rb");
  v8 = v7;
  if (v5)
  {
    if (v6 && v7)
    {
      v17 = 0;
      v18 = 0;
      fscanf(v5, "P5 %d %d 255\n", (char *)&v18 + 4, &v18);
      PixelBufferExtended = CreatePixelBufferExtended(HIDWORD(v18), v18, 875704422, 0, 0);
      fscanf(v6, "P5 %d %d 255\n", (char *)&v17 + 4, &v17);
      if (SHIDWORD(v18) >= -1)
        v10 = HIDWORD(v18) + 1;
      else
        v10 = HIDWORD(v18) + 2;
      if (HIDWORD(v17) == v10 >> 1
        && ((int)v18 >= -1 ? (v11 = v18 + 1) : (v11 = v18 + 2),
            (_DWORD)v17 == v11 >> 1
         && ((fscanf(v8, "P5 %d %d 255\n", (char *)&v17 + 4, &v17), SHIDWORD(v18) >= -1)
           ? (v12 = HIDWORD(v18) + 1)
           : (v12 = HIDWORD(v18) + 2),
             HIDWORD(v17) == v12 >> 1 && ((int)v18 >= -1 ? (v13 = v18 + 1) : (v13 = v18 + 2), (_DWORD)v17 == v13 >> 1))))
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = __Create420PixelBufferFromPGMFiles_block_invoke;
        v16[3] = &__block_descriptor_56_e23_B56__0_8Q16Q24Q32Q40Q48l;
        v16[4] = v5;
        v16[5] = v6;
        v16[6] = v8;
        v14 = PixelBufferLineIterator(PixelBufferExtended, v16);
        if (v14)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v14 = FigSignalErrorAt();
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v14 = FigSignalErrorAt();
      PixelBufferExtended = 0;
    }
    fclose(v5);
    if (v6)
      goto LABEL_23;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v14 = FigSignalErrorAt();
    PixelBufferExtended = 0;
    if (v6)
LABEL_23:
      fclose(v6);
  }
  if (v8)
    fclose(v8);
  if (v14)
    return 0;
  else
    return PixelBufferExtended;
}

BOOL Write420PixelBufferChannelToPGMFile(const char *a1, CVPixelBufferRef pixelBuffer, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  FILE *v9;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  int v12;
  _BOOL8 v13;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 875704422
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 875704438)
  {
    switch(a3)
    {
      case 'y':
        v8 = 0;
        v6 = 0;
        v7 = 1;
        break;
      case 'r':
        v7 = 2;
        v8 = 1;
        v6 = 1;
        break;
      case 'b':
        v6 = 0;
        v7 = 2;
        v8 = 1;
        break;
      default:
        v13 = 0;
        goto LABEL_14;
    }
    v25[3] = v8;
    v21[3] = v6;
    v17[3] = v7;
    v9 = fopen(a1, "wb");
    if (v9)
    {
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v25[3]);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v25[3]);
      fprintf(v9, "P5 %lu %lu 255\n", WidthOfPlane, HeightOfPlane);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __Write420PixelBufferChannelToPGMFile_block_invoke;
      v15[3] = &unk_1E94EB150;
      v15[4] = &v24;
      v15[5] = &v20;
      v15[6] = &v16;
      v15[7] = v9;
      v12 = PixelBufferLineIterator(pixelBuffer, v15);
      fclose(v9);
    }
    else
    {
      v12 = -1;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v12 = FigSignalErrorAt();
  }
  v13 = v12 == 0;
LABEL_14:
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
  return v13;
}

void sub_1D3289F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

__CVBuffer *CreatePixelBufferFromPGMFile(const char *a1)
{
  FILE *v1;
  FILE *v2;
  __CVBuffer *PixelBufferExtended;
  __CVBuffer *v4;
  int v5;
  _QWORD v7[5];
  uint64_t v8;

  v1 = fopen(a1, "rb");
  v2 = v1;
  if (!v1)
  {
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    v5 = FigSignalErrorAt();
    v4 = 0;
    goto LABEL_6;
  }
  v8 = 0;
  if (fscanf(v1, "P5 %d %d 255\n", (char *)&v8 + 4, &v8) != 2)
  {
    fig_log_get_emitter();
    goto LABEL_12;
  }
  PixelBufferExtended = CreatePixelBufferExtended(HIDWORD(v8), v8, 1278226488, 0, 0);
  v4 = PixelBufferExtended;
  if (!PixelBufferExtended)
  {
    fig_log_get_emitter();
LABEL_15:
    FigDebugAssert3();
    v5 = -1;
    goto LABEL_6;
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CreatePixelBufferFromPGMFile_block_invoke;
  v7[3] = &__block_descriptor_40_e23_B56__0_8Q16Q24Q32Q40Q48l;
  v7[4] = v2;
  if (PixelBufferLineIterator(PixelBufferExtended, v7))
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
  v5 = 0;
LABEL_6:
  fclose(v2);
  if (v5 && v4)
  {
    CFRelease(v4);
    return 0;
  }
  return v4;
}

BOOL WriteFloat16PixelBufferChannelToPGMFile(const char *a1, CVPixelBufferRef pixelBuffer, int a3)
{
  signed int PixelFormatType;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  int v10;
  FILE *v11;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  int v14;
  _QWORD v16[7];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v7 = 0;
  v8 = 0;
  v9 = 1;
  if (PixelFormatType <= 1278226741)
  {
    if (PixelFormatType != 843264104)
    {
      v10 = 1278226536;
LABEL_7:
      if (PixelFormatType != v10)
        goto LABEL_13;
      goto LABEL_10;
    }
    v7 = a3;
    v9 = 2;
  }
  else if (PixelFormatType != 1278226742 && PixelFormatType != 1751410032)
  {
    v10 = 1751411059;
    goto LABEL_7;
  }
LABEL_10:
  v22[3] = v7;
  v18[3] = v9;
  v11 = fopen(a1, "wb");
  if (v11)
  {
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    fprintf(v11, "P5 %lu %lu 255\n", WidthOfPlane, HeightOfPlane);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __WriteFloat16PixelBufferChannelToPGMFile_block_invoke;
    v16[3] = &unk_1E94EB178;
    v16[4] = &v21;
    v16[5] = &v17;
    v16[6] = v11;
    v14 = PixelBufferLineIterator(pixelBuffer, v16);
    fclose(v11);
    v8 = v14 == 0;
  }
  else
  {
    v8 = 0;
  }
LABEL_13:
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  return v8;
}

void sub_1D328A494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

FILE *WriteOneComponent8PixelBufferToPGMFile(const char *a1, CVPixelBufferRef pixelBuffer)
{
  FILE *result;
  FILE *v5;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  int v8;
  _QWORD v9[5];

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1278226488)
    return 0;
  result = fopen(a1, "wb");
  if (result)
  {
    v5 = result;
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    fprintf(v5, "P5 %lu %lu 255\n", WidthOfPlane, HeightOfPlane);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __WriteOneComponent8PixelBufferToPGMFile_block_invoke;
    v9[3] = &__block_descriptor_40_e23_B56__0_8Q16Q24Q32Q40Q48l;
    v9[4] = v5;
    v8 = PixelBufferLineIterator(pixelBuffer, v9);
    fclose(v5);
    return (FILE *)(v8 == 0);
  }
  return result;
}

uint64_t CopyPixelBuffer(__CVBuffer *a1, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  int IsPlanar;
  size_t PlaneCount;
  uint64_t v9;
  size_t i;
  size_t BytesPerRowOfPlane;
  uint64_t v13;
  _QWORD v14[7];
  _QWORD v15[4];
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  if (!pixelBuffer)
    return FigSignalErrorAt();
  Width = CVPixelBufferGetWidth(pixelBuffer);
  if (Width != CVPixelBufferGetWidth(a1))
    return FigSignalErrorAt();
  Height = CVPixelBufferGetHeight(pixelBuffer);
  if (Height != CVPixelBufferGetHeight(a1))
    return FigSignalErrorAt();
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a1))
    return FigSignalErrorAt();
  if (CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  memset(v16, 0, sizeof(v16));
  IsPlanar = CVPixelBufferIsPlanar(pixelBuffer);
  if (!IsPlanar)
  {
    PlaneCount = 1;
LABEL_12:
    for (i = 0; i != 4; ++i)
    {
      if (i >= PlaneCount)
      {
        BytesPerRowOfPlane = 0;
        *((_QWORD *)v16 + i) = 0;
      }
      else if (IsPlanar)
      {
        *((_QWORD *)v16 + i) = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
      }
      else
      {
        *((_QWORD *)v16 + i) = CVPixelBufferGetBaseAddress(pixelBuffer);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
      }
      v15[i] = BytesPerRowOfPlane;
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __CopyPixelBuffer_block_invoke;
    v14[3] = &__block_descriptor_56_e23_B56__0_8Q16Q24Q32Q40Q48l;
    v14[4] = PlaneCount;
    v14[5] = v16;
    v14[6] = v15;
    v9 = PixelBufferLineIterator(a1, v14);
    goto LABEL_20;
  }
  PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
  if (PlaneCount <= 4)
    goto LABEL_12;
  fig_log_get_emitter();
  FigDebugAssert3();
  v9 = FigSignalErrorAt();
LABEL_20:
  v13 = v9;
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  return v13;
}

uint64_t CreatePixelBufferPool(void *a1, unsigned int a2, uint64_t a3, CVPixelBufferPoolRef *a4)
{
  id v6;
  void *v7;
  void *IOSurfacePropertiesDictionary;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  const void *PixelBufferCacheModeArray;
  uint64_t v17;

  v6 = a1;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v6);
  IOSurfacePropertiesDictionary = (void *)FigCreateIOSurfacePropertiesDictionary();
  v9 = *MEMORY[0x1E0CA8FF0];
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8FF0]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", IOSurfacePropertiesDictionary, v9);
  v11 = *MEMORY[0x1E0CA8F80];
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8F80]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    if (a2)
    {
LABEL_5:
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v6);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v14, *MEMORY[0x1E0CA9060]);

      goto LABEL_8;
    }
  }
  else
  {
    objc_msgSend(IOSurfacePropertiesDictionary, "objectForKeyedSubscript:", *MEMORY[0x1E0CBBF10]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "intValue");

    PixelBufferCacheModeArray = (const void *)FigCreatePixelBufferCacheModeArray();
    objc_msgSend(v7, "setObject:forKeyedSubscript:", PixelBufferCacheModeArray, v11);
    CFRelease(PixelBufferCacheModeArray);
    if (a2)
      goto LABEL_5;
  }
  v13 = 0;
LABEL_8:
  v17 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)v13, (CFDictionaryRef)v7, a4);
  if ((_DWORD)v17)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }

  return v17;
}

uint64_t FillPixelBufferWithRandomData(__CVBuffer *a1)
{
  return PixelBufferLineIterator(a1, &__block_literal_global_37_0);
}

__CVBuffer *CreatePixelBufferWithWiringAssertion(int a1, int a2, OSType a3, void *a4)
{
  __CFString *v7;
  void *v8;
  __CVBuffer *PixelBufferWithAttributes;
  __IOSurface *IOSurface;

  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AA70], *MEMORY[0x1E0CA8FF0]);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CA9000]);
  PixelBufferWithAttributes = CreatePixelBufferWithAttributes(a1, a2, a3, (CFDictionaryRef)v8);
  IOSurface = CVPixelBufferGetIOSurface(PixelBufferWithAttributes);
  if (!-[__CFString length](v7, "length"))
  {

    v7 = CFSTR("CMCapture: unnamed");
  }
  IOSurfaceSetValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBC048], v7);

  return PixelBufferWithAttributes;
}

uint64_t getBayerPatternForPixelBuffer(__CVBuffer *a1, _DWORD *a2, size_t a3, char *a4)
{
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  __CFString *v12;

  v7 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA90D8], 0);
  v8 = v7;
  if (!v7)
    goto LABEL_4;
  v9 = objc_msgSend(v7, "intValue");
  if (v9 > 8 || ((0x12Fu >> v9) & 1) == 0)
    goto LABEL_4;
  v12 = off_1E94EB200[v9];
  if (a2)
    *a2 = objc_msgSend(v8, "intValue");
  if (!a4)
  {
LABEL_11:
    v10 = 1;
    goto LABEL_5;
  }
  if (-[__CFString length](v12, "length") < a3)
  {
    strncpy(a4, (const char *)-[__CFString UTF8String](v12, "UTF8String"), a3);
    goto LABEL_11;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_4:
  v10 = 0;
LABEL_5:

  return v10;
}

uint64_t bfpn_subtract_bias_shading(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;

  if (!a1)
    goto LABEL_24;
  v3 = *a1;
  if (!*a1)
    goto LABEL_24;
  v4 = a1[2];
  v5 = a1[3];
  if (v5 < 4 * v4)
  {
LABEL_27:
    FigDebugAssert3();
    return 4294967277;
  }
  if (!a2 || (v6 = *a2) == 0)
  {
LABEL_24:
    FigDebugAssert3();
    return 4294967281;
  }
  v7 = a2[2];
  v8 = a2[3];
  if (v8 < 4 * v7)
    goto LABEL_27;
  if (!a3 || (v9 = *a3) == 0)
  {
    FigDebugAssert3();
    return 4294967268;
  }
  v11 = a3[2];
  v10 = a3[3];
  if (v10 < 4 * v11)
    goto LABEL_27;
  if (v4 != v7)
    goto LABEL_30;
  v12 = a1[1];
  if (v12 != a2[1])
    goto LABEL_31;
  if (v4 != v11)
  {
LABEL_30:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v12 != a3[1])
  {
LABEL_31:
    FigDebugAssert3();
    return 4294967279;
  }
  if (v12)
  {
    v13 = v5 >> 2;
    v14 = 4 * (v10 >> 2);
    v15 = 4 * (v8 >> 2);
    v16 = 4 * v13;
    do
    {
      if (v4)
      {
        for (i = 0; i != v4; ++i)
          *(float *)(v9 + 4 * i) = *(float *)(v3 + 4 * i) - *(float *)(v6 + 4 * i);
      }
      v9 += v14;
      v6 += v15;
      v3 += v16;
      --v12;
    }
    while (v12);
  }
  return 0;
}

id generateCommandBufferLabel(const __CFString *a1, uint64_t a2)
{
  const __CFString *v2;
  void *v3;
  uint64_t v4;

  v2 = &stru_1E94ED9E8;
  if (a1)
    v2 = a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), v2, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v3, "length") >= 0x79)
  {
    objc_msgSend(v3, "substringToIndex:", 120);
    v4 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v4;
  }
  return v3;
}

void sub_1D328F600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1D328F6EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D3294EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1D3295004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D32951CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t bfpn_generate_hfmodel(uint64_t *a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  char v35;
  uint64_t result;

  if (!a1 || !a2)
  {
LABEL_34:
    FigDebugAssert3();
    return 4294967281;
  }
  v6 = *a2;
  if (!*a2)
    goto LABEL_42;
  v8 = a2[2];
  v7 = a2[3];
  if (v7 < v8)
  {
LABEL_35:
    FigDebugAssert3();
    return 4294967277;
  }
  if (!a3 || (v9 = *a3) == 0)
  {
LABEL_42:
    FigDebugAssert3();
    return 4294967278;
  }
  v10 = a3[2];
  v11 = a3[3];
  if (v11 < v10)
    goto LABEL_35;
  if (v8 == v10)
  {
    v12 = a2[1];
    if (v12 == a3[1])
    {
      v13 = 0;
      while (a1[v13])
      {
        v14 = a1[v13 + 2];
        if (a1[v13 + 3] < (unint64_t)(4 * v14))
          goto LABEL_35;
        if (v8 != 2 * v14)
          goto LABEL_36;
        if (v12 != 2 * a1[v13 + 1])
          goto LABEL_37;
        v13 += 4;
        if (v13 == 16)
        {
          if (a4)
          {
            v15 = a1[1];
            if (v15)
            {
              v16 = 0;
              v17 = a1[2];
              v18 = (unint64_t)a1[3] >> 2;
              v19 = a1[8];
              v20 = (unint64_t)a1[7] >> 2;
              v21 = a1[12];
              v22 = (unint64_t)a1[11] >> 2;
              v23 = (unint64_t)a1[15] >> 2;
              v24 = 2 * v7;
              v25 = 2 * v11;
              v26 = v9 + v11;
              v27 = v6 + v7;
              v28 = a1[4];
              v29 = *a1;
              do
              {
                if (v17)
                {
                  v30 = 0;
                  for (i = 0; i != v17; ++i)
                  {
                    v32 = (_BYTE *)(v26 + v30);
                    v33 = (_BYTE *)(v9 + v30);
                    *v33 = *(_BYTE *)(v6 + v30) | llroundf(fminf(fmaxf((float)(*(float *)(v29 + 4 * i) + a6) * a5, 0.0), 255.0));
                    v33[1] = *(_BYTE *)(v6 + v30 + 1) | llroundf(fminf(fmaxf((float)(*(float *)(v28 + 4 * i) + a6) * a5, 0.0), 255.0));
                    v34 = *(unsigned __int8 *)(v27 + v30) | llroundf(fminf(fmaxf((float)(*(float *)(v19 + 4 * i) + a6) * a5, 0.0), 255.0));
                    *v32 = v34;
                    v35 = *(_BYTE *)(v27 + v30 + 1) | llroundf(fminf(fmaxf((float)(*(float *)(v21 + 4 * i) + a6) * a5, 0.0), 255.0));
                    v32[1] = v35;
                    if (*(unsigned __int8 *)(v9 + v30) == 255)
                      ++v16;
                    if (v33[1] == 255)
                      ++v16;
                    if ((_BYTE)v34 == 0xFF)
                      ++v16;
                    if (v35 == -1)
                      ++v16;
                    v30 += 2;
                  }
                }
                v6 += v24;
                v27 += v24;
                v9 += v25;
                v26 += v25;
                v29 += 4 * v18;
                v28 += 4 * v20;
                v19 += 4 * v22;
                v21 += 4 * v23;
                --v15;
              }
              while (v15);
            }
            else
            {
              v16 = 0;
            }
            result = 0;
            *a4 = v16;
          }
          else
          {
            FigDebugAssert3();
            return 4294967266;
          }
          return result;
        }
      }
      goto LABEL_34;
    }
LABEL_37:
    FigDebugAssert3();
    return 4294967279;
  }
  else
  {
LABEL_36:
    FigDebugAssert3();
    return 4294967280;
  }
}

id styleEngineSharedFunctionConstants(void *a1)
{
  void *v1;
  char v3;

  v3 = objc_msgSend(a1, "supportsFamily:", 1004);
  v1 = (void *)objc_opt_new();
  objc_msgSend(v1, "setConstantValue:type:atIndex:", &v3, 53, 16);
  return v1;
}

uint64_t useResourceLabels()
{
  return 0;
}

void FigMetalIncRef(void *a1)
{
  _DWORD *v1;
  int v2;

  if (a1)
  {
    objc_getAssociatedObject(a1, 0);
    v1 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    if (v1)
    {
      v2 = v1[2];
      if (v2 >= 1)
        v1[2] = v2 + 1;
    }

  }
}

void FigMetalDetachFromAllocator(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = a1;
  if (v1)
  {
    v4 = v1;
    objc_getAssociatedObject(v1, 0);
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = (void *)v2;
    if (v2)
      objc_msgSend(*(id *)(v2 + 24), "forgoOwnership:", v4);

    v1 = v4;
  }

}

uint64_t FigMetalGetRefCount(void *a1)
{
  id v1;
  void *v2;
  unsigned int *v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1 && (objc_getAssociatedObject(v1, 0), (v3 = (unsigned int *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v4 = v3[2];

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

BOOL FigMetalIsValid(void *a1)
{
  _DWORD *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  objc_getAssociatedObject(a1, 0);
  v1 = (_DWORD *)objc_claimAutoreleasedReturnValue();
  if (v1)
    v2 = v1[2] > 0;
  else
    v2 = 1;

  return v2;
}

void sub_1D329CCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t i;

  for (i = 128; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t bfpn_upsample2x_and_combine(uint64_t *a1, uint64_t *a2, uint64_t *a3, float a4, float a5, int8x16_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t Row;
  uint64_t v22;
  uint64_t v23;
  int32x2_t v24;
  int32x2_t v25;
  float v26;
  float v27;
  uint64_t v28;
  int8x8_t v29;
  unsigned int v30;
  int v31;
  float v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  unsigned int v38;
  uint64_t v39;
  int8x8_t v41;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD v46[11];
  uint64_t v47;

  v47 = 0;
  memset(v46, 0, sizeof(v46));
  if (!a1 || !*a1)
    goto LABEL_51;
  v8 = a1[2];
  if (a1[3] < (unint64_t)(4 * v8))
    goto LABEL_54;
  if (!a2 || (v9 = *a2) == 0)
  {
LABEL_51:
    FigDebugAssert3();
    v39 = 4294967281;
    goto LABEL_46;
  }
  v10 = a2[2];
  v44 = a2[3];
  if (v44 < v10)
    goto LABEL_54;
  if (!a3 || (v11 = *a3) == 0)
  {
    FigDebugAssert3();
    v39 = 4294967278;
    goto LABEL_46;
  }
  v12 = a3[2];
  v43 = a3[3];
  if (v43 < v12)
  {
LABEL_54:
    FigDebugAssert3();
    v39 = 4294967277;
    goto LABEL_46;
  }
  if (v8 != (v12 + 1) >> 1)
    goto LABEL_57;
  v45 = a3[1];
  v13 = (unint64_t)(v45 + 1) >> 1;
  if (v13 != a1[1])
    goto LABEL_58;
  if (v12 != v10)
  {
LABEL_57:
    FigDebugAssert3();
    v39 = 4294967280;
    goto LABEL_46;
  }
  if (v45 != a2[1])
  {
LABEL_58:
    FigDebugAssert3();
    v39 = 4294967279;
    goto LABEL_46;
  }
  v15 = bfpn_sampler_init((uint64_t)v46, v8, v13, 1);
  if ((_DWORD)v15)
  {
    v39 = v15;
    FigDebugAssert3();
  }
  else if ((int)v45 < 1)
  {
LABEL_45:
    v39 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v41 = (int8x8_t)vextq_s8(a6, a6, 8uLL).u64[0];
    v18 = 95014;
    while (1)
    {
      v19 = v16 - 1;
      if (v16 < 1)
        v19 = v16;
      v20 = v19 >> 1;
      Row = bfpn_sampler_fetchRow((uint64_t)v46, a1, v19 >> 1);
      if (!Row)
        break;
      v22 = Row;
      v23 = bfpn_sampler_fetchRow((uint64_t)v46, a1, v20 + 1);
      if (!v23)
        break;
      if ((v16 & 1) != 0)
        v26 = 0.75;
      else
        v26 = 0.25;
      if ((v16 & 1) != 0)
        v27 = 0.25;
      else
        v27 = 0.75;
      if ((int)v10 >= 1)
      {
        v24.i32[0] = 0;
        v28 = 0;
        v25.i32[0] = v16 & 1;
        v29 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v25, v24), 0), *(int8x8_t *)a6.i8, v41);
        do
        {
          v30 = *(unsigned __int8 *)(v9 + v28);
          if (v30 == 255)
          {
            v37 = 255.0;
          }
          else
          {
            v31 = v28 - 1;
            if ((int)v28 - 1 < 0)
              v31 = v28;
            if ((v28 & 1) != 0)
              v32 = *(float *)&v29.i32[1];
            else
              v32 = *(float *)v29.i32;
            v33 = (float)v30;
            if ((v28 & 1) != 0)
              v34 = 0.75;
            else
              v34 = 0.25;
            if ((v28 & 1) != 0)
              v36 = 0.25;
            else
              v36 = 0.75;
            v35 = v31 >> 1;
            v37 = (float)(int)fminf(fmaxf(roundf((float)((float)((float)v18 * 0.000015259) + -0.5)+ (float)((float)(v32+ (float)((float)((float)(v27* (float)((float)(v36 * *(float *)(v23 + 4 * v35 + 4))+ (float)(v34 * *(float *)(v23 + 4 * v35))))+ (float)(v26* (float)((float)(v36 * *(float *)(v22 + 4 * v35 + 4))+ (float)(v34 * *(float *)(v22 + 4 * v35)))))* a4))+ (float)(v33 * a5))), 0.0), 255.0);
          }
          *(_BYTE *)(v11 + v28) = (int)v37;
          v38 = v17 + 65184 * v18;
          v17 = HIWORD(v38);
          v18 = (unsigned __int16)v38;
          ++v28;
        }
        while ((_DWORD)v10 != (_DWORD)v28);
      }
      v9 += v44;
      v11 += v43;
      if (++v16 == (_DWORD)v45)
        goto LABEL_45;
    }
    FigDebugAssert3();
    v39 = 4294967269;
  }
LABEL_46:
  bfpn_sampler_free((uint64_t)v46);
  return v39;
}

void rwppFeatMatch_execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  __n128 v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, __n128);
  uint64_t v26;
  int v27;
  signed __int32 v28;
  float32x2_t v29;
  signed __int32 v30;
  _DWORD *v31;
  float32x2_t v32;
  float32x2_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v40;
  BOOL v41;
  int v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float32x2_t **v56;
  int v57;
  int v58;
  uint64_t v59;
  _BYTE *v60;
  void (*v61)(uint64_t, uint64_t, __n128);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int32x2_t v68;
  float v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v16 = *(unsigned int *)(v15 + 12);
  v17 = *(_DWORD *)(v15 + 16);
  v64 = a1;
  v65 = v14;
  v62 = *(_DWORD *)(v14 + 32);
  v63 = (2 * v16) | 1;
  LODWORD(v14) = *(_DWORD *)(a1 + 1080);
  v18 = *(_DWORD *)(a1 + 4);
  v19 = *(_DWORD *)a1 * v14;
  v20 = v19 / v18;
  v21 = (v14 + v19) / v18;
  MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  v67 = (char *)&v55 - v24;
  v25 = (void (*)(uint64_t, uint64_t, __n128))privBestMatchByNCCGen;
  if (v17 == 11)
    v25 = (void (*)(uint64_t, uint64_t, __n128))privBestMatchByNCCNeon;
  v61 = v25;
  if (v20 < v21)
  {
    v56 = (float32x2_t **)(v15 + 142696);
    v26 = v22 | (2 * v17);
    v66 = v15 + 95264;
    v59 = v15 + 111648;
    v60 = (_BYTE *)(v15 + 4416);
    v23.n128_u64[0] = *(_QWORD *)(v65 + 24);
    v27 = v26 + v16;
    v57 = v26 + v16;
    v58 = -(int)v16;
    v28 = v23.n128_i32[1];
    v29 = vcvt_f32_s32((int32x2_t)v23.n128_u64[0]);
    v30 = v23.n128_u32[0];
    do
    {
      v69 = -1.0;
      v34 = *(_QWORD *)(v15 + 87072 + 8 * v20);
      v35 = (int)*(float *)&v34 - v17;
      v23.n128_u32[0] = -1.0;
      if ((v35 & 0x80000000) == 0 && v35 + (int)v26 <= v30)
      {
        v36 = (int)*((float *)&v34 + 1) - v17;
        if ((v36 & 0x80000000) == 0)
        {
          v37 = *(_QWORD *)(v15 + 8 * v20 + 95264);
          v38 = (int)*(float *)&v37 - v17;
          if (v36 + (int)v26 <= v28 && v38 >= (int)v16)
          {
            v40 = (int)*((float *)&v37 + 1) - v17;
            v41 = v27 + v38 > v30 || v40 < (int)v16;
            if (!v41 && v27 + v40 <= v28)
            {
              v68 = 0;
              v61(v16, v26, v23);
              v23.n128_u64[0] = (unint64_t)vadd_f32(vrndm_f32(*(float32x2_t *)(v66 + 8 * v20)), vcvt_f32_s32(v68));
              if (v68.i32[1] > v58 && v68.i32[0] > v58 && v68.i32[0] < (int)v16 && v68.i32[1] < (int)v16)
              {
                v43 = v68.i32[0] + v16 + (v68.i32[1] + v16) * v63;
                v44 = (float *)&v67[4 * v43];
                v46 = *(v44 - 1);
                v45 = *v44;
                v47 = v44[1];
                v48 = -(float)(*v44 - (float)((float)(v46 + v47) * 0.5));
                if (v48 >= 0.0)
                {
                  v50 = *v44;
                }
                else
                {
                  v49 = (float)(v47 - v46) * 0.25;
                  v50 = v45 - (float)((float)(v49 * v49) / v48);
                  v23.n128_f32[0] = v23.n128_f32[0] - (float)(v49 / v48);
                }
                v51 = *(float *)&v67[4 * (v43 - v63)];
                v52 = *(float *)&v67[4 * v43 + 4 * v63];
                v53 = (float)((float)(v51 + v52) * 0.5) - v45;
                if (v53 < 0.0)
                {
                  v54 = (float)(v52 - v51) * 0.25;
                  v45 = v45 - (float)((float)(v54 * v54) / v53);
                  v23.n128_f32[1] = v23.n128_f32[1] - (float)(v54 / v53);
                }
                v69 = fmaxf(v50, v45);
              }
              *(_QWORD *)(v66 + 8 * v20) = v23.n128_u64[0];
              if (*v60)
                v23.n128_u64[0] = (unint64_t)vmul_f32(-[CMIDistortionModel undistortImageCoord:](*v56, vdiv_f32((float32x2_t)v23.n128_u64[0], v29)), v29);
              v27 = v57;
              v31 = *(_DWORD **)(v64 + 16);
              v32.i32[0] = v31[9];
              v33.i32[0] = v31[10];
              v32.i32[1] = v31[11];
              v33.i32[1] = v31[12];
              *(float32x2_t *)(v59 + 8 * v20) = vmla_f32(v33, (float32x2_t)v23.n128_u64[0], v32);
              v23.n128_f32[0] = v69;
            }
          }
        }
      }
      *(_DWORD *)(v15 + 119840 + 4 * v20++) = v23.n128_u32[0];
    }
    while ((_DWORD)v20 != v21);
  }
}

uint64_t privBestMatchByNCCNeon(uint64_t result, uint64_t a2, int a3, _DWORD *a4, int8x8_t *a5, uint64_t a6, uint8x8_t *a7, uint64_t a8)
{
  uint64_t v8;
  int32x4_t v9;
  uint8x8_t *v10;
  uint16x8_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint16x8_t v15;
  uint32x4_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint16x8_t v19;
  unsigned int v20;
  int32x4_t v21;
  float v22;
  float v23;
  int8x8_t v24;
  int8x8_t v25;
  uint8x8_t *v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int32x4_t v34;
  uint16x8_t v35;
  uint64_t v36;
  int32x4_t v37;
  uint8x8_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  uint16x8_t v41;
  uint32x4_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint16x8_t v50;
  float v51;
  float v52;

  v8 = a3;
  v9 = 0uLL;
  v10 = a7 + 2;
  v11 = 0uLL;
  v12 = 23;
  do
  {
    v13 = v10[-2];
    v14 = v10[-1];
    v11 = vaddw_u8(vaddw_u8(vaddw_u8(v11, v13), v14), *v10);
    v15 = vmull_u8(v13, v13);
    v16 = vaddw_high_u16(vaddw_u16((uint32x4_t)v9, *(uint16x4_t *)v15.i8), v15);
    v17 = vmull_u8(v14, v14);
    v18 = vaddw_high_u16(vaddw_u16(v16, *(uint16x4_t *)v17.i8), v17);
    v19 = vmull_u8(*v10, *v10);
    v9 = (int32x4_t)vaddw_high_u16(vaddw_u16(v18, *(uint16x4_t *)v19.i8), v19);
    v10 = (uint8x8_t *)((char *)v10 + a3);
    --v12;
  }
  while (v12);
  if ((result & 0x80000000) != 0)
  {
    v24 = 0;
    v28.i32[0] = -1.0;
  }
  else
  {
    v20 = 0;
    v21 = (int32x4_t)vpaddlq_u16(v11);
    *(float *)v21.i32 = (float)vaddq_s32((int32x4_t)vpadalq_u16((uint32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1), v11), vaddq_s32(vdupq_laneq_s32(v21, 2), vdupq_laneq_s32(v21, 3))).u32[0];
    v28 = vdupq_laneq_s32(v9, 3);
    v22 = -*(float *)v21.i32;
    v23 = (float)vaddq_s32(vaddq_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1)), vaddq_s32(vdupq_laneq_s32(v9, 2), v28)).u32[0]+ (float)((float)(*(float *)v21.i32 * *(float *)v21.i32) * -0.0018116);
    v24 = 0;
    v25.i32[1] = -(int)result;
    v26 = a7 + 2;
    v27 = -(int)result + a8 + 16;
    v28.i32[0] = -1.0;
    do
    {
      v25.i32[0] = -(int)result;
      v29 = v27;
      v30 = -(int)result;
      do
      {
        v31 = 0;
        v32 = v25.i32[1];
        v33 = v29 + (int)v8 * (uint64_t)v25.i32[1];
        v34 = 0uLL;
        v35 = 0uLL;
        v36 = 23;
        v37 = 0uLL;
        do
        {
          v38 = *(uint8x8_t *)(v33 + v31 - 16);
          v39 = *(uint8x8_t *)(v33 + v31 - 8);
          v40 = *(uint8x8_t *)(v33 + v31);
          v35 = vaddw_u8(vaddw_u8(vaddw_u8(v35, v38), v39), v40);
          v41 = vmull_u8(v38, v38);
          v42 = vaddw_high_u16(vaddw_u16((uint32x4_t)v34, *(uint16x4_t *)v41.i8), v41);
          v43 = vmull_u8(v39, v39);
          v44 = vaddw_high_u16(vaddw_u16(v42, *(uint16x4_t *)v43.i8), v43);
          v45 = vmull_u8(v40, v40);
          v34 = (int32x4_t)vaddw_high_u16(vaddw_u16(v44, *(uint16x4_t *)v45.i8), v45);
          v46 = vmull_u8(*(uint8x8_t *)((char *)&v26[-2] + v31), v38);
          v47 = vaddw_high_u16(vaddw_u16((uint32x4_t)v37, *(uint16x4_t *)v46.i8), v46);
          v48 = vmull_u8(*(uint8x8_t *)((char *)&v26[-1] + v31), v39);
          v49 = vaddw_high_u16(vaddw_u16(v47, *(uint16x4_t *)v48.i8), v48);
          v50 = vmull_u8(*(uint8x8_t *)((char *)v26 + v31), v40);
          v37 = (int32x4_t)vaddw_high_u16(vaddw_u16(v49, *(uint16x4_t *)v50.i8), v50);
          v31 += v8;
          --v36;
        }
        while (v36);
        v51 = (float)vaddlvq_u16(v35);
        v52 = v23 * (float)((float)vaddvq_s32(v34) + (float)((float)(v51 * v51) * -0.0018116));
        v35.i32[0] = 0;
        if (v52 > 0.0)
          *(float *)v35.i32 = (float)((float)vaddvq_s32(v37) + (float)((float)(v22 * v51) * 0.0018116))
                            / sqrtf(v52);
        *(_DWORD *)(a6 + 4 * v20++) = v35.i32[0];
        v24 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v28.i8), 0), v25, v24);
        if (*(float *)v35.i32 > *(float *)v28.i32)
          v28.i32[0] = v35.i32[0];
        v25.i32[0] = ++v30;
        ++v29;
      }
      while ((_DWORD)result + 1 != (_DWORD)v30);
      ++v25.i32[1];
    }
    while (v32 < (int)result);
  }
  *a4 = v28.i32[0];
  *a5 = v24;
  return result;
}

uint64_t privBestMatchByNCCGen(uint64_t result, unsigned int a2, int a3, _DWORD *a4, int8x8_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, int32x4_t a15)
{
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  float v28;
  float v29;
  int8x8_t v30;
  uint64_t v31;
  int8x16_t *v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  int8x16_t *v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  uint64_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t *v65;
  uint64_t v66;
  int32x4_t v67;
  uint64_t v68;
  int32x4_t v69;
  int v70;
  float v71;
  float v72;
  int v73;
  int8x8_t v74;
  float v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  float v97;
  float v98;
  float v99;
  unsigned int v100;
  __int32 v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int8x16_t *v114;
  uint8x16_t *v115;
  uint64_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  uint64_t v121;
  int8x16_t *v122;
  uint8x16_t *v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  uint8x16_t v131;
  uint16x8_t v132;
  uint16x8_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  int32x4_t v141;
  uint64_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  uint16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int v152;
  float v153;
  float v154;
  __int32 v155;
  int v156;
  int v157;

  if ((int)a2 < 1)
  {
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0;
    if ((result & 0x80000000) == 0)
      goto LABEL_28;
LABEL_13:
    LODWORD(a11) = -1.0;
    goto LABEL_82;
  }
  v17 = a2;
  if (a2 >= 8)
  {
    v31 = 0;
    v18 = 0;
    v19 = 0;
    v32 = (int8x16_t *)(a7 + 16);
    HIDWORD(a11) = -243;
    HIDWORD(a12) = -247;
    v33 = a7;
    while (a2 >= 0x20)
    {
      v35 = 0uLL;
      v36 = (int32x4_t)v18;
      v37 = (int32x4_t)v19;
      v38 = a2 & 0xFFFFFFE0;
      v39 = v32;
      v40 = 0uLL;
      v41 = 0uLL;
      v15 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      v44 = 0uLL;
      v45 = 0uLL;
      v46 = 0uLL;
      v47 = 0uLL;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      do
      {
        v52 = v39[-1];
        v53 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1D3305770);
        v54 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1D3305780);
        v55 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1D3305790);
        v56 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1D33057A0);
        v57 = (int32x4_t)vqtbl1q_s8(*v39, (int8x16_t)xmmword_1D3305770);
        v58 = (int32x4_t)vqtbl1q_s8(*v39, (int8x16_t)xmmword_1D3305780);
        v59 = (int32x4_t)vqtbl1q_s8(*v39, (int8x16_t)xmmword_1D3305790);
        v60 = (int32x4_t)vqtbl1q_s8(*v39, (int8x16_t)xmmword_1D33057A0);
        v40 = vaddq_s32(v40, v56);
        v35 = vaddq_s32(v35, v55);
        v36 = vaddq_s32(v36, v54);
        v41 = vaddq_s32(v41, v53);
        v43 = vaddq_s32(v43, v60);
        v42 = vaddq_s32(v42, v59);
        v15 = vaddq_s32(v15, v58);
        v44 = vaddq_s32(v44, v57);
        v47 = vmlaq_s32(v47, v53, v53);
        v46 = vmlaq_s32(v46, v56, v56);
        v45 = vmlaq_s32(v45, v55, v55);
        v37 = vmlaq_s32(v37, v54, v54);
        v51 = vmlaq_s32(v51, v57, v57);
        v39 += 2;
        v50 = vmlaq_s32(v50, v60, v60);
        v49 = vmlaq_s32(v49, v59, v59);
        v48 = vmlaq_s32(v48, v58, v58);
        v38 -= 32;
      }
      while (v38);
      v16 = vaddq_s32(v51, v47);
      v19 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v48, v37), vaddq_s32(v50, v46)), vaddq_s32(vaddq_s32(v49, v45), v16)));
      a15 = vaddq_s32(v43, v40);
      v18 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v15, v36), a15), vaddq_s32(vaddq_s32(v42, v35), vaddq_s32(v44, v41))));
      if ((a2 & 0xFFFFFFE0) == (unint64_t)a2)
        goto LABEL_15;
      v34 = a2 & 0x7FFFFFE0;
      v61 = a2 & 0xFFFFFFE0;
      if ((a2 & 0x18) != 0)
        goto LABEL_22;
      do
      {
LABEL_25:
        v70 = *(unsigned __int8 *)(v33 + v61);
        v18 += v70;
        v19 += v70 * v70;
        ++v61;
      }
      while (a2 != v61);
LABEL_15:
      ++v31;
      v32 = (int8x16_t *)((char *)v32 + a3);
      v33 += a3;
      if (v31 == a2)
        goto LABEL_27;
    }
    v34 = 0;
LABEL_22:
    v62 = 0uLL;
    v63 = (int32x4_t)v18;
    v64 = (int32x4_t)v19;
    v65 = (uint64_t *)(v33 + v34);
    v66 = v34 - (a2 & 0xFFFFFFF8);
    v67 = 0uLL;
    do
    {
      v68 = *v65++;
      v15.i64[0] = v68;
      v69 = (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1D3305780);
      v15 = (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1D3305790);
      v62 = vaddq_s32(v62, v15);
      v63 = vaddq_s32(v63, v69);
      v67 = vmlaq_s32(v67, v15, v15);
      v64 = vmlaq_s32(v64, v69, v69);
      v66 += 8;
    }
    while (v66);
    a15 = vaddq_s32(v64, v67);
    v19 = vaddvq_s32(a15);
    v18 = vaddvq_s32(vaddq_s32(v63, v62));
    v61 = a2 & 0xFFFFFFF8;
    if (v61 == a2)
      goto LABEL_15;
    goto LABEL_25;
  }
  v18 = 0;
  v19 = 0;
  v20 = (unsigned __int8 *)(a7 + 3);
  do
  {
    v21 = *(v20 - 3);
    v18 += v21;
    v19 += v21 * v21;
    if (a2 != 1)
    {
      v22 = *(v20 - 2);
      v18 += v22;
      v19 += v22 * v22;
      if (a2 != 2)
      {
        v23 = *(v20 - 1);
        v18 += v23;
        v19 += v23 * v23;
        if (a2 != 3)
        {
          v24 = *v20;
          v18 += v24;
          v19 += v24 * v24;
          if (a2 != 4)
          {
            v25 = v20[1];
            v18 += v25;
            v19 += v25 * v25;
            if (a2 != 5)
            {
              v26 = v20[2];
              v18 += v26;
              v19 += v26 * v26;
              if (a2 != 6)
              {
                v27 = v20[3];
                v18 += v27;
                v19 += v27 * v27;
              }
            }
          }
        }
      }
    }
    v20 += a3;
    --v17;
  }
  while (v17);
LABEL_27:
  v28 = (float)v19;
  v29 = (float)v18;
  v30 = 0;
  if ((result & 0x80000000) != 0)
    goto LABEL_13;
LABEL_28:
  v71 = 1.0 / (float)(int)(a2 * a2);
  v72 = v28 + (float)((float)-(float)(v29 * v29) * v71);
  v73 = -(int)result;
  v74.i32[1] = -(int)result;
  if ((int)a2 >= 1)
  {
    v75 = -v29;
    v76 = a3;
    v77 = result + 1;
    if (a2 < 8)
    {
      v78 = 0;
      v79 = a8 + v73;
      v30 = 0;
      v80 = a7 + 3;
      LODWORD(a11) = -1.0;
      do
      {
        v74.i32[0] = -(int)result;
        v81 = v79;
        v82 = v73;
        do
        {
          v83 = 0;
          v84 = 0;
          v85 = 0;
          v86 = 0;
          v87 = v74.i32[1];
          v88 = v81 + (int)v76 * (uint64_t)v74.i32[1];
          v89 = a2;
          do
          {
            v90 = *(unsigned __int8 *)(v88 + v83);
            v86 += v90;
            v85 += v90 * v90;
            v84 += v90 * *(unsigned __int8 *)(v80 + v83 - 3);
            if (a2 != 1)
            {
              v91 = *(unsigned __int8 *)(v88 + v83 + 1);
              v86 += v91;
              v85 += v91 * v91;
              v84 += v91 * *(unsigned __int8 *)(v80 + v83 - 2);
              if (a2 != 2)
              {
                v92 = *(unsigned __int8 *)(v88 + v83 + 2);
                v86 += v92;
                v85 += v92 * v92;
                v84 += v92 * *(unsigned __int8 *)(v80 + v83 - 1);
                if (a2 != 3)
                {
                  v93 = *(unsigned __int8 *)(v88 + v83 + 3);
                  v86 += v93;
                  v85 += v93 * v93;
                  v84 += v93 * *(unsigned __int8 *)(v80 + v83);
                  if (a2 != 4)
                  {
                    v94 = *(unsigned __int8 *)(v88 + v83 + 4);
                    v86 += v94;
                    v85 += v94 * v94;
                    v84 += v94 * *(unsigned __int8 *)(v80 + v83 + 1);
                    if (a2 != 5)
                    {
                      v95 = *(unsigned __int8 *)(v88 + v83 + 5);
                      v86 += v95;
                      v85 += v95 * v95;
                      v84 += v95 * *(unsigned __int8 *)(v80 + v83 + 2);
                      if (a2 != 6)
                      {
                        v96 = *(unsigned __int8 *)(v88 + v83 + 6);
                        v86 += v96;
                        v85 += v96 * v96;
                        v84 += v96 * *(unsigned __int8 *)(v80 + v83 + 3);
                      }
                    }
                  }
                }
              }
            }
            v83 += v76;
            --v89;
          }
          while (v89);
          v97 = (float)v86;
          v98 = v72 * (float)((float)v85 + (float)((float)-(float)(v97 * v97) * v71));
          a15.i32[0] = 0;
          if (v98 > 0.0)
            *(float *)a15.i32 = (float)((float)v84 + (float)((float)(v75 * v97) * v71)) / sqrtf(v98);
          *(_DWORD *)(a6 + 4 * v78++) = a15.i32[0];
          v30 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)a15.i8, *(float32x2_t *)&a11), 0), v74, v30);
          if (*(float *)a15.i32 > *(float *)&a11)
            *(float *)&a11 = *(float *)a15.i32;
          v74.i32[0] = ++v82;
          ++v81;
        }
        while (v77 != (_DWORD)v82);
        ++v74.i32[1];
      }
      while (v87 < (int)result);
      goto LABEL_82;
    }
    v104 = 0;
    v105 = a2 & 0xFFFFFFF8;
    v106 = a8 + v73;
    v30 = 0;
    LODWORD(a11) = -1.0;
LABEL_57:
    v74.i32[0] = -(int)result;
    v107 = v106;
    v108 = v73;
LABEL_61:
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = v74.i32[1];
    v114 = (int8x16_t *)(v107 + (int)v76 * (uint64_t)v74.i32[1]);
    v115 = (uint8x16_t *)a7;
    while (a2 >= 0x10)
    {
      v117 = (int32x4_t)v110;
      v118 = (int32x4_t)v111;
      v119 = (int32x4_t)v112;
      v120 = 0uLL;
      v121 = a2 & 0xFFFFFFF0;
      v122 = v114;
      v123 = v115;
      v124 = 0uLL;
      v125 = 0uLL;
      v126 = 0uLL;
      v16 = 0uLL;
      v127 = 0uLL;
      v128 = 0uLL;
      v129 = 0uLL;
      v130 = 0uLL;
      do
      {
        v131 = *v123++;
        v132 = vmovl_u8(*(uint8x8_t *)v131.i8);
        v133 = vmovl_high_u8(v131);
        v134 = *v122++;
        v135 = (int16x8_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_1D3305770);
        v136 = (int16x8_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_1D3305780);
        v137 = (int16x8_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_1D3305790);
        v138 = (int16x8_t)vqtbl1q_s8(v134, (int8x16_t)xmmword_1D33057A0);
        v129 = vaddq_s32(v129, (int32x4_t)v138);
        v128 = vaddq_s32(v128, (int32x4_t)v137);
        v119 = vaddq_s32(v119, (int32x4_t)v136);
        v130 = vaddq_s32(v130, (int32x4_t)v135);
        v127 = vmlaq_s32(v127, (int32x4_t)v135, (int32x4_t)v135);
        v16 = vmlaq_s32(v16, (int32x4_t)v138, (int32x4_t)v138);
        v126 = vmlaq_s32(v126, (int32x4_t)v137, (int32x4_t)v137);
        v118 = vmlaq_s32(v118, (int32x4_t)v136, (int32x4_t)v136);
        v139 = (uint16x8_t)vuzp1q_s16(v136, v137);
        v140 = (uint16x8_t)vuzp1q_s16(v138, v135);
        v125 = (int32x4_t)vmlal_high_u16((uint32x4_t)v125, v140, v133);
        v120 = (int32x4_t)vmlal_high_u16((uint32x4_t)v120, v139, v132);
        v124 = (int32x4_t)vmlal_u16((uint32x4_t)v124, *(uint16x4_t *)v140.i8, *(uint16x4_t *)v133.i8);
        v117 = (int32x4_t)vmlal_u16((uint32x4_t)v117, *(uint16x4_t *)v139.i8, *(uint16x4_t *)v132.i8);
        v121 -= 16;
      }
      while (v121);
      v112 = vaddvq_s32(vaddq_s32(vaddq_s32(v119, v129), vaddq_s32(v128, v130)));
      v111 = vaddvq_s32(vaddq_s32(vaddq_s32(v118, v16), vaddq_s32(v126, v127)));
      v141 = vaddq_s32(vaddq_s32(v117, v124), vaddq_s32(v120, v125));
      v110 = vaddvq_s32(v141);
      if ((a2 & 0xFFFFFFF0) == (unint64_t)a2)
        goto LABEL_62;
      v116 = a2 & 0xFFFFFFF0;
      v142 = v116;
      if ((a2 & 8) != 0)
        goto LABEL_69;
      do
      {
LABEL_72:
        v152 = v114->u8[v142];
        v112 += v152;
        v111 += v152 * v152;
        v110 += v152 * v115->u8[v142++];
      }
      while (a2 != v142);
LABEL_62:
      ++v109;
      v115 = (uint8x16_t *)((char *)v115 + v76);
      v114 = (int8x16_t *)((char *)v114 + v76);
      if (v109 == a2)
      {
        v153 = (float)v112;
        v154 = v72 * (float)((float)v111 + (float)((float)-(float)(v153 * v153) * v71));
        v141.i32[0] = 0;
        if (v154 > 0.0)
          *(float *)v141.i32 = (float)((float)v110 + (float)((float)(v75 * v153) * v71)) / sqrtf(v154);
        *(_DWORD *)(a6 + 4 * v104++) = v141.i32[0];
        v30 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v141.i8, *(float32x2_t *)&a11), 0), v74, v30);
        if (*(float *)v141.i32 > *(float *)&a11)
          *(float *)&a11 = *(float *)v141.i32;
        v74.i32[0] = ++v108;
        ++v107;
        if (v77 == (_DWORD)v108)
        {
          ++v74.i32[1];
          if (v113 >= (int)result)
            goto LABEL_82;
          goto LABEL_57;
        }
        goto LABEL_61;
      }
    }
    v116 = 0;
LABEL_69:
    v143 = (int32x4_t)v110;
    v144 = (int32x4_t)v111;
    v145 = 0uLL;
    v146 = (int32x4_t)v112;
    v147 = 0uLL;
    v148 = 0uLL;
    do
    {
      v16.i64[0] = *(uint64_t *)((char *)v114->i64 + v116);
      v149 = vmovl_u8(*(uint8x8_t *)&v115->i8[v116]);
      v150 = (int16x8_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_1D3305780);
      v151 = (int16x8_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_1D3305790);
      v148 = vaddq_s32(v148, (int32x4_t)v151);
      v146 = vaddq_s32(v146, (int32x4_t)v150);
      v147 = vmlaq_s32(v147, (int32x4_t)v151, (int32x4_t)v151);
      v144 = vmlaq_s32(v144, (int32x4_t)v150, (int32x4_t)v150);
      v16 = (int32x4_t)vuzp1q_s16(v150, v151);
      v145 = (int32x4_t)vmlal_high_u16((uint32x4_t)v145, (uint16x8_t)v16, v149);
      v143 = (int32x4_t)vmlal_u16((uint32x4_t)v143, *(uint16x4_t *)v16.i8, *(uint16x4_t *)v149.i8);
      v116 += 8;
    }
    while (v105 != v116);
    v112 = vaddvq_s32(vaddq_s32(v146, v148));
    v111 = vaddvq_s32(vaddq_s32(v144, v147));
    v141 = vaddq_s32(v143, v145);
    v110 = vaddvq_s32(v141);
    v142 = a2 & 0xFFFFFFF8;
    if (v105 == a2)
      goto LABEL_62;
    goto LABEL_72;
  }
  v99 = (float)(v71 * -0.0) + 0.0;
  v100 = 0;
  if ((float)(v72 * v99) <= 0.0)
  {
    v30 = 0;
    LODWORD(a11) = -1.0;
    LODWORD(a12) = 0;
    do
    {
      v74.i32[0] = -(int)result;
      v155 = 1 - result;
      v156 = (2 * result) | 1;
      do
      {
        v157 = v74.i32[1];
        *(_DWORD *)(a6 + 4 * v100++) = 0;
        v30 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)&a12, *(float32x2_t *)&a11), 0), v74, v30);
        if (*(float *)&a11 < 0.0)
          *(float *)&a11 = 0.0;
        v74.i32[0] = v155++;
        --v156;
      }
      while (v156);
      ++v74.i32[1];
    }
    while (v157 < (int)result);
  }
  else
  {
    *(float *)&a12 = v99 / sqrtf(v72 * v99);
    v30 = 0;
    LODWORD(a11) = -1.0;
    do
    {
      v74.i32[0] = -(int)result;
      v101 = 1 - result;
      v102 = (2 * result) | 1;
      do
      {
        v103 = v74.i32[1];
        *(_DWORD *)(a6 + 4 * v100++) = LODWORD(a12);
        v30 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)&a12, *(float32x2_t *)&a11), 0), v74, v30);
        if (*(float *)&a12 > *(float *)&a11)
          *(float *)&a11 = *(float *)&a12;
        v74.i32[0] = v101++;
        --v102;
      }
      while (v102);
      ++v74.i32[1];
    }
    while (v103 < (int)result);
  }
LABEL_82:
  *a4 = LODWORD(a11);
  *a5 = v30;
  return result;
}

unint64_t rwppRansac_execute(uint64_t a1, unsigned int a2, unsigned int a3, float32x4_t *a4)
{
  uint64_t v6;
  _DWORD *v7;
  float *v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  float v14;
  int v15;
  uint64_t v16;
  float v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  uint64_t v38;
  float v39;
  unsigned __int16 *v40;
  uint64_t v41;
  _WORD *v42;
  __int16 v43;
  unsigned int v44;
  uint64_t v45;
  float32x4_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  unsigned __int16 *v59;
  uint64_t v60;
  _WORD *v61;
  __int16 v62;
  unsigned int v63;
  uint64_t v64;
  float32x4_t v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  unint64_t v70;
  int v72;
  float32x4_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  unsigned __int16 *v77;
  _WORD *v78;
  __int16 v79;
  unsigned int v80;
  uint64_t v81;
  float32x4_t v82;
  double v83;
  double v84;
  double v85;
  unint64_t v86;
  float32x4_t v87;
  double v88;
  int v89;
  uint64_t v90;
  float v91;
  unsigned __int16 *v92;
  uint64_t v93;
  _WORD *v94;
  __int16 v95;
  unsigned int v96;
  uint64_t v97;
  float32x4_t v98;
  int v100;
  uint64_t v101;
  _DWORD *v102;
  unsigned int v103;
  uint64_t v104;
  _DWORD *v105;
  float *v106;
  uint64_t v107;
  _DWORD *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  _WORD *v115;
  _WORD *v116;
  unsigned __int16 *v117;
  __int128 v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  _QWORD v122[2];
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;

  v6 = a1;
  v7 = (_DWORD *)(a1 + 132144);
  v8 = (float *)(a1 + 123936);
  v122[0] = 0;
  v122[1] = 0;
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  v9 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
  v126 = *(float32x4_t *)MEMORY[0x1E0C83FE8];
  v127 = v9;
  v128 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 32);
  LODWORD(v122[0]) = 2;
  v123 = v126;
  v124 = v9;
  v125 = v128;
  v10 = a1 + 119840;
  v105 = (_DWORD *)(a1 + 123944);
  v11 = privGenerateAndSortScoresIndices(a1 + 119840, (_DWORD *)(a1 + 123944), a3);
  v12 = (_WORD *)v11;
  v13 = 0;
  v14 = *(float *)(v6 + 32);
  *v8 = *(float *)(v6 + 28)
      * (float)(2.0
              / fmaxf((float)*(unsigned int *)(v6 + 72 * a2 + 4536), (float)*(unsigned int *)(v6 + 72 * a2 + 4540)));
  v8[1] = 0.0;
  *v7 = 0;
  v15 = ~a3 << 10;
  v16 = 2 * a3 - 2;
  do
  {
    if (a3 == v13)
      return 0;
    v17 = *(float *)(v10 + 4 * *(unsigned __int16 *)(v11 + v16));
    ++v13;
    v15 += 1024;
    v16 -= 2;
  }
  while (v17 <= v14);
  v18 = a3 - v13;
  if (a3 - v13 + 1 < 5)
    return 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v109 = v18 + 1;
  v110 = a3 - 3 - v13;
  v103 = 998 - a3 + v13;
  v22 = v6 + 103456;
  v23 = v6 + 111648;
  v111 = (v18 + 1);
  v100 = -v15;
  v112 = 1000;
  v101 = v6 + 123948;
  v102 = (_DWORD *)(v6 + 128044);
  v107 = v6;
  v108 = v7;
  v106 = v8;
  do
  {
    if (v20 > v110)
    {
      v24 = *((unsigned int *)v8 + 1);
      if (v24 > v103)
      {
        v24 = 0;
        v8[1] = 0.0;
      }
      v25 = (unsigned __int16 *)privGenerateAndSortScoresIndices((unint64_t)&rwppRansac_randomTable + 4 * v24, v102, v109);
      v26 = *v105;
      v27 = v101 + (v26 << 11);
      v26 ^= 1uLL;
      v12 = (_WORD *)(v101 + (v26 << 11));
      *v105 = v26;
      v28 = v111;
      v29 = v12;
      do
      {
        v30 = *v25++;
        *v29++ = *(_WORD *)(v27 + 2 * v30);
        --v28;
      }
      while (v28);
      v20 = 0;
      ++*((_DWORD *)v8 + 1);
    }
    v31 = &v12[v20];
    v32 = rwppGeomTrans_estimateRigidTransform2((uint64_t)&v126, v22, v23, v31);
    if (!v37)
    {
      v113 = v21;
      v104 = *v7 ^ 1;
      v38 = v6 + (v104 << 11) + 132148;
      v39 = *v8;
      v115 = v12;
      v40 = v12;
      v41 = v111;
      v42 = (_WORD *)v38;
      do
      {
        v44 = *v40++;
        v43 = v44;
        v45 = 8 * v44;
        v46 = vaddq_f32(v128, vmlaq_lane_f32(vmulq_n_f32(v126, COERCE_FLOAT(*(_QWORD *)(v23 + v45))), v127, *(float32x2_t *)(v23 + v45), 1));
        *(float *)&v32 = hypotf(COERCE_FLOAT(*(_QWORD *)(v22 + v45)) - (float)(v46.f32[0] / v46.f32[2]), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v22 + v45))) - (float)(v46.f32[1] / v46.f32[2]));
        if (*(float *)&v32 < v39)
          *v42++ = v43;
        --v41;
      }
      while (v41);
      v47 = ((unint64_t)v42 - v38) >> 1;
      v21 = v113;
      v6 = v107;
      v7 = v108;
      v8 = v106;
      v12 = v115;
      if (v113 < v47)
      {
        *v108 = v104;
        v48 = (v100 - ((_DWORD)v47 << 10)) / v109;
        if (v48 > 0x3BA)
          v49 = 1000;
        else
          v49 = rwppCnstNumSamplesToTest_Rigid[v48];
        v112 = v49;
        LODWORD(v118) = 0;
        v21 = v47;
      }
    }
    v50 = rwppGeomTrans_estimate(v6, (uint64_t)v122, v31, 4u, 0, v32, v33, v34, v35, v36);
    if (!v55)
    {
      v114 = v21;
      v56 = *v7 ^ 1;
      v57 = v6 + (v56 << 11) + 132148;
      v58 = *v8;
      v116 = v12;
      v59 = v12;
      v60 = v111;
      v61 = (_WORD *)v57;
      do
      {
        v63 = *v59++;
        v62 = v63;
        v64 = 8 * v63;
        v65 = vaddq_f32(v125, vmlaq_lane_f32(vmulq_n_f32(v123, COERCE_FLOAT(*(_QWORD *)(v23 + v64))), v124, *(float32x2_t *)(v23 + v64), 1));
        *(float *)&v50 = hypotf(COERCE_FLOAT(*(_QWORD *)(v22 + v64)) - (float)(v65.f32[0] / v65.f32[2]), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v22 + v64))) - (float)(v65.f32[1] / v65.f32[2]));
        if (*(float *)&v50 < v58)
          *v61++ = v62;
        --v60;
      }
      while (v60);
      v66 = ((unint64_t)v61 - v57) >> 1;
      v21 = v114;
      v6 = v107;
      v7 = v108;
      v8 = v106;
      v12 = v116;
      if (v114 < v66)
      {
        *v108 = v56;
        v67 = (v100 - ((_DWORD)v66 << 10)) / v109;
        if (v67 > 0x287)
          v68 = 1000;
        else
          v68 = rwppCnstNumSamplesToTest_Homography[v67];
        v112 = v68;
        LODWORD(v118) = 2;
        v21 = v66;
      }
    }
    if (v19 + 1 >= v112)
      break;
    ++v20;
  }
  while (v19++ < 0x3E7);
  if (v21 < 4)
    return 0;
  rwppGeomTrans_estimate(v6, (uint64_t)&v118, (unsigned __int16 *)(v6 + ((unint64_t)*v7 << 11) + 132148), v21, 0, v50, v51, v52, v53, v54);
  if (v72)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  v73 = v120;
  *a4 = v119;
  a4[1] = v73;
  a4[2] = v121;
  v74 = *v7;
  v75 = *v8;
  v76 = v109;
  v117 = v12;
  v77 = v12;
  v78 = (_WORD *)(v6 + ((v74 ^ 1) << 11) + 132148);
  do
  {
    v80 = *v77++;
    v79 = v80;
    v81 = 8 * v80;
    v82 = vaddq_f32(v121, vmlaq_lane_f32(vmulq_n_f32(v119, COERCE_FLOAT(*(_QWORD *)(v23 + v81))), v120, *(float32x2_t *)(v23 + v81), 1));
    if (hypotf(COERCE_FLOAT(*(_QWORD *)(v22 + v81)) - (float)(v82.f32[0] / v82.f32[2]), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v22 + v81))) - (float)(v82.f32[1] / v82.f32[2])) < v75)*v78++ = v79;
    --v76;
  }
  while (v76);
  v86 = ((unint64_t)v78 + -v6 + -2048 * (v74 ^ 1) - 132148) >> 1;
  v70 = v21;
  if (v21 < v86)
  {
    do
    {
      v70 = v86;
      *v108 = v74 ^ 1;
      v87 = v120;
      *a4 = v119;
      a4[1] = v87;
      v88 = *(double *)v121.i64;
      a4[2] = v121;
      rwppGeomTrans_estimate(v6, (uint64_t)&v118, (unsigned __int16 *)(v6 + ((unint64_t)*v108 << 11) + 132148), v86, 0, v88, *(double *)v87.i64, v83, v84, v85);
      if (v89)
        break;
      v74 = *v108;
      v90 = v6 + ((v74 ^ 1) << 11) + 132148;
      v91 = *v106;
      v93 = v109;
      v92 = v117;
      v94 = (_WORD *)v90;
      do
      {
        v96 = *v92++;
        v95 = v96;
        v97 = 8 * v96;
        v98 = vaddq_f32(v121, vmlaq_lane_f32(vmulq_n_f32(v119, COERCE_FLOAT(*(_QWORD *)(v23 + v97))), v120, *(float32x2_t *)(v23 + v97), 1));
        if (hypotf(COERCE_FLOAT(*(_QWORD *)(v22 + v97)) - (float)(v98.f32[0] / v98.f32[2]), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v22 + v97))) - (float)(v98.f32[1] / v98.f32[2])) < v91)*v94++ = v95;
        --v93;
      }
      while (v93);
      v86 = ((unint64_t)v94 - v90) >> 1;
      v6 = v107;
    }
    while (v70 < v86);
  }
  return v70;
}

uint64_t privGenerateAndSortScoresIndices(unint64_t a1, _DWORD *a2, unsigned int a3)
{
  __int16 *v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  __int16 *v10;
  float *v11;
  int16x4_t v12;
  uint64_t v13;
  const float *v14;
  float v15;
  float v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  unsigned __int16 v28;
  float v29;
  unsigned __int16 v30;
  float v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  unsigned __int16 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  unsigned __int16 v52;
  int16x4x2_t v54;
  float32x4x2_t v55;

  v3 = (__int16 *)(a2 + 1);
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    if (v4 < 0xE
      || ((v5 = v4 >> 1, (unint64_t)v3 < a1 + 8 * v5 + 8)
        ? (v6 = (unint64_t)&a2[v5 + 2] > a1)
        : (v6 = 0),
          v6))
    {
      LOWORD(v8) = 0;
      v9 = a3;
      v10 = (__int16 *)(a2 + 1);
      v11 = (float *)a1;
    }
    else
    {
      v7 = v5 + 1;
      v8 = 2 * (v7 & 0x7FFFFFFC);
      v9 = a3 - v8;
      v10 = &v3[2 * (v7 & 0x7FFFFFFC)];
      v11 = (float *)(a1 + 8 * (v7 & 0x7FFFFFFC));
      v12 = (int16x4_t)0x6000400020000;
      v13 = v7 & 0x7FFFFFFC;
      v14 = (const float *)a1;
      do
      {
        v55 = vld2q_f32(v14);
        v14 += 8;
        *(int16x4_t *)v55.val[0].f32 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v55.val[0], v55.val[1])));
        v54.val[0] = (int16x4_t)vbsl_s8(*(int8x8_t *)v55.val[0].f32, (int8x8_t)(*(_QWORD *)&v12 | 0x1000100010001), (int8x8_t)v12);
        v54.val[1] = (int16x4_t)vbsl_s8(*(int8x8_t *)v55.val[0].f32, (int8x8_t)v12, (int8x8_t)(*(_QWORD *)&v12 | 0x1000100010001));
        vst2_s16(v3, v54);
        v3 += 8;
        v12 = vadd_s16(v12, (int16x4_t)0x8000800080008);
        v13 -= 4;
      }
      while (v13);
      if ((v7 & 0x7FFFFFFC) == v7)
        goto LABEL_20;
    }
    do
    {
      v9 -= 2;
      v15 = *v11;
      v16 = v11[1];
      v11 += 2;
      v17 = v8 | 1;
      if (v15 >= v16)
        v18 = v8;
      else
        v18 = v8 | 1;
      if (v15 < v16)
        v17 = v8;
      *v10 = v18;
      v10[1] = v17;
      v10 += 2;
      LOWORD(v8) = v8 + 2;
    }
    while (v9 > 1);
LABEL_20:
    v3 = v10;
    if (!v9)
      goto LABEL_22;
    goto LABEL_21;
  }
  LOWORD(v8) = 0;
  if (a3)
LABEL_21:
    *v3 = v8;
LABEL_22:
  if (a3 >= 3)
  {
    v19 = 0;
    v20 = 2;
    while (1)
    {
      v21 = (unsigned __int16 *)&a2[512 * v19 + 1];
      v19 ^= 1uLL;
      v22 = (unsigned __int16 *)&a2[512 * v19 + 1];
      v23 = a3;
      do
      {
        if (v20 >= v23)
          v24 = v23;
        else
          v24 = v20;
        v25 = v23 - v24;
        if (v20 >= v25)
          v26 = v25;
        else
          v26 = v20;
        v27 = &v21[v24];
        if (v24 && v26)
        {
          v28 = *v27;
          v29 = *(float *)(a1 + 4 * *v27);
          v30 = *v21;
          v31 = *(float *)(a1 + 4 * *v21);
          v32 = &v21[v24];
          v33 = v26;
          do
          {
            if (v31 >= v29)
            {
              *v22++ = v30;
              --v24;
              v35 = v21[1];
              ++v21;
              v30 = v35;
              v31 = *(float *)(a1 + 4 * v35);
              if (!v24)
                break;
            }
            else
            {
              *v22++ = v28;
              --v33;
              v34 = v32[1];
              ++v32;
              v28 = v34;
              v29 = *(float *)(a1 + 4 * v34);
            }
          }
          while (v33);
          if (!v24)
          {
LABEL_49:
            v39 = v22;
            goto LABEL_52;
          }
        }
        else
        {
          v33 = v26;
          v32 = &v21[v24];
          if (!v24)
            goto LABEL_49;
        }
        if (v24 < 0x10 || (unint64_t)((char *)v22 - (char *)v21) < 0x20)
        {
          v38 = v21;
          v39 = v22;
          do
          {
LABEL_51:
            v44 = *v38++;
            *v39++ = v44;
            --v24;
          }
          while (v24);
          goto LABEL_52;
        }
        v36 = v24;
        v37 = v24 & 0xFFFFFFF0;
        v38 = &v21[v37];
        v24 -= v37;
        v39 = &v22[v37];
        v40 = v22 + 8;
        v41 = (__int128 *)(v21 + 8);
        v42 = v37;
        do
        {
          v43 = *v41;
          *(v40 - 1) = *(v41 - 1);
          *v40 = v43;
          v40 += 2;
          v41 += 2;
          v42 -= 16;
        }
        while (v42);
        if (v37 != v36)
          goto LABEL_51;
LABEL_52:
        if (!v33)
        {
          v22 = v39;
          goto LABEL_27;
        }
        if (v33 < 0x10 || (unint64_t)((char *)v39 - (char *)v32) < 0x20)
        {
          v47 = v32;
          v22 = v39;
          do
          {
LABEL_60:
            v52 = *v47++;
            *v22++ = v52;
            --v33;
          }
          while (v33);
          goto LABEL_27;
        }
        v45 = v33;
        v46 = v33 & 0xFFFFFFF0;
        v47 = &v32[v46];
        v33 -= v46;
        v22 = &v39[v46];
        v48 = v39 + 8;
        v49 = (__int128 *)(v32 + 8);
        v50 = v46;
        do
        {
          v51 = *v49;
          *(v48 - 1) = *(v49 - 1);
          *v48 = v51;
          v48 += 2;
          v49 += 2;
          v50 -= 16;
        }
        while (v50);
        if (v46 != v45)
          goto LABEL_60;
LABEL_27:
        v21 = &v27[v26];
        v23 = v25 - v26;
      }
      while (v23);
      v20 *= 2;
      if (v20 >= a3)
        goto LABEL_63;
    }
  }
  v19 = 0;
LABEL_63:
  *a2 = v19;
  return (uint64_t)&a2[512 * v19 + 1];
}

id cmissv1_RendererTuning()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  const __CFString *v38;
  void *v39;
  _QWORD v40[5];
  _QWORD v41[5];
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v38 = CFSTR("DefaultParameters");
  v40[0] = CFSTR("CastAdjustments");
  cmissv1_RendererTuning_DefaultParameters_CastAdjustments();
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v41[0] = v37;
  v40[1] = CFSTR("Color");
  v46 = CFSTR("BWBackgroundHue");
  v47 = CFSTR("BWForegroundHue");
  v65 = &unk_1E9514770;
  v66 = &unk_1E9514590;
  v48 = CFSTR("ColorBoostScale");
  v49 = CFSTR("shadMidHighPersonMix");
  v50 = CFSTR("BlushWarm");
  v67 = &unk_1E9514780;
  v68 = &unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v65, &v46, 4);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = v34;
  v51 = CFSTR("CloudCover");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = v32;
  v52 = CFSTR("Colorful");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = v30;
  v53 = CFSTR("Cool");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = v28;
  v54 = CFSTR("DreamyHues");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = v26;
  v55 = CFSTR("Earthy");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = v24;
  v56 = CFSTR("GoldWarm");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = v22;
  v57 = CFSTR("LongGray");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v72 = v20;
  v58 = CFSTR("Neutral");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = v18;
  v59 = CFSTR("NoFilter");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v17;
  v60 = CFSTR("Standard");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = v16;
  v61 = CFSTR("StarkBW");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = v15;
  v62 = CFSTR("TanWarm");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = v0;
  v63 = CFSTR("UrbanCool");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514660;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = v1;
  v64 = CFSTR("WarmAuthentic");
  v42 = CFSTR("BWBackgroundHue");
  v43 = CFSTR("BWForegroundHue");
  v46 = (const __CFString *)&unk_1E9514770;
  v47 = (const __CFString *)&unk_1E9514590;
  v44 = CFSTR("ColorBoostScale");
  v45 = CFSTR("shadMidHighPersonMix");
  v48 = (const __CFString *)&unk_1E9514780;
  v49 = (const __CFString *)&unk_1E9514790;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v65, &v50, 15);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  v41[1] = v36;
  v40[2] = CFSTR("DefaultUserBias");
  v50 = CFSTR("BlushWarm");
  v46 = CFSTR("CastIntensity");
  v47 = CFSTR("ColorBias");
  v65 = &unk_1E95143C0;
  v66 = &unk_1E9514340;
  v48 = CFSTR("ToneBias");
  v67 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v65, &v46, 3);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = v35;
  v51 = CFSTR("CloudCover");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514460;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514620;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = v33;
  v52 = CFSTR("Colorful");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514350;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E95144E0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = v31;
  v53 = CFSTR("Cool");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514340;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = v29;
  v54 = CFSTR("DreamyHues");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514540;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E95146E0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = v27;
  v55 = CFSTR("Earthy");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E95147A0;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E95147B0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = v25;
  v56 = CFSTR("GoldWarm");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514340;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = v23;
  v57 = CFSTR("LongGray");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E9514360;
  v47 = (const __CFString *)&unk_1E9514340;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514550;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v72 = v21;
  v58 = CFSTR("Neutral");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514340;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = v19;
  v59 = CFSTR("NoFilter");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514460;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E95147C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v3;
  v60 = CFSTR("Standard");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514340;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = v4;
  v61 = CFSTR("StarkBW");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E9514360;
  v47 = (const __CFString *)&unk_1E9514340;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514530;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = v5;
  v62 = CFSTR("TanWarm");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E9514340;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = v6;
  v63 = CFSTR("UrbanCool");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E95147D0;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E95147E0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = v7;
  v64 = CFSTR("WarmAuthentic");
  v42 = CFSTR("CastIntensity");
  v43 = CFSTR("ColorBias");
  v46 = (const __CFString *)&unk_1E95143C0;
  v47 = (const __CFString *)&unk_1E95147F0;
  v44 = CFSTR("ToneBias");
  v48 = (const __CFString *)&unk_1E9514360;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v42, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v65, &v50, 15);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v41[2] = v9;
  v40[3] = CFSTR("SelectiveColor");
  cmissv1_RendererTuning_DefaultParameters_SelectiveColor();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v41[3] = v10;
  v40[4] = CFSTR("Tone");
  cmissv1_RendererTuning_DefaultParameters_Tone();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v41[4] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v39 = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id cmissv1_RendererTuning_DefaultParameters_CastAdjustments()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  _QWORD v65[15];
  _QWORD v66[15];
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  const __CFString *v72;
  const __CFString *v73;
  const __CFString *v74;
  const __CFString *v75;
  const __CFString *v76;
  const __CFString *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  const __CFString *v92;
  const __CFString *v93;
  const __CFString *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v65[0] = CFSTR("BlushWarm");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514350;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514360;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514360;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95143A0;
  v96 = &unk_1E95143B0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = v0;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v95, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v1;
  v86 = &unk_1E9514370;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514380;
  v88 = &unk_1E9514390;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v64 = (void *)objc_claimAutoreleasedReturnValue();

  v66[0] = v64;
  v65[1] = CFSTR("CloudCover");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E95143D0;
  v79 = &unk_1E95143E0;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E95143F0;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E95143C0;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514400;
  v96 = &unk_1E9514410;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v2;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514420;
  v96 = &unk_1E9514430;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514440;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v3;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514450;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v5;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514340;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  v66[1] = v63;
  v65[2] = CFSTR("Colorful");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514460;
  v79 = &unk_1E9514470;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95144A0;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v6;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95144B0;
  v96 = &unk_1E95143B0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v7;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95144C0;
  v96 = &unk_1E95144D0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v9;
  v86 = &unk_1E9514480;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514490;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v62 = (void *)objc_claimAutoreleasedReturnValue();

  v66[2] = v62;
  v65[3] = CFSTR("Cool");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E95144E0;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514360;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514360;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514510;
  v96 = &unk_1E95143B0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v10;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v11;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v12;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v13;
  v86 = &unk_1E95144F0;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514500;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v61 = (void *)objc_claimAutoreleasedReturnValue();

  v66[3] = v61;
  v65[4] = CFSTR("DreamyHues");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514460;
  v79 = &unk_1E9514530;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514540;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514550;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514570;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v14;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514580;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514590;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v15;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95145A0;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514360;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v16;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v17;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514560;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v60 = (void *)objc_claimAutoreleasedReturnValue();

  v66[4] = v60;
  v65[5] = CFSTR("Earthy");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E95145B0;
  v79 = &unk_1E95145C0;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95145F0;
  v96 = &unk_1E95143B0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v18;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514600;
  v96 = &unk_1E9514610;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514620;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v19;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v20;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v21;
  v86 = &unk_1E95145D0;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E95145E0;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v59 = (void *)objc_claimAutoreleasedReturnValue();

  v66[5] = v59;
  v65[6] = CFSTR("GoldWarm");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514350;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E95145C0;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95143A0;
  v96 = &unk_1E95143B0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = v22;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v95, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v23;
  v86 = &unk_1E9514460;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514370;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v58 = (void *)objc_claimAutoreleasedReturnValue();

  v66[6] = v58;
  v65[7] = CFSTR("LongGray");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514340;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v24;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v25;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 2);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v26;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514340;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  v66[7] = v57;
  v65[8] = CFSTR("Neutral");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E95144E0;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E95143C0;
  v81 = &unk_1E9514630;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514390;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v94 = CFSTR("Strength");
  v95 = &unk_1E95143A0;
  v96 = &unk_1E95143B0;
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v27;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514640;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v28;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514640;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v29;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v30;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514340;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  v66[8] = v56;
  v65[9] = CFSTR("NoFilter");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514340;
  v69 = CFSTR("DeRed");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v70 = CFSTR("DeRedSatReduction");
  v71 = CFSTR("DeYellow");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v72 = CFSTR("FGRotate");
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v84 = &unk_1E9514340;
  v85 = (void *)MEMORY[0x1E0C9AA60];
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v86 = &unk_1E9514340;
  v87 = &unk_1E9514340;
  v77 = CFSTR("SkinWarmth");
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v66[9] = v55;
  v65[10] = CFSTR("Standard");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514340;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v31;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v32;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 2);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v33;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514340;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v54 = (void *)objc_claimAutoreleasedReturnValue();

  v66[10] = v54;
  v65[11] = CFSTR("StarkBW");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514650;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v34;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v35;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514520;
  v96 = &unk_1E9514340;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v36;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v37;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514340;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v53 = (void *)objc_claimAutoreleasedReturnValue();

  v66[11] = v53;
  v65[12] = CFSTR("TanWarm");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514350;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514360;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95143A0;
  v96 = &unk_1E95143B0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = v38;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v95, 1);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v39;
  v86 = &unk_1E9514560;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514660;
  v88 = &unk_1E9514630;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v52 = (void *)objc_claimAutoreleasedReturnValue();

  v66[12] = v52;
  v65[13] = CFSTR("UrbanCool");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E9514560;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E9514340;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514670;
  v96 = &unk_1E9514680;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514360;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v40;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514690;
  v96 = &unk_1E95146A0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514360;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v41;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95146B0;
  v96 = &unk_1E95146C0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514360;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v42;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v43;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514460;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  v66[13] = v44;
  v65[14] = CFSTR("WarmAuthentic");
  v67 = CFSTR("BGRotate");
  v68 = CFSTR("BGWarmth");
  v78 = &unk_1E9514340;
  v79 = &unk_1E95146D0;
  v69 = CFSTR("DeRed");
  v70 = CFSTR("DeRedSatReduction");
  v80 = &unk_1E9514340;
  v81 = &unk_1E9514340;
  v71 = CFSTR("DeYellow");
  v72 = CFSTR("FGRotate");
  v82 = &unk_1E95146E0;
  v83 = &unk_1E9514340;
  v84 = &unk_1E9514340;
  v73 = CFSTR("FGWarmth");
  v74 = CFSTR("HueProtection");
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E95146F0;
  v96 = &unk_1E95143B0;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514700;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v45;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514710;
  v96 = &unk_1E9514720;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514730;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v46;
  v92 = CFSTR("Hue");
  v93 = CFSTR("Range");
  v95 = &unk_1E9514740;
  v96 = &unk_1E9514750;
  v94 = CFSTR("Strength");
  v97 = &unk_1E9514760;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v92, 3);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v47;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v89, 3);
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v48;
  v86 = &unk_1E9514340;
  v75 = CFSTR("PersonRotate");
  v76 = CFSTR("PersonWarmth");
  v77 = CFSTR("SkinWarmth");
  v87 = &unk_1E9514340;
  v88 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v67, 11);
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  v66[14] = v49;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, v65, 15);
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  return v50;
}

id cmissv1_RendererTuning_DefaultParameters_SelectiveColor()
{
  __CFString *v0;
  __CFString *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  __CFString *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  __CFString *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  __CFString *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  __CFString *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  __CFString *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  __CFString *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  _QWORD v153[15];
  _QWORD v154[15];
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  const __CFString *v175;
  const __CFString *v176;
  const __CFString *v177;
  const __CFString *v178;
  const __CFString *v179;
  const __CFString *v180;
  const __CFString *v181;
  const __CFString *v182;
  const __CFString *v183;
  const __CFString *v184;
  const __CFString *v185;
  const __CFString *v186;
  const __CFString *v187;
  const __CFString *v188;
  const __CFString *v189;
  const __CFString *v190;
  const __CFString *v191;
  const __CFString *v192;
  const __CFString *v193;
  const __CFString *v194;
  const __CFString *v195;
  const __CFString *v196;
  const __CFString *v197;
  const __CFString *v198;
  const __CFString *v199;
  const __CFString *v200;
  const __CFString *v201;
  const __CFString *v202;
  const __CFString *v203;
  const __CFString *v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v153[0] = CFSTR("BlushWarm");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514800;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514810;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514820;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514830;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9514840;
  v166 = &unk_1E9514630;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v0 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v175 = v0;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514850;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514860;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514340;
  v164 = &unk_1E9514830;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9514340;
  v166 = &unk_1E9514340;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514340;
  v204 = CFSTR("Sky");
  v169 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v176 = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v175, 2);
  v152 = (void *)objc_claimAutoreleasedReturnValue();

  v154[0] = v152;
  v153[1] = CFSTR("CloudCover");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514870;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514380;
  v158 = &unk_1E9514880;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E95143D0;
  v196 = CFSTR("Luminance");
  v161 = &unk_1E9514500;
  v162 = &unk_1E9514340;
  v197 = CFSTR("Midtones");
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95148A0;
  v166 = &unk_1E95148B0;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v149;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E95148C0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E95148D0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514650;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95148E0;
  v201 = (const __CFString *)&unk_1E95148F0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  v156 = v146;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514900;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514500;
  v193 = (const __CFString *)&unk_1E9514910;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E95144F0;
  v195 = (const __CFString *)&unk_1E9514920;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514650;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514930;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514860;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = v143;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514940;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514950;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514960;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514970;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v139 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = v139;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514980;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514990;
  v193 = (const __CFString *)&unk_1E95149A0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E95149B0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95149C0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E95149D0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95149E0;
  v201 = (const __CFString *)&unk_1E95149F0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  v159 = v134;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A00;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A10;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A20;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = v128;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A30;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514A40;
  v193 = (const __CFString *)&unk_1E9514A50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514A60;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A70;
  v201 = (const __CFString *)&unk_1E9514A80;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = v122;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A90;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AA0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AB0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  v162 = v116;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AC0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AD0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AE0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = v110;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AF0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B00;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B10;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = v105;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B20;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B30;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B40;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = v100;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B50;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B60;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B70;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = v94;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B80;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B90;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BA0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v167 = v88;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BB0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BC0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BD0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = v82;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BE0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BF0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v200 = (const __CFString *)&unk_1E9514C00;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v201 = (const __CFString *)&unk_1E9514340;
  v202 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v203 = (const __CFString *)&unk_1E9514660;
  v204 = (const __CFString *)&unk_1E95143C0;
  v189 = CFSTR("Sky");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v76;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C10;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C20;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C30;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v70;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C40;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C60;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v171 = v64;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C70;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C80;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C90;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = v58;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514CA0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514CB0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514CC0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v173 = v2;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514CA0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514CB0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514CC0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v174 = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 20);
  v151 = (void *)objc_claimAutoreleasedReturnValue();

  v154[1] = v151;
  v153[2] = CFSTR("Colorful");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514870;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514880;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514CD0;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514CE0;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E95145D0;
  v164 = &unk_1E9514CF0;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95148A0;
  v166 = &unk_1E9514540;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514630;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v147;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E95148C0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E95148D0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514A40;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514960;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514D00;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95148E0;
  v201 = (const __CFString *)&unk_1E9514540;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v156 = v144;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514340;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514D10;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514D20;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95143D0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514D30;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514D40;
  v201 = (const __CFString *)&unk_1E95145B0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = v140;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514940;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514950;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514CD0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514650;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514D50;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514970;
  v201 = (const __CFString *)&unk_1E9514D60;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = v135;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514980;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E95149A0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514D70;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514D80;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95149E0;
  v201 = (const __CFString *)&unk_1E9514D90;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v159 = v129;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A00;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A10;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514DA0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514DB0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514DC0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A20;
  v201 = (const __CFString *)&unk_1E9514790;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = v123;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A30;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514630;
  v193 = (const __CFString *)&unk_1E9514A50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514DA0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A70;
  v201 = (const __CFString *)&unk_1E9514660;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514340;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = v117;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514DD0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514DE0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514DF0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514E00;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514E10;
  v201 = (const __CFString *)&unk_1E9514660;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v162 = v111;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A90;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AA0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514480;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514E20;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AB0;
  v201 = (const __CFString *)&unk_1E9514960;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = v106;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AC0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AD0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514E30;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514E40;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AE0;
  v201 = (const __CFString *)&unk_1E9514E50;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = v101;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AF0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B00;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B10;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = v95;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B20;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B30;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B40;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = v89;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B50;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B60;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B70;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v167 = v83;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B80;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B90;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BA0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = v77;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BB0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BC0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514E60;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BD0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v71;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BE0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BF0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514500;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C00;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v65;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C10;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C20;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C30;
  v201 = (const __CFString *)&unk_1E9514660;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v171 = v59;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C40;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v199 = (const __CFString *)&unk_1E9514890;
  v200 = (const __CFString *)&unk_1E9514C60;
  v201 = (const __CFString *)&unk_1E9514340;
  v202 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v203 = (const __CFString *)&unk_1E9514660;
  v204 = (const __CFString *)&unk_1E95143C0;
  v189 = CFSTR("Sky");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = v53;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C70;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C80;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C90;
  v201 = (const __CFString *)&unk_1E95143F0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v173 = v4;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514CA0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514CB0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514CC0;
  v201 = (const __CFString *)&unk_1E9514790;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v174 = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 20);
  v150 = (void *)objc_claimAutoreleasedReturnValue();

  v154[2] = v150;
  v153[3] = CFSTR("Cool");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514E70;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514E80;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95143C0;
  v166 = &unk_1E9514340;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 1);
  v148 = (void *)objc_claimAutoreleasedReturnValue();

  v154[3] = v148;
  v153[4] = CFSTR("DreamyHues");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514870;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514880;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514660;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95148A0;
  v166 = &unk_1E9514660;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v141;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E95148C0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E95148D0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514E90;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514660;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95148E0;
  v201 = (const __CFString *)&unk_1E9514630;
  v202 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v203 = (const __CFString *)&unk_1E9514660;
  v204 = (const __CFString *)&unk_1E95143C0;
  v189 = CFSTR("Sky");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  v156 = v136;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514900;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514910;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514EA0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95148F0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514EB0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514930;
  v201 = (const __CFString *)&unk_1E9514E90;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = v130;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514940;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514950;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514920;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514EC0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514970;
  v201 = (const __CFString *)&unk_1E9514ED0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = v124;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514980;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514380;
  v193 = (const __CFString *)&unk_1E95149A0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E95148F0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514EE0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514EF0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95149E0;
  v201 = (const __CFString *)&unk_1E95145B0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  v159 = v118;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A00;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A10;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514F00;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95147D0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A20;
  v201 = (const __CFString *)&unk_1E95148F0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = v112;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A30;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514E40;
  v193 = (const __CFString *)&unk_1E9514A50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514F10;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514E30;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A70;
  v201 = (const __CFString *)&unk_1E9514380;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = v107;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514DD0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514DE0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514660;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514DA0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514E10;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v162 = v102;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A90;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AA0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514F20;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514F30;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AB0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = v96;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AC0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AD0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AE0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = v90;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AF0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B00;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514360;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95148F0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514F40;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B10;
  v201 = (const __CFString *)&unk_1E9514660;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = v84;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B20;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B30;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514F50;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95147D0;
  v197 = (const __CFString *)&unk_1E9514EE0;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514F60;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B40;
  v201 = (const __CFString *)&unk_1E9514F70;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = v78;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B50;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514F80;
  v193 = (const __CFString *)&unk_1E9514B60;
  v194 = (const __CFString *)&unk_1E9514340;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v195 = (const __CFString *)&unk_1E9514F50;
  v196 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v197 = (const __CFString *)&unk_1E9514340;
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B70;
  v201 = (const __CFString *)&unk_1E9514540;
  v202 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v203 = (const __CFString *)&unk_1E9514660;
  v204 = (const __CFString *)&unk_1E95143C0;
  v189 = CFSTR("Sky");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v167 = v72;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B80;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B90;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514360;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514E90;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514F90;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BA0;
  v201 = (const __CFString *)&unk_1E9514A80;
  v202 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v203 = (const __CFString *)&unk_1E9514660;
  v204 = (const __CFString *)&unk_1E95143C0;
  v189 = CFSTR("Sky");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = v66;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BB0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BC0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514FA0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BD0;
  v201 = (const __CFString *)&unk_1E9514EE0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v60;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BE0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BF0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514700;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514540;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514FB0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C00;
  v201 = (const __CFString *)&unk_1E9514920;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v54;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C10;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C20;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C30;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v171 = v49;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C40;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514EE0;
  v195 = (const __CFString *)&unk_1E9514FC0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95143D0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514FD0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C60;
  v201 = (const __CFString *)&unk_1E95147D0;
  v202 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v203 = (const __CFString *)&unk_1E9514660;
  v204 = (const __CFString *)&unk_1E95143C0;
  v189 = CFSTR("Sky");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = v45;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C70;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C80;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C90;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v173 = v7;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514CA0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514CB0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514CC0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v174 = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 20);
  v145 = (void *)objc_claimAutoreleasedReturnValue();

  v154[4] = v145;
  v153[5] = CFSTR("Earthy");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514FE0;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514E40;
  v158 = &unk_1E9514FF0;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514550;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514DA0;
  v162 = &unk_1E9514E30;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9515000;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95143C0;
  v166 = &unk_1E9514590;
  v202 = CFSTR("Shadows");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v203 = CFSTR("Skin");
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v137 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v175 = v137;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514EE0;
  v158 = &unk_1E9515010;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514560;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9515020;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9515030;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95143C0;
  v166 = &unk_1E9514630;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v131 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v176 = v131;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514630;
  v158 = &unk_1E9515040;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9515050;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9515060;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95143C0;
  v166 = &unk_1E9514460;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v125 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v177 = v125;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9515070;
  v158 = &unk_1E9515080;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514460;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9515090;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9514340;
  v166 = &unk_1E9514660;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514630;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v119 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v178 = v119;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E95143C0;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E95144F0;
  v158 = &unk_1E95150A0;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E95150B0;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514550;
  v164 = &unk_1E95150C0;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9514340;
  v166 = &unk_1E95144E0;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v113 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v179 = v113;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E95143C0;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E95150D0;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E95150E0;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E95146E0;
  v164 = &unk_1E95150F0;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9515100;
  v166 = &unk_1E9515110;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v180 = v9;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9515120;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9515130;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E95148F0;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9514340;
  v166 = &unk_1E9514340;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v181 = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v175, 7);
  v142 = (void *)objc_claimAutoreleasedReturnValue();

  v154[5] = v142;
  v153[6] = CFSTR("GoldWarm");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E9514340;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9515140;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514860;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E95143C0;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9515150;
  v166 = &unk_1E9514660;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E95143C0;
  v204 = CFSTR("Sky");
  v169 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v132;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E9515160;
  v191 = (const __CFString *)&unk_1E9514340;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9515140;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514860;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514830;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9515150;
  v201 = (const __CFString *)&unk_1E9514DB0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  v156 = v126;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514340;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9515170;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514990;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514340;
  v199 = (const __CFString *)&unk_1E9515180;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514340;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514340;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = v120;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514940;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514950;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514970;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = v114;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514980;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E95149A0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95149E0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  v159 = v108;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A00;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A10;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A20;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = v103;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A30;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A70;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = v97;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514DD0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514DE0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514E10;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v162 = v91;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A90;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AA0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AB0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = v85;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AC0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AD0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AE0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = v79;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AF0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B00;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B10;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = v73;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B20;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B30;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B40;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = v67;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B50;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B60;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B70;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v167 = v61;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B80;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B90;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BA0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = v55;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BB0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BC0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BD0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v50;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BE0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BF0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C00;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v46;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C10;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C20;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C30;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v171 = v42;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C40;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C60;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = v11;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C70;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C80;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C90;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v173 = v12;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514CA0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514CB0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514CC0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v174 = v13;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 20);
  v138 = (void *)objc_claimAutoreleasedReturnValue();

  v154[6] = v138;
  v153[7] = CFSTR("LongGray");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514E70;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514E80;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95143C0;
  v166 = &unk_1E9514340;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v204 = CFSTR("Sky");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v14;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 1);
  v133 = (void *)objc_claimAutoreleasedReturnValue();

  v154[7] = v133;
  v153[8] = CFSTR("Neutral");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E9514340;
  v156 = &unk_1E9515190;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E95151A0;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514340;
  v164 = &unk_1E9514340;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95151B0;
  v166 = &unk_1E9514340;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514340;
  v204 = CFSTR("Sky");
  v169 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v15;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 1);
  v127 = (void *)objc_claimAutoreleasedReturnValue();

  v154[8] = v127;
  v153[9] = CFSTR("NoFilter");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514E70;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514E80;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v198 = CFSTR("Person");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95143C0;
  v166 = &unk_1E9514340;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v16;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 1);
  v121 = (void *)objc_claimAutoreleasedReturnValue();

  v154[9] = v121;
  v153[10] = CFSTR("Standard");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514E70;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514E80;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v200 = CFSTR("Red");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v201 = CFSTR("Saturation");
  v202 = CFSTR("Shadows");
  v165 = &unk_1E95143C0;
  v166 = &unk_1E9514340;
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v203 = CFSTR("Skin");
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v17;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 1);
  v115 = (void *)objc_claimAutoreleasedReturnValue();

  v154[10] = v115;
  v153[11] = CFSTR("StarkBW");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E95151C0;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514360;
  v158 = &unk_1E95151D0;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514340;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E95151E0;
  v162 = &unk_1E9514340;
  v163 = &unk_1E9514340;
  v164 = &unk_1E95151F0;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9515200;
  v166 = &unk_1E9514340;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514340;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v18;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 1);
  v109 = (void *)objc_claimAutoreleasedReturnValue();

  v154[11] = v109;
  v153[12] = CFSTR("TanWarm");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E9514340;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9515140;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514860;
  v196 = CFSTR("Luminance");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v197 = CFSTR("Midtones");
  v198 = CFSTR("Person");
  v163 = &unk_1E95143C0;
  v164 = &unk_1E9514890;
  v199 = CFSTR("Range");
  v200 = CFSTR("Red");
  v165 = &unk_1E9515150;
  v166 = &unk_1E9514660;
  v201 = CFSTR("Saturation");
  v202 = CFSTR("Shadows");
  v167 = &unk_1E9514340;
  v168 = &unk_1E95143C0;
  v203 = CFSTR("Skin");
  v204 = CFSTR("Sky");
  v169 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v98 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v175 = v98;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E9515160;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9515140;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514860;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514830;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E9515150;
  v166 = &unk_1E9514DB0;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v176 = v19;
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514340;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9515170;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514990;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514340;
  v164 = &unk_1E9515180;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v202 = CFSTR("Shadows");
  v165 = &unk_1E9514340;
  v166 = &unk_1E9514340;
  v203 = CFSTR("Skin");
  v204 = CFSTR("Sky");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514340;
  v169 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v177 = v20;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v175, 3);
  v104 = (void *)objc_claimAutoreleasedReturnValue();

  v154[12] = v104;
  v153[13] = CFSTR("UrbanCool");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514870;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514880;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514E60;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514340;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9515210;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95148A0;
  v166 = &unk_1E95143D0;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v92;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E95148C0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514660;
  v193 = (const __CFString *)&unk_1E95148D0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514460;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9515220;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95148E0;
  v201 = (const __CFString *)&unk_1E95147A0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v156 = v86;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514900;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514460;
  v193 = (const __CFString *)&unk_1E9514910;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E95149F0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514930;
  v201 = (const __CFString *)&unk_1E9515230;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = v80;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514940;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514950;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514970;
  v201 = (const __CFString *)&unk_1E9514560;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = v74;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514980;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E95149A0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514590;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95149E0;
  v201 = (const __CFString *)&unk_1E9514500;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v159 = v68;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A00;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A10;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514920;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A20;
  v201 = (const __CFString *)&unk_1E9514560;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = v62;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A30;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9515240;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95143D0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A70;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = v56;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A90;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AA0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AB0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v162 = v51;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AC0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AD0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E95144E0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AE0;
  v201 = (const __CFString *)&unk_1E9514DB0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = v47;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AF0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B00;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B10;
  v201 = (const __CFString *)&unk_1E9514460;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = v43;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B20;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B30;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B40;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = v40;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B50;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B60;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B70;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = v38;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B80;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B90;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BA0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v167 = v36;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BB0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BC0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BD0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = v34;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BE0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BF0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C00;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v32;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C10;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9515070;
  v193 = (const __CFString *)&unk_1E9514C20;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9515250;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C30;
  v201 = (const __CFString *)&unk_1E9514380;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514590;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v30;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C40;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C60;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v171 = v21;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C70;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C80;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C90;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = v22;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514CA0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514CB0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514CC0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v173 = v23;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 19);
  v99 = (void *)objc_claimAutoreleasedReturnValue();

  v154[13] = v99;
  v153[14] = CFSTR("WarmAuthentic");
  v190 = CFSTR("Background");
  v191 = CFSTR("Blue");
  v155 = &unk_1E95143C0;
  v156 = &unk_1E9514870;
  v192 = CFSTR("Gamma");
  v193 = CFSTR("Green");
  v157 = &unk_1E9514340;
  v158 = &unk_1E9514880;
  v194 = CFSTR("Highlights");
  v195 = CFSTR("Hue");
  v159 = &unk_1E9514340;
  v160 = &unk_1E9514E40;
  v196 = CFSTR("Luminance");
  v197 = CFSTR("Midtones");
  v161 = &unk_1E9514500;
  v162 = &unk_1E9514340;
  v198 = CFSTR("Person");
  v199 = CFSTR("Range");
  v163 = &unk_1E9514660;
  v164 = &unk_1E9514890;
  v200 = CFSTR("Red");
  v201 = CFSTR("Saturation");
  v165 = &unk_1E95148A0;
  v166 = &unk_1E9514D70;
  v202 = CFSTR("Shadows");
  v203 = CFSTR("Skin");
  v167 = &unk_1E9514340;
  v168 = &unk_1E9514660;
  v204 = CFSTR("Sky");
  v169 = &unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v155, &v190, 15);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = v93;
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E95148C0;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E95145E0;
  v193 = (const __CFString *)&unk_1E95148D0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514480;
  v195 = (const __CFString *)&unk_1E9514630;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9515260;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95148E0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514360;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v156 = v87;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514900;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514910;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514630;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514630;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514930;
  v201 = (const __CFString *)&unk_1E9514630;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = v81;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514940;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514660;
  v193 = (const __CFString *)&unk_1E9514950;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514CE0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514970;
  v201 = (const __CFString *)&unk_1E9514500;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = v75;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514980;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E95149A0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9515230;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514560;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E95149E0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v159 = v69;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A00;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A10;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A20;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = v63;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A30;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514A50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9515270;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E95148F0;
  v197 = (const __CFString *)&unk_1E9514460;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514A70;
  v201 = (const __CFString *)&unk_1E95150E0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = v57;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514A90;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AA0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AB0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v162 = v52;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AC0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514AD0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E95147A0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514500;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514AE0;
  v201 = (const __CFString *)&unk_1E9514A40;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = v48;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514AF0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B00;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514660;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B10;
  v201 = (const __CFString *)&unk_1E9514660;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = v44;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B20;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B30;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B40;
  v201 = (const __CFString *)&unk_1E9514660;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = v41;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B50;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B60;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514660;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514B70;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = v39;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514B80;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514B90;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514500;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BA0;
  v201 = (const __CFString *)&unk_1E9514ED0;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v167 = v37;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BB0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BC0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514660;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9515280;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514BD0;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = v35;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514BE0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514BF0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9515290;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E95152A0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C00;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v33;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C10;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C20;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514540;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514F70;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E95152B0;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C30;
  v201 = (const __CFString *)&unk_1E9514630;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v31;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C40;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C50;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514DB0;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E95143C0;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C60;
  v201 = (const __CFString *)&unk_1E9514500;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v171 = v29;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514C70;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514C80;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9514340;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514340;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514C90;
  v201 = (const __CFString *)&unk_1E9514340;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = v24;
  v175 = CFSTR("Background");
  v176 = CFSTR("Blue");
  v190 = (const __CFString *)&unk_1E95143C0;
  v191 = (const __CFString *)&unk_1E9514CA0;
  v177 = CFSTR("Gamma");
  v178 = CFSTR("Green");
  v192 = (const __CFString *)&unk_1E9514340;
  v193 = (const __CFString *)&unk_1E9514CB0;
  v179 = CFSTR("Highlights");
  v180 = CFSTR("Hue");
  v194 = (const __CFString *)&unk_1E9514340;
  v195 = (const __CFString *)&unk_1E9515110;
  v181 = CFSTR("Luminance");
  v182 = CFSTR("Midtones");
  v196 = (const __CFString *)&unk_1E9514DB0;
  v197 = (const __CFString *)&unk_1E9514340;
  v183 = CFSTR("Person");
  v184 = CFSTR("Range");
  v198 = (const __CFString *)&unk_1E9514660;
  v199 = (const __CFString *)&unk_1E9514890;
  v185 = CFSTR("Red");
  v186 = CFSTR("Saturation");
  v200 = (const __CFString *)&unk_1E9514CC0;
  v201 = (const __CFString *)&unk_1E9514500;
  v187 = CFSTR("Shadows");
  v188 = CFSTR("Skin");
  v202 = (const __CFString *)&unk_1E9514340;
  v203 = (const __CFString *)&unk_1E9514660;
  v189 = CFSTR("Sky");
  v204 = (const __CFString *)&unk_1E95143C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v175, 15);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v173 = v25;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v155, 19);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v154[14] = v26;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v154, v153, 15);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  return v27;
}

id cmissv1_RendererTuning_DefaultParameters_Tone()
{
  void *v0;
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[15];
  _QWORD v18[15];
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  const __CFString *v72;
  const __CFString *v73;
  const __CFString *v74;
  const __CFString *v75;
  const __CFString *v76;
  const __CFString *v77;
  const __CFString *v78;
  const __CFString *v79;
  const __CFString *v80;
  const __CFString *v81;
  const __CFString *v82;
  const __CFString *v83;
  const __CFString *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v17[0] = CFSTR("BlushWarm");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v16;
  v17[1] = CFSTR("CloudCover");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v15;
  v17[2] = CFSTR("Colorful");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[2] = v14;
  v17[3] = CFSTR("Cool");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v18[3] = v13;
  v17[4] = CFSTR("DreamyHues");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18[4] = v12;
  v17[5] = CFSTR("Earthy");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v18[5] = v11;
  v17[6] = CFSTR("GoldWarm");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v18[6] = v10;
  v17[7] = CFSTR("LongGray");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18[7] = v9;
  v17[8] = CFSTR("Neutral");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v18[8] = v8;
  v17[9] = CFSTR("NoFilter");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18[9] = v7;
  v17[10] = CFSTR("Standard");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v17[11] = CFSTR("StarkBW");
  v85 = &unk_1E9515330;
  v18[10] = v6;
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v86 = &unk_1E9515340;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18[11] = v5;
  v17[12] = CFSTR("TanWarm");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18[12] = v4;
  v17[13] = CFSTR("UrbanCool");
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v92 = &unk_1E95152C0;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v112 = &unk_1E9514630;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v114 = &unk_1E9514340;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = CFSTR("ColorCubeToneBiasMaxGamma");
  v20 = CFSTR("ColorCubeToneBiasMinGamma");
  v21 = CFSTR("ToneMinusContrastMax");
  v22 = CFSTR("ToneMinusContrastScale");
  v23 = CFSTR("ToneMinusExposure");
  v24 = CFSTR("ToneMinusFGScale");
  v25 = CFSTR("ToneMinusLTMRatio");
  v26 = CFSTR("ToneMinusMids");
  v91 = &unk_1E9515300;
  v27 = CFSTR("ToneMinusPersonContrastMax");
  v28 = CFSTR("ToneMinusPersonContrastScale");
  v93 = &unk_1E9514DB0;
  v94 = &unk_1E9514530;
  v29 = CFSTR("ToneMinusPersonExposure");
  v30 = CFSTR("ToneMinusPersonSatScale");
  v31 = CFSTR("ToneMinusPersonSmartContrastScale");
  v32 = CFSTR("TonePlusBGContrast");
  v33 = CFSTR("TonePlusExposure");
  v34 = CFSTR("TonePlusFGScale");
  v35 = CFSTR("TonePlusPersonSatScale");
  v36 = CFSTR("defaultContrastBump");
  v37 = CFSTR("defaultLightenBump");
  v38 = CFSTR("defaultMidsBump");
  v39 = CFSTR("defaultSatBump");
  v40 = CFSTR("dfContrastBump");
  v41 = CFSTR("dfLightenBump");
  v42 = CFSTR("dfLowLightContrastBump");
  v43 = CFSTR("dfLowLightLightenBump");
  v44 = CFSTR("dfLowLightMax");
  v109 = &unk_1E9514360;
  v110 = &unk_1E9515310;
  v45 = CFSTR("dfLowLightMidsBump");
  v46 = CFSTR("dfLowLightSatBump");
  v111 = &unk_1E9514380;
  v47 = CFSTR("dfLowLightStarts");
  v48 = CFSTR("dfMidsBump");
  v113 = &unk_1E9515320;
  v49 = CFSTR("dfSatBump");
  v50 = CFSTR("digitalFlashContrastBump");
  v51 = CFSTR("digitalFlashLightenBump");
  v52 = CFSTR("digitalFlashMidsBump");
  v53 = CFSTR("digitalFlashSatBump");
  v54 = CFSTR("foodColorScale");
  v55 = CFSTR("foodIntensityScale");
  v56 = CFSTR("foodToneScale");
  v57 = CFSTR("longGrayLiftMix");
  v58 = CFSTR("sfdContrastBump");
  v59 = CFSTR("sfdLightenBump");
  v60 = CFSTR("sfdMidsBump");
  v61 = CFSTR("sfdSatBump");
  v62 = CFSTR("starkBWBackgroundBlue");
  v63 = CFSTR("starkBWBackgroundGreen");
  v64 = CFSTR("starkBWBackgroundRed");
  v65 = CFSTR("starkBWWhitesMax");
  v66 = CFSTR("sunsetColorScale");
  v67 = CFSTR("sunsetIntensityScale");
  v68 = CFSTR("sunsetToneScale");
  v17[14] = CFSTR("WarmAuthentic");
  v18[13] = v0;
  v85 = &unk_1E95152C0;
  v86 = &unk_1E95152D0;
  v87 = &unk_1E9514590;
  v88 = &unk_1E9515240;
  v89 = &unk_1E95152E0;
  v90 = &unk_1E95152F0;
  v92 = &unk_1E95152C0;
  v95 = &unk_1E95152E0;
  v96 = &unk_1E95143C0;
  v97 = &unk_1E9514340;
  v98 = &unk_1E9514460;
  v99 = &unk_1E9514540;
  v100 = &unk_1E95152F0;
  v101 = &unk_1E95143C0;
  v102 = &unk_1E9514630;
  v103 = &unk_1E9514340;
  v104 = &unk_1E9514340;
  v105 = &unk_1E9514340;
  v106 = &unk_1E9514630;
  v107 = &unk_1E9514340;
  v108 = &unk_1E9514660;
  v112 = &unk_1E9514630;
  v114 = &unk_1E9514340;
  v115 = &unk_1E9514340;
  v116 = &unk_1E9514340;
  v117 = &unk_1E9514340;
  v118 = &unk_1E9514340;
  v119 = &unk_1E9514340;
  v120 = &unk_1E95143C0;
  v121 = &unk_1E95143C0;
  v122 = &unk_1E9515160;
  v123 = &unk_1E9515160;
  v124 = &unk_1E9514630;
  v125 = &unk_1E9514340;
  v126 = &unk_1E9514340;
  v127 = &unk_1E9514340;
  v128 = &unk_1E9514590;
  v129 = &unk_1E9514540;
  v130 = &unk_1E95147F0;
  v131 = &unk_1E95143C0;
  v132 = &unk_1E95143C0;
  v133 = &unk_1E95143C0;
  v134 = &unk_1E95143C0;
  v69 = CFSTR("swfrContrastBump");
  v70 = CFSTR("swfrLightenBump");
  v135 = &unk_1E9514630;
  v136 = &unk_1E9514340;
  v71 = CFSTR("swfrMidsBump");
  v72 = CFSTR("swfrSatBump");
  v137 = &unk_1E9514340;
  v138 = &unk_1E9514340;
  v73 = CFSTR("ubContrastBump");
  v74 = CFSTR("ubLightenBump");
  v139 = &unk_1E9514630;
  v140 = &unk_1E9514340;
  v75 = CFSTR("ubMidsBump");
  v76 = CFSTR("ubSatBump");
  v141 = &unk_1E9514340;
  v142 = &unk_1E9514340;
  v77 = CFSTR("videoContrastBump");
  v78 = CFSTR("videoLightenBump");
  v143 = &unk_1E9514630;
  v144 = &unk_1E9514340;
  v79 = CFSTR("videoMidsBump");
  v80 = CFSTR("videoSatBump");
  v145 = &unk_1E9514340;
  v146 = &unk_1E9514340;
  v81 = CFSTR("wysContrastBump");
  v82 = CFSTR("wysLightenBump");
  v147 = &unk_1E9514630;
  v148 = &unk_1E9514340;
  v83 = CFSTR("wysMidsBump");
  v149 = &unk_1E9514340;
  v84 = CFSTR("wysSatBump");
  v150 = &unk_1E9514340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v19, 66);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v18[14] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 15);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1D32B3BD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D32B460C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

vImage_Error bfpn_create_correction_model_from_fdr(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer **a3, _QWORD *a4)
{
  __CVBuffer *v4;
  __CVBuffer *v5;
  _DWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  __CVBuffer *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  vImage_Error v17;
  void *v18;
  void *v19;
  uint64_t v20;
  CVPixelBufferRef v21;
  _OWORD *v22;
  void *v23;
  _OWORD *v24;
  void *v25;
  void *v26;
  __CVBuffer *v27;
  uint64_t v28;
  int32x2_t v29;
  vImage_Error v30;
  vImage_Error v31;
  vImage_Error v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  __int128 v47;
  const float *v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _DWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD *v61;
  CVPixelBufferRef *v62;
  __CVBuffer *v63;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t v67;
  vImage_Error v68;
  char *BaseAddress;
  char *v70;
  vImage_Error v71;
  BOOL v72;
  uint64_t v73;
  __int128 v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  __CVBuffer *v80;
  _QWORD *v81;
  __CVBuffer *v82;
  __CVBuffer *v83;
  _DWORD *v84;
  uint64_t v86;
  uint64_t v87;
  size_t count;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  void *v102;
  _OWORD v103[12];
  _OWORD v104[2];
  _OWORD v105[2];
  __int128 v106;
  CVPixelBufferRef pixelBuffer[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  CVPixelBufferRef texture[2];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  CVPixelBufferRef v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  CVPixelBufferRef v119[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  CVPixelBufferRef v123[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  CVPixelBufferRef v127[2];
  __int128 v128;
  _OWORD v129[3];
  float32x4_t v130;
  __int128 v131;
  float32x4_t v132;
  _OWORD v133[2];
  uint64_t v134;

  v4 = a1;
  v134 = *MEMORY[0x1E0C80C00];
  v97 = 0;
  v98 = 0;
  v132 = 0u;
  memset(v133, 0, 28);
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  memset(v129, 0, sizeof(v129));
  v126 = 0u;
  *(_OWORD *)v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  *(_OWORD *)v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  *(_OWORD *)v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  *(_OWORD *)v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  v110 = 0u;
  *(_OWORD *)texture = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  *(_OWORD *)pixelBuffer = 0u;
  memset(v105, 0, sizeof(v105));
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  memset(v104, 0, sizeof(v104));
  memset(v103, 0, sizeof(v103));
  v91 = 0u;
  v92 = 0u;
  if (!a1)
  {
    FigDebugAssert3();
LABEL_119:
    v11 = 0;
    v5 = 0;
    goto LABEL_120;
  }
  v5 = a2;
  if (!a2)
  {
    FigDebugAssert3();
    v4 = 0;
    v11 = 0;
LABEL_120:
    v7 = 0;
    v17 = 4294967266;
    goto LABEL_90;
  }
  if (!a4)
  {
    FigDebugAssert3();
    v4 = 0;
    goto LABEL_119;
  }
  v7 = malloc_type_calloc(1uLL, 0xCFB8uLL, 0x10000401A23E1E0uLL);
  if (!v7)
  {
    FigDebugAssert3();
    v4 = 0;
    v11 = 0;
    v5 = 0;
    v17 = 4294967254;
    goto LABEL_90;
  }
  v99 = 0;
  v100 = &v99;
  v101 = 0x2000000000;
  v8 = getCMPhotoFixedPatternNoiseDecoderGetFpnImageDimensions2SymbolLoc_ptr;
  v102 = getCMPhotoFixedPatternNoiseDecoderGetFpnImageDimensions2SymbolLoc_ptr;
  if (!getCMPhotoFixedPatternNoiseDecoderGetFpnImageDimensions2SymbolLoc_ptr)
  {
    v9 = (void *)CMPhotoLibrary();
    v8 = dlsym(v9, "CMPhotoFixedPatternNoiseDecoderGetFpnImageDimensions2");
    v100[3] = (uint64_t)v8;
    getCMPhotoFixedPatternNoiseDecoderGetFpnImageDimensions2SymbolLoc_ptr = v8;
  }
  _Block_object_dispose(&v99, 8);
  if (!v8)
    bfpn_create_correction_model_from_fdr_cold_1();
  v10 = ((uint64_t (*)(__CVBuffer *, __CVBuffer *, uint64_t *, uint64_t *))v8)(v4, v5, &v98, &v97);
  if ((_DWORD)v10)
  {
    v17 = v10;
    FigDebugAssert3();
    v4 = 0;
    v11 = 0;
    v5 = 0;
    goto LABEL_90;
  }
  if (!v98)
  {
    FigDebugAssert3();
    v4 = 0;
    v11 = 0;
    v5 = 0;
    v17 = 4294967284;
    goto LABEL_90;
  }
  if (!v97)
  {
    FigDebugAssert3();
    v4 = 0;
    v11 = 0;
    v5 = 0;
    v17 = 4294967283;
    goto LABEL_90;
  }
  v84 = v7;
  if (a3)
  {
    v83 = CreatePixelBuffer(v98, v97, 1278226488);
    if (!v83)
    {
      FigDebugAssert3();
      v4 = 0;
      v11 = 0;
      v5 = 0;
LABEL_132:
      v17 = 4294967282;
      goto LABEL_142;
    }
  }
  else
  {
    v83 = 0;
  }
  v81 = a4;
  v12 = 0;
  v13 = 1;
  do
  {
    v89 = 0;
    v90 = 0;
    count = 0;
    v99 = 0;
    v100 = &v99;
    v101 = 0x2000000000;
    v14 = getCMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2SymbolLoc_ptr;
    v102 = getCMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2SymbolLoc_ptr;
    if (!getCMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2SymbolLoc_ptr)
    {
      v15 = (void *)CMPhotoLibrary();
      v14 = dlsym(v15, "CMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2");
      v100[3] = (uint64_t)v14;
      getCMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2SymbolLoc_ptr = v14;
    }
    _Block_object_dispose(&v99, 8);
    if (!v14)
      bfpn_create_correction_model_from_fdr_cold_1();
    v16 = ((uint64_t (*)(__CVBuffer *, __CVBuffer *, uint64_t, uint64_t *, uint64_t *))v14)(v4, v5, v13, &v90, &v89);
    v17 = v16;
    if ((_DWORD)v13 == 1 || (v16 & 0xFFFFFFFE) != 0xFFFFBD9E)
    {
      if ((_DWORD)v16)
        goto LABEL_106;
      if (!v90)
      {
        FigDebugAssert3();
        v17 = 4294967284;
        goto LABEL_108;
      }
      if (!v89)
      {
        FigDebugAssert3();
        v17 = 4294967283;
        goto LABEL_108;
      }
      v99 = 0;
      v100 = &v99;
      v101 = 0x2000000000;
      v18 = getCMPhotoFixedPatternNoiseDecoderGetNCorrectionPairs2SymbolLoc_ptr;
      v102 = getCMPhotoFixedPatternNoiseDecoderGetNCorrectionPairs2SymbolLoc_ptr;
      if (!getCMPhotoFixedPatternNoiseDecoderGetNCorrectionPairs2SymbolLoc_ptr)
      {
        v19 = (void *)CMPhotoLibrary();
        v18 = dlsym(v19, "CMPhotoFixedPatternNoiseDecoderGetNCorrectionPairs2");
        v100[3] = (uint64_t)v18;
        getCMPhotoFixedPatternNoiseDecoderGetNCorrectionPairs2SymbolLoc_ptr = v18;
      }
      _Block_object_dispose(&v99, 8);
      if (!v18)
        bfpn_create_correction_model_from_fdr_cold_1();
      v20 = ((uint64_t (*)(__CVBuffer *, __CVBuffer *, uint64_t, size_t *))v18)(v4, v5, v13, &count);
      if ((_DWORD)v20)
      {
        v17 = v20;
LABEL_106:
        FigDebugAssert3();
LABEL_108:
        v11 = 0;
        v5 = 0;
        v4 = v83;
        goto LABEL_90;
      }
      v21 = CreatePixelBuffer(v90, v89, 1278226488);
      v22 = &v105[4 * (unint64_t)v12];
      *((_QWORD *)v22 + 7) = v21;
      if (!v21 || (v23 = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL), (*((_QWORD *)v22 + 6) = v23) == 0))
      {
        FigDebugAssert3();
        v17 = 4294967282;
        goto LABEL_108;
      }
      v24 = &v105[4 * (unint64_t)v12];
      *((_WORD *)v24 + 22) = count;
      *((_WORD *)v24 + 18) = v13;
      ++v12;
    }
    v13 = (v13 + 1);
  }
  while ((_DWORD)v13 != 7);
  v99 = 0;
  v100 = &v99;
  v101 = 0x2000000000;
  v25 = getCMPhotoFixedPatternNoiseDecoderRun2SymbolLoc_ptr;
  v102 = getCMPhotoFixedPatternNoiseDecoderRun2SymbolLoc_ptr;
  if (!getCMPhotoFixedPatternNoiseDecoderRun2SymbolLoc_ptr)
  {
    v26 = (void *)CMPhotoLibrary();
    v25 = dlsym(v26, "CMPhotoFixedPatternNoiseDecoderRun2");
    v100[3] = (uint64_t)v25;
    getCMPhotoFixedPatternNoiseDecoderRun2SymbolLoc_ptr = v25;
  }
  _Block_object_dispose(&v99, 8);
  if (!v25)
    bfpn_create_correction_model_from_fdr_cold_1();
  v27 = v4;
  v4 = v83;
  v86 = v12;
  v28 = ((uint64_t (*)(__CVBuffer *, __CVBuffer *, __CVBuffer *))v25)(v27, v5, v83);
  if ((_DWORD)v28)
  {
    v17 = v28;
    FigDebugAssert3();
    v11 = 0;
    v5 = 0;
LABEL_142:
    v7 = v84;
    goto LABEL_90;
  }
  v87 = 0;
  if (a3)
  {
    v5 = CreatePixelBuffer(v98, v97, 843264056);
    if (!v5)
    {
      FigDebugAssert3();
      v11 = 0;
      goto LABEL_132;
    }
    *((_QWORD *)&v95 + 1) = v97;
    *(_QWORD *)&v96 = v98;
    *((_QWORD *)&v96 + 1) = CVPixelBufferGetBytesPerRow(v83);
    v30 = CVPixelBufferLockBaseAddress(v83, 1uLL);
    if ((_DWORD)v30)
    {
      v17 = v30;
      FigDebugAssert3();
      v11 = 0;
      goto LABEL_142;
    }
    *(_QWORD *)&v95 = CVPixelBufferGetBaseAddress(v83);
    if (!(_QWORD)v95)
    {
      FigDebugAssert3();
      v11 = 0;
LABEL_141:
      v17 = 4294967257;
      goto LABEL_142;
    }
    if (WORD2(v106) != 1)
    {
      FigDebugAssert3();
      v11 = 0;
      v17 = 4294967249;
      goto LABEL_142;
    }
    v11 = pixelBuffer[1];
    *(_QWORD *)&v94 = CVPixelBufferGetWidth(pixelBuffer[1]);
    *((_QWORD *)&v93 + 1) = CVPixelBufferGetHeight(v11);
    *((_QWORD *)&v94 + 1) = CVPixelBufferGetBytesPerRow(v11);
    v31 = CVPixelBufferLockBaseAddress(v11, 1uLL);
    if ((_DWORD)v31)
    {
      v17 = v31;
    }
    else
    {
      *(_QWORD *)&v93 = CVPixelBufferGetBaseAddress(v11);
      if (!(_QWORD)v93)
      {
LABEL_140:
        FigDebugAssert3();
        goto LABEL_141;
      }
      *((_QWORD *)&v91 + 1) = v97;
      *(_QWORD *)&v92 = v98;
      *((_QWORD *)&v92 + 1) = CVPixelBufferGetBytesPerRow(v5);
      v32 = CVPixelBufferLockBaseAddress(v5, 0);
      if (!(_DWORD)v32)
      {
        *(_QWORD *)&v91 = CVPixelBufferGetBaseAddress(v5);
        if ((_QWORD)v91)
        {
          v80 = v11;
          v82 = v5;
          v33 = 0;
          v35 = *((_QWORD *)&v95 + 1);
          v34 = v96;
          do
          {
            v36 = v35 >> 1;
            v37 = v34 >> 1;
            v17 = vImageBuffer_Init((vImage_Buffer *)&v103[v33], v35 >> 1, v34 >> 1, 0x20u, 0);
            if ((_DWORD)v17)
              goto LABEL_100;
            v34 = v37 + 1;
            v35 = v36 + 1;
            v33 += 2;
          }
          while (v33 != 14);
          v39 = bfpn_convert_uint8_to_float((uint64_t *)&v93, (uint64_t *)v104, 1.0, 0.0, v38);
          if ((_DWORD)v39)
          {
            v17 = v39;
LABEL_100:
            FigDebugAssert3();
            v7 = v84;
            goto LABEL_114;
          }
          v40 = bfpn_correct_nuhm((uint64_t *)v104, (float *)&v87 + 1, (float *)&v87);
          if ((_DWORD)v40)
          {
            v17 = v40;
            goto LABEL_54;
          }
          v41 = 224;
          while (1)
          {
            v42 = v41 - 32;
            if (v41 == 32)
              break;
            v43 = bfpn_upsample2x((uint64_t *)((char *)&v99 + v41), (uint64_t *)((char *)&v96 + v41));
            v41 = v42;
            if ((_DWORD)v43)
            {
              v17 = v43;
LABEL_54:
              FigDebugAssert3();
              v7 = v84;
              goto LABEL_115;
            }
          }
          v44 = bfpn_upsample2x_and_interleave((uint64_t *)v103, &v95, (uint64_t *)&v91);
          if ((_DWORD)v44)
          {
            v17 = v44;
            goto LABEL_54;
          }
          v29.i32[0] = v87;
          goto LABEL_58;
        }
        goto LABEL_140;
      }
      v17 = v32;
    }
    FigDebugAssert3();
    goto LABEL_142;
  }
  v80 = 0;
  v82 = 0;
  v29.i32[0] = 0;
LABEL_58:
  *v84 = -810024698;
  *((_WORD *)v84 + 2) = v128;
  *((_WORD *)v84 + 3) = BYTE1(v128);
  *((_WORD *)v84 + 4) = v98;
  *((_WORD *)v84 + 5) = v97;
  v84[3] = 843264056;
  v45 = v129[0];
  v84[4] = DWORD1(v128);
  *(_QWORD *)&v46 = *((_QWORD *)&v128 + 1);
  v84[30] = v45;
  *((_QWORD *)&v46 + 1) = *(_QWORD *)((char *)v129 + 4);
  *(_OWORD *)(v84 + 5) = v46;
  *(_OWORD *)(v84 + 9) = *(_OWORD *)((char *)v129 + 12);
  *(_OWORD *)(v84 + 13) = *(_OWORD *)((char *)&v129[1] + 12);
  v84[17] = HIDWORD(v129[2]);
  v47 = v131;
  *(float32x4_t *)(v84 + 18) = vsubq_f32(v130, (float32x4_t)vdupq_lane_s32(v29, 0));
  *(_OWORD *)(v84 + 22) = v47;
  v48 = (const float *)&v87 + 1;
  v49 = vld1q_dup_f32(v48);
  *(float32x4_t *)(v84 + 26) = vsubq_f32(v132, v49);
  *(_QWORD *)(v84 + 31) = *(_QWORD *)&v133[0];
  *((_WORD *)v84 + 66) = WORD4(v133[0]);
  v50 = *(_QWORD *)((char *)v133 + 10);
  *((_WORD *)v84 + 71) = WORD1(v133[1]);
  *(_QWORD *)((char *)v84 + 134) = v50;
  *((_QWORD *)v84 + 18) = *(_QWORD *)((char *)&v133[1] + 4);
  if (!v12)
  {
LABEL_79:
    v72 = v128 != 6 || BYTE1(v128) > 2u;
    v7 = v84;
    if (!v72)
    {
      memset_pattern16(v84 + 511, &unk_1D3307440, 0x60uLL);
      v73 = 0;
      *(_QWORD *)&v74 = 0x400040004000400;
      *((_QWORD *)&v74 + 1) = 0x400040004000400;
      do
      {
        v75 = &v84[v73 + 743];
        *v75 = v74;
        v75[1] = v74;
        v73 += 8;
      }
      while (v73 != 24);
    }
    v76 = bfpn_calculate_isp_row_bl_correction((uint64_t)(v84 + 502), (uint64_t)(v84 + 966));
    v5 = v82;
    v4 = v83;
    v11 = v80;
    if ((_DWORD)v76)
    {
      v17 = v76;
    }
    else
    {
      v77 = bfpn_calculate_isp_row_bl_correction((uint64_t)(v84 + 734), (uint64_t)(v84 + 7014));
      if (!(_DWORD)v77)
      {
        if (v82)
        {
          CVPixelBufferUnlockBaseAddress(v82, 0);
          *(_QWORD *)&v91 = 0;
          *a3 = v82;
        }
        v17 = 0;
        v5 = 0;
        *v81 = v84;
        v7 = 0;
        goto LABEL_90;
      }
      v17 = v77;
    }
    FigDebugAssert3();
    goto LABEL_90;
  }
  v51 = 0;
  while (2)
  {
    v52 = &v105[4 * v51];
    v53 = v84 + 38;
    switch(*((_WORD *)v52 + 18))
    {
      case 0:
      case 1:
        goto LABEL_78;
      case 2:
        goto LABEL_65;
      case 3:
        v53 = v84 + 270;
        goto LABEL_65;
      case 4:
        v53 = v84 + 502;
        goto LABEL_65;
      case 5:
        v53 = v84 + 734;
        goto LABEL_65;
      case 6:
        v53 = v84 + 13062;
LABEL_65:
        *(_OWORD *)v53 = *v52;
        v54 = &v105[4 * v51];
        v53[4] = *((_DWORD *)v54 + 4);
        v53[5] = *((_DWORD *)v54 + 5);
        v53[6] = *((_DWORD *)v54 + 6);
        v53[7] = *((_DWORD *)v54 + 7);
        v53[8] = *((_DWORD *)v54 + 8);
        v55 = v53 + 9;
        if (*((_WORD *)v54 + 22) == 24)
        {
          v56 = (_OWORD *)*((_QWORD *)v54 + 6);
          v57 = v56[1];
          *v55 = *v56;
          *(_OWORD *)(v53 + 13) = v57;
          v58 = v56[2];
          v59 = v56[3];
          v60 = v56[5];
          *(_OWORD *)(v53 + 25) = v56[4];
          *(_OWORD *)(v53 + 29) = v60;
          *(_OWORD *)(v53 + 17) = v58;
          *(_OWORD *)(v53 + 21) = v59;
        }
        else
        {
          *(_OWORD *)(v53 + 25) = 0u;
          *(_OWORD *)(v53 + 29) = 0u;
          *(_OWORD *)(v53 + 17) = 0u;
          *(_OWORD *)(v53 + 21) = 0u;
          *v55 = 0u;
          *(_OWORD *)(v53 + 13) = 0u;
        }
        v61 = &v105[4 * v51];
        v63 = (__CVBuffer *)*((_QWORD *)v61 + 7);
        v62 = (CVPixelBufferRef *)v61 + 7;
        Width = CVPixelBufferGetWidth(v63);
        Height = CVPixelBufferGetHeight(*v62);
        BytesPerRow = CVPixelBufferGetBytesPerRow(*v62);
        *((_BYTE *)v53 + 132) = Width;
        *((_BYTE *)v53 + 133) = Height;
        if (Width >= 0x22 || Height >= 0x19)
        {
          FigDebugAssert3();
          v17 = 0;
          goto LABEL_113;
        }
        v67 = BytesPerRow;
        v68 = CVPixelBufferLockBaseAddress(*v62, 1uLL);
        if (!(_DWORD)v68)
        {
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(*v62);
          if (v128 == 6 && BYTE1(v128) <= 2u)
          {
            *(_QWORD *)(v53 + 5) = 0;
            *(_QWORD *)(v53 + 7) = 0;
          }
          if (Height)
          {
            v70 = (char *)v53 + 134;
            do
            {
              memcpy(v70, BaseAddress, Width);
              BaseAddress += v67;
              v70 += Width;
              --Height;
            }
            while (Height);
          }
          v71 = CVPixelBufferUnlockBaseAddress(*v62, 1uLL);
          if ((_DWORD)v71)
          {
            v17 = v71;
            goto LABEL_112;
          }
LABEL_78:
          if (++v51 == v86)
            goto LABEL_79;
          continue;
        }
        v17 = v68;
LABEL_112:
        FigDebugAssert3();
LABEL_113:
        v7 = v84;
        v4 = v83;
LABEL_114:
        v5 = v82;
LABEL_115:
        v11 = v80;
LABEL_90:
        if ((_QWORD)v95)
          CVPixelBufferUnlockBaseAddress(v4, 1uLL);
        if ((_QWORD)v93)
          CVPixelBufferUnlockBaseAddress(v11, 1uLL);
        if ((_QWORD)v91)
          CVPixelBufferUnlockBaseAddress(v5, 0);
        for (i = 0; i != 12; i += 2)
          free(*(void **)&v103[i]);
        CVPixelBufferRelease(v4);
        CVPixelBufferRelease(pixelBuffer[1]);
        CVPixelBufferRelease(texture[1]);
        CVPixelBufferRelease(v115[1]);
        CVPixelBufferRelease(v119[1]);
        CVPixelBufferRelease(v123[1]);
        CVPixelBufferRelease(v127[1]);
        CVPixelBufferRelease(v5);
        free(v7);
        return v17;
      default:
        abort();
    }
  }
}

uint64_t bfpn_calculate_isp_row_bl_correction(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  unsigned __int16 *v4;
  uint32x2_t v5;
  unint64_t v6;
  unsigned int v7;
  float32x2_t v8;
  unsigned int v9;
  float32x2_t v10;
  unint64_t v11;
  float32x2_t v12;
  uint32_t v13;
  int16x4_t v14;
  int16x4_t v15;
  _QWORD v17[25];

  v17[24] = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    for (i = 0; i != 24; ++i)
    {
      v4 = (unsigned __int16 *)(a1 + 36 + 4 * i);
      v5.i32[0] = *v4;
      v5.i32[1] = v4[1];
      v17[i] = vcvt_f32_u32(v5);
    }
    v6 = 0;
    v7 = -1512;
    v8 = (float32x2_t)vdup_n_s32(0x38800000u);
    do
    {
      v9 = v7 / 0xBD0;
      if (v6 < 0xBD)
        v9 = 0;
      v10 = (float32x2_t)v17[v9];
      if (v6 >= 0xB13)
        v11 = 23;
      else
        v11 = (v7 + 3024) / 0xBD0uLL;
      v12 = (float32x2_t)v17[v11];
      v13 = arc4random_uniform(0x4000u);
      v14 = (int16x4_t)vcvt_s32_f32(vrndm_f32(vadd_f32(vmla_n_f32(v10, vsub_f32(v12, v10), (float)((v7 + 3024) % 0xBD0) / 3024.0), vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(arc4random_uniform(0x4000u), v13)), v8))));
      v15 = vuzp1_s16(v14, v14);
      *(int16x4_t *)(a2 + 8 * v6++) = vzip1_s16(v15, v15);
      v7 += 24;
    }
    while (v6 != 3024);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294967266;
  }
}

CFDictionaryRef bfpn_correction_create_dict_from_metadata(unsigned __int16 *a1)
{
  const __CFAllocator *v2;
  size_t v3;
  CFDictionaryRef v4;
  uint64_t i;
  const void *v6;
  const void *v7;
  int valuePtr;
  void *values;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CFDictionaryRef dict_from_metadata;
  void *keys;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  dict_from_metadata = 0;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  keys = (void *)*MEMORY[0x1E0D06C70];
  valuePtr = *a1;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (!values)
    goto LABEL_38;
  *(_QWORD *)&v26 = *MEMORY[0x1E0D06C98];
  valuePtr = a1[2];
  *(_QWORD *)&v11 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  if (!(_QWORD)v11)
    goto LABEL_38;
  *((_QWORD *)&v26 + 1) = *MEMORY[0x1E0D06CA0];
  valuePtr = a1[3];
  *((_QWORD *)&v11 + 1) = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  if (!*((_QWORD *)&v11 + 1))
    goto LABEL_38;
  *(_QWORD *)&v27 = *MEMORY[0x1E0D06A38];
  *(_QWORD *)&v12 = CFNumberCreate(v2, kCFNumberFloatType, a1 + 8);
  if (!(_QWORD)v12)
    goto LABEL_38;
  *((_QWORD *)&v27 + 1) = *MEMORY[0x1E0D06E20];
  *((_QWORD *)&v12 + 1) = CFNumberCreate(v2, kCFNumberFloatType, a1 + 10);
  if (!*((_QWORD *)&v12 + 1))
    goto LABEL_38;
  *(_QWORD *)&v28 = *MEMORY[0x1E0D06988];
  *(_QWORD *)&v13 = CFNumberCreate(v2, kCFNumberFloatType, a1 + 12);
  if (!(_QWORD)v13)
    goto LABEL_38;
  *((_QWORD *)&v28 + 1) = *MEMORY[0x1E0D06900];
  *((_QWORD *)&v13 + 1) = CFNumberCreate(v2, kCFNumberFloatType, a1 + 60);
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_38;
  *(_QWORD *)&v29 = *MEMORY[0x1E0D06C90];
  *(_QWORD *)&v14 = CFNumberCreate(v2, kCFNumberFloatType, a1 + 14);
  if (!(_QWORD)v14)
    goto LABEL_38;
  *((_QWORD *)&v29 + 1) = *MEMORY[0x1E0D06C88];
  *((_QWORD *)&v14 + 1) = CFNumberCreate(v2, kCFNumberFloatType, a1 + 16);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_38;
  *(_QWORD *)&v30 = *MEMORY[0x1E0D06C80];
  *(_QWORD *)&v15 = CFNumberCreate(v2, kCFNumberFloatType, a1 + 18);
  if (!(_QWORD)v15)
    goto LABEL_38;
  *((_QWORD *)&v30 + 1) = *MEMORY[0x1E0D06A30];
  *((_QWORD *)&v15 + 1) = CFNumberCreate(v2, kCFNumberFloatType, a1 + 20);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_38;
  *(_QWORD *)&v31 = *MEMORY[0x1E0D06A28];
  *(_QWORD *)&v16 = CFNumberCreate(v2, kCFNumberFloatType, a1 + 22);
  if (!(_QWORD)v16)
    goto LABEL_38;
  *((_QWORD *)&v31 + 1) = *MEMORY[0x1E0D06E18];
  *((_QWORD *)&v16 + 1) = CFNumberCreate(v2, kCFNumberFloatType, a1 + 24);
  if (!*((_QWORD *)&v16 + 1))
    goto LABEL_38;
  *(_QWORD *)&v32 = *MEMORY[0x1E0D06E10];
  *(_QWORD *)&v17 = CFNumberCreate(v2, kCFNumberFloatType, a1 + 26);
  if (!(_QWORD)v17)
    goto LABEL_38;
  *((_QWORD *)&v32 + 1) = *MEMORY[0x1E0D06990];
  *((_QWORD *)&v17 + 1) = bfpn_create_array4(*((float *)a1 + 14), *((float *)a1 + 15), *((float *)a1 + 16), *((float *)a1 + 17));
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_38;
  *(_QWORD *)&v33 = *MEMORY[0x1E0D06980];
  *(_QWORD *)&v18 = bfpn_create_array4(*((float *)a1 + 18), *((float *)a1 + 19), *((float *)a1 + 20), *((float *)a1 + 21));
  if (!(_QWORD)v18)
    goto LABEL_38;
  *((_QWORD *)&v33 + 1) = *MEMORY[0x1E0D06908];
  *((_QWORD *)&v18 + 1) = bfpn_create_array4(*((float *)a1 + 22), *((float *)a1 + 23), *((float *)a1 + 24), *((float *)a1 + 25));
  if (!*((_QWORD *)&v18 + 1))
    goto LABEL_38;
  *(_QWORD *)&v34 = *MEMORY[0x1E0D068F8];
  *(_QWORD *)&v19 = bfpn_create_array4(*((float *)a1 + 26), *((float *)a1 + 27), *((float *)a1 + 28), *((float *)a1 + 29));
  if (!(_QWORD)v19)
    goto LABEL_38;
  *((_QWORD *)&v34 + 1) = *MEMORY[0x1E0D06938];
  *((_QWORD *)&v19 + 1) = CFNumberCreate(v2, kCFNumberFloatType, a1 + 62);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_38;
  *(_QWORD *)&v35 = *MEMORY[0x1E0D06930];
  *(_QWORD *)&v20 = CFNumberCreate(v2, kCFNumberFloatType, a1 + 64);
  if (!(_QWORD)v20)
    goto LABEL_38;
  *((_QWORD *)&v35 + 1) = *MEMORY[0x1E0D06CB8];
  valuePtr = a1[66];
  *((_QWORD *)&v20 + 1) = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_38;
  *(_QWORD *)&v36 = *MEMORY[0x1E0D06A50];
  v3 = strnlen((const char *)a1 + 134, 0xAuLL);
  *(_QWORD *)&v21 = CFStringCreateWithBytes(v2, (const UInt8 *)a1 + 134, v3, 0x8000100u, 0);
  if (!(_QWORD)v21)
    goto LABEL_38;
  *((_QWORD *)&v36 + 1) = *MEMORY[0x1E0D06E00];
  *((_QWORD *)&v21 + 1) = CFStringCreateWithFormat(v2, 0, CFSTR("0x%02x%02x%02x%02x%02x%02x%02x%02x"), *((unsigned __int8 *)a1 + 144), *((unsigned __int8 *)a1 + 145), *((unsigned __int8 *)a1 + 146), *((unsigned __int8 *)a1 + 147), *((unsigned __int8 *)a1 + 148), *((unsigned __int8 *)a1 + 149), *((unsigned __int8 *)a1 + 150), *((unsigned __int8 *)a1 + 151));
  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_38;
  *(_QWORD *)&v37 = *MEMORY[0x1E0D068F0];
  *(_QWORD *)&v22 = bfpn_blacklevel_create_dict_from_metadata((int *)a1 + 38);
  if (!(_QWORD)v22)
    goto LABEL_38;
  *((_QWORD *)&v37 + 1) = *MEMORY[0x1E0D068D8];
  *((_QWORD *)&v22 + 1) = bfpn_blacklevel_create_dict_from_metadata((int *)a1 + 270);
  if (!*((_QWORD *)&v22 + 1))
    goto LABEL_38;
  *(_QWORD *)&v38 = *MEMORY[0x1E0D068E8];
  *(_QWORD *)&v23 = bfpn_blacklevel_create_dict_from_metadata((int *)a1 + 502);
  if ((_QWORD)v23
    && (*((_QWORD *)&v38 + 1) = *MEMORY[0x1E0D068E0],
        (*((_QWORD *)&v23 + 1) = bfpn_blacklevel_create_dict_from_metadata((int *)a1 + 734)) != 0)
    && (v39 = *MEMORY[0x1E0D06F40],
        (dict_from_metadata = bfpn_blacklevel_create_dict_from_metadata((int *)a1 + 13062)) != 0))
  {
    v4 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)&values, 28, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v4)
      FigDebugAssert3();
  }
  else
  {
LABEL_38:
    FigDebugAssert3();
    v4 = 0;
  }
  for (i = 0; i != 224; i += 8)
  {
    v6 = *(void **)((char *)&keys + i);
    if (v6)
      CFRelease(v6);
    v7 = *(void **)((char *)&values + i);
    if (v7)
      CFRelease(v7);
  }
  return v4;
}

CFArrayRef bfpn_create_array4(float a1, float a2, float a3, float a4)
{
  const __CFAllocator *v4;
  CFArrayRef v5;
  float v7;
  float v8;
  float v9;
  float valuePtr;
  void *values;
  CFTypeRef cf;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  valuePtr = a1;
  v7 = a4;
  v8 = a3;
  cf = 0;
  v13 = 0;
  v14 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  if (values
    && (cf = CFNumberCreate(v4, kCFNumberFloatType, &v9)) != 0
    && (v13 = CFNumberCreate(v4, kCFNumberFloatType, &v8)) != 0
    && (v14 = CFNumberCreate(v4, kCFNumberFloatType, &v7)) != 0)
  {
    v5 = CFArrayCreate(v4, (const void **)&values, 4, MEMORY[0x1E0C9B378]);
    if (!v5)
      FigDebugAssert3();
  }
  else
  {
    FigDebugAssert3();
    v5 = 0;
  }
  if (values)
    CFRelease(values);
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  return v5;
}

CFDictionaryRef bfpn_blacklevel_create_dict_from_metadata(int *a1)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  uint64_t i;
  const void *v5;
  const void *v6;
  int valuePtr;
  int v9;
  void *values;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *keys;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  keys = (void *)*MEMORY[0x1E0D06C90];
  valuePtr = *a1;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  if (!values)
    goto LABEL_21;
  *(_QWORD *)&v17 = *MEMORY[0x1E0D06C88];
  valuePtr = a1[1];
  *(_QWORD *)&v11 = CFNumberCreate(v2, kCFNumberFloatType, &valuePtr);
  if (!(_QWORD)v11)
    goto LABEL_21;
  *((_QWORD *)&v17 + 1) = *MEMORY[0x1E0D06C80];
  valuePtr = a1[2];
  *((_QWORD *)&v11 + 1) = CFNumberCreate(v2, kCFNumberFloatType, &valuePtr);
  if (!*((_QWORD *)&v11 + 1))
    goto LABEL_21;
  *(_QWORD *)&v18 = *MEMORY[0x1E0D06360];
  valuePtr = a1[3];
  *(_QWORD *)&v12 = CFNumberCreate(v2, kCFNumberFloatType, &valuePtr);
  if (!(_QWORD)v12)
    goto LABEL_21;
  *((_QWORD *)&v18 + 1) = *MEMORY[0x1E0D06358];
  valuePtr = a1[4];
  *((_QWORD *)&v12 + 1) = CFNumberCreate(v2, kCFNumberFloatType, &valuePtr);
  if (!*((_QWORD *)&v12 + 1))
    goto LABEL_21;
  *(_QWORD *)&v19 = *MEMORY[0x1E0D06370];
  *(_QWORD *)&v13 = bfpn_create_array4(*((float *)a1 + 5), *((float *)a1 + 6), *((float *)a1 + 7), *((float *)a1 + 8));
  if (!(_QWORD)v13)
    goto LABEL_21;
  *((_QWORD *)&v19 + 1) = *MEMORY[0x1E0D06350];
  *((_QWORD *)&v13 + 1) = bfpn_create_array_ushort24((unsigned __int16 *)a1 + 18, 0);
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_21;
  *(_QWORD *)&v20 = *MEMORY[0x1E0D06368];
  *(_QWORD *)&v14 = bfpn_create_array_ushort24((unsigned __int16 *)a1 + 18, 1);
  if (!(_QWORD)v14)
    goto LABEL_21;
  *((_QWORD *)&v20 + 1) = *MEMORY[0x1E0D06388];
  v9 = *((unsigned __int8 *)a1 + 132);
  *((_QWORD *)&v14 + 1) = CFNumberCreate(v2, kCFNumberIntType, &v9);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_21;
  *(_QWORD *)&v21 = *MEMORY[0x1E0D06380];
  v9 = *((unsigned __int8 *)a1 + 133);
  *(_QWORD *)&v15 = CFNumberCreate(v2, kCFNumberIntType, &v9);
  if ((_QWORD)v15
    && (*((_QWORD *)&v21 + 1) = *MEMORY[0x1E0D06378],
        (*((_QWORD *)&v15 + 1) = CFDataCreate(v2, (const UInt8 *)a1 + 134, *((unsigned __int8 *)a1 + 133) * (unint64_t)*((unsigned __int8 *)a1 + 132))) != 0))
  {
    v3 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)&values, 11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v3)
      FigDebugAssert3();
  }
  else
  {
LABEL_21:
    FigDebugAssert3();
    v3 = 0;
  }
  for (i = 0; i != 88; i += 8)
  {
    v5 = *(void **)((char *)&keys + i);
    if (v5)
      CFRelease(v5);
    v6 = *(void **)((char *)&values + i);
    if (v6)
      CFRelease(v6);
  }
  return v3;
}

uint64_t CMPhotoLibrary()
{
  uint64_t v0;
  void *v2;

  if (!CMPhotoLibraryCore_frameworkLibrary)
    CMPhotoLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = CMPhotoLibraryCore_frameworkLibrary;
  if (!CMPhotoLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

CFArrayRef bfpn_create_array_ushort24(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  unsigned __int16 *v6;
  CFNumberRef v7;
  CFArrayRef v8;
  uint64_t i;
  const void *v10;
  int valuePtr;
  void *values[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)values = 0u;
  v14 = 0u;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    v6 = a1 + 1;
    if (!a2)
      v6 = a1;
    valuePtr = *v6;
    v7 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    values[v4] = v7;
    if (!v7)
    {
      FigDebugAssert3();
      v8 = 0;
      goto LABEL_8;
    }
    ++v4;
    a1 += 2;
  }
  while (v4 != 24);
  v8 = CFArrayCreate(v5, (const void **)values, 24, MEMORY[0x1E0C9B378]);
  if (!v8)
    FigDebugAssert3();
LABEL_8:
  for (i = 0; i != 24; ++i)
  {
    v10 = values[i];
    if (v10)
      CFRelease(v10);
  }
  return v8;
}

id packHomographyToNSArray(_DWORD *a1, double a2)
{
  void *v3;
  double v4;
  void *v5;
  double v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  double v16;
  void *v17;
  double v18;
  void *v19;
  void *v20;
  _QWORD v22[10];

  v22[9] = *MEMORY[0x1E0C80C00];
  LODWORD(a2) = *a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = v3;
  LODWORD(v4) = a1[1];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22[1] = v5;
  LODWORD(v6) = a1[2];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v22[2] = v7;
  LODWORD(v8) = a1[4];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v22[3] = v9;
  LODWORD(v10) = a1[5];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v22[4] = v11;
  LODWORD(v12) = a1[6];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v22[5] = v13;
  LODWORD(v14) = a1[8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v22[6] = v15;
  LODWORD(v16) = a1[9];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v22[7] = v17;
  LODWORD(v18) = a1[10];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v22[8] = v19;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 9);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

__n128 unpackHomographyFromNSArray(void *a1)
{
  id v1;
  void *v2;
  unsigned __int32 v3;
  void *v4;
  unsigned __int32 v5;
  void *v6;
  unsigned __int32 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __n128 result;
  unsigned __int32 v15;
  unsigned __int32 v16;
  unsigned __int32 v17;

  v1 = a1;
  objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "floatValue");
  v17 = v3;
  objc_msgSend(v1, "objectAtIndexedSubscript:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "floatValue");
  v16 = v5;
  objc_msgSend(v1, "objectAtIndexedSubscript:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "floatValue");
  v15 = v7;

  objc_msgSend(v1, "objectAtIndexedSubscript:", 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "floatValue");
  objc_msgSend(v1, "objectAtIndexedSubscript:", 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "floatValue");
  objc_msgSend(v1, "objectAtIndexedSubscript:", 5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "floatValue");

  objc_msgSend(v1, "objectAtIndexedSubscript:", 6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "floatValue");
  objc_msgSend(v1, "objectAtIndexedSubscript:", 7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "floatValue");
  objc_msgSend(v1, "objectAtIndexedSubscript:", 8);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "floatValue");
  result.n128_u32[0] = v17;
  result.n128_u32[1] = v16;
  result.n128_u32[2] = v15;
  return result;
}

uint64_t bfpn_temporal_robust_mean_and_variance(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5, uint64_t *a6, float *a7, float *a8, float a9)
{
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t i;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t j;
  float v48;
  float v49;
  float v50;
  uint64_t result;

  v9 = 3.4028e38;
  if (a9 > 0.0)
    v9 = a9;
  if (!a1)
    goto LABEL_61;
  v10 = *a1;
  if (!*a1)
    goto LABEL_61;
  v11 = a1[2];
  v12 = a1[3];
  if (v12 < 4 * v11)
    goto LABEL_64;
  if (!a2)
    goto LABEL_61;
  v13 = *a2;
  if (!*a2)
    goto LABEL_61;
  v14 = a2[2];
  v15 = a2[3];
  if (v15 < 4 * v14)
    goto LABEL_64;
  if (!a3)
    goto LABEL_61;
  v16 = *a3;
  if (!*a3)
    goto LABEL_61;
  v18 = a3[2];
  v17 = a3[3];
  if (v17 < 4 * v18)
  {
LABEL_64:
    FigDebugAssert3();
    return 4294967277;
  }
  if (!a4 || (v19 = *a4) == 0)
  {
LABEL_61:
    FigDebugAssert3();
    return 4294967281;
  }
  v21 = a4[2];
  v20 = a4[3];
  if (v20 < 4 * v21)
    goto LABEL_64;
  if (!a6 || (v22 = *a6) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v23 = a6[2];
  v24 = a6[3];
  if (v24 < 4 * v23)
    goto LABEL_64;
  if (!a7 || !a8)
  {
    FigDebugAssert3();
    return 4294967266;
  }
  if (v11 != v23)
    goto LABEL_72;
  v25 = a1[1];
  if (v25 != a6[1])
    goto LABEL_73;
  if (v14 != v11)
    goto LABEL_72;
  if (a2[1] != v25)
    goto LABEL_73;
  if (v18 != v11)
    goto LABEL_72;
  if (a3[1] != v25)
    goto LABEL_73;
  if (v21 != v11)
  {
LABEL_72:
    FigDebugAssert3();
    return 4294967280;
  }
  if (a4[1] != v25)
  {
LABEL_73:
    FigDebugAssert3();
    return 4294967279;
  }
  if (a5 <= 2)
  {
    FigDebugAssert3();
    return 4294967264;
  }
  else
  {
    v26 = 0;
    if (v25)
    {
      v27 = v12 >> 2;
      v28 = 4 * (v24 >> 2);
      v29 = 4 * (v17 >> 2);
      v30 = 4 * v27;
      v31 = *a6;
      v32 = v25;
      v33 = 0.0;
      v34 = 1.0 / (float)a5;
      v35 = 0.0;
      do
      {
        if (v11)
        {
          for (i = 0; i != v11; ++i)
          {
            v37 = *(float *)(v10 + 4 * i);
            v38 = *(float *)(v16 + 4 * i);
            v39 = *(float *)(v19 + 4 * i);
            v40 = v39 - v38;
            v41 = (float)(1.0 / (float)(a5 - 2)) * (float)((float)(v37 - v38) - v39);
            if (v40 <= a9)
              v41 = v34 * v37;
            v35 = v35 + fmaxf(*(float *)(v13 + 4 * i) + (float)((float)-(float)(v37 * v37) * v34), 0.0);
            *(float *)(v31 + 4 * i) = v41;
            v42 = fabsf(v41);
            v43 = v42 < v9;
            if (v42 >= v9)
              v44 = -0.0;
            else
              v44 = v41;
            v33 = v33 + v44;
            if (v43)
              ++v26;
          }
        }
        v31 += v28;
        v19 += 4 * (v20 >> 2);
        v16 += v29;
        v13 += 4 * (v15 >> 2);
        v10 += v30;
        --v32;
      }
      while (v32);
      v45 = 0.0;
      v46 = v25;
      do
      {
        if (v11)
        {
          for (j = 0; j != v11; ++j)
          {
            v48 = *(float *)(v22 + 4 * j);
            v49 = fabsf(v48);
            v50 = v45 + (float)((float)(v48 - (float)(v33 / (float)v26)) * (float)(v48 - (float)(v33 / (float)v26)));
            if (v49 < v9)
              v45 = v50;
          }
        }
        v22 += v28;
        --v46;
      }
      while (v46);
    }
    else
    {
      v35 = 0.0;
      v45 = 0.0;
    }
    result = 0;
    *a7 = v35 / (float)(unint64_t)(v11 * (a5 - 1) * v25);
    *a8 = v45 / (float)(v26 - 1);
  }
  return result;
}

uint64_t bfpn_deinterleave_bayer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    goto LABEL_24;
  if (!a2)
  {
LABEL_18:
    FigDebugAssert3();
    return 4294967278;
  }
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[2];
    v4 = a1[3];
    if (v4 >= 2 * v3)
    {
      v5 = 0;
      while (a2[v5])
      {
        v6 = a2[v5 + 2];
        if (v3 != 2 * v6)
        {
          FigDebugAssert3();
          return 4294967280;
        }
        if (a1[1] != 2 * a2[v5 + 1])
        {
          FigDebugAssert3();
          return 4294967279;
        }
        if (a2[v5 + 3] < (unint64_t)(4 * v6))
          goto LABEL_21;
        v5 += 4;
        if (v5 == 16)
        {
          v7 = a2[1];
          if (v7)
          {
            v8 = a2[2];
            v9 = a2[12];
            v10 = a2[8];
            v11 = a2[4];
            v12 = v4 >> 1;
            v13 = v2 + 2 * (v4 >> 1);
            v14 = *a2;
            v15 = 4 * ((unint64_t)a2[3] >> 2);
            v16 = 4 * v12;
            do
            {
              if (v8)
              {
                v17 = 0;
                v18 = v8;
                do
                {
                  *(float *)(v14 + v17) = (float)(*(unsigned __int16 *)(v2 + v17) >> 4);
                  *(float *)(v11 + v17) = (float)(*(unsigned __int16 *)(v2 + v17 + 2) >> 4);
                  *(float *)(v10 + v17) = (float)(*(unsigned __int16 *)(v13 + v17) >> 4);
                  *(float *)(v9 + v17) = (float)(*(unsigned __int16 *)(v13 + v17 + 2) >> 4);
                  v17 += 4;
                  --v18;
                }
                while (v18);
              }
              v9 += v15;
              v10 += v15;
              v11 += v15;
              v14 += v15;
              v13 += v16;
              v2 += v16;
              --v7;
            }
            while (v7);
          }
          return 0;
        }
      }
      goto LABEL_18;
    }
LABEL_21:
    FigDebugAssert3();
    return 4294967277;
  }
  else
  {
LABEL_24:
    FigDebugAssert3();
    return 4294967281;
  }
}

id createCMIInferenceDeviceEspressoV2()
{
  return (id)objc_opt_new();
}

uint64_t CMIRangeAllocatorListAllocateBestFit(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v34;
  BOOL v35;
  unint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v5 = 0;
  if (!a2 || !a3)
    return v5;
  if (a4)
  {
    v8 = a4 - 1;
    v9 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    v8 = v9;
  }
  v10 = *(_DWORD *)(a1 + 8);
  if (!v10)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = (v9 + a2) & ~v9;
  v15 = v14 + v8;
  v16 = ~v8;
  v17 = v14 - 1;
  v18 = v10 - 1;
  v19 = -1;
  v20 = v10 - 1;
  v21 = 0xFFFFFFFFLL;
  do
  {
    if (a5)
      v22 = v20;
    else
      v22 = v11;
    v23 = (unint64_t *)(*(_QWORD *)a1 + 16 * v22);
    v25 = *v23;
    v24 = v23[1];
    if (a5)
    {
      v26 = v24 - v15;
      if (v24 < v15
        || ((v13 = v26 & v16, v12 = v17 + (v26 & v16), (v26 & v16) >= v25) ? (v27 = v12 > v24) : (v27 = 1), v27))
      {
LABEL_23:
        v5 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v13 = (v25 + v8) & v16;
      v12 = v17 + v13;
      if (v17 + v13 > v24)
        goto LABEL_23;
    }
    if (v22 < v18 || v19 == -1)
    {
      v28 = v24 - v12;
      if (v28 < v21)
      {
        v21 = v28;
        v19 = v22;
      }
    }
    v5 = 1;
LABEL_24:
    ++v11;
    --v20;
  }
  while (v20 != -1);
  if ((v19 & 0x80000000) == 0)
  {
    v29 = (unint64_t *)(*(_QWORD *)a1 + 16 * v19);
    v30 = *v29;
    v31 = v29[1];
    v32 = (v31 - v15) & v16;
    v34 = v32 >= *v29 && v17 + v32 <= v31;
    v35 = v31 >= v15;
    if (v31 < v15)
    {
      v36 = v12;
    }
    else
    {
      v13 = (v31 - v15) & v16;
      v36 = v17 + v32;
    }
    v37 = v35 && v34;
    v38 = (v30 + v8) & v16;
    v39 = v17 + v38;
    v40 = v17 + v38 <= v31;
    if (a5)
      v41 = v13;
    else
      v41 = v38;
    if (a5)
      v42 = v36;
    else
      v42 = v39;
    if (a5)
      v5 = v37;
    else
      v5 = v40;
    if (v41 == v30)
    {
      if (v42 == v31)
      {
        *(_DWORD *)(a1 + 8) = v18;
        memmove(v29, v29 + 2, 16 * (v18 - v19));
      }
      else
      {
        *v29 = v42 + 1;
      }
    }
    else if (v42 == v31)
    {
      v29[1] = v41 - 1;
    }
    else if (allocElement(a1, v19 + 1))
    {
      v43 = *(_QWORD *)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 16 * v19 + 8) = v41 - 1;
      v44 = (_QWORD *)(v43 + 16 * (v19 + 1));
      *v44 = v42 + 1;
      v44[1] = v31;
    }
    else
    {
      v5 = 0;
    }
    *a3 = v41;
  }
  return v5;
}

uint64_t bfpn_calculate_hf_filtered(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;

  if (!a1 || (v3 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v4 = a1[2];
  v5 = a1[3];
  if (v5 < 4 * v4)
    goto LABEL_26;
  if (!a2 || (v6 = *a2) == 0)
  {
    FigDebugAssert3();
    return 4294967268;
  }
  v7 = a2[2];
  v8 = a2[3];
  if (v8 < 4 * v7)
    goto LABEL_26;
  if (!a3 || (v9 = *a3) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v11 = a3[2];
  v10 = a3[3];
  if (v10 < 4 * v11)
  {
LABEL_26:
    FigDebugAssert3();
    return 4294967277;
  }
  if (v4 != v7)
    goto LABEL_29;
  v12 = a1[1];
  if (v12 != a2[1])
    goto LABEL_30;
  if (v4 != v11)
  {
LABEL_29:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v12 != a3[1])
  {
LABEL_30:
    FigDebugAssert3();
    return 4294967279;
  }
  if (v12)
  {
    v13 = v5 >> 2;
    v14 = 4 * (v10 >> 2);
    v15 = 4 * (v8 >> 2);
    v16 = 4 * v13;
    do
    {
      if (v4)
      {
        for (i = 0; i != v4; ++i)
          *(float *)(v9 + 4 * i) = *(float *)(v3 + 4 * i) - *(float *)(v6 + 4 * i);
      }
      v9 += v14;
      v6 += v15;
      v3 += v16;
      --v12;
    }
    while (v12);
  }
  return 0;
}

uint64_t colorCubeCacheHashForStyle(void *a1)
{
  id v1;
  void *v2;
  int v3;
  float v4;
  float v5;
  unsigned __int8 v6;
  float v7;
  float v8;

  v1 = a1;
  objc_msgSend(v1, "castType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = SSRCastTypeEnumFromString(v2);

  objc_msgSend(v1, "castIntensity");
  LOBYTE(v2) = vcvtas_u32_f32(v4 * 20.0);
  objc_msgSend(v1, "toneBias");
  v6 = vcvtas_u32_f32(v5 * 20.0);
  objc_msgSend(v1, "colorBias");
  v8 = v7;

  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", (v3 << 24) | (v2 << 16) | (v6 << 8) | vcvtas_u32_f32(v8 * 20.0));
}

uint64_t bfpn_calculate_hf_stats(uint64_t *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t i;
  float v25;
  float v26;
  float v27;
  uint64_t j;
  float v29;
  uint64_t result;

  if (!a1)
    goto LABEL_40;
  v5 = *a1;
  if (!*a1)
    goto LABEL_40;
  v6 = a1[2];
  v7 = a1[3];
  if (v7 < 4 * v6)
    goto LABEL_41;
  if (!a2)
    goto LABEL_40;
  v8 = *a2;
  if (!*a2)
    goto LABEL_40;
  v9 = a2[2];
  v10 = a2[3];
  if (v10 < 4 * v9)
    goto LABEL_41;
  if (!a3 || (v11 = *a3) == 0)
  {
LABEL_40:
    FigDebugAssert3();
    return 4294967281;
  }
  v13 = a3[2];
  v12 = a3[3];
  if (v12 < v13)
  {
LABEL_41:
    FigDebugAssert3();
    return 4294967277;
  }
  if (!a4 || !a5)
  {
    FigDebugAssert3();
    return 4294967266;
  }
  if (v6 != v9)
    goto LABEL_45;
  v14 = a1[1];
  if (v14 != a2[1])
    goto LABEL_46;
  if (v6 != v13)
  {
LABEL_45:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v14 != a3[1])
  {
LABEL_46:
    FigDebugAssert3();
    return 4294967279;
  }
  v15 = 1.0 / (float)(unint64_t)(v14 * v6);
  if (v14)
  {
    v16 = v7 >> 2;
    v17 = 4 * (v10 >> 2);
    v18 = 4 * v16;
    v19 = *a1;
    v20 = *a2;
    v21 = *a3;
    v22 = v14;
    v23 = 0.0;
    do
    {
      if (v6)
      {
        for (i = 0; i != v6; ++i)
        {
          v25 = *(float *)(v19 + 4 * i) - *(float *)(v20 + 4 * i);
          if (*(_BYTE *)(v21 + i))
            v25 = 0.0;
          v23 = v23 + v25;
        }
      }
      v21 += v12;
      v20 += v17;
      v19 += v18;
      --v22;
    }
    while (v22);
    v26 = v15 * v23;
    v27 = 0.0;
    do
    {
      if (v6)
      {
        for (j = 0; j != v6; ++j)
        {
          v29 = *(float *)(v5 + 4 * j) - *(float *)(v8 + 4 * j);
          if (*(_BYTE *)(v11 + j))
            v29 = 0.0;
          v27 = v27 + (float)((float)(v29 - v26) * (float)(v29 - v26));
        }
      }
      v11 += v12;
      v8 += v17;
      v5 += v18;
      --v14;
    }
    while (v14);
  }
  else
  {
    v27 = 0.0;
    v26 = v15 * 0.0;
  }
  result = 0;
  *a4 = v26;
  *a5 = v15 * v27;
  return result;
}

float calculateTotalGain(void *a1)
{
  id v1;
  void *v2;
  float v3;
  float v4;
  float v5;
  void *v6;
  float v7;
  float v8;
  void *v9;
  float v10;
  float v11;
  float v12;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0D067E0]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v3 = 1.0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v2, "floatValue");
    v5 = v4;
    objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F78]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v6, "floatValue");
      v8 = v7;
      objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F60]);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v9, "floatValue");
        v11 = v10;
        objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F68]);
        v2 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v2, "floatValue");
          v3 = (float)((float)((float)(v5 * 0.0039062) * (float)(v8 * 0.0039062)) * (float)(v11 * 0.0039062)) / v12;
        }
      }
      else
      {
        v2 = v9;
      }
    }
    else
    {
      v2 = v6;
    }
  }

  return v3;
}

uint64_t bfpn_downsample2x(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t Row;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  _OWORD v45[11];
  uint64_t v46;

  v46 = 0;
  memset(v45, 0, sizeof(v45));
  if (!a1)
    goto LABEL_26;
  if (!a2)
    goto LABEL_27;
  if (!*a1)
  {
LABEL_26:
    FigDebugAssert3();
    v43 = 4294967281;
    goto LABEL_22;
  }
  v3 = a1[3];
  if (v3 && v3 < 4 * a1[2])
    goto LABEL_32;
  v4 = *a2;
  if (!*a2)
  {
LABEL_27:
    FigDebugAssert3();
    v43 = 4294967278;
    goto LABEL_22;
  }
  v5 = a1[2];
  v6 = v5 + 1;
  v7 = (unint64_t)(v5 + 1) >> 1;
  if (v7 != a2[2])
  {
    FigDebugAssert3();
    v43 = 4294967280;
    goto LABEL_22;
  }
  v8 = a1[1];
  v9 = v8 + 1;
  v10 = (unint64_t)(v8 + 1) >> 1;
  if (v10 != a2[1])
  {
    FigDebugAssert3();
    v43 = 4294967279;
    goto LABEL_22;
  }
  v11 = a2[3];
  if (v11 < 4 * v7)
  {
LABEL_32:
    FigDebugAssert3();
    v43 = 4294967277;
    goto LABEL_22;
  }
  v12 = bfpn_sampler_init((uint64_t)v45, v5, v8, 0);
  if ((_DWORD)v12)
  {
    v43 = v12;
    FigDebugAssert3();
  }
  else if (v9 < 2)
  {
LABEL_21:
    v43 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 4 * (v11 >> 2);
    while (1)
    {
      Row = bfpn_sampler_fetchRow((uint64_t)v45, a1, v13 - 1);
      if (!Row)
        break;
      v16 = Row;
      v17 = bfpn_sampler_fetchRow((uint64_t)v45, a1, v13);
      if (!v17)
        break;
      v18 = v17;
      v19 = bfpn_sampler_fetchRow((uint64_t)v45, a1, v13 | 1u);
      if (!v19)
        break;
      v20 = v19;
      v13 += 2;
      v21 = bfpn_sampler_fetchRow((uint64_t)v45, a1, v13);
      if (!v21)
        break;
      if (v6 >= 2)
      {
        v22 = 0;
        v23 = (float *)(v16 + 4);
        v24 = (float *)(v18 + 4);
        v25 = (float *)(v20 + 4);
        v26 = (float *)(v21 + 4);
        do
        {
          v27 = (float)(*(v23 - 1) * 0.375) + (float)(*(v23 - 2) * 0.125);
          v28 = *v23;
          v29 = v23[1];
          v23 += 2;
          v30 = v27 + (float)(v28 * 0.375);
          v31 = (float)(*(v24 - 1) * 0.375) + (float)(*(v24 - 2) * 0.125);
          v32 = *v24;
          v33 = v24[1];
          v24 += 2;
          v34 = v30 + (float)(v29 * 0.125);
          v35 = (float)(*(v25 - 1) * 0.375) + (float)(*(v25 - 2) * 0.125);
          v36 = (float)(v31 + (float)(v32 * 0.375)) + (float)(v33 * 0.125);
          v37 = *v25;
          v38 = v25[1];
          v25 += 2;
          v39 = (float)(v35 + (float)(v37 * 0.375)) + (float)(v38 * 0.125);
          v40 = (float)(*(v26 - 1) * 0.375) + (float)(*(v26 - 2) * 0.125);
          v41 = *v26;
          v42 = v26[1];
          v26 += 2;
          *(float *)(v4 + 4 * v22++) = (float)((float)((float)(v36 * 0.375) + (float)(v34 * 0.125))
                                             + (float)(v39 * 0.375))
                                     + (float)((float)((float)(v40 + (float)(v41 * 0.375)) + (float)(v42 * 0.125))
                                             * 0.125);
        }
        while (v7 != v22);
      }
      v4 += v14;
      if (!--v10)
        goto LABEL_21;
    }
    FigDebugAssert3();
    v43 = 4294967269;
  }
LABEL_22:
  bfpn_sampler_free((uint64_t)v45);
  return v43;
}

uint64_t bfpn_calc_deinterleaved_residual(unsigned __int16 **a1, unsigned int a2, uint64_t *a3, float **a4, float **a5, uint64_t *a6, uint64_t *a7, float *a8, float a9, float a10, float a11, float a12, float a13, float a14, __n128 a15, float a16)
{
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t i;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  unsigned __int16 *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  _BOOL4 v65;
  char v66;
  char v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  _BOOL4 v74;
  char v75;
  unsigned __int16 *v76;
  char v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  _BOOL4 v84;
  char v85;
  char v86;
  float v87;
  unsigned int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  _BOOL4 v93;
  char v94;
  float v95;
  char v96;
  uint64_t result;
  uint64_t v98;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int16 *v104;

  if (!a1 || (v104 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v16 = a1[2];
  v17 = (unint64_t)a1[3];
  if (v17 < 2 * (uint64_t)v16)
    goto LABEL_123;
  if (!a3)
  {
    LODWORD(v18) = 0;
    if (a4)
      goto LABEL_11;
LABEL_23:
    LODWORD(v20) = 0;
    if (a5)
      goto LABEL_17;
LABEL_24:
    LODWORD(v22) = 0;
    goto LABEL_25;
  }
  v18 = *a3;
  if (*a3)
  {
    v19 = a3[2];
    if (a3[3] < v19)
      goto LABEL_123;
    if (v16 != (unsigned __int16 *)v19)
      goto LABEL_121;
    if (a1[1] != (unsigned __int16 *)a3[1])
      goto LABEL_122;
    LODWORD(v18) = 1;
  }
  if (!a4)
    goto LABEL_23;
LABEL_11:
  v20 = *a4;
  if (*a4)
  {
    v21 = a4[2];
    if ((unint64_t)a4[3] < 4 * (uint64_t)v21)
      goto LABEL_123;
    if (v16 != (unsigned __int16 *)(2 * (_QWORD)v21))
      goto LABEL_121;
    if (a1[1] != (unsigned __int16 *)(2 * (_QWORD)a4[1]))
      goto LABEL_122;
    LODWORD(v20) = 1;
  }
  if (!a5)
    goto LABEL_24;
LABEL_17:
  v22 = *a5;
  if (*a5)
  {
    v23 = a5[2];
    if ((unint64_t)a5[3] >= 4 * (uint64_t)v23)
    {
      if (v16 == (unsigned __int16 *)(2 * (_QWORD)v23))
      {
        if (a1[1] == (unsigned __int16 *)(2 * (_QWORD)a5[1]))
        {
          LODWORD(v22) = 1;
          goto LABEL_25;
        }
LABEL_122:
        FigDebugAssert3();
        return 4294967279;
      }
LABEL_121:
      FigDebugAssert3();
      return 4294967280;
    }
LABEL_123:
    FigDebugAssert3();
    return 4294967277;
  }
LABEL_25:
  if (!a6 || !a7)
  {
LABEL_120:
    FigDebugAssert3();
    return 4294967278;
  }
  if (!a8)
    goto LABEL_128;
  for (i = 0; i != 16; i += 4)
  {
    if (!a6[i])
      goto LABEL_120;
    v25 = a6[i + 2];
    if (v16 != (unsigned __int16 *)(2 * v25))
      goto LABEL_121;
    v26 = a1[1];
    if (v26 != (unsigned __int16 *)(2 * a6[i + 1]))
      goto LABEL_122;
    if (a6[i + 3] < (unint64_t)(4 * v25))
      goto LABEL_123;
    if (!a7[i])
      goto LABEL_120;
    v27 = a7[i + 2];
    if (v16 != (unsigned __int16 *)(2 * v27))
      goto LABEL_121;
    if (v26 != (unsigned __int16 *)(2 * a7[i + 1]))
      goto LABEL_122;
    if (a7[i + 3] < v27)
      goto LABEL_123;
  }
  if (a16 <= 0.0)
  {
LABEL_128:
    FigDebugAssert3();
    return 4294967266;
  }
  if ((_DWORD)v18)
    v28 = a3[3];
  else
    v28 = 0;
  v29 = 2 * v28;
  if (!(_DWORD)v18)
    v29 = 0;
  v102 = v29;
  v103 = 0;
  if ((_DWORD)v20)
    v103 = (unint64_t)a4[3] >> 2;
  if (!(_DWORD)v22)
  {
    v101 = 0;
    if (!(_DWORD)v18)
      goto LABEL_48;
LABEL_50:
    v30 = *a3;
    goto LABEL_51;
  }
  v101 = (unint64_t)a5[3] >> 2;
  if ((_DWORD)v18)
    goto LABEL_50;
LABEL_48:
  v30 = 0;
LABEL_51:
  v31 = 0;
  v32 = a6[1];
  v33 = v30 + v28;
  if ((_DWORD)v18)
    v34 = v33;
  else
    v34 = 0;
  if ((_DWORD)v20)
    v31 = *a4;
  if ((_DWORD)v22)
    v35 = *a5;
  else
    v35 = 0;
  v36 = a6[2];
  v98 = a6[1];
  if (v32)
  {
    v37 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v38 = a6[4];
    v39 = (unint64_t)a6[3] >> 2;
    v40 = a7[12];
    v41 = a7[8];
    v42 = a7[4];
    v100 = a7[3];
    v43 = *a7;
    v44 = a6[12];
    v45 = a6[8];
    v46 = *a6;
    v47 = (float)a2;
    if ((_DWORD)v18)
      v48 = 2;
    else
      v48 = 0;
    v49 = 4 * v39;
    v50 = 0.0;
    while (!v36)
    {
LABEL_112:
      v104 += v37;
      v31 += v103;
      v30 += v102;
      v34 += v102;
      v43 += v100;
      v42 += v100;
      v41 += v100;
      v35 += v101;
      v40 += v100;
      v44 += v49;
      v45 += v49;
      v38 += v49;
      v46 += v49;
      if (!--v32)
        goto LABEL_115;
    }
    v51 = 0;
    v52 = 0;
    v53 = v35;
    v54 = v31;
    v55 = v104;
    while (1)
    {
      v56 = 0.0;
      if ((_DWORD)v20)
        break;
      v58 = 0.0;
      if ((_DWORD)v22)
        goto LABEL_70;
LABEL_71:
      v60 = 0.0;
      if ((_DWORD)v18)
      {
        LOBYTE(v60) = *(_BYTE *)(v30 + v51);
        v60 = a10 + (float)(a9 * (float)LODWORD(v60));
      }
      v61 = (float)(*v55 >> 4);
      v62 = (float)((float)((float)(v61 - a15.n128_f32[0]) - v60) - v58) - v56;
      v63 = *(float *)(v46 + 4 * v52);
      v64 = v62 - v63;
      *(float *)(v46 + 4 * v52) = v63 + (float)(a16 * (float)(v62 - v63));
      v65 = v61 > v47;
      if (v61 > v47)
        v66 = 1;
      else
        v66 = v18 ^ 1;
      if ((v66 & 1) == 0)
        v65 = *(unsigned __int8 *)(v30 + v51) == 255;
      if (v65)
        v67 = -1;
      else
        v67 = *(_BYTE *)(v43 + v52);
      *(_BYTE *)(v43 + v52) = v67;
      v68 = *(float *)(v46 + 4 * v52);
      v69 = 0.0;
      if ((_DWORD)v18)
      {
        LOBYTE(v69) = *(_BYTE *)(v30 + v51 + 1);
        v69 = a10 + (float)(a9 * (float)LODWORD(v69));
      }
      v70 = (float)(v55[1] >> 4);
      v71 = (float)((float)((float)(v70 - a15.n128_f32[1]) - v69) - v58) - v56;
      v72 = *(float *)(v38 + 4 * v52);
      v73 = v71 - v72;
      *(float *)(v38 + 4 * v52) = v72 + (float)(a16 * (float)(v71 - v72));
      v74 = v70 > v47;
      if (v70 > v47)
        v75 = 1;
      else
        v75 = v18 ^ 1;
      if ((v75 & 1) == 0)
        v74 = *(unsigned __int8 *)(v30 + v51 + 1) == 255;
      v76 = (unsigned __int16 *)((char *)v55 + v37);
      if (v74)
        v77 = -1;
      else
        v77 = *(_BYTE *)(v42 + v52);
      *(_BYTE *)(v42 + v52) = v77;
      v78 = *(float *)(v38 + 4 * v52);
      v79 = 0.0;
      if ((_DWORD)v18)
      {
        LOBYTE(v79) = *(_BYTE *)(v34 + v51);
        v79 = a10 + (float)(a9 * (float)LODWORD(v79));
      }
      v80 = (float)(*v76 >> 4);
      v81 = (float)((float)((float)(v80 - a15.n128_f32[2]) - v79) - v58) - v56;
      v82 = *(float *)(v45 + 4 * v52);
      v83 = v81 - v82;
      *(float *)(v45 + 4 * v52) = v82 + (float)(a16 * (float)(v81 - v82));
      v84 = v80 > v47;
      if (v80 > v47)
        v85 = 1;
      else
        v85 = v18 ^ 1;
      if ((v85 & 1) == 0)
        v84 = *(unsigned __int8 *)(v34 + v51) == 255;
      if (v84)
        v86 = -1;
      else
        v86 = *(_BYTE *)(v41 + v52);
      *(_BYTE *)(v41 + v52) = v86;
      v87 = *(float *)(v45 + 4 * v52);
      v88 = v76[1];
      v89 = 0.0;
      if ((_DWORD)v18)
      {
        LOBYTE(v89) = *(_BYTE *)(v34 + v51 + 1);
        v89 = a10 + (float)(a9 * (float)LODWORD(v89));
      }
      v90 = (float)(v88 >> 4);
      v91 = (float)((float)((float)(v90 - a15.n128_f32[3]) - v89) - v58) - v56;
      v92 = *(float *)(v44 + 4 * v52);
      *(float *)(v44 + 4 * v52) = v92 + (float)(a16 * (float)(v91 - v92));
      v93 = v90 > v47;
      if (v90 > v47)
        v94 = 1;
      else
        v94 = v18 ^ 1;
      if ((v94 & 1) == 0)
        v93 = *(unsigned __int8 *)(v34 + v51 + 1) == 255;
      v95 = (float)((float)(v50 + (float)(v64 * (float)(v62 - v68))) + (float)(v73 * (float)(v71 - v78)))
          + (float)(v83 * (float)(v81 - v87));
      if (v93)
        v96 = -1;
      else
        v96 = *(_BYTE *)(v40 + v52);
      *(_BYTE *)(v40 + v52) = v96;
      v50 = v95 + (float)((float)(v91 - v92) * (float)(v91 - *(float *)(v44 + 4 * v52++)));
      v51 += v48;
      v55 += 2;
      if (v36 == v52)
        goto LABEL_112;
    }
    v57 = *v54++;
    v58 = a12 + (float)(a11 * v57);
    if (!(_DWORD)v22)
      goto LABEL_71;
LABEL_70:
    v59 = *v53++;
    v56 = a14 + (float)(a13 * v59);
    goto LABEL_71;
  }
  v50 = 0.0;
LABEL_115:
  result = 0;
  *a8 = (float)(v50 / (float)(unint64_t)(4 * v36 * v98)) + *a8;
  return result;
}

uint64_t dataTypeForPixelFormat(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 10;
  result = 29;
  switch(v1)
  {
    case 0:
    case 2:
    case 10:
    case 12:
    case 15:
    case 20:
    case 22:
    case 30:
    case 31:
    case 32:
    case 33:
    case 45:
    case 50:
    case 52:
    case 55:
    case 60:
    case 62:
    case 70:
    case 80:
    case 82:
    case 83:
    case 84:
    case 95:
    case 100:
    case 102:
    case 105:
      result = 3;
      break;
    case 3:
    case 13:
    case 23:
    case 43:
    case 53:
    case 63:
    case 81:
    case 93:
    case 103:
      result = 33;
      break;
    case 4:
    case 14:
    case 24:
    case 44:
    case 54:
    case 64:
    case 94:
    case 104:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

__n64 offsetForPixelComponentWithFirstPixel(unsigned int a1, unsigned int a2)
{
  unsigned __int16 *v2;
  __n64 result;

  if (a1 >= 5 || a2 >= 5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  else
  {
    v2 = (unsigned __int16 *)((char *)&offsetForPixelComponentWithFirstPixel_bayerPatternOffsets
                            + 16 * (int)a2
                            + 4 * (int)a1);
    result.n64_u16[0] = *v2;
    result.n64_u16[2] = v2[1];
  }
  return result;
}

BOOL isQuadra(__CVBuffer *a1)
{
  void *v1;
  _BOOL8 v2;

  v1 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA90D8], 0);
  v2 = objc_msgSend(v1, "intValue") == 5 || objc_msgSend(v1, "intValue") == 8;

  return v2;
}

uint64_t determineFirstPixelForVersatileCVPixelBuffer(__CVBuffer *a1)
{
  void *v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;

  v1 = (void *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA90D8], 0);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "intValue");
    if (v3 > 8)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = dword_1D33075DC[v3];
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v4 = 0xFFFFFFFFLL;
    FigSignalErrorAt();
  }

  return v4;
}

uint64_t determineFirstPixelForCVPixelFormat(int a1)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a1 > 1735549491)
  {
    if (a1 > 1919378231)
    {
      if (a1 == 1919378232 || a1 == 1919379252)
        return 1;
    }
    else if (a1 == 1735549492 || a1 == 1735549752)
    {
      return 0;
    }
  }
  else if (a1 > 1734501175)
  {
    if (a1 == 1734501176 || a1 == 1734505012)
      return 3;
  }
  else if (a1 == 1650942776 || a1 == 1650943796)
  {
    return 2;
  }
  return result;
}

uint64_t isVersatilePixelFormat(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1651519797)
  {
    if (a1 > 1651926375)
    {
      if (a1 > 2085367911)
      {
        if (a1 == 2085367912)
          return result;
        v3 = 2085775425;
      }
      else
      {
        if (a1 == 1651926376)
          return result;
        v3 = 1652056888;
      }
    }
    else if (a1 > 1651847471)
    {
      if (a1 == 1651847472)
        return result;
      v3 = 1651925816;
    }
    else
    {
      if (a1 == 1651519798)
        return result;
      v3 = 1651587122;
    }
    goto LABEL_22;
  }
  if (a1 > 760375360)
  {
    if (a1 > 793929792)
    {
      if (a1 == 793929793)
        return result;
      v3 = 1647719528;
    }
    else
    {
      if (a1 == 760375361)
        return result;
      v3 = 793522280;
    }
    goto LABEL_22;
  }
  if (a1 != 642527336 && a1 != 642934849)
  {
    v3 = 759967848;
LABEL_22:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t determineFirstPixel(__CVBuffer *a1)
{
  OSType PixelFormatType;
  uint64_t PixelForVersatileCVPixelBuffer;

  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    PixelForVersatileCVPixelBuffer = 0xFFFFFFFFLL;
    FigSignalErrorAt();
    return PixelForVersatileCVPixelBuffer;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (isVersatilePixelFormat(PixelFormatType))
  {
    PixelForVersatileCVPixelBuffer = determineFirstPixelForVersatileCVPixelBuffer(a1);
    if (!(_DWORD)PixelForVersatileCVPixelBuffer)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    return PixelForVersatileCVPixelBuffer;
  }
  return determineFirstPixelForCVPixelFormat(PixelFormatType);
}

uint64_t determineMTLPixelFormatsForCVPixelFormat(int a1)
{
  uint64_t result;
  int v3;
  int v4;

  result = 13;
  if (a1 <= 1650943795)
  {
    if (a1 <= 761816623)
    {
      if (a1 <= 644376111)
      {
        if (a1 == 642527336)
          return 25;
        v4 = 642934849;
      }
      else
      {
        if (a1 == 644376112 || a1 == 759967848)
          return 25;
        v4 = 760375361;
      }
    }
    else if (a1 > 795371055)
    {
      if (a1 == 795371056 || a1 == 1278226536)
        return 25;
      v4 = 1647719528;
    }
    else
    {
      if (a1 == 761816624 || a1 == 793522280)
        return 25;
      v4 = 793929793;
    }
    if (a1 != v4)
      return result;
    return 115;
  }
  if (a1 <= 1815162993)
  {
    if (a1 <= 1734505011)
    {
      if (a1 != 1650943796 && a1 != 1651519798)
      {
        v3 = 1651926376;
        goto LABEL_31;
      }
      return 23;
    }
    if (a1 == 1734505012 || a1 == 1735549492)
      return 23;
    v3 = 1751527984;
LABEL_31:
    if (a1 != v3)
      return result;
    return 25;
  }
  if (a1 > 2085367911)
  {
    if (a1 == 2087216688)
      return 25;
    if (a1 != 2085775425)
    {
      v3 = 2085367912;
      goto LABEL_31;
    }
    return 115;
  }
  switch(a1)
  {
    case 1815162994:
      return 90;
    case 1885745712:
      return 588;
    case 1919379252:
      return 23;
  }
  return result;
}

uint64_t bfpn_channel_mean(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;

  if (!a1)
  {
LABEL_18:
    FigDebugAssert3();
    return 4294967281;
  }
  if (a2 && (v2 = *a2) != 0)
  {
    v3 = a2[2];
    v4 = a2[3];
    if (v4 >= 4 * v3)
    {
      v5 = 0;
      while (a1[v5])
      {
        v6 = a1[v5 + 2];
        if (a1[v5 + 3] < (unint64_t)(4 * v6))
          goto LABEL_19;
        if (v6 != v3)
        {
          FigDebugAssert3();
          return 4294967280;
        }
        v7 = a1[v5 + 1];
        if (v7 != a2[1])
        {
          FigDebugAssert3();
          return 4294967279;
        }
        v5 += 4;
        if (v5 == 16)
        {
          if (v7)
          {
            v8 = a1[4];
            v9 = (unint64_t)a1[3] >> 2;
            v10 = a1[8];
            v11 = a1[12];
            v12 = 4 * (v4 >> 2);
            v13 = *a1;
            v14 = 4 * ((unint64_t)a1[15] >> 2);
            v15 = 4 * ((unint64_t)a1[11] >> 2);
            v16 = 4 * ((unint64_t)a1[7] >> 2);
            v17 = 4 * v9;
            do
            {
              if (v3)
              {
                for (i = 0; i != v3; ++i)
                  *(float *)(v2 + 4 * i) = (float)((float)((float)(*(float *)(v13 + 4 * i) + *(float *)(v8 + 4 * i))
                                                         + *(float *)(v10 + 4 * i))
                                                 + *(float *)(v11 + 4 * i))
                                         * 0.25;
              }
              v2 += v12;
              v11 += v14;
              v10 += v15;
              v8 += v16;
              v13 += v17;
              --v7;
            }
            while (v7);
          }
          return 0;
        }
      }
      goto LABEL_18;
    }
LABEL_19:
    FigDebugAssert3();
    return 4294967277;
  }
  else
  {
    FigDebugAssert3();
    return 4294967278;
  }
}

uint64_t bfpn_clear_clipped_pixels(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;

  if (!a1)
    goto LABEL_21;
  v2 = *a1;
  if (!*a1)
    goto LABEL_21;
  v4 = a1[2];
  v3 = a1[3];
  if (v3 < v4)
    goto LABEL_22;
  if (!a2 || (v5 = *a2) == 0)
  {
LABEL_21:
    FigDebugAssert3();
    return 4294967281;
  }
  v6 = a2[2];
  v7 = a2[3];
  if (v7 < 4 * v6)
  {
LABEL_22:
    FigDebugAssert3();
    return 4294967277;
  }
  if (v4 == v6)
  {
    v8 = a1[1];
    if (v8 == a2[1])
    {
      if (v8)
      {
        v9 = 4 * (v7 >> 2);
        do
        {
          if (v4)
          {
            for (i = 0; i != v4; ++i)
            {
              if (*(_BYTE *)(v2 + i))
                *(_DWORD *)(v5 + 4 * i) = 0;
            }
          }
          v2 += v3;
          v5 += v9;
          --v8;
        }
        while (v8);
      }
      return 0;
    }
    else
    {
      FigDebugAssert3();
      return 4294967279;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967280;
  }
}

uint64_t bfpn_normalize(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;

  if (!a1 || (v3 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v4 = a1[2];
  v5 = a1[3];
  if (v5 < 4 * v4)
    goto LABEL_26;
  if (!a2 || (v6 = *a2) == 0)
  {
    FigDebugAssert3();
    return 4294967268;
  }
  v7 = a2[2];
  v8 = a2[3];
  if (v8 < 4 * v7)
    goto LABEL_26;
  if (!a3 || (v9 = *a3) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v11 = a3[2];
  v10 = a3[3];
  if (v10 < 4 * v11)
  {
LABEL_26:
    FigDebugAssert3();
    return 4294967277;
  }
  if (v4 != v7)
    goto LABEL_29;
  v12 = a1[1];
  if (v12 != a2[1])
    goto LABEL_30;
  if (v4 != v11)
  {
LABEL_29:
    FigDebugAssert3();
    return 4294967280;
  }
  if (v12 != a3[1])
  {
LABEL_30:
    FigDebugAssert3();
    return 4294967279;
  }
  if (v12)
  {
    v13 = v5 >> 2;
    v14 = 4 * (v10 >> 2);
    v15 = 4 * (v8 >> 2);
    v16 = 4 * v13;
    do
    {
      if (v4)
      {
        for (i = 0; i != v4; ++i)
          *(float *)(v9 + 4 * i) = *(float *)(v3 + 4 * i) / fmaxf(*(float *)(v6 + 4 * i), 0.000001);
      }
      v9 += v14;
      v6 += v15;
      v3 += v16;
      --v12;
    }
    while (v12);
  }
  return 0;
}

uint64_t bfpn_update_clipping_mask(uint64_t *a1, unsigned int a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  char v13;

  if (!a1 || (v4 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v5 = a1[2];
  v6 = a1[3];
  if (v6 < 2 * v5)
    goto LABEL_23;
  if (!a4 || (v7 = *a4) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v9 = a4[2];
  v8 = a4[3];
  if (v8 < v9)
  {
LABEL_23:
    FigDebugAssert3();
    return 4294967277;
  }
  else if (v5 == v9)
  {
    v10 = a1[1];
    if (v10 == a4[1])
    {
      if (v10)
      {
        v11 = 2 * (v6 >> 1);
        do
        {
          if (v5)
          {
            for (i = 0; i != v5; ++i)
            {
              v13 = *(_BYTE *)(v7 + i);
              if (a3)
                v13 = 0;
              if (a2 < *(unsigned __int16 *)(v4 + 2 * i) >> 4)
                v13 = -1;
              *(_BYTE *)(v7 + i) = v13;
            }
          }
          v7 += v8;
          v4 += v11;
          --v10;
        }
        while (v10);
      }
      return 0;
    }
    else
    {
      FigDebugAssert3();
      return 4294967279;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967280;
  }
}

uint64_t bfpn_sampler_init(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v8 = (char *)malloc_type_calloc(17 * (a2 + 16), 4uLL, 0x100004052888210uLL);
        if (v8)
        {
          v9 = v8;
          v10 = 0;
          v26 = 0;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v11 = v8;
          v18 = 0u;
          v19 = 0u;
          do
          {
            *(_QWORD *)((char *)&v18 + v10) = v11;
            v10 += 8;
            v11 += 4 * a2 + 64;
          }
          while (v10 != 136);
          result = 0;
          *(_QWORD *)a1 = a2;
          *(_QWORD *)(a1 + 8) = a3;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = v9;
          v13 = v25;
          *(_OWORD *)(a1 + 128) = v24;
          *(_OWORD *)(a1 + 144) = v13;
          v14 = v26;
          v15 = v21;
          *(_OWORD *)(a1 + 64) = v20;
          *(_OWORD *)(a1 + 80) = v15;
          v16 = v23;
          *(_OWORD *)(a1 + 96) = v22;
          *(_OWORD *)(a1 + 112) = v16;
          v17 = v19;
          *(_OWORD *)(a1 + 32) = v18;
          *(_OWORD *)(a1 + 48) = v17;
          *(_QWORD *)(a1 + 160) = v14;
          *(_QWORD *)(a1 + 168) = a2 + 16;
          *(_DWORD *)(a1 + 176) = 0;
          *(_DWORD *)(a1 + 180) = a4;
        }
        else
        {
          FigDebugAssert3();
          return 4294967270;
        }
      }
      else
      {
        FigDebugAssert3();
        return 4294967283;
      }
    }
    else
    {
      FigDebugAssert3();
      return 4294967284;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967272;
  }
  return result;
}

double bfpn_sampler_free(uint64_t a1)
{
  double result;

  if (a1)
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 176) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t bfpn_sampler_fetchRow(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  int v17;
  int v18;
  int *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v4 = *a2;
      if (*a2)
      {
        v6 = a2[2];
        if (v6 <= *(_QWORD *)a1)
        {
          v8 = a2[3];
          if (!v8 || 4 * v6 <= v8)
          {
            if (v4 != *(_QWORD *)(a1 + 16))
            {
              v9 = 0;
              *(_QWORD *)(a1 + 16) = v4;
              *(_DWORD *)(a1 + 176) = a3;
              do
              {
                v10 = a3 + v9;
                v11 = *(_DWORD *)(a1 + 180);
                if (v11 == 1)
                {
                  v10 &= ~(v10 >> 31);
                  if (v10 >= *((_DWORD *)a2 + 2) - 1)
                    v10 = *((_DWORD *)a2 + 2) - 1;
                }
                if (v10 < 0 || a2[1] <= (unint64_t)v10)
                  v12 = 0;
                else
                  v12 = (int *)(v4 + ((a2[3] * v10) & 0xFFFFFFFFFFFFFFFCLL));
                fillRow(v11, v12, a2[2], *(char **)(a1 + 32 + 8 * v9++));
              }
              while (v9 != 17);
            }
            v13 = a3 - *(_DWORD *)(a1 + 176);
            if ((v13 & 0x80000000) != 0)
            {
              v25 = 0;
              v42 = 0;
              v40 = 0u;
              v41 = 0u;
              v38 = 0u;
              v39 = 0u;
              v36 = 0u;
              v37 = 0u;
              v34 = 0u;
              v35 = 0u;
              *(_DWORD *)(a1 + 176) = a3;
              do
              {
                v26 = *(char **)(a1 + 8 * ((int)(v13 + v25) % 17) + 32);
                *((_QWORD *)&v34 + v25) = v26;
                if (((v13 + (_DWORD)v25) & 0x80000000) != 0)
                {
                  v27 = *(_DWORD *)(a1 + 180);
                  v28 = v25 + *(_DWORD *)(a1 + 176);
                  if (v27 == 1)
                  {
                    v28 &= ~(v28 >> 31);
                    if (v28 >= *((_DWORD *)a2 + 2) - 1)
                      v28 = *((_DWORD *)a2 + 2) - 1;
                  }
                  if (v28 < 0 || a2[1] <= (unint64_t)v28)
                    v29 = 0;
                  else
                    v29 = (int *)(v4 + ((a2[3] * v28) & 0xFFFFFFFFFFFFFFFCLL));
                  fillRow(v27, v29, a2[2], v26);
                }
                ++v25;
              }
              while (v25 != 17);
              v13 = 0;
              *(_QWORD *)(a1 + 160) = v42;
              v30 = v41;
              *(_OWORD *)(a1 + 128) = v40;
              *(_OWORD *)(a1 + 144) = v30;
              v31 = v37;
              *(_OWORD *)(a1 + 64) = v36;
              *(_OWORD *)(a1 + 80) = v31;
              v32 = v39;
              *(_OWORD *)(a1 + 96) = v38;
              *(_OWORD *)(a1 + 112) = v32;
              v24 = v34;
              v23 = v35;
            }
            else
            {
              if (v13 < 0x11)
                return *(_QWORD *)(a1 + 8 * v13 + 32) + 32;
              v14 = 0;
              v42 = 0;
              v15 = v13 - 16;
              v40 = 0u;
              v41 = 0u;
              v38 = 0u;
              v39 = 0u;
              v36 = 0u;
              v37 = 0u;
              *(_DWORD *)(a1 + 176) = a3 - 16;
              v34 = 0u;
              v35 = 0u;
              do
              {
                v16 = *(char **)(a1 + 8 * ((int)(v15 + v14) % 17) + 32);
                *((_QWORD *)&v34 + v14) = v16;
                if ((int)(v15 + v14) >= 17)
                {
                  v17 = *(_DWORD *)(a1 + 180);
                  v18 = v14 + *(_DWORD *)(a1 + 176);
                  if (v17 == 1)
                  {
                    v18 &= ~(v18 >> 31);
                    if (v18 >= *((_DWORD *)a2 + 2) - 1)
                      v18 = *((_DWORD *)a2 + 2) - 1;
                  }
                  if (v18 < 0 || a2[1] <= (unint64_t)v18)
                    v19 = 0;
                  else
                    v19 = (int *)(v4 + ((a2[3] * v18) & 0xFFFFFFFFFFFFFFFCLL));
                  fillRow(v17, v19, a2[2], v16);
                }
                ++v14;
              }
              while (v14 != 17);
              v20 = v41;
              *(_OWORD *)(a1 + 128) = v40;
              *(_OWORD *)(a1 + 144) = v20;
              *(_QWORD *)(a1 + 160) = v42;
              v21 = v37;
              *(_OWORD *)(a1 + 64) = v36;
              *(_OWORD *)(a1 + 80) = v21;
              v22 = v39;
              *(_OWORD *)(a1 + 96) = v38;
              *(_OWORD *)(a1 + 112) = v22;
              v24 = v34;
              v23 = v35;
              v13 = 16;
            }
            *(_OWORD *)(a1 + 32) = v24;
            *(_OWORD *)(a1 + 48) = v23;
            return *(_QWORD *)(a1 + 8 * v13 + 32) + 32;
          }
        }
      }
    }
  }
  FigDebugAssert3();
  return 0;
}

double fillRow(int a1, int *__src, uint64_t a3, char *__b)
{
  int v7;
  char *v8;
  double result;
  char *v10;
  char *v11;
  int v12;
  int __pattern4;

  if (__src)
  {
    if (a1 == 1)
    {
      v7 = *__src;
      v12 = __src[a3 - 1];
      __pattern4 = v7;
      memset_pattern4(__b, &__pattern4, 0x20uLL);
      v8 = __b + 32;
      memcpy(v8, __src, 4 * a3);
      memset_pattern4(&v8[4 * a3], &v12, 0x20uLL);
    }
    else
    {
      *(_OWORD *)__b = 0u;
      *((_OWORD *)__b + 1) = 0u;
      v10 = __b + 32;
      memcpy(__b + 32, __src, 4 * a3);
      v11 = &v10[4 * a3];
      result = 0.0;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
    }
  }
  else
  {
    bzero(__b, 4 * a3 + 64);
  }
  return result;
}

CMIDictionaryWithDefaultDict *cmiMergedObject(void *a1, void *a2)
{
  id v3;
  id v4;
  CMIDictionaryWithDefaultDict *v5;
  CMIDictionaryWithDefaultDict *v6;

  v3 = a1;
  v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = -[CMIDictionaryWithDefaultDict initWithMainDict:defaultDict:]([CMIDictionaryWithDefaultDict alloc], "initWithMainDict:defaultDict:", v3, v4);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = -[CMIArrayWithDefaultArray initWithMainArray:defaultArray:]([CMIArrayWithDefaultArray alloc], "initWithMainArray:defaultArray:", v3, v4);
    else
      v5 = (CMIDictionaryWithDefaultDict *)v3;
  }
  v6 = v5;

  return v6;
}

uint64_t bfpn_generate_lfmodel(uint64_t *a1, uint64_t *a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;

  if (!a1 || (v4 = *a1) == 0)
  {
    FigDebugAssert3();
    return 4294967281;
  }
  v5 = a1[2];
  v6 = a1[3];
  if (v6 < 4 * v5)
    goto LABEL_19;
  if (!a2 || (v7 = *a2) == 0)
  {
    FigDebugAssert3();
    return 4294967278;
  }
  v9 = a2[2];
  v8 = a2[3];
  if (v8 < v9)
  {
LABEL_19:
    FigDebugAssert3();
    return 4294967277;
  }
  else if (v5 == v9)
  {
    v10 = a1[1];
    if (v10 == a2[1])
    {
      if (v10)
      {
        v11 = 4 * (v6 >> 2);
        do
        {
          if (v5)
          {
            for (i = 0; i != v5; ++i)
              *(_BYTE *)(v7 + i) = llroundf(fminf(fmaxf((float)(*(float *)(v4 + 4 * i) + a4) * a3, 0.0), 255.0));
          }
          v7 += v8;
          v4 += v11;
          --v10;
        }
        while (v10);
      }
      return 0;
    }
    else
    {
      FigDebugAssert3();
      return 4294967279;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967280;
  }
}

BOOL cmisep_texturesAreIdentical(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v3 == v4)
  {
    v6 = 1;
  }
  else if (objc_msgSend(v3, "iosurface"))
  {
    v7 = objc_msgSend(v3, "iosurface");
    v6 = v7 == objc_msgSend(v5, "iosurface");
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1D32D6560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  id *v14;
  uint64_t i;

  for (i = 520; i != -40; i -= 40)
  __destructor_8_s0_s8_s16_s24_s32_s40_s48_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152_s160_s168(v14);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8_s16_s24_s32_s40_s48_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152_s160_s168(id *a1)
{

}

void sub_1D32D6FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, char a14)
{
  void *v14;
  uint64_t i;

  for (i = 40; i != -40; i -= 40)
    __destructor_8_s0_s16((id *)(&a14 + i));

  _Unwind_Resume(a1);
}

void __destructor_8_s0_s16(id *a1)
{

}

void sub_1D32DEA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id *location,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a65;
  uint64_t v65;

  __destructor_8_S_s0_S_s8_s16_s24_s32_S_s40_s48_S_s56_s64_s72_s80_S_s88_s96_s104_s112_s120_s128_s136_s144_s152_S_s160_s168_s176_s184_s192_s200_s208_S_s216_S_s224_S_s232_s240_s248(&a65);

  __destructor_8_s0_s8_s16_s24_s32_s40_s48_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152_s160_s168((id *)&STACK[0x2D0]);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v65 - 128));
  _Unwind_Resume(a1);
}

void __move_assignment_8_8_s0_s8_s16_s24_s32_s40_s48_s56_s64_s72_s80_s88_s96_s104_s112_s120_s128_s136_s144_s152_s160_s168(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;

  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  v6 = a2[1];
  a2[1] = 0;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

  v8 = a2[2];
  a2[2] = 0;
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;

  v10 = a2[3];
  a2[3] = 0;
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;

  v12 = a2[4];
  a2[4] = 0;
  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;

  v14 = a2[5];
  a2[5] = 0;
  v15 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v14;

  v16 = a2[6];
  a2[6] = 0;
  v17 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v16;

  v18 = a2[7];
  a2[7] = 0;
  v19 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v18;

  v20 = a2[8];
  a2[8] = 0;
  v21 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v20;

  v22 = a2[9];
  a2[9] = 0;
  v23 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v22;

  v24 = a2[10];
  a2[10] = 0;
  v25 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v24;

  v26 = a2[11];
  a2[11] = 0;
  v27 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v26;

  v28 = a2[12];
  a2[12] = 0;
  v29 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v28;

  v30 = a2[13];
  a2[13] = 0;
  v31 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v30;

  v32 = a2[14];
  a2[14] = 0;
  v33 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v32;

  v34 = a2[15];
  a2[15] = 0;
  v35 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v34;

  v36 = a2[16];
  a2[16] = 0;
  v37 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v36;

  v38 = a2[17];
  a2[17] = 0;
  v39 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v38;

  v40 = a2[18];
  a2[18] = 0;
  v41 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v40;

  v42 = a2[19];
  a2[19] = 0;
  v43 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v42;

  v44 = a2[20];
  a2[20] = 0;
  v45 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v44;

  v46 = a2[21];
  a2[21] = 0;
  v47 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v46;

}

void __destructor_8_S_s0_S_s8_s16_s24_s32_S_s40_s48_S_s56_s64_s72_s80_S_s88_s96_s104_s112_s120_s128_s136_s144_s152_S_s160_s168_s176_s184_s192_s200_s208_S_s216_S_s224_S_s232_s240_s248(id *a1)
{

  __destructor_8_s0_s8_s16_s24(a1 + 1);
  __destructor_8_s0_s8_s16_s24(a1 + 7);
  __destructor_8_s0_s8_s16_s24_s32_s40_s48_s56_s64(a1 + 11);
  __destructor_8_s0_s8_s16_s24_s32_s40_s48(a1 + 20);

  __destructor_8_s0_s8_s16(a1 + 29);
}

void __destructor_8_s0_s8_s16_s24(id *a1)
{

}

void __destructor_8_s0_s8_s16_s24_s32_s40_s48_s56_s64(id *a1)
{

}

void __destructor_8_s0_s8_s16_s24_s32_s40_s48(id *a1)
{

}

void __destructor_8_s0_s8_s16(id *a1)
{

}

double cmisep_pixelBufferSize(__CVBuffer *a1, unsigned int a2)
{
  size_t WidthOfPlane;
  unint64_t v5;

  if (CVPixelBufferIsPlanar(a1))
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, a2);
  else
    WidthOfPlane = CVPixelBufferGetWidth(a1);
  v5 = WidthOfPlane;
  if (CVPixelBufferIsPlanar(a1))
    CVPixelBufferGetHeightOfPlane(a1, a2);
  else
    CVPixelBufferGetHeight(a1);
  return (double)v5;
}

void sub_1D32E0FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t bfpn_calculate_lf_stats(uint64_t *a1, float *a2, float *a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  float v16;
  float v17;
  float v18;
  uint64_t j;
  float v20;
  uint64_t result;

  if (a1 && (v4 = *a1) != 0)
  {
    v5 = a1[2];
    v6 = a1[3];
    if (v6 < 4 * v5)
    {
      FigDebugAssert3();
      return 4294967277;
    }
    else if (a2 && a3 && a4)
    {
      v7 = a1[1];
      v8 = 1.0 / (float)(unint64_t)(v7 * v5);
      if (v7)
      {
        v9 = 4 * (v6 >> 2);
        v10 = 0.0;
        v11 = 3.4028e38;
        v12 = -3.4028e38;
        v13 = *a1;
        v14 = a1[1];
        do
        {
          if (v5)
          {
            for (i = 0; i != v5; ++i)
            {
              v16 = *(float *)(v13 + 4 * i);
              v10 = v10 + v16;
              v11 = fminf(v11, v16);
              v12 = fmaxf(v12, v16);
            }
          }
          v13 += v9;
          --v14;
        }
        while (v14);
        v17 = v8 * v10;
        v18 = 0.0;
        do
        {
          if (v5)
          {
            for (j = 0; j != v5; ++j)
              v18 = v18 + (float)((float)(*(float *)(v4 + 4 * j) - v17) * (float)(*(float *)(v4 + 4 * j) - v17));
          }
          v4 += v9;
          --v7;
        }
        while (v7);
        v20 = v12 - v11;
      }
      else
      {
        v18 = 0.0;
        v17 = v8 * 0.0;
        v20 = -INFINITY;
      }
      result = 0;
      *a2 = v17;
      *a3 = v8 * v18;
      *a4 = v20;
    }
    else
    {
      FigDebugAssert3();
      return 4294967266;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294967281;
  }
  return result;
}

uint64_t ssyrk_noPack_UN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t *v44;
  float32x4_t *v45;
  float32x2_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  __int32 *v50;
  float32x4_t v51;
  __int32 *v52;
  float32x2_t *v53;
  float32x2_t *v54;
  uint64_t result;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  float32x2_t *v69;
  uint64_t v70;
  unint64_t *v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  uint64_t v85;
  unsigned __int32 *v86;
  float32x2_t v87;
  float v88;
  unsigned __int32 *v89;

  a7.i64[1] = a8.i64[0];
  v12 = 0;
  v13 = 4 * a4;
  v14 = 4 * a6;
  v15 = a1 <= 3;
  for (i = a1 - 3; !v15; v12 += 4)
  {
    v17 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v14);
    if (v12)
    {
      v18 = 0;
      do
      {
        v19 = a2;
        v20 = (float32x4_t *)(a3 + 4 * v12);
        v21 = (float32x4_t *)(a3 + 4 * v18);
        v22 = (float32x4_t)veorq_s8(a8, a8);
        v23 = v22;
        v24 = v22;
        v25 = v22;
        do
        {
          v26 = *v21;
          v21 = (float32x4_t *)((char *)v21 + v13);
          v27 = *v20;
          v20 = (float32x4_t *)((char *)v20 + v13);
          v22 = vmlaq_n_f32(v22, v26, v27.f32[0]);
          v23 = vmlaq_lane_f32(v23, v26, *(float32x2_t *)v27.f32, 1);
          v24 = vmlaq_laneq_f32(v24, v26, v27, 2);
          v25 = vmlaq_laneq_f32(v25, v26, v27, 3);
          v15 = v19-- <= 1;
        }
        while (!v15);
        v29 = *v17;
        v28 = (float32x4_t *)((char *)v17 + v14);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v14);
        v33 = *v30;
        v32 = (float32x4_t *)((char *)v30 + v14);
        v34 = *v32;
        v35 = (__n128 *)((char *)v32 + v14 + -4 * v14);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v22, a7.f32[0]), v29, a7, 2);
        *v35 = (__n128)a8;
        v36 = (float32x4_t *)((char *)v35 + v14);
        *v36 = vmlaq_laneq_f32(vmulq_n_f32(v23, a7.f32[0]), v31, a7, 2);
        v37 = (float32x4_t *)((char *)v36 + v14);
        *v37 = vmlaq_laneq_f32(vmulq_n_f32(v24, a7.f32[0]), v33, a7, 2);
        v38 = (float32x4_t *)((char *)v37 + v14);
        *v38 = vmlaq_laneq_f32(vmulq_n_f32(v25, a7.f32[0]), v34, a7, 2);
        v17 = (float32x4_t *)((char *)v38 + v14 + -4 * v14 + 16);
        v18 += 4;
      }
      while (v18 < v12);
    }
    v39 = a2;
    v40 = (float32x4_t *)(a3 + 4 * v12);
    a8 = veorq_s8(a8, a8);
    v41 = *(float32x2_t *)a8.i8;
    v42 = (float32x4_t)a8;
    v43 = (float32x4_t)a8;
    do
    {
      a12 = *v40;
      v40 = (float32x4_t *)((char *)v40 + v13);
      *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a12.f32[0]);
      v41 = vmla_lane_f32(v41, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
      v42 = vmlaq_laneq_f32(v42, a12, a12, 2);
      v43 = vmlaq_laneq_f32(v43, a12, a12, 3);
      v15 = v39-- <= 1;
    }
    while (!v15);
    a12.i32[0] = v17->i32[0];
    v44 = (float32x2_t *)((char *)v17 + v14);
    v46 = *v44;
    v45 = (float32x4_t *)((char *)v44 + v14);
    v48 = *v45;
    v47 = (float32x4_t *)((char *)v45 + v14);
    v49 = *v47;
    v50 = (__int32 *)((char *)v47 + v14 + -4 * v14);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v51 = vmlaq_laneq_f32(vmulq_n_f32(v42, a7.f32[0]), v48, a7, 2);
    v52 = &v50[(unint64_t)v14 / 2];
    *v50 = a8.i32[0];
    v53 = (float32x2_t *)&v50[(unint64_t)v14 / 4];
    *v53 = vmla_laneq_f32(vmul_n_f32(v41, a7.f32[0]), v46, a7, 2);
    v54 = (float32x2_t *)((char *)v53 + v14);
    *v54 = *(float32x2_t *)v51.f32;
    v52[2] = v51.i32[2];
    *(float32x4_t *)&v54->f32[(unint64_t)v14 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v43, a7.f32[0]), v49, a7, 2);
    v15 = i <= 4;
    i -= 4;
  }
  v15 = i <= -3;
  result = i + 3;
  if (!v15)
  {
    if (result >= 2)
    {
      v56 = (float32x2_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v14);
      if (v12)
      {
        v57 = 0;
        do
        {
          v58 = a2;
          v59 = (float32x2_t *)(a3 + 4 * v12);
          v60 = (float32x2_t *)(a3 + 4 * v57);
          v61 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v62 = v61;
          do
          {
            v63 = *v60;
            v60 = (float32x2_t *)((char *)v60 + v13);
            v64 = *v59;
            v59 = (float32x2_t *)((char *)v59 + v13);
            v61 = vmla_n_f32(v61, v63, v64.f32[0]);
            v62 = vmla_lane_f32(v62, v63, v64, 1);
            v15 = v58-- <= 1;
          }
          while (!v15);
          v66 = *v56;
          v65 = (float32x2_t *)((char *)v56 + v14);
          v67 = *v65;
          v68 = (float32x2_t *)((char *)v65 + v14 + -2 * v14);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v66, a7, 2);
          *v68 = *(float32x2_t *)a8.i8;
          v69 = (float32x2_t *)((char *)v68 + v14);
          *v69 = vmla_laneq_f32(vmul_n_f32(v62, a7.f32[0]), v67, a7, 2);
          v56 = (float32x2_t *)((char *)v69 + v14 + -2 * v14 + 8);
          v57 += 2;
        }
        while (v57 < v12);
      }
      v70 = a2;
      v71 = (unint64_t *)(a3 + 4 * v12);
      v72 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v73 = v72;
      do
      {
        a12.i64[0] = *v71;
        v71 = (unint64_t *)((char *)v71 + v13);
        v72 = vmla_n_f32(v72, *(float32x2_t *)a12.f32, a12.f32[0]);
        v73 = vmla_lane_f32(v73, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
        v15 = v70-- <= 1;
      }
      while (!v15);
      a12.i32[0] = v56->i32[0];
      v74 = (float32x2_t *)((char *)v56 + v14);
      v75 = *v74;
      v76 = (float32x2_t *)((char *)v74 + v14 + -2 * v14);
      v72.f32[0] = v72.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v72, *(float32x2_t *)a12.f32, a7, 2);
      v76->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v76 + v14) = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), v75, a7, 2);
      result -= 2;
      v12 += 2;
    }
    if (result >= 1)
    {
      v77 = (float32x2_t *)a5;
      v78 = 0;
      if (v12 >= 1)
      {
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + 4 * v12);
          v81 = (float32x2_t *)(a3 + 4 * v78);
          v82 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          do
          {
            v83 = *v81;
            v81 = (float32x2_t *)((char *)v81 + v13);
            v84 = *v80;
            v80 = (float *)((char *)v80 + v13);
            v82 = vmla_n_f32(v82, v83, v84);
            v15 = v79-- <= 1;
          }
          while (!v15);
          *(float32x2_t *)a12.f32 = *v77;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v82, a7.f32[0]), *v77, a7, 2);
          *v77++ = *(float32x2_t *)a8.i8;
          v78 += 2;
        }
        while (v78 < v12 - 1);
      }
      v85 = a2;
      v86 = (unsigned __int32 *)(a3 + 4 * v12);
      v87 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v88 = *(float *)v86,
            v86 = (unsigned __int32 *)((char *)v86 + v13),
            v87.f32[0] = v88 * v88,
            v85 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i32[0] = *v86;
          v89 = &v86[(unint64_t)v13 / 4];
          a12.i32[1] = *v89;
          v86 = &v89[(unint64_t)v13 / 4];
          v87 = vmla_f32(v87, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v15 = v85 <= 2;
          v85 -= 2;
        }
        while (!v15);
        v87.f32[0] = vaddv_f32(v87);
      }
      a12.i32[0] = v77->i32[0];
      v87.f32[0] = v87.f32[0] * a7.f32[0];
      v77->i32[0] = vmla_laneq_f32(v87, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

uint64_t dgePack_A_Tran_Aligned(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 *v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v5 = &a3[a4];
  v6 = (__int128 *)&a3[2 * a4];
  v7 = &v5[2 * a4];
  v8 = &v6[a4];
  v9 = &v7[2 * a4];
  v10 = &v8[a4];
  v11 = &v9[2 * a4];
  v12 = (a4 << 6) - 8 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        *(_QWORD *)&v14 = *a3;
        *(_QWORD *)&v15 = a3[1];
        a3 += 2;
        *((_QWORD *)&v14 + 1) = *v5;
        *((_QWORD *)&v15 + 1) = v5[1];
        v5 += 2;
        v16 = *v6;
        *(_QWORD *)&v17 = *((_QWORD *)v6++ + 1);
        *((_QWORD *)&v17 + 1) = v7[1];
        v7 += 2;
        v18 = *v8;
        *(_QWORD *)&v19 = *((_QWORD *)v8++ + 1);
        *((_QWORD *)&v19 + 1) = v9[1];
        v9 += 2;
        v20 = *v10;
        *(_QWORD *)&v21 = *((_QWORD *)v10++ + 1);
        *((_QWORD *)&v21 + 1) = v11[1];
        v11 += 2;
        *a5 = v14;
        a5[1] = v16;
        v22 = a5 + 2;
        *v22 = v18;
        v22[1] = v20;
        v22 += 2;
        *v22 = v15;
        v22[1] = v17;
        v22 += 2;
        *v22 = v19;
        v22[1] = v21;
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      *(_QWORD *)&v24 = *a3++;
      *((_QWORD *)&v24 + 1) = *v5++;
      v25 = *v6;
      v6 = (__int128 *)((char *)v6 + 8);
      ++v7;
      v26 = *v8;
      v8 = (__int128 *)((char *)v8 + 8);
      ++v9;
      v27 = *v10;
      v10 = (__int128 *)((char *)v10 + 8);
      ++v11;
      *a5 = v24;
      a5[1] = v25;
      a5[2] = v26;
      a5[3] = v27;
      a5 += 4;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (_QWORD *)((char *)a3 + v12);
    v5 = (_QWORD *)((char *)v5 + v12);
    v6 = (__int128 *)((char *)v6 + v12);
    v7 = (_QWORD *)((char *)v7 + v12);
    v8 = (__int128 *)((char *)v8 + v12);
    v9 = (_QWORD *)((char *)v9 + v12);
    v10 = (__int128 *)((char *)v10 + v12);
    v11 = (_QWORD *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

_OWORD *dgebpScaleAlignedC_8M4N(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _OWORD *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;

  v8 = _X2;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    v25 = _X2[2];
    v26 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v29 = *_X2;
    v30 = _X2[1];
    v31 = _X2[2];
    v32 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    v37 = _X2[2];
    v38 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v41 = *a2;
    v42 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v46 = vmulq_n_f64(v23, a7);
    v47 = vmulq_n_f64(v24, a7);
    v48 = vmulq_n_f64(v25, a7);
    v49 = vmulq_n_f64(v26, a7);
    v50 = vmulq_n_f64(v29, a7);
    v51 = vmulq_n_f64(v30, a7);
    v52 = vmulq_n_f64(v31, a7);
    v53 = vmulq_n_f64(v32, a7);
    v54 = vmulq_n_f64(v35, a7);
    v55 = vmulq_n_f64(v36, a7);
    v56 = vmulq_n_f64(v37, a7);
    v57 = vmulq_n_f64(v38, a7);
    v58 = vmulq_n_f64(*_X2, a7);
    v59 = vmulq_n_f64(_X2[1], a7);
    v60 = vmulq_n_f64(_X2[2], a7);
    v61 = vmulq_n_f64(_X2[3], a7);
    do
    {
      v62 = v11;
      v63 = v12;
      v46 = vmlaq_n_f64(v46, v11, v41.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v11, v41, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v64 = result + 2;
      v54 = vmlaq_n_f64(v54, v62, v42.f64[0]);
      v58 = vmlaq_laneq_f64(v58, v62, v42, 1);
      v65 = *_X6;
      v66 = _X6[1];
      _X6 += 2;
      v67 = v14;
      v47 = vmlaq_n_f64(v47, v63, v41.f64[0]);
      v51 = vmlaq_laneq_f64(v51, v63, v41, 1);
      v68 = v15;
      v55 = vmlaq_n_f64(v55, v63, v42.f64[0]);
      v59 = vmlaq_laneq_f64(v59, v63, v42, 1);
      v14 = *(float64x2_t *)v64;
      v15 = *((float64x2_t *)v64 + 1);
      result = v64 + 2;
      v48 = vmlaq_n_f64(v48, v67, v41.f64[0]);
      v52 = vmlaq_laneq_f64(v52, v67, v41, 1);
      v56 = vmlaq_n_f64(v56, v67, v42.f64[0]);
      v60 = vmlaq_laneq_f64(v60, v67, v42, 1);
      v49 = vmlaq_n_f64(v49, v68, v41.f64[0]);
      v53 = vmlaq_laneq_f64(v53, v68, v41, 1);
      v41 = v65;
      v57 = vmlaq_n_f64(v57, v68, v42.f64[0]);
      v61 = vmlaq_laneq_f64(v61, v68, v42, 1);
      v42 = v66;
      --v16;
    }
    while (v16);
    v69 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v46;
    v8[1] = v47;
    v8[2] = v48;
    v8[3] = v49;
    v8 += 4;
    *v69 = v50;
    v69[1] = v51;
    v69[2] = v52;
    v69[3] = v53;
    v70 = (float64x2_t *)((char *)v69 + v9);
    *v70 = v54;
    v70[1] = v55;
    v70[2] = v56;
    v70[3] = v57;
    v71 = (float64x2_t *)((char *)v70 + v9);
    *v71 = v58;
    v71[1] = v59;
    v71[2] = v60;
    v71[3] = v61;
    _X2 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

_OWORD *dgebpAlignedC_8M4N(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  float64x2_t *v58;

  v7 = _X2;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v22 = *_X2;
    v23 = _X2[1];
    v24 = _X2[2];
    v25 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    v30 = _X2[2];
    v31 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    v36 = _X2[2];
    v37 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v39 = *_X2;
    v40 = _X2[1];
    v41 = _X2[2];
    v42 = _X2[3];
    v44 = *a2;
    v45 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    do
    {
      v49 = v10;
      v50 = v11;
      v22 = vmlaq_n_f64(v22, v10, v44.f64[0]);
      v28 = vmlaq_laneq_f64(v28, v10, v44, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v34 = vmlaq_n_f64(v34, v49, v45.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v49, v45, 1);
      v52 = *_X6;
      v53 = _X6[1];
      _X6 += 2;
      v54 = v13;
      v23 = vmlaq_n_f64(v23, v50, v44.f64[0]);
      v29 = vmlaq_laneq_f64(v29, v50, v44, 1);
      v55 = v14;
      v35 = vmlaq_n_f64(v35, v50, v45.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v50, v45, 1);
      v13 = *(float64x2_t *)v51;
      v14 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v24 = vmlaq_n_f64(v24, v54, v44.f64[0]);
      v30 = vmlaq_laneq_f64(v30, v54, v44, 1);
      v36 = vmlaq_n_f64(v36, v54, v45.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v54, v45, 1);
      v25 = vmlaq_n_f64(v25, v55, v44.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v55, v44, 1);
      v44 = v52;
      v37 = vmlaq_n_f64(v37, v55, v45.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v55, v45, 1);
      v45 = v53;
      --v15;
    }
    while (v15);
    v56 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v22;
    v7[1] = v23;
    v7[2] = v24;
    v7[3] = v25;
    v7 += 4;
    *v56 = v28;
    v56[1] = v29;
    v56[2] = v30;
    v56[3] = v31;
    v57 = (float64x2_t *)((char *)v56 + v8);
    *v57 = v34;
    v57[1] = v35;
    v57[2] = v36;
    v57[3] = v37;
    v58 = (float64x2_t *)((char *)v57 + v8);
    *v58 = v39;
    v58[1] = v40;
    v58[2] = v41;
    v58[3] = v42;
    _X2 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t strmm_noPack_LUNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x2_t *v35;
  float32x4_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  BOOL v65;
  uint64_t v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  __int32 *v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  __int32 *v87;
  float32x2_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t *v103;
  float v104;
  float32x4_t *v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x2_t *v111;
  float32x4_t v112;
  float32x2_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  float32x2_t *v130;
  float32x2_t *v131;
  __int32 *v132;
  __int32 *v133;
  float32x2_t v134;
  __int32 *v135;
  float32x2_t *v136;
  float32x2_t v137;
  float32x2_t *v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  __int32 *v142;
  float32x2_t v143;
  float32_t v144;
  float32_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  float32x4_t *v149;
  float *v150;
  uint64_t v151;
  float32x2_t *v152;
  float v153;
  float32x4_t *v154;
  float32x2_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  uint64_t v171;
  float32x2_t *v172;
  __int32 *v173;
  __int32 *v174;
  float32x2_t v175;
  __int32 *v176;
  float32x2_t *v177;
  float32x2_t v178;
  float32x2_t v179;
  __int32 *v180;
  float32x2_t v181;

  v11 = 4 * a6;
  v12 = 4 * a4;
  v13 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v14 = a2 - 3;
  do
  {
    v15 = 0;
    v16 = __OFSUB__(result, 3);
    v17 = result - 3;
    if (result > 3)
    {
      do
      {
        v18 = (float32x4_t *)(a5 + v13 * v11 + 4 * v15);
        v19 = (float32x4_t *)((char *)v18 + v11);
        v20 = (float32x4_t *)((char *)v18 + 2 * v11);
        v21 = (float32x4_t *)((char *)v18 + 2 * v11 + v11);
        v22 = (float *)(a3 + v15 * v12 + 4 * v15);
        v23 = 4 * (result - v15);
        v24 = result - v15 - 4;
        v26 = *v22;
        v25 = (float32x2_t *)&v22[(unint64_t)v12 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v12);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v12);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v12);
        v34 = *v18;
        v33 = (float32x2_t *)&v18[1];
        v36 = *v19;
        v35 = (float32x2_t *)&v19[1];
        v38 = *v20;
        v37 = (float32x2_t *)&v20[1];
        v40 = *v21;
        v39 = (float32x2_t *)&v21[1];
        v30.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vmul_lane_f32(v28, *(float32x2_t *)v34.f32, 1);
        *(float32x2_t *)v8.f32 = vmul_lane_f32(v28, *(float32x2_t *)v36.f32, 1);
        *(float32x2_t *)v9.f32 = vmul_lane_f32(v28, *(float32x2_t *)v38.f32, 1);
        *(float32x2_t *)v10.f32 = vmul_lane_f32(v28, *(float32x2_t *)v40.f32, 1);
        v41 = vmulq_laneq_f32(v30, v34, 2);
        v42 = vmulq_laneq_f32(v30, v36, 2);
        v43 = vmulq_laneq_f32(v30, v38, 2);
        v44 = vmulq_laneq_f32(v30, v40, 2);
        v41.f32[0] = (float)(v26 * v34.f32[0]) + v41.f32[0];
        v42.f32[0] = (float)(v26 * v36.f32[0]) + v42.f32[0];
        v43.f32[0] = (float)(v26 * v38.f32[0]) + v43.f32[0];
        v44.f32[0] = (float)(v26 * v40.f32[0]) + v44.f32[0];
        v45 = vaddq_f32(vmlaq_laneq_f32(v7, v32, v34, 3), v41);
        v46 = vaddq_f32(vmlaq_laneq_f32(v8, v32, v36, 3), v42);
        v47 = vaddq_f32(vmlaq_laneq_f32(v9, v32, v38, 3), v43);
        v48 = vaddq_f32(vmlaq_laneq_f32(v10, v32, v40, 3), v44);
        if ((v24 & 1) != 0)
        {
          v49 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v12);
          v50 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v51 = v35->f32[0];
          v35 = (float32x2_t *)((char *)v35 + 4);
          v52 = v37->f32[0];
          v37 = (float32x2_t *)((char *)v37 + 4);
          v53 = v39->f32[0];
          v39 = (float32x2_t *)((char *)v39 + 4);
          v45 = vmlaq_n_f32(v45, v49, v50);
          v46 = vmlaq_n_f32(v46, v49, v51);
          v47 = vmlaq_n_f32(v47, v49, v52);
          v48 = vmlaq_n_f32(v48, v49, v53);
          v24 = result - v15 - 5;
        }
        if (v24)
        {
          v54 = 0uLL;
          v55 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          do
          {
            v59 = *v31;
            v58 = (float32x4_t *)((char *)v31 + v12);
            v60 = *v58;
            v31 = (float32x4_t *)((char *)v58 + v12);
            v61 = *v33++;
            v62 = *v35++;
            v63 = *v37++;
            v64 = *v39++;
            v45 = vmlaq_n_f32(v45, v59, v61.f32[0]);
            v46 = vmlaq_n_f32(v46, v59, v62.f32[0]);
            v47 = vmlaq_n_f32(v47, v59, v63.f32[0]);
            v48 = vmlaq_n_f32(v48, v59, v64.f32[0]);
            v54 = vmlaq_lane_f32(v54, v60, v61, 1);
            v55 = vmlaq_lane_f32(v55, v60, v62, 1);
            v56 = vmlaq_lane_f32(v56, v60, v63, 1);
            v57 = vmlaq_lane_f32(v57, v60, v64, 1);
            v65 = v24 <= 2;
            v24 -= 2;
          }
          while (!v65);
          v45 = vaddq_f32(v45, v54);
          v46 = vaddq_f32(v46, v55);
          v47 = vaddq_f32(v47, v56);
          v48 = vaddq_f32(v48, v57);
        }
        v7 = vmulq_n_f32(v45, a7);
        v8 = vmulq_n_f32(v46, a7);
        v9 = vmulq_n_f32(v47, a7);
        v10 = vmulq_n_f32(v48, a7);
        *(float32x4_t *)&v33->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v7;
        *(float32x4_t *)&v35->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v8;
        *(float32x4_t *)&v37->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v9;
        *(float32x4_t *)&v39->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v10;
        v15 += 4;
        v16 = __OFSUB__(v17, 4);
        v65 = v17 <= 4;
        v17 -= 4;
      }
      while (!v65);
    }
    v66 = result & 3;
    if (!v16 && v66 != 0)
    {
      v67 = (float32x2_t *)(a5 + v13 * v11 + 4 * v15);
      v68 = (float32x2_t *)((char *)v67 + v11);
      v69 = &v67[(unint64_t)v11 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v11 / 4] + v11);
      v71 = (__int32 *)(a3 + v15 * v12 + 4 * v15);
      if (v66 != 1)
      {
        if (v66 != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v12 / 4];
          v73.i32[1] = *v72;
          v74 = &v72[(unint64_t)v12 / 4];
          v76 = *v67;
          v75 = v67 + 1;
          v78 = *v68;
          v77 = v68 + 1;
          v80 = *v69;
          v79 = v69 + 1;
          v82 = *v70;
          v81 = v70 + 1;
          v83 = vmul_f32(v73, v76);
          v84 = vmul_f32(v73, v78);
          v85 = vmul_f32(v73, v80);
          v86 = vmul_f32(v73, v82);
          v73.i32[0] = *v74;
          v76.i32[0] = v75->i32[0];
          --v75;
          v78.i32[0] = v77->i32[0];
          --v77;
          v80.i32[0] = v79->i32[0];
          --v79;
          v82.i32[0] = v81->i32[0];
          --v81;
          v71 = &v74[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v75->f32[0] = (float)(vaddv_f32(v83) + (float)(v73.f32[0] * v76.f32[0])) * a7;
          v67 = (float32x2_t *)((char *)v75 + 4);
          v77->f32[0] = (float)(vaddv_f32(v84) + (float)(v73.f32[0] * v78.f32[0])) * a7;
          v68 = (float32x2_t *)((char *)v77 + 4);
          v79->f32[0] = (float)(vaddv_f32(v85) + (float)(v73.f32[0] * v80.f32[0])) * a7;
          v69 = (float32x2_t *)((char *)v79 + 4);
          v81->f32[0] = (float)(vaddv_f32(v86) + (float)(v73.f32[0] * v82.f32[0])) * a7;
          v70 = (float32x2_t *)((char *)v81 + 4);
        }
        v88.i32[0] = *v71;
        v87 = &v71[(unint64_t)v12 / 4];
        v88.i32[1] = *v87;
        v71 = v87 + 1;
        v89 = vaddv_f32(vmul_f32(v88, *v68)) * a7;
        v90 = vaddv_f32(vmul_f32(v88, *v69)) * a7;
        v91 = vaddv_f32(vmul_f32(v88, *v70)) * a7;
        v67->f32[0] = vaddv_f32(vmul_f32(v88, *v67)) * a7;
        v67 = (float32x2_t *)((char *)v67 + 4);
        v68->f32[0] = v89;
        v68 = (float32x2_t *)((char *)v68 + 4);
        v69->f32[0] = v90;
        v69 = (float32x2_t *)((char *)v69 + 4);
        v70->f32[0] = v91;
        v70 = (float32x2_t *)((char *)v70 + 4);
      }
      v92 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v93 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v94 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v92;
      v69->f32[0] = v93;
      v70->f32[0] = v94;
    }
    v13 += 4;
    v65 = v14 <= 4;
    v14 -= 4;
  }
  while (!v65);
  v65 = v14 <= -3;
  a2 = v14 + 3;
  if (!v65)
  {
LABEL_22:
    if (a2 > 1)
    {
      v95 = 0;
      v96 = __OFSUB__(result, 3);
      v97 = result - 3;
      if (result > 3)
      {
        do
        {
          v98 = (float32x4_t *)(a5 + v13 * v11 + 4 * v95);
          v99 = (float32x4_t *)((char *)v98 + v11);
          v100 = (float *)(a3 + v95 * v12 + 4 * v95);
          v101 = 4 * (result - v95);
          v102 = result - v95 - 4;
          v104 = *v100;
          v103 = (float32x2_t *)&v100[(unint64_t)v12 / 4];
          v106 = *v103;
          v105 = (float32x4_t *)((char *)v103 + v12);
          v108 = *v105;
          v107 = (float32x4_t *)((char *)v105 + v12);
          v110 = *v107;
          v109 = (float32x4_t *)((char *)v107 + v12);
          v112 = *v98;
          v111 = (float32x2_t *)&v98[1];
          v114 = *v99;
          v113 = (float32x2_t *)&v99[1];
          v108.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v106, *(float32x2_t *)v112.f32, 1);
          *(float32x2_t *)v8.f32 = vmul_lane_f32(v106, *(float32x2_t *)v114.f32, 1);
          v115 = vmulq_laneq_f32(v108, v112, 2);
          v116 = vmulq_laneq_f32(v108, v114, 2);
          v115.f32[0] = (float)(v104 * v112.f32[0]) + v115.f32[0];
          v116.f32[0] = (float)(v104 * v114.f32[0]) + v116.f32[0];
          v117 = vaddq_f32(vmlaq_laneq_f32(v7, v110, v112, 3), v115);
          v118 = vaddq_f32(vmlaq_laneq_f32(v8, v110, v114, 3), v116);
          if ((v102 & 1) != 0)
          {
            v119 = *v109;
            v109 = (float32x4_t *)((char *)v109 + v12);
            v120 = v111->f32[0];
            v111 = (float32x2_t *)((char *)v111 + 4);
            v121 = v113->f32[0];
            v113 = (float32x2_t *)((char *)v113 + 4);
            v117 = vmlaq_n_f32(v117, v119, v120);
            v118 = vmlaq_n_f32(v118, v119, v121);
            v102 = result - v95 - 5;
          }
          if (v102)
          {
            v122 = 0uLL;
            v123 = 0uLL;
            do
            {
              v125 = *v109;
              v124 = (float32x4_t *)((char *)v109 + v12);
              v126 = *v124;
              v109 = (float32x4_t *)((char *)v124 + v12);
              v127 = *v111++;
              v128 = *v113++;
              v117 = vmlaq_n_f32(v117, v125, v127.f32[0]);
              v118 = vmlaq_n_f32(v118, v125, v128.f32[0]);
              v122 = vmlaq_lane_f32(v122, v126, v127, 1);
              v123 = vmlaq_lane_f32(v123, v126, v128, 1);
              v65 = v102 <= 2;
              v102 -= 2;
            }
            while (!v65);
            v117 = vaddq_f32(v117, v122);
            v118 = vaddq_f32(v118, v123);
          }
          v7 = vmulq_n_f32(v117, a7);
          v8 = vmulq_n_f32(v118, a7);
          *(float32x4_t *)&v111->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v7;
          *(float32x4_t *)&v113->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v8;
          v95 += 4;
          v96 = __OFSUB__(v97, 4);
          v65 = v97 <= 4;
          v97 -= 4;
        }
        while (!v65);
      }
      v129 = result & 3;
      if (!v96 && v129 != 0)
      {
        v130 = (float32x2_t *)(a5 + v13 * v11 + 4 * v95);
        v131 = (float32x2_t *)((char *)v130 + v11);
        v132 = (__int32 *)(a3 + v95 * v12 + 4 * v95);
        if (v129 != 1)
        {
          if (v129 != 2)
          {
            v134.i32[0] = *v132;
            v133 = &v132[(unint64_t)v12 / 4];
            v134.i32[1] = *v133;
            v135 = &v133[(unint64_t)v12 / 4];
            v137 = *v130;
            v136 = v130 + 1;
            v139 = *v131;
            v138 = v131 + 1;
            v140 = vmul_f32(v134, v137);
            v141 = vmul_f32(v134, v139);
            v134.i32[0] = *v135;
            v137.i32[0] = v136->i32[0];
            --v136;
            v139.i32[0] = v138->i32[0];
            --v138;
            v132 = &v135[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v136->f32[0] = (float)(vaddv_f32(v140) + (float)(v134.f32[0] * v137.f32[0])) * a7;
            v130 = (float32x2_t *)((char *)v136 + 4);
            v138->f32[0] = (float)(vaddv_f32(v141) + (float)(v134.f32[0] * v139.f32[0])) * a7;
            v131 = (float32x2_t *)((char *)v138 + 4);
          }
          v143.i32[0] = *v132;
          v142 = &v132[(unint64_t)v12 / 4];
          v143.i32[1] = *v142;
          v132 = v142 + 1;
          v144 = vaddv_f32(vmul_f32(v143, *v131)) * a7;
          v130->f32[0] = vaddv_f32(vmul_f32(v143, *v130)) * a7;
          v130 = (float32x2_t *)((char *)v130 + 4);
          v131->f32[0] = v144;
          v131 = (float32x2_t *)((char *)v131 + 4);
        }
        v145 = (float)(*(float *)v132 * v131->f32[0]) * a7;
        v130->f32[0] = (float)(*(float *)v132 * v130->f32[0]) * a7;
        v131->f32[0] = v145;
      }
      a2 -= 2;
      v13 += 2;
    }
    if (a2)
    {
      v146 = 0;
      v147 = __OFSUB__(result, 3);
      v148 = result - 3;
      if (result > 3)
      {
        do
        {
          v149 = (float32x4_t *)(a5 + v13 * v11 + 4 * v146);
          v150 = (float *)(a3 + v146 * v12 + 4 * v146);
          v151 = result - v146 - 4;
          v153 = *v150;
          v152 = (float32x2_t *)&v150[(unint64_t)v12 / 4];
          v155 = *v152;
          v154 = (float32x4_t *)((char *)v152 + v12);
          v157 = *v154;
          v156 = (float32x4_t *)((char *)v154 + v12);
          v159 = *v156;
          v158 = (float32x4_t *)((char *)v156 + v12);
          v161 = *v149;
          v160 = (float32x2_t *)&v149[1];
          v157.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v155, *(float32x2_t *)v161.f32, 1);
          v162 = vmulq_laneq_f32(v157, v161, 2);
          v162.f32[0] = (float)(v153 * v161.f32[0]) + v162.f32[0];
          v163 = vaddq_f32(vmlaq_laneq_f32(v7, v159, v161, 3), v162);
          if ((v151 & 1) != 0)
          {
            v164 = *v158;
            v158 = (float32x4_t *)((char *)v158 + v12);
            v165 = v160->f32[0];
            v160 = (float32x2_t *)((char *)v160 + 4);
            v163 = vmlaq_n_f32(v163, v164, v165);
            v151 = result - v146 - 5;
          }
          if (v151)
          {
            v166 = 0uLL;
            do
            {
              v168 = *v158;
              v167 = (float32x4_t *)((char *)v158 + v12);
              v169 = *v167;
              v158 = (float32x4_t *)((char *)v167 + v12);
              v170 = *v160++;
              v163 = vmlaq_n_f32(v163, v168, v170.f32[0]);
              v166 = vmlaq_lane_f32(v166, v169, v170, 1);
              v65 = v151 <= 2;
              v151 -= 2;
            }
            while (!v65);
            v163 = vaddq_f32(v163, v166);
          }
          v7 = vmulq_n_f32(v163, a7);
          *(float32x4_t *)&v160->f32[-(result - v146)] = v7;
          v146 += 4;
          v147 = __OFSUB__(v148, 4);
          v65 = v148 <= 4;
          v148 -= 4;
        }
        while (!v65);
      }
      v171 = result & 3;
      if (!v147 && v171 != 0)
      {
        v172 = (float32x2_t *)(a5 + v13 * v11 + 4 * v146);
        v173 = (__int32 *)(a3 + v146 * v12 + 4 * v146);
        if (v171 != 1)
        {
          if (v171 != 2)
          {
            v175.i32[0] = *v173;
            v174 = &v173[(unint64_t)v12 / 4];
            v175.i32[1] = *v174;
            v176 = &v174[(unint64_t)v12 / 4];
            v178 = *v172;
            v177 = v172 + 1;
            v179 = vmul_f32(v175, v178);
            v175.i32[0] = *v176;
            v178.i32[0] = v177->i32[0];
            --v177;
            v173 = &v176[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v177->f32[0] = (float)(vaddv_f32(v179) + (float)(v175.f32[0] * v178.f32[0])) * a7;
            v172 = (float32x2_t *)((char *)v177 + 4);
          }
          v181.i32[0] = *v173;
          v180 = &v173[(unint64_t)v12 / 4];
          v181.i32[1] = *v180;
          v173 = v180 + 1;
          v172->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v181, *v172), a7));
          v172 = (float32x2_t *)((char *)v172 + 4);
        }
        v172->f32[0] = (float)(*(float *)v173 * v172->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LUNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  float32x2_t *v21;
  unsigned int v22;
  float32x4_t *v23;
  float32x2_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x2_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  BOOL v55;
  uint64_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  float *v61;
  __int32 *v62;
  float32x2_t v63;
  float32x2_t *v64;
  float v65;
  float32x2_t *v66;
  float v67;
  float32x2_t *v68;
  float v69;
  float32x2_t *v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  float32x2_t *v89;
  unsigned int v90;
  float32x4_t *v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x2_t *v95;
  float32x4_t v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  int32x2_t *v112;
  int32x2_t *v113;
  float *v114;
  __int32 *v115;
  float32x2_t v116;
  float32x2_t *v117;
  float v118;
  float32x2_t *v119;
  float v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  float32x4_t *v128;
  uint64_t v129;
  unsigned int *v130;
  float32x2_t *v131;
  unsigned int v132;
  float32x4_t *v133;
  float32x2_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x2_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  uint64_t v147;
  _QWORD *v148;
  __int32 *v149;
  __int32 *v150;
  float32x2_t v151;
  float32x2_t *v152;
  float v153;
  float32x2_t v154;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (float32x4_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (float32x4_t *)((char *)v14 + v7);
        v16 = (float32x4_t *)((char *)v14 + 2 * v7);
        v17 = (float32x4_t *)((char *)v14 + 2 * v7 + v7);
        v18 = 4 * (result - v11);
        v19 = result - v11 - 4;
        v20 = (unsigned int *)(a3 + v11 * v8 + 4 * v11 + v8);
        v22 = *v20;
        v21 = (float32x2_t *)&v20[(unint64_t)v8 / 4];
        v24 = *v21;
        v23 = (float32x4_t *)((char *)v21 + v8);
        v26 = *v23;
        v25 = (float32x4_t *)((char *)v23 + v8);
        v28 = *v14;
        v27 = (float32x2_t *)&v14[1];
        v30 = *v15;
        v29 = (float32x2_t *)&v15[1];
        v32 = *v16;
        v31 = (float32x2_t *)&v16[1];
        v34 = *v17;
        v33 = (float32x2_t *)&v17[1];
        v26.i32[3] = 0;
        v35 = vmlaq_laneq_f32(v28, v26, v28, 3);
        v36 = vmlaq_laneq_f32(v30, v26, v30, 3);
        v37 = vmlaq_laneq_f32(v32, v26, v32, 3);
        v38 = vmlaq_laneq_f32(v34, v26, v34, 3);
        *(float32x2_t *)v35.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v28, 2), (float32x2_t)v22, *(float32x2_t *)v28.f32, 1), *(float32x2_t *)v35.f32);
        *(float32x2_t *)v36.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v30, 2), (float32x2_t)v22, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v36.f32);
        *(float32x2_t *)v37.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v32, 2), (float32x2_t)v22, *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v37.f32);
        *(float32x2_t *)v38.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v34, 2), (float32x2_t)v22, *(float32x2_t *)v34.f32, 1), *(float32x2_t *)v38.f32);
        if ((v19 & 1) != 0)
        {
          v39 = *v25;
          v25 = (float32x4_t *)((char *)v25 + v8);
          v40 = v27->f32[0];
          v27 = (float32x2_t *)((char *)v27 + 4);
          v41 = v29->f32[0];
          v29 = (float32x2_t *)((char *)v29 + 4);
          v42 = v31->f32[0];
          v31 = (float32x2_t *)((char *)v31 + 4);
          v43 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v35 = vmlaq_n_f32(v35, v39, v40);
          v36 = vmlaq_n_f32(v36, v39, v41);
          v37 = vmlaq_n_f32(v37, v39, v42);
          v38 = vmlaq_n_f32(v38, v39, v43);
          v19 = result - v11 - 5;
        }
        if (v19)
        {
          v44 = 0uLL;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          do
          {
            v49 = *v25;
            v48 = (float32x4_t *)((char *)v25 + v8);
            v50 = *v48;
            v25 = (float32x4_t *)((char *)v48 + v8);
            v51 = *v27++;
            v52 = *v29++;
            v53 = *v31++;
            v54 = *v33++;
            v35 = vmlaq_n_f32(v35, v49, v51.f32[0]);
            v36 = vmlaq_n_f32(v36, v49, v52.f32[0]);
            v37 = vmlaq_n_f32(v37, v49, v53.f32[0]);
            v38 = vmlaq_n_f32(v38, v49, v54.f32[0]);
            v44 = vmlaq_lane_f32(v44, v50, v51, 1);
            v45 = vmlaq_lane_f32(v45, v50, v52, 1);
            v46 = vmlaq_lane_f32(v46, v50, v53, 1);
            v47 = vmlaq_lane_f32(v47, v50, v54, 1);
            v55 = v19 <= 2;
            v19 -= 2;
          }
          while (!v55);
          v35 = vaddq_f32(v35, v44);
          v36 = vaddq_f32(v36, v45);
          v37 = vaddq_f32(v37, v46);
          v38 = vaddq_f32(v38, v47);
        }
        *(float32x4_t *)&v27->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v35, a7);
        *(float32x4_t *)&v29->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v36, a7);
        *(float32x4_t *)&v31->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v37, a7);
        *(float32x4_t *)&v33->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v38, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v55 = v13 <= 4;
        v13 -= 4;
      }
      while (!v55);
    }
    v56 = result & 3;
    if (!v12 && v56 != 0)
    {
      v57 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v58 = (int32x2_t *)((char *)v57 + v7);
      v59 = &v57[(unint64_t)v7 / 4];
      v60 = (int32x2_t *)((char *)&v57[(unint64_t)v7 / 4] + v7);
      v61 = (float *)(a3 + v11 * v8 + 4 * v11 + v8);
      if (v56 != 1)
      {
        if (v56 != 2)
        {
          v63.f32[0] = *v61;
          v62 = (__int32 *)&v61[(unint64_t)v8 / 4];
          v63.i32[1] = *v62;
          v65 = *(float *)v57->i32;
          v64 = (float32x2_t *)((char *)v57 + 4);
          v67 = *(float *)v58->i32;
          v66 = (float32x2_t *)((char *)v58 + 4);
          v69 = *(float *)v59->i32;
          v68 = (float32x2_t *)((char *)v59 + 4);
          v71 = *(float *)v60->i32;
          v70 = (float32x2_t *)((char *)v60 + 4);
          v72 = vmul_f32(v63, *v64);
          v73 = vmul_f32(v63, *v66);
          v74 = vmul_f32(v63, *v68);
          v75 = vmul_f32(v63, *v70);
          v64 = (float32x2_t *)((char *)v64 - 4);
          v66 = (float32x2_t *)((char *)v66 - 4);
          v68 = (float32x2_t *)((char *)v68 - 4);
          v70 = (float32x2_t *)((char *)v70 - 4);
          v61 = (float *)(v62 + 1);
          v64->f32[0] = (float)(vaddv_f32(v72) + v65) * a7;
          v57 = (int32x2_t *)((char *)v64 + 4);
          v66->f32[0] = (float)(vaddv_f32(v73) + v67) * a7;
          v58 = (int32x2_t *)((char *)v66 + 4);
          v68->f32[0] = (float)(vaddv_f32(v74) + v69) * a7;
          v59 = (int32x2_t *)((char *)v68 + 4);
          v70->f32[0] = (float)(vaddv_f32(v75) + v71) * a7;
          v60 = (int32x2_t *)((char *)v70 + 4);
        }
        v76 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v57, *v58), vmul_n_f32((float32x2_t)vtrn2_s32(*v57, *v58), *v61)), a7);
        v77 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v59, *v60), vmul_n_f32((float32x2_t)vtrn2_s32(*v59, *v60), *v61)), a7);
        v57->i32[0] = v76.i32[0];
        v57 = (int32x2_t *)((char *)v57 + 4);
        v58->i32[0] = v76.i32[1];
        v58 = (int32x2_t *)((char *)v58 + 4);
        v59->i32[0] = v77.i32[0];
        v59 = (int32x2_t *)((char *)v59 + 4);
        v60->i32[0] = v77.i32[1];
        v60 = (int32x2_t *)((char *)v60 + 4);
      }
      v78 = *(float *)v58->i32 * a7;
      v79 = *(float *)v59->i32 * a7;
      v80 = *(float *)v60->i32 * a7;
      *(float *)v57->i32 = *(float *)v57->i32 * a7;
      *(float *)v58->i32 = v78;
      *(float *)v59->i32 = v79;
      *(float *)v60->i32 = v80;
    }
    v9 += 4;
    v55 = v10 <= 4;
    v10 -= 4;
  }
  while (!v55);
  v55 = v10 <= -3;
  a2 = v10 + 3;
  if (!v55)
  {
LABEL_22:
    if (a2 > 1)
    {
      v81 = 0;
      v82 = __OFSUB__(result, 3);
      v83 = result - 3;
      if (result > 3)
      {
        do
        {
          v84 = (float32x4_t *)(a5 + v9 * v7 + 4 * v81);
          v85 = (float32x4_t *)((char *)v84 + v7);
          v86 = 4 * (result - v81);
          v87 = result - v81 - 4;
          v88 = (unsigned int *)(a3 + v81 * v8 + 4 * v81 + v8);
          v90 = *v88;
          v89 = (float32x2_t *)&v88[(unint64_t)v8 / 4];
          v92 = *v89;
          v91 = (float32x4_t *)((char *)v89 + v8);
          v94 = *v91;
          v93 = (float32x4_t *)((char *)v91 + v8);
          v96 = *v84;
          v95 = (float32x2_t *)&v84[1];
          v98 = *v85;
          v97 = (float32x2_t *)&v85[1];
          v94.i32[3] = 0;
          v99 = vmlaq_laneq_f32(v96, v94, v96, 3);
          v100 = vmlaq_laneq_f32(v98, v94, v98, 3);
          *(float32x2_t *)v99.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v96, 2), (float32x2_t)v90, *(float32x2_t *)v96.f32, 1), *(float32x2_t *)v99.f32);
          *(float32x2_t *)v100.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v98, 2), (float32x2_t)v90, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v100.f32);
          if ((v87 & 1) != 0)
          {
            v101 = *v93;
            v93 = (float32x4_t *)((char *)v93 + v8);
            v102 = v95->f32[0];
            v95 = (float32x2_t *)((char *)v95 + 4);
            v103 = v97->f32[0];
            v97 = (float32x2_t *)((char *)v97 + 4);
            v99 = vmlaq_n_f32(v99, v101, v102);
            v100 = vmlaq_n_f32(v100, v101, v103);
            v87 = result - v81 - 5;
          }
          if (v87)
          {
            v104 = 0uLL;
            v105 = 0uLL;
            do
            {
              v107 = *v93;
              v106 = (float32x4_t *)((char *)v93 + v8);
              v108 = *v106;
              v93 = (float32x4_t *)((char *)v106 + v8);
              v109 = *v95++;
              v110 = *v97++;
              v99 = vmlaq_n_f32(v99, v107, v109.f32[0]);
              v100 = vmlaq_n_f32(v100, v107, v110.f32[0]);
              v104 = vmlaq_lane_f32(v104, v108, v109, 1);
              v105 = vmlaq_lane_f32(v105, v108, v110, 1);
              v55 = v87 <= 2;
              v87 -= 2;
            }
            while (!v55);
            v99 = vaddq_f32(v99, v104);
            v100 = vaddq_f32(v100, v105);
          }
          *(float32x4_t *)&v95->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v99, a7);
          *(float32x4_t *)&v97->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v100, a7);
          v81 += 4;
          v82 = __OFSUB__(v83, 4);
          v55 = v83 <= 4;
          v83 -= 4;
        }
        while (!v55);
      }
      v111 = result & 3;
      if (!v82 && v111 != 0)
      {
        v112 = (int32x2_t *)(a5 + v9 * v7 + 4 * v81);
        v113 = (int32x2_t *)((char *)v112 + v7);
        v114 = (float *)(a3 + v81 * v8 + 4 * v81 + v8);
        if (v111 != 1)
        {
          if (v111 != 2)
          {
            v116.f32[0] = *v114;
            v115 = (__int32 *)&v114[(unint64_t)v8 / 4];
            v116.i32[1] = *v115;
            v118 = *(float *)v112->i32;
            v117 = (float32x2_t *)((char *)v112 + 4);
            v120 = *(float *)v113->i32;
            v119 = (float32x2_t *)((char *)v113 + 4);
            v121 = vmul_f32(v116, *v117);
            v122 = vmul_f32(v116, *v119);
            v117 = (float32x2_t *)((char *)v117 - 4);
            v119 = (float32x2_t *)((char *)v119 - 4);
            v114 = (float *)(v115 + 1);
            v117->f32[0] = (float)(vaddv_f32(v121) + v118) * a7;
            v112 = (int32x2_t *)((char *)v117 + 4);
            v119->f32[0] = (float)(vaddv_f32(v122) + v120) * a7;
            v113 = (int32x2_t *)((char *)v119 + 4);
          }
          v123 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v112, *v113), vmul_n_f32((float32x2_t)vtrn2_s32(*v112, *v113), *v114)), a7);
          v112->i32[0] = v123.i32[0];
          v112 = (int32x2_t *)((char *)v112 + 4);
          v113->i32[0] = v123.i32[1];
          v113 = (int32x2_t *)((char *)v113 + 4);
        }
        v124 = *(float *)v113->i32 * a7;
        *(float *)v112->i32 = *(float *)v112->i32 * a7;
        *(float *)v113->i32 = v124;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v125 = 0;
      v126 = __OFSUB__(result, 3);
      v127 = result - 3;
      if (result > 3)
      {
        do
        {
          v128 = (float32x4_t *)(a5 + v9 * v7 + 4 * v125);
          v129 = result - v125 - 4;
          v130 = (unsigned int *)(a3 + v125 * v8 + 4 * v125 + v8);
          v132 = *v130;
          v131 = (float32x2_t *)&v130[(unint64_t)v8 / 4];
          v134 = *v131;
          v133 = (float32x4_t *)((char *)v131 + v8);
          v136 = *v133;
          v135 = (float32x4_t *)((char *)v133 + v8);
          v138 = *v128;
          v137 = (float32x2_t *)&v128[1];
          v136.i32[3] = 0;
          v139 = vmlaq_laneq_f32(v138, v136, v138, 3);
          *(float32x2_t *)v139.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v134, v138, 2), (float32x2_t)v132, *(float32x2_t *)v138.f32, 1), *(float32x2_t *)v139.f32);
          if ((v129 & 1) != 0)
          {
            v140 = *v135;
            v135 = (float32x4_t *)((char *)v135 + v8);
            v141 = v137->f32[0];
            v137 = (float32x2_t *)((char *)v137 + 4);
            v139 = vmlaq_n_f32(v139, v140, v141);
            v129 = result - v125 - 5;
          }
          if (v129)
          {
            v142 = 0uLL;
            do
            {
              v144 = *v135;
              v143 = (float32x4_t *)((char *)v135 + v8);
              v145 = *v143;
              v135 = (float32x4_t *)((char *)v143 + v8);
              v146 = *v137++;
              v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
              v142 = vmlaq_lane_f32(v142, v145, v146, 1);
              v55 = v129 <= 2;
              v129 -= 2;
            }
            while (!v55);
            v139 = vaddq_f32(v139, v142);
          }
          *(float32x4_t *)&v137->f32[-(result - v125)] = vmulq_n_f32(v139, a7);
          v125 += 4;
          v126 = __OFSUB__(v127, 4);
          v55 = v127 <= 4;
          v127 -= 4;
        }
        while (!v55);
      }
      v147 = result & 3;
      if (!v126 && v147 != 0)
      {
        v148 = (_QWORD *)(a5 + v9 * v7 + 4 * v125);
        v149 = (__int32 *)(a3 + v125 * v8 + 4 * v125 + v8);
        if (v147 != 1)
        {
          if (v147 != 2)
          {
            v151.i32[0] = *v149;
            v150 = &v149[(unint64_t)v8 / 4];
            v151.i32[1] = *v150;
            v149 = v150 + 1;
            v153 = *(float *)v148;
            v152 = (float32x2_t *)((char *)v148 + 4);
            v154 = vmul_f32(v151, *v152);
            v152 = (float32x2_t *)((char *)v152 - 4);
            v152->f32[0] = (float)(vaddv_f32(v154) + v153) * a7;
            v148 = (_QWORD *)((char *)v152 + 4);
          }
          *(float *)v148 = (float)((float)(COERCE_FLOAT(HIDWORD(*v148)) * *(float *)v149) + COERCE_FLOAT(*v148)) * a7;
          v148 = (_QWORD *)((char *)v148 + 4);
        }
        *(float *)v148 = *(float *)v148 * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LUTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  float *v17;
  float32x2_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  float v22;
  __int32 *v23;
  float32x2_t v24;
  __int32 *v25;
  float32x4_t v26;
  __int32 *v27;
  float32x4_t v28;
  __int32 *v29;
  int64x2_t v30;
  float32x2_t *v31;
  int64x2_t v32;
  float32x2_t *v33;
  int64x2_t v34;
  float32x2_t *v35;
  int64x2_t v36;
  float32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  BOOL v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32x2_t v87;
  float32_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  uint64_t j;
  int32x4_t *v95;
  int32x4_t *v96;
  float *v97;
  float32x2_t *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  uint64_t v101;
  float v102;
  __int32 *v103;
  float32x2_t v104;
  __int32 *v105;
  float32x4_t v106;
  __int32 *v107;
  float32x4_t v108;
  __int32 *v109;
  int32x4_t v110;
  float32x2_t *v111;
  int32x4_t v112;
  float32x4_t *v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t *v133;
  float32x2_t *v134;
  float32x2_t *v135;
  float32x2_t v136;
  float v137;
  float32_t v138;
  float32x2_t v139;
  float32_t v140;
  float32_t v141;
  uint64_t k;
  float *v143;
  float32x2_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  uint64_t v147;
  float v148;
  __int32 *v149;
  float32x2_t v150;
  __int32 *v151;
  float32x4_t v152;
  __int32 *v153;
  float32x4_t v154;
  __int32 *v155;
  float32x4_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  float32x2_t v169;
  float32x2_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v37 = vmulq_n_f32(v56, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = (float *)(a3 + i * v9 + 4 * i);
      v18 = (float32x2_t *)&v17[(unint64_t)v9 / 4];
      v19 = (float32x4_t *)&v17[(unint64_t)v9 / 2];
      v20 = (float32x4_t *)&v17[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
      v21 = i;
      v22 = *v17;
      v23 = (__int32 *)(a3 + i * v9);
      v24 = *v18;
      v25 = (__int32 *)v18 - i;
      v26 = *v19;
      v27 = (__int32 *)v19 - i;
      v28 = *v20;
      v29 = (__int32 *)v20 - i;
      v30 = *v13;
      v31 = (float32x2_t *)(a5 + v10 * v8);
      v32 = *v14;
      v33 = (float32x2_t *)((char *)v14 - 4 * i);
      v34 = *v15;
      v35 = (float32x2_t *)((char *)v15 - 4 * i);
      v36 = *v16;
      v37 = (float32x4_t *)((char *)v16 - 4 * i);
      v38 = (int32x4_t)vtrn1q_s64(v30, v34);
      v39 = (int32x4_t)vtrn1q_s64(v32, v36);
      v40 = (int32x4_t)vtrn2q_s64(v30, v34);
      v41 = (int32x4_t)vtrn2q_s64(v32, v36);
      v42 = (float32x4_t)vtrn1q_s32(v38, v39);
      v43 = (float32x4_t)vtrn2q_s32(v38, v39);
      v44 = (float32x4_t)vtrn1q_s32(v40, v41);
      v45 = (int64x2_t)vmulq_n_f32(v42, v22);
      v46 = (int64x2_t)vaddq_f32(vmulq_n_f32(v42, v24.f32[0]), vmulq_lane_f32(v43, v24, 1));
      v47 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v26.f32[0]), v44, v26, 2), vmulq_lane_f32(v43, *(float32x2_t *)v26.f32, 1));
      v48 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v28.f32[0]), v44, v28, 2), vmulq_lane_f32(v43, *(float32x2_t *)v28.f32, 1)), vmulq_laneq_f32((float32x4_t)vtrn2q_s32(v40, v41), v28, 3));
      v49 = (int32x4_t)vtrn1q_s64(v45, v47);
      v50 = (int32x4_t)vtrn1q_s64(v46, v48);
      v51 = (int32x4_t)vtrn2q_s64(v45, v47);
      v52 = (int32x4_t)vtrn2q_s64(v46, v48);
      v53 = (float32x4_t)vtrn1q_s32(v49, v50);
      v54 = (float32x4_t)vtrn2q_s32(v49, v50);
      v55 = (float32x4_t)vtrn1q_s32(v51, v52);
      v56 = (float32x4_t)vtrn2q_s32(v51, v52);
      if ((i & 1) != 0)
      {
        v57.i32[0] = *v23++;
        v57.i32[1] = *v25++;
        v57.i32[2] = *v27++;
        v57.i32[3] = *v29++;
        v58 = v31->f32[0];
        v31 = (float32x2_t *)((char *)v31 + 4);
        v59 = v33->f32[0];
        v33 = (float32x2_t *)((char *)v33 + 4);
        v60 = v35->f32[0];
        v35 = (float32x2_t *)((char *)v35 + 4);
        v61 = v37->f32[0];
        v37 = (float32x4_t *)((char *)v37 + 4);
        v53 = vmlaq_n_f32(v53, v57, v58);
        v54 = vmlaq_n_f32(v54, v57, v59);
        v55 = vmlaq_n_f32(v55, v57, v60);
        v56 = vmlaq_n_f32(v56, v57, v61);
        v21 = i - 1;
      }
      if (v21)
      {
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        v65 = 0uLL;
        do
        {
          v66.i64[0] = *(_QWORD *)v23;
          v23 += 2;
          v67.i64[0] = *(_QWORD *)v25;
          v25 += 2;
          v68 = *(_QWORD *)v27;
          v27 += 2;
          v69 = *(_QWORD *)v29;
          v29 += 2;
          v70 = *v31++;
          v71 = *v33++;
          v72 = *v35++;
          v73 = *(float32x2_t *)v37->f32;
          v37 = (float32x4_t *)((char *)v37 + 8);
          v66.i64[1] = v68;
          v67.i64[1] = v69;
          v74 = (float32x4_t)vtrn1q_s32(v66, v67);
          v75 = (float32x4_t)vtrn2q_s32(v66, v67);
          v53 = vmlaq_n_f32(v53, v74, v70.f32[0]);
          v54 = vmlaq_n_f32(v54, v74, v71.f32[0]);
          v55 = vmlaq_n_f32(v55, v74, v72.f32[0]);
          v56 = vmlaq_n_f32(v56, v74, v73.f32[0]);
          v62 = vmlaq_lane_f32(v62, v75, v70, 1);
          v63 = vmlaq_lane_f32(v63, v75, v71, 1);
          v64 = vmlaq_lane_f32(v64, v75, v72, 1);
          v65 = vmlaq_lane_f32(v65, v75, v73, 1);
          v76 = v21 <= 2;
          v21 -= 2;
        }
        while (!v76);
        v53 = vaddq_f32(v53, v62);
        v54 = vaddq_f32(v54, v63);
        v55 = vaddq_f32(v55, v64);
        v56 = vaddq_f32(v56, v65);
      }
      *(float32x4_t *)v31->f32 = vmulq_n_f32(v53, a7);
      *(float32x4_t *)v33->f32 = vmulq_n_f32(v54, a7);
      *(float32x4_t *)v35->f32 = vmulq_n_f32(v55, a7);
    }
    if (i)
    {
      v77 = (float32x2_t *)(a5 + v10 * v8);
      v78 = (float32x2_t *)((char *)v77 + v8);
      v79 = &v77[(unint64_t)v8 / 4];
      v80 = (float32x2_t *)((char *)&v77[(unint64_t)v8 / 4] + v8);
      v81 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v82 = *v81;
          v83 = v81[1].f32[0];
          v81 = (float32x2_t *)((char *)v81 - v9);
          v84 = (float)(vaddv_f32(vmul_f32(v82, *v78)) + (float)(v78[1].f32[0] * v83)) * a7;
          v85 = (float)(vaddv_f32(vmul_f32(v82, *v79)) + (float)(v79[1].f32[0] * v83)) * a7;
          v86 = (float)(vaddv_f32(vmul_f32(v82, *v80)) + (float)(v80[1].f32[0] * v83)) * a7;
          v77[1].f32[0] = (float)(vaddv_f32(vmul_f32(v82, *v77)) + (float)(v77[1].f32[0] * v83)) * a7;
          v78[1].f32[0] = v84;
          v79[1].f32[0] = v85;
          v80[1].f32[0] = v86;
        }
        v87 = *v81;
        v81 = (float32x2_t *)((char *)v81 - v9);
        v88 = vaddv_f32(vmul_f32(v87, *v78)) * a7;
        v89 = vaddv_f32(vmul_f32(v87, *v79)) * a7;
        v90 = vaddv_f32(vmul_f32(v87, *v80)) * a7;
        v77->f32[1] = vaddv_f32(vmul_f32(v87, *v77)) * a7;
        v78->f32[1] = v88;
        v79->f32[1] = v89;
        v80->f32[1] = v90;
      }
      v91 = (float)(v81->f32[0] * v78->f32[0]) * a7;
      v92 = (float)(v81->f32[0] * v79->f32[0]) * a7;
      v93 = (float)(v81->f32[0] * v80->f32[0]) * a7;
      v77->f32[0] = (float)(v81->f32[0] * v77->f32[0]) * a7;
      v78->f32[0] = v91;
      v79->f32[0] = v92;
      v80->f32[0] = v93;
    }
    v10 += 4;
    v76 = v11 <= 4;
    v11 -= 4;
  }
  while (!v76);
  v76 = v11 <= -3;
  a2 = v11 + 3;
  if (!v76)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v113 = vmulq_n_f32(v119, a7))
      {
        j -= 4;
        v95 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v96 = (int32x4_t *)((char *)v95 + v8);
        v97 = (float *)(a3 + j * v9 + 4 * j);
        v98 = (float32x2_t *)&v97[(unint64_t)v9 / 4];
        v99 = (float32x4_t *)&v97[(unint64_t)v9 / 2];
        v100 = (float32x4_t *)&v97[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v101 = j;
        v102 = *v97;
        v103 = (__int32 *)(a3 + j * v9);
        v104 = *v98;
        v105 = (__int32 *)v98 - j;
        v106 = *v99;
        v107 = (__int32 *)v99 - j;
        v108 = *v100;
        v109 = (__int32 *)v100 - j;
        v110 = *v95;
        v111 = (float32x2_t *)(a5 + v10 * v8);
        v112 = *v96;
        v113 = (float32x4_t *)((char *)v96 - 4 * j);
        v114 = vtrn1q_s32(v110, v112);
        v115 = vtrn2q_s32(v110, v112);
        *(float32x2_t *)v116.i8 = vmul_n_f32(*(float32x2_t *)v114.i8, v102);
        *(float32x2_t *)v117.i8 = vadd_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v104.f32[0]), vmul_lane_f32(*(float32x2_t *)v115.i8, v104, 1));
        v116.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v106.f32[0]), (float32x2_t)v114.u64[1], v106, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v106.f32, 1));
        v117.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v108.f32[0]), (float32x2_t)v114.u64[1], v108, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v108.f32, 1)), vmul_laneq_f32((float32x2_t)v115.u64[1], v108, 3));
        v118 = (float32x4_t)vtrn1q_s32(v116, v117);
        v119 = (float32x4_t)vtrn2q_s32(v116, v117);
        if ((j & 1) != 0)
        {
          v120.i32[0] = *v103++;
          v120.i32[1] = *v105++;
          v120.i32[2] = *v107++;
          v120.i32[3] = *v109++;
          v121 = v111->f32[0];
          v111 = (float32x2_t *)((char *)v111 + 4);
          v122 = v113->f32[0];
          v113 = (float32x4_t *)((char *)v113 + 4);
          v118 = vmlaq_n_f32(v118, v120, v121);
          v119 = vmlaq_n_f32(v119, v120, v122);
          v101 = j - 1;
        }
        if (v101)
        {
          v123 = 0uLL;
          v124 = 0uLL;
          do
          {
            v125.i64[0] = *(_QWORD *)v103;
            v103 += 2;
            v126.i64[0] = *(_QWORD *)v105;
            v105 += 2;
            v127 = *(_QWORD *)v107;
            v107 += 2;
            v128 = *(_QWORD *)v109;
            v109 += 2;
            v129 = *v111++;
            v130 = *(float32x2_t *)v113->f32;
            v113 = (float32x4_t *)((char *)v113 + 8);
            v125.i64[1] = v127;
            v126.i64[1] = v128;
            v131 = (float32x4_t)vtrn1q_s32(v125, v126);
            v132 = (float32x4_t)vtrn2q_s32(v125, v126);
            v118 = vmlaq_n_f32(v118, v131, v129.f32[0]);
            v119 = vmlaq_n_f32(v119, v131, v130.f32[0]);
            v123 = vmlaq_lane_f32(v123, v132, v129, 1);
            v124 = vmlaq_lane_f32(v124, v132, v130, 1);
            v76 = v101 <= 2;
            v101 -= 2;
          }
          while (!v76);
          v118 = vaddq_f32(v118, v123);
          v119 = vaddq_f32(v119, v124);
        }
        *(float32x4_t *)v111->f32 = vmulq_n_f32(v118, a7);
      }
      if (j)
      {
        v133 = (float32x2_t *)(a5 + v10 * v8);
        v134 = (float32x2_t *)((char *)v133 + v8);
        v135 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v136 = *v135;
            v137 = v135[1].f32[0];
            v135 = (float32x2_t *)((char *)v135 - v9);
            v138 = (float)(vaddv_f32(vmul_f32(v136, *v134)) + (float)(v134[1].f32[0] * v137)) * a7;
            v133[1].f32[0] = (float)(vaddv_f32(vmul_f32(v136, *v133)) + (float)(v133[1].f32[0] * v137)) * a7;
            v134[1].f32[0] = v138;
          }
          v139 = *v135;
          v135 = (float32x2_t *)((char *)v135 - v9);
          v140 = vaddv_f32(vmul_f32(v139, *v134)) * a7;
          v133->f32[1] = vaddv_f32(vmul_f32(v139, *v133)) * a7;
          v134->f32[1] = v140;
        }
        v141 = (float)(v135->f32[0] * v134->f32[0]) * a7;
        v133->f32[0] = (float)(v135->f32[0] * v133->f32[0]) * a7;
        v134->f32[0] = v141;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v157 = vmulq_n_f32(v161, a7))
      {
        k -= 4;
        v143 = (float *)(a3 + k * v9 + 4 * k);
        v144 = (float32x2_t *)&v143[(unint64_t)v9 / 4];
        v145 = (float32x4_t *)&v143[(unint64_t)v9 / 2];
        v146 = (float32x4_t *)&v143[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v147 = k;
        v148 = *v143;
        v149 = (__int32 *)(a3 + k * v9);
        v150 = *v144;
        v151 = (__int32 *)v144 - k;
        v152 = *v145;
        v153 = (__int32 *)v145 - k;
        v154 = *v146;
        v155 = (__int32 *)v146 - k;
        v156 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v157 = (float32x4_t *)(a5 + v10 * v8);
        v152.i32[3] = 0;
        v158 = vmulq_f32(v154, v156);
        v159 = vmulq_f32(v152, v156);
        v160 = vmul_f32(v150, *(float32x2_t *)v156.f32);
        *(float *)v7.i32 = v148 * v156.f32[0];
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160.f32[0] = vaddv_f32(v160);
        v158.f32[0] = vaddv_f32(*(float32x2_t *)v158.f32);
        v159.f32[0] = vaddv_f32(*(float32x2_t *)v159.f32);
        *(int32x2_t *)v161.f32 = vtrn1_s32(v7, (int32x2_t)v160);
        *(int32x2_t *)&v161.u32[2] = vtrn1_s32(*(int32x2_t *)v159.f32, *(int32x2_t *)v158.f32);
        if ((k & 1) != 0)
        {
          v162.i32[0] = *v149++;
          v162.i32[1] = *v151++;
          v162.i32[2] = *v153++;
          v162.i32[3] = *v155++;
          v163 = v157->f32[0];
          v157 = (float32x4_t *)((char *)v157 + 4);
          v161 = vmlaq_n_f32(v161, v162, v163);
          v147 = k - 1;
        }
        if (v147)
        {
          v164 = 0uLL;
          do
          {
            v165.i64[0] = *(_QWORD *)v149;
            v149 += 2;
            v166.i64[0] = *(_QWORD *)v151;
            v151 += 2;
            v167 = *(_QWORD *)v153;
            v153 += 2;
            v168 = *(_QWORD *)v155;
            v155 += 2;
            v169 = *(float32x2_t *)v157->f32;
            v157 = (float32x4_t *)((char *)v157 + 8);
            v165.i64[1] = v167;
            v166.i64[1] = v168;
            v161 = vmlaq_n_f32(v161, (float32x4_t)vtrn1q_s32(v165, v166), v169.f32[0]);
            v164 = vmlaq_lane_f32(v164, (float32x4_t)vtrn2q_s32(v165, v166), v169, 1);
            v76 = v147 <= 2;
            v147 -= 2;
          }
          while (!v76);
          v161 = vaddq_f32(v161, v164);
        }
      }
      if (k)
      {
        v170 = (float32x2_t *)(a5 + v10 * v8);
        v171 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v172 = *v171;
            v173 = v171[1].f32[0];
            v171 = (float32x2_t *)((char *)v171 - v9);
            v170[1].f32[0] = (float)(vaddv_f32(vmul_f32(v172, *v170)) + (float)(v170[1].f32[0] * v173)) * a7;
          }
          v174 = *v171;
          v171 = (float32x2_t *)((char *)v171 - v9);
          v170->f32[1] = vaddv_f32(vmul_f32(v174, *v170)) * a7;
        }
        v170->f32[0] = (float)(v171->f32[0] * v170->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LUTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t v17;
  float *v18;
  float32x2_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  __int32 *v22;
  float v23;
  __int32 *v24;
  float32x2_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  int64x2_t v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x4_t v71;
  BOOL v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  float32x2_t *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32_t v87;
  uint64_t j;
  int32x4_t *v89;
  int32x4_t *v90;
  uint64_t v91;
  float *v92;
  float32x2_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  __int32 *v96;
  float v97;
  __int32 *v98;
  float32x2_t v99;
  __int32 *v100;
  float32x4_t v101;
  __int32 *v102;
  int32x4_t v103;
  float32x2_t *v104;
  int32x4_t v105;
  float32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float32x2_t *v126;
  float32x2_t *v127;
  float32x2_t v128;
  float32_t v129;
  float32_t v130;
  float32_t v131;
  uint64_t k;
  uint64_t v133;
  float *v134;
  float32x2_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  __int32 *v138;
  float v139;
  __int32 *v140;
  float32x2_t v141;
  __int32 *v142;
  float32x4_t v143;
  __int32 *v144;
  float32x4_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t *v159;
  float32x2_t *v160;
  float32x2_t v161;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v36 = vmulq_n_f32(v53, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = a3 + i * v9 + 4 * i;
      v18 = (float *)(v17 + v9);
      v19 = (float32x2_t *)(v17 + 2 * v9);
      v20 = (float32x4_t *)(v17 + v9 + 2 * v9);
      v21 = i;
      v22 = (__int32 *)(a3 + i * v9);
      v23 = *v18;
      v24 = (__int32 *)&v18[-i];
      v25 = *v19;
      v26 = (__int32 *)v19 - i;
      v27 = *v20;
      v28 = (__int32 *)v20 - i;
      v29 = *v13;
      v30 = (float32x2_t *)(a5 + v10 * v8);
      v31 = *v14;
      v32 = (float32x2_t *)((char *)v14 - 4 * i);
      v33 = *v15;
      v34 = (float32x2_t *)((char *)v15 - 4 * i);
      v35 = *v16;
      v36 = (float32x4_t *)((char *)v16 - 4 * i);
      v37 = (int32x4_t)vtrn1q_s64(v29, v33);
      v38 = (int32x4_t)vtrn1q_s64(v31, v35);
      v39 = (int32x4_t)vtrn2q_s64(v29, v33);
      v40 = (int32x4_t)vtrn2q_s64(v31, v35);
      v41 = (float32x4_t)vtrn1q_s32(v37, v38);
      v42 = (float32x4_t)vtrn2q_s32(v37, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (int64x2_t)vmlaq_n_f32(v42, v41, v23);
      v45 = (int64x2_t)vaddq_f32(vmlaq_n_f32(v43, v41, v25.f32[0]), vmulq_lane_f32(v42, v25, 1));
      v46 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vtrn2q_s32(v39, v40), v41, v27.f32[0]), v43, v27, 2), vmulq_lane_f32(v42, *(float32x2_t *)v27.f32, 1));
      v47 = (int32x4_t)vtrn1q_s64((int64x2_t)v41, v45);
      v48 = (int32x4_t)vtrn1q_s64(v44, v46);
      v49 = (int32x4_t)vtrn2q_s64((int64x2_t)v41, v45);
      v7 = (float32x4_t)vtrn2q_s64(v44, v46);
      v50 = (float32x4_t)vtrn1q_s32(v47, v48);
      v51 = (float32x4_t)vtrn2q_s32(v47, v48);
      v52 = (float32x4_t)vtrn1q_s32(v49, (int32x4_t)v7);
      v53 = (float32x4_t)vtrn2q_s32(v49, (int32x4_t)v7);
      if ((i & 1) != 0)
      {
        v54.i32[0] = *v22++;
        v54.i32[1] = *v24++;
        v54.i32[2] = *v26++;
        v54.i32[3] = *v28++;
        v55 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v56 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v57 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        v58 = v36->f32[0];
        v36 = (float32x4_t *)((char *)v36 + 4);
        v50 = vmlaq_n_f32(v50, v54, v55);
        v51 = vmlaq_n_f32(v51, v54, v56);
        v52 = vmlaq_n_f32(v52, v54, v57);
        v53 = vmlaq_n_f32(v53, v54, v58);
        v21 = i - 1;
      }
      if (v21)
      {
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        do
        {
          v63.i64[0] = *(_QWORD *)v22;
          v22 += 2;
          v64.i64[0] = *(_QWORD *)v24;
          v24 += 2;
          v65 = *(_QWORD *)v26;
          v26 += 2;
          v66 = *(_QWORD *)v28;
          v28 += 2;
          v67 = *v30++;
          v68 = *v32++;
          v69 = *v34++;
          v70 = *(float32x2_t *)v36->f32;
          v36 = (float32x4_t *)((char *)v36 + 8);
          v63.i64[1] = v65;
          v64.i64[1] = v66;
          v71 = (float32x4_t)vtrn1q_s32(v63, v64);
          v7 = (float32x4_t)vtrn2q_s32(v63, v64);
          v50 = vmlaq_n_f32(v50, v71, v67.f32[0]);
          v51 = vmlaq_n_f32(v51, v71, v68.f32[0]);
          v52 = vmlaq_n_f32(v52, v71, v69.f32[0]);
          v53 = vmlaq_n_f32(v53, v71, v70.f32[0]);
          v59 = vmlaq_lane_f32(v59, v7, v67, 1);
          v60 = vmlaq_lane_f32(v60, v7, v68, 1);
          v61 = vmlaq_lane_f32(v61, v7, v69, 1);
          v62 = vmlaq_lane_f32(v62, v7, v70, 1);
          v72 = v21 <= 2;
          v21 -= 2;
        }
        while (!v72);
        v50 = vaddq_f32(v50, v59);
        v51 = vaddq_f32(v51, v60);
        v52 = vaddq_f32(v52, v61);
        v53 = vaddq_f32(v53, v62);
      }
      *(float32x4_t *)v30->f32 = vmulq_n_f32(v50, a7);
      *(float32x4_t *)v32->f32 = vmulq_n_f32(v51, a7);
      *(float32x4_t *)v34->f32 = vmulq_n_f32(v52, a7);
    }
    if (i)
    {
      v73 = (float32x2_t *)(a5 + v10 * v8);
      v74 = (float32x2_t *)((char *)v73 + v8);
      v75 = &v73[(unint64_t)v8 / 4];
      v76 = (float32x2_t *)((char *)&v73[(unint64_t)v8 / 4] + v8);
      v77 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v78 = *v77;
          v77 = (float32x2_t *)((char *)v77 - v9);
          v79 = (float)(vaddv_f32(vmul_f32(v78, *v74)) + v74[1].f32[0]) * a7;
          v80 = (float)(vaddv_f32(vmul_f32(v78, *v75)) + v75[1].f32[0]) * a7;
          v81 = (float)(vaddv_f32(vmul_f32(v78, *v76)) + v76[1].f32[0]) * a7;
          v73[1].f32[0] = (float)(vaddv_f32(vmul_f32(v78, *v73)) + v73[1].f32[0]) * a7;
          v74[1].f32[0] = v79;
          v75[1].f32[0] = v80;
          v76[1].f32[0] = v81;
        }
        v82 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v74)) + (float)(v77->f32[0] * COERCE_FLOAT(*v74))) * a7;
        v83 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v75)) + (float)(v77->f32[0] * COERCE_FLOAT(*v75))) * a7;
        v84 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v76)) + (float)(v77->f32[0] * COERCE_FLOAT(*v76))) * a7;
        v73->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v73)) + (float)(v77->f32[0] * COERCE_FLOAT(*v73)))
                    * a7;
        v74->f32[1] = v82;
        v75->f32[1] = v83;
        v76->f32[1] = v84;
      }
      v85 = v74->f32[0] * a7;
      v86 = v75->f32[0] * a7;
      v87 = v76->f32[0] * a7;
      v73->f32[0] = v73->f32[0] * a7;
      v74->f32[0] = v85;
      v75->f32[0] = v86;
      v76->f32[0] = v87;
    }
    v10 += 4;
    v72 = v11 <= 4;
    v11 -= 4;
  }
  while (!v72);
  v72 = v11 <= -3;
  a2 = v11 + 3;
  if (!v72)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v106 = vmulq_n_f32(v112, a7))
      {
        j -= 4;
        v89 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v90 = (int32x4_t *)((char *)v89 + v8);
        v91 = a3 + j * v9 + 4 * j;
        v92 = (float *)(v91 + v9);
        v93 = (float32x2_t *)(v91 + 2 * v9);
        v94 = (float32x4_t *)(v91 + v9 + 2 * v9);
        v95 = j;
        v96 = (__int32 *)(a3 + j * v9);
        v97 = *v92;
        v98 = (__int32 *)&v92[-j];
        v99 = *v93;
        v100 = (__int32 *)v93 - j;
        v101 = *v94;
        v102 = (__int32 *)v94 - j;
        v103 = *v89;
        v104 = (float32x2_t *)(a5 + v10 * v8);
        v105 = *v90;
        v106 = (float32x4_t *)((char *)v90 - 4 * j);
        v107 = vtrn1q_s32(v103, v105);
        v108 = vtrn2q_s32(v103, v105);
        *(float32x2_t *)v109.i8 = vmla_n_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v107.i8, v97);
        v110 = vadd_f32(vmla_laneq_f32(vmla_n_f32((float32x2_t)v108.u64[1], *(float32x2_t *)v107.i8, v101.f32[0]), (float32x2_t)v107.u64[1], v101, 2), vmul_lane_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v101.f32, 1));
        v107.u64[1] = (unint64_t)vadd_f32(vmla_n_f32((float32x2_t)v107.u64[1], *(float32x2_t *)v107.i8, v99.f32[0]), vmul_lane_f32(*(float32x2_t *)v108.i8, v99, 1));
        v109.u64[1] = (unint64_t)v110;
        v111 = (float32x4_t)vtrn1q_s32(v107, v109);
        v112 = (float32x4_t)vtrn2q_s32(v107, v109);
        if ((j & 1) != 0)
        {
          v113.i32[0] = *v96++;
          v113.i32[1] = *v98++;
          v113.i32[2] = *v100++;
          v113.i32[3] = *v102++;
          v114 = v104->f32[0];
          v104 = (float32x2_t *)((char *)v104 + 4);
          v115 = v106->f32[0];
          v106 = (float32x4_t *)((char *)v106 + 4);
          v111 = vmlaq_n_f32(v111, v113, v114);
          v112 = vmlaq_n_f32(v112, v113, v115);
          v95 = j - 1;
        }
        if (v95)
        {
          v116 = 0uLL;
          v117 = 0uLL;
          do
          {
            v118.i64[0] = *(_QWORD *)v96;
            v96 += 2;
            v119.i64[0] = *(_QWORD *)v98;
            v98 += 2;
            v120 = *(_QWORD *)v100;
            v100 += 2;
            v121 = *(_QWORD *)v102;
            v102 += 2;
            v122 = *v104++;
            v123 = *(float32x2_t *)v106->f32;
            v106 = (float32x4_t *)((char *)v106 + 8);
            v118.i64[1] = v120;
            v119.i64[1] = v121;
            v124 = (float32x4_t)vtrn1q_s32(v118, v119);
            v7 = (float32x4_t)vtrn2q_s32(v118, v119);
            v111 = vmlaq_n_f32(v111, v124, v122.f32[0]);
            v112 = vmlaq_n_f32(v112, v124, v123.f32[0]);
            v116 = vmlaq_lane_f32(v116, v7, v122, 1);
            v117 = vmlaq_lane_f32(v117, v7, v123, 1);
            v72 = v95 <= 2;
            v95 -= 2;
          }
          while (!v72);
          v111 = vaddq_f32(v111, v116);
          v112 = vaddq_f32(v112, v117);
        }
        *(float32x4_t *)v104->f32 = vmulq_n_f32(v111, a7);
      }
      if (j)
      {
        v125 = (float32x2_t *)(a5 + v10 * v8);
        v126 = (float32x2_t *)((char *)v125 + v8);
        v127 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v128 = *v127;
            v127 = (float32x2_t *)((char *)v127 - v9);
            v129 = (float)(vaddv_f32(vmul_f32(v128, *v126)) + v126[1].f32[0]) * a7;
            v125[1].f32[0] = (float)(vaddv_f32(vmul_f32(v128, *v125)) + v125[1].f32[0]) * a7;
            v126[1].f32[0] = v129;
          }
          v130 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v126)) + (float)(v127->f32[0] * COERCE_FLOAT(*v126)))
               * a7;
          v125->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v125))
                               + (float)(v127->f32[0] * COERCE_FLOAT(*v125)))
                       * a7;
          v126->f32[1] = v130;
        }
        v131 = v126->f32[0] * a7;
        v125->f32[0] = v125->f32[0] * a7;
        v126->f32[0] = v131;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v146 = vmulq_n_f32(v150, a7))
      {
        k -= 4;
        v133 = a3 + k * v9 + 4 * k;
        v134 = (float *)(v133 + v9);
        v135 = (float32x2_t *)(v133 + 2 * v9);
        v136 = (float32x4_t *)(v133 + v9 + 2 * v9);
        v137 = k;
        v138 = (__int32 *)(a3 + k * v9);
        v139 = *v134;
        v140 = (__int32 *)&v134[-k];
        v141 = *v135;
        v142 = (__int32 *)v135 - k;
        v143 = *v136;
        v144 = (__int32 *)v136 - k;
        v145 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v146 = (float32x4_t *)(a5 + v10 * v8);
        v143.i32[3] = 0;
        v147 = vmulq_f32(v143, v145);
        v148 = vmul_f32(v141, *(float32x2_t *)v145.f32);
        v7.f32[0] = v139 * v145.f32[0];
        v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
        *(int32x2_t *)v149.f32 = vtrn1_s32(*(int32x2_t *)v145.f32, *(int32x2_t *)v7.f32);
        *(int32x2_t *)&v149.u32[2] = vtrn1_s32((int32x2_t)vpadd_f32(v148, v148), (int32x2_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32));
        v145.i32[0] = 0;
        v150 = vaddq_f32(v149, v145);
        if ((k & 1) != 0)
        {
          v151.i32[0] = *v138++;
          v151.i32[1] = *v140++;
          v151.i32[2] = *v142++;
          v151.i32[3] = *v144++;
          v152 = v146->f32[0];
          v146 = (float32x4_t *)((char *)v146 + 4);
          v150 = vmlaq_n_f32(v150, v151, v152);
          v137 = k - 1;
        }
        if (v137)
        {
          v153 = 0uLL;
          do
          {
            v154.i64[0] = *(_QWORD *)v138;
            v138 += 2;
            v155.i64[0] = *(_QWORD *)v140;
            v140 += 2;
            v156 = *(_QWORD *)v142;
            v142 += 2;
            v157 = *(_QWORD *)v144;
            v144 += 2;
            v158 = *(float32x2_t *)v146->f32;
            v146 = (float32x4_t *)((char *)v146 + 8);
            v154.i64[1] = v156;
            v155.i64[1] = v157;
            v7 = (float32x4_t)vtrn2q_s32(v154, v155);
            v150 = vmlaq_n_f32(v150, (float32x4_t)vtrn1q_s32(v154, v155), v158.f32[0]);
            v153 = vmlaq_lane_f32(v153, v7, v158, 1);
            v72 = v137 <= 2;
            v137 -= 2;
          }
          while (!v72);
          v150 = vaddq_f32(v150, v153);
        }
      }
      if (k)
      {
        v159 = (float32x2_t *)(a5 + v10 * v8);
        v160 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v161 = *v160;
            v160 = (float32x2_t *)((char *)v160 - v9);
            v159[1].f32[0] = (float)(vaddv_f32(vmul_f32(v161, *v159)) + v159[1].f32[0]) * a7;
          }
          v159->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v159))
                               + (float)(v160->f32[0] * COERCE_FLOAT(*v159)))
                       * a7;
        }
        v159->f32[0] = v159->f32[0] * a7;
      }
    }
  }
  return result;
}

void strsm_noPack_RLTU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v17 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v17 = 2;
        v23 = __X;
        v24 = __N;
        do
        {
          v25 = *v23 * v11;
          *v23 = v25;
          v23[a6] = (float)(v23[a6] * v11) - (float)(v25 * v22);
          ++v23;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v17 = 1;
      cblas_sscal(__N, a7, __X, 1);
      v11 = a7;
    }
    else
    {
      v17 = 0;
    }
  }
  else if (__N < 1)
  {
    v17 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = 3;
    v18 = __X;
    v19 = __N;
    do
    {
      v20 = *v18 * v11;
      *v18 = v20;
      v21 = (float)(v18[a6] * v11) - (float)(v20 * v14);
      v18[a6] = v21;
      v18[2 * a6] = -(float)((float)((float)(v16 * v21) + (float)(*v18 * v15)) - (float)(v18[2 * a6] * v11));
      ++v18;
      --v19;
    }
    while (v19);
  }
  if (v17 < a2)
  {
    v26 = 8 * a4;
    v27 = 8 * a6;
    v28 = v17;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x2_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29];
          v32 = 0uLL;
          if ((v17 & 1) != 0)
          {
            v38 = vmlaq_n_f32((float32x4_t)0, *v31, COERCE_FLOAT(*(_OWORD *)v30->f32));
            v35 = vmlaq_lane_f32((float32x4_t)0, *v31, *v30, 1);
            v34 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 2);
            v33 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 3);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v36 = v28 - 1;
            v37 = (float32x2_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v39 = 0uLL;
              v40 = 0uLL;
              v41 = 0uLL;
              do
              {
                v38 = vmlaq_n_f32(v38, *v31, COERCE_FLOAT(*(_OWORD *)v37->f32));
                v35 = vmlaq_lane_f32(v35, *v31, *v37, 1);
                v34 = vmlaq_laneq_f32(v34, *v31, *(float32x4_t *)v37->f32, 2);
                v33 = vmlaq_laneq_f32(v33, *v31, *(float32x4_t *)v37->f32, 3);
                v42 = *(float32x4_t *)&v37->f32[a4];
                v43 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v39 = vmlaq_n_f32(v39, v43, v42.f32[0]);
                v40 = vmlaq_lane_f32(v40, v43, *(float32x2_t *)v42.f32, 1);
                v41 = vmlaq_laneq_f32(v41, v43, v42, 2);
                v32 = vmlaq_laneq_f32(v32, v43, v42, 3);
                v37 = (float32x2_t *)((char *)v37 + v26);
                v31 = (float32x4_t *)((char *)v31 + v27);
                v36 -= 2;
              }
              while (v36);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v28;
            v37 = (float32x2_t *)(a3 + 4 * v28);
            v38 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v41 = 0uLL;
          v40 = 0uLL;
          v39 = 0uLL;
LABEL_27:
          v44 = vaddq_f32(v39, v38);
          v45 = vaddq_f32(v40, v35);
          v46 = vaddq_f32(v32, v33);
          v47 = vmulq_n_f32(*v31, v11);
          v48 = vsubq_f32(v47, v44);
          v49 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v11), v45);
          v45.i32[0] = v37->i32[1];
          v47.i32[0] = v37[1].i32[0];
          v50 = vmlsq_lane_f32(v49, v48, *(float32x2_t *)v45.f32, 0);
          v51 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v11), vaddq_f32(v41, v34)), v48, *(float32x2_t *)v47.f32, 0);
          v45.i32[0] = v37[1].i32[1];
          v52 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v11), v46), v48, *(float32x2_t *)v45.f32, 0);
          v53 = (char *)v37 + 4 * a4;
          v45.i32[0] = *((_DWORD *)v53 + 2);
          v47.i32[0] = *((_DWORD *)v53 + 3);
          v54 = vmlsq_lane_f32(v51, v50, *(float32x2_t *)v45.f32, 0);
          v45.i32[0] = *(_DWORD *)&v53[4 * a4 + 12];
          *v31 = v48;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v50;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v54;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(vmlsq_lane_f32(v52, v50, *(float32x2_t *)v47.f32, 0), v54, *(float32x2_t *)v45.f32, 0);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a2)
        return;
    }
    v55 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v56 = &__X[v29];
      v57 = 0uLL;
      if ((v17 & 1) != 0)
      {
        v58 = vmlaq_n_f32((float32x4_t)0, *v55, *v56);
        v56 += a6;
        v59 = v28 - 1;
        v60 = (float32x4_t *)((char *)v55 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v58 = vmlaq_n_f32(v58, *v60, *v56);
            v57 = vmlaq_n_f32(v57, *(float32x4_t *)((char *)v60 + 4 * a4), v56[a6]);
            v60 = (float32x4_t *)((char *)v60 + v26);
            v56 = (float *)((char *)v56 + v27);
            v59 -= 2;
          }
          while (v59);
        }
      }
      else
      {
        v58 = 0uLL;
        v59 = v28;
        v60 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      v61 = vaddq_f32(v57, v58);
      v62 = -(float)(v61.f32[0] - (float)(*v56 * v11));
      v63 = (float)-(float)(v61.f32[1] - (float)(v56[a6] * v11)) - (float)(v62 * v60->f32[1]);
      v64 = (float)-(float)(v61.f32[2] - (float)(v56[2 * a6] * v11)) - (float)(v62 * v60->f32[2]);
      v61.f32[0] = (float)-(float)(v61.f32[3] - (float)(v56[3 * a6] * v11)) - (float)(v62 * v60->f32[3]);
      v65 = &v60->f32[a4];
      v66 = v64 - (float)(v63 * v65[2]);
      v61.f32[0] = (float)(v61.f32[0] - (float)(v63 * v65[3])) - (float)(v66 * v65[a4 + 3]);
      *v56 = v62;
      v56[a6] = v63;
      v56[2 * a6] = v66;
      v56[3 * a6] = v61.f32[0];
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_RLTN(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x2_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  char *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float *v69;
  float32x4_t v70;
  float32x4_t *v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float *v78;
  float v79;
  float v80;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v20 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v20 = 2;
        v28 = __X;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = v27 * *v28;
          *v28 = v31;
          v28[a6] = v30 * (float)((float)(v28[a6] * v11) - (float)(v31 * v26));
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v20 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v11 = a7;
    }
    else
    {
      v20 = 0;
    }
  }
  else if (__N < 1)
  {
    v20 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = 3;
    v21 = __X;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *v21;
      *v21 = v24;
      v25 = v19 * (float)((float)(v21[a6] * v11) - (float)(v24 * v15));
      v21[a6] = v25;
      v21[2 * a6] = v23
                  * (float)-(float)((float)((float)(v18 * v25) + (float)(*v21 * v14)) - (float)(v21[2 * a6] * v11));
      ++v21;
      --v22;
    }
    while (v22);
  }
  if (v20 < a2)
  {
    v32 = a4 + 1;
    v33 = 8 * a4;
    v34 = 8 * a6;
    v35 = v20;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v32];
      v37 = 1.0 / a3[v32 + v35 * v32];
      v38 = 1.0 / a3[(v35 + 2) * v32];
      v39 = 1.0 / a3[(v35 + 3) * v32];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x2_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40];
          v43 = 0uLL;
          if ((v20 & 1) != 0)
          {
            v49 = vmlaq_n_f32((float32x4_t)0, *v42, COERCE_FLOAT(*(_OWORD *)v41->f32));
            v46 = vmlaq_lane_f32((float32x4_t)0, *v42, *v41, 1);
            v45 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 2);
            v44 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 3);
            v42 = (float32x4_t *)((char *)v42 + 4 * a6);
            v47 = v35 - 1;
            v48 = (float32x2_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v50 = 0uLL;
              v51 = 0uLL;
              v52 = 0uLL;
              do
              {
                v49 = vmlaq_n_f32(v49, *v42, COERCE_FLOAT(*(_OWORD *)v48->f32));
                v46 = vmlaq_lane_f32(v46, *v42, *v48, 1);
                v45 = vmlaq_laneq_f32(v45, *v42, *(float32x4_t *)v48->f32, 2);
                v44 = vmlaq_laneq_f32(v44, *v42, *(float32x4_t *)v48->f32, 3);
                v53 = *(float32x4_t *)&v48->f32[a4];
                v54 = *(float32x4_t *)((char *)v42 + 4 * a6);
                v50 = vmlaq_n_f32(v50, v54, v53.f32[0]);
                v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)v53.f32, 1);
                v52 = vmlaq_laneq_f32(v52, v54, v53, 2);
                v43 = vmlaq_laneq_f32(v43, v54, v53, 3);
                v48 = (float32x2_t *)((char *)v48 + v33);
                v42 = (float32x4_t *)((char *)v42 + v34);
                v47 -= 2;
              }
              while (v47);
              goto LABEL_27;
            }
          }
          else
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = v35;
            v48 = (float32x2_t *)&a3[v35];
            v49 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v52 = 0uLL;
          v51 = 0uLL;
          v50 = 0uLL;
LABEL_27:
          v55 = vaddq_f32(v50, v49);
          v56 = vaddq_f32(v43, v44);
          v57 = vmulq_n_f32(*(float32x4_t *)((char *)v42 + 8 * a6), v11);
          v58 = vsubq_f32(vmulq_n_f32(*v42, v11), v55);
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 4 * a6), v11), vaddq_f32(v51, v46));
          v60 = vsubq_f32(v57, vaddq_f32(v52, v45));
          v61 = vmulq_n_f32(v58, v36);
          v58.i32[0] = v48->i32[1];
          v57.i32[0] = v48[1].i32[0];
          v62 = vmlsq_lane_f32(v59, v61, *(float32x2_t *)v58.f32, 0);
          v63 = vmlsq_lane_f32(v60, v61, *(float32x2_t *)v57.f32, 0);
          v58.i32[0] = v48[1].i32[1];
          v64 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 12 * a6), v11), v56), v61, *(float32x2_t *)v58.f32, 0);
          v65 = (char *)v48 + 4 * a4;
          v66 = vmulq_n_f32(v62, v37);
          v58.i32[0] = *((_DWORD *)v65 + 2);
          v57.i32[0] = *((_DWORD *)v65 + 3);
          v67 = vmulq_n_f32(vmlsq_lane_f32(v63, v66, *(float32x2_t *)v58.f32, 0), v38);
          v58.i32[0] = *(_DWORD *)&v65[4 * a4 + 12];
          *v42 = v61;
          *(float32x4_t *)((char *)v42 + 4 * a6) = v66;
          *(float32x4_t *)((char *)v42 + 8 * a6) = v67;
          *(float32x4_t *)((char *)v42 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v64, v66, *(float32x2_t *)v57.f32, 0), v67, *(float32x2_t *)v58.f32, 0), v39);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a2)
        return;
    }
    v68 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v69 = &__X[v40];
      v70 = 0uLL;
      if ((v20 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v68, *v69);
        v69 += a6;
        v71 = (float32x4_t *)((char *)v68 + 4 * a4);
        v72 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v73 = vmlaq_n_f32(v73, *v71, *v69);
            v70 = vmlaq_n_f32(v70, *(float32x4_t *)((char *)v71 + 4 * a4), v69[a6]);
            v69 = (float *)((char *)v69 + v34);
            v71 = (float32x4_t *)((char *)v71 + v33);
            v72 -= 2;
          }
          while (v72);
        }
      }
      else
      {
        v71 = (float32x4_t *)&a3[v35];
        v72 = v35;
        v73 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v74 = vaddq_f32(v73, v70);
      v75 = v36 * (float)-(float)(v74.f32[0] - (float)(*v69 * v11));
      v76 = (float)-(float)(v74.f32[1] - (float)(v69[a6] * v11)) - (float)(v75 * v71->f32[1]);
      v77 = (float)-(float)(v74.f32[2] - (float)(v69[2 * a6] * v11)) - (float)(v75 * v71->f32[2]);
      v74.f32[0] = (float)-(float)(v74.f32[3] - (float)(v69[3 * a6] * v11)) - (float)(v75 * v71->f32[3]);
      v78 = &v71->f32[a4];
      v79 = v37 * v76;
      v80 = v38 * (float)(v77 - (float)(v79 * v78[2]));
      v74.f32[0] = v39 * (float)((float)(v74.f32[0] - (float)(v79 * v78[3])) - (float)(v80 * v78[a4 + 3]));
      *v69 = v75;
      v69[a6] = v79;
      v69[2 * a6] = v80;
      v69[3 * a6] = v74.f32[0];
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_RLNU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float *v52;
  float *v53;
  float32x4_t v54;
  float *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  __int32 *v86;
  uint64_t v87;
  __int32 *v88;
  uint64_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  float32x4_t v98;
  uint64_t v99;
  float32x4_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  float32x4_t v105;
  float v106;
  uint64_t v107;
  int32x4_t v108;
  uint64_t v109;
  int32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;

  v9 = __N;
  v10 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v22 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
        v23 = (float *)(a5 + 4 * v10 * a6);
        v24 = (float *)(a5 + a6 * (4 * a2 - 8));
        v25 = __N;
        do
        {
          v26 = *v23 * a7;
          *v23++ = v26;
          *v24 = (float)(*v24 * a7) - (float)(v26 * v22);
          ++v24;
          --v25;
        }
        while (v25);
      }
      v10 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v125 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v10 * a6), 1);
      a7 = v125;
      v10 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v11 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
      v12 = (a2 - 3) * a4;
      v13 = *(float *)(a3 + 4 * (v12 + v10));
      v14 = *(float *)(a3 + 4 * (v12 + a2 - 2));
      v15 = (float *)(a5 + 4 * v10 * a6);
      v16 = (float *)(a5 + a6 * (4 * a2 - 8));
      v17 = (float *)(a5 + a6 * (4 * a2 - 12));
      v18 = __N;
      do
      {
        v19 = *v15 * a7;
        *v15 = v19;
        v20 = (float)(*v16 * a7) - (float)(v19 * v11);
        *v16++ = v20;
        v21 = *v15++;
        *v17 = -(float)((float)((float)(v14 * v20) + (float)(v21 * v13)) - (float)(*v17 * a7));
        ++v17;
        --v18;
      }
      while (v18);
    }
    v10 = a2 - 4;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v27 = v10 + 1;
    v124 = v9 - 3;
    v126 = v9;
    v28 = 8 * a6;
    while (1)
    {
      v29 = v27 - 4;
      v122 = v27 - 4;
      v123 = v27;
      v30 = 0;
      if (v9 >= 4)
      {
        v31 = a3 + 4 * v29;
        v32 = a3 + 4 * v27;
        v33 = (float *)(v32 + 4 * v29 * a4);
        v34 = (v27 - 3) * a4;
        v35 = (float *)(v32 + 4 * v34);
        v36 = (v27 - 2) * a4;
        v37 = (float *)(v32 + 4 * v36);
        v38 = (float *)(v32 + 4 * (v27 - 1) * a4);
        v39 = v27 * a6;
        v40 = 4;
        if (a2 - v29 > 4)
          v40 = a2 - v29;
        v41 = (_DWORD *)(v31 + 4 * v29 * a4);
        v42 = v31 + 4 * v34;
        v43 = v31 + 4 * v36;
        v44 = v29 * a6;
        do
        {
          v45 = a5 + 4 * v30;
          v46 = (float32x4_t *)(v45 + 4 * v39);
          v47 = 0uLL;
          if ((v40 & 1) != 0)
          {
            v69 = *v46;
            v54 = vmlaq_n_f32((float32x4_t)0, *v46, *v33);
            v50 = vmlaq_n_f32((float32x4_t)0, *v46, *v35);
            v49 = vmlaq_n_f32((float32x4_t)0, *v46, *v37);
            v46 = (float32x4_t *)((char *)v46 + 4 * a6);
            v51 = v40 - 5;
            v48 = vmlaq_n_f32((float32x4_t)0, v69, *v38);
            v52 = v38 + 1;
            v53 = v37 + 1;
            v55 = v35 + 1;
            v56 = v33 + 1;
            if (v40 != 5)
            {
LABEL_21:
              v57 = 0uLL;
              v58 = 0uLL;
              v59 = 0uLL;
              do
              {
                v60 = *v56;
                v61 = v56[1];
                v56 += 2;
                v54 = vmlaq_n_f32(v54, *v46, v60);
                v62 = *v55;
                v63 = v55[1];
                v55 += 2;
                v50 = vmlaq_n_f32(v50, *v46, v62);
                v64 = *v53;
                v65 = v53[1];
                v53 += 2;
                v49 = vmlaq_n_f32(v49, *v46, v64);
                v66 = *v52;
                v67 = v52[1];
                v52 += 2;
                v48 = vmlaq_n_f32(v48, *v46, v66);
                v68 = *(float32x4_t *)((char *)v46 + 4 * a6);
                v57 = vmlaq_n_f32(v57, v68, v61);
                v58 = vmlaq_n_f32(v58, v68, v63);
                v59 = vmlaq_n_f32(v59, v68, v65);
                v46 = (float32x4_t *)((char *)v46 + v28);
                v47 = vmlaq_n_f32(v47, v68, v67);
                v51 -= 2;
              }
              while (v51);
              goto LABEL_26;
            }
          }
          else
          {
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            v51 = v40 - 4;
            v52 = v38;
            v53 = v37;
            v54 = 0uLL;
            v55 = v35;
            v56 = v33;
            if (v40 != 4)
              goto LABEL_21;
          }
          v59 = 0uLL;
          v58 = 0uLL;
          v57 = 0uLL;
LABEL_26:
          v70 = vaddq_f32(v57, v54);
          v71 = vaddq_f32(v59, v49);
          v72 = vaddq_f32(v47, v48);
          v73 = (float32x4_t *)(v45 + 4 * v44);
          v74 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 4 * a6), a7);
          v75 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 8 * a6), a7);
          v76 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 12 * a6), a7);
          v77 = vsubq_f32(v74, vaddq_f32(v58, v50));
          v78 = vsubq_f32(v75, v71);
          v79 = vsubq_f32(v76, v72);
          v74.i32[0] = v41[3];
          v80 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v73, a7), v70), v79, *(float32x2_t *)v74.f32, 0);
          v75.i32[0] = *(_DWORD *)(v42 + 8);
          v74.i32[0] = *(_DWORD *)(v42 + 12);
          v81 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v74.f32, 0);
          v74.i32[0] = *(_DWORD *)(v43 + 12);
          v82 = vmlsq_lane_f32(v78, v79, *(float32x2_t *)v74.f32, 0);
          v76.i32[0] = v41[1];
          v74.i32[0] = v41[2];
          v83 = vmlsq_lane_f32(v81, v82, *(float32x2_t *)v75.f32, 0);
          *v73 = vmlsq_lane_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v74.f32, 0), v83, *(float32x2_t *)v76.f32, 0);
          *(float32x4_t *)((char *)v73 + 4 * a6) = v83;
          *(float32x4_t *)((char *)v73 + 8 * a6) = v82;
          *(float32x4_t *)((char *)v73 + 12 * a6) = v79;
          v30 += 4;
        }
        while (v30 < v124);
      }
      v9 = v126;
      if (v30 < v126)
        break;
LABEL_37:
      v27 = v122;
      if (v123 < 5)
        return;
    }
    v84 = a3 + 4 * v122;
    v85 = a3 + 4 * v123;
    v86 = (__int32 *)(v85 + 4 * v122 * a4);
    v87 = (v123 - 3) * a4;
    v88 = (__int32 *)(v85 + 4 * v87);
    v89 = (v123 - 2) * a4;
    v90 = (__int32 *)(v85 + 4 * v89);
    v91 = (__int32 *)(v85 + 4 * (v123 - 1) * a4);
    v92 = 4;
    if (a2 - v122 > 4)
      v92 = a2 - v122;
    v93 = (float *)(v84 + 4 * v122 * a4);
    v94 = v84 + 4 * v87;
    v95 = v84 + 4 * v89;
    while (1)
    {
      v96 = a5 + 4 * v30;
      v97 = (float *)(v96 + 4 * v123 * a6);
      v98 = 0uLL;
      if ((v92 & 1) != 0)
      {
        v105.i32[0] = *v86;
        v105.i32[1] = *v88;
        v105.i32[2] = *v90;
        v105.i32[3] = *v91;
        v106 = *v97;
        v97 += a6;
        v99 = v92 - 5;
        v100 = vmlaq_n_f32((float32x4_t)0, v105, v106);
        v101 = (uint64_t *)(v91 + 1);
        v102 = (uint64_t *)(v90 + 1);
        v103 = (uint64_t *)(v88 + 1);
        v104 = (uint64_t *)(v86 + 1);
        if (v92 != 5)
        {
          do
          {
LABEL_35:
            v107 = *v104++;
            v108.i64[0] = v107;
            v109 = *v103++;
            v110.i64[0] = v109;
            v111 = *v102++;
            v112 = v111;
            v113 = *v101++;
            v108.i64[1] = v112;
            v110.i64[1] = v113;
            v100 = vmlaq_n_f32(v100, (float32x4_t)vtrn1q_s32(v108, v110), *v97);
            v98 = vmlaq_n_f32(v98, (float32x4_t)vtrn2q_s32(v108, v110), v97[a6]);
            v97 = (float *)((char *)v97 + v28);
            v99 -= 2;
          }
          while (v99);
        }
      }
      else
      {
        v99 = v92 - 4;
        v100 = 0uLL;
        v101 = (uint64_t *)v91;
        v102 = (uint64_t *)v90;
        v103 = (uint64_t *)v88;
        v104 = (uint64_t *)v86;
        if (v92 != 4)
          goto LABEL_35;
      }
      v114 = vaddq_f32(v98, v100);
      v115 = (float *)(v96 + 4 * v122 * a6);
      v116 = -(float)(v114.f32[3] - (float)(v115[3 * a6] * a7));
      v117 = (float)-(float)(v114.f32[2] - (float)(v115[2 * a6] * a7)) - (float)(v116 * *(float *)(v95 + 12));
      v118 = (float)((float)-(float)(v114.f32[1] - (float)(v115[a6] * a7)) - (float)(v116 * *(float *)(v94 + 12)))
           - (float)(v117 * *(float *)(v94 + 8));
      *v115 = (float)((float)((float)-(float)(v114.f32[0] - (float)(*v115 * a7)) - (float)(v116 * v93[3]))
                    - (float)(v117 * v93[2]))
            - (float)(v118 * v93[1]);
      v115[a6] = v118;
      v115[2 * a6] = v117;
      v115[3 * a6] = v116;
      ++v30;
      v9 = v126;
      if (v30 == v126)
        goto LABEL_37;
    }
  }
}

void strsm_noPack_RLNN(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float32x4_t v69;
  float *v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  __int32 *v101;
  __int32 *v102;
  uint64_t v103;
  __int32 *v104;
  uint64_t v105;
  __int32 *v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  float32x4_t v119;
  float v120;
  uint64_t v121;
  int32x4_t v122;
  uint64_t v123;
  int32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  float *v129;
  float v130;
  float v131;
  float v132;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;

  v9 = a3;
  v10 = a7;
  v11 = __N;
  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v28 = (a2 - 2) * a4;
        v29 = *(float *)(a3 + 4 * (v28 + v12));
        v30 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
        v31 = *(float *)(a3 + 4 * (v28 + a2 - 2));
        v32 = (float *)(a5 + 4 * v12 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / v31;
        do
        {
          v36 = v30 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v29));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v12 + v12 * a4)), (float *)(a5 + 4 * v12 * a6), 1);
      v10 = a7;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = (a2 - 2) * a4;
      v14 = *(float *)(a3 + 4 * (v13 + v12));
      v15 = (a2 - 3) * a4;
      v16 = *(float *)(a3 + 4 * (v15 + v12));
      v17 = *(float *)(a3 + 4 * (v15 + a2 - 2));
      v18 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
      v19 = 1.0 / *(float *)(a3 + 4 * (v13 + a2 - 2));
      v20 = (float *)(a5 + 4 * v12 * a6);
      v21 = (float *)(a5 + a6 * (4 * a2 - 8));
      v22 = (float *)(a5 + a6 * (4 * a2 - 12));
      v23 = __N;
      v24 = 1.0 / *(float *)(a3 + 4 * (v15 + a2 - 3));
      do
      {
        v25 = v18 * *v20;
        *v20 = v25;
        v26 = v19 * (float)((float)(*v21 * v10) - (float)(v25 * v14));
        *v21++ = v26;
        v27 = *v20++;
        *v22 = v24 * (float)-(float)((float)((float)(v17 * v26) + (float)(v27 * v16)) - (float)(*v22 * v10));
        ++v22;
        --v23;
      }
      while (v23);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v37 = v12 + 1;
    v141 = v11 - 3;
    v143 = v11;
    v38 = 8 * a6;
    v138 = v9;
    while (1)
    {
      v39 = v37 - 4;
      v40 = (v37 - 4) * a4;
      v41 = 1.0 / *(float *)(v9 + 4 * (v40 + v37 - 4));
      v42 = (v37 - 3) * a4;
      v43 = 1.0 / *(float *)(v9 + 4 * (v37 - 3 + v42));
      v44 = (v37 - 2) * a4;
      v45 = 1.0 / *(float *)(v9 + 4 * (v37 - 2 + v44));
      v46 = (v37 - 1) * a4;
      v47 = 1.0 / *(float *)(v9 + 4 * (v37 - 1 + v46));
      v139 = v37 - 4;
      v140 = v37;
      v136 = v42;
      v137 = v40;
      v135 = v44;
      v48 = 0;
      if (v11 >= 4)
      {
        v49 = v9 + 4 * v39;
        v50 = v9 + 4 * v37;
        v51 = (float *)(v50 + 4 * v40);
        v52 = (float *)(v50 + 4 * v42);
        v53 = (float *)(v50 + 4 * v44);
        if (a2 - v39 <= 4)
          v54 = 4;
        else
          v54 = a2 - v39;
        v55 = (float *)(v50 + 4 * v46);
        v56 = v39 * a6;
        v57 = (_DWORD *)(v49 + 4 * v40);
        v58 = v49 + 4 * (v37 - 3) * a4;
        v59 = v49 + 4 * v44;
        do
        {
          v60 = a5 + 4 * v48;
          v61 = (float32x4_t *)(v60 + 4 * v37 * a6);
          v62 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v84 = *v61;
            v69 = vmlaq_n_f32((float32x4_t)0, *v61, *v51);
            v65 = vmlaq_n_f32((float32x4_t)0, *v61, *v52);
            v64 = vmlaq_n_f32((float32x4_t)0, *v61, *v53);
            v61 = (float32x4_t *)((char *)v61 + 4 * a6);
            v66 = v54 - 5;
            v63 = vmlaq_n_f32((float32x4_t)0, v84, *v55);
            v67 = v55 + 1;
            v68 = v53 + 1;
            v70 = v52 + 1;
            v71 = v51 + 1;
            if (v54 != 5)
            {
LABEL_22:
              v72 = 0uLL;
              v73 = 0uLL;
              v74 = 0uLL;
              do
              {
                v75 = *v71;
                v76 = v71[1];
                v71 += 2;
                v69 = vmlaq_n_f32(v69, *v61, v75);
                v77 = *v70;
                v78 = v70[1];
                v70 += 2;
                v65 = vmlaq_n_f32(v65, *v61, v77);
                v79 = *v68;
                v80 = v68[1];
                v68 += 2;
                v64 = vmlaq_n_f32(v64, *v61, v79);
                v81 = *v67;
                v82 = v67[1];
                v67 += 2;
                v63 = vmlaq_n_f32(v63, *v61, v81);
                v83 = *(float32x4_t *)((char *)v61 + 4 * a6);
                v72 = vmlaq_n_f32(v72, v83, v76);
                v73 = vmlaq_n_f32(v73, v83, v78);
                v74 = vmlaq_n_f32(v74, v83, v80);
                v61 = (float32x4_t *)((char *)v61 + v38);
                v62 = vmlaq_n_f32(v62, v83, v82);
                v66 -= 2;
              }
              while (v66);
              goto LABEL_27;
            }
          }
          else
          {
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = v54 - 4;
            v67 = v55;
            v68 = v53;
            v69 = 0uLL;
            v70 = v52;
            v71 = v51;
            if (v54 != 4)
              goto LABEL_22;
          }
          v74 = 0uLL;
          v73 = 0uLL;
          v72 = 0uLL;
LABEL_27:
          v85 = vaddq_f32(v72, v69);
          v86 = vaddq_f32(v74, v64);
          v87 = vaddq_f32(v62, v63);
          v88 = (float32x4_t *)(v60 + 4 * v56);
          v89 = vmulq_n_f32(*v88, v10);
          v90 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 4 * a6), v10);
          v91 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 8 * a6), v10);
          v92 = vsubq_f32(v89, v85);
          v93 = vsubq_f32(v90, vaddq_f32(v73, v65));
          v94 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v88 + 12 * a6), v10), v87), v47);
          v89.i32[0] = v57[3];
          v95 = vmlsq_lane_f32(v92, v94, *(float32x2_t *)v89.f32, 0);
          v90.i32[0] = *(_DWORD *)(v58 + 8);
          v89.i32[0] = *(_DWORD *)(v58 + 12);
          v96 = vmlsq_lane_f32(v93, v94, *(float32x2_t *)v89.f32, 0);
          v89.i32[0] = *(_DWORD *)(v59 + 12);
          v97 = vmulq_n_f32(vmlsq_lane_f32(vsubq_f32(v91, v86), v94, *(float32x2_t *)v89.f32, 0), v45);
          v91.i32[0] = v57[1];
          v89.i32[0] = v57[2];
          v98 = vmulq_n_f32(vmlsq_lane_f32(v96, v97, *(float32x2_t *)v90.f32, 0), v43);
          *v88 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v95, v97, *(float32x2_t *)v89.f32, 0), v98, *(float32x2_t *)v91.f32, 0), v41);
          *(float32x4_t *)((char *)v88 + 4 * a6) = v98;
          *(float32x4_t *)((char *)v88 + 8 * a6) = v97;
          *(float32x4_t *)((char *)v88 + 12 * a6) = v94;
          v48 += 4;
        }
        while (v48 < v141);
      }
      v11 = v143;
      if (v48 < v143)
        break;
LABEL_39:
      v37 = v139;
      v9 = v138;
      if (v140 < 5)
        return;
    }
    v99 = v138 + 4 * v139;
    v100 = v138 + 4 * v37;
    v101 = (__int32 *)(v100 + 4 * v137);
    v102 = (__int32 *)(v100 + 4 * v136);
    v103 = v37 * a6;
    v104 = (__int32 *)(v100 + 4 * v135);
    if (a2 - v139 <= 4)
      v105 = 4;
    else
      v105 = a2 - v139;
    v106 = (__int32 *)(v100 + 4 * (v37 - 1) * a4);
    v107 = (float *)(v99 + 4 * v137);
    v108 = v99 + 4 * v136;
    v109 = v99 + 4 * v135;
    while (1)
    {
      v110 = a5 + 4 * v48;
      v111 = (float *)(v110 + 4 * v103);
      v112 = 0uLL;
      if ((v105 & 1) != 0)
      {
        v119.i32[0] = *v101;
        v119.i32[1] = *v102;
        v119.i32[2] = *v104;
        v119.i32[3] = *v106;
        v120 = *v111;
        v111 += a6;
        v113 = v105 - 5;
        v114 = vmlaq_n_f32((float32x4_t)0, v119, v120);
        v115 = (uint64_t *)(v106 + 1);
        v116 = (uint64_t *)(v104 + 1);
        v117 = (uint64_t *)(v102 + 1);
        v118 = (uint64_t *)(v101 + 1);
        if (v105 != 5)
        {
          do
          {
LABEL_37:
            v121 = *v118++;
            v122.i64[0] = v121;
            v123 = *v117++;
            v124.i64[0] = v123;
            v125 = *v116++;
            v126 = v125;
            v127 = *v115++;
            v122.i64[1] = v126;
            v124.i64[1] = v127;
            v114 = vmlaq_n_f32(v114, (float32x4_t)vtrn1q_s32(v122, v124), *v111);
            v112 = vmlaq_n_f32(v112, (float32x4_t)vtrn2q_s32(v122, v124), v111[a6]);
            v111 = (float *)((char *)v111 + v38);
            v113 -= 2;
          }
          while (v113);
        }
      }
      else
      {
        v113 = v105 - 4;
        v114 = 0uLL;
        v115 = (uint64_t *)v106;
        v116 = (uint64_t *)v104;
        v117 = (uint64_t *)v102;
        v118 = (uint64_t *)v101;
        if (v105 != 4)
          goto LABEL_37;
      }
      v128 = vaddq_f32(v114, v112);
      v129 = (float *)(v110 + 4 * v139 * a6);
      v130 = -(float)(v128.f32[0] - (float)(*v129 * v10));
      v128.f32[0] = v47 * (float)-(float)(v128.f32[3] - (float)(v129[3 * a6] * v10));
      v131 = v45
           * (float)((float)-(float)(v128.f32[2] - (float)(v129[2 * a6] * v10))
                   - (float)(v128.f32[0] * *(float *)(v109 + 12)));
      v132 = v43
           * (float)((float)((float)-(float)(v128.f32[1] - (float)(v129[a6] * v10))
                           - (float)(v128.f32[0] * *(float *)(v108 + 12)))
                   - (float)(v131 * *(float *)(v108 + 8)));
      *v129 = v41
            * (float)((float)((float)(v130 - (float)(v128.f32[0] * v107[3])) - (float)(v131 * v107[2]))
                    - (float)(v132 * v107[1]));
      v129[a6] = v132;
      v129[2 * a6] = v131;
      v129[3 * a6] = v128.f32[0];
      ++v48;
      v11 = v143;
      if (v48 == v143)
        goto LABEL_39;
    }
  }
}

_OWORD *sgebpAlignedC_8M4N(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  float32x4_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  float32x4_t v45;
  _OWORD *v49;
  _OWORD *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;

  v8 = _X2;
  v9 = 4 * a4;
  v11 = *(float32x4_t *)a1;
  v12 = *((float32x4_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float32x4_t *)v10;
  v15 = *((float32x4_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v27 = *_X2;
    v28 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v31 = *_X2;
    v32 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    _X2 = v8 + 2;
    v36 = v6;
    v37 = v6;
    v38 = v6;
    v39 = v6;
    v40 = v6;
    v41 = v6;
    v42 = v6;
    v44 = *(float32x4_t *)a2;
    v45 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
    v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
    v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
    v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
    v11 = v14;
    v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
    v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
    v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
    v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
    v12 = v15;
    v14 = *(float32x4_t *)result;
    v15 = *((float32x4_t *)result + 1);
    result += 2;
    v44 = *((float32x4_t *)a2 + 1);
    v45 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v16 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
        v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
        v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
        v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
        v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
        v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
        v11 = *(float32x4_t *)result;
        v12 = *((float32x4_t *)result + 1);
        v49 = result + 2;
        v44 = *(float32x4_t *)_X6;
        v50 = _X6 + 1;
        v6 = vmlaq_n_f32(v6, v14, v45.f32[0]);
        v37 = vmlaq_lane_f32(v37, v14, *(float32x2_t *)v45.f32, 1);
        v39 = vmlaq_laneq_f32(v39, v14, v45, 2);
        v41 = vmlaq_laneq_f32(v41, v14, v45, 3);
        v36 = vmlaq_n_f32(v36, v15, v45.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v45.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v45, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v45, 3);
        v14 = *(float32x4_t *)v49;
        v15 = *((float32x4_t *)v49 + 1);
        result = v49 + 2;
        v45 = *(float32x4_t *)v50;
        _X6 = v50 + 1;
        v16 -= 2;
      }
      while (v16);
      v23 = vaddq_f32(v23, v6);
      v24 = vaddq_f32(v24, v36);
      v27 = vaddq_f32(v27, v37);
      v28 = vaddq_f32(v28, v38);
      v31 = vaddq_f32(v31, v39);
      v32 = vaddq_f32(v32, v40);
      v34 = vaddq_f32(v34, v41);
      v35 = vaddq_f32(v35, v42);
    }
    *v8 = v23;
    v8[1] = v24;
    v51 = (float32x4_t *)((char *)v8 + v9);
    *v51 = v27;
    v51[1] = v28;
    v52 = (float32x4_t *)((char *)v51 + v9);
    *v52 = v31;
    v52[1] = v32;
    v53 = (float32x4_t *)((char *)v52 + v9);
    *v53 = v34;
    v53[1] = v35;
    v8 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t AccelerateAR_sposv_NEWLAPACK(_DWORD *a1, uint64_t a2, int *a3, unsigned int *a4, float *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    sposv_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_sposv(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

void APL_sgemm_noPack_TN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  unint64_t v12;
  BOOL v13;
  uint64_t i;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  const double *v19;
  const double *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  __int32 v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  double v71;
  int32x2_t v72;
  double v73;
  float32x2_t v74;
  __int32 *v75;

  v12 = 4 * a5;
  v13 = a2 <= 1;
  for (i = a2 - 1; !v13; i -= 2)
  {
    v15 = (float32x4_t *)a4;
    v16 = (float32x4_t *)(a4 + v12);
    v17 = (float32x4_t *)(a4 + 2 * v12);
    v18 = (float32x4_t *)(a4 + v12 + 2 * v12);
    v19 = a6;
    v20 = (double *)((char *)a6 + 4 * a7);
    v21 = (float32x4_t *)((char *)a8 + 8 * a12);
    v22 = __OFSUB__(a1, 3);
    v23 = a1 - 3;
    if (a1 > 3)
    {
      do
      {
        v24 = (float32x4_t)veorq_s8(a11, a11);
        v25 = v24;
        v26 = v24;
        v27 = v24;
        v28 = v24;
        v29 = v24;
        v30 = v24;
        v31 = v24;
        v32 = a3 - 3;
        if (a3 > 3)
        {
          v33 = *v15++;
          v34 = v33;
          v35 = *v16++;
          v36 = v35;
          v37 = *v17++;
          v38 = v37;
          v39 = *v18++;
          v40 = v39;
          v41 = *(float32x4_t *)v19;
          v19 += 2;
          v42 = v41;
          v43 = *(float32x4_t *)v20;
          v20 += 2;
          v44 = v43;
          v22 = __OFSUB__(v32, 4);
          v45 = v32 == 4;
          v32 = a3 - 7;
          if (!((a3 - 7 < 0) ^ v22 | v45))
          {
            do
            {
              v24 = vmlaq_f32(v24, v34, v42);
              v25 = vmlaq_f32(v25, v36, v42);
              v26 = vmlaq_f32(v26, v38, v42);
              v27 = vmlaq_f32(v27, v40, v42);
              v46 = *(float32x4_t *)v19;
              v19 += 2;
              v42 = v46;
              v28 = vmlaq_f32(v28, v34, v44);
              v47 = *v15++;
              v34 = v47;
              v29 = vmlaq_f32(v29, v36, v44);
              v48 = *v16++;
              v36 = v48;
              v30 = vmlaq_f32(v30, v38, v44);
              v49 = *v17++;
              v38 = v49;
              v31 = vmlaq_f32(v31, v40, v44);
              v50 = *v18++;
              v40 = v50;
              v51 = *(float32x4_t *)v20;
              v20 += 2;
              v44 = v51;
              v13 = v32 <= 4;
              v32 -= 4;
            }
            while (!v13);
          }
          v24 = vpaddq_f32(vmlaq_f32(v24, v34, v42), vmlaq_f32(v25, v36, v42));
          v25 = vpaddq_f32(vmlaq_f32(v26, v38, v42), vmlaq_f32(v27, v40, v42));
          v26 = vpaddq_f32(vmlaq_f32(v28, v34, v44), vmlaq_f32(v29, v36, v44));
          v27 = vpaddq_f32(vmlaq_f32(v30, v38, v44), vmlaq_f32(v31, v40, v44));
        }
        v13 = v32 <= -2;
        v52 = v32 + 2;
        if (!v13)
        {
          v53 = v15->i64[0];
          v15 = (float32x4_t *)((char *)v15 + 8);
          v54.i64[0] = v53;
          v54.i64[1] = v16->i64[0];
          v16 = (float32x4_t *)((char *)v16 + 8);
          v55 = v17->i64[0];
          v17 = (float32x4_t *)((char *)v17 + 8);
          v56.i64[0] = v55;
          v56.i64[1] = v18->i64[0];
          v18 = (float32x4_t *)((char *)v18 + 8);
          v57 = (float32x4_t)vld1q_dup_f64(v19++);
          v58 = (float32x4_t)vld1q_dup_f64(v20++);
          v24 = vmlaq_f32(v24, v54, v57);
          v25 = vmlaq_f32(v25, v56, v57);
          v26 = vmlaq_f32(v26, v54, v58);
          v27 = vmlaq_f32(v27, v56, v58);
          v52 -= 2;
        }
        v59 = vpaddq_f32(v24, v25);
        v60 = vpaddq_f32(v26, v27);
        if (v52 > -1)
        {
          v61 = v15->i32[0];
          v15 = (float32x4_t *)((char *)v15 + 4);
          v62.i32[0] = v61;
          v62.i32[1] = v16->i32[0];
          v62.i32[2] = v17->i32[0];
          v62.i32[3] = v18->i32[0];
          v59 = vmlaq_n_f32(v59, v62, *(float *)v19);
          v60 = vmlaq_n_f32(v60, v62, *(float *)v20);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v59, a9), *a8, a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v60, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)&v15[v12 / 4] - 4 * a3);
        v16 = (float32x4_t *)((char *)v15 + v12);
        v17 = (float32x4_t *)((char *)v15 + 2 * v12);
        v18 = (float32x4_t *)((char *)v15 + 2 * v12 + v12);
        v22 = __OFSUB__(v23, 4);
        v13 = v23 <= 4;
        v23 -= 4;
      }
      while (!v13);
    }
    v63 = a1 & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_18;
        v65 = v15->f32[0];
        v15 = (float32x4_t *)((char *)v15 + 4);
        v66 = v65;
        v67 = *(_DWORD *)v19;
        v19 = (const double *)((char *)v19 + 4);
        v68.i32[0] = v67;
        v68.i32[1] = *(_DWORD *)v20;
        v20 = (const double *)((char *)v20 + 4);
        *(float32x2_t *)a11.i8 = vmla_n_f32(*(float32x2_t *)a11.i8, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_18:
          do
          {
            v69 = *(float32x2_t *)v15->f32;
            v15 = (float32x4_t *)((char *)v15 + 8);
            v70 = v69;
            v71 = *v19++;
            v72 = *(int32x2_t *)&v71;
            v73 = *v20++;
            *(float32x2_t *)a11.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a11.i8, (float32x2_t)vtrn1_s32(v72, *(int32x2_t *)&v73), v70.f32[0]), (float32x2_t)vtrn2_s32(v72, *(int32x2_t *)&v73), v70, 1);
            v13 = v64 <= 2;
            v64 -= 2;
          }
          while (!v13);
        }
        v74.i32[0] = a8->i32[0];
        v74.i32[1] = a8->i32[a12];
        *(float32x2_t *)a11.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a11.i8, a9), v74, a10);
        v75 = &a8->i32[a12];
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v75 = a11.i32[1];
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)v15 + v12 + -4 * a3);
        v13 = v63-- <= 1;
      }
      while (!v13);
    }
    a6 += a7;
    a8 = v21;
    v13 = i <= 2;
  }
  if (i > -1)
    sgemvT_work(a3, a1, a4, v12 >> 2, a6, 1, a8->f32, 1, a9, a10);
}

uint64_t lapack::hardware::query::cpuFamily(lapack::hardware::query *this)
{
  size_t v2;
  uint64_t v3;

  v2 = 8;
  v3 = 0;
  if (!sysctlbyname("hw.cpufamily", &v3, &v2, 0, 0))
  {
    if (v3 > 1176831185)
    {
      if (v3 <= 2465937351)
      {
        if (v3 == 1176831186)
          return 8;
        if (v3 == 1741614739)
          return 5;
      }
      else
      {
        switch(v3)
        {
          case 2465937352:
            return 4;
          case 3660830781:
            return 10;
          case 3894312694:
            return 6;
        }
      }
    }
    else if (v3 <= 506291072)
    {
      if (v3 == 131287967)
        return 7;
      if (v3 == 458787763)
        return 9;
    }
    else
    {
      switch(v3)
      {
        case 506291073:
          return 1;
        case 747742334:
          return 3;
        case 933271106:
          return 2;
      }
    }
  }
  return 0;
}

uint64_t lapack::hardware::query::cpuSubFamily(lapack::hardware::query *this)
{
  int v1;
  unsigned int v2;
  size_t v4;
  uint64_t v5;

  v4 = 8;
  v5 = 0;
  v1 = sysctlbyname("hw.cpusubfamily", &v5, &v4, 0, 0);
  if ((unint64_t)(v5 - 1) <= 4)
    v2 = v5;
  else
    v2 = 0;
  if (v1)
    return 0;
  else
    return v2;
}

unint64_t queryPlatform@<X0>(lapack::hardware::query *a1@<X0>, uint64_t a2@<X8>)
{
  lapack::hardware::query *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t result;
  size_t v19;
  uint64_t v20;

  v3 = (lapack::hardware::query *)lapack::hardware::query::cpuFamily(a1);
  v4 = (int)v3;
  *(_DWORD *)(a2 + 4) = (_DWORD)v3;
  v5 = lapack::hardware::query::cpuSubFamily(v3);
  *(_DWORD *)(a2 + 8) = v5;
  v19 = 8;
  v20 = 0;
  v6 = sysctlbyname("hw.perflevel0.l2cachesize", &v20, &v19, 0, 0);
  v7 = v20;
  if (v6)
    v7 = 0x800000;
  *(_QWORD *)(a2 + 40) = v7;
  v19 = 8;
  v20 = 0;
  if (sysctlbyname("hw.perflevel0.physicalcpu_max", &v20, &v19, 0, 0))
    v8 = 2;
  else
    v8 = v20;
  *(_DWORD *)(a2 + 12) = v8;
  v19 = 8;
  v20 = 0;
  v9 = sysctlbyname("hw.perflevel0.cpusperl2", &v20, &v19, 0, 0);
  v10 = v20;
  if (v9)
    v10 = 2;
  *(_DWORD *)(a2 + 28) = v10;
  *(_DWORD *)(a2 + 20) = v8 / v10;
  v19 = 8;
  v20 = 0;
  v11 = sysctlbyname("hw.perflevel1.l2cachesize", &v20, &v19, 0, 0);
  v12 = v20;
  if (v11)
    v12 = 0x400000;
  *(_QWORD *)(a2 + 48) = v12;
  v19 = 8;
  v20 = 0;
  if (sysctlbyname("hw.perflevel1.physicalcpu_max", &v20, &v19, 0, 0))
    v13 = 4;
  else
    v13 = v20;
  *(_DWORD *)(a2 + 16) = v13;
  v19 = 8;
  v20 = 0;
  v14 = sysctlbyname("hw.perflevel1.cpusperl2", &v20, &v19, 0, 0);
  v15 = v20;
  if (v14)
    v15 = 4;
  *(_DWORD *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 24) = v13 / v15;
  switch(v4)
  {
    case 8:
      v17 = 1;
      break;
    case 10:
      if ((v5 & 6) == 4)
        v17 = 8;
      else
        v17 = 3;
      break;
    case 9:
      v16 = v5 - 2;
      if (v16 >= 4)
        v17 = 2;
      else
        v17 = dword_1D33076A0[v16];
      break;
    default:
      v17 = 0;
      break;
  }
  *(_DWORD *)a2 = v17;
  result = _get_cpu_capabilities();
  *(_DWORD *)(a2 + 56) = (result >> 59) & 2;
  return result;
}

uint64_t Accelerate_AR_spotrs(uint64_t a1, unsigned int *a2, unsigned int *a3, float *a4, int *a5, char *a6, int *a7, int *a8)
{
  int v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  unsigned int v24;
  int v25;
  int v26;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;

  *a8 = 0;
  v15 = lsame_();
  if (!v15 && !lsame_())
  {
    v26 = -1;
    goto LABEL_15;
  }
  v24 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v26 = -2;
    goto LABEL_15;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v26 = -3;
    goto LABEL_15;
  }
  if (v24 <= 1)
    v25 = 1;
  else
    v25 = *a2;
  if (*a5 < v25)
  {
    v26 = -5;
LABEL_15:
    *a8 = v26;
LABEL_16:
    xerbla_();
    return 0;
  }
  if (*a7 < v25)
  {
    v26 = -7;
    goto LABEL_15;
  }
  if (*a8)
    goto LABEL_16;
  if (v24 && *a3)
  {
    if (v15)
    {
      Accelerate_AR_strsm("Left", "Upper", "Transpose", "Non-unit", a2, a3, &c_b9, a4, v16, v17, v18, v19, v20, v21, v22, v23, a5, a6, a7);
      Accelerate_AR_strsm("Left", "Upper", "No transpose", "Non-unit", a2, a3, &c_b9, a4, v28, v29, v30, v31, v32, v33, v34, v35, a5, a6, a7);
    }
    else
    {
      Accelerate_AR_strsm("Left", "Lower", "No transpose", "Non-unit", a2, a3, &c_b9, a4, v16, v17, v18, v19, v20, v21, v22, v23, a5, a6, a7);
      Accelerate_AR_strsm("Left", "Lower", "Transpose", "Non-unit", a2, a3, &c_b9, a4, v36, v37, v38, v39, v40, v41, v42, v43, a5, a6, a7);
    }
  }
  return 0;
}

uint64_t dgePack_A_NoTran_Aligned(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v18;

  v5 = a2;
  _X3 = 8 * a4;
  v7 = _X2 + 4;
  do
  {
    do
    {
      v9 = *_X2;
      v10 = _X2[1];
      v8 = _X2 + 2;
      v11 = *v8;
      v12 = v8[1];
      _X2 = (__int128 *)((char *)v8 + _X3 - 32);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v9;
      a5[1] = v10;
      v18 = a5 + 2;
      *v18 = v11;
      v18[1] = v12;
      a5 = v18 + 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 4;
  }
  while (result);
  return result;
}

void sgebpScale_1M1N(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N, float a8)
{
  int v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  if (a5 >= 1)
  {
    v9 = __N;
    v10 = a5;
    v14 = __N & 3;
    if (__N <= 0)
      v14 = -(-__N & 3);
    v15 = __N - v14 + 4;
    if ((__N & 3) == 0)
      v15 = __N;
    v16 = 4 * v15;
    do
    {
      v17 = *a3;
      *a3++ = cblas_sdot(v9, __X, 1, __Y, 1) + (float)(a8 * v17);
      __X = (const float *)((char *)__X + v16);
      --v10;
    }
    while (v10);
  }
}

float sgebp_1M1N(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N)
{
  int v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  if (a5 >= 1)
  {
    v7 = __N;
    v8 = a5;
    v12 = __N & 3;
    if (__N <= 0)
      v12 = -(-__N & 3);
    v13 = __N - v12 + 4;
    if ((__N & 3) == 0)
      v13 = __N;
    v14 = 4 * v13;
    do
    {
      result = cblas_sdot(v7, __X, 1, __Y, 1) + *a3;
      *a3++ = result;
      __X = (const float *)((char *)__X + v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void sgebpScale_8M1N(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, float a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;

  if (__N >= 1 && a6 >= 1)
  {
    v15 = 0;
    v16 = a5 - 7;
    if (a5 <= 0)
      v17 = -(-a5 & 7);
    else
      v17 = a5 & 7;
    v18 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = (float32x4_t *)(a3 + 4 * v15 * a4);
      if (a5 < 8)
      {
        v21 = a1;
        if (!v17)
          goto LABEL_14;
      }
      else
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v22 = __Y;
          v23 = __N;
          v24 = vmulq_n_f32(*v19, a8);
          v25 = vmulq_n_f32(v19[1], a8);
          do
          {
            v26 = *v22++;
            v27 = *v21;
            v28 = v21[1];
            v21 += 2;
            v24 = vmlaq_n_f32(v24, v27, v26);
            v25 = vmlaq_n_f32(v25, v28, v26);
            --v23;
          }
          while (v23);
          *v19 = v24;
          v19[1] = v25;
          v19 += 2;
          v20 += 8;
        }
        while (v20 < v16);
        if (!v17)
          goto LABEL_14;
      }
      sgebpScale_1M1N(v21->f32, __Y, v19->f32, a4, v17, a6, __N, a8);
LABEL_14:
      __Y += v18;
      ++v15;
    }
    while (v15 != a6);
  }
}

void sgebp_8M1N(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  const float *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;

  if (__N >= 1 && a6 >= 1)
  {
    v13 = 0;
    v14 = a5 - 7;
    if (a5 <= 0)
      v15 = -(-a5 & 7);
    else
      v15 = a5 & 7;
    v16 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = (float32x4_t *)(a3 + 4 * v13 * a4);
      if (a5 < 8)
      {
        v19 = a1;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        v18 = 0;
        v19 = a1;
        do
        {
          v20 = __Y;
          v21 = __N;
          v22 = *v17;
          v23 = v17[1];
          do
          {
            v24 = *v20++;
            v25 = *v19;
            v26 = v19[1];
            v19 += 2;
            v22 = vmlaq_n_f32(v22, v25, v24);
            v23 = vmlaq_n_f32(v23, v26, v24);
            --v21;
          }
          while (v21);
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
          v18 += 8;
        }
        while (v18 < v14);
        if (!v15)
          goto LABEL_14;
      }
      sgebp_1M1N(v19->f32, __Y, v17->f32, a4, v15, a6, __N);
LABEL_14:
      __Y += v16;
      ++v13;
    }
    while (v13 != a6);
  }
}

float *sgebpScale_1M4N(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  __int32 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  __int32 *v17;
  __int32 *v18;

  if (a5 >= 1)
  {
    v7 = a4;
    if (a6 <= 0)
      v8 = -(-a6 & 3);
    else
      v8 = a6 & 3;
    v9 = 4 - v8;
    if (!v8)
      v9 = 0;
    do
    {
      v10 = a2;
      v11 = a6;
      v12.i32[0] = *a3;
      v13 = &a3[v7 + v7];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v13;
      v12.i32[3] = v13[a4];
      v14 = vmulq_n_f32(v12, a7);
      do
      {
        v15 = *v10++;
        v16 = *result++;
        v14 = vmlaq_n_f32(v14, v15, v16);
        --v11;
      }
      while (v11);
      v17 = &a3[v7];
      *a3++ = v14.i32[0];
      *v17 = v14.i32[1];
      v18 = &v17[v7];
      *v18 = v14.i32[2];
      v18[a4] = v14.i32[3];
      result += v9;
      --a5;
    }
    while (a5);
  }
  return result;
}

float *sgebp_1M4N(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  __int32 *v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 *v15;
  __int32 *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    if (a6 <= 0)
      v7 = -(-a6 & 3);
    else
      v7 = a6 & 3;
    v8 = 4 - v7;
    if (!v7)
      v8 = 0;
    do
    {
      v9 = a2;
      v10 = a6;
      v12.i32[0] = *a3;
      v11 = &a3[v6 + v6];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v11;
      v12.i32[3] = v11[a4];
      do
      {
        v13 = *v9++;
        v14 = *result++;
        v12 = vmlaq_n_f32(v12, v13, v14);
        --v10;
      }
      while (v10);
      v15 = &a3[v6];
      *a3++ = v12.i32[0];
      *v15 = v12.i32[1];
      v16 = &v15[v6];
      *v16 = v12.i32[2];
      v16[a4] = v12.i32[3];
      result += v8;
      --a5;
    }
    while (a5);
  }
  return result;
}

#error "1D32E8510: call analysis failed (funcsize=189)"

void APL_seq_sgemm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, __n128 a9, __n128 a10, int8x16_t a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, char *a18, uint64_t a19)
{
  unsigned __int32 v20;
  float32x4_t *v23;
  float v24;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char v48;

  if (!a3 || !a4)
    return;
  v20 = a10.n128_u32[0];
  v23 = (float32x4_t *)a18;
  if (a5)
  {
    v24 = a9.n128_f32[0];
    if (a9.n128_f32[0] != 0.0)
    {
      v30 = a17;
      if (a5 == 1)
      {
        if (a10.n128_f32[0] == 0.0)
        {
          v31 = a17;
          sgeSetZero(a3, a4, a18, a19);
        }
        else
        {
          if (a10.n128_f32[0] == 1.0)
          {
LABEL_31:
            if ((_DWORD)a1 == 114 || (_DWORD)a1 == 111)
              v35 = 1;
            else
              v35 = a7;
            if ((_DWORD)a2 != 114 && (_DWORD)a2 != 111)
              LODWORD(v30) = 1;
            cblas_sger(CblasColMajor, a3, a4, v24, a6->f32, v35, (const float *)a8, v30, (float *)a18, a19);
            return;
          }
          v31 = a17;
          sgeScale(a3, a4, (float *)a18, a19, a10.n128_f32[0]);
        }
        LODWORD(v30) = v31;
        goto LABEL_31;
      }
      if (a10.n128_f32[0] == 0.0)
      {
        v37 = (uint64_t)a18;
        sgeSetZero(a3, a4, a18, a19);
        v30 = a17;
        v23 = (float32x4_t *)a18;
      }
      a12.n128_f64[0] = (double)a4 / (double)a3;
      *(double *)a11.i64 = fmax((double)a3 / (double)a4, a12.n128_f64[0]);
      a9.n128_f64[0] = (double)a3 * (double)a4 * (double)a5;
      if (*(double *)a11.i64 <= 4.0)
      {
        v32 = a9.n128_f64[0] < 4096.0 || a5 <= 31;
        a10.n128_u32[1] = 1091567616;
        if (v32 && a9.n128_f64[0] < 262144.0)
          goto LABEL_14;
      }
      else
      {
        a10.n128_u32[1] = 1091567616;
        if (a9.n128_f64[0] < 262144.0)
        {
LABEL_14:
          if ((_DWORD)a2 == 111)
          {
            if ((_DWORD)a1 == 111)
              APL_sgemm_noPack_NN(a3, a4, a5, a6, a7, a8, v30, v23, v24, *(float *)&v20, a11, a19);
            else
              APL_sgemm_noPack_TN(a3, a4, a5, (uint64_t)a6, a7, (double *)a8, v30, v23, v24, *(float *)&v20, a11, a19);
          }
          else if ((_DWORD)a1 == 111)
          {
            APL_sgemm_noPack_NT(a3, a4, a5, a6, a7, (float32x4_t *)a8, v30, v23, v24, *(float *)&v20, a11, a19);
          }
          else
          {
            APL_sgemm_noPack_TT(a3, a4, a5, a6->f32, a7, a8, v30, v23, v24, *(float *)&v20, a11, a19);
          }
          return;
        }
      }
      a9.n128_f32[0] = v24;
      a10.n128_u32[0] = v20;
      sgemm_repack(a1, a2, a3, a4, a5, (uint64_t)a6, a7, (int)a8, a9, a10, (__n128)a11, a12, a13, a14, a15, a16, v30, (uint64_t)v23, a19,
        0,
        0,
        v37,
        v38,
        v39,
        v40,
        v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        SWORD2(v47),
        SHIWORD(v47),
        v48);
      return;
    }
  }
  if (a10.n128_f32[0] == 0.0)
  {
    sgeSetZero(a3, a4, a18, a19);
  }
  else if (a10.n128_f32[0] != 1.0)
  {
    sgeScale(a3, a4, (float *)a18, a19, a10.n128_f32[0]);
  }
}

#error "1D32E8E38: call analysis failed (funcsize=366)"

_OWORD *sgebpScaleAlignedC_8M4N(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t *v9;
  uint64_t v10;
  _OWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _OWORD *result;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  _OWORD *v58;
  _OWORD *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;

  v9 = _X2;
  v10 = 4 * a4;
  v12 = *(float32x4_t *)a1;
  v13 = *((float32x4_t *)a1 + 1);
  v11 = a1 + 2;
  v15 = *(float32x4_t *)v11;
  v16 = *((float32x4_t *)v11 + 1);
  result = v11 + 2;
  do
  {
    v17 = a6;
    v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
    __asm { PRFM            #1, [X2,#0x40] }
    v24 = *_X2;
    v25 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v32 = *_X2;
    v33 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    _X2 = v9 + 2;
    v37 = v7;
    v38 = v7;
    v39 = v7;
    v40 = v7;
    v41 = v7;
    v42 = v7;
    v43 = v7;
    v45 = *(float32x4_t *)a2;
    v46 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v50 = vmulq_n_f32(v24, a7);
    v51 = vmulq_n_f32(v25, a7);
    v52 = vmulq_n_f32(v28, a7);
    v53 = vmulq_n_f32(v29, a7);
    v54 = vmulq_n_f32(v32, a7);
    v55 = vmulq_n_f32(v33, a7);
    v56 = vmulq_n_f32(v35, a7);
    v57 = vmulq_n_f32(v36, a7);
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
    v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
    v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
    v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
    v12 = v15;
    v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
    v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
    v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
    v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
    v13 = v16;
    v15 = *(float32x4_t *)result;
    v16 = *((float32x4_t *)result + 1);
    result += 2;
    v45 = *((float32x4_t *)a2 + 1);
    v46 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v17 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
        v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
        v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
        v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
        v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
        v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
        v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
        v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
        v12 = *(float32x4_t *)result;
        v13 = *((float32x4_t *)result + 1);
        v58 = result + 2;
        v45 = *(float32x4_t *)_X6;
        v59 = _X6 + 1;
        v7 = vmlaq_n_f32(v7, v15, v46.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v46.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v46, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v46, 3);
        v37 = vmlaq_n_f32(v37, v16, v46.f32[0]);
        v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v46.f32, 1);
        v41 = vmlaq_laneq_f32(v41, v16, v46, 2);
        v43 = vmlaq_laneq_f32(v43, v16, v46, 3);
        v15 = *(float32x4_t *)v58;
        v16 = *((float32x4_t *)v58 + 1);
        result = v58 + 2;
        v46 = *(float32x4_t *)v59;
        _X6 = v59 + 1;
        v17 -= 2;
      }
      while (v17);
      v50 = vaddq_f32(v50, v7);
      v51 = vaddq_f32(v51, v37);
      v52 = vaddq_f32(v52, v38);
      v53 = vaddq_f32(v53, v39);
      v54 = vaddq_f32(v54, v40);
      v55 = vaddq_f32(v55, v41);
      v56 = vaddq_f32(v56, v42);
      v57 = vaddq_f32(v57, v43);
    }
    *v9 = v50;
    v9[1] = v51;
    v60 = (float32x4_t *)((char *)v9 + v10);
    *v60 = v52;
    v60[1] = v53;
    v61 = (float32x4_t *)((char *)v60 + v10);
    *v61 = v54;
    v61[1] = v55;
    v62 = (float32x4_t *)((char *)v61 + v10);
    *v62 = v56;
    v62[1] = v57;
    v9 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t Accelerate_AR_sgemm(char *a1, char *a2, int *a3, int *a4, int *a5, uint64_t a6, int a7, int *a8, uint64_t a9, int *a10, uint64_t a11, int a12, int a13, int *a14)
{
  unsigned int v14;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v21;

  v14 = *a1 - 67;
  if (v14 > 0x31)
    goto LABEL_12;
  if (((1 << v14) & 0x2000100020001) != 0)
  {
    v16 = 112;
    goto LABEL_6;
  }
  if (((1 << v14) & 0x80000000800) == 0)
  {
LABEL_12:
    v19 = 1;
LABEL_14:
    printf("** On entry to %6s, parameter number %2i had an illegal value\n", "SGEMM ", v19);
    return 0;
  }
  v16 = 111;
LABEL_6:
  v17 = *a2 - 67;
  if (v17 > 0x31)
  {
LABEL_13:
    v19 = 2;
    goto LABEL_14;
  }
  if (((1 << v17) & 0x2000100020001) == 0)
  {
    if (((1 << v17) & 0x80000000800) != 0)
    {
      v18 = 111;
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  v18 = 112;
LABEL_11:
  cblas_sgemm_sequential(102, v16, v18, *a3, *a4, *a5, a7, *a8, a9, *a10, v21, a12, a13, *a14);
  return 0;
}

uint64_t Accelerate_AR_strsm(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, unsigned __int32 *a7, float *a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, int *a17, char *a18, int *a19)
{
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v21 = *a1;
  v22 = 141;
  if (v21 > 107)
  {
    if (v21 == 108)
      goto LABEL_8;
    if (v21 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v21 == 76)
      goto LABEL_8;
    if (v21 != 82)
    {
LABEL_4:
      v23 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "STRSM ", v23);
      return 0;
    }
  }
  v22 = 142;
LABEL_8:
  v24 = *a2;
  v25 = 122;
  if (v24 > 107)
  {
    if (v24 != 108)
    {
      if (v24 != 117)
        goto LABEL_11;
LABEL_14:
      v25 = 121;
    }
  }
  else if (v24 != 76)
  {
    if (v24 != 85)
    {
LABEL_11:
      v23 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v26 = *a3 - 67;
  if (v26 > 0x31)
    goto LABEL_28;
  if (((1 << v26) & 0x2000100020001) != 0)
  {
    v27 = 112;
    goto LABEL_20;
  }
  if (((1 << v26) & 0x80000000800) == 0)
  {
LABEL_28:
    v23 = 3;
    goto LABEL_29;
  }
  v27 = 111;
LABEL_20:
  v28 = *a4;
  v29 = 131;
  if (v28 > 109)
  {
    if (v28 != 110)
    {
      if (v28 != 117)
        goto LABEL_23;
LABEL_26:
      v29 = 132;
    }
  }
  else if (v28 != 78)
  {
    if (v28 != 85)
    {
LABEL_23:
      v23 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  a9.n128_u32[0] = *a7;
  cblas_strsm_sequential(102, v22, v25, v27, v29, *a5, *a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, *a17, a18, *a19);
  return 0;
}

uint64_t Accelerate_AR_ssyrk(char *a1, char *a2, unsigned int *a3, unsigned int *a4, float *a5, uint64_t a6, unsigned int *a7, float *a8, uint64_t a9, _DWORD *a10)
{
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v11 = *a1;
  v12 = 122;
  if (v11 > 107)
  {
    if (v11 == 108)
      goto LABEL_8;
    if (v11 != 117)
      goto LABEL_4;
  }
  else
  {
    if (v11 == 76)
      goto LABEL_8;
    if (v11 != 85)
    {
LABEL_4:
      v13 = 1;
LABEL_15:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "SSYRK ", v13);
      return 0;
    }
  }
  v12 = 121;
LABEL_8:
  v14 = *a2 - 67;
  if (v14 > 0x31)
    goto LABEL_14;
  if (((1 << v14) & 0x2000100020001) == 0)
  {
    if (((1 << v14) & 0x80000000800) != 0)
    {
      v15 = 111;
      goto LABEL_13;
    }
LABEL_14:
    v13 = 2;
    goto LABEL_15;
  }
  v15 = 112;
LABEL_13:
  cblas_ssyrk_sequential(102, v12, v15, *a3, *a4, a6, *a7, a9, *a5, *a8, *a10);
  return 0;
}

uint64_t Accelerate_AR_spotf2(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  double v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float sa;
  int v32;
  int n;

  sa = 0.0;
  v32 = 0;
  v9 = *a4;
  *a5 = 0;
  v10 = lsame_();
  if (!v10 && !lsame_())
  {
    v13 = -1;
    goto LABEL_21;
  }
  v11 = *a2;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = -2;
    goto LABEL_21;
  }
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = *a2;
  if (*a4 < v12)
  {
    v13 = -4;
LABEL_21:
    *a5 = v13;
    goto LABEL_22;
  }
  v13 = *a5;
  if (*a5)
  {
LABEL_22:
    n = -v13;
    xerbla_();
    return 0;
  }
  if ((_DWORD)v11)
  {
    v14 = a3 + 4 * ~(_DWORD)v9;
    if (v10)
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v16 = v15 + (int)v9 * (int)v15;
        v17 = *(float *)(v14 + 4 * v16);
        v18 = (float *)(v14 + 4 * v15 * v9 + 4);
        v19 = v17 - sdot_(&n, v18, &c__1, v18, &c__1);
        if (v19 <= 0.0)
          break;
        v20 = sqrtf(v19);
        *(float *)(v14 + 4 * v16) = v20;
        v21 = *a2;
        if (v15 >= v21)
        {
          v22 = v15 + 1;
        }
        else
        {
          v32 = v21 - v15;
          n = v15 - 1;
          v22 = v15 + 1;
          Accelerate_AR_sgemv("Transpose", &n, &v32, &c_b10, v14 + 4 * (v15 + 1) * v9 + 4, a4, v18, &c__1, &c_b12, v14 + 4 * (v15 + (int)v9 + (int)v9 * (int)v15), a4);
          n = *a2 - v15;
          sa = 1.0 / v20;
          sscal_(&n, &sa, (float *)(v14 + 4 * (v15 + (int)v9 + (int)v9 * (int)v15)), a4);
        }
        v23 = v15 < v11;
        v15 = v22;
        if (!v23)
          return 0;
      }
      *(float *)(v14 + 4 * v16) = v19;
    }
    else
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v25 = v15 + (int)v9 * (int)v15;
        v26 = *(float *)(v14 + 4 * v25);
        v27 = v26 - sdot_(&n, (float *)(v14 + 4 * (v15 + v9)), a4, (float *)(v14 + 4 * (v15 + v9)), a4);
        if (v27 <= 0.0)
          break;
        v28 = sqrtf(v27);
        *(float *)(v14 + 4 * v25) = v28;
        v29 = *a2;
        if (v15 >= v29)
        {
          v30 = v15 + 1;
        }
        else
        {
          v32 = v15 - 1;
          n = v29 - v15;
          v30 = v15 + 1;
          Accelerate_AR_sgemv("No transpose", &n, &v32, &c_b10, v14 + 4 * (v15 + 1 + v9), a4, v14 + 4 * (v15 + v9), a4, &c_b12, v14 + 4 * (v15 + 1 + v15 * v9), &c__1);
          n = *a2 - v15;
          sa = 1.0 / v28;
          sscal_(&n, &sa, (float *)(v14 + 4 * (v15 + 1 + v15 * v9)), &c__1);
        }
        v23 = v15 < v11;
        v15 = v30;
        if (!v23)
          return 0;
      }
      *(float *)(v14 + 4 * v25) = v27;
    }
    *a5 = v15;
  }
  return 0;
}

double *dgebpScaleUnalignedC_8M4N(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      v27 = _X2[2];
      v28 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v31 = *_X2;
      v32 = _X2[1];
      v33 = _X2[2];
      v34 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      v39 = _X2[2];
      v40 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v43 = *a2;
      v44 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v48 = vmulq_n_f64(v25, a7);
      v49 = vmulq_n_f64(v26, a7);
      v50 = vmulq_n_f64(v27, a7);
      v51 = vmulq_n_f64(v28, a7);
      v52 = vmulq_n_f64(v31, a7);
      v53 = vmulq_n_f64(v32, a7);
      v54 = vmulq_n_f64(v33, a7);
      v55 = vmulq_n_f64(v34, a7);
      v56 = vmulq_n_f64(v37, a7);
      v57 = vmulq_n_f64(v38, a7);
      v58 = vmulq_n_f64(v39, a7);
      v59 = vmulq_n_f64(v40, a7);
      v60 = vmulq_n_f64(*_X2, a7);
      v61 = vmulq_n_f64(_X2[1], a7);
      v62 = vmulq_n_f64(_X2[2], a7);
      v63 = vmulq_n_f64(_X2[3], a7);
      do
      {
        v64 = v14;
        v65 = v15;
        v48 = vmlaq_n_f64(v48, v14, v43.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v14, v43, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v66 = (float64x2_t *)(result + 4);
        v56 = vmlaq_n_f64(v56, v64, v44.f64[0]);
        v60 = vmlaq_laneq_f64(v60, v64, v44, 1);
        v67 = *_X6;
        v68 = _X6[1];
        _X6 += 2;
        v69 = v16;
        v49 = vmlaq_n_f64(v49, v65, v43.f64[0]);
        v53 = vmlaq_laneq_f64(v53, v65, v43, 1);
        v70 = v17;
        v57 = vmlaq_n_f64(v57, v65, v44.f64[0]);
        v61 = vmlaq_laneq_f64(v61, v65, v44, 1);
        v16 = *v66;
        v17 = v66[1];
        result = v66[2].f64;
        v50 = vmlaq_n_f64(v50, v69, v43.f64[0]);
        v54 = vmlaq_laneq_f64(v54, v69, v43, 1);
        v58 = vmlaq_n_f64(v58, v69, v44.f64[0]);
        v62 = vmlaq_laneq_f64(v62, v69, v44, 1);
        v51 = vmlaq_n_f64(v51, v70, v43.f64[0]);
        v55 = vmlaq_laneq_f64(v55, v70, v43, 1);
        v43 = v67;
        v59 = vmlaq_n_f64(v59, v70, v44.f64[0]);
        v63 = vmlaq_laneq_f64(v63, v70, v44, 1);
        v44 = v68;
        --v18;
      }
      while (v18);
      v71 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v48;
      v11[1] = v49;
      v11[2] = v50;
      v11[3] = v51;
      v11 += 4;
      *v71 = v52;
      v71[1] = v53;
      v71[2] = v54;
      v71[3] = v55;
      v72 = (float64x2_t *)((char *)v71 + v12);
      *v72 = v56;
      v72[1] = v57;
      v72[2] = v58;
      v72[3] = v59;
      v73 = (float64x2_t *)((char *)v72 + v12);
      *v73 = v60;
      v73[1] = v61;
      v73[2] = v62;
      v73[3] = v63;
      _X2 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return dgebpScale_1M4N(result - 8, a2, _X2->f64, a4, v8, a6, a7);
  return result;
}

uint64_t APL_sgemm_noPack_TT(uint64_t result, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, _OWORD *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int32 *v75;
  float32x4_t v76;
  __int32 *v77;
  __int32 *v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  uint64_t k;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  __int32 v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t v103;
  __int32 *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  __int32 *v111;

  v12 = 4 * a5;
  v13 = a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = &a4[(unint64_t)v12 / 4];
    v19 = &a4[(unint64_t)v12 / 2];
    v20 = &a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v21 = (float32x4_t *)a6;
    v22 = &a8[a12];
    v23 = __OFSUB__(result, 3);
    v24 = result - 3;
    if (result > 3)
    {
      do
      {
        v25 = a3;
        v26 = (float32x4_t)veorq_s8(a11, a11);
        v27 = v26;
        v28 = v26;
        v29 = v26;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v30 = *v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = v32;
        v34 = *v19++;
        v35 = v34;
        v36 = *v20++;
        v37 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v14);
        v26 = vmlaq_n_f32(v26, v37, v31);
        v27 = vmlaq_n_f32(v27, v37, v33);
        v28 = vmlaq_n_f32(v28, v37, v35);
        v29 = vmlaq_n_f32(v29, v37, v36);
        v25 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v38 = *v21;
          v39 = *(float32x4_t *)((char *)v21 + v14);
          v40 = *(float32x2_t *)v17;
          v17 += 2;
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v15 = v25 <= 2;
          for (j = v25 - 2; !v15; j -= 2)
          {
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v52 = vmlaq_n_f32(v26, v38, v41.f32[0]);
            v53 = vmlaq_n_f32(v27, v38, v44.f32[0]);
            v54 = vmlaq_n_f32(v28, v38, v47.f32[0]);
            v55 = vmlaq_n_f32(v29, v38, v50.f32[0]);
            v38 = *v21;
            v26 = vmlaq_lane_f32(v52, v39, v41, 1);
            v56 = *(float32x2_t *)v17;
            v17 += 2;
            v41 = v56;
            v27 = vmlaq_lane_f32(v53, v39, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v28 = vmlaq_lane_f32(v54, v39, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v29 = vmlaq_lane_f32(v55, v39, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v39 = *(float32x4_t *)((char *)v21 + v14);
            v15 = j <= 2;
          }
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v38, v41.f32[0]), v39, v41, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v38, v44.f32[0]), v39, v44, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v38, v47.f32[0]), v39, v47, 1);
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v38, v50.f32[0]), v39, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        v61 = vzip1q_s32((int32x4_t)v26, (int32x4_t)v28);
        v62 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v28);
        v63 = vzip1q_s32((int32x4_t)v27, (int32x4_t)v29);
        v64 = vzip2q_s32((int32x4_t)v27, (int32x4_t)v29);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v61, v63), a9), *a8, a10);
        v65 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v62, v64), a9), *v60, a10);
        v66 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v62, v64), a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v61, v63), a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v65;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v66;
        v21 = (float32x4_t *)a6;
        v17 = &v17[v12 - a3];
        v18 = &v17[(unint64_t)v12 / 4];
        v19 = &v17[(unint64_t)v12 / 2];
        v20 = &v17[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v23 = __OFSUB__(v24, 4);
        v15 = v24 <= 4;
        v24 -= 4;
      }
      while (!v15);
    }
    v67 = result & 3;
    if (!v23 && v67 != 0)
    {
      do
      {
        v68 = a3;
        v69 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v70 = *v17,
              ++v17,
              v71 = *v21,
              v21 = (float32x4_t *)((char *)v21 + v14),
              v69 = vmlaq_n_f32(v69, v71, v70),
              v68 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v72 = *(float32x2_t *)v17;
            v17 += 2;
            v73 = *v21;
            v74 = *(float32x4_t *)((char *)v21 + v14);
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v69 = vmlaq_lane_f32(vmlaq_n_f32(v69, v73, v72.f32[0]), v74, v72, 1);
            v15 = v68 <= 2;
            v68 -= 2;
          }
          while (!v15);
        }
        v76.i32[0] = a8->i32[0];
        v75 = (__int32 *)((char *)a8 + v13 * 4);
        v76.i32[1] = *v75;
        v77 = &v75[v13];
        v76.i32[2] = *v77;
        v78 = &v77[v13];
        v76.i32[3] = *v78;
        v79 = &v78[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v69, a9), v76, a10);
        v80 = &v79[v13];
        *v79 = a11.i32[0];
        a8 = (float32x4_t *)(v79 + 1);
        *v80 = a11.i32[1];
        v81 = &v80[v13];
        *v81 = a11.i32[2];
        v81[a12] = a11.i32[3];
        v21 = (float32x4_t *)a6;
        v17 = &v17[(unint64_t)v12 / 4 - a3];
        v15 = v67-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v22;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v83 = (__int32 *)a4;
    v84 = (__int32 *)&a4[(unint64_t)v12 / 4];
    v85 = (__int32 *)&a4[(unint64_t)v12 / 2];
    v86 = (__int32 *)&a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v87 = (__int32 *)a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_25;
        v93 = *v83++;
        v94.i32[0] = v93;
        v94.i32[1] = *v84++;
        v94.i32[2] = *v85++;
        v94.i32[3] = *v86++;
        v95 = *v87;
        v87 = (__int32 *)((char *)v87 + v14);
        v92 = vmlaq_n_f32(v92, v94, *(float *)&v95);
        v91 = a3 - 1;
        if (a3 > 1)
        {
LABEL_25:
          do
          {
            v96 = *(_QWORD *)v83;
            v83 += 2;
            v97.i64[0] = v96;
            v98 = *(_QWORD *)v84;
            v84 += 2;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v85;
            v85 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v86;
            v86 += 2;
            v103.i32[0] = *v87;
            v104 = &v87[(unint64_t)v14 / 4];
            v103.i32[1] = *v104;
            v87 = &v104[(unint64_t)v14 / 4];
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, (float32x4_t)vtrn1q_s32(v97, v99), v103.f32[0]), (float32x4_t)vtrn2q_s32(v97, v99), v103, 1);
            v15 = v91 <= 2;
            v91 -= 2;
          }
          while (!v15);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = (__int32 *)a6;
        v83 = &v83[v12 - a3];
        v84 = &v83[(unint64_t)v12 / 4];
        v85 = &v83[(unint64_t)v12 / 2];
        v86 = &v83[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v89 = __OFSUB__(v90, 4);
        v15 = v90 <= 4;
        v90 -= 4;
      }
      while (!v15);
    }
    v105 = result & 3;
    if (!v89 && v105 != 0)
    {
      do
      {
        v106 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v107 = *(float *)v83,
              ++v83,
              v108 = *(float *)v87,
              v87 = (__int32 *)((char *)v87 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v108, v107),
              v106 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v109 = *(float32x2_t *)v83;
            v83 += 2;
            v110.i32[0] = *v87;
            v111 = &v87[(unint64_t)v14 / 4];
            v110.i32[1] = *v111;
            v87 = &v111[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v110, v109);
            v15 = v106 <= 2;
            v106 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = (__int32 *)a6;
        v83 = &v83[(unint64_t)v12 / 4 - a3];
        v15 = v105-- <= 1;
      }
      while (!v15);
    }
    a6 = (_OWORD *)((char *)a6 + 4);
    a8 = v88;
    v15 = k <= 1;
  }
  return result;
}

uint64_t strsm_block_LLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v15 = strsm_noPack_LLTN;
  if ((_DWORD)result == 132)
    v15 = strsm_noPack_LLTU;
  v37 = v15;
  if ((int)a2 >= 1)
  {
    v18 = a8.n128_u32[0];
    v30 = a3 << 32;
    v36 = a7 << 8;
    v20 = 1;
    v21 = a2;
    do
    {
      LODWORD(v22) = v21 - 64;
      if (v21 >= 0x40)
        v22 = v22;
      else
        v22 = 0;
      v34 = v22;
      if (a3 >= 1)
      {
        v23 = 0;
        v24 = (char *)(a6 + 4 * v22);
        v25 = a4 + 4 * v22 * a5;
        if (v21 >= 0x40)
          v26 = 64;
        else
          v26 = v21;
        v27 = v25 + 4 * v34;
        v35 = (float32x4_t *)(v25 + 4 * (v34 + v26));
        v28 = v30;
        do
        {
          v23 += 64;
          if (v23 <= a3)
            v29 = 64;
          else
            v29 = v28 >> 32;
          a8.n128_u32[0] = v18;
          if ((v20 & 1) == 0)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(112, 111, v26, v29, a2 - (v26 + v34), v35, a5, (float32x2_t *)&v24[4 * v26], a8, a9, a10, a11, a12, a13, a14, a15, a7, v24, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v37)(v26, v29, v27, a5, v24, a7, a8);
          v28 -= 0x4000000000;
          v24 += v36;
        }
        while (v23 < a3);
      }
      v20 = 0;
      v21 = v34;
    }
    while ((int)v34 >= 1);
  }
  return result;
}

uint64_t strsm_block_LLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LLNN;
  if ((_DWORD)result == 132)
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LLNU;
  v33 = v15;
  if (a2 >= 1)
  {
    v18 = a8.n128_u32[0];
    v20 = 0;
    v21 = 0;
    v27 = a3 << 32;
    v32 = a7 << 8;
    do
    {
      v31 = v21 + 32;
      if (a3 >= 1)
      {
        v22 = 0;
        v23 = a6;
        if (v31 <= a2)
          v24 = 32;
        else
          v24 = (int)a2 - (int)v21;
        v25 = v27;
        do
        {
          v22 += 64;
          if (v22 <= a3)
            v26 = 64;
          else
            v26 = v25 >> 32;
          a8.n128_u32[0] = v18;
          if (v21)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(111, 111, v24, v26, v21, (float32x4_t *)(a4 + 4 * v21), a5, v23, a8, a9, a10, a11, a12, a13, a14, a15, a7, (char *)&v23[v20], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v33(v24, v26, a4 + 4 * v21 + 4 * v21 * a5, a5, &v23[v20], a7, a8);
          v25 -= 0x4000000000;
          v23 = (float32x2_t *)((char *)v23 + v32);
        }
        while (v22 < a3);
      }
      v20 += 16;
      v21 += 32;
    }
    while (v31 < a2);
  }
  return result;
}

uint64_t strsm_block_LUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LUTN;
  if ((_DWORD)result == 132)
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LUTU;
  v33 = v15;
  if (a2 >= 1)
  {
    v18 = a8.n128_u32[0];
    v20 = 0;
    v21 = 0;
    v27 = a3 << 32;
    v32 = a7 << 8;
    do
    {
      v31 = v21 + 64;
      if (a3 >= 1)
      {
        v22 = 0;
        v23 = a6;
        if (v31 <= a2)
          v24 = 64;
        else
          v24 = (int)a2 - (int)v21;
        v25 = v27;
        do
        {
          v22 += 64;
          if (v22 <= a3)
            v26 = 64;
          else
            v26 = v25 >> 32;
          a8.n128_u32[0] = v18;
          if (v21)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(112, 111, v24, v26, v21, (float32x4_t *)(a4 + 4 * v21 * a5), a5, v23, a8, a9, a10, a11, a12, a13, a14, a15, a7, (char *)&v23[v20], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v33(v24, v26, a4 + 4 * v21 * a5 + 4 * v21, a5, &v23[v20], a7, a8);
          v25 -= 0x4000000000;
          v23 = (float32x2_t *)((char *)v23 + v32);
        }
        while (v22 < a3);
      }
      v20 += 32;
      v21 += 64;
    }
    while (v31 < a2);
  }
  return result;
}

uint64_t strsm_block_LUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v15 = strsm_noPack_LUNN;
  if ((_DWORD)result == 132)
    v15 = strsm_noPack_LUNU;
  v37 = v15;
  if ((int)a2 >= 1)
  {
    v18 = a8.n128_u32[0];
    v30 = a3 << 32;
    v36 = a7 << 8;
    v20 = 1;
    v21 = a2;
    do
    {
      LODWORD(v22) = v21 - 64;
      if (v21 >= 0x40)
        v22 = v22;
      else
        v22 = 0;
      v34 = v22;
      if (a3 >= 1)
      {
        v23 = 0;
        v24 = (char *)(a6 + 4 * v22);
        v25 = v30;
        v26 = a4 + 4 * v22;
        if (v21 >= 0x40)
          v27 = 64;
        else
          v27 = v21;
        v28 = v26 + 4 * v34 * a5;
        v35 = (float32x4_t *)(v26 + 4 * (v34 + v27) * a5);
        do
        {
          v23 += 64;
          if (v23 <= a3)
            v29 = 64;
          else
            v29 = v25 >> 32;
          a8.n128_u32[0] = v18;
          if ((v20 & 1) == 0)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(111, 111, v27, v29, a2 - (v27 + v34), v35, a5, (float32x2_t *)&v24[4 * v27], a8, a9, a10, a11, a12, a13, a14, a15, a7, v24, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v37)(v27, v29, v28, a5, v24, a7, a8);
          v25 -= 0x4000000000;
          v24 += v36;
        }
        while (v23 < a3);
      }
      v20 = 0;
      v21 = v34;
    }
    while ((int)v34 >= 1);
  }
  return result;
}

uint64_t strsm_block_RLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RLTN;
  if ((_DWORD)result == 132)
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RLTU;
  v33 = v15;
  if (a3 >= 1)
  {
    v18 = a8.n128_u32[0];
    v20 = 0;
    v21 = 0;
    v27 = a2 << 32;
    v30 = a7 << 8;
    do
    {
      v32 = v21 + 64;
      if (a2 >= 1)
      {
        v22 = 0;
        v23 = a6;
        if (v32 <= a3)
          v24 = 64;
        else
          v24 = (int)a3 - (int)v21;
        v25 = v27;
        do
        {
          v22 += 64;
          if (v22 <= a2)
            v26 = 64;
          else
            v26 = v25 >> 32;
          a8.n128_u32[0] = v18;
          if (v21)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(111, 112, v26, v24, v21, v23, a7, (float32x2_t *)(a4 + 4 * v21), a8, a9, a10, a11, a12, a13, a14, a15, a5, (char *)v23 + v20, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v33(v26, v24, a4 + 4 * v21 + 4 * v21 * a5, a5, (char *)v23 + v20, a7, a8);
          v25 -= 0x4000000000;
          v23 += 16;
        }
        while (v22 < a2);
      }
      v20 += v30;
      v21 += 64;
    }
    while (v32 < a3);
  }
  return result;
}

uint64_t strsm_block_RLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v36;

  v15 = strsm_noPack_RLNN;
  if ((_DWORD)result == 132)
    v15 = strsm_noPack_RLNU;
  v35 = v15;
  if ((int)a3 >= 1)
  {
    v18 = a8.n128_u32[0];
    v29 = a2 << 32;
    v36 = 1;
    v20 = a3;
    do
    {
      LODWORD(v21) = v20 - 64;
      if (v20 >= 0x40)
        v21 = v21;
      else
        v21 = 0;
      v33 = v21;
      if (a2 >= 1)
      {
        v22 = 0;
        v23 = (char *)(a6 + 4 * v21 * a7);
        if (v20 >= 0x40)
          v24 = 64;
        else
          v24 = v20;
        v34 = a3 - (v21 + v24);
        v25 = a4 + 4 * v21 * a5 + 4 * v21;
        v26 = (float32x4_t *)(a6 + a7 * (4 * v21 + 4 * v24));
        v27 = v29;
        do
        {
          v22 += 64;
          if (v22 <= a2)
            v28 = 64;
          else
            v28 = v27 >> 32;
          a8.n128_u32[0] = v18;
          if ((v36 & 1) == 0)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(111, 111, v28, v24, v34, v26, a7, (float32x2_t *)(v25 + 4 * v24), a8, a9, a10, a11, a12, a13, a14, a15, a5, v23, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v35)(v28, v24, v25, a5, v23, a7, a8);
          v27 -= 0x4000000000;
          v23 += 256;
          v26 += 16;
        }
        while (v22 < a2);
      }
      v36 = 0;
      v20 = v33;
    }
    while (v33 >= 1);
  }
  return result;
}

uint64_t strsm_block_RUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RUNN;
  if ((_DWORD)result == 132)
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RUNU;
  v33 = v15;
  if (a3 >= 1)
  {
    v18 = a8.n128_u32[0];
    v20 = 0;
    v21 = 0;
    v27 = a2 << 32;
    v30 = a7 << 8;
    do
    {
      v32 = v21 + 64;
      if (a2 >= 1)
      {
        v22 = 0;
        v23 = a6;
        if (v32 <= a3)
          v24 = 64;
        else
          v24 = (int)a3 - (int)v21;
        v25 = v27;
        do
        {
          v22 += 64;
          if (v22 <= a2)
            v26 = 64;
          else
            v26 = v25 >> 32;
          a8.n128_u32[0] = v18;
          if (v21)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(111, 111, v26, v24, v21, v23, a7, (float32x2_t *)(a4 + 4 * v21 * a5), a8, a9, a10, a11, a12, a13, a14, a15, a5, (char *)v23 + v20, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v33(v26, v24, a4 + 4 * v21 * a5 + 4 * v21, a5, (char *)v23 + v20, a7, a8);
          v25 -= 0x4000000000;
          v23 += 16;
        }
        while (v22 < a2);
      }
      v20 += v30;
      v21 += 64;
    }
    while (v32 < a3);
  }
  return result;
}

uint64_t strsm_block_RUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, __n128 a9, int8x16_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15)
{
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v35;
  float32x2_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v39;

  v15 = strsm_noPack_RUTN;
  if ((_DWORD)result == 132)
    v15 = strsm_noPack_RUTU;
  v38 = v15;
  if ((int)a3 >= 1)
  {
    v18 = a8.n128_u32[0];
    v31 = a2 << 32;
    v39 = 1;
    v20 = a3;
    do
    {
      LODWORD(v21) = v20 - 64;
      if (v20 >= 0x40)
        v21 = v21;
      else
        v21 = 0;
      v35 = v21;
      if (a2 >= 1)
      {
        v22 = 0;
        v23 = (char *)(a6 + 4 * v21 * a7);
        v24 = v31;
        v25 = a4 + 4 * v21;
        if (v20 >= 0x40)
          v26 = 64;
        else
          v26 = v20;
        v27 = (v35 + v26);
        v36 = (float32x2_t *)(v25 + 4 * v27 * a5);
        v37 = a3 - v27;
        v28 = v25 + 4 * v35 * a5;
        v29 = (float32x4_t *)(a6 + a7 * (4 * v35 + 4 * v26));
        do
        {
          v22 += 64;
          if (v22 <= a2)
            v30 = 64;
          else
            v30 = v24 >> 32;
          a8.n128_u32[0] = v18;
          if ((v39 & 1) == 0)
          {
            a8.n128_u32[0] = -1.0;
            a9.n128_u32[0] = v18;
            APL_seq_sgemm(111, 112, v30, v26, v37, v29, a7, v36, a8, a9, a10, a11, a12, a13, a14, a15, a5, v23, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v38)(v30, v26, v28, a5, v23, a7, a8);
          v24 -= 0x4000000000;
          v23 += 256;
          v29 += 16;
        }
        while (v22 < a2);
      }
      v39 = 0;
      v20 = v35;
    }
    while ((int)v35 >= 1);
  }
  return result;
}

double *dgebpUnalignedC_8M4N_hurricane(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = a3;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      v19 = *a3;
      v20 = a3[1];
      v21 = a3[2];
      v22 = a3[3];
      v18 = (float64x2_t *)((char *)a3 + v11);
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = v18[3];
      v23 = (float64x2_t *)((char *)v18 + v11);
      v29 = *v23;
      v30 = v23[1];
      v31 = v23[2];
      v32 = v23[3];
      v28 = (float64x2_t *)((char *)v23 + v11);
      v33 = *v28;
      v34 = v28[1];
      v35 = v28[2];
      v36 = v28[3];
      v38 = *a2;
      v39 = a2[1];
      v37 = a2 + 2;
      do
      {
        v19 = vmlaq_n_f64(v19, v13, v38.f64[0]);
        v24 = vmlaq_laneq_f64(v24, v13, v38, 1);
        v29 = vmlaq_n_f64(v29, v13, v39.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v13, v39, 1);
        v20 = vmlaq_n_f64(v20, v14, v38.f64[0]);
        v25 = vmlaq_laneq_f64(v25, v14, v38, 1);
        v30 = vmlaq_n_f64(v30, v14, v39.f64[0]);
        v34 = vmlaq_laneq_f64(v34, v14, v39, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v40 = (float64x2_t *)(result + 4);
        v21 = vmlaq_n_f64(v21, v15, v38.f64[0]);
        v26 = vmlaq_laneq_f64(v26, v15, v38, 1);
        v31 = vmlaq_n_f64(v31, v15, v39.f64[0]);
        v35 = vmlaq_laneq_f64(v35, v15, v39, 1);
        v22 = vmlaq_n_f64(v22, v16, v38.f64[0]);
        v27 = vmlaq_laneq_f64(v27, v16, v38, 1);
        v32 = vmlaq_n_f64(v32, v16, v39.f64[0]);
        v36 = vmlaq_laneq_f64(v36, v16, v39, 1);
        v15 = *v40;
        v16 = v40[1];
        result = v40[2].f64;
        v38 = *v37;
        v39 = v37[1];
        v37 += 2;
        --v17;
      }
      while (v17);
      v41 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v19;
      v10[1] = v20;
      v10[2] = v21;
      v10[3] = v22;
      v10 += 4;
      *v41 = v24;
      v41[1] = v25;
      v41[2] = v26;
      v41[3] = v27;
      v42 = (float64x2_t *)((char *)v41 + v11);
      *v42 = v29;
      v42[1] = v30;
      v42[2] = v31;
      v42[3] = v32;
      v43 = (float64x2_t *)((char *)v42 + v11);
      *v43 = v33;
      v43[1] = v34;
      v43[2] = v35;
      v43[3] = v36;
      a3 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return dgebp_1M4N(result - 8, a2, a3->f64, a4, v7, a6);
  return result;
}

void cblas_sgemv_sequential(int a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, float *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,float32x4_t a27,float32x4_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,float32x4_t a33,float32x4_t a34,uint64_t a35,float32x2_t a36,float32x4_t a37,float32x4_t a38,float32x4_t a39,float32x4_t a40,uint64_t a41,float32x2_t a42,float32x4_t a43,float32x4_t a44,float32x4_t a45,char a46)
{
  int v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  int v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v46 = a1 - 101;
  if ((a1 - 101) > 1)
  {
    v53 = 1;
LABEL_32:
    cblas_xerbla(v53, "cblas_sgemv", "");
    return;
  }
  if ((a2 - 111) > 3)
  {
    v53 = 2;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v53 = 3;
    goto LABEL_32;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v53 = 4;
    goto LABEL_32;
  }
  if (!a8)
  {
    v53 = 9;
    goto LABEL_32;
  }
  if (!(_DWORD)a18)
  {
    v53 = 12;
    goto LABEL_32;
  }
  if ((a2 - 113) >= 2)
    v48 = (a2 & 0xFFFFFFFE) == 112;
  else
    v48 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  v49 = a3;
  v50 = a4;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v51 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v52 = a18 - a18 * a4;
  }
  else
  {
    v51 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v52 = a18 - a18 * a3;
  }
  v54 = &a17[v52];
  if ((int)a18 >= 0)
    v54 = a17;
  if (!v46)
  {
    if (a4 <= 1uLL)
      v58 = 1;
    else
      v58 = a4;
    if (v58 <= a6)
    {
      v48 ^= 1u;
      v56 = a8;
      v59 = (int)a18;
      v57 = a4;
      v50 = v49;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v49 <= 1)
    v55 = 1;
  else
    v55 = v49;
  if (v55 > a6)
  {
LABEL_31:
    v53 = 7;
    goto LABEL_32;
  }
  v56 = a8;
  v59 = (int)a18;
  v57 = v49;
LABEL_34:
  sgemv_internal(v48, v57, v50, a5, a6, v51, v56, v54, a9, a10, a11, a12, a13, a14, a15, a16, v59, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46);
}

void APL_seq_strsm(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, char *a17, uint64_t a18, float *a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35)
{
  BOOL v36;

  if (a5 && a6)
  {
    if (a9.n128_f32[0] == 0.0)
    {
      sgeSetZero(a5, a6, a17, a18);
    }
    else if (a5 > 95 || a6 >= 96)
    {
      v36 = a2 == 121 && (_DWORD)a3 == 111;
      if (a1 == 141)
      {
        if (v36 || a2 == 122 && (_DWORD)a3 != 111)
          strsm_Left_Backward(a3, a4, a5, a6, a5, (uint64_t)a7, a8, (int)a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, (uint64_t)a17, a19,
            a20,
            a21,
            a22,
            a23,
            (uint64_t)a24,
            a25,
            a26,
            a27);
        else
          strsm_Left_Forward(a3, a4, a5, a6, a5, (uint64_t)a7, a8, (int)a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, (uint64_t)a17, a19,
            a20,
            a21,
            a22,
            a23,
            (uint64_t)a24,
            a25,
            (uint64_t)a26,
            a27,
            a28,
            a29,
            a30,
            a31);
      }
      else if (v36 || a2 == 122 && (_DWORD)a3 != 111)
      {
        strsm_Right_Forward(a3, a4, a5, a6, a6, (uint64_t)a17, a18, (int)a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, (uint64_t)a17, a19,
          a20,
          a21,
          a22,
          a23,
          (uint64_t)a24,
          a25,
          (uint64_t)a26,
          a27,
          a28,
          a29,
          (uint64_t)a30,
          a31,
          a32,
          a33,
          a34,
          a35);
      }
      else
      {
        strsm_Right_Backward(a3, a4, a5, a6, a6, (uint64_t)a17, a18, (int)a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, (uint64_t)a17, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25);
      }
    }
    else if (a20 == -1)
    {
      *a19 = 0.0;
    }
    else if (a1 == 141)
    {
      if (a2 == 121)
      {
        if ((_DWORD)a3 == 111)
        {
          if ((_DWORD)a4 == 132)
            strsm_noPack_LUNU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
          else
            strsm_noPack_LUNN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
        }
        else if ((_DWORD)a4 == 132)
        {
          strsm_noPack_LUTU(a5, a6, (uint64_t)a7, a8, (float *)a17, a18, a9.n128_f32[0]);
        }
        else
        {
          strsm_noPack_LUTN(a5, a6, a7, a8, (float *)a17, a18, a9.n128_f32[0]);
        }
      }
      else if ((_DWORD)a3 == 111)
      {
        if ((_DWORD)a4 == 132)
          strsm_noPack_LLNU(a5, a6, (uint64_t)a7, a8, (float *)a17, a18, a9.n128_f32[0]);
        else
          strsm_noPack_LLNN(a5, a6, a7, a8, (float *)a17, a18, a9.n128_f32[0]);
      }
      else if ((_DWORD)a4 == 132)
      {
        strsm_noPack_LLTU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
      }
      else
      {
        strsm_noPack_LLTN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
      }
    }
    else if (a2 == 121)
    {
      if ((_DWORD)a3 == 111)
      {
        if ((_DWORD)a4 == 132)
          strsm_noPack_RUNU(a5, a6, (uint64_t)a7, a8, (float *)a17, a18, a9.n128_f32[0]);
        else
          strsm_noPack_RUNN(a5, a6, a7, a8, (float *)a17, a18, a9.n128_f32[0]);
      }
      else if ((_DWORD)a4 == 132)
      {
        strsm_noPack_RUTU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
      }
      else
      {
        strsm_noPack_RUTN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
      }
    }
    else if ((_DWORD)a3 == 111)
    {
      if ((_DWORD)a4 == 132)
        strsm_noPack_RLNU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
      else
        strsm_noPack_RLNN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9.n128_f32[0]);
    }
    else if ((_DWORD)a4 == 132)
    {
      strsm_noPack_RLTU(a5, a6, (uint64_t)a7, a8, (float *)a17, a18, a9.n128_f32[0]);
    }
    else
    {
      strsm_noPack_RLTN(a5, a6, a7, a8, (float *)a17, a18, a9.n128_f32[0]);
    }
  }
}

double *dgebpScaleUnalignedC_8M4N_hurricane(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = a3;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      v23 = a3[3];
      v19 = (float64x2_t *)((char *)a3 + v12);
      v25 = *v19;
      v26 = v19[1];
      v27 = v19[2];
      v28 = v19[3];
      v24 = (float64x2_t *)((char *)v19 + v12);
      v30 = *v24;
      v31 = v24[1];
      v32 = v24[2];
      v33 = v24[3];
      v29 = (float64x2_t *)((char *)v24 + v12);
      v35 = *a2;
      v36 = a2[1];
      v34 = a2 + 2;
      v37 = vmulq_n_f64(v20, a7);
      v38 = vmulq_n_f64(v21, a7);
      v39 = vmulq_n_f64(v22, a7);
      v40 = vmulq_n_f64(v23, a7);
      v41 = vmulq_n_f64(v25, a7);
      v42 = vmulq_n_f64(v26, a7);
      v43 = vmulq_n_f64(v27, a7);
      v44 = vmulq_n_f64(v28, a7);
      v45 = vmulq_n_f64(v30, a7);
      v46 = vmulq_n_f64(v31, a7);
      v47 = vmulq_n_f64(v32, a7);
      v48 = vmulq_n_f64(v33, a7);
      v49 = vmulq_n_f64(*v29, a7);
      v50 = vmulq_n_f64(v29[1], a7);
      v51 = vmulq_n_f64(v29[2], a7);
      v52 = vmulq_n_f64(v29[3], a7);
      do
      {
        v37 = vmlaq_n_f64(v37, v14, v35.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v14, v35, 1);
        v45 = vmlaq_n_f64(v45, v14, v36.f64[0]);
        v49 = vmlaq_laneq_f64(v49, v14, v36, 1);
        v38 = vmlaq_n_f64(v38, v15, v35.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v15, v35, 1);
        v46 = vmlaq_n_f64(v46, v15, v36.f64[0]);
        v50 = vmlaq_laneq_f64(v50, v15, v36, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v39 = vmlaq_n_f64(v39, v16, v35.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v16, v35, 1);
        v47 = vmlaq_n_f64(v47, v16, v36.f64[0]);
        v51 = vmlaq_laneq_f64(v51, v16, v36, 1);
        v40 = vmlaq_n_f64(v40, v17, v35.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v17, v35, 1);
        v48 = vmlaq_n_f64(v48, v17, v36.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v17, v36, 1);
        v16 = *v53;
        v17 = v53[1];
        result = v53[2].f64;
        v35 = *v34;
        v36 = v34[1];
        v34 += 2;
        --v18;
      }
      while (v18);
      v54 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v37;
      v11[1] = v38;
      v11[2] = v39;
      v11[3] = v40;
      v11 += 4;
      *v54 = v41;
      v54[1] = v42;
      v54[2] = v43;
      v54[3] = v44;
      v55 = (float64x2_t *)((char *)v54 + v12);
      *v55 = v45;
      v55[1] = v46;
      v55[2] = v47;
      v55[3] = v48;
      v56 = (float64x2_t *)((char *)v55 + v12);
      *v56 = v49;
      v56[1] = v50;
      v56[2] = v51;
      v56[3] = v52;
      a3 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return dgebpScale_1M4N(result - 8, a2, a3->f64, a4, v8, a6, a7);
  return result;
}

void strsm_noPack_RUNU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  float32x4_t v39;
  __int32 *v40;
  float *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  __int32 *v62;
  __int32 *v63;
  __int32 *v64;
  __int32 *v65;
  float *v66;
  float32x4_t v67;
  uint64_t v68;
  float32x4_t v69;
  __int32 *v70;
  __int32 *v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float v75;
  uint64_t v76;
  int32x4_t v77;
  uint64_t v78;
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;

  v9 = a7;
  v87 = a2;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v15 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v15 = 2;
        v21 = __X;
        v22 = __N;
        do
        {
          v23 = *v21 * v9;
          *v21 = v23;
          v21[a6] = (float)(v21[a6] * v9) - (float)(v23 * v20);
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v15 = 1;
      cblas_sscal(__N, a7, __X, 1);
      a2 = v87;
      v9 = a7;
    }
    else
    {
      v15 = 0;
    }
  }
  else if (__N < 1)
  {
    v15 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = 3;
    v16 = __X;
    v17 = __N;
    do
    {
      v18 = *v16 * v9;
      *v16 = v18;
      v19 = (float)(v16[a6] * v9) - (float)(v18 * v11);
      v16[a6] = v19;
      v16[2 * a6] = -(float)((float)((float)(v14 * v19) + (float)(*v16 * v13)) - (float)(v16[2 * a6] * v9));
      ++v16;
      --v17;
    }
    while (v17);
  }
  if (v15 < a2)
  {
    v24 = 8 * a6;
    v25 = v15;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (float *)(a3 + 4 * v25 * a4);
        v28 = (float *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (float *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (float *)(a3 + 4 * (v25 + 3) * a4);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26];
          v32 = 0uLL;
          if ((v15 & 1) != 0)
          {
            v47 = *v31;
            v39 = vmlaq_n_f32((float32x4_t)0, *v31, *v27);
            v35 = vmlaq_n_f32((float32x4_t)0, *v31, *v28);
            v34 = vmlaq_n_f32((float32x4_t)0, *v31, *v29);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v41 = v27 + 1;
            v36 = v25 - 1;
            v33 = vmlaq_n_f32((float32x4_t)0, v47, *v30);
            v37 = (__int32 *)(v30 + 1);
            v38 = (__int32 *)(v29 + 1);
            v40 = (__int32 *)(v28 + 1);
            if (v25 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v39 = vmlaq_n_f32(v39, *v31, v41[v42]);
                v35 = vmlaq_n_f32(v35, *v31, *(float *)&v40[v42]);
                v34 = vmlaq_n_f32(v34, *v31, *(float *)&v38[v42]);
                v33 = vmlaq_n_f32(v33, *v31, *(float *)&v37[v42]);
                v46 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v43 = vmlaq_n_f32(v43, v46, v41[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, *(float *)&v40[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, *(float *)&v38[v42 + 1]);
                v32 = vmlaq_n_f32(v32, v46, *(float *)&v37[v42 + 1]);
                v42 += 2;
                v31 = (float32x4_t *)((char *)v31 + v24);
                v36 -= 2;
              }
              while (v36);
              v40 = (__int32 *)((char *)v40 + v42 * 4);
              v38 = (__int32 *)((char *)v38 + v42 * 4);
              v37 = (__int32 *)((char *)v37 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v25;
            v37 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v38 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v39 = 0uLL;
            v40 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v41 = (float *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v48 = vaddq_f32(v43, v39);
          v49 = vaddq_f32(v45, v34);
          v50 = vaddq_f32(v32, v33);
          v51 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v9);
          v52 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v9);
          v53 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v9);
          v54 = vsubq_f32(vmulq_n_f32(*v31, v9), v48);
          v55 = vsubq_f32(v51, vaddq_f32(v44, v35));
          v56 = vsubq_f32(v52, v49);
          v57 = vsubq_f32(v53, v50);
          v51.i32[0] = *v40;
          v58 = vmlsq_lane_f32(v55, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v38;
          v52.i32[0] = v38[1];
          v59 = vmlsq_lane_f32(v56, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v37;
          v53.i32[0] = v37[1];
          v60 = vmlsq_lane_f32(v59, v58, *(float32x2_t *)v52.f32, 0);
          v61 = vmlsq_lane_f32(vmlsq_lane_f32(v57, v54, *(float32x2_t *)v51.f32, 0), v58, *(float32x2_t *)v53.f32, 0);
          v51.i32[0] = v37[2];
          *v31 = v54;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v58;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v60;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(v61, v60, *(float32x2_t *)v51.f32, 0);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v87)
        return;
    }
    v62 = (__int32 *)(a3 + 4 * v25 * a4);
    v63 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v64 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v65 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    while (1)
    {
      v66 = &__X[v26];
      v67 = 0uLL;
      if ((v15 & 1) != 0)
      {
        v74.i32[0] = *v62;
        v74.i32[1] = *v63;
        v74.i32[2] = *v64;
        v74.i32[3] = *v65;
        v75 = *v66;
        v66 += a6;
        v68 = v25 - 1;
        v69 = vmlaq_n_f32((float32x4_t)0, v74, v75);
        v70 = v65 + 1;
        v71 = v64 + 1;
        v72 = (uint64_t *)(v63 + 1);
        v73 = (uint64_t *)(v62 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v76 = *v73++;
            v77.i64[0] = v76;
            v78 = *v72++;
            v79.i64[0] = v78;
            v80 = *(_QWORD *)v71;
            v71 += 2;
            v81 = v80;
            v82 = *(_QWORD *)v70;
            v70 += 2;
            v77.i64[1] = v81;
            v79.i64[1] = v82;
            v69 = vmlaq_n_f32(v69, (float32x4_t)vtrn1q_s32(v77, v79), *v66);
            v67 = vmlaq_n_f32(v67, (float32x4_t)vtrn2q_s32(v77, v79), v66[a6]);
            v66 = (float *)((char *)v66 + v24);
            v68 -= 2;
          }
          while (v68);
        }
      }
      else
      {
        v68 = v25;
        v69 = 0uLL;
        v70 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v71 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v72 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v73 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      v83 = vaddq_f32(v67, v69);
      v84 = -(float)(v83.f32[0] - (float)(*v66 * v9));
      v85 = (float)-(float)(v83.f32[1] - (float)(v66[a6] * v9)) - (float)(v84 * *(float *)v72);
      v86 = (float)((float)-(float)(v83.f32[2] - (float)(v66[2 * a6] * v9)) - (float)(v84 * *(float *)v71))
          - (float)(v85 * *((float *)v71 + 1));
      v83.f32[0] = (float)((float)((float)-(float)(v83.f32[3] - (float)(v66[3 * a6] * v9)) - (float)(v84 * *(float *)v70))
                         - (float)(v85 * *((float *)v70 + 1)))
                 - (float)(v86 * *((float *)v70 + 2));
      *v66 = v84;
      v66[a6] = v85;
      v66[2 * a6] = v86;
      v66[3 * a6] = v83.f32[0];
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_RUNN(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float *v9;
  float v10;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  __int32 *v56;
  __int32 *v57;
  float32x4_t v58;
  float *v59;
  float *v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  float *v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  __int32 *v87;
  __int32 *v88;
  uint64_t *v89;
  uint64_t *v90;
  float32x4_t v91;
  float v92;
  uint64_t v93;
  int32x4_t v94;
  uint64_t v95;
  int32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v9 = a3;
  v10 = a7;
  v12 = __N;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v21 = 2;
        v31 = __X;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = v28 * *v31;
          *v31 = v34;
          v31[a6] = v33 * (float)((float)(v31[a6] * v10) - (float)(v34 * v29));
          ++v31;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v21 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v10 = a7;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = 3;
    v22 = __X;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *v22;
      *v22 = v25;
      v26 = v19 * (float)((float)(v22[a6] * v10) - (float)(v25 * v18));
      v22[a6] = v26;
      v22[2 * a6] = v24
                  * (float)-(float)((float)((float)(v16 * v26) + (float)(*v22 * v15)) - (float)(v22[2 * a6] * v10));
      ++v22;
      --v23;
    }
    while (v23);
  }
  if (v21 < a2)
  {
    v35 = v12 - 3;
    v36 = 8 * a6;
    v37 = v21;
    v105 = a2;
    v106 = v9;
    v104 = v12;
    while (1)
    {
      v38 = 1.0 / v9[v37 * a4 + v37];
      v39 = (v37 + 1) * a4;
      v40 = 1.0 / v9[v39 + 1 + v37];
      v41 = (v37 + 2) * a4;
      v42 = 1.0 / v9[v41 + 2 + v37];
      v43 = (v37 + 3) * a4;
      v44 = 1.0 / v9[v43 + 3 + v37];
      v110 = v43;
      v108 = v41;
      v109 = v39;
      v45 = 0;
      if (v12 >= 4)
      {
        v46 = &v9[v37 * a4];
        v47 = &v9[v39];
        v48 = &v9[v41];
        v49 = &v9[v43];
        do
        {
          v50 = (float32x4_t *)&__X[v45];
          v51 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v66 = *v50;
            v58 = vmlaq_n_f32((float32x4_t)0, *v50, *v46);
            v54 = vmlaq_n_f32((float32x4_t)0, *v50, *v47);
            v53 = vmlaq_n_f32((float32x4_t)0, *v50, *v48);
            v50 = (float32x4_t *)((char *)v50 + 4 * a6);
            v55 = v37 - 1;
            v52 = vmlaq_n_f32((float32x4_t)0, v66, *v49);
            v56 = (__int32 *)(v49 + 1);
            v57 = (__int32 *)(v48 + 1);
            v59 = v47 + 1;
            v60 = v46 + 1;
            if (v37 != 1)
            {
LABEL_22:
              v61 = 0;
              v62 = 0uLL;
              v63 = 0uLL;
              v64 = 0uLL;
              do
              {
                v58 = vmlaq_n_f32(v58, *v50, v60[v61]);
                v54 = vmlaq_n_f32(v54, *v50, v59[v61]);
                v53 = vmlaq_n_f32(v53, *v50, *(float *)&v57[v61]);
                v52 = vmlaq_n_f32(v52, *v50, *(float *)&v56[v61]);
                v65 = *(float32x4_t *)((char *)v50 + 4 * a6);
                v62 = vmlaq_n_f32(v62, v65, v60[v61 + 1]);
                v63 = vmlaq_n_f32(v63, v65, v59[v61 + 1]);
                v64 = vmlaq_n_f32(v64, v65, *(float *)&v57[v61 + 1]);
                v51 = vmlaq_n_f32(v51, v65, *(float *)&v56[v61 + 1]);
                v61 += 2;
                v50 = (float32x4_t *)((char *)v50 + v36);
                v55 -= 2;
              }
              while (v55);
              v59 = (float *)((char *)v59 + v61 * 4);
              v57 = (__int32 *)((char *)v57 + v61 * 4);
              v56 = (__int32 *)((char *)v56 + v61 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = v37;
            v56 = (__int32 *)&v9[v43];
            v57 = (__int32 *)&v9[v41];
            v58 = 0uLL;
            v59 = v47;
            v60 = &v9[v37 * a4];
            if (v37)
              goto LABEL_22;
          }
          v64 = 0uLL;
          v63 = 0uLL;
          v62 = 0uLL;
LABEL_27:
          v67 = vaddq_f32(v62, v58);
          v68 = vaddq_f32(v64, v53);
          v69 = vaddq_f32(v51, v52);
          v70 = vmulq_n_f32(*v50, v10);
          v71 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 4 * a6), v10);
          v72 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 8 * a6), v10);
          v73 = vmulq_n_f32(vsubq_f32(v70, v67), v38);
          v70.f32[0] = *v59;
          v74 = vmlsq_lane_f32(vsubq_f32(v71, vaddq_f32(v63, v54)), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v57;
          v71.i32[0] = v57[1];
          v75 = vmlsq_lane_f32(vsubq_f32(v72, v68), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v56;
          v72.i32[0] = v56[1];
          v76 = vmulq_n_f32(v74, v40);
          v77 = vmlsq_lane_f32(vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v50 + 12 * a6), v10), v69), v73, *(float32x2_t *)v70.f32, 0), v76, *(float32x2_t *)v72.f32, 0);
          v78 = vmulq_n_f32(vmlsq_lane_f32(v75, v76, *(float32x2_t *)v71.f32, 0), v42);
          v70.i32[0] = v56[2];
          *v50 = v73;
          *(float32x4_t *)((char *)v50 + 4 * a6) = v76;
          *(float32x4_t *)((char *)v50 + 8 * a6) = v78;
          *(float32x4_t *)((char *)v50 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(v77, v78, *(float32x2_t *)v70.f32, 0), v44);
          v45 += 4;
        }
        while (v45 < v35);
      }
      v12 = v104;
      v9 = v106;
      if (v45 < v104)
        break;
LABEL_36:
      v37 += 4;
      if (v37 >= v105)
        return;
    }
    v79 = (__int32 *)&v106[v37 * a4];
    v80 = (__int32 *)&v106[v109];
    v81 = (__int32 *)&v106[v41];
    v82 = (__int32 *)&v106[v110];
    while (1)
    {
      v83 = &__X[v45];
      v84 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v91.i32[0] = *v79;
        v91.i32[1] = *v80;
        v91.i32[2] = *v81;
        v91.i32[3] = *v82;
        v92 = *v83;
        v83 += a6;
        v85 = v37 - 1;
        v86 = vmlaq_n_f32((float32x4_t)0, v91, v92);
        v87 = v82 + 1;
        v88 = v81 + 1;
        v89 = (uint64_t *)(v80 + 1);
        v90 = (uint64_t *)(v79 + 1);
        if (v37 != 1)
        {
          do
          {
LABEL_34:
            v93 = *v90++;
            v94.i64[0] = v93;
            v95 = *v89++;
            v96.i64[0] = v95;
            v97 = *(_QWORD *)v88;
            v88 += 2;
            v98 = v97;
            v99 = *(_QWORD *)v87;
            v87 += 2;
            v94.i64[1] = v98;
            v96.i64[1] = v99;
            v86 = vmlaq_n_f32(v86, (float32x4_t)vtrn1q_s32(v94, v96), *v83);
            v84 = vmlaq_n_f32(v84, (float32x4_t)vtrn2q_s32(v94, v96), v83[a6]);
            v83 = (float *)((char *)v83 + v36);
            v85 -= 2;
          }
          while (v85);
        }
      }
      else
      {
        v85 = v37;
        v86 = 0uLL;
        v87 = (__int32 *)&v106[v110];
        v88 = (__int32 *)&v106[v108];
        v89 = (uint64_t *)&v106[v109];
        v90 = (uint64_t *)&v106[v37 * a4];
        if (v37)
          goto LABEL_34;
      }
      v100 = vaddq_f32(v86, v84);
      v101 = v38 * (float)-(float)(v100.f32[0] - (float)(*v83 * v10));
      v102 = v40 * (float)((float)-(float)(v100.f32[1] - (float)(v83[a6] * v10)) - (float)(v101 * *(float *)v89));
      v103 = v42
           * (float)((float)((float)-(float)(v100.f32[2] - (float)(v83[2 * a6] * v10)) - (float)(v101 * *(float *)v88))
                   - (float)(v102 * *((float *)v88 + 1)));
      v100.f32[0] = v44
                  * (float)((float)((float)((float)-(float)(v100.f32[3] - (float)(v83[3 * a6] * v10))
                                          - (float)(v101 * *(float *)v87))
                                  - (float)(v102 * *((float *)v87 + 1)))
                          - (float)(v103 * *((float *)v87 + 2)));
      *v83 = v101;
      v83[a6] = v102;
      v83[2 * a6] = v103;
      v83[3 * a6] = v100.f32[0];
      if (++v45 == v104)
        goto LABEL_36;
    }
  }
}

void strsm_noPack_RUTU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t *v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  float *v68;
  float *v69;
  uint64_t v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;

  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v24 = *(float *)(a3 + 4 * (v12 + v12 * a4) - 4);
        v25 = (float *)(a5 + 4 * v12 * a6);
        v26 = (float *)(a5 + a6 * (4 * a2 - 8));
        v27 = __N;
        do
        {
          v28 = *v25 * a7;
          *v25++ = v28;
          *v26 = (float)(*v26 * a7) - (float)(v28 * v24);
          ++v26;
          --v27;
        }
        while (v27);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v82 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v12 * a6), 1);
      a7 = v82;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = a3 + 4 * (v12 + v12 * a4);
      v14 = *(float *)(v13 - 8);
      v15 = *(float *)(v13 - 4);
      v16 = *(float *)(a3 + 4 * (a2 + (a2 - 2) * a4) - 12);
      v17 = (float *)(a5 + 4 * v12 * a6);
      v18 = (float *)(a5 + a6 * (4 * a2 - 8));
      v19 = (float *)(a5 + a6 * (4 * a2 - 12));
      v20 = __N;
      do
      {
        v21 = *v17 * a7;
        *v17 = v21;
        v22 = (float)(*v18 * a7) - (float)(v21 * v15);
        *v18++ = v22;
        v23 = *v17++;
        *v19 = -(float)((float)((float)(v16 * v22) + (float)(v23 * v14)) - (float)(*v19 * a7));
        ++v19;
        --v20;
      }
      while (v20);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v29 = v12 + 1;
    v30 = 8 * a4;
    v31 = 8 * a6;
    while (1)
    {
      v32 = v29 - 4;
      if (__N >= 4)
      {
        v33 = 0;
        v34 = a3 + 4 * v32;
        v35 = (float32x2_t *)(v34 + 4 * v29 * a4);
        v36 = 4;
        if (a2 - v32 > 4)
          v36 = a2 - v32;
        v37 = (__int32 *)(v34 + 4 * (v29 - 1) * a4);
        v38 = &v37[-a4];
        while (1)
        {
          v39 = a5 + 4 * v33;
          v40 = (float32x4_t *)(v39 + 4 * v29 * a6);
          v41 = 0uLL;
          if ((v36 & 1) != 0)
          {
            v47 = vmlaq_n_f32((float32x4_t)0, *v40, COERCE_FLOAT(*(_OWORD *)v35->f32));
            v44 = vmlaq_lane_f32((float32x4_t)0, *v40, *v35, 1);
            v43 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 2);
            v42 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 3);
            v40 = (float32x4_t *)((char *)v40 + 4 * a6);
            v45 = v36 - 5;
            v46 = (float32x2_t *)((char *)v35 + 4 * a4);
            if (v36 != 5)
            {
LABEL_21:
              v48 = 0uLL;
              v49 = 0uLL;
              v50 = 0uLL;
              do
              {
                v47 = vmlaq_n_f32(v47, *v40, COERCE_FLOAT(*(_OWORD *)v46->f32));
                v44 = vmlaq_lane_f32(v44, *v40, *v46, 1);
                v43 = vmlaq_laneq_f32(v43, *v40, *(float32x4_t *)v46->f32, 2);
                v42 = vmlaq_laneq_f32(v42, *v40, *(float32x4_t *)v46->f32, 3);
                v51 = *(float32x4_t *)&v46->f32[a4];
                v52 = *(float32x4_t *)((char *)v40 + 4 * a6);
                v48 = vmlaq_n_f32(v48, v52, v51.f32[0]);
                v49 = vmlaq_lane_f32(v49, v52, *(float32x2_t *)v51.f32, 1);
                v50 = vmlaq_laneq_f32(v50, v52, v51, 2);
                v41 = vmlaq_laneq_f32(v41, v52, v51, 3);
                v46 = (float32x2_t *)((char *)v46 + v30);
                v40 = (float32x4_t *)((char *)v40 + v31);
                v45 -= 2;
              }
              while (v45);
              goto LABEL_26;
            }
          }
          else
          {
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = v36 - 4;
            v46 = v35;
            v47 = 0uLL;
            if (v36 != 4)
              goto LABEL_21;
          }
          v50 = 0uLL;
          v49 = 0uLL;
          v48 = 0uLL;
LABEL_26:
          v53 = vaddq_f32(v48, v47);
          v54 = vaddq_f32(v41, v42);
          v55 = (float32x4_t *)(v39 + 4 * v32 * a6);
          v56 = vmulq_n_f32(*(float32x4_t *)((char *)v55 + 4 * a6), a7);
          v57 = vsubq_f32(vmulq_n_f32(*v55, a7), v53);
          v58 = vsubq_f32(v56, vaddq_f32(v49, v44));
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 8 * a6), a7), vaddq_f32(v50, v43));
          v60 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 12 * a6), a7), v54);
          v53.i32[0] = *v37;
          v56.i32[0] = v37[1];
          v61 = vmlsq_lane_f32(v57, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[2];
          v62 = vmlsq_lane_f32(v59, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[-a4];
          v63 = vmlsq_lane_f32(v61, v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[1];
          v64 = vmlsq_lane_f32(vmlsq_lane_f32(v58, v60, *(float32x2_t *)v56.f32, 0), v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[-a4];
          *v55 = vmlsq_lane_f32(v63, v64, *(float32x2_t *)v53.f32, 0);
          *(float32x4_t *)((char *)v55 + 4 * a6) = v64;
          *(float32x4_t *)((char *)v55 + 8 * a6) = v62;
          *(float32x4_t *)((char *)v55 + 12 * a6) = v60;
          v33 += 4;
          if (v33 >= __N - 3)
            goto LABEL_29;
        }
      }
      v33 = 0;
LABEL_29:
      if (v33 < __N)
        break;
LABEL_39:
      v81 = v29 < 5;
      v29 -= 4;
      if (v81)
        return;
    }
    v65 = a3 + 4 * v32;
    v66 = (float32x4_t *)(v65 + 4 * v29 * a4);
    v67 = a2 - v32;
    if (a2 - v32 <= 4)
      v67 = 4;
    v68 = (float *)(v65 + 4 * (v29 - 1) * a4);
    v69 = &v68[-a4];
    while (1)
    {
      v70 = a5 + 4 * v33;
      v71 = (float *)(v70 + 4 * v29 * a6);
      v72 = 0uLL;
      if ((v67 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v66, *v71);
        v71 += a6;
        v74 = v67 - 5;
        v75 = (float32x4_t *)((char *)v66 + 4 * a4);
        if (v67 != 5)
        {
          do
          {
LABEL_37:
            v73 = vmlaq_n_f32(v73, *v75, *v71);
            v72 = vmlaq_n_f32(v72, *(float32x4_t *)((char *)v75 + 4 * a4), v71[a6]);
            v75 = (float32x4_t *)((char *)v75 + v30);
            v71 = (float *)((char *)v71 + v31);
            v74 -= 2;
          }
          while (v74);
        }
      }
      else
      {
        v73 = 0uLL;
        v74 = v67 - 4;
        v75 = v66;
        if (v67 != 4)
          goto LABEL_37;
      }
      v76 = vaddq_f32(v72, v73);
      v77 = (float *)(v70 + 4 * v32 * a6);
      v78 = -(float)(v76.f32[0] - (float)(*v77 * a7));
      v76.f32[0] = -(float)(v76.f32[3] - (float)(v77[3 * a6] * a7));
      v79 = (float)-(float)(v76.f32[2] - (float)(v77[2 * a6] * a7)) - (float)(v76.f32[0] * v68[2]);
      v80 = (float)((float)-(float)(v76.f32[1] - (float)(v77[a6] * a7)) - (float)(v76.f32[0] * v68[1]))
          - (float)(v79 * v69[1]);
      *v77 = (float)((float)(v78 - (float)(v76.f32[0] * *v68)) - (float)(v79 * v68[-a4])) - (float)(v80 * v69[-a4]);
      v77[a6] = v80;
      v77[2 * a6] = v79;
      v77[3 * a6] = v76.f32[0];
      if (++v33 == __N)
        goto LABEL_39;
    }
  }
}

void strsm_noPack_RUTN(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t *v50;
  uint64_t v51;
  float32x2_t *v52;
  __int32 *v53;
  __int32 *v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  float32x2_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  float *v86;
  float *v87;
  uint64_t v88;
  float *v89;
  float32x4_t v90;
  float32x4_t *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float *v95;
  float v96;
  float v97;
  float v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;

  v9 = a4;
  v10 = a7;
  v13 = a2 - 1;
  v103 = a3;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v29 = (float *)(a3 + 4 * (a4 + 1) * v13);
        v30 = *(v29 - 1);
        v31 = v10 / *v29;
        v32 = (float *)(a5 + 4 * v13 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 2));
        do
        {
          v36 = v31 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v30));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v13 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v13 + v13 * a4)), (float *)(a5 + 4 * v13 * a6), 1);
      v10 = a7;
      a3 = v103;
      v9 = a4;
      v13 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v14 = (float *)(a3 + 4 * (a4 + 1) * v13);
      v16 = *(v14 - 2);
      v15 = *(v14 - 1);
      v17 = (a2 - 2) * a4;
      v18 = *(float *)(a3 + 4 * (a2 - 3 + v17));
      v19 = v10 / *v14;
      v20 = 1.0 / *(float *)(a3 + 4 * (v17 + a2 - 2));
      v21 = (float *)(a5 + 4 * v13 * a6);
      v22 = (float *)(a5 + a6 * (4 * a2 - 8));
      v23 = (float *)(a5 + a6 * (4 * a2 - 12));
      v24 = __N;
      v25 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 3));
      do
      {
        v26 = v19 * *v21;
        *v21 = v26;
        v27 = v20 * (float)((float)(*v22 * v10) - (float)(v26 * v15));
        *v22++ = v27;
        v28 = *v21++;
        *v23 = v25 * (float)-(float)((float)((float)(v18 * v27) + (float)(v28 * v16)) - (float)(*v23 * v10));
        ++v23;
        --v24;
      }
      while (v24);
    }
    v13 = a2 - 4;
  }
  v102 = a2;
  if ((v13 & 0x8000000000000000) == 0)
  {
    v37 = v13 + 1;
    v38 = 8 * v9;
    v100 = v9 + 1;
    v39 = v9;
    v40 = -v9;
    v41 = 8 * a6;
    while (1)
    {
      v42 = v37 - 4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v37 - 4) * v100);
      v44 = 1.0 / *(float *)(a3 + 4 * (v37 - 3) * v100);
      v45 = 1.0 / *(float *)(a3 + 4 * (v37 - 2) * v100);
      v46 = (v37 - 1) * v9;
      v47 = 1.0 / *(float *)(a3 + 4 * (v37 - 1 + v46));
      if (__N >= 4)
      {
        v48 = 0;
        v49 = a3 + 4 * v42;
        v50 = (float32x2_t *)(v49 + 4 * v37 * v9);
        if (v102 - v42 <= 4)
          v51 = 4;
        else
          v51 = v102 - v42;
        v52 = (float32x2_t *)((char *)v50 + 4 * v9);
        v53 = (__int32 *)(v49 + 4 * v46);
        v54 = &v53[v40];
        while (1)
        {
          v55 = a5 + 4 * v48;
          v56 = (float32x4_t *)(v55 + 4 * v37 * a6);
          v57 = 0uLL;
          if ((v51 & 1) != 0)
          {
            v63 = vmlaq_n_f32((float32x4_t)0, *v56, COERCE_FLOAT(*(_OWORD *)v50->f32));
            v60 = vmlaq_lane_f32((float32x4_t)0, *v56, *v50, 1);
            v59 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 2);
            v58 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 3);
            v56 = (float32x4_t *)((char *)v56 + 4 * a6);
            v61 = v51 - 5;
            v62 = v52;
            if (v51 != 5)
            {
LABEL_22:
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v63 = vmlaq_n_f32(v63, *v56, COERCE_FLOAT(*(_OWORD *)v62->f32));
                v60 = vmlaq_lane_f32(v60, *v56, *v62, 1);
                v59 = vmlaq_laneq_f32(v59, *v56, *(float32x4_t *)v62->f32, 2);
                v58 = vmlaq_laneq_f32(v58, *v56, *(float32x4_t *)v62->f32, 3);
                v67 = *(float32x4_t *)&v62->f32[v39];
                v68 = *(float32x4_t *)((char *)v56 + 4 * a6);
                v64 = vmlaq_n_f32(v64, v68, v67.f32[0]);
                v65 = vmlaq_lane_f32(v65, v68, *(float32x2_t *)v67.f32, 1);
                v66 = vmlaq_laneq_f32(v66, v68, v67, 2);
                v57 = vmlaq_laneq_f32(v57, v68, v67, 3);
                v62 = (float32x2_t *)((char *)v62 + v38);
                v56 = (float32x4_t *)((char *)v56 + v41);
                v61 -= 2;
              }
              while (v61);
              goto LABEL_27;
            }
          }
          else
          {
            v58 = 0uLL;
            v59 = 0uLL;
            v60 = 0uLL;
            v61 = v51 - 4;
            v62 = v50;
            v63 = 0uLL;
            if (v51 != 4)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v69 = vaddq_f32(v64, v63);
          v70 = vaddq_f32(v65, v60);
          v71 = vaddq_f32(v57, v58);
          v72 = (float32x4_t *)(v55 + 4 * v42 * a6);
          v73 = vmulq_n_f32(*(float32x4_t *)((char *)v72 + 8 * a6), v10);
          v74 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 4 * a6), v10), v70);
          v75 = vsubq_f32(v73, vaddq_f32(v66, v59));
          v76 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 12 * a6), v10), v71), v47);
          v70.i32[0] = *v53;
          v73.i32[0] = v53[1];
          v77 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v72, v10), v69), v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[2];
          v78 = vmlsq_lane_f32(v75, v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[v40];
          v79 = vmulq_n_f32(v78, v45);
          v80 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[1];
          v81 = vmlsq_lane_f32(vmlsq_lane_f32(v74, v76, *(float32x2_t *)v73.f32, 0), v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[v40];
          v82 = vmulq_n_f32(v81, v44);
          *v72 = vmulq_n_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v70.f32, 0), v43);
          *(float32x4_t *)((char *)v72 + 4 * a6) = v82;
          *(float32x4_t *)((char *)v72 + 8 * a6) = v79;
          *(float32x4_t *)((char *)v72 + 12 * a6) = v76;
          v48 += 4;
          if (v48 >= __N - 3)
            goto LABEL_30;
        }
      }
      v48 = 0;
LABEL_30:
      a3 = v103;
      v9 = a4;
      if (v48 < __N)
        break;
LABEL_40:
      v99 = v37 < 5;
      v37 -= 4;
      if (v99)
        return;
    }
    v83 = v103 + 4 * v42;
    v84 = (float32x4_t *)(v83 + 4 * v37 * a4);
    v85 = v102 - v42;
    if (v102 - v42 <= 4)
      v85 = 4;
    v86 = (float *)(v83 + 4 * v46);
    v87 = &v86[v40];
    while (1)
    {
      v88 = a5 + 4 * v48;
      v89 = (float *)(v88 + 4 * v37 * a6);
      v90 = 0uLL;
      if ((v85 & 1) != 0)
      {
        v93 = vmlaq_n_f32((float32x4_t)0, *v84, *v89);
        v89 += a6;
        v91 = (float32x4_t *)((char *)v84 + 4 * a4);
        v92 = v85 - 5;
        if (v85 != 5)
        {
          do
          {
LABEL_38:
            v93 = vmlaq_n_f32(v93, *v91, *v89);
            v90 = vmlaq_n_f32(v90, *(float32x4_t *)((char *)v91 + v39 * 4), v89[a6]);
            v89 = (float *)((char *)v89 + v41);
            v91 = (float32x4_t *)((char *)v91 + v38);
            v92 -= 2;
          }
          while (v92);
        }
      }
      else
      {
        v91 = v84;
        v92 = v85 - 4;
        v93 = 0uLL;
        if (v85 != 4)
          goto LABEL_38;
      }
      v94 = vaddq_f32(v93, v90);
      v95 = (float *)(v88 + 4 * v42 * a6);
      v96 = -(float)(v94.f32[0] - (float)(*v95 * v10));
      v94.f32[0] = v47 * (float)-(float)(v94.f32[3] - (float)(v95[3 * a6] * v10));
      v97 = v45 * (float)((float)-(float)(v94.f32[2] - (float)(v95[2 * a6] * v10)) - (float)(v94.f32[0] * v86[2]));
      v98 = v44
          * (float)((float)((float)-(float)(v94.f32[1] - (float)(v95[a6] * v10)) - (float)(v94.f32[0] * v86[1]))
                  - (float)(v97 * v87[1]));
      *v95 = v43
           * (float)((float)((float)(v96 - (float)(v94.f32[0] * *v86)) - (float)(v97 * v86[v40]))
                   - (float)(v98 * v87[v40]));
      v95[a6] = v98;
      v95[2 * a6] = v97;
      v95[3 * a6] = v94.f32[0];
      if (++v48 == __N)
        goto LABEL_40;
    }
  }
}

void sgemv_internal(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, float *a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,float32x4_t a27,float32x4_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,float32x4_t a33,float32x4_t a34,uint64_t a35,float32x2_t a36,float32x4_t a37,float32x4_t a38,float32x4_t a39,float32x4_t a40,uint64_t a41,float32x2_t a42,float32x4_t a43,float32x4_t a44,float32x4_t a45,char a46)
{
  if ((a1 & 1) != 0)
    sgemvT_work(a2, a3, a4, a5, a6, a7, a8, a17, a9.n128_f32[0], a10.n128_f32[0]);
  else
    sgemvN_work(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46);
}

void sgemvT_work(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10)
{
  float v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _QWORD v43[4];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;

  v46 = a2;
  v47 = a7;
  v10 = a10;
  v44 = a3;
  v45 = a4;
  v48 = *MEMORY[0x1E0C80C00];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v42) = a8;
      else
        v42 = -a8;
      cblas_sscal(v46, a10, &v47[((v46 - 1) * a8) & (a8 >> 63)], v42);
    }
  }
  else
  {
    v16 = hardwareVectorBytes();
    v43[3] = v43;
    MEMORY[0x1E0C80A78](v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
    v31 = (void *)(((unint64_t)v43 - v30) & 0xFFFFFFFFFFFFFFC0);
    v33 = (uint64_t)v31 + 4 * v32;
    v35 = v34 & 0xFFFFFFFFFFFFFFFCLL;
    bzero(v31, v34 & 0xFFFFFFFFFFFFFFFCLL);
    bzero((void *)(v33 + 2048), v35);
    if (a1 >= 1)
    {
      v36 = 0;
      v37 = a1;
      do
      {
        v38 = v37 - 512;
        if (v37 >= 512)
          v37 = 512;
        if (a1 - v36 >= 512)
          v39 = 512;
        else
          v39 = a1 - v36;
        if (a1 - v36 >= 1)
        {
          v40 = a5;
          v41 = (_DWORD *)v33;
          do
          {
            *v41++ = *v40;
            v40 += a6;
            --v37;
          }
          while (v37);
        }
        sgemvT_packed_base(v39, v46, v44 + 4 * v36, v45, v33, v47, a8, a9, v10);
        v36 += 512;
        a5 += 512 * a6;
        v10 = 1.0;
        v37 = v38;
      }
      while (v36 < a1);
    }
  }
}

void sgemvN_work(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,float32x4_t a27,float32x4_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,float32x4_t a33,float32x4_t a34,uint64_t a35,float32x2_t a36,float32x4_t a37,float32x4_t a38,float32x4_t a39,float32x4_t a40,uint64_t a41,float32x2_t a42,float32x4_t a43,float32x4_t a44,float32x4_t a45,char a46)
{
  uint64_t v46;

  if (a9.n128_f32[0] == 0.0)
  {
    if (a10.n128_f32[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v46) = a8;
      else
        v46 = -a8;
      cblas_sscal(a1, a10.n128_f32[0], (float *)(a7 + 4 * (((a1 - 1) * a8) & (a8 >> 63))), v46);
    }
  }
  else
  {
    sgemvN_base(a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16, a7, a8, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46);
  }
}

uint64_t APL_sgemm_noPack_NN(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t i;
  float32x4_t *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  __int32 v32;
  float v33;
  __int32 v34;
  float v35;
  __int32 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float v66;
  __int32 v67;
  float32x4_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  float32x4_t v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  uint64_t k;
  float32x4_t *v86;
  float32x2_t *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t m;
  float32x2_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float32x2_t v104;
  __int32 *v105;
  float32x2_t v106;

  v12 = 4 * a5;
  v13 = a12;
  v14 = a2 <= 3;
  for (i = a2 - 3; !v14; i -= 4)
  {
    v16 = a4;
    v17 = (__int32 *)a6;
    v18 = (__int32 *)a6 + a7;
    v19 = (__int32 *)&a6[a7];
    v20 = &v18[2 * a7];
    v21 = &a8[a12];
    v22 = __OFSUB__(result, 3);
    v23 = result - 3;
    if (result > 3)
    {
      do
      {
        v24 = a3;
        v25 = (float32x4_t)veorq_s8(a11, a11);
        v26 = v25;
        v27 = v25;
        v28 = v25;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v29 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v12);
        v30 = *(float *)v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = *(float *)&v32;
        v34 = *v19++;
        v35 = *(float *)&v34;
        v36 = *v20++;
        v25 = vmlaq_n_f32(v25, v29, v31);
        v26 = vmlaq_n_f32(v26, v29, v33);
        v27 = vmlaq_n_f32(v27, v29, v35);
        v28 = vmlaq_n_f32(v28, v29, *(float *)&v36);
        v24 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v37 = *v16;
          v38 = *(float32x4_t *)((char *)v16 + v12);
          v40 = *(float32x2_t *)v17;
          v39 = (float32x2_t *)(v17 + 2);
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v14 = v24 <= 2;
          for (j = v24 - 2; !v14; j -= 2)
          {
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v52 = vmlaq_n_f32(v25, v37, v41.f32[0]);
            v53 = vmlaq_n_f32(v26, v37, v44.f32[0]);
            v54 = vmlaq_n_f32(v27, v37, v47.f32[0]);
            v55 = vmlaq_n_f32(v28, v37, v50.f32[0]);
            v37 = *v16;
            v25 = vmlaq_lane_f32(v52, v38, v41, 1);
            v56 = *v39++;
            v41 = v56;
            v26 = vmlaq_lane_f32(v53, v38, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v27 = vmlaq_lane_f32(v54, v38, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v28 = vmlaq_lane_f32(v55, v38, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v38 = *(float32x4_t *)((char *)v16 + v12);
            v14 = j <= 2;
          }
          v16 = (float32x4_t *)((char *)v16 + 2 * v12);
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v37, v41.f32[0]), v38, v41, 1);
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v37, v44.f32[0]), v38, v44, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v37, v47.f32[0]), v38, v47, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v37, v50.f32[0]), v38, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v25, a9), *a8, a10);
        v61 = vmlaq_n_f32(vmulq_n_f32(v27, a9), *v60, a10);
        v62 = vmlaq_n_f32(vmulq_n_f32(v28, a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v61;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v62;
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)v16 - v12 * a3 + 16);
        v22 = __OFSUB__(v23, 4);
        v14 = v23 <= 4;
        v23 -= 4;
      }
      while (!v14);
    }
    v63 = result & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        v65 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_15;
        v66 = v16->f32[0];
        v16 = (float32x4_t *)((char *)v16 + v12);
        v67 = *v17++;
        v68.i32[0] = v67;
        v68.i32[1] = *v18++;
        v68.i32[2] = *v19++;
        v68.i32[3] = *v20++;
        v65 = vmlaq_n_f32(v65, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_15:
          do
          {
            v69 = v16->f32[0];
            v70 = v16->f32[(unint64_t)v12 / 4];
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v71 = *(_QWORD *)v17;
            v17 += 2;
            v72.i64[0] = v71;
            v73 = *(_QWORD *)v18;
            v18 += 2;
            v74.i64[0] = v73;
            v75 = *(_QWORD *)v19;
            v19 += 2;
            v76 = v75;
            v77 = *(_QWORD *)v20;
            v20 += 2;
            v72.i64[1] = v76;
            v74.i64[1] = v77;
            v65 = vmlaq_n_f32(vmlaq_n_f32(v65, (float32x4_t)vtrn1q_s32(v72, v74), v69), (float32x4_t)vtrn2q_s32(v72, v74), v70);
            v14 = v64 <= 2;
            v64 -= 2;
          }
          while (!v14);
        }
        v79.i32[0] = a8->i32[0];
        v78 = (__int32 *)((char *)a8 + v13 * 4);
        v79.i32[1] = *v78;
        v80 = &v78[v13];
        v79.i32[2] = *v80;
        v81 = &v80[v13];
        v79.i32[3] = *v81;
        v82 = &v81[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v65, a9), v79, a10);
        v83 = &v82[v13];
        *v82 = a11.i32[0];
        a8 = (float32x4_t *)(v82 + 1);
        *v83 = a11.i32[1];
        v84 = &v83[v13];
        *v84 = a11.i32[2];
        v84[a12] = a11.i32[3];
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)&v16->i32[1] - v12 * a3);
        v14 = v63-- <= 1;
      }
      while (!v14);
    }
    a6 += 2 * a7;
    a8 = v21;
    v14 = i <= 4;
  }
  v14 = i <= -3;
  for (k = i + 3; !v14; --k)
  {
    v86 = a4;
    v87 = a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v93 = *v86,
              v86 = (float32x4_t *)((char *)v86 + v12),
              v94 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              v92 = vmlaq_n_f32(v92, v93, v94),
              v91 = a3 - 1,
              a3 > 1))
        {
          v95 = *v86;
          v96 = *(float32x4_t *)((char *)v86 + v12);
          v14 = v91 <= 2;
          for (m = v91 - 2; !v14; m -= 2)
          {
            v86 = (float32x4_t *)((char *)v86 + 2 * v12);
            v98 = *v87++;
            v99 = vmlaq_n_f32(v92, v95, v98.f32[0]);
            v95 = *v86;
            v92 = vmlaq_lane_f32(v99, v96, v98, 1);
            v96 = *(float32x4_t *)((char *)v86 + v12);
            v14 = m <= 2;
          }
          v86 = (float32x4_t *)((char *)v86 + 2 * v12);
          v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, v95, COERCE_FLOAT(*v87)), v96, *v87, 1);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = a6;
        v86 = (float32x4_t *)((char *)v86 - v12 * a3 + 16);
        v89 = __OFSUB__(v90, 4);
        v14 = v90 <= 4;
        v90 -= 4;
      }
      while (!v14);
    }
    v100 = result & 3;
    if (!v89 && v100 != 0)
    {
      do
      {
        v101 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v102 = v86->f32[0],
              v86 = (float32x4_t *)((char *)v86 + v12),
              v103 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v103, v102),
              v101 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v104.i32[0] = v86->i32[0];
            v105 = (__int32 *)((char *)v86 + v12);
            v104.i32[1] = *v105;
            v86 = (float32x4_t *)&v105[(unint64_t)v12 / 4];
            v106 = *v87++;
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v106, v104);
            v14 = v101 <= 2;
            v101 -= 2;
          }
          while (!v14);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = a6;
        v86 = (float32x4_t *)((char *)&v86->i32[1] - v12 * a3);
        v14 = v100-- <= 1;
      }
      while (!v14);
    }
    a6 = (float32x2_t *)((char *)a6 + 4 * a7);
    a8 = v88;
    v14 = k <= 1;
  }
  return result;
}

#error "1D32ECA50: call analysis failed (funcsize=45)"

void cblas_strsm_sequential(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, int a17, char *a18, int a19)
{
  unsigned __int32 v19;
  int v20;
  int v21;
  int v25;
  char *v28;
  char *v29;
  int v30;
  int v32;
  int v33;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char vars0;

  v19 = a9.n128_u32[0];
  v20 = a7;
  v21 = a6;
  v25 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v30 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a17 < (int)a7 || a17 <= 0)
      {
        v40 = a17;
        v42 = a7;
        v29 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v43 = a2;
        v40 = 142;
        v42 = 141;
        v29 = "SIDE must be %d or %d, but is set to %d";
        v36 = 2;
        goto LABEL_41;
      }
      if (a17 < (int)a6 || a17 <= 0)
      {
        v40 = a17;
        v42 = a6;
        v29 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v36 = 10;
LABEL_41:
        v33 = cblas_errprn(v36, 2000, v29, v40, v42, v43);
        goto LABEL_43;
      }
    }
    v33 = 2000;
LABEL_43:
    if (a19 >= v20 && a19 > 0)
      goto LABEL_47;
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v33 = v30;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a17 >= (int)a7 && a17 > 0)
      goto LABEL_24;
    v39 = a17;
    v41 = a7;
    v28 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v41 = 141;
      v43 = a2;
      v39 = 142;
      v28 = "SIDE must be %d or %d, but is set to %d";
      v32 = 2;
      goto LABEL_26;
    }
    if (a17 >= (int)a6 && a17 > 0)
    {
LABEL_24:
      v33 = 2000;
      goto LABEL_27;
    }
    v39 = a17;
    v41 = a6;
    v28 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v32 = 10;
LABEL_26:
  v33 = cblas_errprn(v32, 2000, v28, v39, v41, v43);
LABEL_27:
  if (a19 < v21 || a19 <= 0)
  {
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v33 = cblas_errprn(3, v33, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v33 = cblas_errprn(4, v33, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v33 = cblas_errprn(6, v33, "M cannot be less than zero; it is set to %d.", v21);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v33 = cblas_errprn(5, v33, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v21 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v20 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v33 = cblas_errprn(7, v33, "N cannot be less than zero; it is set to %d.", v20);
LABEL_54:
  if (v33 == 2000)
  {
    if (a1 == 102)
    {
      a9.n128_u32[0] = v19;
      APL_seq_strsm(v25, a3, a4, a5, v21, v20, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
    else
    {
      if (v25 == 141)
        v37 = 142;
      else
        v37 = 141;
      if (a3 == 121)
        v38 = 122;
      else
        v38 = 121;
      a9.n128_u32[0] = v19;
      APL_seq_strsm(v37, v38, a4, a5, v20, v21, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
  }
  else
  {
    cblas_xerbla(v33, "cblas_strsm", "");
  }
}

uint64_t strmm_noPack_RLNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x2_t *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x2_t v33;
  float *v34;
  float v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float *v62;
  unint64_t *v63;
  float v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x2_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x2_t *v81;
  float *v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  float32x4_t v86;
  float *v87;
  float32x2_t v88;
  float *v89;
  float v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t *v112;
  float32x2_t *v113;
  uint64_t v114;
  float32x2_t *v115;
  float *v116;
  unint64_t *v117;
  float v118;
  float32x2_t *v119;
  float32x2_t v120;
  unint64_t *v121;
  float32x2_t v122;
  float32x2_t *v123;
  float32x2_t v124;
  unint64_t *v125;
  float32x2_t v126;
  float32x2_t *v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unsigned __int32 *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x2_t *v135;
  float *v136;
  float *v137;
  float32x4_t v138;
  float *v139;
  float32x4_t v140;
  float *v141;
  float32x2_t v142;
  float *v143;
  float v144;
  unsigned __int32 *v145;
  unsigned __int32 *v146;
  unsigned __int32 *v147;
  float *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  __int32 *v159;
  float32x2_t v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float *v165;
  float *v166;
  uint64_t *v167;
  float v168;
  uint64_t v169;
  float *v170;
  float v171;
  float *v172;
  float v173;
  float v174;
  float *v175;
  float *v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float v181;
  float *v182;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = (float32x4_t *)((char *)v23 + v16);
        v25 = a2 - v19 - 4;
        v26 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 2 + 2];
        v27 = &v23->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v24;
        v30 = v24[1].f32;
        v33 = *v26;
        v32 = (float *)&v26[1];
        v35 = *v27;
        v34 = v27 + 1;
        a11 = *v22;
        v36 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        a13 = *v37;
        v38 = (float32x4_t *)((char *)v37 + v15);
        a14 = *v38;
        v39 = (float32x4_t *)((char *)v38 + v15);
        v40 = vmulq_n_f32(a14, v35);
        v41 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v31, 3), a12, *(float32x2_t *)v31.f32, 1), vmulq_laneq_f32(a13, v31, 2));
        v42 = vaddq_f32(vmulq_lane_f32(a14, v33, 1), vmulq_n_f32(a13, v33.f32[0]));
        v43 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmlaq_n_f32(vmulq_laneq_f32(a13, v29, 2), a11, v29.f32[0]));
        if ((v25 & 1) != 0)
        {
          v44 = *v39;
          v39 = (float32x4_t *)((char *)v39 + v15);
          v45 = *f32++;
          v46 = *v30++;
          v47 = *v32++;
          v48 = *v34++;
          v43 = vmlaq_n_f32(v43, v44, v45);
          v41 = vmlaq_n_f32(v41, v44, v46);
          v42 = vmlaq_n_f32(v42, v44, v47);
          v40 = vmlaq_n_f32(v40, v44, v48);
          v25 = a2 - v19 - 5;
        }
        if (v25)
        {
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v54 = *v39;
            v53 = (float32x4_t *)((char *)v39 + v15);
            v55 = *v53;
            v39 = (float32x4_t *)((char *)v53 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14.i64[0] = *(_QWORD *)v34;
            v34 += 2;
            v43 = vmlaq_n_f32(v43, v54, a11.f32[0]);
            v41 = vmlaq_n_f32(v41, v54, a12.f32[0]);
            v42 = vmlaq_n_f32(v42, v54, a13.f32[0]);
            v40 = vmlaq_n_f32(v40, v54, a14.f32[0]);
            v49 = vmlaq_lane_f32(v49, v55, *(float32x2_t *)a11.f32, 1);
            v50 = vmlaq_lane_f32(v50, v55, *(float32x2_t *)a12.f32, 1);
            v51 = vmlaq_lane_f32(v51, v55, *(float32x2_t *)a13.f32, 1);
            v52 = vmlaq_lane_f32(v52, v55, *(float32x2_t *)a14.f32, 1);
            v56 = v25 <= 2;
            v25 -= 2;
          }
          while (!v56);
          v43 = vaddq_f32(v43, v49);
          v41 = vaddq_f32(v41, v50);
          v42 = vaddq_f32(v42, v51);
          v40 = vaddq_f32(v40, v52);
        }
        v14 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v39 - (a2 - v19) * v15);
        *v57 = vmulq_n_f32(v43, a7);
        v58 = (float32x4_t *)((char *)v57 + v15);
        *v58 = vmulq_n_f32(v41, a7);
        v59 = (float32x4_t *)((char *)v58 + v15);
        *v59 = vmulq_n_f32(v42, a7);
        *(float32x4_t *)((char *)v59 + v15) = v14;
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v56 = v21 <= 4;
        v21 -= 4;
      }
      while (!v56);
    }
    v60 = a2 & 3;
    if (!v20 && v60 != 0)
    {
      v61 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v62 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v60 != 1)
      {
        if (v60 != 2)
        {
          v64 = *v62;
          v63 = (unint64_t *)(v62 + 1);
          a13.i64[0] = *v63;
          v62 = (float *)((char *)v63 + v16);
          v66 = *v61;
          v65 = (float32x4_t *)((char *)v61 + v15);
          v68 = *v65;
          v67 = (float32x4_t *)((char *)v65 + v15);
          a12 = *v67;
          v69 = (float32x4_t *)((char *)v67 - 2 * v15);
          *v69 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v66, v64), vmulq_n_f32(v68, a13.f32[0])), vmulq_lane_f32(a12, *(float32x2_t *)a13.f32, 1)), a7);
          v61 = (float32x4_t *)((char *)v69 + v15);
        }
        v70 = *(float32x2_t *)v62;
        v62 = (float *)((char *)v62 + v16 + 4);
        v72 = *v61;
        v71 = (float32x4_t *)((char *)v61 + v15);
        a11 = *v71;
        v73 = (float32x4_t *)((char *)v71 - v15);
        *v73 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v72, v70.f32[0]), vmulq_lane_f32(a11, v70, 1)), a7);
        v61 = (float32x4_t *)((char *)v73 + v15);
      }
      *v61 = vmulq_n_f32(vmulq_n_f32(*v61, *v62), a7);
    }
    v17 += 4;
    v56 = v18 <= 4;
    v18 -= 4;
  }
  while (!v56);
  v56 = v18 <= -3;
  result = v18 + 3;
  if (!v56)
  {
LABEL_22:
    if (result > 1)
    {
      v74 = 0;
      v75 = __OFSUB__(a2, 3);
      v76 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v77 = (unint64_t *)(a5 + v74 * v15 + 4 * v17);
          v78 = (float32x4_t *)(a3 + v74 * v16 + 4 * v74);
          v79 = (float32x4_t *)((char *)v78 + v16);
          v80 = a2 - v74 - 4;
          v81 = (float32x2_t *)&v78->u32[(unint64_t)v16 / 2 + 2];
          v82 = &v78->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v84 = *v78;
          v83 = v78[1].f32;
          v86 = *v79;
          v85 = v79[1].f32;
          v88 = *v81;
          v87 = (float *)&v81[1];
          v90 = *v82;
          v89 = v82 + 1;
          a11.i64[0] = *v77;
          v91 = (unint64_t *)((char *)v77 + v15);
          a12.i64[0] = *v91;
          v92 = (unint64_t *)((char *)v91 + v15);
          a13.i64[0] = *v92;
          v93 = (unint64_t *)((char *)v92 + v15);
          a14.i64[0] = *v93;
          v94 = (float32x2_t *)((char *)v93 + v15);
          v95 = vmul_n_f32(*(float32x2_t *)a14.f32, v90);
          v96 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v86.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v86, 2));
          v97 = vadd_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, v88, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v88.f32[0]));
          v98 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v84, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v84.f32, 1), vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2), *(float32x2_t *)a11.f32, v84.f32[0]));
          if ((v80 & 1) != 0)
          {
            v99 = *v94;
            v94 = (float32x2_t *)((char *)v94 + v15);
            v100 = *v83++;
            v101 = *v85++;
            v102 = *v87++;
            v103 = *v89++;
            v98 = vmla_n_f32(v98, v99, v100);
            v96 = vmla_n_f32(v96, v99, v101);
            v97 = vmla_n_f32(v97, v99, v102);
            v95 = vmla_n_f32(v95, v99, v103);
            v80 = a2 - v74 - 5;
          }
          if (v80)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v109 = *v94;
              v108 = (float32x2_t *)((char *)v94 + v15);
              v110 = *v108;
              v94 = (float32x2_t *)((char *)v108 + v15);
              a11.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              a12.i64[0] = *(_QWORD *)v85;
              v85 += 2;
              a13.i64[0] = *(_QWORD *)v87;
              v87 += 2;
              a14.i64[0] = *(_QWORD *)v89;
              v89 += 2;
              v98 = vmla_n_f32(v98, v109, a11.f32[0]);
              v96 = vmla_n_f32(v96, v109, a12.f32[0]);
              v97 = vmla_n_f32(v97, v109, a13.f32[0]);
              v95 = vmla_n_f32(v95, v109, a14.f32[0]);
              v104 = vmla_lane_f32(v104, v110, *(float32x2_t *)a11.f32, 1);
              v105 = vmla_lane_f32(v105, v110, *(float32x2_t *)a12.f32, 1);
              v106 = vmla_lane_f32(v106, v110, *(float32x2_t *)a13.f32, 1);
              v107 = vmla_lane_f32(v107, v110, *(float32x2_t *)a14.f32, 1);
              v56 = v80 <= 2;
              v80 -= 2;
            }
            while (!v56);
            v98 = vadd_f32(v98, v104);
            v96 = vadd_f32(v96, v105);
            v97 = vadd_f32(v97, v106);
            v95 = vadd_f32(v95, v107);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v95, a7);
          v111 = (float32x2_t *)((char *)v94 - (a2 - v74) * v15);
          *v111 = vmul_n_f32(v98, a7);
          v112 = (float32x2_t *)((char *)v111 + v15);
          *v112 = vmul_n_f32(v96, a7);
          v113 = (float32x2_t *)((char *)v112 + v15);
          *v113 = vmul_n_f32(v97, a7);
          *(float32x2_t *)((char *)v113 + v15) = *(float32x2_t *)v14.f32;
          v74 += 4;
          v75 = __OFSUB__(v76, 4);
          v56 = v76 <= 4;
          v76 -= 4;
        }
        while (!v56);
      }
      v114 = a2 & 3;
      if (!v75 && v114 != 0)
      {
        v115 = (float32x2_t *)(a5 + v74 * v15 + 4 * v17);
        v116 = (float *)(a3 + v74 * v16 + 4 * v74);
        if (v114 != 1)
        {
          if (v114 != 2)
          {
            v118 = *v116;
            v117 = (unint64_t *)(v116 + 1);
            a13.i64[0] = *v117;
            v116 = (float *)((char *)v117 + v16);
            v120 = *v115;
            v119 = (float32x2_t *)((char *)v115 + v15);
            v122 = *v119;
            v121 = (unint64_t *)((char *)v119 + v15);
            a12.i64[0] = *v121;
            v123 = (float32x2_t *)&v121[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v123 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v120, v118), vmul_n_f32(v122, a13.f32[0])), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1)), a7);
            v115 = (float32x2_t *)((char *)v123 + v15);
          }
          v124 = *(float32x2_t *)v116;
          v116 = (float *)((char *)v116 + v16 + 4);
          v126 = *v115;
          v125 = (unint64_t *)((char *)v115 + v15);
          a11.i64[0] = *v125;
          v127 = (float32x2_t *)((char *)v125 - v15);
          *v127 = vmul_n_f32(vadd_f32(vmul_n_f32(v126, v124.f32[0]), vmul_lane_f32(*(float32x2_t *)a11.f32, v124, 1)), a7);
          v115 = (float32x2_t *)((char *)v127 + v15);
        }
        *v115 = vmul_n_f32(vmul_n_f32(*v115, *v116), a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v128 = 0;
      v129 = __OFSUB__(a2, 3);
      v130 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v131 = (unsigned __int32 *)(a5 + v128 * v15 + 4 * v17);
          v132 = (float32x4_t *)(a3 + v128 * v16 + 4 * v128);
          v133 = (float32x4_t *)((char *)v132 + v16);
          v134 = a2 - v128 - 4;
          v135 = (float32x2_t *)&v132->u32[(unint64_t)v16 / 2 + 2];
          v136 = &v132->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v138 = *v132;
          v137 = v132[1].f32;
          v140 = *v133;
          v139 = v133[1].f32;
          v142 = *v135;
          v141 = (float *)&v135[1];
          v144 = *v136;
          v143 = v136 + 1;
          a11.i32[0] = *v131;
          v145 = &v131[(unint64_t)v15 / 4];
          a12.i32[0] = *v145;
          v146 = &v145[(unint64_t)v15 / 4];
          a13.i32[0] = *v146;
          v147 = &v146[(unint64_t)v15 / 4];
          a14.i32[0] = *v147;
          v148 = (float *)&v147[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v140.i32[0] = 0;
          v149 = vmulq_f32(v138, a11);
          v150 = vmulq_f32(v140, a11);
          v151 = vmul_f32(v142, *(float32x2_t *)a13.f32);
          v14.f32[0] = v144 * a14.f32[0];
          v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
          v153 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
          if ((v134 & 1) != 0)
          {
            v154 = *v148;
            v148 = (float *)((char *)v148 + v15);
            v155 = *v137++;
            v156 = *v139++;
            v157 = *v141++;
            v158 = *v143++;
            v152.f32[0] = vaddv_f32(v152) + (float)(v154 * v155);
            v153.f32[0] = vaddv_f32(v153) + (float)(v154 * v156);
            v151.f32[0] = vaddv_f32(v151) + (float)(v154 * v157);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v154 * v158);
            v134 = a2 - v128 - 5;
          }
          if (v134)
          {
            do
            {
              v160.f32[0] = *v148;
              v159 = (__int32 *)&v148[(unint64_t)v15 / 4];
              v160.i32[1] = *v159;
              v148 = (float *)&v159[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v137;
              v137 += 2;
              a12.i64[0] = *(_QWORD *)v139;
              v139 += 2;
              a13.i64[0] = *(_QWORD *)v141;
              v141 += 2;
              a14.i64[0] = *(_QWORD *)v143;
              v143 += 2;
              v152 = vmla_f32(v152, v160, *(float32x2_t *)a11.f32);
              v153 = vmla_f32(v153, v160, *(float32x2_t *)a12.f32);
              v151 = vmla_f32(v151, v160, *(float32x2_t *)a13.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v160, *(float32x2_t *)a14.f32);
              v56 = v134 <= 2;
              v134 -= 2;
            }
            while (!v56);
          }
          v161 = (float *)((char *)v148 - (a2 - v128) * v15);
          *v161 = vaddv_f32(v152) * a7;
          v162 = &v161[(unint64_t)v15 / 4];
          *v162 = vaddv_f32(v153) * a7;
          v163 = &v162[(unint64_t)v15 / 4];
          *v163 = vaddv_f32(v151) * a7;
          v163[(unint64_t)v15 / 4] = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v128 += 4;
          v129 = __OFSUB__(v130, 4);
          v56 = v130 <= 4;
          v130 -= 4;
        }
        while (!v56);
      }
      v164 = a2 & 3;
      if (!v129 && v164 != 0)
      {
        v165 = (float *)(a5 + v128 * v15 + 4 * v17);
        v166 = (float *)(a3 + v128 * v16 + 4 * v128);
        if (v164 != 1)
        {
          if (v164 != 2)
          {
            v168 = *v166;
            v167 = (uint64_t *)(v166 + 1);
            v169 = *v167;
            v166 = (float *)((char *)v167 + v16);
            v171 = *v165;
            v170 = &v165[(unint64_t)v15 / 4];
            v173 = *v170;
            v172 = &v170[(unint64_t)v15 / 4];
            v174 = *v172;
            v175 = &v172[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v175 = (float)((float)((float)(v168 * v171) + (float)(*(float *)&v169 * v173))
                          + (float)(*((float *)&v169 + 1) * v174))
                  * a7;
            v165 = &v175[(unint64_t)v15 / 4];
          }
          v177 = *v166;
          v176 = v166 + 1;
          v178 = *v176;
          v166 = &v176[(unint64_t)v16 / 4];
          v180 = *v165;
          v179 = &v165[(unint64_t)v15 / 4];
          v181 = *v179;
          v182 = &v179[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v182 = (float)((float)(v177 * v180) + (float)(v178 * v181)) * a7;
          v165 = &v182[(unint64_t)v15 / 4];
        }
        *v165 = (float)(*v165 * *v166) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RLNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, double a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x2_t *v25;
  float *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x2_t *v75;
  float *v76;
  float *v77;
  float *v78;
  float32x4_t v79;
  float *v80;
  float32x2_t v81;
  float *v82;
  float v83;
  unint64_t *v84;
  unint64_t *v85;
  float32x2_t *v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t *v110;
  float32x2_t v111;
  unint64_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  unint64_t *v115;
  float32x2_t v116;
  float32x2_t *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned __int32 *v121;
  float32x4_t *v122;
  uint64_t v123;
  float32x2_t *v124;
  float *v125;
  float *v126;
  float *v127;
  float32x4_t v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  unsigned __int32 *v135;
  float *v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  __int32 *v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float *v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v25 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 4 + 2];
        v26 = &v23->f32[(unint64_t)v16 / 2 + 3];
        v27 = &v23[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v25;
        v30 = (float *)&v25[1];
        v33 = *v26;
        v32 = v26 + 1;
        a11 = *v22;
        v34 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a13 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v38 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        v39 = vmlaq_n_f32(a13, v38, v33);
        v40 = vaddq_f32(vmlaq_lane_f32(a12, v38, v31, 1), vmulq_n_f32(a13, v31.f32[0]));
        v41 = vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a11, v38, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmulq_laneq_f32(a13, v29, 2));
        if ((v24 & 1) != 0)
        {
          v42 = *v37;
          v37 = (float32x4_t *)((char *)v37 + v15);
          v43 = *f32++;
          v44 = *v30++;
          v45 = *v32++;
          v46 = *v27++;
          v41 = vmlaq_n_f32(v41, v42, v43);
          v40 = vmlaq_n_f32(v40, v42, v44);
          v39 = vmlaq_n_f32(v39, v42, v45);
          v38 = vmlaq_n_f32(v38, v42, v46);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          do
          {
            v52 = *v37;
            v51 = (float32x4_t *)((char *)v37 + v15);
            v53 = *v51;
            v37 = (float32x4_t *)((char *)v51 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14 = *(double *)v27;
            v27 += 2;
            v41 = vmlaq_n_f32(v41, v52, a11.f32[0]);
            v40 = vmlaq_n_f32(v40, v52, a12.f32[0]);
            v39 = vmlaq_n_f32(v39, v52, a13.f32[0]);
            v38 = vmlaq_n_f32(v38, v52, *(float *)&a14);
            v47 = vmlaq_lane_f32(v47, v53, *(float32x2_t *)a11.f32, 1);
            v48 = vmlaq_lane_f32(v48, v53, *(float32x2_t *)a12.f32, 1);
            v49 = vmlaq_lane_f32(v49, v53, *(float32x2_t *)a13.f32, 1);
            v50 = vmlaq_lane_f32(v50, v53, *(float32x2_t *)&a14, 1);
            v54 = v24 <= 2;
            v24 -= 2;
          }
          while (!v54);
          v41 = vaddq_f32(v41, v47);
          v40 = vaddq_f32(v40, v48);
          v39 = vaddq_f32(v39, v49);
          v38 = vaddq_f32(v38, v50);
        }
        v14 = vmulq_n_f32(v39, a7);
        v55 = (float32x4_t *)((char *)v37 - (a2 - v19) * v15);
        *v55 = vmulq_n_f32(v41, a7);
        v56 = (float32x4_t *)((char *)v55 + v15);
        *v56 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v56 + v15);
        *v57 = v14;
        *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v38, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v54 = v21 <= 4;
        v21 -= 4;
      }
      while (!v54);
    }
    v58 = a2 & 3;
    if (!v20 && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v60 = (float *)(a3 + v19 * v16 + 4 * v19 + 4);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          a13.i64[0] = *(_QWORD *)v60;
          v60 = (float *)((char *)v60 + v16 + 4);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v15);
          v64 = *v61;
          v63 = (float32x4_t *)((char *)v61 + v15);
          a12 = *v63;
          v65 = (float32x4_t *)((char *)v63 - 2 * v15);
          *v65 = vmulq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(v62, v64, a13.f32[0]), a12, *(float32x2_t *)a13.f32, 1), a7);
          v59 = (float32x4_t *)((char *)v65 + v15);
        }
        v67 = *v59;
        v66 = (float32x4_t *)((char *)v59 + v15);
        a11 = *v66;
        v68 = (float32x4_t *)((char *)v66 - v15);
        *v68 = vmulq_n_f32(vmlaq_n_f32(v67, a11, *v60), a7);
        v59 = (float32x4_t *)((char *)v68 + v15);
      }
      *v59 = vmulq_n_f32(*v59, a7);
    }
    v17 += 4;
    v54 = v18 <= 4;
    v18 -= 4;
  }
  while (!v54);
  v54 = v18 <= -3;
  result = v18 + 3;
  if (!v54)
  {
LABEL_22:
    if (result > 1)
    {
      v69 = 0;
      v70 = __OFSUB__(a2, 3);
      v71 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v72 = (unint64_t *)(a5 + v69 * v15 + 4 * v17);
          v73 = (float32x4_t *)(a3 + v69 * v16 + 4 * v69);
          v74 = a2 - v69 - 4;
          v75 = (float32x2_t *)&v73->u32[(unint64_t)v16 / 4 + 2];
          v76 = &v73->f32[(unint64_t)v16 / 2 + 3];
          v77 = &v73[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v79 = *v73;
          v78 = v73[1].f32;
          v81 = *v75;
          v80 = (float *)&v75[1];
          v83 = *v76;
          v82 = v76 + 1;
          a11.i64[0] = *v72;
          v84 = (unint64_t *)((char *)v72 + v15);
          a12.i64[0] = *v84;
          v85 = (unint64_t *)((char *)v84 + v15);
          a13.i64[0] = *v85;
          v86 = (float32x2_t *)((char *)v85 + v15);
          v88 = *v86;
          v87 = (float32x2_t *)((char *)v86 + v15);
          v89 = vmla_n_f32(*(float32x2_t *)a13.f32, v88, v83);
          v90 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v88, v81, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v81.f32[0]));
          v91 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)a11.f32, v88, v79, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v79.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v79, 2));
          if ((v74 & 1) != 0)
          {
            v92 = *v87;
            v87 = (float32x2_t *)((char *)v87 + v15);
            v93 = *v78++;
            v94 = *v80++;
            v95 = *v82++;
            v96 = *v77++;
            v91 = vmla_n_f32(v91, v92, v93);
            v90 = vmla_n_f32(v90, v92, v94);
            v89 = vmla_n_f32(v89, v92, v95);
            v88 = vmla_n_f32(v88, v92, v96);
            v74 = a2 - v69 - 5;
          }
          if (v74)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v102 = *v87;
              v101 = (float32x2_t *)((char *)v87 + v15);
              v103 = *v101;
              v87 = (float32x2_t *)((char *)v101 + v15);
              a11.i64[0] = *(_QWORD *)v78;
              v78 += 2;
              a12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              a13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              a14 = *(double *)v77;
              v77 += 2;
              v91 = vmla_n_f32(v91, v102, a11.f32[0]);
              v90 = vmla_n_f32(v90, v102, a12.f32[0]);
              v89 = vmla_n_f32(v89, v102, a13.f32[0]);
              v88 = vmla_n_f32(v88, v102, *(float *)&a14);
              v97 = vmla_lane_f32(v97, v103, *(float32x2_t *)a11.f32, 1);
              v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
              v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
              v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)&a14, 1);
              v54 = v74 <= 2;
              v74 -= 2;
            }
            while (!v54);
            v91 = vadd_f32(v91, v97);
            v90 = vadd_f32(v90, v98);
            v89 = vadd_f32(v89, v99);
            v88 = vadd_f32(v88, v100);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v89, a7);
          v104 = (float32x2_t *)((char *)v87 - (a2 - v69) * v15);
          *v104 = vmul_n_f32(v91, a7);
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v90, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = *(float32x2_t *)v14.f32;
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v88, a7);
          v69 += 4;
          v70 = __OFSUB__(v71, 4);
          v54 = v71 <= 4;
          v71 -= 4;
        }
        while (!v54);
      }
      v107 = a2 & 3;
      if (!v70 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v69 * v15 + 4 * v17);
        v109 = (float *)(a3 + v69 * v16 + 4 * v69 + 4);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            a13.i64[0] = *(_QWORD *)v109;
            v109 = (float *)((char *)v109 + v16 + 4);
            v111 = *v108;
            v110 = (float32x2_t *)((char *)v108 + v15);
            v113 = *v110;
            v112 = (unint64_t *)((char *)v110 + v15);
            a12.i64[0] = *v112;
            v114 = (float32x2_t *)&v112[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v114 = vmul_n_f32(vmla_lane_f32(vmla_n_f32(v111, v113, a13.f32[0]), *(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1), a7);
            v108 = (float32x2_t *)((char *)v114 + v15);
          }
          v116 = *v108;
          v115 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v115;
          v117 = (float32x2_t *)((char *)v115 - v15);
          *v117 = vmul_n_f32(vmla_n_f32(v116, *(float32x2_t *)a11.f32, *v109), a7);
          v108 = (float32x2_t *)((char *)v117 + v15);
        }
        *v108 = vmul_n_f32(*v108, a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v118 = 0;
      v119 = __OFSUB__(a2, 3);
      v120 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v121 = (unsigned __int32 *)(a5 + v118 * v15 + 4 * v17);
          v122 = (float32x4_t *)(a3 + v118 * v16 + 4 * v118);
          v123 = a2 - v118 - 4;
          v124 = (float32x2_t *)&v122->u32[(unint64_t)v16 / 4 + 2];
          v125 = &v122->f32[(unint64_t)v16 / 2 + 3];
          v126 = &v122[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v128 = *v122;
          v127 = v122[1].f32;
          v130 = *v124;
          v129 = (float *)&v124[1];
          v132 = *v125;
          v131 = v125 + 1;
          a11.i32[0] = *v121;
          v133 = &v121[(unint64_t)v15 / 4];
          a12.i32[0] = *v133;
          v134 = &v133[(unint64_t)v15 / 4];
          a13.i32[0] = *v134;
          v135 = &v134[(unint64_t)v15 / 4];
          LODWORD(a14) = *v135;
          v136 = (float *)&v135[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)&a14);
          a11.i64[1] = a13.i64[0];
          v128.i32[0] = 0;
          v137 = vmulq_f32(v128, a11);
          v139 = vmul_f32(v130, *(float32x2_t *)a13.f32);
          v138 = (float32x2_t)LODWORD(a14);
          v140 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
          v139.f32[0] = vaddv_f32(v139) + a12.f32[0];
          v14.f32[0] = (float)(v132 * *(float *)&a14) + a13.f32[0];
          v140.f32[0] = vaddv_f32(v140) + a11.f32[0];
          if ((v123 & 1) != 0)
          {
            v141 = *v136;
            v136 = (float *)((char *)v136 + v15);
            v142 = *v127++;
            v143 = *v129++;
            v144 = *v131++;
            v145 = *v126++;
            v140.f32[0] = vaddv_f32(v140) + (float)(v141 * v142);
            v139.f32[0] = vaddv_f32(v139) + (float)(v141 * v143);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v141 * v144);
            v138.f32[0] = vaddv_f32(v138) + (float)(v141 * v145);
            v123 = a2 - v118 - 5;
          }
          if (v123)
          {
            do
            {
              v147.f32[0] = *v136;
              v146 = (__int32 *)&v136[(unint64_t)v15 / 4];
              v147.i32[1] = *v146;
              v136 = (float *)&v146[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v127;
              v127 += 2;
              a12.i64[0] = *(_QWORD *)v129;
              v129 += 2;
              a13.i64[0] = *(_QWORD *)v131;
              v131 += 2;
              a14 = *(double *)v126;
              v126 += 2;
              v140 = vmla_f32(v140, v147, *(float32x2_t *)a11.f32);
              v139 = vmla_f32(v139, v147, *(float32x2_t *)a12.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v147, *(float32x2_t *)a13.f32);
              v138 = vmla_f32(v138, v147, *(float32x2_t *)&a14);
              v54 = v123 <= 2;
              v123 -= 2;
            }
            while (!v54);
          }
          v148 = (float *)((char *)v136 - (a2 - v118) * v15);
          *v148 = vaddv_f32(v140) * a7;
          v149 = &v148[(unint64_t)v15 / 4];
          *v149 = vaddv_f32(v139) * a7;
          v150 = &v149[(unint64_t)v15 / 4];
          *v150 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v150[(unint64_t)v15 / 4] = vaddv_f32(v138) * a7;
          v118 += 4;
          v119 = __OFSUB__(v120, 4);
          v54 = v120 <= 4;
          v120 -= 4;
        }
        while (!v54);
      }
      v151 = a2 & 3;
      if (!v119 && v151 != 0)
      {
        v152 = (float *)(a5 + v118 * v15 + 4 * v17);
        v153 = (float *)(a3 + v118 * v16 + 4 * v118 + 4);
        if (v151 != 1)
        {
          if (v151 != 2)
          {
            v154 = *(_QWORD *)v153;
            v153 = (float *)((char *)v153 + v16 + 4);
            v156 = *v152;
            v155 = &v152[(unint64_t)v15 / 4];
            v158 = *v155;
            v157 = &v155[(unint64_t)v15 / 4];
            v159 = *v157;
            v160 = &v157[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v160 = (float)((float)(v156 + (float)(*(float *)&v154 * v158)) + (float)(*((float *)&v154 + 1) * v159))
                  * a7;
            v152 = &v160[(unint64_t)v15 / 4];
          }
          v162 = *v152;
          v161 = &v152[(unint64_t)v15 / 4];
          v163 = *v161;
          v164 = &v161[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v164 = (float)(v162 + (float)(*v153 * v163)) * a7;
          v152 = &v164[(unint64_t)v15 / 4];
        }
        *v152 = *v152 * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RLTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL i;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  float32x4_t *v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  BOOL j;
  float32x2_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t *v98;
  float32x2_t *v99;
  uint64_t v100;
  float32x2_t *v101;
  float *v102;
  float *v103;
  float v104;
  float *v105;
  float v106;
  float32x2_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float32x2_t *v114;
  float32x2_t v115;
  uint64_t v116;
  BOOL k;
  float *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  uint64_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float *v126;
  float v127;
  float *v128;
  float v129;
  float *v130;
  float v131;
  float v132;
  float *v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float *v141;
  float v142;
  float v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  __int32 *v152;
  __int32 *v153;
  float32x2_t v154;
  float v155;
  __int32 *v156;
  float32x2_t v157;
  float *v158;
  float v159;
  float v160;
  float *v161;
  float v162;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (result <= 3)
    goto LABEL_21;
  v10 = result - 3;
  do
  {
    v11 = a2;
    for (i = __OFSUB__(a2, 3); v11 > 3; i = __OFSUB__(v11, 3))
    {
      v11 -= 4;
      v13 = (float32x4_t *)(a5 + v11 * v7 + 4 * v9);
      v14 = (float32x4_t *)(a3 + 4 * v11);
      v15 = (float32x4_t *)((char *)v14 + v11 * v8);
      v16 = v11;
      v18 = *v15;
      v17 = (float32x4_t *)((char *)v15 + v8);
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v22 = *v13;
      v21 = (float32x4_t *)((char *)v13 + v7);
      v24 = *v21;
      v23 = (float32x4_t *)((char *)v21 + v7);
      v26 = *v23;
      v25 = (float32x4_t *)((char *)v23 + v7);
      v27 = *v25;
      v28 = (float32x4_t *)((char *)v25 + v7 - v11 * v7 + -4 * v7);
      v29 = vmulq_n_f32(v22, v18.f32[0]);
      v30 = vaddq_f32(vmulq_lane_f32(v22, *(float32x2_t *)v18.f32, 1), vmulq_lane_f32(v24, *(float32x2_t *)v19.f32, 1));
      v31 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v22, v18, 2), v26, COERCE_FLOAT(*v20)), vmulq_laneq_f32(v24, v19, 2));
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v22, v18, 3), v26, *v20, 1), vmlaq_n_f32(vmulq_laneq_f32(v24, v19, 3), v27, v20->f32[(unint64_t)v8 / 4 + 1]));
      if ((v11 & 1) != 0)
      {
        v33 = *v28;
        v28 = (float32x4_t *)((char *)v28 + v7);
        v34 = *v14;
        v14 = (float32x4_t *)((char *)v14 + v8);
        v29 = vmlaq_n_f32(v29, v33, v34.f32[0]);
        v30 = vmlaq_lane_f32(v30, v33, *(float32x2_t *)v34.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v33, v34, 2);
        v32 = vmlaq_laneq_f32(v32, v33, v34, 3);
        v16 = v11 - 1;
      }
      if (v16)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v28;
          v39 = (float32x4_t *)((char *)v28 + v7);
          v41 = *v39;
          v28 = (float32x4_t *)((char *)v39 + v7);
          v43 = *v14;
          v42 = (float32x4_t *)((char *)v14 + v8);
          v44 = *v42;
          v14 = (float32x4_t *)((char *)v42 + v8);
          v29 = vmlaq_n_f32(v29, v40, v43.f32[0]);
          v30 = vmlaq_lane_f32(v30, v40, *(float32x2_t *)v43.f32, 1);
          v31 = vmlaq_laneq_f32(v31, v40, v43, 2);
          v32 = vmlaq_laneq_f32(v32, v40, v43, 3);
          v35 = vmlaq_n_f32(v35, v41, v44.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)v44.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, v44, 2);
          v38 = vmlaq_laneq_f32(v38, v41, v44, 3);
          v45 = v16 <= 2;
          v16 -= 2;
        }
        while (!v45);
        v29 = vaddq_f32(v29, v35);
        v30 = vaddq_f32(v30, v36);
        v31 = vaddq_f32(v31, v37);
        v32 = vaddq_f32(v32, v38);
      }
      *v28 = vmulq_n_f32(v29, a7);
      v46 = (float32x4_t *)((char *)v28 + v7);
      *v46 = vmulq_n_f32(v30, a7);
      v47 = (float32x4_t *)((char *)v46 + v7);
      *v47 = vmulq_n_f32(v31, a7);
      *(float32x4_t *)((char *)v47 + v7) = vmulq_n_f32(v32, a7);
    }
    v48 = a2 & 3;
    if (!i && v48 != 0)
    {
      v49 = (float32x4_t *)(a5 + 4 * v9);
      v50 = (float *)(a3 + 4 * (v11 - 1));
      if (v48 != 1)
      {
        if (v48 != 2)
        {
          v52 = *v50;
          v51 = &v50[(unint64_t)v8 / 4];
          v54 = *v51;
          v53 = &v51[(unint64_t)v8 / 4];
          v56 = *v49;
          v55 = (float32x4_t *)((char *)v49 + v7);
          v58 = *v55;
          v57 = (float32x4_t *)((char *)v55 + v7);
          v59 = *v53;
          v50 = &v53[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
          *v57 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v56, v52), vmulq_n_f32(v58, v54)), vmulq_n_f32(*v57, v59)), a7);
          v49 = (float32x4_t *)((char *)v57 - 2 * v7);
        }
        v60 = *v50;
        v61 = v50[(unint64_t)v8 / 4];
        v63 = *v49;
        v62 = (float32x4_t *)((char *)v49 + v7);
        --v50;
        *v62 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v63, v60), vmulq_n_f32(*v62, v61)), a7);
        v49 = (float32x4_t *)((char *)v62 - v7);
      }
      *v49 = vmulq_n_f32(vmulq_n_f32(*v49, *v50), a7);
    }
    v9 += 4;
    v45 = v10 <= 4;
    v10 -= 4;
  }
  while (!v45);
  v45 = v10 <= -3;
  result = v10 + 3;
  if (!v45)
  {
LABEL_21:
    if (result > 1)
    {
      v64 = a2;
      for (j = __OFSUB__(a2, 3); v64 > 3; j = __OFSUB__(v64, 3))
      {
        v64 -= 4;
        v66 = (float32x2_t *)(a5 + v64 * v7 + 4 * v9);
        v67 = (float32x4_t *)(a3 + 4 * v64);
        v68 = (float32x4_t *)((char *)v67 + v64 * v8);
        v69 = v64;
        v71 = *v68;
        v70 = (float32x4_t *)((char *)v68 + v8);
        v72 = *v70;
        v73 = (float32x2_t *)&v70->u32[(unint64_t)v8 / 4 + 2];
        v75 = *v66;
        v74 = (float32x2_t *)((char *)v66 + v7);
        v77 = *v74;
        v76 = (float32x2_t *)((char *)v74 + v7);
        v79 = *v76;
        v78 = (float32x2_t *)((char *)v76 + v7);
        v80 = *v78;
        v81 = (float32x2_t *)((char *)v78 + v7 - v64 * v7 + -4 * v7);
        v82 = vmul_n_f32(v75, v71.f32[0]);
        v83 = vadd_f32(vmul_lane_f32(v75, *(float32x2_t *)v71.f32, 1), vmul_lane_f32(v77, *(float32x2_t *)v72.f32, 1));
        v84 = vadd_f32(vmla_n_f32(vmul_laneq_f32(v75, v71, 2), v79, COERCE_FLOAT(*v73)), vmul_laneq_f32(v77, v72, 2));
        v85 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v75, v71, 3), v79, *v73, 1), vmla_n_f32(vmul_laneq_f32(v77, v72, 3), v80, v73->f32[(unint64_t)v8 / 4 + 1]));
        if ((v64 & 1) != 0)
        {
          v86 = *v81;
          v81 = (float32x2_t *)((char *)v81 + v7);
          v87 = *v67;
          v67 = (float32x4_t *)((char *)v67 + v8);
          v82 = vmla_n_f32(v82, v86, v87.f32[0]);
          v83 = vmla_lane_f32(v83, v86, *(float32x2_t *)v87.f32, 1);
          v84 = vmla_laneq_f32(v84, v86, v87, 2);
          v85 = vmla_laneq_f32(v85, v86, v87, 3);
          v69 = v64 - 1;
        }
        if (v69)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v91 = 0;
          do
          {
            v93 = *v81;
            v92 = (float32x2_t *)((char *)v81 + v7);
            v94 = *v92;
            v81 = (float32x2_t *)((char *)v92 + v7);
            v96 = *v67;
            v95 = (float32x4_t *)((char *)v67 + v8);
            v97 = *v95;
            v67 = (float32x4_t *)((char *)v95 + v8);
            v82 = vmla_n_f32(v82, v93, v96.f32[0]);
            v83 = vmla_lane_f32(v83, v93, *(float32x2_t *)v96.f32, 1);
            v84 = vmla_laneq_f32(v84, v93, v96, 2);
            v85 = vmla_laneq_f32(v85, v93, v96, 3);
            v88 = vmla_n_f32(v88, v94, v97.f32[0]);
            v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)v97.f32, 1);
            v90 = vmla_laneq_f32(v90, v94, v97, 2);
            v91 = vmla_laneq_f32(v91, v94, v97, 3);
            v45 = v69 <= 2;
            v69 -= 2;
          }
          while (!v45);
          v82 = vadd_f32(v82, v88);
          v83 = vadd_f32(v83, v89);
          v84 = vadd_f32(v84, v90);
          v85 = vadd_f32(v85, v91);
        }
        *v81 = vmul_n_f32(v82, a7);
        v98 = (float32x2_t *)((char *)v81 + v7);
        *v98 = vmul_n_f32(v83, a7);
        v99 = (float32x2_t *)((char *)v98 + v7);
        *v99 = vmul_n_f32(v84, a7);
        *(float32x2_t *)((char *)v99 + v7) = vmul_n_f32(v85, a7);
      }
      v100 = a2 & 3;
      if (!j && v100 != 0)
      {
        v101 = (float32x2_t *)(a5 + 4 * v9);
        v102 = (float *)(a3 + 4 * (v64 - 1));
        if (v100 != 1)
        {
          if (v100 != 2)
          {
            v104 = *v102;
            v103 = &v102[(unint64_t)v8 / 4];
            v106 = *v103;
            v105 = &v103[(unint64_t)v8 / 4];
            v108 = *v101;
            v107 = (float32x2_t *)((char *)v101 + v7);
            v110 = *v107;
            v109 = (float32x2_t *)((char *)v107 + v7);
            v111 = *v105;
            v102 = &v105[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
            *v109 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v108, v104), vmul_n_f32(v110, v106)), vmul_n_f32(*v109, v111)), a7);
            v101 = &v109[v7 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v112 = *v102;
          v113 = v102[(unint64_t)v8 / 4];
          --v102;
          v115 = *v101;
          v114 = (float32x2_t *)((char *)v101 + v7);
          *v114 = vmul_n_f32(vadd_f32(vmul_n_f32(v115, v112), vmul_n_f32(*v114, v113)), a7);
          v101 = (float32x2_t *)((char *)v114 - v7);
        }
        *v101 = vmul_n_f32(vmul_n_f32(*v101, *v102), a7);
      }
      v9 += 2;
      result -= 2;
    }
    if (result)
    {
      v116 = a2;
      for (k = __OFSUB__(a2, 3); v116 > 3; k = __OFSUB__(v116, 3))
      {
        v116 -= 4;
        v118 = (float *)(a5 + v116 * v7 + 4 * v9);
        v119 = (float32x4_t *)(a3 + 4 * v116);
        v120 = (float32x4_t *)((char *)v119 + v116 * v8);
        v121 = v116;
        v123 = *v120;
        v122 = (float32x4_t *)((char *)v120 + v8);
        v124 = *v122;
        v125 = (float32x2_t *)&v122->u32[(unint64_t)v8 / 4 + 2];
        v127 = *v118;
        v126 = &v118[(unint64_t)v7 / 4];
        v129 = *v126;
        v128 = &v126[(unint64_t)v7 / 4];
        v131 = *v128;
        v130 = &v128[(unint64_t)v7 / 4];
        v132 = *v130;
        v133 = (float *)((char *)&v130[(unint64_t)v7 / 4] - v116 * v7 + -4 * v7);
        v124.i32[0] = 0;
        v134.i32[0] = 0;
        v134.f32[1] = v125->f32[(unint64_t)v8 / 4 + 1] * v132;
        v135 = vadd_f32(v134, vmul_n_f32(*v125, v131));
        v136.i64[0] = 0;
        *(float32x2_t *)&v136.u32[2] = v135;
        v137 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v123, v127), v124, v129), v136);
        if ((v116 & 1) != 0)
        {
          v138 = *v133;
          v133 = (float *)((char *)v133 + v7);
          v139 = *v119;
          v119 = (float32x4_t *)((char *)v119 + v8);
          v137 = vmlaq_n_f32(v137, v139, v138);
          v121 = v116 - 1;
        }
        if (v121)
        {
          v140 = 0uLL;
          do
          {
            v142 = *v133;
            v141 = &v133[(unint64_t)v7 / 4];
            v143 = *v141;
            v133 = &v141[(unint64_t)v7 / 4];
            v145 = *v119;
            v144 = (float32x4_t *)((char *)v119 + v8);
            v146 = *v144;
            v119 = (float32x4_t *)((char *)v144 + v8);
            v137 = vmlaq_n_f32(v137, v145, v142);
            v140 = vmlaq_n_f32(v140, v146, v143);
            v45 = v121 <= 2;
            v121 -= 2;
          }
          while (!v45);
          v137 = vaddq_f32(v137, v140);
        }
        v147 = vmulq_n_f32(v137, a7);
        *v133 = v147.f32[0];
        v148 = &v133[(unint64_t)v7 / 4];
        *v148 = v147.f32[1];
        v149 = &v148[(unint64_t)v7 / 4];
        *v149 = v147.f32[2];
        v149[(unint64_t)v7 / 4] = v147.f32[3];
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v9);
        v152 = (__int32 *)(a3 + 4 * (v116 - 1));
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v154.i32[0] = *v152;
            v153 = &v152[(unint64_t)v8 / 4];
            v154.i32[1] = *v153;
            v155 = *(float *)&v153[(unint64_t)v8 / 4];
            v152 = &v153[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v157.i32[0] = *v151;
            v156 = &v151[(unint64_t)v7 / 4];
            v157.i32[1] = *v156;
            v158 = (float *)&v156[(unint64_t)v7 / 4];
            *v158 = (float)(vaddv_f32(vmul_f32(v157, v154)) + (float)(v155 * *v158)) * a7;
            v151 = (__int32 *)&v158[v7 / 0xFFFFFFFFFFFFFFFELL];
          }
          v159 = *(float *)v152;
          v160 = *(float *)&v152[(unint64_t)v8 / 4];
          --v152;
          v162 = *(float *)v151;
          v161 = (float *)&v151[(unint64_t)v7 / 4];
          *v161 = (float)((float)(v162 * v159) + (float)(*v161 * v160)) * a7;
          v151 = (__int32 *)&v161[v7 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = (float)(*(float *)v151 * *(float *)v152) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RLTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL i;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  BOOL v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float *v48;
  float v49;
  float v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  BOOL j;
  float32x2_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x2_t *v64;
  unint64_t *v65;
  float32x2_t v66;
  unint64_t *v67;
  unint64_t *v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  uint64_t v84;
  float32x2_t *v85;
  float *v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  uint64_t v95;
  BOOL k;
  unsigned __int32 *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  float32x2_t *v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  unsigned __int32 *v105;
  float *v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float32x4_t v113;
  float *v114;
  float v115;
  float v116;
  float32x4_t *v117;
  float32x4_t v118;
  float *v119;
  float *v120;
  uint64_t v121;
  __int32 *v122;
  __int32 *v123;
  __int32 *v124;
  float32x2_t v125;
  __int32 *v126;
  float32x2_t v127;
  float *v128;
  float *v129;
  float v130;

  v14 = 4 * a6;
  v15 = 4 * a4;
  v16 = 0;
  if (result <= 3)
    goto LABEL_21;
  v17 = result - 3;
  do
  {
    v18 = a2;
    for (i = __OFSUB__(a2, 3); v18 > 3; i = __OFSUB__(v18, 3))
    {
      v18 -= 4;
      v20 = (float32x4_t *)(a5 + v18 * v14 + 4 * v16);
      v21 = (float32x4_t *)(a3 + 4 * v18);
      v22 = (float32x4_t *)((char *)v21 + v18 * v15);
      v23 = v18;
      v24 = *v22;
      v25 = (float32x2_t *)&v22->u32[(unint64_t)v15 / 4 + 2];
      v27 = *v20;
      v26 = (float32x4_t *)((char *)v20 + v14);
      a12 = *v26;
      v28 = (float32x4_t *)((char *)v26 + v14);
      a13 = *v28;
      v29 = (float32x4_t *)((char *)v28 + v14);
      a14 = *v29;
      v30 = (float32x4_t *)((char *)v29 + v14 - v18 * v14 + -4 * v14);
      v31 = vmlaq_lane_f32(a12, v27, *(float32x2_t *)v24.f32, 1);
      v32 = vaddq_f32(vmlaq_laneq_f32(a13, v27, v24, 2), vmulq_n_f32(a12, COERCE_FLOAT(*v25)));
      v33 = vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32(a14, v27, v24, 3), a13, v25->f32[(unint64_t)v15 / 4 + 1]), vmulq_lane_f32(a12, *v25, 1));
      if ((v18 & 1) != 0)
      {
        v34 = *v30;
        v30 = (float32x4_t *)((char *)v30 + v14);
        a11 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v15);
        v27 = vmlaq_n_f32(v27, v34, a11.f32[0]);
        v31 = vmlaq_lane_f32(v31, v34, *(float32x2_t *)a11.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v34, a11, 2);
        v33 = vmlaq_laneq_f32(v33, v34, a11, 3);
        v23 = v18 - 1;
      }
      if (v23)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v30;
          v39 = (float32x4_t *)((char *)v30 + v14);
          v41 = *v39;
          v30 = (float32x4_t *)((char *)v39 + v14);
          a11 = *v21;
          v42 = (float32x4_t *)((char *)v21 + v15);
          a12 = *v42;
          v21 = (float32x4_t *)((char *)v42 + v15);
          v27 = vmlaq_n_f32(v27, v40, a11.f32[0]);
          v31 = vmlaq_lane_f32(v31, v40, *(float32x2_t *)a11.f32, 1);
          v32 = vmlaq_laneq_f32(v32, v40, a11, 2);
          v33 = vmlaq_laneq_f32(v33, v40, a11, 3);
          v35 = vmlaq_n_f32(v35, v41, a12.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)a12.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, a12, 2);
          v38 = vmlaq_laneq_f32(v38, v41, a12, 3);
          v43 = v23 <= 2;
          v23 -= 2;
        }
        while (!v43);
        v27 = vaddq_f32(v27, v35);
        v31 = vaddq_f32(v31, v36);
        v32 = vaddq_f32(v32, v37);
        v33 = vaddq_f32(v33, v38);
      }
      *v30 = vmulq_n_f32(v27, a7);
      v44 = (float32x4_t *)((char *)v30 + v14);
      *v44 = vmulq_n_f32(v31, a7);
      v45 = (float32x4_t *)((char *)v44 + v14);
      *v45 = vmulq_n_f32(v32, a7);
      *(float32x4_t *)((char *)v45 + v14) = vmulq_n_f32(v33, a7);
    }
    v46 = a2 & 3;
    if (!i && v46 != 0)
    {
      v47 = (float32x4_t *)(a5 + 4 * v16);
      v48 = (float *)(a3 + 4 * (v18 - 1));
      if (v46 != 1)
      {
        if (v46 != 2)
        {
          v49 = *v48;
          v50 = v48[(unint64_t)v15 / 4];
          v52 = *v47;
          v51 = (float32x4_t *)((char *)v47 + v14);
          v54 = *v51;
          v53 = (float32x4_t *)((char *)v51 + v14);
          --v48;
          a12 = vmlaq_n_f32(*v53, v52, v49);
          *v53 = vmulq_n_f32(vaddq_f32(a12, vmulq_n_f32(v54, v50)), a7);
          v47 = (float32x4_t *)((char *)v53 - 2 * v14);
        }
        v56 = *v47;
        v55 = (float32x4_t *)((char *)v47 + v14);
        a11 = vmlaq_n_f32(*v55, v56, *v48);
        *v55 = vmulq_n_f32(a11, a7);
        v47 = (float32x4_t *)((char *)v55 - v14);
      }
      *v47 = vmulq_n_f32(*v47, a7);
    }
    v16 += 4;
    v43 = v17 <= 4;
    v17 -= 4;
  }
  while (!v43);
  v43 = v17 <= -3;
  result = v17 + 3;
  if (!v43)
  {
LABEL_21:
    if (result > 1)
    {
      v57 = a2;
      for (j = __OFSUB__(a2, 3); v57 > 3; j = __OFSUB__(v57, 3))
      {
        v57 -= 4;
        v59 = (float32x2_t *)(a5 + v57 * v14 + 4 * v16);
        v60 = (float32x4_t *)(a3 + 4 * v57);
        v61 = (float32x4_t *)((char *)v60 + v57 * v15);
        v62 = v57;
        v63 = *v61;
        v64 = (float32x2_t *)&v61->u32[(unint64_t)v15 / 4 + 2];
        v66 = *v59;
        v65 = (unint64_t *)((char *)v59 + v14);
        a12.i64[0] = *v65;
        v67 = (unint64_t *)((char *)v65 + v14);
        a13.i64[0] = *v67;
        v68 = (unint64_t *)((char *)v67 + v14);
        a14.i64[0] = *v68;
        v69 = (float32x2_t *)((char *)v68 + v14 - v57 * v14 + -4 * v14);
        v70 = vmla_lane_f32(*(float32x2_t *)a12.f32, v66, *(float32x2_t *)v63.f32, 1);
        v71 = vadd_f32(vmla_laneq_f32(*(float32x2_t *)a13.f32, v66, v63, 2), vmul_n_f32(*(float32x2_t *)a12.f32, COERCE_FLOAT(*v64)));
        v72 = vadd_f32(vmla_n_f32(vmla_laneq_f32(*(float32x2_t *)a14.f32, v66, v63, 3), *(float32x2_t *)a13.f32, v64->f32[(unint64_t)v15 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)a12.f32, *v64, 1));
        if ((v57 & 1) != 0)
        {
          v73 = *v69;
          v69 = (float32x2_t *)((char *)v69 + v14);
          a11 = *v60;
          v60 = (float32x4_t *)((char *)v60 + v15);
          v66 = vmla_n_f32(v66, v73, a11.f32[0]);
          v70 = vmla_lane_f32(v70, v73, *(float32x2_t *)a11.f32, 1);
          v71 = vmla_laneq_f32(v71, v73, a11, 2);
          v72 = vmla_laneq_f32(v72, v73, a11, 3);
          v62 = v57 - 1;
        }
        if (v62)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v79 = *v69;
            v78 = (float32x2_t *)((char *)v69 + v14);
            v80 = *v78;
            v69 = (float32x2_t *)((char *)v78 + v14);
            a11 = *v60;
            v81 = (float32x4_t *)((char *)v60 + v15);
            a12 = *v81;
            v60 = (float32x4_t *)((char *)v81 + v15);
            v66 = vmla_n_f32(v66, v79, a11.f32[0]);
            v70 = vmla_lane_f32(v70, v79, *(float32x2_t *)a11.f32, 1);
            v71 = vmla_laneq_f32(v71, v79, a11, 2);
            v72 = vmla_laneq_f32(v72, v79, a11, 3);
            v74 = vmla_n_f32(v74, v80, a12.f32[0]);
            v75 = vmla_lane_f32(v75, v80, *(float32x2_t *)a12.f32, 1);
            v76 = vmla_laneq_f32(v76, v80, a12, 2);
            v77 = vmla_laneq_f32(v77, v80, a12, 3);
            v43 = v62 <= 2;
            v62 -= 2;
          }
          while (!v43);
          v66 = vadd_f32(v66, v74);
          v70 = vadd_f32(v70, v75);
          v71 = vadd_f32(v71, v76);
          v72 = vadd_f32(v72, v77);
        }
        *v69 = vmul_n_f32(v66, a7);
        v82 = (float32x2_t *)((char *)v69 + v14);
        *v82 = vmul_n_f32(v70, a7);
        v83 = (float32x2_t *)((char *)v82 + v14);
        *v83 = vmul_n_f32(v71, a7);
        *(float32x2_t *)((char *)v83 + v14) = vmul_n_f32(v72, a7);
      }
      v84 = a2 & 3;
      if (!j && v84 != 0)
      {
        v85 = (float32x2_t *)(a5 + 4 * v16);
        v86 = (float *)(a3 + 4 * (v57 - 1));
        if (v84 != 1)
        {
          if (v84 != 2)
          {
            v87 = *v86;
            v88 = v86[(unint64_t)v15 / 4];
            v90 = *v85;
            v89 = (float32x2_t *)((char *)v85 + v14);
            v92 = *v89;
            v91 = (float32x2_t *)((char *)v89 + v14);
            --v86;
            *(float32x2_t *)a12.f32 = vmla_n_f32(*v91, v90, v87);
            *v91 = vmul_n_f32(vadd_f32(*(float32x2_t *)a12.f32, vmul_n_f32(v92, v88)), a7);
            v85 = &v91[v14 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v94 = *v85;
          v93 = (float32x2_t *)((char *)v85 + v14);
          *(float32x2_t *)a11.f32 = vmla_n_f32(*v93, v94, *v86);
          *v93 = vmul_n_f32(*(float32x2_t *)a11.f32, a7);
          v85 = (float32x2_t *)((char *)v93 - v14);
        }
        *v85 = vmul_n_f32(*v85, a7);
      }
      v16 += 2;
      result -= 2;
    }
    if (result)
    {
      v95 = a2;
      for (k = __OFSUB__(a2, 3); v95 > 3; k = __OFSUB__(v95, 3))
      {
        v95 -= 4;
        v97 = (unsigned __int32 *)(a5 + v95 * v14 + 4 * v16);
        v98 = (float32x4_t *)(a3 + 4 * v95);
        v99 = (float32x4_t *)((char *)v98 + v95 * v15);
        v100 = v95;
        v101 = *v99;
        v102 = (float32x2_t *)&v99->u32[(unint64_t)v15 / 4 + 2];
        a11.i32[0] = *v97;
        v103 = &v97[(unint64_t)v14 / 4];
        a12.i32[0] = *v103;
        v104 = &v103[(unint64_t)v14 / 4];
        a13.i32[0] = *v104;
        v105 = &v104[(unint64_t)v14 / 4];
        a14.i32[0] = *v105;
        v106 = (float *)((char *)&v105[(unint64_t)v14 / 4] - v95 * v14 + -4 * v14);
        v101.i32[0] = 0;
        *(int32x2_t *)v107.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)&v107.u32[2] = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v108.i32[0] = 0;
        v108.f32[1] = v102->f32[(unint64_t)v15 / 4 + 1] * a13.f32[0];
        v109 = vadd_f32(v108, vmul_n_f32(*v102, a12.f32[0]));
        v110.i64[0] = 0;
        *(float32x2_t *)&v110.u32[2] = v109;
        v111 = vaddq_f32(vaddq_f32(vmulq_n_f32(v101, a11.f32[0]), v107), v110);
        if ((v95 & 1) != 0)
        {
          v112 = *v106;
          v106 = (float *)((char *)v106 + v14);
          a11 = *v98;
          v98 = (float32x4_t *)((char *)v98 + v15);
          v111 = vmlaq_n_f32(v111, a11, v112);
          v100 = v95 - 1;
        }
        if (v100)
        {
          v113 = 0uLL;
          do
          {
            v115 = *v106;
            v114 = &v106[(unint64_t)v14 / 4];
            v116 = *v114;
            v106 = &v114[(unint64_t)v14 / 4];
            a11 = *v98;
            v117 = (float32x4_t *)((char *)v98 + v15);
            a12 = *v117;
            v98 = (float32x4_t *)((char *)v117 + v15);
            v111 = vmlaq_n_f32(v111, a11, v115);
            v113 = vmlaq_n_f32(v113, a12, v116);
            v43 = v100 <= 2;
            v100 -= 2;
          }
          while (!v43);
          v111 = vaddq_f32(v111, v113);
        }
        v118 = vmulq_n_f32(v111, a7);
        *v106 = v118.f32[0];
        v119 = &v106[(unint64_t)v14 / 4];
        *v119 = v118.f32[1];
        v120 = &v119[(unint64_t)v14 / 4];
        *v120 = v118.f32[2];
        v120[(unint64_t)v14 / 4] = v118.f32[3];
      }
      v121 = a2 & 3;
      if (!k && v121 != 0)
      {
        v122 = (__int32 *)(a5 + 4 * v16);
        v123 = (__int32 *)(a3 + 4 * (v95 - 1));
        if (v121 != 1)
        {
          if (v121 != 2)
          {
            v125.i32[0] = *v123;
            v124 = &v123[(unint64_t)v15 / 4];
            v125.i32[1] = *v124;
            v123 = &v124[v15 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v127.i32[0] = *v122;
            v126 = &v122[(unint64_t)v14 / 4];
            v127.i32[1] = *v126;
            v128 = (float *)&v126[(unint64_t)v14 / 4];
            *v128 = (float)(vaddv_f32(vmul_f32(v127, v125)) + *v128) * a7;
            v122 = (__int32 *)&v128[v14 / 0xFFFFFFFFFFFFFFFELL];
          }
          v130 = *(float *)v122;
          v129 = (float *)&v122[(unint64_t)v14 / 4];
          *v129 = (float)((float)(v130 * *(float *)v123) + *v129) * a7;
          v122 = (__int32 *)&v129[v14 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v122 = *(float *)v122 * a7;
      }
    }
  }
  return result;
}

double *dgebpScale_1M4N(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64_t *v18;
  float64_t *v19;

  if (a5 >= 1)
  {
    v7 = a4;
    do
    {
      v8 = a6;
      v9 = a2;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v11 = &a3[v7 + v7];
      v12.f64[0] = *v11;
      v12.f64[1] = v11[a4];
      v13 = vmulq_n_f64(v10, a7);
      v14 = vmulq_n_f64(v12, a7);
      do
      {
        v15 = *v9;
        v16 = v9[1];
        v9 += 2;
        v17 = *result++;
        v13 = vmlaq_n_f64(v13, v15, v17);
        v14 = vmlaq_n_f64(v14, v16, v17);
        --v8;
      }
      while (v8);
      v18 = &a3[v7];
      *a3++ = v13.f64[0];
      *v18 = v13.f64[1];
      v19 = &v18[v7];
      *v19 = v14.f64[0];
      v19[a4] = v14.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *dgebp_1M4N(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64_t *v15;
  float64_t *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    do
    {
      v7 = a2;
      v8 = a6;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v9 = &a3[v6 + v6];
      v11.f64[0] = *v9;
      v11.f64[1] = v9[a4];
      do
      {
        v12 = *v7;
        v13 = v7[1];
        v7 += 2;
        v14 = *result++;
        v10 = vmlaq_n_f64(v10, v12, v14);
        v11 = vmlaq_n_f64(v11, v13, v14);
        --v8;
      }
      while (v8);
      v15 = &a3[v6];
      *a3++ = v10.f64[0];
      *v15 = v10.f64[1];
      v16 = &v15[v6];
      *v16 = v11.f64[0];
      v16[a4] = v11.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *dgebpUnalignedC_8M4N(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = _X2;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v24 = *_X2;
      v25 = _X2[1];
      v26 = _X2[2];
      v27 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      v32 = _X2[2];
      v33 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      v38 = _X2[2];
      v39 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v41 = *_X2;
      v42 = _X2[1];
      v43 = _X2[2];
      v44 = _X2[3];
      v46 = *a2;
      v47 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      do
      {
        v51 = v13;
        v52 = v14;
        v24 = vmlaq_n_f64(v24, v13, v46.f64[0]);
        v30 = vmlaq_laneq_f64(v30, v13, v46, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v36 = vmlaq_n_f64(v36, v51, v47.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v51, v47, 1);
        v54 = *_X6;
        v55 = _X6[1];
        _X6 += 2;
        v56 = v15;
        v25 = vmlaq_n_f64(v25, v52, v46.f64[0]);
        v31 = vmlaq_laneq_f64(v31, v52, v46, 1);
        v57 = v16;
        v37 = vmlaq_n_f64(v37, v52, v47.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v52, v47, 1);
        v15 = *v53;
        v16 = v53[1];
        result = v53[2].f64;
        v26 = vmlaq_n_f64(v26, v56, v46.f64[0]);
        v32 = vmlaq_laneq_f64(v32, v56, v46, 1);
        v38 = vmlaq_n_f64(v38, v56, v47.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v56, v47, 1);
        v27 = vmlaq_n_f64(v27, v57, v46.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v57, v46, 1);
        v46 = v54;
        v39 = vmlaq_n_f64(v39, v57, v47.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v57, v47, 1);
        v47 = v55;
        --v17;
      }
      while (v17);
      v58 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v24;
      v10[1] = v25;
      v10[2] = v26;
      v10[3] = v27;
      v10 += 4;
      *v58 = v30;
      v58[1] = v31;
      v58[2] = v32;
      v58[3] = v33;
      v59 = (float64x2_t *)((char *)v58 + v11);
      *v59 = v36;
      v59[1] = v37;
      v59[2] = v38;
      v59[3] = v39;
      v60 = (float64x2_t *)((char *)v59 + v11);
      *v60 = v41;
      v60[1] = v42;
      v60[2] = v43;
      v60[3] = v44;
      _X2 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return dgebp_1M4N(result - 8, a2, _X2->f64, a4, v7, a6);
  return result;
}

void sgemm_repack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (**a20)(),uint64_t (**a21)(),uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,int a32,__int16 a33,__int16 a34,char a35)
{
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t (**v50)();
  uint64_t (**v51)();
  uint64_t (**v52)();
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  __int16 *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v73;
  float32x4_t *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t vars8;
  uint64_t (*v92)();
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *(*v104)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  _OWORD *(*v105)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  char *v106;

  v35 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16);
  v87 = v41;
  v81 = v42;
  v43 = v39;
  v44 = v37;
  v46 = v45;
  v48 = v47;
  v51 = a20;
  v50 = a21;
  STACK[0x10118] = *MEMORY[0x1E0C80C00];
  if (!a20)
    v51 = off_1E94EB718;
  if (!a21)
    v50 = off_1E94EB758;
  v99 = (uint64_t)v50;
  v52 = v51 + 1;
  if (v35 == 111)
    v53 = 1;
  else
    v53 = v40;
  v93 = v53;
  v94 = v40;
  if (v35 == 111)
    v54 = v40;
  else
    v54 = 1;
  v80 = v54;
  if (v35 == 111)
    v52 = v51;
  v92 = *v52;
  if (v36 == 111)
    v55 = 1;
  else
    v55 = a17;
  v85 = v55;
  v86 = a17;
  v56 = 3;
  if (v36 == 111)
    v56 = 2;
  v84 = v51[v56];
  if (v39 <= 512)
    v57 = 64;
  else
    v57 = 384;
  v58 = 256;
  if (v37 < 512)
    v58 = 64;
  v95 = v58;
  a34 = 0;
  v59 = 8;
  if (v37 < 512)
    v59 = 6;
  v60 = ((((unint64_t)(v57 << v59) >> 6) & 0x1FFFF) << 8) | 0x40;
  v97 = v38;
  v61 = ((unint64_t)(v38 * v57) >> 6 << 8) | 0x20;
  if ((unint64_t)(v60 + v61) > 0x10000)
  {
    v63 = v57;
    v64 = (char *)malloc_type_malloc(v60 + v61, 0xC9775249uLL);
    v57 = v63;
    v98 = v64;
    v106 = &v64[v61];
    LOBYTE(a34) = 1;
    v62 = (__int16 *)((char *)&a34 + 1);
  }
  else
  {
    v106 = &a35;
    v98 = &a35 + v60;
    HIBYTE(a34) = 0;
    v62 = &a34;
  }
  *(_BYTE *)v62 = 0;
  if (v43 >= 1)
  {
    v90 = 0;
    v65 = 0;
    v104 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))v99;
    v105 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v99 + 24);
    if (v97 <= 0)
      v66 = -(-v97 & 3);
    else
      v66 = v97 & 3;
    v101 = v66;
    v67 = v57;
    v82 = v57;
    v83 = v43;
    vars8 = v44;
    do
    {
      v89 = v67;
      if (v43 >= v67)
        v68 = v67;
      else
        v68 = v43;
      v88 = v65 + v57;
      if (v65 + v57 <= v43)
        v69 = v57;
      else
        v69 = v43 - v65;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))v84)(v69, v97, v87 + 4 * v65 * v85, v86, v98, v48);
      if (v44 >= 1)
      {
        v70 = 0;
        v71 = 16 * (v68 + v90);
        v96 = v81 + 4 * v65 * v80;
        v73 = v46 != 1.0 && v65 == 0 && v46 != 0.0;
        v74 = (float32x4_t *)v93;
        do
        {
          v102 = v70 + v95;
          if (v70 + v95 <= v44)
            v75 = v95;
          else
            v75 = v44 - v70;
          if ((v75 & 7) != 0)
          {
            v104 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))(v99 + 8);
            v105 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v99 + 32);
          }
          v100 = v70;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))v92)(v75, v69, v96 + 4 * v70 * v93, v94, v106);
          v103 = (uint64_t)v74;
          v76 = 0;
          if (v97 >= 4)
          {
            v77 = v98;
            do
            {
              if (v73)
                v105(v106, v77, v74, v94, v75, v69, v46);
              else
                v104(v106, v77, v74, v94, v75, v69);
              v76 += 4;
              v77 += v71;
              v74 += v94;
            }
            while (v76 < v97 - 3);
          }
          if (v101)
          {
            v78 = v93 + 4 * v100 + 4 * v76 * v94;
            v79 = &v98[4 * v76 * v69];
            if (v73)
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(v99 + 40))(v106, v79, v78, v94, v75, v101, v69, v46);
            else
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 16))(v106, v79, v78, v94, v75, v101, v69);
          }
          v44 = vars8;
          v74 = (float32x4_t *)(v103 + 4 * v95);
          v70 = v102;
        }
        while (v102 < vars8);
      }
      v57 = v82;
      v43 = v83;
      v67 = v89 + v82;
      v90 -= v82;
      v65 = v88;
      v105 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
      v104 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
    }
    while (v88 < v83);
  }
  if (HIBYTE(a34))
    free(v106);
  if ((_BYTE)a34)
    free(v98);
}

uint64_t ssyrk_noPack_LN(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, double a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;
  __int32 *v20;
  BOOL v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t *v29;
  uint64_t v30;
  float32x2_t *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v35;
  float32x2_t v36;
  char *v37;
  char *v38;
  float32x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x2_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x2_t *v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  __n128 *v67;
  float32x4_t v68;
  __n128 *v69;
  __n128 *v70;
  float32x2_t *v71;
  uint64_t i;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  __n128 *v89;
  float32x4_t *v90;
  float32x4_t *v91;
  float32x4_t *v92;

  a7.i64[1] = a8.i64[0];
  v13 = 0;
  v14 = 4 * a4;
  v15 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_13:
    if ((result & 2) != 0)
    {
      v29 = (float32x2_t *)&a5[v13];
      a5 = (_DWORD *)((char *)a5 + 2 * v15);
      v30 = a2;
      v31 = (float32x2_t *)&a3[v13];
      v32 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v33 = v32;
      do
      {
        v34 = *v31;
        v31 = (float32x2_t *)((char *)v31 + v14);
        v32 = vmla_n_f32(v32, v34, v34.f32[0]);
        v33 = vmla_lane_f32(v33, v34, v34, 1);
        v21 = v30-- <= 1;
      }
      while (!v21);
      v36 = *v29;
      v35 = (char *)v29 + v15;
      HIDWORD(a13) = *((_DWORD *)v35 + 1);
      v37 = &v35[-v15];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v32, a7.f32[0]), v36, a7, 2);
      *(_QWORD *)v37 = a8.i64[0];
      v38 = &v37[v15];
      *((_DWORD *)v38 + 1) = vmla_laneq_f32(vmul_n_f32(v33, *(float *)&a7), *(float32x2_t *)&a13, a7, 2).i32[1];
      v39 = (float32x2_t *)&v38[-v15 + 8];
      v40 = v13 + 2;
      if (result > v13 + 2)
      {
        do
        {
          v41 = a2;
          v42 = (float32x2_t *)&a3[v13];
          v43 = (float32x2_t *)&a3[v40];
          v44 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v45 = v44;
          do
          {
            v46 = *v43;
            v43 = (float32x2_t *)((char *)v43 + v14);
            v47 = *v42;
            v42 = (float32x2_t *)((char *)v42 + v14);
            v44 = vmla_n_f32(v44, v46, v47.f32[0]);
            v45 = vmla_lane_f32(v45, v46, v47, 1);
            v21 = v41-- <= 1;
          }
          while (!v21);
          v49 = *v39;
          v48 = (float32x2_t *)((char *)v39 + v15);
          v50 = *v48;
          v51 = (float32x2_t *)((char *)v48 + v15 + -2 * v15);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v44, a7.f32[0]), v49, a7, 2);
          *v51 = *(float32x2_t *)a8.i8;
          v52 = (float32x2_t *)((char *)v51 + v15);
          *v52 = vmla_laneq_f32(vmul_n_f32(v45, a7.f32[0]), v50, a7, 2);
          v39 = (float32x2_t *)((char *)v52 + v15 + -2 * v15 + 8);
          v40 += 2;
        }
        while (v40 < result);
        v13 += 2;
      }
      else
      {
        v13 += 2;
      }
    }
    for (; result > v13; v13 += 4)
    {
      v53 = (float32x4_t *)&a5[v13];
      a5 += v15;
      v54 = a2;
      v55 = (float32x4_t *)&a3[v13];
      v56 = (float32x4_t)veorq_s8(a8, a8);
      v57 = v56;
      v58 = *(float32x2_t *)v56.f32;
      v59 = *(float32x2_t *)v56.f32;
      do
      {
        v60 = *v55;
        v55 = (float32x4_t *)((char *)v55 + v14);
        v56 = vmlaq_n_f32(v56, v60, v60.f32[0]);
        v57 = vmlaq_lane_f32(v57, v60, *(float32x2_t *)v60.f32, 1);
        v58 = vmla_laneq_f32(v58, *(float32x2_t *)&v60.u32[2], v60, 2);
        v59 = vmla_laneq_f32(v59, *(float32x2_t *)&v60.u32[2], v60, 3);
        v21 = v54-- <= 1;
      }
      while (!v21);
      v62 = *v53;
      v61 = (float32x4_t *)((char *)v53 + v15);
      v64 = *v61;
      v63 = (float32x2_t *)((char *)v61 + v15);
      v65 = v63[1];
      v66 = *(float32x2_t *)((char *)v63 + v15 + 8);
      v67 = (__n128 *)&v63[v15 / 0xFFFFFFFFFFFFFFFCLL];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v56, a7.f32[0]), v62, a7, 2);
      v68 = vmlaq_laneq_f32(vmulq_n_f32(v57, a7.f32[0]), v64, a7, 2);
      v69 = (__n128 *)((char *)v67 + v15);
      *v67 = (__n128)a8;
      v70 = v67 + 1;
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u32[0] = v68.u32[1];
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u64[0] = v68.u64[1];
      v71 = (float32x2_t *)((char *)v69 + v15);
      *v71 = vmla_laneq_f32(vmul_n_f32(v58, a7.f32[0]), v65, a7, 2);
      v71->i32[(unint64_t)v15 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v59, *(float *)&a7), v66, a7, 2).i32[1];
      for (i = v13 + 4; i < result; i += 4)
      {
        v73 = a2;
        v74 = (float32x4_t *)&a3[v13];
        v75 = (float32x4_t *)&a3[i];
        v76 = (float32x4_t)veorq_s8(a8, a8);
        v77 = v76;
        v78 = v76;
        v79 = v76;
        do
        {
          v80 = *v75;
          v75 = (float32x4_t *)((char *)v75 + v14);
          v81 = *v74;
          v74 = (float32x4_t *)((char *)v74 + v14);
          v76 = vmlaq_n_f32(v76, v80, v81.f32[0]);
          v77 = vmlaq_lane_f32(v77, v80, *(float32x2_t *)v81.f32, 1);
          v78 = vmlaq_laneq_f32(v78, v80, v81, 2);
          v79 = vmlaq_laneq_f32(v79, v80, v81, 3);
          v21 = v73-- <= 1;
        }
        while (!v21);
        v83 = *(float32x4_t *)v70;
        v82 = (float32x4_t *)((char *)v70 + v15);
        v85 = *v82;
        v84 = (float32x4_t *)((char *)v82 + v15);
        v87 = *v84;
        v86 = (float32x4_t *)((char *)v84 + v15);
        v88 = *v86;
        v89 = (__n128 *)((char *)v86 + v15 + -4 * v15);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v76, a7.f32[0]), v83, a7, 2);
        *v89 = (__n128)a8;
        v90 = (float32x4_t *)((char *)v89 + v15);
        *v90 = vmlaq_laneq_f32(vmulq_n_f32(v77, a7.f32[0]), v85, a7, 2);
        v91 = (float32x4_t *)((char *)v90 + v15);
        *v91 = vmlaq_laneq_f32(vmulq_n_f32(v78, a7.f32[0]), v87, a7, 2);
        v92 = (float32x4_t *)((char *)v91 + v15);
        *v92 = vmlaq_laneq_f32(vmulq_n_f32(v79, a7.f32[0]), v88, a7, 2);
        v70 = (__n128 *)((char *)&v92[1] + v15 + -4 * v15);
      }
    }
    return result;
  }
  v16 = a5;
  a5 = (_DWORD *)((char *)a5 + v15);
  v17 = a2;
  v18 = a3;
  v19 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v18 = &a3[(unint64_t)v14 / 4], v19.f32[0] = *a3 * *a3, v17 = a2 - 1, a2 > 1))
  {
    do
    {
      a12.f32[0] = *v18;
      v20 = (__int32 *)&v18[(unint64_t)v14 / 4];
      a12.i32[1] = *v20;
      v18 = (float *)&v20[(unint64_t)v14 / 4];
      v19 = vmla_f32(v19, a12, a12);
      v21 = v17 <= 2;
      v17 -= 2;
    }
    while (!v21);
    v19.f32[0] = vaddv_f32(v19);
  }
  a12.i32[0] = *v16;
  v19.f32[0] = v19.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v19, a12, a7, 2);
  *v16 = a8.i32[0];
  v22 = (float32x2_t *)(v16 + 1);
  v23 = 1;
  if (result > 1)
  {
    do
    {
      v24 = a2;
      v25 = a3;
      v26 = (float32x2_t *)&a3[v23];
      v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      do
      {
        v28 = *v26;
        v26 = (float32x2_t *)((char *)v26 + v14);
        *(float *)&a13 = *v25;
        v25 = (float *)((char *)v25 + v14);
        v27 = vmla_n_f32(v27, v28, *(float *)&a13);
        v21 = v24-- <= 1;
      }
      while (!v21);
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v27, a7.f32[0]), *v22, a7, 2);
      *v22++ = *(float32x2_t *)a8.i8;
      v23 += 2;
    }
    while (v23 < result);
    v13 = 1;
    goto LABEL_13;
  }
  return result;
}

unint64_t initHardwareInfo()
{
  unsigned int v0;
  unsigned int v1;
  char *v3;
  unsigned int v4;
  char *v5;
  unint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  qos_class_self();
  info = pthread_qos_max_parallelism();
  v0 = pthread_qos_max_parallelism();
  dword_1ED33A9BC = v0;
  v1 = info;
  if (info == -1 || v0 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      initHardwareInfo_cold_1();
    v1 = 1;
    info = 1;
    goto LABEL_12;
  }
  if (!info)
  {
    v1 = 2;
    info = 2;
  }
  if (v0 < v1)
LABEL_12:
    dword_1ED33A9BC = v1;
  v3 = getenv("VECLIB_MAXIMUM_THREADS");
  if (v3)
  {
    v4 = strtol(v3, 0, 0);
    if (v4)
    {
      if (dword_1ED33A9BC > v4)
      {
        info = v4;
        dword_1ED33A9BC = v4;
      }
    }
  }
  v5 = getenv("APPLE_LAPACK_FILL_NAN");
  byte_1ED33A9C4 = v5 != 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  result = queryPlatform((lapack::hardware::query *)v5, (uint64_t)&v7);
  dword_1ED33A9C8 = DWORD1(v8);
  unk_1ED33A9D0 = *((_QWORD *)&v9 + 1);
  dword_1ED33A9D8 = DWORD2(v10);
  return result;
}

uint64_t hardwareVectorBytes()
{
  if (getHardwareInfo_token != -1)
    dispatch_once(&getHardwareInfo_token, &__block_literal_global_11);
  if ((dword_1ED33A9C0 - 1) > 2)
    return 16;
  else
    return dword_1D33076B0[dword_1ED33A9C0 - 1];
}

void initHardwareInfo_cold_1()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1D3239000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "pthread_qos_max_parallelism() returned error in LAPACK call to initHardwareInfo()\n", v0, 2u);
}

void APL_seq_ssyrk(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55)
{
  unsigned __int32 v55;
  unsigned __int32 v56;
  BOOL v58;
  _BOOL4 v59;

  if (a3)
  {
    v55 = a10.n128_u32[0];
    v56 = a9.n128_u32[0];
    v58 = a9.n128_f32[0] == 0.0 || a4 == 0;
    v59 = v58;
    if (!v59 || a10.n128_f32[0] != 1.0)
    {
      if (v59)
      {
        strScale(a1, a3, a7->f32, a8, a10.n128_f32[0]);
      }
      else
      {
        if (a10.n128_f32[0] == 0.0)
          strScale(a1, a3, a7->f32, a8, a10.n128_f32[0]);
        if (a3 > 85 || a4 >= 86)
        {
          a9.n128_u32[0] = v56;
          a10.n128_u32[0] = v55;
          if (a1 == 121)
            ssyrk_Pack_Upper(a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
              a20,
              a21,
              a22,
              a23,
              a24,
              a25,
              a26,
              a27,
              (uint64_t)a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              *((uint64_t *)&a37 + 1),
              a38,
              *((uint64_t *)&a38 + 1),
              a39,
              SDWORD2(a39),
              SHIDWORD(a39),
              a40,
              *((uint64_t *)&a40 + 1),
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55);
          else
            ssyrk_Pack_Lower(a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
              a20,
              a21,
              SHIDWORD(a21),
              a22,
              a23,
              a24,
              a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40,
              a41);
        }
        else
        {
          a9.n128_u32[0] = v56;
          a10.n128_u32[0] = v55;
          if (a1 == 121)
          {
            if ((_DWORD)a2 == 111)
              ssyrk_noPack_UN(a3, a4, (uint64_t)a5, a6, a7, a8, (float32x4_t)a9, (int8x16_t)a10, a11.n128_f64[0], a12.n128_f64[0], a13.n128_f64[0], (float32x4_t)a14);
            else
              ssyrk_noPack_UT(a3, a4, (uint64_t)a5, a6, a7, a8, (float32x4_t)a9, (int8x16_t)a10, a11.n128_f64[0], a12.n128_f64[0], a13.n128_f64[0], (float32x4_t)a14);
          }
          else if ((_DWORD)a2 == 111)
          {
            ssyrk_noPack_LN(a3, a4, a5, a6, a7, a8, (float32x4_t)a9, (int8x16_t)a10, a11.n128_f64[0], a12.n128_f64[0], a13.n128_f64[0], (float32x2_t)a14.n128_u64[0], a15.n128_f64[0]);
          }
          else
          {
            ssyrk_noPack_LT(a3, a4, a5, a6, a7, a8, (float32x4_t)a9, (int8x16_t)a10, a11.n128_f64[0], a12.n128_f64[0], a13.n128_f64[0], (float32x2_t)a14.n128_u64[0], (float32x2_t)a15.n128_u64[0]);
          }
        }
      }
    }
  }
}

void strsm_Left_Forward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, float *a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,char a31)
{
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v64;
  uint64_t v65;
  void (*v66)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  float *(*v68)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t *v71;
  uint64_t v72;
  const float *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t vars0;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *(*v97)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v98;
  float32x4_t *v99;

  v31 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16);
  v79 = v38;
  v80 = v37;
  v39 = v33;
  v78 = v40;
  STACK[0x10148] = *MEMORY[0x1E0C80C00];
  if (v31 == 111)
    v43 = 1;
  else
    v43 = v35;
  v89 = v43;
  v44 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_Tran;
  v91 = v35;
  if (v31 == 111)
    v45 = v35;
  else
    v45 = 1;
  v75 = v45;
  if (v31 == 111)
    v44 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_NoTran;
  v88 = v44;
  v46 = strsm_block_LUT;
  if (v31 == 111)
    v46 = strsm_block_LLN;
  v77 = v46;
  v47 = (v33 << 7) + 16408;
  if (a20 == -1)
  {
    v52 = 4 * v47;
    if (v33 < 1)
      v52 = 0;
    v51 = (float)(unint64_t)v52;
    goto LABEL_19;
  }
  v48 = v34;
  v49 = v32;
  v50 = v36;
  if (v33 >= 1 && a20)
  {
    if (4 * v47 > a20)
    {
      v51 = (float)(unint64_t)(4 * v47);
LABEL_19:
      *a19 = v51;
      return;
    }
    goto LABEL_21;
  }
  if (v33 >= 1)
  {
LABEL_21:
    v99 = (float32x4_t *)a19;
    v74 = a19;
    if (!a19)
      v99 = (float32x4_t *)malloc_type_malloc(4 * v47, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v74 = a19;
  v99 = (float32x4_t *)&a31;
LABEL_24:
  if (v48 >= 1)
  {
    vars0 = 0;
    v53 = 0;
    v92 = v99 + 4100;
    v98 = v39 - 3;
    if (v39 <= 0)
      v55 = -(-v39 & 3);
    else
      v55 = v39 & 3;
    v94 = v55;
    v86 = v49;
    v83 = a18 + 512;
    v56 = 128;
    v87 = v39;
    v76 = v48;
    do
    {
      v81 = v56;
      if (v48 >= v56)
        v57 = v56;
      else
        v57 = v48;
      if (v53 + 128 <= v48)
        v58 = 128;
      else
        v58 = v48 - v53;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v77)(v78, v58, v39, v80 + 4 * v53 * v91 + 4 * v53, v50);
      sgePack_B_NoTran(v58, v39, (unint64_t *)(v79 + 4 * v53), a17, v92, -1.0, v59, v60);
      v82 = v53 + 128;
      if (v53 + 128 < v49)
      {
        v61 = v83;
        v62 = 16 * (v57 + vars0);
        v90 = v80 + 4 * v53 * v75;
        v64 = v50 != 1.0 && v53 == 0 && v50 != 0.0;
        v65 = v53 + 128;
        v97 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
        v66 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
        do
        {
          v95 = v65 + 128;
          if (v65 + 128 <= v49)
            v67 = 128;
          else
            v67 = v49 - v65;
          v93 = v65;
          if ((v67 & 7) != 0)
            v66 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
          v68 = v97;
          if ((v67 & 7) != 0)
            v68 = sgebpScaleUnalignedC_8M4N;
          v97 = v68;
          v88(v67, v58, v90 + 4 * v65 * v89, v91, v99);
          v96 = v61;
          v69 = 0;
          if (v39 >= 4)
          {
            v70 = (float32x4_t *)v61;
            v71 = v99 + 4100;
            do
            {
              if (v64)
                v97(v99, (uint64_t)v71, v70, a17, v67, v58, v50);
              else
                v66(v99, v71, v70, a17, v67, v58);
              v69 += 4;
              v71 = (float32x4_t *)((char *)v71 + v62);
              v70 += a17;
            }
            while (v69 < v98);
          }
          v39 = v87;
          if (v94)
          {
            v72 = a18 + 4 * v93 + 4 * v69 * a17;
            v73 = &v92->f32[v69 * v58];
            if (v64)
              sgebpScale_8M1N(v99, v73, v72, a17, v67, v94, v58, v50);
            else
              sgebp_8M1N(v99, v73, v72, a17, v67, v94, v58);
          }
          v61 = v96 + 512;
          v65 = v95;
          v49 = v86;
        }
        while (v95 < v86);
      }
      v53 = v82;
      v56 = v81 + 128;
      v83 += 512;
      vars0 -= 128;
      v50 = 1.0;
      v48 = v76;
    }
    while (v82 < v76);
  }
  if (v39 >= 1 && !v74)
    free(v99);
}

void strsm_Left_Backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, float *a19, unint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  float32x4_t v53;
  _BOOL4 v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *(*v62)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v63)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  uint64_t v67;
  const float *v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  unsigned int v73;
  uint64_t v74;
  uint64_t vars0;
  void (*vars8)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float *(*v85)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v86)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float32x4_t *v87;

  v27 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16);
  v74 = v33;
  v34 = v28;
  v73 = v35;
  STACK[0x10128] = *MEMORY[0x1E0C80C00];
  if (v27 == 111)
    v37 = 1;
  else
    v37 = v31;
  v78 = v37;
  v38 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_Tran;
  v80 = v31;
  if (v27 == 111)
    v39 = v31;
  else
    v39 = 1;
  v71 = v39;
  if (v27 == 111)
    v38 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_NoTran;
  vars8 = v38;
  v40 = strsm_block_LLT;
  if (v27 == 111)
    v40 = strsm_block_LUN;
  v72 = v40;
  v41 = (v28 << 7) + 16408;
  if (a20 == -1)
  {
    v46 = 4 * v41;
    if (v28 < 1)
      v46 = 0;
    v45 = (float)(unint64_t)v46;
    goto LABEL_19;
  }
  v42 = v30;
  v43 = v29;
  v44 = v32;
  if (v28 >= 1 && a20)
  {
    if (4 * v41 > a20)
    {
      v45 = (float)(unint64_t)(4 * v41);
LABEL_19:
      *a19 = v45;
      return;
    }
    goto LABEL_21;
  }
  if (v28 >= 1)
  {
LABEL_21:
    v87 = (float32x4_t *)a19;
    v69 = a19;
    if (!a19)
      v87 = (float32x4_t *)malloc_type_malloc(4 * v41, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v69 = a19;
  v87 = (float32x4_t *)&a27;
LABEL_24:
  if ((uint64_t)v43 >= 1)
  {
    v47 = v34 - 3;
    if (v34 <= 0)
      v48 = -(-v34 & 3);
    else
      v48 = v34 & 3;
    v81 = v87 + 4100;
    v82 = v48;
    v49 = 1;
    vars0 = v34;
    v70 = v42;
    while (1)
    {
      v50 = v43 >= 0x80 ? v43 - 128 : 0;
      v51 = v43 >= 0x80 ? 128 : v43;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v72)(v73, v51, v34, v42 + 4 * v50 * v80 + 4 * v50, v44);
      sgePack_B_NoTran(v51, v34, (unint64_t *)(v74 + 4 * v50), v78, v81, -1.0, v52, v53);
      if (v43 < 0x81)
        break;
      v79 = v42 + 4 * v50 * v71;
      v54 = v44 != 1.0;
      if (v44 == 0.0)
        v54 = 0;
      v55 = v49 & v54;
      v56 = v50;
      v86 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
      v85 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
      do
      {
        v57 = v56;
        v58 = v56 >= 0x80;
        v59 = v56 - 128;
        if (v58)
          v60 = 128;
        else
          v60 = v57;
        if (!v58)
          v59 = 0;
        v83 = v59;
        v84 = a18 + 4 * v59;
        v61 = v79 + 4 * v59 * v78;
        v62 = v85;
        if ((v60 & 7) != 0)
          v62 = sgebpUnalignedC_8M4N;
        v85 = v62;
        v63 = v86;
        if ((v60 & 7) != 0)
          v63 = sgebpScaleUnalignedC_8M4N;
        v86 = v63;
        vars8(v60, v51, v61, v80, v87);
        v64 = 0;
        if (v34 >= 4)
        {
          v64 = 0;
          v65 = (float32x4_t *)v84;
          v66 = v87 + 4100;
          do
          {
            if (v55)
              v86(v87, (uint64_t)v66, v65, v78, v60, v51, v44);
            else
              v85(v87, (uint64_t)v66, v65, v78, v60, v51);
            v64 += 4;
            v66 += v51;
            v65 += v78;
          }
          while (v64 < v47);
        }
        if (v82)
        {
          v67 = v84 + 4 * v64 * v78;
          v68 = &v81->f32[v64 * v51];
          if (v55)
            sgebpScale_8M1N(v87, v68, v67, v78, v60, v82, v51, v44);
          else
            sgebp_8M1N(v87, v68, v67, v78, v60, v82, v51);
        }
        v56 = v83;
        v34 = vars0;
      }
      while (v83 > 0);
      v49 = 0;
      v44 = 1.0;
      v42 = v70;
      v43 = v50;
    }
  }
  if (v34 >= 1 && !v69)
    free(v87);
}

float *sgebpScaleUnalignedC_8M4N(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v9;
  uint64_t v10;
  float *result;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t *v60;
  _OWORD *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;

  v9 = a5 & 7;
  v10 = a5 - v9;
  if (v10)
  {
    v12 = _X2;
    v13 = 4 * a4;
    v15 = *a1;
    v16 = a1[1];
    v14 = a1 + 2;
    v17 = *v14;
    v18 = v14[1];
    result = v14[2].f32;
    do
    {
      v19 = a6;
      v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
      __asm { PRFM            #1, [X2,#0x40] }
      v26 = *_X2;
      v27 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v34 = *_X2;
      v35 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      _X2 = v12 + 2;
      v39 = v7;
      v40 = v7;
      v41 = v7;
      v42 = v7;
      v43 = v7;
      v44 = v7;
      v45 = v7;
      v47 = *(float32x4_t *)a2;
      v48 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v52 = vmulq_n_f32(v26, a7);
      v53 = vmulq_n_f32(v27, a7);
      v54 = vmulq_n_f32(v30, a7);
      v55 = vmulq_n_f32(v31, a7);
      v56 = vmulq_n_f32(v34, a7);
      v57 = vmulq_n_f32(v35, a7);
      v58 = vmulq_n_f32(v37, a7);
      v59 = vmulq_n_f32(v38, a7);
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
      v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
      v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
      v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
      v15 = v17;
      v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
      v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
      v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
      v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
      v16 = v18;
      v17 = *(float32x4_t *)result;
      v18 = *(float32x4_t *)(result + 4);
      result += 8;
      v47 = *(float32x4_t *)(a2 + 16);
      v48 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v19 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
          v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
          v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
          v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
          v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
          v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
          v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
          v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
          v15 = *(float32x4_t *)result;
          v16 = *(float32x4_t *)(result + 4);
          v60 = (float32x4_t *)(result + 8);
          v47 = *(float32x4_t *)_X6;
          v61 = _X6 + 1;
          v7 = vmlaq_n_f32(v7, v17, v48.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v48.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v48, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v48, 3);
          v39 = vmlaq_n_f32(v39, v18, v48.f32[0]);
          v41 = vmlaq_lane_f32(v41, v18, *(float32x2_t *)v48.f32, 1);
          v43 = vmlaq_laneq_f32(v43, v18, v48, 2);
          v45 = vmlaq_laneq_f32(v45, v18, v48, 3);
          v17 = *v60;
          v18 = v60[1];
          result = v60[2].f32;
          v48 = *(float32x4_t *)v61;
          _X6 = v61 + 1;
          v19 -= 2;
        }
        while (v19);
        v52 = vaddq_f32(v52, v7);
        v53 = vaddq_f32(v53, v39);
        v54 = vaddq_f32(v54, v40);
        v55 = vaddq_f32(v55, v41);
        v56 = vaddq_f32(v56, v42);
        v57 = vaddq_f32(v57, v43);
        v58 = vaddq_f32(v58, v44);
        v59 = vaddq_f32(v59, v45);
      }
      *v12 = v52;
      v12[1] = v53;
      v62 = (float32x4_t *)((char *)v12 + v13);
      *v62 = v54;
      v62[1] = v55;
      v63 = (float32x4_t *)((char *)v62 + v13);
      *v63 = v56;
      v63[1] = v57;
      v64 = (float32x4_t *)((char *)v63 + v13);
      *v64 = v58;
      v64[1] = v59;
      v12 = _X2;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v9)
    return sgebpScale_1M4N(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v9, a6, a7);
  return result;
}

void strsm_Right_Forward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, float *a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35)
{
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  unsigned int v44;
  void (*v45)(uint64_t, float);
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v63;
  _BOOL4 v64;
  void (*v65)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  void (*v66)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const float *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, float);
  uint64_t v79;
  uint64_t v80;
  uint64_t (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  unsigned int vars8_4;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t *v99;

  v35 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16);
  v83 = v39;
  v43 = v37;
  vars8_4 = v44;
  STACK[0x10168] = *MEMORY[0x1E0C80C00];
  v45 = (void (*)(uint64_t, float))sgePack_B_Tran;
  if (v35 == 111)
    v45 = (void (*)(uint64_t, float))sgePack_B_NoTran;
  v78 = v45;
  v46 = strsm_block_RLT;
  if (v35 == 111)
    v46 = strsm_block_RUN;
  vars0 = v46;
  v47 = (v37 << 7) + 16408;
  if (a20 == -1)
  {
    v54 = 4 * v47;
    if (v37 < 1)
      v54 = 0;
    v53 = (float)(unint64_t)v54;
    goto LABEL_13;
  }
  v48 = v41;
  v49 = v40;
  v50 = v38;
  v51 = v36;
  v52 = v42;
  v80 = v39;
  if (v37 >= 1 && a20)
  {
    if (4 * v47 > a20)
    {
      v53 = (float)(unint64_t)(4 * v47);
LABEL_13:
      *a19 = v53;
      return;
    }
    goto LABEL_15;
  }
  if (v37 >= 1)
  {
LABEL_15:
    v99 = (float32x4_t *)a19;
    v74 = a19;
    if (!a19)
      v99 = (float32x4_t *)malloc_type_malloc(4 * v47, 0x100004052888210uLL);
    goto LABEL_18;
  }
  v74 = a19;
  v99 = (float32x4_t *)&a35;
LABEL_18:
  if (v50 >= 1)
  {
    v87 = 0;
    v55 = 0;
    v98 = v43 - 3;
    if (v43 <= 0)
      v56 = -(-v43 & 3);
    else
      v56 = v43 & 3;
    v93 = v56;
    v75 = v50;
    v79 = v49 << 9;
    v97 = 16 * v49;
    v86 = 512;
    v57 = 128;
    v85 = a18 + (v49 << 9);
    v76 = v48;
    v77 = v43;
    v90 = v51;
    do
    {
      v84 = v57;
      if (v50 >= v57)
        v58 = v57;
      else
        v58 = v50;
      if (v55 + 128 <= v50)
        v59 = 128;
      else
        v59 = v50 - v55;
      v91 = v83 + 4 * v55 * v49;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, float))vars0)(vars8_4, v51, v59, v48 + 4 * v55 * v80 + 4 * v55, v80, v52);
      v94 = v55 + 128;
      if (v43 - (v55 + 128) >= 1)
      {
        v78(v59, -1.0);
        if (v51 < 1)
        {
          v52 = 1.0;
        }
        else
        {
          v60 = 0;
          v88 = (uint64_t)&v99[4100] + v86 * (v58 + v87);
          v61 = 16 * (v58 + v87);
          v63 = v52 != 1.0 && v55 == 0;
          v64 = v52 != 0.0 && v63;
          v96 = v85;
          v65 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
          v66 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
          do
          {
            v95 = v60 + 128;
            if (v60 + 128 <= v51)
              v67 = 128;
            else
              v67 = v51 - v60;
            v92 = v60;
            if ((v67 & 7) != 0)
            {
              v66 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
              v65 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgebpScaleUnalignedC_8M4N;
            }
            v68 = v49;
            sgePack_A_NoTran(v67, v59, v91 + 4 * v60, v49, (uint64_t)v99);
            v69 = v94;
            if (v94 < v98)
            {
              v70 = v96;
              v71 = v88;
              v69 = v94;
              do
              {
                if (v64)
                  v65(v99, v71, v70, v68, v67, v59, v52);
                else
                  v66(v99, v71, v70, v68, v67, v59);
                v69 += 4;
                v71 += v61;
                v70 += v97;
              }
              while (v69 < v98);
            }
            v49 = v68;
            if (v93)
            {
              v72 = a18 + 4 * v92 + 4 * v69 * v68;
              v73 = &v99[4100].f32[v69 * v59];
              if (v64)
                sgebpScale_8M1N(v99, v73, v72, v68, v67, v93, v59, v52);
              else
                sgebp_8M1N(v99, v73, v72, v68, v67, v93, v59);
            }
            v96 += 512;
            v60 = v95;
            v51 = v90;
          }
          while (v95 < v90);
          v52 = 1.0;
          v48 = v76;
          v43 = v77;
          v50 = v75;
        }
      }
      v57 = v84 + 128;
      v86 += 512;
      v87 -= 128;
      v85 += v79;
      v55 = v94;
    }
    while (v94 < v50);
  }
  if (v43 >= 1 && !v74)
    free(v99);
}

void strsm_Right_Backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, float *a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25)
{
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  int v56;
  void (*v57)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  float *(*v59)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, int8x16_t, __n128, __n128, __n128, __n128, __n128);
  uint64_t v76;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float *(*v84)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v85;
  float32x4_t *v86;

  v25 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16);
  v34 = a17;
  STACK[0x10138] = *MEMORY[0x1E0C80C00];
  v35 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgePack_B_Tran;
  if (v25 == 111)
    v36 = 1;
  else
    v36 = a17;
  v73 = v36;
  if (v25 == 111)
    v35 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgePack_B_NoTran;
  v72 = v35;
  v37 = strsm_block_RUT;
  if (v25 == 111)
    v37 = strsm_block_RLN;
  v74 = v37;
  v38 = (v28 << 7) + 16408;
  if (a20 == -1)
  {
    v47 = 4 * v38;
    if (v28 < 1)
      v47 = 0;
    v46 = (float)(unint64_t)v47;
    goto LABEL_16;
  }
  v39 = v32;
  v40 = v31;
  v41 = v30;
  v42 = v29;
  v43 = v27;
  v44 = v33;
  v45 = v26;
  if (v28 >= 1 && a20)
  {
    if (4 * v38 > a20)
    {
      v46 = (float)(unint64_t)(4 * v38);
LABEL_16:
      *a19 = v46;
      return;
    }
    goto LABEL_18;
  }
  if (v28 >= 1)
  {
LABEL_18:
    v66 = a19;
    v67 = v28;
    v86 = (float32x4_t *)a19;
    if (!a19)
      v86 = (float32x4_t *)malloc_type_malloc(4 * v38, 0x100004052888210uLL);
    goto LABEL_21;
  }
  v66 = a19;
  v67 = v28;
  v86 = (float32x4_t *)&a25;
LABEL_21:
  if (v42 >= 1)
  {
    v76 = v43;
    v79 = (uint64_t)&v86[4100];
    v85 = 16 * v40;
    v48 = 1;
    v70 = v41;
    v71 = v39;
    v69 = v45;
    v68 = v34;
    do
    {
      v49 = v42;
      v50 = (unint64_t)v42 >= 0x80;
      if ((unint64_t)v42 >= 0x80)
        v42 -= 128;
      else
        v42 = 0;
      if (v50)
        v51 = 128;
      else
        v51 = v49;
      vars8 = v41 + 4 * v42 * v40;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v74)(v45, v43, v51, v39 + 4 * v42 * v34 + 4 * v42, v34, v44);
      if (v49 >= 0x81)
      {
        v72(v51, v42, v39 + 4 * v42 * v73, v34, v79, -1.0);
        v52 = 1.0;
        if (v43 < 1)
        {
          v48 = 0;
        }
        else
        {
          v53 = 0;
          v54 = v42 - 3;
          v55 = v44 != 1.0;
          if (v44 == 0.0)
            v55 = 0;
          v56 = v55 & v48;
          v81 = v42 & 3;
          v83 = a18;
          v84 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
          v57 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
          vars0 = v42;
          do
          {
            v82 = v53 + 128;
            if (v53 + 128 <= v43)
              v58 = 128;
            else
              v58 = v43 - v53;
            v80 = v53;
            if ((v58 & 7) != 0)
              v57 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
            v59 = v84;
            if ((v58 & 7) != 0)
              v59 = sgebpScaleUnalignedC_8M4N;
            v84 = v59;
            v60 = v40;
            sgePack_A_NoTran(v58, v51, vars8 + 4 * v53, v40, (uint64_t)v86);
            if ((unint64_t)v42 < 4)
            {
              v61 = 0;
            }
            else
            {
              v61 = 0;
              v62 = (float32x4_t *)v83;
              v63 = v86 + 4100;
              do
              {
                if (v56)
                  v84(v86, (uint64_t)v63, v62, v60, v58, v51, v44);
                else
                  v57(v86, v63, v62, v60, v58, v51);
                v61 += 4;
                v63 += v51;
                v62 = (float32x4_t *)((char *)v62 + v85);
              }
              while (v61 < v54);
            }
            v40 = v60;
            v42 = vars0;
            if (v81)
            {
              v64 = a18 + 4 * v80 + 4 * v61 * v60;
              v65 = (const float *)(v79 + 4 * v61 * v51);
              if (v56)
                sgebpScale_8M1N(v86, v65, v64, v60, v58, v81, v51, v44);
              else
                sgebp_8M1N(v86, v65, v64, v60, v58, v81, v51);
            }
            v83 += 512;
            v53 = v82;
            v43 = v76;
          }
          while (v82 < v76);
          v48 = 0;
          v41 = v70;
          v39 = v71;
          v45 = v69;
          v34 = v68;
        }
      }
      else
      {
        v52 = v44;
      }
      v44 = v52;
    }
    while (v42 > 0);
  }
  if (v67 >= 1 && !v66)
    free(v86);
}

uint64_t APL_sgemm_noPack_NT(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t j;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int32 *v51;
  __int32 *v52;
  __int32 *v53;
  uint64_t k;
  float32x4_t *v55;
  float *v56;
  float32x4_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t m;
  float v67;
  float v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  __int32 *v74;
  float32x2_t v75;
  __int32 *v76;
  float32x2_t v77;

  v12 = 4 * a5;
  v13 = 4 * a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = a6;
    v19 = &a8[a12];
    v20 = __OFSUB__(result, 3);
    v21 = result - 3;
    if (result > 3)
    {
      do
      {
        v22 = a3;
        v23 = (float32x4_t)veorq_s8(a11, a11);
        v24 = v23;
        v25 = v23;
        v26 = v23;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v27 = *v17;
        v17 = (float32x4_t *)((char *)v17 + v12);
        v28 = *v18;
        v18 = (float32x4_t *)((char *)v18 + v14);
        v23 = vmlaq_n_f32(v23, v27, v28.f32[0]);
        v24 = vmlaq_lane_f32(v24, v27, *(float32x2_t *)v28.f32, 1);
        v25 = vmlaq_laneq_f32(v25, v27, v28, 2);
        v26 = vmlaq_laneq_f32(v26, v27, v28, 3);
        v22 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v29 = *v17;
          v30 = *(float32x4_t *)((char *)v17 + v12);
          v31 = *v18;
          v32 = *(float32x4_t *)((char *)v18 + v14);
          v15 = v22 <= 2;
          for (j = v22 - 2; !v15; j -= 2)
          {
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v34 = vmlaq_n_f32(v23, v29, v31.f32[0]);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v35 = vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1);
            v36 = vmlaq_laneq_f32(v25, v29, v31, 2);
            v37 = vmlaq_laneq_f32(v26, v29, v31, 3);
            v29 = *v17;
            v23 = vmlaq_n_f32(v34, v30, v32.f32[0]);
            v31 = *v18;
            v24 = vmlaq_lane_f32(v35, v30, *(float32x2_t *)v32.f32, 1);
            v25 = vmlaq_laneq_f32(v36, v30, v32, 2);
            v26 = vmlaq_laneq_f32(v37, v30, v32, 3);
            v30 = *(float32x4_t *)((char *)v17 + v12);
            v32 = *(float32x4_t *)((char *)v18 + v14);
            v15 = j <= 2;
          }
          v17 = (float32x4_t *)((char *)v17 + 2 * v12);
          v23 = vmlaq_n_f32(vmlaq_n_f32(v23, v29, v31.f32[0]), v30, v32.f32[0]);
          v24 = vmlaq_lane_f32(vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1), v30, *(float32x2_t *)v32.f32, 1);
          v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(v25, v29, v31, 2), v30, v32, 2);
          v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(v26, v29, v31, 3), v30, v32, 3);
        }
        v38 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v23, a9), *a8, a10);
        v39 = vmlaq_n_f32(vmulq_n_f32(v25, a9), *v38, a10);
        v40 = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)v38 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v24, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v38 = v39;
        *(float32x4_t *)((char *)v38 + 4 * a12) = v40;
        v18 = a6;
        v17 = (float32x4_t *)((char *)v17 - v12 * a3 + 16);
        v20 = __OFSUB__(v21, 4);
        v15 = v21 <= 4;
        v21 -= 4;
      }
      while (!v15);
    }
    v41 = result & 3;
    if (!v20 && v41 != 0)
    {
      do
      {
        v42 = a3;
        v43 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v44 = v17->f32[0],
              v17 = (float32x4_t *)((char *)v17 + v12),
              v45 = *v18,
              v18 = (float32x4_t *)((char *)v18 + v14),
              v43 = vmlaq_n_f32(v43, v45, v44),
              v42 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v46 = v17->f32[0];
            v47 = v17->f32[(unint64_t)v12 / 4];
            v48 = *(float32x4_t *)((char *)v18 + v14);
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v49 = vmlaq_n_f32(v43, *v18, v46);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v43 = vmlaq_n_f32(v49, v48, v47);
            v15 = v42 <= 2;
            v42 -= 2;
          }
          while (!v15);
        }
        v50.i32[0] = a8->i32[0];
        v50.i32[1] = a8->i32[a12];
        v51 = (__int32 *)((char *)a8 + v13 + v13);
        v50.i32[2] = *v51;
        v50.i32[3] = v51[a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v43, a9), v50, a10);
        v52 = (__int32 *)((char *)a8 + v13);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v52 = a11.i32[1];
        v53 = &v52[(unint64_t)v13 / 4];
        *v53 = a11.i32[2];
        v53[a12] = a11.i32[3];
        v18 = a6;
        v17 = (float32x4_t *)((char *)&v17->i32[1] - v12 * a3);
        v15 = v41-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v19;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v55 = a4;
    v56 = (float *)a6;
    v57 = (float32x4_t *)((char *)a8 + v13);
    v58 = __OFSUB__(result, 3);
    v59 = result - 3;
    if (result > 3)
    {
      do
      {
        v60 = a3;
        v61 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v62 = *v55,
              v55 = (float32x4_t *)((char *)v55 + v12),
              v63 = *v56,
              v56 = (float *)((char *)v56 + v14),
              v61 = vmlaq_n_f32(v61, v62, v63),
              v60 = a3 - 1,
              a3 > 1))
        {
          v64 = *v55;
          v65 = *(float32x4_t *)((char *)v55 + v12);
          v15 = v60 <= 2;
          for (m = v60 - 2; !v15; m -= 2)
          {
            v55 = (float32x4_t *)((char *)v55 + 2 * v12);
            v67 = *v56;
            v68 = v56[(unint64_t)v14 / 4];
            v56 = (float *)((char *)v56 + 2 * v14);
            v69 = vmlaq_n_f32(v61, v64, v67);
            v64 = *v55;
            v61 = vmlaq_n_f32(v69, v65, v68);
            v65 = *(float32x4_t *)((char *)v55 + v12);
            v15 = m <= 2;
          }
          v55 = (float32x4_t *)((char *)v55 + 2 * v12);
          v61 = vmlaq_n_f32(vmlaq_n_f32(v61, v64, *v56), v65, v56[(unint64_t)v14 / 4]);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v61, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)v55 - v12 * a3 + 16);
        v58 = __OFSUB__(v59, 4);
        v15 = v59 <= 4;
        v59 -= 4;
      }
      while (!v15);
    }
    v70 = result & 3;
    if (!v58 && v70 != 0)
    {
      do
      {
        v71 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v72 = v55->f32[0],
              v55 = (float32x4_t *)((char *)v55 + v12),
              v73 = *v56,
              v56 = (float *)((char *)v56 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v73, v72),
              v71 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v75.i32[0] = v55->i32[0];
            v74 = (__int32 *)((char *)v55 + v12);
            v75.i32[1] = *v74;
            v55 = (float32x4_t *)&v74[(unint64_t)v12 / 4];
            v77.f32[0] = *v56;
            v76 = (__int32 *)&v56[(unint64_t)v14 / 4];
            v77.i32[1] = *v76;
            v56 = (float *)&v76[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v77, v75);
            v15 = v71 <= 2;
            v71 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)&v55->i32[1] - v12 * a3);
        v15 = v70-- <= 1;
      }
      while (!v15);
    }
    a6 = (float32x4_t *)((char *)a6 + 4);
    a8 = v57;
    v15 = k <= 1;
  }
  return result;
}

uint64_t Accelerate_AR_sposv(uint64_t a1, int *a2, unsigned int *a3, float *a4, int *a5, char *a6, int *a7, int *a8)
{
  signed int v16;
  int v17;

  *a8 = 0;
  if (!lsame_() && !lsame_())
  {
    v17 = -1;
    goto LABEL_14;
  }
  v16 = *a2;
  if (*a2 < 0)
  {
    v17 = -2;
    goto LABEL_14;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v17 = -3;
    goto LABEL_14;
  }
  if (v16 <= 1)
    v16 = 1;
  if (*a5 < v16)
  {
    v17 = -5;
LABEL_14:
    *a8 = v17;
LABEL_15:
    xerbla_();
    return 0;
  }
  if (*a7 < v16)
  {
    v17 = -7;
    goto LABEL_14;
  }
  if (*a8)
    goto LABEL_15;
  Accelerate_AR_spotrf(a1, a2, (uint64_t)a4, a5, a8);
  if (!*a8)
    Accelerate_AR_spotrs(a1, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t ssyrk_noPack_LT(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, float32x2_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  double *v26;
  float32x2_t v27;
  BOOL v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  float32x2_t *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  char *v43;
  float32x2_t v44;
  char *v45;
  char *v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  __int32 *v51;
  float *v52;
  __int32 *v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x4_t *v65;
  uint64_t v66;
  __int32 *v67;
  __int32 *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  char *v81;
  float32x4_t v82;
  __n128 *v83;
  float32x4_t v84;
  __n128 *v85;
  __n128 *v86;
  float32x2_t *v87;
  uint64_t i;
  uint64_t v89;
  float32x2_t *v90;
  __int32 *v91;
  float32x2_t *v92;
  __int32 *v93;
  float32x2_t *v94;
  int32x2_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t *v112;
  float32x4_t v113;
  float32x4_t *v114;
  __n128 *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;

  a7.i64[1] = a8.i64[0];
  v21 = 0;
  v22 = 4 * a4;
  v23 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_14:
    if ((result & 2) != 0)
    {
      v36 = (float32x2_t *)&a5[v21];
      a5 = (_DWORD *)((char *)a5 + 2 * v23);
      v37 = a2;
      v38 = (__int32 *)((char *)a3 + v21 * v22);
      v39 = &v38[(unint64_t)v22 / 4];
      v40 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v41 = v40;
      if ((a2 & 1) == 0)
        goto LABEL_18;
      v13.i32[0] = *v38++;
      v14.i32[0] = *v39++;
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v40 = vmla_n_f32(v40, *(float32x2_t *)v17.f32, v13.f32[0]);
      v41 = vmla_n_f32(v41, *(float32x2_t *)v17.f32, v14.f32[0]);
      v37 = a2 - 1;
      if (a2 > 1)
      {
LABEL_18:
        do
        {
          v13.i64[0] = *(_QWORD *)v38;
          v38 += 2;
          v14.i64[0] = *(_QWORD *)v39;
          v39 += 2;
          v42 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          v40 = vmla_lane_f32(vmla_n_f32(v40, v42, v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v41 = vmla_lane_f32(vmla_n_f32(v41, v42, v14.f32[0]), a13, *(float32x2_t *)v14.f32, 1);
          v28 = v37 <= 2;
          v37 -= 2;
        }
        while (!v28);
      }
      v44 = *v36;
      v43 = (char *)v36 + v23;
      a13.i32[1] = *((_DWORD *)v43 + 1);
      v45 = &v43[-v23];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v40, a7.f32[0]), v44, a7, 2);
      *(_QWORD *)v45 = a8.i64[0];
      v46 = &v45[v23];
      *((_DWORD *)v46 + 1) = vmla_laneq_f32(vmul_n_f32(v41, *(float *)&a7), a13, a7, 2).i32[1];
      v47 = (float32x2_t *)&v46[-v23 + 8];
      v48 = v21 + 2;
      if (result > v21 + 2)
      {
        do
        {
          v49 = a2;
          v50 = (float *)((char *)a3 + v21 * v22);
          v51 = (__int32 *)((char *)a3 + v48 * v22);
          v52 = &v50[(unint64_t)v22 / 4];
          v53 = &v51[(unint64_t)v22 / 4];
          v54 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v55 = v54;
          if ((a2 & 1) == 0)
            goto LABEL_24;
          v17.i32[0] = *v51++;
          v18.i32[0] = *v53++;
          v56 = *v50++;
          v57 = *v52++;
          *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v54 = vmla_n_f32(v54, *(float32x2_t *)v17.f32, v56);
          v55 = vmla_n_f32(v55, *(float32x2_t *)v17.f32, v57);
          v49 = a2 - 1;
          if (a2 > 1)
          {
LABEL_24:
            do
            {
              v17.i64[0] = *(_QWORD *)v51;
              v51 += 2;
              v18.i64[0] = *(_QWORD *)v53;
              v53 += 2;
              v13.i64[0] = *(_QWORD *)v50;
              v50 += 2;
              v14.i64[0] = *(_QWORD *)v52;
              v52 += 2;
              v58 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v59 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v54 = vmla_lane_f32(vmla_n_f32(v54, v58, v13.f32[0]), v59, *(float32x2_t *)v13.f32, 1);
              v55 = vmla_lane_f32(vmla_n_f32(v55, v58, v14.f32[0]), v59, *(float32x2_t *)v14.f32, 1);
              v28 = v49 <= 2;
              v49 -= 2;
            }
            while (!v28);
          }
          v61 = *v47;
          v60 = (float32x2_t *)((char *)v47 + v23);
          v62 = *v60;
          v63 = (float32x2_t *)((char *)v60 + v23 + -2 * v23);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v54, a7.f32[0]), v61, a7, 2);
          *v63 = *(float32x2_t *)a8.i8;
          v64 = (float32x2_t *)((char *)v63 + v23);
          *v64 = vmla_laneq_f32(vmul_n_f32(v55, a7.f32[0]), v62, a7, 2);
          v47 = (float32x2_t *)((char *)v64 + v23 + -2 * v23 + 8);
          v48 += 2;
        }
        while (v48 < result);
        v21 += 2;
      }
      else
      {
        v21 += 2;
      }
    }
    for (; result > v21; v21 += 4)
    {
      v65 = (float32x4_t *)&a5[v21];
      a5 += v23;
      v66 = a2;
      v67 = (__int32 *)((char *)a3 + v21 * v22);
      v68 = &v67[(unint64_t)v22 / 4];
      v69 = (float32x2_t *)&v67[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
      v70 = (float32x2_t *)((char *)v69 + v22);
      v71 = (float32x4_t)veorq_s8(a8, a8);
      v72 = v71;
      v73 = *(float32x2_t *)v71.f32;
      v74 = *(float32x2_t *)v71.f32;
      if ((a2 & 1) == 0)
        goto LABEL_31;
      v13.i32[0] = *v67++;
      v14.i32[0] = *v68++;
      v15.i32[0] = v69->i32[0];
      v69 = (float32x2_t *)((char *)v69 + 4);
      v16.i32[0] = v70->i32[0];
      v70 = (float32x2_t *)((char *)v70 + 4);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v20 = (float32x2_t)vtrn1_s32((int32x2_t)v15, (int32x2_t)v16);
      *(float32x2_t *)&v17.u32[2] = v20;
      v71 = vmlaq_n_f32(v71, v17, v13.f32[0]);
      v72 = vmlaq_n_f32(v72, v17, v14.f32[0]);
      v73 = vmla_n_f32(v73, v20, v15.f32[0]);
      v74 = vmla_n_f32(v74, v20, v16.f32[0]);
      v66 = a2 - 1;
      if (a2 > 1)
      {
LABEL_31:
        do
        {
          v75.i64[0] = *(_QWORD *)v67;
          v67 += 2;
          v76.i64[0] = *(_QWORD *)v68;
          v68 += 2;
          v15 = *v69++;
          v16 = *v70++;
          v75.u64[1] = (unint64_t)v15;
          v76.u64[1] = (unint64_t)v16;
          v77 = (float32x4_t)vtrn1q_s32(v75, v76);
          v78 = (float32x4_t)vtrn2q_s32(v75, v76);
          v71 = vmlaq_lane_f32(vmlaq_n_f32(v71, v77, *(float *)v75.i32), v78, *(float32x2_t *)v75.i8, 1);
          v72 = vmlaq_lane_f32(vmlaq_n_f32(v72, v77, *(float *)v76.i32), v78, *(float32x2_t *)v76.i8, 1);
          v73 = vmla_lane_f32(vmla_n_f32(v73, *(float32x2_t *)&v77.u32[2], v15.f32[0]), *(float32x2_t *)&v78.u32[2], v15, 1);
          v74 = vmla_lane_f32(vmla_n_f32(v74, *(float32x2_t *)&v77.u32[2], v16.f32[0]), *(float32x2_t *)&v78.u32[2], v16, 1);
          v28 = v66 <= 2;
          v66 -= 2;
        }
        while (!v28);
      }
      v80 = *v65;
      v79 = (float32x4_t *)((char *)v65 + v23);
      v82 = *v79;
      v81 = (char *)v79 + v23;
      v13.i64[0] = *((_QWORD *)v81 + 1);
      v14.i64[0] = *(_QWORD *)&v81[v23 + 8];
      v83 = (__n128 *)&v81[-2 * v23];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v71, a7.f32[0]), v80, a7, 2);
      v84 = vmlaq_laneq_f32(vmulq_n_f32(v72, a7.f32[0]), v82, a7, 2);
      v85 = (__n128 *)((char *)v83 + v23);
      *v83 = (__n128)a8;
      v86 = v83 + 1;
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u32[0] = v84.u32[1];
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u64[0] = v84.u64[1];
      v87 = (float32x2_t *)((char *)v85 + v23);
      *v87 = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), *(float32x2_t *)v13.f32, a7, 2);
      v87->i32[(unint64_t)v23 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v74, *(float *)&a7), *(float32x2_t *)&v14, a7, 2).i32[1];
      for (i = v21 + 4; i < result; i += 4)
      {
        v89 = a2;
        v90 = (float32x2_t *)((char *)a3 + v21 * v22);
        v91 = (__int32 *)((char *)a3 + i * v22);
        v92 = (float32x2_t *)((char *)v90 + v22);
        v93 = &v91[(unint64_t)v22 / 4];
        v94 = (float32x2_t *)((char *)v90 + v22 + v22);
        v95 = (int32x2_t *)&v91[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
        v96 = (float32x2_t *)((char *)v94 + v22);
        v97 = (float32x2_t *)((char *)v95 + v22);
        v98 = (float32x4_t)veorq_s8(a8, a8);
        v99 = v98;
        v100 = v98;
        v101 = v98;
        if ((a2 & 1) == 0)
          goto LABEL_36;
        v17.i32[0] = *v91++;
        v18.i32[0] = *v93++;
        v19.i32[0] = v95->i32[0];
        v95 = (int32x2_t *)((char *)v95 + 4);
        v20.i32[0] = v97->i32[0];
        v97 = (float32x2_t *)((char *)v97 + 4);
        v102 = v90->f32[0];
        v90 = (float32x2_t *)((char *)v90 + 4);
        v103 = v92->f32[0];
        v92 = (float32x2_t *)((char *)v92 + 4);
        v104 = v94->f32[0];
        v94 = (float32x2_t *)((char *)v94 + 4);
        v105 = v96->f32[0];
        v96 = (float32x2_t *)((char *)v96 + 4);
        *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
        v20 = (float32x2_t)vtrn1_s32(v19, (int32x2_t)v20);
        *(float32x2_t *)&v17.u32[2] = v20;
        v98 = vmlaq_n_f32(v98, v17, v102);
        v99 = vmlaq_n_f32(v99, v17, v103);
        v100 = vmlaq_n_f32(v100, v17, v104);
        v101 = vmlaq_n_f32(v101, v17, v105);
        v89 = a2 - 1;
        if (a2 > 1)
        {
LABEL_36:
          do
          {
            v17.i64[0] = *(_QWORD *)v91;
            v91 += 2;
            v18.i64[0] = *(_QWORD *)v93;
            v93 += 2;
            v19 = *v95++;
            v20 = *v97++;
            v106 = *v90++;
            v107 = *v92++;
            v15 = *v94++;
            v16 = *v96++;
            *(int32x2_t *)&v17.u32[2] = v19;
            v18.u64[1] = (unint64_t)v20;
            v108 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, v18);
            v109 = (float32x4_t)vtrn2q_s32((int32x4_t)v17, v18);
            v98 = vmlaq_lane_f32(vmlaq_n_f32(v98, v108, v106.f32[0]), v109, v106, 1);
            v99 = vmlaq_lane_f32(vmlaq_n_f32(v99, v108, v107.f32[0]), v109, v107, 1);
            v100 = vmlaq_lane_f32(vmlaq_n_f32(v100, v108, v15.f32[0]), v109, v15, 1);
            v101 = vmlaq_lane_f32(vmlaq_n_f32(v101, v108, v16.f32[0]), v109, v16, 1);
            v28 = v89 <= 2;
            v89 -= 2;
          }
          while (!v28);
        }
        v111 = *(float32x4_t *)v86;
        v110 = (float32x4_t *)((char *)v86 + v23);
        v113 = *v110;
        v112 = (float32x4_t *)((char *)v110 + v23);
        v13 = *v112;
        v114 = (float32x4_t *)((char *)v112 + v23);
        v14 = *v114;
        v115 = (__n128 *)((char *)v114 + v23 + -4 * v23);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v98, a7.f32[0]), v111, a7, 2);
        *v115 = (__n128)a8;
        v116 = (float32x4_t *)((char *)v115 + v23);
        *v116 = vmlaq_laneq_f32(vmulq_n_f32(v99, a7.f32[0]), v113, a7, 2);
        v117 = (float32x4_t *)((char *)v116 + v23);
        *v117 = vmlaq_laneq_f32(vmulq_n_f32(v100, a7.f32[0]), v13, a7, 2);
        v118 = (float32x4_t *)((char *)v117 + v23);
        *v118 = vmlaq_laneq_f32(vmulq_n_f32(v101, a7.f32[0]), v14, a7, 2);
        v86 = (__n128 *)((char *)&v118[1] + v23 + -4 * v23);
      }
    }
    return result;
  }
  v24 = a5;
  a5 = (_DWORD *)((char *)a5 + v23);
  v25 = a2;
  v26 = (double *)a3;
  v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v26 = (double *)(a3 + 1), v27.f32[0] = *a3 * *a3, v25 = a2 - 1, a2 > 1))
  {
    do
    {
      a12 = *(float32x2_t *)v26++;
      v27 = vmla_f32(v27, a12, a12);
      v28 = v25 <= 2;
      v25 -= 2;
    }
    while (!v28);
    v27.f32[0] = vaddv_f32(v27);
  }
  a12.i32[0] = *v24;
  v27.f32[0] = v27.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v27, a12, a7, 2);
  *v24 = a8.i32[0];
  v29 = (float32x2_t *)(v24 + 1);
  v30 = 1;
  if (result > 1)
  {
    do
    {
      v31 = a2;
      v32 = (uint64_t *)a3;
      v33 = (__int32 *)((char *)a3 + v30 * v22);
      v34 = &v33[(unint64_t)v22 / 4];
      v35 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0)
        goto LABEL_11;
      v17.i32[0] = *v33++;
      v18.i32[0] = *v34++;
      v32 = (uint64_t *)(a3 + 1);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
      v35 = vmla_n_f32(v35, *(float32x2_t *)v17.f32, *a3);
      v31 = a2 - 1;
      if (a2 > 1)
      {
LABEL_11:
        do
        {
          v17.i64[0] = *(_QWORD *)v33;
          v33 += 2;
          v18.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v13.i64[0] = *v32++;
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v35 = vmla_lane_f32(vmla_n_f32(v35, (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8), v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v28 = v31 <= 2;
          v31 -= 2;
        }
        while (!v28);
      }
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v35, a7.f32[0]), *v29, a7, 2);
      *v29++ = *(float32x2_t *)a8.i8;
      v30 += 2;
    }
    while (v30 < result);
    v21 = 1;
    goto LABEL_14;
  }
  return result;
}

uint64_t sgePack_A_NoTran_Aligned(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  _X3 = 4 * a4;
  v7 = _X2 + 2;
  do
  {
    do
    {
      v8 = *_X2;
      v9 = _X2[1];
      _X2 = (__int128 *)((char *)_X2 + _X3);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v8;
      a5[1] = v9;
      a5 += 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 2;
  }
  while (result);
  return result;
}

uint64_t strsm_noPack_LUTU(uint64_t result, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  __int32 *v27;
  __int32 *v28;
  __int32 *v29;
  __int32 *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  float32x4_t v42;
  __int32 *v43;
  __int32 *v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int64x2_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  float32x4_t *v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t *v92;
  uint64_t *v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float32_t v117;
  float32_t v118;
  uint64_t v119;

  v9 = a7;
  v119 = result;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (__N < 1)
      {
        v16 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v21 = __X + 1;
        v16 = 2;
        v22 = __N;
        do
        {
          v23 = *v21;
          v24 = *(v21 - 1) * v9;
          *(v21 - 1) = v24;
          *v21 = (float)(v23 * v9) - (float)(v24 * v20);
          v21 += __incX;
          --v22;
        }
        while (v22);
      }
    }
    else if ((result & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      result = v119;
      v9 = a7;
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
  }
  else if (__N < 1)
  {
    v16 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = __X + 2;
    v16 = 3;
    v17 = __N;
    do
    {
      v18 = *(v15 - 2) * v9;
      v19 = (float)(*(v15 - 1) * v9) - (float)(v18 * v11);
      *(v15 - 2) = v18;
      *(v15 - 1) = v19;
      *v15 = -(float)((float)((float)(v14 * v19) + (float)(v18 * v13)) - (float)(*v15 * v9));
      v15 += __incX;
      --v17;
    }
    while (v17);
  }
  if (v16 < result)
  {
    v25 = v16;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (__int32 *)(a3 + 4 * v25 * a4);
        v28 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        result = (uint64_t)(v29 + 1);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26 * __incX];
          v32 = (float32x4_t *)&__X[(v26 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v26 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v26 | 3) * __incX];
          v35 = 0uLL;
          if ((v16 & 1) != 0)
          {
            v53.i32[0] = *v27;
            v53.i32[1] = *v28;
            v53.i32[2] = *v29;
            v53.i32[3] = *v30;
            v54 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v42 = vmlaq_n_f32((float32x4_t)0, v53, v54);
            v55 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v56 = v55;
            v57 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, v53, v56);
            v37 = vmlaq_n_f32((float32x4_t)0, v53, v57);
            v58 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v39 = v25 - 1;
            v36 = vmlaq_n_f32((float32x4_t)0, v53, v58);
            v40 = v30 + 1;
            v41 = v29 + 1;
            v43 = v28 + 1;
            v44 = v27 + 1;
            if (v25 != 1)
            {
LABEL_22:
              v45 = 0;
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
              do
              {
                v49.i64[0] = *(_QWORD *)&v44[v45];
                v50.i64[0] = *(_QWORD *)&v43[v45];
                v49.i64[1] = *(_QWORD *)&v41[v45];
                v50.i64[1] = *(_QWORD *)&v40[v45];
                v51 = (float32x4_t)vtrn1q_s32(v49, v50);
                v42 = vmlaq_n_f32(v42, v51, v31->f32[v45]);
                v38 = vmlaq_n_f32(v38, v51, v32->f32[v45]);
                v37 = vmlaq_n_f32(v37, v51, v33->f32[v45]);
                v36 = vmlaq_n_f32(v36, v51, v34->f32[v45]);
                v52 = (float32x4_t)vtrn2q_s32(v49, v50);
                v46 = vmlaq_n_f32(v46, v52, v31->f32[v45 + 1]);
                v47 = vmlaq_n_f32(v47, v52, v32->f32[v45 + 1]);
                v48 = vmlaq_n_f32(v48, v52, v33->f32[v45 + 1]);
                v35 = vmlaq_n_f32(v35, v52, v34->f32[v45 + 1]);
                v45 += 2;
                v39 -= 2;
              }
              while (v39);
              v43 = (__int32 *)((char *)v43 + v45 * 4);
              v41 = (__int32 *)((char *)v41 + v45 * 4);
              v40 = (__int32 *)((char *)v40 + v45 * 4);
              v31 = (float32x4_t *)((char *)v31 + v45 * 4);
              v32 = (float32x4_t *)((char *)v32 + v45 * 4);
              v33 = (float32x4_t *)((char *)v33 + v45 * 4);
              v34 = (float32x4_t *)((char *)v34 + v45 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v25;
            v40 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v41 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v42 = 0uLL;
            v43 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v44 = (__int32 *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v48 = 0uLL;
          v47 = 0uLL;
          v46 = 0uLL;
LABEL_27:
          v59 = vaddq_f32(v48, v37);
          v60 = vmulq_n_f32(*v33, v9);
          v61 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v9), vaddq_f32(v46, v42));
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v9), vaddq_f32(v47, v38));
          v63 = (int64x2_t)vsubq_f32(v60, v59);
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v9), vaddq_f32(v35, v36));
          v65 = (int32x4_t)vzip1q_s64(v61, v63);
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip2q_s64(v61, v63);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (float32x4_t)vtrn1q_s32(v65, v66);
          v70 = (float32x4_t)vtrn2q_s32(v65, v66);
          v71 = (float32x4_t)vtrn1q_s32(v67, v68);
          v72 = (float32x4_t)vtrn2q_s32(v67, v68);
          v67.i32[0] = *v43;
          v73 = vmlsq_lane_f32(v70, v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v41;
          v66.i32[0] = v41[1];
          v74 = vmlsq_lane_f32(v71, v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v40;
          v60.i32[0] = v40[1];
          v75 = vmlsq_lane_f32(v74, v73, *(float32x2_t *)v66.i8, 0);
          v76 = vmlsq_lane_f32(vmlsq_lane_f32(v72, v69, *(float32x2_t *)v67.i8, 0), v73, *(float32x2_t *)v60.f32, 0);
          v67.i32[0] = v40[2];
          v77 = (int64x2_t)vmlsq_lane_f32(v76, v75, *(float32x2_t *)v67.i8, 0);
          v78 = (int32x4_t)vzip1q_s64((int64x2_t)v69, (int64x2_t)v75);
          v79 = (int32x4_t)vzip1q_s64((int64x2_t)v73, v77);
          v80 = (int32x4_t)vzip2q_s64((int64x2_t)v69, (int64x2_t)v75);
          v81 = (int32x4_t)vzip2q_s64((int64x2_t)v73, v77);
          *(int32x4_t *)v31 = vtrn1q_s32(v78, v79);
          *(int32x4_t *)v32 = vtrn2q_s32(v78, v79);
          *(int32x4_t *)v33 = vtrn1q_s32(v80, v81);
          *(int32x4_t *)v34 = vtrn2q_s32(v80, v81);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v119)
        return result;
    }
    v82 = (__int32 *)(a3 + 4 * v25 * a4);
    v83 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v84 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v85 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    result = (uint64_t)(v84 + 1);
    while (1)
    {
      v86 = (float32x4_t *)&__X[v26 * __incX];
      v87 = 0uLL;
      if ((v16 & 1) != 0)
      {
        v94.i32[0] = *v82;
        v94.i32[1] = *v83;
        v94.i32[2] = *v84;
        v94.i32[3] = *v85;
        v95 = v86->i32[0];
        v86 = (float32x4_t *)((char *)v86 + 4);
        v88 = v25 - 1;
        v89 = vmlaq_n_f32((float32x4_t)0, v94, *(float *)&v95);
        v90 = v85 + 1;
        v91 = v84 + 1;
        v92 = (uint64_t *)(v83 + 1);
        v93 = (uint64_t *)(v82 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v96 = *v93++;
            v97.i64[0] = v96;
            v98 = *v92++;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v91;
            v91 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v90;
            v90 += 2;
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v103 = (float32x4_t)vtrn1q_s32(v97, v99);
            v104 = (float32x4_t)vtrn2q_s32(v97, v99);
            v99.i32[0] = v86->i32[0];
            v105 = v86->f32[1];
            v86 = (float32x4_t *)((char *)v86 + 8);
            v89 = vmlaq_n_f32(v89, v103, *(float *)v99.i32);
            v87 = vmlaq_n_f32(v87, v104, v105);
            v88 -= 2;
          }
          while (v88);
        }
      }
      else
      {
        v88 = v25;
        v89 = 0uLL;
        v90 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v91 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v92 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v93 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v86, v9), vaddq_f32(v87, v89)).u32[0];
      _S4 = *(_DWORD *)v92;
      __asm { FMLS            S3, S4, V0.S[0] }
      _S4 = *v91;
      __asm { FMLS            S2, S4, V0.S[0] }
      _S4 = *v90;
      __asm { FMLS            S1, S4, V0.S[0] }
      v117 = _S2 - (float)(_S3 * *((float *)v91 + 1));
      v118 = (float)(_S1 - (float)(_S3 * *((float *)v90 + 1))) - (float)(v117 * *((float *)v90 + 2));
      v86->i32[0] = _S0;
      v86->f32[1] = _S3;
      v86->f32[2] = v117;
      v86->f32[3] = v118;
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
  return result;
}

void strsm_noPack_LUTN(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float *v9;
  float v10;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  __int32 *v45;
  __int32 *v46;
  __int32 *v47;
  __int32 *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  __int32 *v58;
  __int32 *v59;
  float32x4_t v60;
  __int32 *v61;
  __int32 *v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int64x2_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  __int32 *v103;
  __int32 *v104;
  __int32 *v105;
  __int32 *v106;
  float32x4_t *v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  __int32 *v111;
  __int32 *v112;
  uint64_t *v113;
  uint64_t *v114;
  float32x4_t v115;
  __int32 v116;
  uint64_t v117;
  int32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float v126;
  float32x4_t v127;
  float32_t v128;
  float32_t v129;
  float32_t v130;
  uint64_t v131;
  float *v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v9 = a3;
  v10 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v22 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v31 = __X + 1;
        v22 = 2;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = *v31;
          v35 = v28 * *(v31 - 1);
          *(v31 - 1) = v35;
          *v31 = v33 * (float)((float)(v34 * v10) - (float)(v35 * v29));
          v31 += __incX;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v10 = a7;
      v22 = 1;
    }
    else
    {
      v22 = 0;
    }
  }
  else if (__N < 1)
  {
    v22 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = __X + 2;
    v22 = 3;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *(v21 - 2);
      v26 = v19 * (float)((float)(*(v21 - 1) * v10) - (float)(v25 * v18));
      *(v21 - 2) = v25;
      *(v21 - 1) = v26;
      *v21 = v24 * (float)-(float)((float)((float)(v16 * v26) + (float)(v25 * v15)) - (float)(*v21 * v10));
      v21 += __incX;
      --v23;
    }
    while (v23);
  }
  if (v22 < a1)
  {
    v36 = v22;
    v131 = a1;
    v132 = v9;
    while (1)
    {
      v37 = 1.0 / v9[v36 * a4 + v36];
      v38 = (v36 + 1) * a4;
      v39 = 1.0 / v9[v36 + 1 + v38];
      v40 = (v36 + 2) * a4;
      v41 = 1.0 / v9[v36 + 2 + v40];
      v42 = (v36 + 3) * a4;
      v43 = 1.0 / v9[v36 + 3 + v42];
      v136 = v42;
      v134 = v40;
      v135 = v38;
      v44 = 0;
      if (__N >= 4)
      {
        v45 = (__int32 *)&v9[v36 * a4];
        v46 = (__int32 *)&v9[v38];
        v47 = (__int32 *)&v9[v40];
        v48 = (__int32 *)&v9[v42];
        do
        {
          v49 = (float32x4_t *)&__X[v44 * __incX];
          v50 = (float32x4_t *)&__X[(v44 | 1) * __incX];
          v51 = (float32x4_t *)&__X[(v44 | 2) * __incX];
          v52 = (float32x4_t *)&__X[(v44 | 3) * __incX];
          v53 = 0uLL;
          if ((v22 & 1) != 0)
          {
            v71.i32[0] = *v45;
            v71.i32[1] = *v46;
            v71.i32[2] = *v47;
            v71.i32[3] = *v48;
            v72 = v49->f32[0];
            v49 = (float32x4_t *)((char *)v49 + 4);
            v60 = vmlaq_n_f32((float32x4_t)0, v71, v72);
            v73 = v50->f32[0];
            v50 = (float32x4_t *)((char *)v50 + 4);
            v74 = v73;
            v75 = v51->f32[0];
            v51 = (float32x4_t *)((char *)v51 + 4);
            v56 = vmlaq_n_f32((float32x4_t)0, v71, v74);
            v55 = vmlaq_n_f32((float32x4_t)0, v71, v75);
            v76 = v52->f32[0];
            v52 = (float32x4_t *)((char *)v52 + 4);
            v57 = v36 - 1;
            v54 = vmlaq_n_f32((float32x4_t)0, v71, v76);
            v58 = v48 + 1;
            v59 = v47 + 1;
            v61 = v46 + 1;
            v62 = v45 + 1;
            if (v36 != 1)
            {
LABEL_22:
              v63 = 0;
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v67.i64[0] = *(_QWORD *)&v62[v63];
                v68.i64[0] = *(_QWORD *)&v61[v63];
                v67.i64[1] = *(_QWORD *)&v59[v63];
                v68.i64[1] = *(_QWORD *)&v58[v63];
                v69 = (float32x4_t)vtrn1q_s32(v67, v68);
                v60 = vmlaq_n_f32(v60, v69, v49->f32[v63]);
                v56 = vmlaq_n_f32(v56, v69, v50->f32[v63]);
                v55 = vmlaq_n_f32(v55, v69, v51->f32[v63]);
                v54 = vmlaq_n_f32(v54, v69, v52->f32[v63]);
                v70 = (float32x4_t)vtrn2q_s32(v67, v68);
                v64 = vmlaq_n_f32(v64, v70, v49->f32[v63 + 1]);
                v65 = vmlaq_n_f32(v65, v70, v50->f32[v63 + 1]);
                v66 = vmlaq_n_f32(v66, v70, v51->f32[v63 + 1]);
                v53 = vmlaq_n_f32(v53, v70, v52->f32[v63 + 1]);
                v63 += 2;
                v57 -= 2;
              }
              while (v57);
              v61 = (__int32 *)((char *)v61 + v63 * 4);
              v59 = (__int32 *)((char *)v59 + v63 * 4);
              v58 = (__int32 *)((char *)v58 + v63 * 4);
              v49 = (float32x4_t *)((char *)v49 + v63 * 4);
              v50 = (float32x4_t *)((char *)v50 + v63 * 4);
              v51 = (float32x4_t *)((char *)v51 + v63 * 4);
              v52 = (float32x4_t *)((char *)v52 + v63 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = v36;
            v58 = (__int32 *)&v9[v42];
            v59 = v47;
            v60 = 0uLL;
            v61 = (__int32 *)&v9[v38];
            v62 = (__int32 *)&v9[v36 * a4];
            if (v36)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v77 = vaddq_f32(v66, v55);
          v78 = vmulq_n_f32(*v51, v10);
          v79 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v49, v10), vaddq_f32(v64, v60));
          v80 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v50, v10), vaddq_f32(v65, v56));
          v81 = (int64x2_t)vsubq_f32(v78, v77);
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v52, v10), vaddq_f32(v53, v54));
          v83 = (int32x4_t)vzip1q_s64(v79, v81);
          v84 = (int32x4_t)vzip1q_s64(v80, v82);
          v85 = (int32x4_t)vzip2q_s64(v79, v81);
          v86 = (int32x4_t)vzip2q_s64(v80, v82);
          v87 = (float32x4_t)vtrn1q_s32(v83, v84);
          v88 = (float32x4_t)vtrn2q_s32(v83, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = vmulq_n_f32(v87, v37);
          v85.i32[0] = *v61;
          v92 = vmlsq_lane_f32(v88, v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v59;
          v84.i32[0] = v59[1];
          v93 = vmlsq_lane_f32(v89, v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v58;
          v78.i32[0] = v58[1];
          v94 = vmlsq_lane_f32(v90, v91, *(float32x2_t *)v85.i8, 0);
          v95 = vmulq_n_f32(v92, v39);
          v96 = vmlsq_lane_f32(v93, v95, *(float32x2_t *)v84.i8, 0);
          v97 = vmulq_n_f32(v96, v41);
          v96.i32[0] = v58[2];
          v98 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v94, v95, *(float32x2_t *)v78.f32, 0), v97, *(float32x2_t *)v96.f32, 0), v43);
          v99 = (int32x4_t)vzip1q_s64((int64x2_t)v91, (int64x2_t)v97);
          v100 = (int32x4_t)vzip1q_s64((int64x2_t)v95, v98);
          v101 = (int32x4_t)vzip2q_s64((int64x2_t)v91, (int64x2_t)v97);
          v102 = (int32x4_t)vzip2q_s64((int64x2_t)v95, v98);
          *(int32x4_t *)v49 = vtrn1q_s32(v99, v100);
          *(int32x4_t *)v50 = vtrn2q_s32(v99, v100);
          *(int32x4_t *)v51 = vtrn1q_s32(v101, v102);
          *(int32x4_t *)v52 = vtrn2q_s32(v101, v102);
          v44 += 4;
        }
        while (v44 < __N - 3);
      }
      v9 = v132;
      if (v44 < __N)
        break;
LABEL_36:
      v36 += 4;
      if (v36 >= v131)
        return;
    }
    v103 = (__int32 *)&v132[v36 * a4];
    v104 = (__int32 *)&v132[v38];
    v105 = (__int32 *)&v132[v134];
    v106 = (__int32 *)&v132[v136];
    while (1)
    {
      v107 = (float32x4_t *)&__X[v44 * __incX];
      v108 = 0uLL;
      if ((v22 & 1) != 0)
      {
        v115.i32[0] = *v103;
        v115.i32[1] = *v104;
        v115.i32[2] = *v105;
        v115.i32[3] = *v106;
        v116 = v107->i32[0];
        v107 = (float32x4_t *)((char *)v107 + 4);
        v109 = v36 - 1;
        v110 = vmlaq_n_f32((float32x4_t)0, v115, *(float *)&v116);
        v111 = v106 + 1;
        v112 = v105 + 1;
        v113 = (uint64_t *)(v104 + 1);
        v114 = (uint64_t *)(v103 + 1);
        if (v36 != 1)
        {
          do
          {
LABEL_34:
            v117 = *v114++;
            v118.i64[0] = v117;
            v119 = *v113++;
            v120.i64[0] = v119;
            v121 = *(_QWORD *)v112;
            v112 += 2;
            v122 = v121;
            v123 = *(_QWORD *)v111;
            v111 += 2;
            v118.i64[1] = v122;
            v120.i64[1] = v123;
            v124 = (float32x4_t)vtrn1q_s32(v118, v120);
            v125 = (float32x4_t)vtrn2q_s32(v118, v120);
            v120.i32[0] = v107->i32[0];
            v126 = v107->f32[1];
            v107 = (float32x4_t *)((char *)v107 + 8);
            v110 = vmlaq_n_f32(v110, v124, *(float *)v120.i32);
            v108 = vmlaq_n_f32(v108, v125, v126);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v109 = v36;
        v110 = 0uLL;
        v111 = (__int32 *)&v132[v136];
        v112 = (__int32 *)&v132[v134];
        v113 = (uint64_t *)&v132[v135];
        v114 = (uint64_t *)&v132[v36 * a4];
        if (v36)
          goto LABEL_34;
      }
      v127 = vsubq_f32(vmulq_n_f32(*v107, v10), vaddq_f32(v110, v108));
      v127.f32[0] = v37 * v127.f32[0];
      v128 = v39 * (float)(v127.f32[1] - (float)(v127.f32[0] * *(float *)v113));
      v129 = v41
           * (float)((float)(v127.f32[2] - (float)(v127.f32[0] * *(float *)v112)) - (float)(v128 * *((float *)v112 + 1)));
      v130 = v43
           * (float)((float)((float)(v127.f32[3] - (float)(v127.f32[0] * *(float *)v111))
                           - (float)(v128 * *((float *)v111 + 1)))
                   - (float)(v129 * *((float *)v111 + 2)));
      v107->i32[0] = v127.i32[0];
      v107->f32[1] = v128;
      v107->f32[2] = v129;
      v107->f32[3] = v130;
      if (++v44 == __N)
        goto LABEL_36;
    }
  }
}

uint64_t strsm_noPack_LUNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x2_t *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t *v65;
  float32x4_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int64x2_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  int *v89;
  float *v90;
  uint64_t v91;
  float *v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32_t v112;
  BOOL v113;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v18 = *(float *)(a3 + 4 * (result + v7 * a4) - 8);
        v19 = (float *)(a5 + 4 * v7);
        v20 = a2;
        do
        {
          v21 = *(v19 - 1);
          v22 = *v19 * a7;
          *v19 = v22;
          *(v19 - 1) = (float)(v21 * a7) - (float)(v22 * v18);
          v19 += a6;
          --v20;
        }
        while (v20);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v16 = a2;
        v17 = (float *)(a5 + 4 * v7);
        do
        {
          *v17 = *v17 * a7;
          v17 += a6;
          --v16;
        }
        while (v16);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = *(float *)(a3 + 4 * (result - 3 + (result - 2) * a4));
      v11 = (float *)(a5 + 4 * v7);
      v12 = a2;
      do
      {
        v13 = *(v11 - 1);
        v14 = *v11 * a7;
        *v11 = v14;
        v15 = (float)(v13 * a7) - (float)(v14 * v8);
        *(v11 - 2) = -(float)((float)((float)(v10 * v15) + (float)(v14 * v9)) - (float)(*(v11 - 2) * a7));
        *(v11 - 1) = v15;
        v11 += a6;
        --v12;
      }
      while (v12);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v23 = v7 + 1;
    v24 = 8 * a4;
    while (1)
    {
      v25 = v23 - 4;
      if (a2 >= 4)
      {
        v26 = 0;
        v27 = a3 + 4 * v25;
        v28 = (float32x4_t *)(v27 + 4 * v23 * a4);
        v29 = result - v25;
        if (result - v25 <= 4)
          v29 = 4;
        v30 = (float32x4_t *)(v27 + 4 * (v23 - 1) * a4);
        v31 = (float32x2_t *)((char *)v30 - 4 * a4);
        while (1)
        {
          v32 = a5 + 4 * v26 * a6;
          v33 = (float *)(v32 + 4 * v23);
          v34 = a5 + 4 * (v26 | 1) * a6;
          v35 = (float *)(v34 + 4 * v23);
          v36 = a5 + 4 * (v26 | 2) * a6;
          v37 = (float *)(v36 + 4 * v23);
          v38 = a5 + 4 * (v26 | 3) * a6;
          v39 = (float *)(v38 + 4 * v23);
          v40 = 0uLL;
          if ((v29 & 1) != 0)
          {
            v59 = *v33++;
            v46 = vmlaq_n_f32((float32x4_t)0, *v28, v59);
            v60 = *v35++;
            v43 = vmlaq_n_f32((float32x4_t)0, *v28, v60);
            v61 = *v37++;
            v42 = vmlaq_n_f32((float32x4_t)0, *v28, v61);
            v62 = *v39++;
            v41 = vmlaq_n_f32((float32x4_t)0, *v28, v62);
            v44 = v29 - 5;
            v45 = (float32x4_t *)((char *)v28 + 4 * a4);
            if (v29 != 5)
            {
LABEL_24:
              v47 = 0uLL;
              v48 = 0uLL;
              v49 = 0uLL;
              do
              {
                v50 = *v33;
                v51 = v33[1];
                v33 += 2;
                v46 = vmlaq_n_f32(v46, *v45, v50);
                v52 = *v35;
                v53 = v35[1];
                v35 += 2;
                v43 = vmlaq_n_f32(v43, *v45, v52);
                v54 = *v37;
                v55 = v37[1];
                v37 += 2;
                v42 = vmlaq_n_f32(v42, *v45, v54);
                v56 = *v39;
                v57 = v39[1];
                v39 += 2;
                v41 = vmlaq_n_f32(v41, *v45, v56);
                v58 = *(float32x4_t *)((char *)v45 + 4 * a4);
                v47 = vmlaq_n_f32(v47, v58, v51);
                v48 = vmlaq_n_f32(v48, v58, v53);
                v49 = vmlaq_n_f32(v49, v58, v55);
                v45 = (float32x4_t *)((char *)v45 + v24);
                v40 = vmlaq_n_f32(v40, v58, v57);
                v44 -= 2;
              }
              while (v44);
              goto LABEL_29;
            }
          }
          else
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = v29 - 4;
            v45 = v28;
            v46 = 0uLL;
            if (v29 != 4)
              goto LABEL_24;
          }
          v49 = 0uLL;
          v48 = 0uLL;
          v47 = 0uLL;
LABEL_29:
          v63 = (float32x4_t *)(v32 + 4 * v25);
          v64 = (float32x4_t *)(v34 + 4 * v25);
          v65 = (float32x4_t *)(v36 + 4 * v25);
          v66 = (float32x4_t *)(v38 + 4 * v25);
          v67 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v63, a7), vaddq_f32(v47, v46));
          v68 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v64, a7), vaddq_f32(v48, v43));
          v69 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v65, a7), vaddq_f32(v49, v42));
          v70 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v66, a7), vaddq_f32(v40, v41));
          v71 = (int32x4_t)vzip1q_s64(v67, v69);
          v72 = (int32x4_t)vzip1q_s64(v68, v70);
          v73 = (int32x4_t)vzip2q_s64(v67, v69);
          v74 = (int32x4_t)vzip2q_s64(v68, v70);
          v75 = (float32x4_t)vtrn1q_s32(v71, v72);
          v76 = (float32x4_t)vtrn2q_s32(v71, v72);
          v77 = (float32x4_t)vtrn1q_s32(v73, v74);
          v78 = (float32x4_t)vtrn2q_s32(v73, v74);
          v79 = vmlsq_laneq_f32(v77, v78, *v30, 2);
          *(float32x2_t *)v73.i8 = *v31;
          v80 = vmlsq_lane_f32(vmlsq_lane_f32(v76, v78, *(float32x2_t *)v30->f32, 1), v79, *v31, 1);
          v73.i32[0] = v31->i32[-a4];
          v81 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v75, v78, *(float32x2_t *)v30->f32, 0), v79, *v31, 0), v80, *(float32x2_t *)v73.i8, 0);
          v82 = (int32x4_t)vzip1q_s64(v81, (int64x2_t)v79);
          v83 = (int32x4_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v78);
          v84 = (int32x4_t)vzip2q_s64(v81, (int64x2_t)v79);
          v85 = (int32x4_t)vzip2q_s64((int64x2_t)v80, (int64x2_t)v78);
          *(int32x4_t *)v63 = vtrn1q_s32(v82, v83);
          *(int32x4_t *)v64 = vtrn2q_s32(v82, v83);
          *(int32x4_t *)v65 = vtrn1q_s32(v84, v85);
          *(int32x4_t *)v66 = vtrn2q_s32(v84, v85);
          v26 += 4;
          if (v26 >= a2 - 3)
            goto LABEL_32;
        }
      }
      v26 = 0;
LABEL_32:
      if (v26 < a2)
        break;
LABEL_42:
      v113 = v23 < 5;
      v23 -= 4;
      if (v113)
        return result;
    }
    v86 = a3 + 4 * v25;
    v87 = (float32x4_t *)(v86 + 4 * v23 * a4);
    v88 = 4;
    if (result - v25 > 4)
      v88 = result - v25;
    v89 = (int *)(v86 + 4 * (v23 - 1) * a4);
    v90 = (float *)&v89[-a4];
    while (1)
    {
      v91 = a5 + 4 * v26 * a6;
      v92 = (float *)(v91 + 4 * v23);
      v93 = 0uLL;
      if ((v88 & 1) != 0)
      {
        v97 = *v92++;
        v94 = vmlaq_n_f32((float32x4_t)0, *v87, v97);
        v95 = v88 - 5;
        v96 = (float32x4_t *)((char *)v87 + 4 * a4);
        if (v88 != 5)
        {
          do
          {
LABEL_40:
            v98 = *v92;
            v99 = v92[1];
            v92 += 2;
            v94 = vmlaq_n_f32(v94, *v96, v98);
            v93 = vmlaq_n_f32(v93, *(float32x4_t *)((char *)v96 + 4 * a4), v99);
            v96 = (float32x4_t *)((char *)v96 + v24);
            v95 -= 2;
          }
          while (v95);
        }
      }
      else
      {
        v94 = 0uLL;
        v95 = v88 - 4;
        v96 = v87;
        if (v88 != 4)
          goto LABEL_40;
      }
      v100 = (float32x4_t *)(v91 + 4 * v25);
      _Q1 = vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v94, v93));
      _S4 = v89[2];
      __asm { FMLS            S2, S4, V1.S[3] }
      _S5 = *v89;
      _S4 = v89[1];
      __asm
      {
        FMLS            S3, S4, V1.S[3]
        FMLS            S4, S5, V1.S[3]
      }
      v112 = _S3 - (float)(_S2 * v90[1]);
      v100->f32[0] = (float)(_S4 - (float)(_S2 * *(float *)&v89[-a4])) - (float)(v112 * v90[-a4]);
      v100->f32[1] = v112;
      v100->f32[2] = _S2;
      v100->i32[3] = _Q1.i32[3];
      if (++v26 == a2)
        goto LABEL_42;
    }
  }
  return result;
}

uint64_t strsm_noPack_LUNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x2_t *v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t *v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int64x2_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float *v103;
  float *v104;
  uint64_t v105;
  float *v106;
  float32x4_t v107;
  float32x4_t *v108;
  uint64_t v109;
  float32x4_t v110;
  float v111;
  float v112;
  float v113;
  float32x4_t *v114;
  float32x4_t v115;
  float v116;
  float32_t v117;
  float32_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v23 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
        v24 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
        v25 = (float *)(a5 + 4 * v7);
        v26 = a2;
        v27 = 1.0 / *(float *)(a3 + 4 * (result - 2 + (result - 2) * a4));
        do
        {
          v28 = *(v25 - 1);
          v29 = v24 * *v25;
          *v25 = v29;
          *(v25 - 1) = v27 * (float)((float)(v28 * a7) - (float)(v29 * v23));
          v25 += a6;
          --v26;
        }
        while (v26);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v20 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v21 = (float *)(a5 + 4 * v7);
        v22 = a2;
        do
        {
          *v21 = v20 * *v21;
          v21 += a6;
          --v22;
        }
        while (v22);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = (result - 2) * a4;
      v11 = *(float *)(a3 + 4 * (v10 + result - 3));
      v12 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
      v13 = 1.0 / *(float *)(a3 + 4 * (result - 2 + v10));
      v14 = (float *)(a5 + 4 * v7);
      v15 = a2;
      v16 = 1.0 / *(float *)(a3 + 4 * (result - 3 + (result - 3) * a4));
      do
      {
        v17 = *(v14 - 1);
        v18 = v12 * *v14;
        *v14 = v18;
        v19 = v13 * (float)((float)(v17 * a7) - (float)(v18 * v8));
        *(v14 - 2) = v16 * (float)-(float)((float)((float)(v11 * v19) + (float)(v18 * v9)) - (float)(*(v14 - 2) * a7));
        *(v14 - 1) = v19;
        v14 += a6;
        --v15;
      }
      while (v15);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v30 = v7 + 1;
    v120 = a4 + 1;
    v121 = result;
    v31 = -a4;
    v32 = 8 * a4;
    v33 = 4 * a4;
    v122 = a3;
    v123 = a4;
    while (1)
    {
      v34 = v30 - 4;
      v35 = 1.0 / *(float *)(a3 + 4 * (v30 - 4) * v120);
      v36 = 1.0 / *(float *)(a3 + 4 * (v30 - 3) * v120);
      v37 = 1.0 / *(float *)(a3 + 4 * (v30 - 2) * v120);
      v38 = (v30 - 1) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v30 - 1 + v38));
      v124 = v38;
      v40 = 0;
      if (a2 >= 4)
      {
        v41 = a3 + 4 * v34;
        v42 = (float32x4_t *)(v41 + 4 * v30 * a4);
        if (result - v34 <= 4)
          v43 = 4;
        else
          v43 = result - v34;
        v44 = (float32x4_t *)(v41 + 4 * v38);
        v45 = (float32x2_t *)&v44->f32[v31];
        do
        {
          v46 = a5 + 4 * v40 * a6;
          v47 = (float *)(v46 + 4 * v30);
          v48 = a5 + 4 * (v40 | 1) * a6;
          v49 = (float *)(v48 + 4 * v30);
          v50 = a5 + 4 * (v40 | 2) * a6;
          v51 = (float *)(v50 + 4 * v30);
          v52 = a5 + 4 * (v40 | 3) * a6;
          v53 = (float *)(v52 + 4 * v30);
          v54 = 0uLL;
          if ((v43 & 1) != 0)
          {
            v73 = *v47++;
            v60 = vmlaq_n_f32((float32x4_t)0, *v42, v73);
            v74 = *v49++;
            v57 = vmlaq_n_f32((float32x4_t)0, *v42, v74);
            v75 = *v51++;
            v56 = vmlaq_n_f32((float32x4_t)0, *v42, v75);
            v76 = *v53++;
            v55 = vmlaq_n_f32((float32x4_t)0, *v42, v76);
            v58 = v43 - 5;
            v59 = (float32x4_t *)((char *)v42 + 4 * a4);
            if (v43 != 5)
            {
LABEL_25:
              v61 = 0uLL;
              v62 = 0uLL;
              v63 = 0uLL;
              do
              {
                v64 = *v47;
                v65 = v47[1];
                v47 += 2;
                v60 = vmlaq_n_f32(v60, *v59, v64);
                v66 = *v49;
                v67 = v49[1];
                v49 += 2;
                v57 = vmlaq_n_f32(v57, *v59, v66);
                v68 = *v51;
                v69 = v51[1];
                v51 += 2;
                v56 = vmlaq_n_f32(v56, *v59, v68);
                v70 = *v53;
                v71 = v53[1];
                v53 += 2;
                v55 = vmlaq_n_f32(v55, *v59, v70);
                v72 = *(float32x4_t *)((char *)v59 + v33);
                v61 = vmlaq_n_f32(v61, v72, v65);
                v62 = vmlaq_n_f32(v62, v72, v67);
                v63 = vmlaq_n_f32(v63, v72, v69);
                v59 = (float32x4_t *)((char *)v59 + v32);
                v54 = vmlaq_n_f32(v54, v72, v71);
                v58 -= 2;
              }
              while (v58);
              goto LABEL_30;
            }
          }
          else
          {
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            v58 = v43 - 4;
            v59 = v42;
            v60 = 0uLL;
            if (v43 != 4)
              goto LABEL_25;
          }
          v63 = 0uLL;
          v62 = 0uLL;
          v61 = 0uLL;
LABEL_30:
          v77 = (float32x4_t *)(v46 + 4 * v34);
          v78 = (float32x4_t *)(v48 + 4 * v34);
          v79 = (float32x4_t *)(v50 + 4 * v34);
          v80 = (float32x4_t *)(v52 + 4 * v34);
          v81 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v77, a7), vaddq_f32(v61, v60));
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v78, a7), vaddq_f32(v62, v57));
          v83 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v79, a7), vaddq_f32(v63, v56));
          v84 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v80, a7), vaddq_f32(v54, v55));
          v85 = (int32x4_t)vzip1q_s64(v81, v83);
          v86 = (int32x4_t)vzip1q_s64(v82, v84);
          v87 = (int32x4_t)vzip2q_s64(v81, v83);
          v88 = (int32x4_t)vzip2q_s64(v82, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = (float32x4_t)vtrn1q_s32(v87, v88);
          v92 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v87, v88), v39);
          v93 = vmulq_n_f32(vmlsq_laneq_f32(v91, v92, *v44, 2), v37);
          *(float32x2_t *)v91.f32 = *v45;
          v94 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v90, v92, *(float32x2_t *)v44->f32, 1), v93, *v45, 1), v36);
          v91.i32[0] = v45->i32[v31];
          v95 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v89, v92, *(float32x2_t *)v44->f32, 0), v93, *v45, 0), v94, *(float32x2_t *)v91.f32, 0), v35);
          v96 = (int32x4_t)vzip1q_s64(v95, (int64x2_t)v93);
          v97 = (int32x4_t)vzip1q_s64((int64x2_t)v94, (int64x2_t)v92);
          v98 = (int32x4_t)vzip2q_s64(v95, (int64x2_t)v93);
          v99 = (int32x4_t)vzip2q_s64((int64x2_t)v94, (int64x2_t)v92);
          *(int32x4_t *)v77 = vtrn1q_s32(v96, v97);
          *(int32x4_t *)v78 = vtrn2q_s32(v96, v97);
          *(int32x4_t *)v79 = vtrn1q_s32(v98, v99);
          *(int32x4_t *)v80 = vtrn2q_s32(v98, v99);
          v40 += 4;
        }
        while (v40 < a2 - 3);
      }
      a3 = v122;
      a4 = v123;
      result = v121;
      if (v40 < a2)
        break;
LABEL_41:
      v119 = v30 < 5;
      v30 -= 4;
      if (v119)
        return result;
    }
    v100 = v122 + 4 * v34;
    v101 = (float32x4_t *)(v100 + 4 * v30 * v123);
    v102 = v121 - v34;
    if (v121 - v34 <= 4)
      v102 = 4;
    v103 = (float *)(v100 + 4 * v124);
    v104 = &v103[v31];
    while (1)
    {
      v105 = a5 + 4 * v40 * a6;
      v106 = (float *)(v105 + 4 * v30);
      v107 = 0uLL;
      if ((v102 & 1) != 0)
      {
        v111 = *v106++;
        v110 = vmlaq_n_f32((float32x4_t)0, *v101, v111);
        v108 = (float32x4_t *)((char *)v101 + 4 * v123);
        v109 = v102 - 5;
        if (v102 != 5)
        {
          do
          {
LABEL_39:
            v112 = *v106;
            v113 = v106[1];
            v106 += 2;
            v110 = vmlaq_n_f32(v110, *v108, v112);
            v107 = vmlaq_n_f32(v107, *(float32x4_t *)((char *)v108 + v33), v113);
            v108 = (float32x4_t *)((char *)v108 + v32);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v108 = v101;
        v109 = v102 - 4;
        v110 = 0uLL;
        if (v102 != 4)
          goto LABEL_39;
      }
      v114 = (float32x4_t *)(v105 + 4 * v34);
      v115 = vsubq_f32(vmulq_n_f32(*v114, a7), vaddq_f32(v110, v107));
      v116 = vmuls_lane_f32(v39, v115, 3);
      v117 = v37 * (float)(v115.f32[2] - (float)(v116 * v103[2]));
      v118 = v36 * (float)((float)(v115.f32[1] - (float)(v116 * v103[1])) - (float)(v117 * v104[1]));
      v114->f32[0] = v35
                   * (float)((float)((float)(v115.f32[0] - (float)(v116 * *v103)) - (float)(v117 * v103[v31]))
                           - (float)(v118 * v104[v31]));
      v114->f32[1] = v118;
      v114->f32[2] = v117;
      v114->f32[3] = v116;
      if (++v40 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

uint64_t sgePack_B_NoTran(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, float32x4_t *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  int32x4_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t v26;

  if (result >= 1)
  {
    v8 = 4 * a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = (uint64_t *)((char *)v10 + v8);
        v12 = &v10[a4];
        v13 = (uint64_t *)((char *)v10 + 12 * a4);
        v14 = result - 1;
        v15 = v10;
        if (result != 1)
        {
          do
          {
            a8.i64[0] = *v15++;
            v16.i64[0] = *v11++;
            v17 = *v12++;
            v18 = *v13++;
            a8.i64[1] = v17;
            v16.i64[1] = v18;
            *a5 = vmulq_n_f32((float32x4_t)vtrn1q_s32((int32x4_t)a8, v16), a6);
            v19 = a5 + 1;
            *v19 = vmulq_n_f32((float32x4_t)vtrn2q_s32((int32x4_t)a8, v16), a6);
            a5 = v19 + 1;
            v20 = v14 <= 2;
            v14 -= 2;
          }
          while (!v20);
        }
        if (!v14)
        {
          v21.i32[0] = *(_DWORD *)v15;
          v21.i32[1] = *(_DWORD *)v11;
          v21.i32[2] = *(_DWORD *)v12;
          v21.i32[3] = *(_DWORD *)v13;
          a8 = vmulq_n_f32(v21, a6);
          *a5++ = a8;
        }
        v9 += 4;
        v10 += 2 * a4;
      }
      while (v9 < a2 - 3);
    }
    v22 = a2 - v9;
    if (a2 > v9)
    {
      v23 = (float32x4_t *)((char *)a3 + 4 * v9 * a4);
      do
      {
        v24 = v23;
        v25 = result - 3;
        if (result > 3)
        {
          do
          {
            v26 = *v24++;
            a8 = vmulq_n_f32(v26, a6);
            *a5++ = a8;
            v20 = v25 <= 4;
            v25 -= 4;
          }
          while (!v20);
        }
        if (v25 != -2)
        {
          if (v25)
          {
            if (v25 != -1)
              goto LABEL_24;
          }
          else
          {
            a8.i32[2] = v24->i32[2];
          }
          a8.i32[1] = v24->i32[1];
        }
        a8.i32[0] = v24->i32[0];
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = a8;
LABEL_24:
        v23 = (float32x4_t *)((char *)v23 + v8);
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t sgePack_B_Tran(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, __n128 *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int32 *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  float32x4_t v19;
  __int32 *v20;
  __int32 v21;
  __int32 *v22;
  __int32 v23;
  __int32 v24;
  BOOL v25;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v10;
        v12 = result;
        do
        {
          v13 = *v11;
          v11 = (float32x4_t *)((char *)v11 + v8 * 4);
          a8 = vmulq_n_f32(v13, a6);
          *a5++ = (__n128)a8;
          --v12;
        }
        while (v12);
        v9 += 4;
        ++v10;
      }
      while (v9 < a2 - 3);
    }
    v14 = a2 - v9;
    if (a2 > v9)
    {
      v15 = (__int32 *)&a3[(unint64_t)v9 / 4];
      do
      {
        v16 = v15;
        v17 = result - 3;
        if (result > 3)
        {
          do
          {
            v19.i32[0] = *v16;
            v18 = &v16[v8];
            v21 = *v18;
            v20 = &v18[v8];
            v19.i32[1] = v21;
            v23 = *v20;
            v22 = &v20[v8];
            v19.i32[2] = v23;
            v24 = *v22;
            v16 = &v22[v8];
            v19.i32[3] = v24;
            a8 = vmulq_n_f32(v19, a6);
            *a5++ = (__n128)a8;
            v25 = v17 <= 4;
            v17 -= 4;
          }
          while (!v25);
        }
        if (v17 != -2)
        {
          if (v17)
          {
            if (v17 != -1)
              goto LABEL_21;
          }
          else
          {
            a8.i32[2] = v16[2 * a4];
          }
          a8.i32[1] = v16[a4];
        }
        a8.i32[0] = *v16;
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = (__n128)a8;
LABEL_21:
        ++v15;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t sgePack_A_NoTran_Unaligned(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _DWORD *i;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v5 = a4;
  if (result < 8)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (__int128 *)(a3 + 16);
    do
    {
      v8 = a2;
      v9 = v7;
      if (a2 >= 1)
      {
        do
        {
          v10 = *v9;
          *(_OWORD *)a5 = *(v9 - 1);
          *(_OWORD *)(a5 + 16) = v10;
          a5 += 32;
          v9 = (__int128 *)((char *)v9 + v5 * 4);
          --v8;
        }
        while (v8);
      }
      v6 += 8;
      v7 += 2;
    }
    while (v6 < result - 7);
  }
  if (v6 < result)
  {
    if (a2 <= 0)
      v11 = -(-a2 & 3);
    else
      v11 = a2 & 3;
    for (i = (_DWORD *)(a3 + 4 * v6); ; ++i)
    {
      if (a2 < 4)
      {
        v21 = (_DWORD *)(a3 + 4 * v6);
      }
      else
      {
        v13 = 0;
        v14 = i;
        do
        {
          v15 = v14;
          LODWORD(v16) = *v14;
          v17 = &v14[v5];
          HIDWORD(v16) = *v17;
          v18 = &v17[v5];
          LODWORD(v19) = *v18;
          v20 = &v18[v5];
          HIDWORD(v19) = *v20;
          v14 = &v20[v5];
          *(_QWORD *)a5 = v16;
          *(_QWORD *)(a5 + 8) = v19;
          a5 += 16;
          v13 += 4;
        }
        while (v13 < a2 - 3);
        v21 = &v15[4 * a4];
      }
      if (v11 == 1)
        goto LABEL_23;
      if (v11 == 2)
        goto LABEL_22;
      if (v11 == 3)
        break;
LABEL_24:
      if (++v6 == result)
        return result;
    }
    *(_DWORD *)(a5 + 8) = v21[2 * a4];
LABEL_22:
    *(_DWORD *)(a5 + 4) = v21[a4];
LABEL_23:
    *(_DWORD *)a5 = *v21;
    a5 += 16;
    goto LABEL_24;
  }
  return result;
}

uint64_t sgePack_A_NoTran(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 7) != 0)
    return sgePack_A_NoTran_Unaligned(result, a2, a3, a4, a5);
  else
    return sgePack_A_NoTran_Aligned(result, a2, (__int128 *)a3, a4, (_OWORD *)a5);
}

uint64_t sgePack_A_Tran_Unaligned(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  BOOL v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  int32x4_t *v29;
  uint64_t v30;
  int32x4_t v31;

  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (uint64_t *)((char *)a3 + 28 * a4);
    v7 = &a3[3 * a4];
    v8 = 8 * a4 - a2;
    v9 = a3;
    v10 = (uint64_t *)((char *)a3 + 20 * a4);
    v11 = &a3[2 * a4];
    v12 = (uint64_t *)((char *)a3 + 12 * a4);
    v13 = &a3[a4];
    v14 = (uint64_t *)((char *)a3 + 4 * a4);
    do
    {
      v15 = a2 - 1;
      if (a2 > 1)
      {
        do
        {
          v16.i64[0] = *v9++;
          v17.i64[0] = *v14++;
          v18 = *v13++;
          v19 = *v12++;
          v20.i64[0] = *v11++;
          v21.i64[0] = *v10++;
          v22 = *v7++;
          v23 = *v6++;
          v16.i64[1] = v18;
          v17.i64[1] = v19;
          v20.i64[1] = v22;
          v21.i64[1] = v23;
          *a5 = vtrn1q_s32(v16, v17);
          a5[1] = vtrn1q_s32(v20, v21);
          v24 = a5 + 2;
          *v24 = vtrn2q_s32(v16, v17);
          v24[1] = vtrn2q_s32(v20, v21);
          a5 = v24 + 2;
          v25 = v15 <= 2;
          v15 -= 2;
        }
        while (!v25);
      }
      if (!v15)
      {
        v26.i32[0] = *(_DWORD *)v9;
        v9 = (uint64_t *)((char *)v9 + 4);
        v26.i32[1] = *(_DWORD *)v14;
        v14 = (uint64_t *)((char *)v14 + 4);
        v26.i32[2] = *(_DWORD *)v13;
        v13 = (uint64_t *)((char *)v13 + 4);
        v26.i32[3] = *(_DWORD *)v12;
        v12 = (uint64_t *)((char *)v12 + 4);
        v27.i32[0] = *(_DWORD *)v11;
        v11 = (uint64_t *)((char *)v11 + 4);
        v27.i32[1] = *(_DWORD *)v10;
        v10 = (uint64_t *)((char *)v10 + 4);
        v27.i32[2] = *(_DWORD *)v7;
        v7 = (uint64_t *)((char *)v7 + 4);
        v27.i32[3] = *(_DWORD *)v6;
        v6 = (uint64_t *)((char *)v6 + 4);
        *a5 = v26;
        a5[1] = v27;
        a5 += 2;
      }
      v9 = (uint64_t *)((char *)v9 + 4 * v8);
      v14 = (uint64_t *)((char *)v14 + 4 * v8);
      v13 = (uint64_t *)((char *)v13 + 4 * v8);
      v12 = (uint64_t *)((char *)v12 + 4 * v8);
      v11 = (uint64_t *)((char *)v11 + 4 * v8);
      v10 = (uint64_t *)((char *)v10 + 4 * v8);
      v7 = (uint64_t *)((char *)v7 + 4 * v8);
      v5 += 8;
      v6 = (uint64_t *)((char *)v6 + 4 * v8);
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    if (a2 <= 0)
      v28 = -(-a2 & 3);
    else
      v28 = a2 & 3;
    while (1)
    {
      v29 = (int32x4_t *)((char *)a3 + 4 * v5 * a4);
      if (a2 >= 4)
      {
        v30 = 0;
        do
        {
          v31 = *v29++;
          *a5++ = v31;
          v30 += 4;
        }
        while (v30 < a2 - 3);
      }
      if (v28 == 1)
        goto LABEL_23;
      if (v28 == 2)
        goto LABEL_22;
      if (v28 == 3)
        break;
LABEL_24:
      if (++v5 == result)
        return result;
    }
    a5->i32[2] = v29->i32[2];
LABEL_22:
    a5->i32[1] = v29->i32[1];
LABEL_23:
    a5->i32[0] = v29->i32[0];
    ++a5;
    goto LABEL_24;
  }
  return result;
}

uint64_t sgePack_A_Tran(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  if ((result & 7) != 0)
    return sgePack_A_Tran_Unaligned(result, a2, a3, a4, a5);
  else
    return sgePack_A_Tran_Aligned(result, a2, a3, a4, a5);
}

void strsm_noPack_LLNU(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int8 *v66;
  float32x4_t v67;
  int64x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t *v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t *v78;
  float v79;
  float v80;
  float v81;
  float *v93;
  float32_t v94;
  float32_t v95;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v18 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v23 = __X + 1;
        v18 = 2;
        v24 = __N;
        do
        {
          v25 = *v23;
          v26 = *(v23 - 1) * v11;
          *(v23 - 1) = v26;
          *v23 = (float)(v25 * v11) - (float)(v26 * v22);
          v23 += __incX;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      v11 = a7;
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else if (__N < 1)
  {
    v18 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = __X + 2;
    v18 = 3;
    v19 = __N;
    do
    {
      v20 = *(v17 - 2) * v11;
      v21 = (float)(*(v17 - 1) * v11) - (float)(v20 * v14);
      *(v17 - 2) = v20;
      *(v17 - 1) = v21;
      *v17 = -(float)((float)((float)(v16 * v21) + (float)(v20 * v15)) - (float)(*v17 * v11));
      v17 += __incX;
      --v19;
    }
    while (v19);
  }
  if (v18 < a1)
  {
    v27 = 8 * a4;
    v28 = v18;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x4_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29 * __incX];
          v32 = (float32x4_t *)&__X[(v29 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v29 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v29 | 3) * __incX];
          v35 = 0uLL;
          if ((v18 & 1) != 0)
          {
            v47 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v41 = vmlaq_n_f32((float32x4_t)0, *v30, v47);
            v48 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, *v30, v48);
            v49 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v37 = vmlaq_n_f32((float32x4_t)0, *v30, v49);
            v50 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v36 = vmlaq_n_f32((float32x4_t)0, *v30, v50);
            v39 = v28 - 1;
            v40 = (float32x4_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v41 = vmlaq_n_f32(v41, *v40, v31->f32[v42]);
                v38 = vmlaq_n_f32(v38, *v40, v32->f32[v42]);
                v37 = vmlaq_n_f32(v37, *v40, v33->f32[v42]);
                v36 = vmlaq_n_f32(v36, *v40, v34->f32[v42]);
                v46 = *(float32x4_t *)((char *)v40 + 4 * a4);
                v43 = vmlaq_n_f32(v43, v46, v31->f32[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, v32->f32[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, v33->f32[v42 + 1]);
                v35 = vmlaq_n_f32(v35, v46, v34->f32[v42 + 1]);
                v40 = (float32x4_t *)((char *)v40 + v27);
                v42 += 2;
                v39 -= 2;
              }
              while (v39);
              v31 = (float32x4_t *)((char *)v31 + v42 * 4);
              v32 = (float32x4_t *)((char *)v32 + v42 * 4);
              v33 = (float32x4_t *)((char *)v33 + v42 * 4);
              v34 = (float32x4_t *)((char *)v34 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v28;
            v40 = (float32x4_t *)(a3 + 4 * v28);
            v41 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v51 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v11), vaddq_f32(v43, v41));
          v52 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v11), vaddq_f32(v44, v38));
          v53 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v33, v11), vaddq_f32(v45, v37));
          v54 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v11), vaddq_f32(v35, v36));
          v55 = (int32x4_t)vzip1q_s64(v51, v53);
          v56 = (int32x4_t)vzip1q_s64(v52, v54);
          v57 = (int32x4_t)vzip2q_s64(v51, v53);
          v58 = (int32x4_t)vzip2q_s64(v52, v54);
          v59 = (float32x4_t)vtrn1q_s32(v55, v56);
          v60 = (float32x4_t)vtrn2q_s32(v55, v56);
          v61 = (float32x4_t)vtrn1q_s32(v57, v58);
          v62 = (float32x4_t)vtrn2q_s32(v57, v58);
          v57.i32[0] = v40->i32[1];
          v56.i32[0] = v40->i32[2];
          v63 = vmlsq_lane_f32(v60, v59, *(float32x2_t *)v57.i8, 0);
          v64 = vmlsq_lane_f32(v61, v59, *(float32x2_t *)v56.i8, 0);
          v57.i32[0] = v40->i32[3];
          v65 = vmlsq_lane_f32(v62, v59, *(float32x2_t *)v57.i8, 0);
          v66 = &v40->i8[4 * a4];
          v57.i32[0] = *((_DWORD *)v66 + 2);
          v56.i32[0] = *((_DWORD *)v66 + 3);
          v67 = vmlsq_lane_f32(v64, v63, *(float32x2_t *)v57.i8, 0);
          v57.i32[0] = *(_DWORD *)&v66[4 * a4 + 12];
          v68 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v65, v63, *(float32x2_t *)v56.i8, 0), v67, *(float32x2_t *)v57.i8, 0);
          v69 = (int32x4_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v67);
          v70 = (int32x4_t)vzip1q_s64((int64x2_t)v63, v68);
          v71 = (int32x4_t)vzip2q_s64((int64x2_t)v59, (int64x2_t)v67);
          v72 = (int32x4_t)vzip2q_s64((int64x2_t)v63, v68);
          *(int32x4_t *)v31 = vtrn1q_s32(v69, v70);
          *(int32x4_t *)v32 = vtrn2q_s32(v69, v70);
          *(int32x4_t *)v33 = vtrn1q_s32(v71, v72);
          *(int32x4_t *)v34 = vtrn2q_s32(v71, v72);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a1)
        return;
    }
    v73 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v74 = (float32x4_t *)&__X[v29 * __incX];
      v75 = 0uLL;
      if ((v18 & 1) != 0)
      {
        v79 = v74->f32[0];
        v74 = (float32x4_t *)((char *)v74 + 4);
        v76 = vmlaq_n_f32((float32x4_t)0, *v73, v79);
        v77 = v28 - 1;
        v78 = (float32x4_t *)((char *)v73 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v80 = v74->f32[0];
            v81 = v74->f32[1];
            v74 = (float32x4_t *)((char *)v74 + 8);
            v76 = vmlaq_n_f32(v76, *v78, v80);
            v75 = vmlaq_n_f32(v75, *(float32x4_t *)((char *)v78 + 4 * a4), v81);
            v78 = (float32x4_t *)((char *)v78 + v27);
            v77 -= 2;
          }
          while (v77);
        }
      }
      else
      {
        v76 = 0uLL;
        v77 = v28;
        v78 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v74, v11), vaddq_f32(v75, v76)).u32[0];
      _S4 = v78->i32[1];
      _S5 = v78->i32[2];
      __asm
      {
        FMLS            S3, S4, V0.S[0]
        FMLS            S2, S5, V0.S[0]
      }
      _S4 = v78->i32[3];
      __asm { FMLS            S1, S4, V0.S[0] }
      v93 = &v78->f32[a4];
      v94 = _S2 - (float)(_S3 * v93[2]);
      v95 = (float)(_S1 - (float)(_S3 * v93[3])) - (float)(v94 * v93[a4 + 3]);
      v74->i32[0] = _S0;
      v74->f32[1] = _S3;
      v74->f32[2] = v94;
      v74->f32[3] = v95;
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_LLNN(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  __int8 *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t *v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t v92;
  float v93;
  float v94;
  float v95;
  float32x4_t v96;
  float v97;
  float v98;
  float v99;
  float *v100;
  float32_t v101;
  float32_t v102;
  float32_t v103;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v28 = __X + 1;
        v21 = 2;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = *v28;
          v32 = v27 * *(v28 - 1);
          *(v28 - 1) = v32;
          *v28 = v30 * (float)((float)(v31 * v11) - (float)(v32 * v26));
          v28 += __incX;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v11 = a7;
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = __X + 2;
    v21 = 3;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *(v20 - 2);
      v25 = v19 * (float)((float)(*(v20 - 1) * v11) - (float)(v24 * v15));
      *(v20 - 2) = v24;
      *(v20 - 1) = v25;
      *v20 = v23 * (float)-(float)((float)((float)(v18 * v25) + (float)(v24 * v14)) - (float)(*v20 * v11));
      v20 += __incX;
      --v22;
    }
    while (v22);
  }
  if (v21 < a1)
  {
    v33 = a4 + 1;
    v34 = 8 * a4;
    v35 = v21;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v33];
      v37 = 1.0 / a3[v33 + v35 * v33];
      v38 = 1.0 / a3[(v35 + 2) * v33];
      v39 = 1.0 / a3[(v35 + 3) * v33];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x4_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40 * __incX];
          v43 = (float32x4_t *)&__X[(v40 | 1) * __incX];
          v44 = (float32x4_t *)&__X[(v40 | 2) * __incX];
          v45 = (float32x4_t *)&__X[(v40 | 3) * __incX];
          v46 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v58 = v42->f32[0];
            v42 = (float32x4_t *)((char *)v42 + 4);
            v52 = vmlaq_n_f32((float32x4_t)0, *v41, v58);
            v59 = v43->f32[0];
            v43 = (float32x4_t *)((char *)v43 + 4);
            v49 = vmlaq_n_f32((float32x4_t)0, *v41, v59);
            v60 = v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4);
            v48 = vmlaq_n_f32((float32x4_t)0, *v41, v60);
            v61 = v45->f32[0];
            v45 = (float32x4_t *)((char *)v45 + 4);
            v47 = vmlaq_n_f32((float32x4_t)0, *v41, v61);
            v50 = v35 - 1;
            v51 = (float32x4_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v53 = 0;
              v54 = 0uLL;
              v55 = 0uLL;
              v56 = 0uLL;
              do
              {
                v52 = vmlaq_n_f32(v52, *v51, v42->f32[v53]);
                v49 = vmlaq_n_f32(v49, *v51, v43->f32[v53]);
                v48 = vmlaq_n_f32(v48, *v51, v44->f32[v53]);
                v47 = vmlaq_n_f32(v47, *v51, v45->f32[v53]);
                v57 = *(float32x4_t *)((char *)v51 + 4 * a4);
                v54 = vmlaq_n_f32(v54, v57, v42->f32[v53 + 1]);
                v55 = vmlaq_n_f32(v55, v57, v43->f32[v53 + 1]);
                v56 = vmlaq_n_f32(v56, v57, v44->f32[v53 + 1]);
                v46 = vmlaq_n_f32(v46, v57, v45->f32[v53 + 1]);
                v51 = (float32x4_t *)((char *)v51 + v34);
                v53 += 2;
                v50 -= 2;
              }
              while (v50);
              v42 = (float32x4_t *)((char *)v42 + v53 * 4);
              v43 = (float32x4_t *)((char *)v43 + v53 * 4);
              v44 = (float32x4_t *)((char *)v44 + v53 * 4);
              v45 = (float32x4_t *)((char *)v45 + v53 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = v35;
            v51 = (float32x4_t *)&a3[v35];
            v52 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v56 = 0uLL;
          v55 = 0uLL;
          v54 = 0uLL;
LABEL_27:
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v42, v11), vaddq_f32(v54, v52));
          v63 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v43, v11), vaddq_f32(v55, v49));
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v44, v11), vaddq_f32(v56, v48));
          v65 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v45, v11), vaddq_f32(v46, v47));
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip1q_s64(v63, v65);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (int32x4_t)vzip2q_s64(v63, v65);
          v70 = (float32x4_t)vtrn1q_s32(v66, v67);
          v71 = (float32x4_t)vtrn2q_s32(v66, v67);
          v72 = (float32x4_t)vtrn1q_s32(v68, v69);
          v73 = (float32x4_t)vtrn2q_s32(v68, v69);
          v74 = vmulq_n_f32(v70, v36);
          v68.i32[0] = v51->i32[1];
          v67.i32[0] = v51->i32[2];
          v75 = vmlsq_lane_f32(v71, v74, *(float32x2_t *)v68.i8, 0);
          v76 = vmlsq_lane_f32(v72, v74, *(float32x2_t *)v67.i8, 0);
          v68.i32[0] = v51->i32[3];
          v77 = vmlsq_lane_f32(v73, v74, *(float32x2_t *)v68.i8, 0);
          v78 = &v51->i8[4 * a4];
          v79 = vmulq_n_f32(v75, v37);
          v75.i32[0] = *((_DWORD *)v78 + 2);
          v67.i32[0] = *((_DWORD *)v78 + 3);
          v80 = vmlsq_lane_f32(v76, v79, *(float32x2_t *)v75.f32, 0);
          v81 = vmulq_n_f32(v80, v38);
          v80.i32[0] = *(_DWORD *)&v78[4 * a4 + 12];
          v82 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v77, v79, *(float32x2_t *)v67.i8, 0), v81, *(float32x2_t *)v80.f32, 0), v39);
          v83 = (int32x4_t)vzip1q_s64((int64x2_t)v74, (int64x2_t)v81);
          v84 = (int32x4_t)vzip1q_s64((int64x2_t)v79, v82);
          v85 = (int32x4_t)vzip2q_s64((int64x2_t)v74, (int64x2_t)v81);
          v86 = (int32x4_t)vzip2q_s64((int64x2_t)v79, v82);
          *(int32x4_t *)v42 = vtrn1q_s32(v83, v84);
          *(int32x4_t *)v43 = vtrn2q_s32(v83, v84);
          *(int32x4_t *)v44 = vtrn1q_s32(v85, v86);
          *(int32x4_t *)v45 = vtrn2q_s32(v85, v86);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a1)
        return;
    }
    v87 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v88 = (float32x4_t *)&__X[v40 * __incX];
      v89 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v93 = v88->f32[0];
        v88 = (float32x4_t *)((char *)v88 + 4);
        v92 = vmlaq_n_f32((float32x4_t)0, *v87, v93);
        v90 = (float32x4_t *)((char *)v87 + 4 * a4);
        v91 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v94 = v88->f32[0];
            v95 = v88->f32[1];
            v88 = (float32x4_t *)((char *)v88 + 8);
            v92 = vmlaq_n_f32(v92, *v90, v94);
            v89 = vmlaq_n_f32(v89, *(float32x4_t *)((char *)v90 + 4 * a4), v95);
            v90 = (float32x4_t *)((char *)v90 + v34);
            v91 -= 2;
          }
          while (v91);
        }
      }
      else
      {
        v90 = (float32x4_t *)&a3[v35];
        v91 = v35;
        v92 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v96 = vsubq_f32(vmulq_n_f32(*v88, v11), vaddq_f32(v92, v89));
      v96.f32[0] = v36 * v96.f32[0];
      v97 = v96.f32[1] - (float)(v96.f32[0] * v90->f32[1]);
      v98 = v96.f32[2] - (float)(v96.f32[0] * v90->f32[2]);
      v99 = v96.f32[3] - (float)(v96.f32[0] * v90->f32[3]);
      v100 = &v90->f32[a4];
      v101 = v37 * v97;
      v102 = v38 * (float)(v98 - (float)(v101 * v100[2]));
      v103 = v39 * (float)((float)(v99 - (float)(v101 * v100[3])) - (float)(v102 * v100[a4 + 3]));
      v88->i32[0] = v96.i32[0];
      v88->f32[1] = v101;
      v88->f32[2] = v102;
      v88->f32[3] = v103;
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

uint64_t strsm_noPack_LLTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  __int32 *v30;
  uint64_t v31;
  uint64_t v32;
  __int32 *v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  float *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  float32x4_t v56;
  uint64_t *v57;
  uint64_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  int32x4_t v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int64x2_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  __int32 *v112;
  uint64_t v113;
  uint64_t v114;
  __int32 *v115;
  uint64_t v116;
  uint64_t v117;
  __int32 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int32 *v122;
  uint64_t v123;
  float *v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  float32x4_t v132;
  __int32 v133;
  uint64_t v134;
  int32x4_t v135;
  uint64_t v136;
  int32x4_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float v143;
  float32x4_t *v144;
  float32_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v19 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v20 = (float *)(a5 + 4 * v7);
        v21 = a2;
        do
        {
          v22 = *(v20 - 1);
          v23 = *v20 * a7;
          *v20 = v23;
          *(v20 - 1) = (float)(v22 * a7) - (float)(v23 * v19);
          v20 += a6;
          --v21;
        }
        while (v21);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v17 = a2;
        v18 = (float *)(a5 + 4 * v7);
        do
        {
          *v18 = *v18 * a7;
          v18 += a6;
          --v17;
        }
        while (v17);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v11 = *(v9 - 1);
      v10 = *v9;
      v12 = (float *)(a5 + 4 * v7);
      v13 = a2;
      do
      {
        v14 = *(v12 - 1);
        v15 = *v12 * a7;
        *v12 = v15;
        v16 = (float)(v14 * a7) - (float)(v15 * v8);
        *(v12 - 2) = -(float)((float)((float)(v11 * v16) + (float)(v15 * v10)) - (float)(*(v12 - 2) * a7));
        *(v12 - 1) = v16;
        v12 += a6;
        --v13;
      }
      while (v13);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v24 = v7 + 1;
    v25 = a2 - 3;
    v158 = result;
    v159 = a2;
    while (1)
    {
      v26 = v24 - 4;
      if (a2 >= 4)
      {
        v27 = 0;
        v28 = a3 + 4 * v26 * a4;
        v29 = (_DWORD *)(v28 + 4 * v26);
        v30 = (__int32 *)(v28 + 4 * v24);
        v31 = a3 + 4 * (v24 - 3) * a4;
        v32 = v31 + 4 * v26;
        v33 = (__int32 *)(v31 + 4 * v24);
        v34 = a3 + 4 * (v24 - 2) * a4;
        v35 = v34 + 4 * v26;
        v36 = (__int32 *)(v34 + 4 * v24);
        v37 = a3 + 4 * (v24 - 1) * a4;
        if (result - v26 <= 4)
          v38 = 4;
        else
          v38 = result - v26;
        v39 = v37 + 4 * v26 + 20;
        v40 = (__int32 *)(v37 + 4 * v24);
        while (1)
        {
          v41 = a5 + 4 * v27 * a6;
          v42 = (float *)(v41 + 4 * v24);
          v43 = a5 + 4 * (v27 | 1) * a6;
          v44 = (float *)(v43 + 4 * v24);
          v45 = a5 + 4 * (v27 | 2) * a6;
          v46 = (float *)(v45 + 4 * v24);
          v47 = a5 + 4 * (v27 | 3) * a6;
          v48 = (float *)(v47 + 4 * v24);
          v49 = 0uLL;
          if ((v38 & 1) != 0)
          {
            v79.i32[0] = *v30;
            v79.i32[1] = *v33;
            v79.i32[2] = *v36;
            v79.i32[3] = *v40;
            v80 = *v42++;
            v56 = vmlaq_n_f32((float32x4_t)0, v79, v80);
            v81 = *v44++;
            v82 = v81;
            v83 = *v46++;
            v52 = vmlaq_n_f32((float32x4_t)0, v79, v82);
            v51 = vmlaq_n_f32((float32x4_t)0, v79, v83);
            v84 = *v48++;
            v53 = v38 - 5;
            v50 = vmlaq_n_f32((float32x4_t)0, v79, v84);
            v54 = (uint64_t *)v39;
            v55 = (uint64_t *)(v36 + 1);
            v57 = (uint64_t *)(v33 + 1);
            v58 = (uint64_t *)(v30 + 1);
            if (v38 != 5)
            {
LABEL_25:
              v59 = 0uLL;
              v60 = 0uLL;
              v61 = 0uLL;
              do
              {
                v62 = *v58++;
                v63.i64[0] = v62;
                v64 = *v57++;
                v65.i64[0] = v64;
                v66 = *v55++;
                v67 = v66;
                v68 = *v54++;
                v63.i64[1] = v67;
                v65.i64[1] = v68;
                v69 = (float32x4_t)vtrn1q_s32(v63, v65);
                v70 = *v42;
                v71 = v42[1];
                v42 += 2;
                v56 = vmlaq_n_f32(v56, v69, v70);
                v72 = *v44;
                v73 = v44[1];
                v44 += 2;
                v52 = vmlaq_n_f32(v52, v69, v72);
                v74 = *v46;
                v75 = v46[1];
                v46 += 2;
                v51 = vmlaq_n_f32(v51, v69, v74);
                v76 = *v48;
                v77 = v48[1];
                v48 += 2;
                v50 = vmlaq_n_f32(v50, v69, v76);
                v78 = (float32x4_t)vtrn2q_s32(v63, v65);
                v59 = vmlaq_n_f32(v59, v78, v71);
                v60 = vmlaq_n_f32(v60, v78, v73);
                v61 = vmlaq_n_f32(v61, v78, v75);
                v49 = vmlaq_n_f32(v49, v78, v77);
                v53 -= 2;
              }
              while (v53);
              goto LABEL_30;
            }
          }
          else
          {
            v50 = 0uLL;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = v38 - 4;
            v54 = (uint64_t *)v40;
            v55 = (uint64_t *)v36;
            v56 = 0uLL;
            v57 = (uint64_t *)v33;
            v58 = (uint64_t *)v30;
            if (v38 != 4)
              goto LABEL_25;
          }
          v61 = 0uLL;
          v60 = 0uLL;
          v59 = 0uLL;
LABEL_30:
          v85 = (float32x4_t *)(v41 + 4 * v26);
          v86 = (float32x4_t *)(v43 + 4 * v26);
          v87 = (float32x4_t *)(v45 + 4 * v26);
          v88 = (float32x4_t *)(v47 + 4 * v26);
          v89 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v85, a7), vaddq_f32(v59, v56));
          v90 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v86, a7), vaddq_f32(v60, v52));
          v91 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v87, a7), vaddq_f32(v61, v51));
          v92 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v88, a7), vaddq_f32(v49, v50));
          v93 = (int32x4_t)vzip1q_s64(v89, v91);
          v94 = (int32x4_t)vzip1q_s64(v90, v92);
          v95 = (int32x4_t)vzip2q_s64(v89, v91);
          v96 = (int32x4_t)vzip2q_s64(v90, v92);
          v97 = (float32x4_t)vtrn1q_s32(v93, v94);
          v98 = (float32x4_t)vtrn2q_s32(v93, v94);
          v99 = (float32x4_t)vtrn1q_s32(v95, v96);
          v100 = (float32x4_t)vtrn2q_s32(v95, v96);
          v95.i32[0] = *(_DWORD *)(v35 + 12);
          v101 = vmlsq_lane_f32(v99, v100, *(float32x2_t *)v95.i8, 0);
          v94.i32[0] = *(_DWORD *)(v32 + 8);
          v95.i32[0] = *(_DWORD *)(v32 + 12);
          v102 = vmlsq_lane_f32(v98, v100, *(float32x2_t *)v95.i8, 0);
          v95.i32[0] = v29[3];
          v103 = vmlsq_lane_f32(v97, v100, *(float32x2_t *)v95.i8, 0);
          v104 = vmlsq_lane_f32(v102, v101, *(float32x2_t *)v94.i8, 0);
          v94.i32[0] = v29[1];
          v95.i32[0] = v29[2];
          v105 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v103, v101, *(float32x2_t *)v95.i8, 0), v104, *(float32x2_t *)v94.i8, 0);
          v106 = (int32x4_t)vzip1q_s64(v105, (int64x2_t)v101);
          v107 = (int32x4_t)vzip1q_s64((int64x2_t)v104, (int64x2_t)v100);
          v108 = (int32x4_t)vzip2q_s64(v105, (int64x2_t)v101);
          v109 = (int32x4_t)vzip2q_s64((int64x2_t)v104, (int64x2_t)v100);
          *(int32x4_t *)v85 = vtrn1q_s32(v106, v107);
          *(int32x4_t *)v86 = vtrn2q_s32(v106, v107);
          *(int32x4_t *)v87 = vtrn1q_s32(v108, v109);
          *(int32x4_t *)v88 = vtrn2q_s32(v108, v109);
          v27 += 4;
          if (v27 >= v25)
            goto LABEL_33;
        }
      }
      v27 = 0;
LABEL_33:
      result = v158;
      a2 = v159;
      if (v27 < v159)
        break;
LABEL_44:
      v157 = v24 < 5;
      v24 -= 4;
      if (v157)
        return result;
    }
    v110 = a3 + 4 * v26 * a4;
    v111 = v110 + 4 * v26;
    v112 = (__int32 *)(v110 + 4 * v24);
    v113 = a3 + 4 * (v24 - 3) * a4;
    v114 = v113 + 4 * v26;
    v115 = (__int32 *)(v113 + 4 * v24);
    v116 = a3 + 4 * (v24 - 2) * a4;
    v117 = v116 + 4 * v26;
    v118 = (__int32 *)(v116 + 4 * v24);
    v119 = a3 + 4 * (v24 - 1) * a4;
    if (v158 - v26 <= 4)
      v120 = 4;
    else
      v120 = v158 - v26;
    v121 = v119 + 4 * v26 + 20;
    v122 = (__int32 *)(v119 + 4 * v24);
    while (1)
    {
      v123 = a5 + 4 * v27 * a6;
      v124 = (float *)(v123 + 4 * v24);
      v125 = 0uLL;
      if ((v120 & 1) != 0)
      {
        v132.i32[0] = *v112;
        v132.i32[1] = *v115;
        v132.i32[2] = *v118;
        v132.i32[3] = *v122;
        v133 = *(_DWORD *)v124++;
        v126 = v120 - 5;
        v127 = vmlaq_n_f32((float32x4_t)0, v132, *(float *)&v133);
        v128 = (uint64_t *)v121;
        v129 = (uint64_t *)(v118 + 1);
        v130 = (uint64_t *)(v115 + 1);
        v131 = (uint64_t *)(v112 + 1);
        if (v120 != 5)
        {
          do
          {
LABEL_42:
            v134 = *v131++;
            v135.i64[0] = v134;
            v136 = *v130++;
            v137.i64[0] = v136;
            v138 = *v129++;
            v139 = v138;
            v140 = *v128++;
            v135.i64[1] = v139;
            v137.i64[1] = v140;
            v141 = (float32x4_t)vtrn1q_s32(v135, v137);
            v142 = (float32x4_t)vtrn2q_s32(v135, v137);
            v137.i32[0] = *(__int32 *)v124;
            v143 = v124[1];
            v124 += 2;
            v127 = vmlaq_n_f32(v127, v141, *(float *)v137.i32);
            v125 = vmlaq_n_f32(v125, v142, v143);
            v126 -= 2;
          }
          while (v126);
        }
      }
      else
      {
        v126 = v120 - 4;
        v127 = 0uLL;
        v128 = (uint64_t *)v122;
        v129 = (uint64_t *)v118;
        v130 = (uint64_t *)v115;
        v131 = (uint64_t *)v112;
        if (v120 != 4)
          goto LABEL_42;
      }
      v144 = (float32x4_t *)(v123 + 4 * v26);
      _Q1 = vsubq_f32(vmulq_n_f32(*v144, a7), vaddq_f32(v125, v127));
      _S4 = *(_DWORD *)(v117 + 12);
      __asm { FMLS            S2, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v114 + 12);
      __asm { FMLS            S3, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v111 + 12);
      __asm { FMLS            S6, S4, V1.S[3] }
      v156 = _S3 - (float)(_S2 * *(float *)(v114 + 8));
      v144->f32[0] = (float)(_S6 - (float)(_S2 * *(float *)(v111 + 8))) - (float)(v156 * *(float *)(v111 + 4));
      v144->f32[1] = v156;
      v144->f32[2] = _S2;
      v144->i32[3] = _Q1.i32[3];
      if (++v27 == v159)
        goto LABEL_44;
    }
  }
  return result;
}

uint64_t strsm_noPack_LLTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  __int32 *v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  uint64_t v51;
  uint64_t v52;
  __int32 *v53;
  uint64_t v54;
  uint64_t v55;
  __int32 *v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  float *v60;
  float *v61;
  uint64_t v62;
  float *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  float32x4_t v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  int32x4_t v78;
  uint64_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float32x4_t v93;
  float32x4_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t *v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int64x2_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  float *v128;
  __int32 *v129;
  uint64_t v130;
  uint64_t v131;
  __int32 *v132;
  uint64_t v133;
  uint64_t v134;
  __int32 *v135;
  uint64_t v136;
  uint64_t v137;
  __int32 *v138;
  uint64_t v139;
  float *v140;
  float32x4_t v141;
  uint64_t v142;
  float32x4_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  float32x4_t v148;
  __int32 v149;
  uint64_t v150;
  int32x4_t v151;
  uint64_t v152;
  int32x4_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float v159;
  float32x4_t *v160;
  float32x4_t v161;
  float v162;
  float32_t v163;
  float32_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v25 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v26 = *v25;
        v27 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v28 = (float *)(a5 + 4 * v7);
        v29 = a2;
        v30 = 1.0 / *(v25 - 1);
        do
        {
          v31 = *(v28 - 1);
          v32 = v27 * *v28;
          *v28 = v32;
          *(v28 - 1) = v30 * (float)((float)(v31 * a7) - (float)(v32 * v26));
          v28 += a6;
          --v29;
        }
        while (v29);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v22 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v23 = (float *)(a5 + 4 * v7);
        v24 = a2;
        do
        {
          *v23 = v22 * *v23;
          v23 += a6;
          --v24;
        }
        while (v24);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = *v8;
      v10 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v12 = *(v10 - 1);
      v11 = *v10;
      v13 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
      v14 = 1.0 / *(v8 - 1);
      v15 = *(v10 - 2);
      v16 = (float *)(a5 + 4 * v7);
      v17 = a2;
      v18 = 1.0 / v15;
      do
      {
        v19 = *(v16 - 1);
        v20 = v13 * *v16;
        *v16 = v20;
        v21 = v14 * (float)((float)(v19 * a7) - (float)(v20 * v9));
        *(v16 - 2) = v18 * (float)-(float)((float)((float)(v12 * v21) + (float)(v20 * v11)) - (float)(*(v16 - 2) * a7));
        *(v16 - 1) = v21;
        v16 += a6;
        --v17;
      }
      while (v17);
    }
    v7 = result - 4;
  }
  v167 = result;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v33 = v7 + 1;
    v170 = a2 - 3;
    v166 = a3;
    v34 = a2;
    while (1)
    {
      v35 = v33 - 4;
      v36 = (v33 - 4) * a4;
      v37 = 1.0 / *(float *)(a3 + 4 * (v36 + v33 - 4));
      v38 = (v33 - 3) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v33 - 3 + v38));
      v40 = (v33 - 2) * a4;
      v41 = 1.0 / *(float *)(a3 + 4 * (v33 - 2 + v40));
      v42 = (v33 - 1) * a4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v33 - 1 + v42));
      v44 = 0;
      if (a2 >= 4)
      {
        v45 = a3 + 4 * v36;
        v46 = (_DWORD *)(v45 + 4 * v35);
        v47 = (__int32 *)(v45 + 4 * v33);
        v48 = a3 + 4 * v38;
        v49 = v48 + 4 * v35;
        v50 = (__int32 *)(v48 + 4 * v33);
        v51 = a3 + 4 * v40;
        v52 = v51 + 4 * v35;
        v53 = (__int32 *)(v51 + 4 * v33);
        if (v167 - v35 <= 4)
          v54 = 4;
        else
          v54 = v167 - v35;
        v55 = a3 + 4 * v42;
        v169 = v55 + 4 * v35 + 20;
        v56 = (__int32 *)(v55 + 4 * v33);
        do
        {
          v57 = a5 + 4 * v44 * a6;
          v58 = (float *)(v57 + 4 * v33);
          v59 = a5 + 4 * (v44 | 1) * a6;
          v60 = (float *)(v59 + 4 * v33);
          result = a5 + 4 * (v44 | 2) * a6;
          v61 = (float *)(result + 4 * v33);
          v62 = a5 + 4 * (v44 | 3) * a6;
          v63 = (float *)(v62 + 4 * v33);
          v64 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v94.i32[0] = *v47;
            v94.i32[1] = *v50;
            v94.i32[2] = *v53;
            v94.i32[3] = *v56;
            v95 = *v58++;
            v71 = vmlaq_n_f32((float32x4_t)0, v94, v95);
            v96 = *v60++;
            v97 = v96;
            v98 = *v61++;
            v67 = vmlaq_n_f32((float32x4_t)0, v94, v97);
            v66 = vmlaq_n_f32((float32x4_t)0, v94, v98);
            v99 = *v63++;
            v68 = v54 - 5;
            v65 = vmlaq_n_f32((float32x4_t)0, v94, v99);
            v69 = (uint64_t *)v169;
            v70 = (uint64_t *)(v53 + 1);
            v72 = (uint64_t *)(v50 + 1);
            v73 = (uint64_t *)(v47 + 1);
            if (v54 != 5)
            {
LABEL_25:
              v74 = 0uLL;
              v75 = 0uLL;
              v76 = 0uLL;
              do
              {
                v77 = *v73++;
                v78.i64[0] = v77;
                v79 = *v72++;
                v80.i64[0] = v79;
                v81 = *v70++;
                v82 = v81;
                v83 = *v69++;
                v78.i64[1] = v82;
                v80.i64[1] = v83;
                v84 = (float32x4_t)vtrn1q_s32(v78, v80);
                v85 = *v58;
                v86 = v58[1];
                v58 += 2;
                v71 = vmlaq_n_f32(v71, v84, v85);
                v87 = *v60;
                v88 = v60[1];
                v60 += 2;
                v67 = vmlaq_n_f32(v67, v84, v87);
                v89 = *v61;
                v90 = v61[1];
                v61 += 2;
                v66 = vmlaq_n_f32(v66, v84, v89);
                v91 = *v63;
                v92 = v63[1];
                v63 += 2;
                v65 = vmlaq_n_f32(v65, v84, v91);
                v93 = (float32x4_t)vtrn2q_s32(v78, v80);
                v74 = vmlaq_n_f32(v74, v93, v86);
                v75 = vmlaq_n_f32(v75, v93, v88);
                v76 = vmlaq_n_f32(v76, v93, v90);
                v64 = vmlaq_n_f32(v64, v93, v92);
                v68 -= 2;
              }
              while (v68);
              goto LABEL_30;
            }
          }
          else
          {
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = v54 - 4;
            v69 = (uint64_t *)v56;
            v70 = (uint64_t *)v53;
            v71 = 0uLL;
            v72 = (uint64_t *)v50;
            v73 = (uint64_t *)v47;
            if (v54 != 4)
              goto LABEL_25;
          }
          v76 = 0uLL;
          v75 = 0uLL;
          v74 = 0uLL;
LABEL_30:
          v100 = (float32x4_t *)(v57 + 4 * v35);
          v101 = (float32x4_t *)(v59 + 4 * v35);
          v102 = (float32x4_t *)(result + 4 * v35);
          v103 = (float32x4_t *)(v62 + 4 * v35);
          v104 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v74, v71));
          v105 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v101, a7), vaddq_f32(v75, v67));
          v106 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v102, a7), vaddq_f32(v76, v66));
          v107 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v103, a7), vaddq_f32(v64, v65));
          v108 = (int32x4_t)vzip1q_s64(v104, v106);
          v109 = (int32x4_t)vzip1q_s64(v105, v107);
          v110 = (int32x4_t)vzip2q_s64(v104, v106);
          v111 = (int32x4_t)vzip2q_s64(v105, v107);
          v112 = (float32x4_t)vtrn1q_s32(v108, v109);
          v113 = (float32x4_t)vtrn2q_s32(v108, v109);
          v114 = (float32x4_t)vtrn1q_s32(v110, v111);
          v115 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v110, v111), v43);
          v110.i32[0] = *(_DWORD *)(v52 + 12);
          v116 = vmlsq_lane_f32(v114, v115, *(float32x2_t *)v110.i8, 0);
          v109.i32[0] = *(_DWORD *)(v49 + 8);
          v110.i32[0] = *(_DWORD *)(v49 + 12);
          v117 = vmlsq_lane_f32(v113, v115, *(float32x2_t *)v110.i8, 0);
          v110.i32[0] = v46[3];
          v118 = vmlsq_lane_f32(v112, v115, *(float32x2_t *)v110.i8, 0);
          v119 = vmulq_n_f32(v116, v41);
          v120 = vmlsq_lane_f32(v117, v119, *(float32x2_t *)v109.i8, 0);
          v109.i32[0] = v46[1];
          v116.i32[0] = v46[2];
          v121 = vmulq_n_f32(v120, v39);
          v122 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v118, v119, *(float32x2_t *)v116.f32, 0), v121, *(float32x2_t *)v109.i8, 0), v37);
          v123 = (int32x4_t)vzip1q_s64(v122, (int64x2_t)v119);
          v124 = (int32x4_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v115);
          v125 = (int32x4_t)vzip2q_s64(v122, (int64x2_t)v119);
          v126 = (int32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v115);
          *(int32x4_t *)v100 = vtrn1q_s32(v123, v124);
          *(int32x4_t *)v101 = vtrn2q_s32(v123, v124);
          *(int32x4_t *)v102 = vtrn1q_s32(v125, v126);
          *(int32x4_t *)v103 = vtrn2q_s32(v125, v126);
          v44 += 4;
          a2 = v34;
        }
        while (v44 < v170);
      }
      a3 = v166;
      if (v44 < a2)
        break;
LABEL_41:
      v165 = v33 < 5;
      v33 -= 4;
      if (v165)
        return result;
    }
    v127 = v166 + 4 * (v33 - 4) * a4;
    v128 = (float *)(v127 + 4 * v35);
    v129 = (__int32 *)(v127 + 4 * v33);
    v130 = v166 + 4 * (v33 - 3) * a4;
    v131 = v130 + 4 * v35;
    v132 = (__int32 *)(v130 + 4 * v33);
    v133 = v166 + 4 * (v33 - 2) * a4;
    v134 = v133 + 4 * v35;
    result = v167 - v35;
    v135 = (__int32 *)(v133 + 4 * v33);
    if (v167 - v35 <= 4)
      result = 4;
    v136 = v166 + 4 * (v33 - 1) * a4;
    v137 = v136 + 4 * v35 + 20;
    v138 = (__int32 *)(v136 + 4 * v33);
    while (1)
    {
      v139 = a5 + 4 * v44 * a6;
      v140 = (float *)(v139 + 4 * v33);
      v141 = 0uLL;
      if ((result & 1) != 0)
      {
        v148.i32[0] = *v129;
        v148.i32[1] = *v132;
        v148.i32[2] = *v135;
        v148.i32[3] = *v138;
        v149 = *(_DWORD *)v140++;
        v142 = result - 5;
        v143 = vmlaq_n_f32((float32x4_t)0, v148, *(float *)&v149);
        v144 = (uint64_t *)v137;
        v145 = (uint64_t *)(v135 + 1);
        v146 = (uint64_t *)(v132 + 1);
        v147 = (uint64_t *)(v129 + 1);
        if (result != 5)
        {
          do
          {
LABEL_39:
            v150 = *v147++;
            v151.i64[0] = v150;
            v152 = *v146++;
            v153.i64[0] = v152;
            v154 = *v145++;
            v155 = v154;
            v156 = *v144++;
            v151.i64[1] = v155;
            v153.i64[1] = v156;
            v157 = (float32x4_t)vtrn1q_s32(v151, v153);
            v158 = (float32x4_t)vtrn2q_s32(v151, v153);
            v153.i32[0] = *(__int32 *)v140;
            v159 = v140[1];
            v140 += 2;
            v143 = vmlaq_n_f32(v143, v157, *(float *)v153.i32);
            v141 = vmlaq_n_f32(v141, v158, v159);
            v142 -= 2;
          }
          while (v142);
        }
      }
      else
      {
        v142 = result - 4;
        v143 = 0uLL;
        v144 = (uint64_t *)v138;
        v145 = (uint64_t *)v135;
        v146 = (uint64_t *)v132;
        v147 = (uint64_t *)v129;
        if (result != 4)
          goto LABEL_39;
      }
      v160 = (float32x4_t *)(v139 + 4 * v35);
      v161 = vsubq_f32(vmulq_n_f32(*v160, a7), vaddq_f32(v143, v141));
      v162 = vmuls_lane_f32(v43, v161, 3);
      v163 = v41 * (float)(v161.f32[2] - (float)(v162 * *(float *)(v134 + 12)));
      v164 = v39
           * (float)((float)(v161.f32[1] - (float)(v162 * *(float *)(v131 + 12))) - (float)(v163 * *(float *)(v131 + 8)));
      v160->f32[0] = v37
                   * (float)((float)((float)(v161.f32[0] - (float)(v162 * v128[3])) - (float)(v163 * v128[2]))
                           - (float)(v164 * v128[1]));
      v160->f32[1] = v164;
      v160->f32[2] = v163;
      v160->f32[3] = v162;
      if (++v44 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

float *sgebpUnalignedC_8M4N(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  uint64_t v8;
  uint64_t v9;
  float *result;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v51;
  _OWORD *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 4 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f32;
    do
    {
      v18 = a6;
      v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v29 = *_X2;
      v30 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v33 = *_X2;
      v34 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      _X2 = v11 + 2;
      v38 = v6;
      v39 = v6;
      v40 = v6;
      v41 = v6;
      v42 = v6;
      v43 = v6;
      v44 = v6;
      v46 = *(float32x4_t *)a2;
      v47 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
      v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
      v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
      v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
      v14 = v16;
      v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
      v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
      v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
      v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
      v15 = v17;
      v16 = *(float32x4_t *)result;
      v17 = *(float32x4_t *)(result + 4);
      result += 8;
      v46 = *(float32x4_t *)(a2 + 16);
      v47 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v18 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
          v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
          v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
          v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
          v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
          v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
          v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
          v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
          v14 = *(float32x4_t *)result;
          v15 = *(float32x4_t *)(result + 4);
          v51 = (float32x4_t *)(result + 8);
          v46 = *(float32x4_t *)_X6;
          v52 = _X6 + 1;
          v6 = vmlaq_n_f32(v6, v16, v47.f32[0]);
          v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v47.f32, 1);
          v41 = vmlaq_laneq_f32(v41, v16, v47, 2);
          v43 = vmlaq_laneq_f32(v43, v16, v47, 3);
          v38 = vmlaq_n_f32(v38, v17, v47.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v47.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v47, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v47, 3);
          v16 = *v51;
          v17 = v51[1];
          result = v51[2].f32;
          v47 = *(float32x4_t *)v52;
          _X6 = v52 + 1;
          v18 -= 2;
        }
        while (v18);
        v25 = vaddq_f32(v25, v6);
        v26 = vaddq_f32(v26, v38);
        v29 = vaddq_f32(v29, v39);
        v30 = vaddq_f32(v30, v40);
        v33 = vaddq_f32(v33, v41);
        v34 = vaddq_f32(v34, v42);
        v36 = vaddq_f32(v36, v43);
        v37 = vaddq_f32(v37, v44);
      }
      *v11 = v25;
      v11[1] = v26;
      v53 = (float32x4_t *)((char *)v11 + v12);
      *v53 = v29;
      v53[1] = v30;
      v54 = (float32x4_t *)((char *)v53 + v12);
      *v54 = v33;
      v54[1] = v34;
      v55 = (float32x4_t *)((char *)v54 + v12);
      *v55 = v36;
      v55[1] = v37;
      v11 = _X2;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v8)
    return sgebp_1M4N(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v8, a6);
  return result;
}

void sgemvN_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,float32x4_t a27,float32x4_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,float32x4_t a33,float32x4_t a34,uint64_t a35,float32x2_t a36,float32x4_t a37,float32x4_t a38,float32x4_t a39,float32x4_t a40,uint64_t a41,float32x2_t a42,float32x4_t a43,float32x4_t a44,float32x4_t a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  float32x2_t *v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  float32x4_t *v52;
  uint64_t v53;
  float v54;
  int32x2_t v55;
  float32x2_t *v56;
  __int128 v57;
  uint64_t v58;
  float32x4_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  int64_t v104;
  float v105;
  float v106;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float32x4_t *v125;
  uint64_t v126;
  float32x4_t *v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  int64_t v131;
  float v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  float32x4_t *v150;
  uint64_t v151;
  float32x4_t *v152;
  uint64_t v153;
  uint64_t v154;
  float *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int64_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t *v164;
  _DWORD *v165;
  uint64_t v166;
  const float *v167;
  float32x4_t v168;
  uint64_t v169;
  float v170;
  float32x4_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t v174;
  float *v175;
  uint64_t m;
  int64_t v177;
  float v178;
  float v179;
  int64_t v180;
  float v181;
  float v182;
  uint64_t v183;
  float *v184;
  float *v185;
  float v186;
  float v187;
  float v188;
  int64_t v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  float32x2_t v193;
  int64_t v194;
  float32x2_t v195;
  float32x2_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int64_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t *v205;
  _DWORD *v206;
  uint64_t v207;
  const float *v208;
  float32x4_t v209;
  uint64_t v210;
  float v211;
  float32x4_t *v212;
  float32x4_t v213;
  float32x4_t v214;
  uint64_t v215;
  _DWORD *v216;
  uint64_t i;
  int64_t v218;
  float32x4_t v219;
  float32x4_t v220;
  uint64_t v221;
  float32x4_t *v222;
  float *v223;
  float32x4_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  float32x2_t *v228;
  _DWORD *v229;
  const float *v230;
  float32x2_t v231;
  uint64_t v232;
  float v233;
  float32x2_t *v234;
  float32x2_t v235;
  float32x2_t v236;
  float v237;
  uint64_t v238;
  float *v239;
  float *v240;
  int64_t v241;
  float32x2_t v242;
  float32x2_t v243;
  float32x2_t v244;
  float32x2_t v245;
  int64_t v246;
  float32x2_t v247;
  float32x2_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int64_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t *v257;
  _DWORD *v258;
  uint64_t v259;
  const float *v260;
  float32x4_t v261;
  uint64_t v262;
  float v263;
  float32x4_t *v264;
  float32x4_t v265;
  float32x4_t v266;
  uint64_t v267;
  float *v268;
  uint64_t j;
  int64_t v270;
  float32x4_t v271;
  float32x4_t v272;
  uint64_t v273;
  float32x4_t *v274;
  float *v275;
  float32x4_t v276;
  uint64_t v277;
  uint64_t v278;
  float32x2_t *v279;
  float *v280;
  float32x2_t v281;
  __int32 *v282;
  uint64_t v283;
  uint64_t v284;
  float32x2_t *v285;
  _DWORD *v286;
  const float *v287;
  float32x2_t v288;
  uint64_t v289;
  float v290;
  int64_t v291;
  float32x2_t v292;
  float32x2_t v293;
  uint64_t v294;
  float32x4_t v295;
  uint64_t v296;
  uint64_t v297;
  int64_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t *v303;
  _DWORD *v304;
  uint64_t v305;
  const float *v306;
  float32x4_t v307;
  uint64_t v308;
  float v309;
  float32x4_t *v310;
  float32x4_t v311;
  float32x4_t v312;
  uint64_t v313;
  float *v314;
  uint64_t k;
  int64_t v316;
  float32x4_t v317;
  float32x4_t v318;
  uint64_t v319;
  float *v320;
  float *v321;
  int64_t v322;
  float32x2_t v323;
  float32x2_t v324;
  float32x2_t v325;
  float32x2_t v326;
  uint64_t v327;
  float32x4_t *v328;
  float *v329;
  float32x4_t v330;
  uint64_t v331;
  uint64_t v332;
  float *v333;
  float *v334;
  int64_t v335;
  float32x2_t v336;
  float32x2_t v337;
  float32x2_t v338;
  float32x2_t v339;
  uint64_t v340;
  float32x2_t *v341;
  float *v342;
  uint64_t v343;
  float32x2_t v344;
  uint64_t v345;
  uint64_t v346;
  float32x2_t *v347;
  _DWORD *v348;
  const float *v349;
  float32x2_t v350;
  uint64_t v351;
  float v352;
  float32x2_t v353;
  uint64_t v354;
  float32x2_t *v355;
  float *v356;
  uint64_t v357;
  float32x2_t v358;
  uint64_t v359;
  uint64_t v360;
  float32x2_t *v361;
  _DWORD *v362;
  const float *v363;
  float32x2_t v364;
  uint64_t v365;
  float v366;
  float32x2_t v367;
  uint64_t v368;
  float32x4_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  float v373;
  float32x4_t *v374;
  float32x4_t *v375;
  float32x4_t *v376;
  float32x4_t *v377;
  uint64_t v378;
  uint64_t v379;
  __int128 vars0;
  float *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  float32x4_t *v386;
  float32x4_t *v387;
  float32x4_t *v388;
  float32x4_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  float32x2_t *v398;
  float32x2_t *v399;
  float32x2_t *v400;
  float32x2_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;

  v46 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  v381 = v50;
  v56 = v48;
  LODWORD(v57) = v59.i32[0];
  v58 = v46;
  STACK[0x1218] = *MEMORY[0x1E0C80C00];
  v59.i32[0] = 1.0;
  v60 = v47 * v46;
  vars0 = v57;
  v378 = v46;
  v379 = v53;
  if (v54 != 1.0)
  {
    *(float *)v55.i32 = v54;
    if (v54 == 0.0)
    {
      if (v46 >= 16 && v60 >= 0x2000)
      {
        v83 = 0;
        v84 = 0;
        v85 = -v49 & v49;
        if (v85 >= 4)
          v85 = 4;
        v86 = __clz(v85) - 61;
        v87 = (1 << v86);
        v407 = v51 << v86;
        v411 = v49 << v86;
        v403 = 4 * v51;
        v88 = 4 * v49;
        v89 = v47 - 1;
        v371 = v53 << 12;
        v90 = 16 * v53;
        v91 = 4 * v53;
        v375 = v52;
        do
        {
          v387 = v52;
          v391 = v84;
          if (v58 - v84 >= 1024)
            v92 = 1024;
          else
            v92 = v58 - v84;
          v383 = v58 - v84;
          if (v58 - v84 >= 1)
          {
            v93 = v58 - (v83 << 10);
            if (v93 >= 1024)
              v93 = 1024;
            bzero((void *)((unint64_t)&a46 | 0x10), 4 * (v93 - (v93 != 0)) + 4);
          }
          v395 = v83;
          v399 = v56;
          v94 = (uint64_t)v56;
          v95 = v381;
          v96 = v87;
          do
          {
            v97 = (v89 + v96) / v87;
            if (!v97)
              break;
            v59 = gemvN_aligned_mxn<Vector<float,4l>>(v92, v97, v94, v411, v95, v407, (unint64_t)&a46 | 0x10, v59);
            v95 = (float *)((char *)v95 + v403);
            v94 += v88;
            --v96;
          }
          while (v96);
          v58 = v378;
          if (v383 >= 1)
          {
            v98 = 0;
            v99 = v387;
            do
            {
              v100 = v92 - v98;
              v59 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a46 | 0x10) + 4 * v98), *(float *)&vars0);
              if (v379 == 1 && v100 >= 4)
              {
                *(float32x4_t *)((char *)v375 + 4 * v391 * v379 + 4 * v98) = v59;
              }
              else
              {
                if (v100 >= 4)
                  v101 = 4;
                else
                  v101 = v92 - v98;
                v102 = (v101 + 4) & (v101 >> 63);
                if (v101 < 0)
                  v101 = 4;
                if (v102 < v101)
                {
                  v103 = (__int32 *)((char *)v99->i32 + v91 * v102);
                  do
                  {
                    a30 = v59;
                    *v103 = *(_DWORD *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v102++ & 3)));
                    v103 = (_DWORD *)((char *)v103 + v91);
                  }
                  while (v101 != v102);
                }
              }
              v98 += 4;
              v99 = (float32x4_t *)((char *)v99 + v90);
            }
            while (v98 < v92);
          }
          v84 = v391 + 1024;
          v83 = v395 + 1;
          v56 = v399 + 512;
          v52 = (float32x4_t *)((char *)v387 + v371);
        }
        while (v391 + 1024 < v378);
        return;
      }
      if (v46 < 1)
        return;
      if ((unint64_t)v46 < 4)
      {
        if ((unint64_t)v46 < 2)
        {
          if (v47 >= 2)
          {
            v133 = 0.0;
            v238 = 2;
            v239 = (float *)v48;
            v132 = 0.0;
            v240 = v50;
            do
            {
              v132 = v132 + (float)(*v239 * *v240);
              v133 = v133 + (float)(v239[v49] * v240[v51]);
              v238 += 2;
              v240 += 2 * v51;
              v239 += 2 * v49;
            }
            while (v238 <= v47);
            v131 = v47 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v131 = 0;
            v132 = 0.0;
            v133 = 0.0;
          }
          if (v131 < v47)
            v132 = v132 + (float)(v48->f32[v131 * v49] * v50[v131 * v51]);
          v188 = (float)(v133 + v132) * *(float *)&v57;
          goto LABEL_352;
        }
        if (v46 == 2)
        {
          if (v47 >= 2)
          {
            v196 = 0;
            v278 = 2;
            v279 = v48;
            v195 = 0;
            v280 = v50;
            do
            {
              v195 = vmla_n_f32(v195, *v279, *v280);
              v196 = vmla_n_f32(v196, *(float32x2_t *)((char *)v279 + 4 * v49), v280[v51]);
              v278 += 2;
              v280 += 2 * v51;
              v279 += v49;
            }
            while (v278 <= v47);
            v194 = v47 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v194 = 0;
            v195 = 0;
            v196 = 0;
          }
          if (v194 < v47)
            v195 = vmla_n_f32(v195, *(float32x2_t *)((char *)v48 + 4 * v194 * v49), v50[v194 * v51]);
          v281 = vmul_n_f32(vadd_f32(v196, v195), *(float *)&v57);
          v52->i32[0] = v281.i32[0];
          v282 = &v52->i32[v53];
          goto LABEL_313;
        }
        if (v47 >= 2)
        {
          v241 = v47 & 0xFFFFFFFFFFFFFFFELL;
          v245 = 0;
          v284 = 2;
          v285 = v48;
          v286 = v50;
          v244 = 0;
          v243 = 0;
          v242 = 0;
          v287 = v50;
          do
          {
            v288 = vld1_dup_f32(v287);
            v283 = 8 * v51;
            v287 = (const float *)((char *)v287 + v283);
            v245 = vmla_f32(v245, v288, *v285);
            v243 = vmla_f32(v243, v288, *(float32x2_t *)((char *)v285 + 4));
            v288.i32[0] = v286[v51];
            v242 = vmla_n_f32(v242, *(float32x2_t *)((char *)v285 + 4 * v49), v288.f32[0]);
            v244 = vmla_n_f32(v244, *(float32x2_t *)((char *)v285 + 4 * v49 + 4), v288.f32[0]);
            v284 += 2;
            v285 += v49;
            v286 = v287;
          }
          while (v284 <= v47);
        }
        else
        {
          v241 = 0;
          v242 = 0;
          v243 = 0;
          v244 = 0;
          v245 = 0;
        }
        if (v241 < v47)
        {
          v289 = 4 * v241 * v49;
          v290 = v50[v241 * v51];
          v245 = vmla_n_f32(v245, *(float32x2_t *)((char *)v48 + v289), v290);
          v243 = vmla_n_f32(v243, *(float32x2_t *)((char *)v48 + (v289 | 4)), v290);
        }
        v234 = (float32x2_t *)&v52->f32[v53];
        v52->i32[0] = vmul_n_f32(vadd_f32(v242, v245), *(float *)&v57).u32[0];
        v281 = vmul_n_f32(vadd_f32(v244, v243), *(float *)&v57);
        if (v53 != 1)
        {
          v234->i32[0] = v281.i32[0];
          v282 = (__int32 *)v234 + v53;
LABEL_313:
          *v282 = v281.i32[1];
          return;
        }
LABEL_311:
        *v234 = v281;
        return;
      }
      if (v46 == 4)
      {
        v58 = 4;
LABEL_227:
        if (v47 >= 2)
        {
          v220 = 0uLL;
          v221 = 2;
          v222 = (float32x4_t *)((char *)&v56[-2] + 4 * v58);
          v219 = 0uLL;
          v223 = v381;
          do
          {
            v219 = vmlaq_n_f32(v219, *v222, *v223);
            v220 = vmlaq_n_f32(v220, *(float32x4_t *)((char *)v222 + 4 * v49), v223[v51]);
            v221 += 2;
            v223 += 2 * v51;
            v222 = (float32x4_t *)((char *)v222 + 8 * v49);
          }
          while (v221 <= v47);
          v218 = v47 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v218 = 0;
          v219 = 0uLL;
          v220 = 0uLL;
        }
        if (v218 < v47)
          v219 = vmlaq_n_f32(v219, *(float32x4_t *)&v56[-2].f32[v58 + v218 * v49], v381[v218 * v51]);
        v224 = vmulq_n_f32(vaddq_f32(v220, v219), *(float *)&v57);
        v225 = 4 - v58;
        if (4 - v58 <= 3)
        {
          do
          {
            a31 = v224;
            v52->i32[0] = *(_DWORD *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v225++ & 3)));
            v52 = (float32x4_t *)((char *)v52 + 4 * v53);
          }
          while (v225 != 4);
        }
        return;
      }
      v198 = 4 * v53;
      while (1)
      {
        if (v58 >= 8)
          v199 = 8;
        else
          v199 = v58;
        if (v47 >= 2)
        {
          v204 = 0uLL;
          v205 = (float32x4_t *)v56;
          v206 = v381;
          v207 = 2;
          v203 = 0uLL;
          v202 = 0uLL;
          v201 = 0uLL;
          v208 = v381;
          do
          {
            v209 = vld1q_dup_f32(v208);
            v197 = 8 * v51;
            v208 = (const float *)((char *)v208 + v197);
            v204 = vmlaq_f32(v204, v209, *v205);
            v202 = vmlaq_f32(v202, v209, *(float32x4_t *)((char *)v205 + 4 * v199 - 16));
            v209.i32[0] = v206[v51];
            v201 = vmlaq_n_f32(v201, *(float32x4_t *)((char *)v205 + 4 * v49), v209.f32[0]);
            v203 = vmlaq_n_f32(v203, *(float32x4_t *)((char *)v205 + 4 * v49 + 4 * v199 - 16), v209.f32[0]);
            v207 += 2;
            v205 = (float32x4_t *)((char *)v205 + 8 * v49);
            v206 = v208;
          }
          while (v207 <= v47);
          v200 = v47 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v200 = 0;
          v201 = 0uLL;
          v202 = 0uLL;
          v203 = 0uLL;
          v204 = 0uLL;
        }
        v210 = v199 - 4;
        if (v200 < v47)
        {
          v211 = v381[v200 * v51];
          v204 = vmlaq_n_f32(v204, *(float32x4_t *)&v56->f32[v200 * v49], v211);
          v202 = vmlaq_n_f32(v202, *(float32x4_t *)&v56->f32[v200 * v49 + v210], v211);
        }
        v212 = (float32x4_t *)((char *)v52 + 4 * v210 * v53);
        v213 = vmulq_n_f32(vaddq_f32(v201, v204), *(float *)&v57);
        if (v53 == 1 && v199 == 8)
        {
          *v52 = v213;
          v214 = vmulq_n_f32(vaddq_f32(v203, v202), *(float *)&v57);
        }
        else
        {
          if (v199 >= 4)
            v215 = 0;
          else
            v215 = v199;
          if (v199 < 4)
            v210 = 4;
          if (v215 < v210)
          {
            v216 = (__int32 *)((char *)v52->i32 + v198 * v215);
            do
            {
              a33 = v213;
              *v216 = *(_DWORD *)((unint64_t)&a33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v215++ & 3)));
              v216 = (_DWORD *)((char *)v216 + v198);
            }
            while (v210 != v215);
          }
          v214 = vmulq_n_f32(vaddq_f32(v203, v202), *(float *)&v57);
          if (v53 != 1)
          {
            for (i = 0; i != 4; ++i)
            {
              a32 = v214;
              v212->i32[0] = *(_DWORD *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              v212 = (float32x4_t *)((char *)v212 + v198);
            }
            goto LABEL_225;
          }
        }
        *v212 = v214;
LABEL_225:
        v56 = (float32x2_t *)((char *)v56 + 4 * v199);
        v52 = (float32x4_t *)((char *)v52 + 4 * v199 * v53);
        v58 -= v199;
        if (v58 <= 4)
        {
          if (v58 < 1)
            return;
          goto LABEL_227;
        }
      }
    }
    v108 = (v60 & 0xFFFFFFFFFFFFE000) != 0 && v46 > 15;
    v59.i32[0] = -1.0;
    if (v54 == -1.0)
    {
      if (v108)
      {
        v109 = 0;
        v110 = 0;
        v111 = -v49 & v49;
        if (v111 >= 4)
          v111 = 4;
        v112 = __clz(v111) - 61;
        v113 = (1 << v112);
        v408 = v51 << v112;
        v412 = v49 << v112;
        v404 = 4 * v51;
        v114 = 4 * v49;
        v115 = v47 - 1;
        v372 = v53 << 12;
        v116 = 16 * v53;
        v117 = 4 * v53;
        v376 = v52;
        do
        {
          v388 = v52;
          v392 = v110;
          if (v58 - v110 >= 1024)
            v118 = 1024;
          else
            v118 = v58 - v110;
          v384 = v58 - v110;
          if (v58 - v110 >= 1)
          {
            v119 = v58 - (v109 << 10);
            if (v119 >= 1024)
              v119 = 1024;
            bzero((void *)((unint64_t)&a46 | 0x10), 4 * (v119 - (v119 != 0)) + 4);
          }
          v396 = v109;
          v400 = v56;
          v120 = (uint64_t)v56;
          v121 = v381;
          v122 = v113;
          do
          {
            v123 = (v115 + v122) / v113;
            if (!v123)
              break;
            v59 = gemvN_aligned_mxn<Vector<float,4l>>(v118, v123, v120, v412, v121, v408, (unint64_t)&a46 | 0x10, v59);
            v121 = (float *)((char *)v121 + v404);
            v120 += v114;
            --v122;
          }
          while (v122);
          v58 = v378;
          if (v384 >= 1)
          {
            v124 = 0;
            v125 = v388;
            do
            {
              v126 = v118 - v124;
              v59 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a46 | 0x10) + 4 * v124), *(float *)&vars0);
              if (v379 == 1 && v126 >= 4)
              {
                v127 = (float32x4_t *)((char *)v376 + 4 * v392 * v379 + 4 * v124);
                v59 = vsubq_f32(v59, *v127);
                *v127 = v59;
              }
              else
              {
                if (v126 >= 4)
                  v128 = 4;
                else
                  v128 = v118 - v124;
                v129 = (v128 + 4) & (v128 >> 63);
                if (v128 < 0)
                  v128 = 4;
                if (v129 < v128)
                {
                  v130 = (float *)((char *)v125->f32 + v117 * v129);
                  do
                  {
                    a34 = v59;
                    *v130 = *(float *)((unint64_t)&a34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v129++ & 3))) - *v130;
                    v130 = (float *)((char *)v130 + v117);
                  }
                  while (v128 != v129);
                }
              }
              v124 += 4;
              v125 = (float32x4_t *)((char *)v125 + v116);
            }
            while (v124 < v118);
          }
          v110 = v392 + 1024;
          v109 = v396 + 1;
          v56 = v400 + 512;
          v52 = (float32x4_t *)((char *)v388 + v372);
        }
        while (v392 + 1024 < v378);
        return;
      }
      if (v46 < 1)
        return;
      if ((unint64_t)v46 < 4)
      {
        if ((unint64_t)v46 < 2)
        {
          if (v47 >= 2)
          {
            v179 = 0.0;
            v319 = 2;
            v320 = (float *)v48;
            v178 = 0.0;
            v321 = v50;
            do
            {
              v178 = v178 + (float)(*v320 * *v321);
              v179 = v179 + (float)(v320[v49] * v321[v51]);
              v319 += 2;
              v321 += 2 * v51;
              v320 += 2 * v49;
            }
            while (v319 <= v47);
            v177 = v47 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v177 = 0;
            v178 = 0.0;
            v179 = 0.0;
          }
          if (v177 < v47)
            v178 = v178 + (float)(v48->f32[v177 * v49] * v50[v177 * v51]);
          v188 = -(float)(v52->f32[0] - (float)(*(float *)&v57 * (float)(v179 + v178)));
          goto LABEL_352;
        }
        if (v46 == 2)
        {
          if (v47 >= 2)
          {
            v248 = 0;
            v340 = 2;
            v341 = v48;
            v247 = 0;
            v342 = v50;
            do
            {
              v247 = vmla_n_f32(v247, *v341, *v342);
              v248 = vmla_n_f32(v248, *(float32x2_t *)((char *)v341 + 4 * v49), v342[v51]);
              v340 += 2;
              v342 += 2 * v51;
              v341 += v49;
            }
            while (v340 <= v47);
            v246 = v47 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v246 = 0;
            v247 = 0;
            v248 = 0;
          }
          if (v246 < v47)
            v247 = vmla_n_f32(v247, *(float32x2_t *)((char *)v48 + 4 * v246 * v49), v50[v246 * v51]);
          v343 = 0;
          v344 = vmul_n_f32(vadd_f32(v248, v247), *(float *)&v57);
          do
          {
            a36 = v344;
            v52->f32[0] = *(float *)((unint64_t)&a36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v343++ & 1))) - v52->f32[0];
            v52 = (float32x4_t *)((char *)v52 + 4 * v53);
          }
          while (v343 != 2);
          return;
        }
        if (v47 >= 2)
        {
          v322 = v47 & 0xFFFFFFFFFFFFFFFELL;
          v326 = 0;
          v346 = 2;
          v347 = v48;
          v348 = v50;
          v325 = 0;
          v324 = 0;
          v323 = 0;
          v349 = v50;
          do
          {
            v350 = vld1_dup_f32(v349);
            v345 = 8 * v51;
            v349 = (const float *)((char *)v349 + v345);
            v326 = vmla_f32(v326, v350, *v347);
            v324 = vmla_f32(v324, v350, *(float32x2_t *)((char *)v347 + 4));
            v350.i32[0] = v348[v51];
            v323 = vmla_n_f32(v323, *(float32x2_t *)((char *)v347 + 4 * v49), v350.f32[0]);
            v325 = vmla_n_f32(v325, *(float32x2_t *)((char *)v347 + 4 * v49 + 4), v350.f32[0]);
            v346 += 2;
            v347 += v49;
            v348 = v349;
          }
          while (v346 <= v47);
        }
        else
        {
          v322 = 0;
          v323 = 0;
          v324 = 0;
          v325 = 0;
          v326 = 0;
        }
        if (v322 < v47)
        {
          v351 = 4 * v322 * v49;
          v352 = v50[v322 * v51];
          v326 = vmla_n_f32(v326, *(float32x2_t *)((char *)v48 + v351), v352);
          v324 = vmla_n_f32(v324, *(float32x2_t *)((char *)v48 + (v351 | 4)), v352);
        }
        v234 = (float32x2_t *)&v52->f32[v53];
        v52->f32[0] = vmul_n_f32(vadd_f32(v323, v326), *(float *)&v57).f32[0] - v52->f32[0];
        v353 = vmul_n_f32(vadd_f32(v325, v324), *(float *)&v57);
        if (v53 == 1)
        {
          v236 = vsub_f32(v353, *v234);
          goto LABEL_246;
        }
        v234->f32[0] = v353.f32[0] - v234->f32[0];
        v237 = v353.f32[1] - v234->f32[v53];
LABEL_248:
        v234->f32[v53] = v237;
        return;
      }
      if (v46 == 4)
      {
        v58 = 4;
LABEL_290:
        if (v47 >= 2)
        {
          v272 = 0uLL;
          v273 = 2;
          v274 = (float32x4_t *)((char *)&v56[-2] + 4 * v58);
          v271 = 0uLL;
          v275 = v381;
          do
          {
            v271 = vmlaq_n_f32(v271, *v274, *v275);
            v272 = vmlaq_n_f32(v272, *(float32x4_t *)((char *)v274 + 4 * v49), v275[v51]);
            v273 += 2;
            v275 += 2 * v51;
            v274 = (float32x4_t *)((char *)v274 + 8 * v49);
          }
          while (v273 <= v47);
          v270 = v47 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v270 = 0;
          v271 = 0uLL;
          v272 = 0uLL;
        }
        if (v270 < v47)
          v271 = vmlaq_n_f32(v271, *(float32x4_t *)&v56[-2].f32[v58 + v270 * v49], v381[v270 * v51]);
        v276 = vmulq_n_f32(vaddq_f32(v272, v271), *(float *)&v57);
        v277 = 4 - v58;
        if (4 - v58 <= 3)
        {
          do
          {
            a37 = v276;
            v52->f32[0] = *(float *)((unint64_t)&a37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v277++ & 3))) - v52->f32[0];
            v52 = (float32x4_t *)((char *)v52 + 4 * v53);
          }
          while (v277 != 4);
        }
        return;
      }
      v250 = 4 * v53;
      while (1)
      {
        if (v58 >= 8)
          v251 = 8;
        else
          v251 = v58;
        if (v47 >= 2)
        {
          v256 = 0uLL;
          v257 = (float32x4_t *)v56;
          v258 = v381;
          v259 = 2;
          v255 = 0uLL;
          v254 = 0uLL;
          v253 = 0uLL;
          v260 = v381;
          do
          {
            v261 = vld1q_dup_f32(v260);
            v249 = 8 * v51;
            v260 = (const float *)((char *)v260 + v249);
            v256 = vmlaq_f32(v256, v261, *v257);
            v254 = vmlaq_f32(v254, v261, *(float32x4_t *)((char *)v257 + 4 * v251 - 16));
            v261.i32[0] = v258[v51];
            v253 = vmlaq_n_f32(v253, *(float32x4_t *)((char *)v257 + 4 * v49), v261.f32[0]);
            v255 = vmlaq_n_f32(v255, *(float32x4_t *)((char *)v257 + 4 * v49 + 4 * v251 - 16), v261.f32[0]);
            v259 += 2;
            v257 = (float32x4_t *)((char *)v257 + 8 * v49);
            v258 = v260;
          }
          while (v259 <= v47);
          v252 = v47 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v252 = 0;
          v253 = 0uLL;
          v254 = 0uLL;
          v255 = 0uLL;
          v256 = 0uLL;
        }
        v262 = v251 - 4;
        if (v252 < v47)
        {
          v263 = v381[v252 * v51];
          v256 = vmlaq_n_f32(v256, *(float32x4_t *)&v56->f32[v252 * v49], v263);
          v254 = vmlaq_n_f32(v254, *(float32x4_t *)&v56->f32[v252 * v49 + v262], v263);
        }
        v264 = (float32x4_t *)((char *)v52 + 4 * v262 * v53);
        v265 = vmulq_n_f32(vaddq_f32(v253, v256), *(float *)&v57);
        if (v53 == 1 && v251 == 8)
        {
          *v52 = vsubq_f32(v265, *v52);
          v266 = vmulq_n_f32(vaddq_f32(v255, v254), *(float *)&v57);
        }
        else
        {
          if (v251 >= 4)
            v267 = 0;
          else
            v267 = v251;
          if (v251 < 4)
            v262 = 4;
          if (v267 < v262)
          {
            v268 = (float *)((char *)v52->f32 + v250 * v267);
            do
            {
              a39 = v265;
              *v268 = *(float *)((unint64_t)&a39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v267++ & 3))) - *v268;
              v268 = (float *)((char *)v268 + v250);
            }
            while (v262 != v267);
          }
          v266 = vmulq_n_f32(vaddq_f32(v255, v254), *(float *)&v57);
          if (v53 != 1)
          {
            for (j = 0; j != 4; ++j)
            {
              a38 = v266;
              v264->f32[0] = *(float *)((unint64_t)&a38 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) - v264->f32[0];
              v264 = (float32x4_t *)((char *)v264 + v250);
            }
            goto LABEL_288;
          }
        }
        *v264 = vsubq_f32(v266, *v264);
LABEL_288:
        v56 = (float32x2_t *)((char *)v56 + 4 * v251);
        v52 = (float32x4_t *)((char *)v52 + 4 * v251 * v53);
        v58 -= v251;
        if (v58 <= 4)
        {
          if (v58 < 1)
            return;
          goto LABEL_290;
        }
      }
    }
    if (v108)
    {
      v134 = 0;
      v135 = 0;
      v136 = -v49 & v49;
      if (v136 >= 4)
        v136 = 4;
      v137 = __clz(v136) - 61;
      v138 = (1 << v137);
      v409 = v51 << v137;
      v413 = v49 << v137;
      v405 = 4 * v51;
      v139 = 4 * v49;
      v140 = v47 - 1;
      v368 = v53 << 12;
      v141 = 16 * v53;
      v142 = 4 * v53;
      v377 = v52;
      v369 = (float32x4_t)vdupq_lane_s32(v55, 0);
      v373 = v54;
      do
      {
        v389 = v52;
        v393 = v135;
        if (v58 - v135 >= 1024)
          v143 = 1024;
        else
          v143 = v58 - v135;
        v385 = v58 - v135;
        if (v58 - v135 >= 1)
        {
          v144 = v58 - (v134 << 10);
          if (v144 >= 1024)
            v144 = 1024;
          bzero((void *)((unint64_t)&a46 | 0x10), 4 * (v144 - (v144 != 0)) + 4);
        }
        v397 = v134;
        v401 = v56;
        v145 = (uint64_t)v56;
        v146 = v381;
        v147 = v138;
        do
        {
          v148 = (v140 + v147) / v138;
          if (!v148)
            break;
          v59 = gemvN_aligned_mxn<Vector<float,4l>>(v143, v148, v145, v413, v146, v409, (unint64_t)&a46 | 0x10, v59);
          v146 = (float *)((char *)v146 + v405);
          v145 += v139;
          --v147;
        }
        while (v147);
        v58 = v378;
        if (v385 >= 1)
        {
          v149 = 0;
          v150 = v389;
          do
          {
            v151 = v143 - v149;
            v59 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a46 | 0x10) + 4 * v149), *(float *)&vars0);
            if (v379 == 1 && v151 >= 4)
            {
              v152 = (float32x4_t *)((char *)v377 + 4 * v393 * v379 + 4 * v149);
              v59 = vmlaq_f32(v59, *v152, v369);
              *v152 = v59;
            }
            else
            {
              if (v151 >= 4)
                v153 = 4;
              else
                v153 = v143 - v149;
              v154 = (v153 + 4) & (v153 >> 63);
              if (v153 < 0)
                v153 = 4;
              if (v154 < v153)
              {
                v155 = (float *)((char *)v150->f32 + v142 * v154);
                do
                {
                  a40 = v59;
                  *v155 = *(float *)((unint64_t)&a40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v154++ & 3)))
                        + (float)(v373 * *v155);
                  v155 = (float *)((char *)v155 + v142);
                }
                while (v153 != v154);
              }
            }
            v149 += 4;
            v150 = (float32x4_t *)((char *)v150 + v141);
          }
          while (v149 < v143);
        }
        v135 = v393 + 1024;
        v134 = v397 + 1;
        v56 = v401 + 512;
        v52 = (float32x4_t *)((char *)v389 + v368);
      }
      while (v393 + 1024 < v378);
      return;
    }
    if (v46 < 1)
      return;
    if ((unint64_t)v46 < 4)
    {
      if ((unint64_t)v46 < 2)
      {
        if (v47 >= 2)
        {
          v182 = 0.0;
          v332 = 2;
          v333 = (float *)v48;
          v181 = 0.0;
          v334 = v50;
          do
          {
            v181 = v181 + (float)(*v333 * *v334);
            v182 = v182 + (float)(v333[v49] * v334[v51]);
            v332 += 2;
            v334 += 2 * v51;
            v333 += 2 * v49;
          }
          while (v332 <= v47);
          v180 = v47 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v180 = 0;
          v181 = 0.0;
          v182 = 0.0;
        }
        if (v180 < v47)
          v181 = v181 + (float)(v48->f32[v180 * v49] * v50[v180 * v51]);
        v186 = v182 + v181;
        v187 = v52->f32[0] * *(float *)v55.i32;
        goto LABEL_194;
      }
      if (v46 == 2)
      {
        if (v47 >= 2)
        {
          v293 = 0;
          v354 = 2;
          v355 = v48;
          v292 = 0;
          v356 = v50;
          do
          {
            v292 = vmla_n_f32(v292, *v355, *v356);
            v293 = vmla_n_f32(v293, *(float32x2_t *)((char *)v355 + 4 * v49), v356[v51]);
            v354 += 2;
            v356 += 2 * v51;
            v355 += v49;
          }
          while (v354 <= v47);
          v291 = v47 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v291 = 0;
          v292 = 0;
          v293 = 0;
        }
        if (v291 < v47)
          v292 = vmla_n_f32(v292, *(float32x2_t *)((char *)v48 + 4 * v291 * v49), v50[v291 * v51]);
        v357 = 0;
        v358 = vmul_n_f32(vadd_f32(v293, v292), *(float *)&v57);
        do
        {
          a42 = v358;
          v52->f32[0] = *(float *)((unint64_t)&a42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v357++ & 1)))
                      + (float)(*(float *)v55.i32 * v52->f32[0]);
          v52 = (float32x4_t *)((char *)v52 + 4 * v53);
        }
        while (v357 != 2);
        return;
      }
      if (v47 >= 2)
      {
        v335 = v47 & 0xFFFFFFFFFFFFFFFELL;
        v339 = 0;
        v360 = 2;
        v361 = v48;
        v362 = v50;
        v338 = 0;
        v337 = 0;
        v336 = 0;
        v363 = v50;
        do
        {
          v364 = vld1_dup_f32(v363);
          v359 = 8 * v51;
          v363 = (const float *)((char *)v363 + v359);
          v339 = vmla_f32(v339, v364, *v361);
          v337 = vmla_f32(v337, v364, *(float32x2_t *)((char *)v361 + 4));
          v364.i32[0] = v362[v51];
          v336 = vmla_n_f32(v336, *(float32x2_t *)((char *)v361 + 4 * v49), v364.f32[0]);
          v338 = vmla_n_f32(v338, *(float32x2_t *)((char *)v361 + 4 * v49 + 4), v364.f32[0]);
          v360 += 2;
          v361 += v49;
          v362 = v363;
        }
        while (v360 <= v47);
      }
      else
      {
        v335 = 0;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        v339 = 0;
      }
      if (v335 < v47)
      {
        v365 = 4 * v335 * v49;
        v366 = v50[v335 * v51];
        v339 = vmla_n_f32(v339, *(float32x2_t *)((char *)v48 + v365), v366);
        v337 = vmla_n_f32(v337, *(float32x2_t *)((char *)v48 + (v365 | 4)), v366);
      }
      v234 = (float32x2_t *)&v52->f32[v53];
      v52->f32[0] = vmul_n_f32(vadd_f32(v336, v339), *(float *)&v57).f32[0] + (float)(*(float *)v55.i32 * v52->f32[0]);
      v367 = vmul_n_f32(vadd_f32(v338, v337), *(float *)&v57);
      if (v53 != 1)
      {
        v234->f32[0] = v367.f32[0] + (float)(*(float *)v55.i32 * v234->f32[0]);
        v237 = v367.f32[1] + (float)(*(float *)v55.i32 * v234->f32[v53]);
        goto LABEL_248;
      }
      v281 = vmla_f32(v367, *v234, (float32x2_t)vdup_lane_s32(v55, 0));
      goto LABEL_311;
    }
    if (v46 == 4)
    {
      v58 = 4;
LABEL_344:
      if (v47 >= 2)
      {
        v318 = 0uLL;
        v327 = 2;
        v328 = (float32x4_t *)((char *)&v56[-2] + 4 * v58);
        v317 = 0uLL;
        v329 = v381;
        do
        {
          v317 = vmlaq_n_f32(v317, *v328, *v329);
          v318 = vmlaq_n_f32(v318, *(float32x4_t *)((char *)v328 + 4 * v49), v329[v51]);
          v327 += 2;
          v329 += 2 * v51;
          v328 = (float32x4_t *)((char *)v328 + 8 * v49);
        }
        while (v327 <= v47);
        v316 = v47 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v316 = 0;
        v317 = 0uLL;
        v318 = 0uLL;
      }
      if (v316 < v47)
        v317 = vmlaq_n_f32(v317, *(float32x4_t *)&v56[-2].f32[v58 + v316 * v49], v381[v316 * v51]);
      v330 = vmulq_n_f32(vaddq_f32(v318, v317), *(float *)&v57);
      v331 = 4 - v58;
      if (4 - v58 <= 3)
      {
        do
        {
          a43 = v330;
          v52->f32[0] = *(float *)((unint64_t)&a43 & 0xFFFFFFFFFFFFFFF3 | (4 * (v331++ & 3)))
                      + (float)(*(float *)v55.i32 * v52->f32[0]);
          v52 = (float32x4_t *)((char *)v52 + 4 * v53);
        }
        while (v331 != 4);
      }
      return;
    }
    v295 = (float32x4_t)vdupq_lane_s32(v55, 0);
    v296 = 4 * v53;
    while (1)
    {
      if (v58 >= 8)
        v297 = 8;
      else
        v297 = v58;
      if (v47 >= 2)
      {
        v302 = 0uLL;
        v303 = (float32x4_t *)v56;
        v304 = v381;
        v305 = 2;
        v301 = 0uLL;
        v300 = 0uLL;
        v299 = 0uLL;
        v306 = v381;
        do
        {
          v307 = vld1q_dup_f32(v306);
          v294 = 8 * v51;
          v306 = (const float *)((char *)v306 + v294);
          v302 = vmlaq_f32(v302, v307, *v303);
          v300 = vmlaq_f32(v300, v307, *(float32x4_t *)((char *)v303 + 4 * v297 - 16));
          v307.i32[0] = v304[v51];
          v299 = vmlaq_n_f32(v299, *(float32x4_t *)((char *)v303 + 4 * v49), v307.f32[0]);
          v301 = vmlaq_n_f32(v301, *(float32x4_t *)((char *)v303 + 4 * v49 + 4 * v297 - 16), v307.f32[0]);
          v305 += 2;
          v303 = (float32x4_t *)((char *)v303 + 8 * v49);
          v304 = v306;
        }
        while (v305 <= v47);
        v298 = v47 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v298 = 0;
        v299 = 0uLL;
        v300 = 0uLL;
        v301 = 0uLL;
        v302 = 0uLL;
      }
      v308 = v297 - 4;
      if (v298 < v47)
      {
        v309 = v381[v298 * v51];
        v302 = vmlaq_n_f32(v302, *(float32x4_t *)&v56->f32[v298 * v49], v309);
        v300 = vmlaq_n_f32(v300, *(float32x4_t *)&v56->f32[v298 * v49 + v308], v309);
      }
      v310 = (float32x4_t *)((char *)v52 + 4 * v308 * v53);
      v311 = vmulq_n_f32(vaddq_f32(v299, v302), *(float *)&v57);
      if (v53 == 1 && v297 == 8)
      {
        *v52 = vmlaq_f32(v311, *v52, v295);
        v312 = vmulq_n_f32(vaddq_f32(v301, v300), *(float *)&v57);
      }
      else
      {
        if (v297 >= 4)
          v313 = 0;
        else
          v313 = v297;
        if (v297 < 4)
          v308 = 4;
        if (v313 < v308)
        {
          v314 = (float *)((char *)v52->f32 + v296 * v313);
          do
          {
            a45 = v311;
            *v314 = *(float *)((unint64_t)&a45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v313++ & 3)))
                  + (float)(*(float *)v55.i32 * *v314);
            v314 = (float *)((char *)v314 + v296);
          }
          while (v308 != v313);
        }
        v312 = vmulq_n_f32(vaddq_f32(v301, v300), *(float *)&v57);
        if (v53 != 1)
        {
          for (k = 0; k != 4; ++k)
          {
            a44 = v312;
            v310->f32[0] = *(float *)((unint64_t)&a44 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)))
                         + (float)(*(float *)v55.i32 * v310->f32[0]);
            v310 = (float32x4_t *)((char *)v310 + v296);
          }
          goto LABEL_342;
        }
      }
      *v310 = vmlaq_f32(v312, *v310, v295);
LABEL_342:
      v56 = (float32x2_t *)((char *)v56 + 4 * v297);
      v52 = (float32x4_t *)((char *)v52 + 4 * v297 * v53);
      v58 -= v297;
      if (v58 <= 4)
      {
        if (v58 < 1)
          return;
        goto LABEL_344;
      }
    }
  }
  if (v46 >= 16 && v60 >= 0x2000)
  {
    v61 = 0;
    v62 = 0;
    v63 = -v49 & v49;
    if (v63 >= 4)
      v63 = 4;
    v64 = __clz(v63) - 61;
    v65 = (1 << v64);
    v406 = v51 << v64;
    v410 = v49 << v64;
    v402 = 4 * v51;
    v66 = 4 * v49;
    v67 = v47 - 1;
    v370 = v53 << 12;
    v68 = 16 * v53;
    v69 = 4 * v53;
    v374 = v52;
    do
    {
      v386 = v52;
      v390 = v62;
      if (v58 - v62 >= 1024)
        v70 = 1024;
      else
        v70 = v58 - v62;
      v382 = v58 - v62;
      if (v58 - v62 >= 1)
      {
        v71 = v58 - (v61 << 10);
        if (v71 >= 1024)
          v71 = 1024;
        bzero((void *)((unint64_t)&a46 | 0x10), 4 * (v71 - (v71 != 0)) + 4);
      }
      v394 = v61;
      v398 = v56;
      v72 = (uint64_t)v56;
      v73 = v381;
      v74 = v65;
      do
      {
        v75 = (v67 + v74) / v65;
        if (!v75)
          break;
        v59 = gemvN_aligned_mxn<Vector<float,4l>>(v70, v75, v72, v410, v73, v406, (unint64_t)&a46 | 0x10, v59);
        v73 = (float *)((char *)v73 + v402);
        v72 += v66;
        --v74;
      }
      while (v74);
      v58 = v378;
      if (v382 >= 1)
      {
        v76 = 0;
        v77 = v386;
        do
        {
          v78 = v70 - v76;
          v59 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a46 | 0x10) + 4 * v76), *(float *)&vars0);
          if (v379 == 1 && v78 >= 4)
          {
            v79 = (float32x4_t *)((char *)v374 + 4 * v390 * v379 + 4 * v76);
            v59 = vaddq_f32(v59, *v79);
            *v79 = v59;
          }
          else
          {
            if (v78 >= 4)
              v80 = 4;
            else
              v80 = v70 - v76;
            v81 = (v80 + 4) & (v80 >> 63);
            if (v80 < 0)
              v80 = 4;
            if (v81 < v80)
            {
              v82 = (float *)((char *)v77->f32 + v69 * v81);
              do
              {
                a27 = v59;
                *v82 = *(float *)((unint64_t)&a27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v81++ & 3))) + *v82;
                v82 = (float *)((char *)v82 + v69);
              }
              while (v80 != v81);
            }
          }
          v76 += 4;
          v77 = (float32x4_t *)((char *)v77 + v68);
        }
        while (v76 < v70);
      }
      v62 = v390 + 1024;
      v61 = v394 + 1;
      v56 = v398 + 512;
      v52 = (float32x4_t *)((char *)v386 + v370);
    }
    while (v390 + 1024 < v378);
    return;
  }
  if (v46 < 1)
    return;
  if ((unint64_t)v46 < 4)
  {
    if ((unint64_t)v46 < 2)
    {
      if (v47 >= 2)
      {
        v106 = 0.0;
        v183 = 2;
        v184 = (float *)v48;
        v105 = 0.0;
        v185 = v50;
        do
        {
          v105 = v105 + (float)(*v184 * *v185);
          v106 = v106 + (float)(v184[v49] * v185[v51]);
          v183 += 2;
          v185 += 2 * v51;
          v184 += 2 * v49;
        }
        while (v183 <= v47);
        v104 = v47 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v104 = 0;
        v105 = 0.0;
        v106 = 0.0;
      }
      if (v104 < v47)
        v105 = v105 + (float)(v48->f32[v104 * v49] * v50[v104 * v51]);
      v186 = v106 + v105;
      v187 = v52->f32[0];
LABEL_194:
      v188 = v187 + (float)(*(float *)&v57 * v186);
LABEL_352:
      v52->f32[0] = v188;
      return;
    }
    if (v46 == 2)
    {
      gemvN_1xn<Vector<float,2l>,ScaleOne>(-2, v47, v48, v49, v50, v51, (float32x2_t *)v52, v53, *(float *)&v57);
      return;
    }
    if (v47 >= 2)
    {
      v189 = v47 & 0xFFFFFFFFFFFFFFFELL;
      v193 = 0;
      v227 = 2;
      v228 = v48;
      v229 = v50;
      v192 = 0;
      v191 = 0;
      v190 = 0;
      v230 = v50;
      do
      {
        v231 = vld1_dup_f32(v230);
        v226 = 8 * v51;
        v230 = (const float *)((char *)v230 + v226);
        v193 = vmla_f32(v193, v231, *v228);
        v191 = vmla_f32(v191, v231, *(float32x2_t *)((char *)v228 + 4));
        v231.i32[0] = v229[v51];
        v190 = vmla_n_f32(v190, *(float32x2_t *)((char *)v228 + 4 * v49), v231.f32[0]);
        v192 = vmla_n_f32(v192, *(float32x2_t *)((char *)v228 + 4 * v49 + 4), v231.f32[0]);
        v227 += 2;
        v228 += v49;
        v229 = v230;
      }
      while (v227 <= v47);
    }
    else
    {
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v192 = 0;
      v193 = 0;
    }
    if (v189 < v47)
    {
      v232 = 4 * v189 * v49;
      v233 = v50[v189 * v51];
      v193 = vmla_n_f32(v193, *(float32x2_t *)((char *)v48 + v232), v233);
      v191 = vmla_n_f32(v191, *(float32x2_t *)((char *)v48 + (v232 | 4)), v233);
    }
    v234 = (float32x2_t *)&v52->f32[v53];
    v52->f32[0] = v52->f32[0] + vmul_n_f32(vadd_f32(v190, v193), *(float *)&v57).f32[0];
    v235 = vmul_n_f32(vadd_f32(v192, v191), *(float *)&v57);
    if (v53 == 1)
    {
      v236 = vadd_f32(v235, *v234);
LABEL_246:
      *v234 = v236;
      return;
    }
    v234->f32[0] = v235.f32[0] + v234->f32[0];
    v237 = v235.f32[1] + v234->f32[v53];
    goto LABEL_248;
  }
  if (v46 == 4)
  {
    v58 = 4;
    goto LABEL_174;
  }
  v157 = 4 * v53;
  do
  {
    if (v58 >= 8)
      v158 = 8;
    else
      v158 = v58;
    if (v47 >= 2)
    {
      v163 = 0uLL;
      v164 = (float32x4_t *)v56;
      v165 = v381;
      v166 = 2;
      v162 = 0uLL;
      v161 = 0uLL;
      v160 = 0uLL;
      v167 = v381;
      do
      {
        v168 = vld1q_dup_f32(v167);
        v156 = 8 * v51;
        v167 = (const float *)((char *)v167 + v156);
        v163 = vmlaq_f32(v163, v168, *v164);
        v161 = vmlaq_f32(v161, v168, *(float32x4_t *)((char *)v164 + 4 * v158 - 16));
        v168.i32[0] = v165[v51];
        v160 = vmlaq_n_f32(v160, *(float32x4_t *)((char *)v164 + 4 * v49), v168.f32[0]);
        v162 = vmlaq_n_f32(v162, *(float32x4_t *)((char *)v164 + 4 * v49 + 4 * v158 - 16), v168.f32[0]);
        v166 += 2;
        v164 = (float32x4_t *)((char *)v164 + 8 * v49);
        v165 = v167;
      }
      while (v166 <= v47);
      v159 = v47 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v159 = 0;
      v160 = 0uLL;
      v161 = 0uLL;
      v162 = 0uLL;
      v163 = 0uLL;
    }
    v169 = v158 - 4;
    if (v159 < v47)
    {
      v170 = v381[v159 * v51];
      v163 = vmlaq_n_f32(v163, *(float32x4_t *)&v56->f32[v159 * v49], v170);
      v161 = vmlaq_n_f32(v161, *(float32x4_t *)&v56->f32[v159 * v49 + v169], v170);
    }
    v171 = (float32x4_t *)((char *)v52 + 4 * v169 * v53);
    v172 = vmulq_n_f32(vaddq_f32(v160, v163), *(float *)&v57);
    if (v53 == 1 && v158 == 8)
    {
      *v52 = vaddq_f32(v172, *v52);
      v173 = vmulq_n_f32(vaddq_f32(v162, v161), *(float *)&v57);
LABEL_169:
      *v171 = vaddq_f32(v173, *v171);
      goto LABEL_172;
    }
    if (v158 >= 4)
      v174 = 0;
    else
      v174 = v158;
    if (v158 < 4)
      v169 = 4;
    if (v174 < v169)
    {
      v175 = (float *)((char *)v52->f32 + v157 * v174);
      do
      {
        a29 = v172;
        *v175 = *(float *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v174++ & 3))) + *v175;
        v175 = (float *)((char *)v175 + v157);
      }
      while (v169 != v174);
    }
    v173 = vmulq_n_f32(vaddq_f32(v162, v161), *(float *)&v57);
    if (v53 == 1)
      goto LABEL_169;
    for (m = 0; m != 4; ++m)
    {
      a28 = v173;
      v171->f32[0] = *(float *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFF3 | (4 * (m & 3))) + v171->f32[0];
      v171 = (float32x4_t *)((char *)v171 + v157);
    }
LABEL_172:
    v56 = (float32x2_t *)((char *)v56 + 4 * v158);
    v52 = (float32x4_t *)((char *)v52 + 4 * v158 * v53);
    v58 -= v158;
  }
  while (v58 > 4);
  if (v58 >= 1)
LABEL_174:
    gemvN_1xn<Vector<float,4l>,ScaleOne>(-v58, v47, (float32x4_t *)((char *)&v56[-2] + 4 * v58), v49, v381, v51, (float32x4_t *)((char *)v52 + 4 * (v58 - 4) * v53), v53, *(float *)&v57);
}

uint64_t sgemvT_packed_base(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7, float _S0, float a9)
{
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t *v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  __int8 *v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v64;
  float32x4_t v66;
  float32x4_t v73;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t i;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int8 *v103;
  float32x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float v113;
  uint64_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float *v129;
  float32x4_t *v132;
  float32x4_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  uint64_t j;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x2_t v141;
  float32x2_t *v142;
  int8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  __int8 *v161;
  uint64_t v162;
  float32x4_t *v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float *v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t v180;
  float32x4_t *v181;
  uint64_t v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t *v199;
  uint64_t k;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  __int8 *v207;
  float32x4_t v208;
  uint64_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t *v217;
  uint64_t v218;
  float32x4_t *v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float *v229;
  float32x4_t v230;
  float32x4_t *v231;
  float32x4_t v232;
  float32x4_t *v233;
  float32x4_t *v234;
  uint64_t m;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x2_t v245;
  float32x2_t *v246;
  int8x16_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float32x4_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t *v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t *v279;
  float *v280;
  uint64_t v289;
  float32x4_t *v290;
  uint64_t v291;
  float32x4_t *v292;
  uint64_t v293;
  float32x4_t *v294;
  float32x4_t *v295;
  uint64_t v296;
  uint64_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  float32x4_t *v306;
  float32x4_t *v307;
  uint64_t n;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  __int8 *v315;
  float32x2_t v320;
  float32x2_t *v321;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float32x4_t *v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t v338;
  __int8 *v339;
  uint64_t v340;
  float32x4_t *v341;
  uint64_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t *v350;
  float32x4_t *v351;
  float32x4_t *v352;
  float32x4_t *v353;
  float32x4_t *v354;
  float *v355;
  uint64_t v364;
  float32x4_t *v365;
  uint64_t v366;
  float32x4_t *v367;
  uint64_t v368;
  float32x4_t *v369;
  float32x4_t *v370;
  uint64_t v371;
  uint64_t v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  float32x4_t *v382;
  uint64_t jj;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  __int8 *v390;
  float32x4_t *v395;
  uint64_t v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t *v400;
  float32x4_t *v401;
  float32x4_t *v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float *v407;
  float32x4_t *v410;
  float32x4_t v411;
  float32x4_t *v412;
  float32x4_t *v413;
  uint64_t ii;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int8x16_t v418;
  char *v419;
  uint64_t v420;
  float32x4_t *v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float32x4_t *v425;
  uint64_t kk;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float *v431;
  float32x4_t *v434;
  float32x4_t v435;
  float32x4_t *v436;
  float32x4_t *v437;
  uint64_t mm;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  int8x16_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float32x4_t *v449;
  float32x4_t *v450;
  float32x4_t *v451;
  float32x4_t *v452;
  uint64_t v453;
  uint64_t v454;

  v10 = a4;
  v11 = (float32x4_t *)a3;
  v12 = result;
  if (a9 == 1.0)
  {
    if (result > 3)
    {
      v15 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v16 = *(float32x4_t *)a5;
          do
          {
            v17 = (int8x16_t)vmulq_f32(v16, *v11);
            *a6 = *a6
                + (float)(_S0
                        * vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v29 = *(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (4 - (-(int)result & 3)));
        v453 = result;
        v445 = result - 4;
        v30 = 0;
        if (a2 >= 8)
        {
          v31 = 4 * a4;
          v449 = (float32x4_t *)(a5 + 4 * v15);
          v32 = v15 + 2 * a4;
          v33 = v15 + 4 * a4;
          v34 = 32 * a4;
          v35 = 4 * v15;
          v36 = 4 * (v15 + a4);
          v37 = 4 * v32;
          v38 = 4 * (v32 + a4);
          v39 = 4 * v33;
          v40 = 4 * (v33 + a4);
          v41 = 4 * (v15 + 6 * a4);
          v42 = 4 * (v15 - a4 + 8 * a4);
          v43 = v11;
          do
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = v10;
            v47 = &v11->i8[4 * v30 * v10];
            v48 = a5;
            v49 = v43;
            v50 = v453;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            do
            {
              v57 = *(float32x4_t *)a5;
              a5 += 16;
              v44 = vmlaq_f32(v44, v57, *v49);
              v45 = vmlaq_f32(v45, v57, *(float32x4_t *)((char *)v49 + v31));
              v58 = (float32x4_t *)((char *)v49 + v31 + v31);
              v51 = vmlaq_f32(v51, v57, *v58);
              v59 = (float32x4_t *)((char *)v58 + v31);
              v56 = vmlaq_f32(v56, v57, *v59);
              v60 = (float32x4_t *)((char *)v59 + v31);
              v55 = vmlaq_f32(v55, v57, *v60);
              v61 = (float32x4_t *)((char *)v60 + v31);
              v54 = vmlaq_f32(v54, v57, *v61);
              v62 = (float32x4_t *)((char *)v61 + v31);
              v53 = vmlaq_f32(v53, v57, *v62);
              v52 = vmlaq_f32(v52, v57, *(float32x4_t *)((char *)v62 + v31));
              v50 -= 4;
              ++v49;
            }
            while (v50 > 4);
            result = (uint64_t)&a6[v30 * a7];
            _Q5 = vaddq_f32(v55, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v39])));
            v64 = vaddq_f32(v54, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v40])));
            _Q3 = vaddq_f32(v53, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v41])));
            v66 = (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v42]));
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v44, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v35]))), vaddq_f32(v45, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v36])))), vpaddq_f32(vaddq_f32(v51, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v37]))), vaddq_f32(v56, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v38])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q6.f32[0]);
            __asm { FMLA            S7, S0, V6.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S7;
            v73 = vpaddq_f32(_Q5, v64);
            __asm { FMLA            S7, S0, V6.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S7;
            __asm { FMLA            S5, S0, V6.S[3] }
            *(_DWORD *)(result + 12 * a7) = _Q5.i32[0];
            _Q2 = vpaddq_f32(v73, vpaddq_f32(_Q3, vaddq_f32(v52, v66)));
            *(float *)(result + 16 * a7) = vmlas_n_f32(*(float *)(result + 16 * a7), _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 20 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 24 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 28 * a7) = _Q3.i32[0];
            v30 += 8;
            v43 = (float32x4_t *)((char *)v43 + v34);
            v10 = v46;
            a5 = v48;
          }
          while ((v30 | 7) < a2);
        }
        if ((v30 | 3) >= a2)
        {
          v86 = v453;
          v76 = v445;
        }
        else
        {
          v76 = v445;
          v78 = v445 + 2 * v10;
          v79 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 12));
          v80 = 16 * v10;
          v81 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 8));
          v82 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v83 = 4 * v78;
          v84 = 4 * (v78 + v10);
          v85 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          v86 = v453;
          do
          {
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = (float32x4_t *)a5;
            v92 = v85;
            v93 = v82;
            v94 = v81;
            v95 = v79;
            for (i = v453; i > 4; i -= 4)
            {
              v97 = *v91++;
              v98 = v97;
              v99 = *v92++;
              v90 = vmlaq_f32(v90, v98, v99);
              v100 = *v93++;
              v89 = vmlaq_f32(v89, v98, v100);
              v101 = *v94++;
              v88 = vmlaq_f32(v88, v98, v101);
              v102 = *v95++;
              v87 = vmlaq_f32(v87, v98, v102);
            }
            v103 = &v11->i8[4 * v30 * v10];
            result = (uint64_t)&a6[v30 * a7];
            v77 = (float32x4_t *)(a5 + 4 * v445);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v90, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445]))), vaddq_f32(v89, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445 + 4 * v10])))), vpaddq_f32(vaddq_f32(v88, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v83]))), vaddq_f32(v87, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v84])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v30 += 4;
            v79 = (float32x4_t *)((char *)v79 + v80);
            v81 = (float32x4_t *)((char *)v81 + v80);
            v82 = (float32x4_t *)((char *)v82 + v80);
            v85 = (float32x4_t *)((char *)v85 + v80);
          }
          while ((v30 | 3) < a2);
        }
        if ((v30 | 1) < a2)
        {
          v117 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v118 = 8 * v10;
          v119 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v120 = 0uLL;
            v121 = 0uLL;
            v122 = (float32x4_t *)a5;
            v123 = v119;
            v124 = v117;
            for (result = v86; result > 4; result -= 4)
            {
              v125 = *v122++;
              v126 = v125;
              v127 = *v123++;
              v121 = vmlaq_f32(v121, v126, v127);
              v128 = *v124++;
              v120 = vmlaq_f32(v120, v126, v128);
            }
            v129 = &a6[v30 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v121, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76)))), vaddq_f32(v120, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v129 = vmlas_n_f32(*v129, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v129[a7] = _S3;
            v30 += 2;
            v117 = (float32x4_t *)((char *)v117 + v118);
            v119 = (float32x4_t *)((char *)v119 + v118);
          }
          while ((v30 | 1) < a2);
        }
        if (v30 < a2)
        {
          v132 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v133 = 0uLL;
            v134 = (float32x4_t *)a5;
            v135 = v132;
            for (j = v86; j > 4; j -= 4)
            {
              v137 = *v134++;
              v138 = v137;
              v139 = *v135++;
              v133 = vmlaq_f32(v133, v138, v139);
            }
            v140 = (int8x16_t)vaddq_f32(v133, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76))));
            a6[v30 * a7] = a6[v30 * a7]
                         + (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL))));
            ++v30;
            v132 = (float32x4_t *)((char *)v132 + 4 * v10);
          }
          while (v30 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v19 = *(float32x4_t *)a5;
        v20 = *(float32x4_t *)(a5 + 4 * result - 16);
        v21 = vmvnq_s8(*(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (8 - result)));
        do
        {
          v22 = (int8x16_t)vaddq_f32(vmulq_f32(v20, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v19, *v11), v21));
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v18 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = *a6 + (float)(_S0 * vaddv_f32(vmul_f32(v18, *(float32x2_t *)v11->f32)));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v27 = *(float32x2_t *)(a5 + 4);
        v28 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(vmul_f32(v27, *v28), (float32x2_t)vmul_f32(v18, *(float32x2_t *)((char *)v28 - 4)).u32[0])));
          a6 += a7;
          v28 = (float32x2_t *)((char *)v28 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v13 = *(float *)a5;
      do
      {
        *a6 = *a6 + (float)(_S0 * (float)(v13 * v11->f32[0]));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 3)
    {
      v24 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v25 = *(float32x4_t *)a5;
          do
          {
            v26 = (int8x16_t)vmulq_f32(v25, *v11);
            *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL))) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * v10);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v143 = *(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (4 - (-(int)result & 3)));
        v454 = result;
        v446 = result - 4;
        v144 = 0;
        if (a2 >= 8)
        {
          v145 = 4 * v10;
          v450 = (float32x4_t *)(a5 + 4 * v24);
          v146 = v24 + 2 * v10;
          v147 = v24 + 4 * v10;
          v148 = 32 * v10;
          v149 = 4 * v24;
          v150 = 4 * (v24 + v10);
          v151 = 4 * v146;
          v152 = 4 * (v146 + v10);
          v153 = 4 * v147;
          v154 = 4 * (v147 + v10);
          v155 = 4 * (v24 + 6 * v10);
          v156 = 4 * (v24 - v10 + 8 * v10);
          v157 = v11;
          do
          {
            v158 = 0uLL;
            v159 = 0uLL;
            v160 = v10;
            v161 = &v11->i8[4 * v144 * v10];
            v162 = a5;
            v163 = v157;
            v164 = v454;
            v165 = 0uLL;
            v166 = 0uLL;
            v167 = 0uLL;
            v168 = 0uLL;
            v169 = 0uLL;
            v170 = 0uLL;
            do
            {
              v171 = *(float32x4_t *)a5;
              a5 += 16;
              v158 = vmlaq_f32(v158, v171, *v163);
              v159 = vmlaq_f32(v159, v171, *(float32x4_t *)((char *)v163 + v145));
              v172 = (float32x4_t *)((char *)v163 + v145 + v145);
              v165 = vmlaq_f32(v165, v171, *v172);
              v173 = (float32x4_t *)((char *)v172 + v145);
              v170 = vmlaq_f32(v170, v171, *v173);
              v174 = (float32x4_t *)((char *)v173 + v145);
              v169 = vmlaq_f32(v169, v171, *v174);
              v175 = (float32x4_t *)((char *)v174 + v145);
              v168 = vmlaq_f32(v168, v171, *v175);
              v176 = (float32x4_t *)((char *)v175 + v145);
              v167 = vmlaq_f32(v167, v171, *v176);
              v166 = vmlaq_f32(v166, v171, *(float32x4_t *)((char *)v176 + v145));
              v164 -= 4;
              ++v163;
            }
            while (v164 > 4);
            v177 = &a6[v144 * a7];
            v178 = vpaddq_f32(vpaddq_f32(vaddq_f32(v158, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v149]))), vaddq_f32(v159, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v150])))), vpaddq_f32(vaddq_f32(v165, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v151]))), vaddq_f32(v170, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v152])))));
            v179 = vpaddq_f32(vpaddq_f32(vaddq_f32(v169, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v153]))), vaddq_f32(v168, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v154])))), vpaddq_f32(vaddq_f32(v167, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v155]))), vaddq_f32(v166, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v156])))));
            *v177 = _S0 * v178.f32[0];
            v177[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v178.f32, 1);
            v177[2 * a7] = vmuls_lane_f32(_S0, v178, 2);
            v177[3 * a7] = vmuls_lane_f32(_S0, v178, 3);
            v177[4 * a7] = _S0 * v179.f32[0];
            v177[5 * a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v179.f32, 1);
            v177[6 * a7] = vmuls_lane_f32(_S0, v179, 2);
            v177[7 * a7] = vmuls_lane_f32(_S0, v179, 3);
            v144 += 8;
            result = v144 | 7;
            v157 = (float32x4_t *)((char *)v157 + v148);
            v10 = v160;
            a5 = v162;
          }
          while ((v144 | 7) < a2);
        }
        if ((v144 | 3) >= a2)
        {
          v190 = v454;
          v180 = v446;
        }
        else
        {
          v180 = v446;
          v182 = v446 + 2 * v10;
          v183 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 12));
          v184 = 16 * v10;
          v185 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 8));
          v186 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v187 = 4 * v182;
          v188 = 4 * (v182 + v10);
          v189 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          v190 = v454;
          do
          {
            v191 = 0uLL;
            v192 = 0uLL;
            v193 = 0uLL;
            v194 = 0uLL;
            v195 = (float32x4_t *)a5;
            v196 = v189;
            v197 = v186;
            v198 = v185;
            v199 = v183;
            for (k = v454; k > 4; k -= 4)
            {
              v201 = *v195++;
              v202 = v201;
              v203 = *v196++;
              v194 = vmlaq_f32(v194, v202, v203);
              v204 = *v197++;
              v193 = vmlaq_f32(v193, v202, v204);
              v205 = *v198++;
              v192 = vmlaq_f32(v192, v202, v205);
              v206 = *v199++;
              v191 = vmlaq_f32(v191, v202, v206);
            }
            v207 = &v11->i8[4 * v144 * v10];
            result = (uint64_t)&a6[v144 * a7];
            v181 = (float32x4_t *)(a5 + 4 * v446);
            v208 = vpaddq_f32(vpaddq_f32(vaddq_f32(v194, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446]))), vaddq_f32(v193, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446 + 4 * v10])))), vpaddq_f32(vaddq_f32(v192, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v187]))), vaddq_f32(v191, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v188])))));
            *(float *)result = _S0 * v208.f32[0];
            *(float *)(result + 4 * a7) = vmuls_lane_f32(_S0, *(float32x2_t *)v208.f32, 1);
            *(float *)(result + 8 * a7) = vmuls_lane_f32(_S0, v208, 2);
            *(float *)(result + 12 * a7) = vmuls_lane_f32(_S0, v208, 3);
            v144 += 4;
            v183 = (float32x4_t *)((char *)v183 + v184);
            v185 = (float32x4_t *)((char *)v185 + v184);
            v186 = (float32x4_t *)((char *)v186 + v184);
            v189 = (float32x4_t *)((char *)v189 + v184);
          }
          while ((v144 | 3) < a2);
        }
        if ((v144 | 1) < a2)
        {
          v217 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v218 = 8 * v10;
          v219 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = (float32x4_t *)a5;
            v223 = v219;
            v224 = v217;
            for (result = v190; result > 4; result -= 4)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f32(v221, v226, v227);
              v228 = *v224++;
              v220 = vmlaq_f32(v220, v226, v228);
            }
            v229 = &a6[v144 * a7];
            v230 = vpaddq_f32(vaddq_f32(v221, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180)))), vaddq_f32(v220, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180 + 4 * v10)))));
            v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
            *v229 = _S0 * v230.f32[0];
            v229[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v230.f32, 1);
            v144 += 2;
            v217 = (float32x4_t *)((char *)v217 + v218);
            v219 = (float32x4_t *)((char *)v219 + v218);
          }
          while ((v144 | 1) < a2);
        }
        if (v144 < a2)
        {
          v231 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v232 = 0uLL;
            v233 = (float32x4_t *)a5;
            v234 = v231;
            for (m = v190; m > 4; m -= 4)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f32(v232, v237, v238);
            }
            v239 = (int8x16_t)vaddq_f32(v232, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180))));
            a6[v144 * a7] = vaddv_f32(vadd_f32(*(float32x2_t *)v239.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL)))* _S0;
            ++v144;
            v231 = (float32x4_t *)((char *)v231 + 4 * v10);
          }
          while (v144 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v109 = *(float32x4_t *)a5;
        v110 = *(float32x4_t *)(a5 + 4 * result - 16);
        v111 = vmvnq_s8(*(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (8 - result)));
        do
        {
          v112 = (int8x16_t)vaddq_f32(vmulq_f32(v110, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v109, *v11), v111));
          *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL))) * _S0;
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * v10);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v108 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = vaddv_f32(vmul_f32(v108, *(float32x2_t *)v11->f32)) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v141 = *(float32x2_t *)(a5 + 4);
        v142 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = vaddv_f32(vadd_f32(vmul_f32(v141, *v142), (float32x2_t)vmul_f32(v108, *(float32x2_t *)((char *)v142 - 4)).u32[0]))* _S0;
          a6 += a7;
          v142 = (float32x2_t *)((char *)v142 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v14 = *(float *)a5;
      do
      {
        *a6 = (float)(v14 * v11->f32[0]) * _S0;
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 3)
    {
      v114 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v115 = *(float32x4_t *)a5;
          do
          {
            v116 = (int8x16_t)vmulq_f32(v115, *v11);
            *a6 = -(float)(*a6
                         - (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v247 = *(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (4 - (-(int)result & 3)));
        v443 = result - 4;
        v248 = 0;
        if (a2 >= 8)
        {
          v249 = 4 * a4;
          v451 = (float32x4_t *)(a5 + 4 * v114);
          v250 = v114 + 2 * a4;
          v251 = v114 + 4 * a4;
          v447 = 32 * a4;
          v252 = 4 * v114;
          v253 = 4 * (v114 + a4);
          v254 = 4 * v250;
          v255 = 4 * (v250 + a4);
          v256 = 4 * v251;
          v257 = 4 * (v251 + a4);
          v258 = 4 * (v114 + 6 * a4);
          v259 = 4 * (v114 - a4 + 8 * a4);
          v260 = v11;
          do
          {
            v261 = 0uLL;
            v262 = 0uLL;
            v263 = v10;
            v264 = &v11->i8[4 * v248 * v10];
            v265 = a5;
            v266 = v260;
            v267 = v12;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            v272 = 0uLL;
            v273 = 0uLL;
            do
            {
              v274 = *(float32x4_t *)a5;
              a5 += 16;
              v261 = vmlaq_f32(v261, v274, *v266);
              v262 = vmlaq_f32(v262, v274, *(float32x4_t *)((char *)v266 + v249));
              v275 = (float32x4_t *)((char *)v266 + v249 + v249);
              v268 = vmlaq_f32(v268, v274, *v275);
              v276 = (float32x4_t *)((char *)v275 + v249);
              v273 = vmlaq_f32(v273, v274, *v276);
              v277 = (float32x4_t *)((char *)v276 + v249);
              v272 = vmlaq_f32(v272, v274, *v277);
              v278 = (float32x4_t *)((char *)v277 + v249);
              v271 = vmlaq_f32(v271, v274, *v278);
              v279 = (float32x4_t *)((char *)v278 + v249);
              v270 = vmlaq_f32(v270, v274, *v279);
              v269 = vmlaq_f32(v269, v274, *(float32x4_t *)((char *)v279 + v249));
              v267 -= 4;
              ++v266;
            }
            while (v267 > 4);
            v280 = &a6[v248 * a7];
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v261, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v252]))), vaddq_f32(v262, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v253])))), vpaddq_f32(vaddq_f32(v268, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v254]))), vaddq_f32(v273, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v255])))));
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v272, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v256]))), vaddq_f32(v271, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v257])))), vpaddq_f32(vaddq_f32(v270, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v258]))), vaddq_f32(v269, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v259])))));
            *v280 = vmlas_n_f32(-*v280, _S0, _Q6.f32[0]);
            __asm { FMLA            S3, S0, V6.S[1] }
            v280[a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[2] }
            v280[2 * a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[3] }
            v280[3 * a7] = _S3;
            v280[4 * a7] = vmlas_n_f32(-v280[4 * a7], _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v280[5 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            v280[6 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            v280[7 * a7] = _S3;
            v248 += 8;
            result = v248 | 7;
            v260 = (float32x4_t *)((char *)v260 + v447);
            v10 = v263;
            a5 = v265;
          }
          while ((v248 | 7) < a2);
        }
        if ((v248 | 3) >= a2)
        {
          v289 = v443;
        }
        else
        {
          v289 = v443;
          v291 = v443 + 2 * v10;
          v292 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 12));
          v293 = 16 * v10;
          v294 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 8));
          v295 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v296 = 4 * v291;
          v297 = 4 * (v291 + v10);
          v298 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = 0uLL;
            if (v12 >= 5)
            {
              v303 = (float32x4_t *)a5;
              v304 = v298;
              v305 = v295;
              v306 = v294;
              v307 = v292;
              for (n = v12; n > 4; n -= 4)
              {
                v309 = *v303++;
                v310 = v309;
                v311 = *v304++;
                v302 = vmlaq_f32(v302, v310, v311);
                v312 = *v305++;
                v301 = vmlaq_f32(v301, v310, v312);
                v313 = *v306++;
                v300 = vmlaq_f32(v300, v310, v313);
                v314 = *v307++;
                v299 = vmlaq_f32(v299, v310, v314);
              }
            }
            v315 = &v11->i8[4 * v248 * v10];
            result = (uint64_t)&a6[v248 * a7];
            v290 = (float32x4_t *)(a5 + 4 * v443);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v302, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443]))), vaddq_f32(v301, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443 + 4 * v10])))), vpaddq_f32(vaddq_f32(v300, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v296]))), vaddq_f32(v299, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v297])))));
            *(float *)result = vmlas_n_f32(-*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v248 += 4;
            v292 = (float32x4_t *)((char *)v292 + v293);
            v294 = (float32x4_t *)((char *)v294 + v293);
            v295 = (float32x4_t *)((char *)v295 + v293);
            v298 = (float32x4_t *)((char *)v298 + v293);
          }
          while ((v248 | 3) < a2);
        }
        if ((v248 | 1) < a2)
        {
          v395 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v396 = 8 * v10;
          v397 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v398 = 0uLL;
            v399 = 0uLL;
            if (v12 >= 5)
            {
              v400 = (float32x4_t *)a5;
              v401 = v397;
              v402 = v395;
              for (result = v12; result > 4; result -= 4)
              {
                v403 = *v400++;
                v404 = v403;
                v405 = *v401++;
                v399 = vmlaq_f32(v399, v404, v405);
                v406 = *v402++;
                v398 = vmlaq_f32(v398, v404, v406);
              }
            }
            v407 = &a6[v248 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v399, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289)))), vaddq_f32(v398, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v407 = vmlas_n_f32(-*v407, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v407[a7] = _S3;
            v248 += 2;
            v395 = (float32x4_t *)((char *)v395 + v396);
            v397 = (float32x4_t *)((char *)v397 + v396);
          }
          while ((v248 | 1) < a2);
        }
        if (v248 < a2)
        {
          v410 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v411 = 0uLL;
            if (v12 >= 5)
            {
              v412 = (float32x4_t *)a5;
              v413 = v410;
              for (ii = v12; ii > 4; ii -= 4)
              {
                v415 = *v412++;
                v416 = v415;
                v417 = *v413++;
                v411 = vmlaq_f32(v411, v416, v417);
              }
            }
            v418 = (int8x16_t)vaddq_f32(v411, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289))));
            a6[v248 * a7] = -(float)(a6[v248 * a7]
                                   - (float)(_S0
                                           * vaddv_f32(vadd_f32(*(float32x2_t *)v418.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v418, v418, 8uLL)))));
            ++v248;
            v410 = (float32x4_t *)((char *)v410 + 4 * v10);
          }
          while (v248 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v213 = *(float32x4_t *)a5;
        v214 = *(float32x4_t *)(a5 + 4 * result - 16);
        v215 = vmvnq_s8(*(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (8 - result)));
        do
        {
          v216 = (int8x16_t)vaddq_f32(vmulq_f32(v214, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v213, *v11), v215));
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL)))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v212 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = -(float)(*a6 - (float)(_S0 * vaddv_f32(vmul_f32(v212, *(float32x2_t *)v11->f32))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v245 = *(float32x2_t *)(a5 + 4);
        v246 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(vmul_f32(v245, *v246), (float32x2_t)vmul_f32(v212, *(float32x2_t *)((char *)v246 - 4)).u32[0]))));
          a6 += a7;
          v246 = (float32x2_t *)((char *)v246 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v23 = *(float *)a5;
      do
      {
        *a6 = -(float)(*a6 - (float)(_S0 * (float)(v23 * v11->f32[0])));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 3)
  {
    v209 = result - 4;
    if (result == 4)
    {
      if (a2 >= 1)
      {
        v210 = *(float32x4_t *)a5;
        do
        {
          v211 = (int8x16_t)vmulq_f32(v210, *v11);
          *a6 = (float)(*a6 * a9)
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v211.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 8)
    {
      v322 = *(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (4 - (-(int)result & 3)));
      v323 = 4 * a4;
      v444 = result - 4;
      v324 = 0;
      if (a2 >= 8)
      {
        v452 = (float32x4_t *)(a5 + 4 * v209);
        v325 = v209 + 2 * a4;
        v326 = v209 + 4 * a4;
        v448 = 32 * a4;
        v327 = 4 * v209;
        v328 = 4 * (v209 + a4);
        v329 = 4 * v325;
        v330 = 4 * (v325 + a4);
        v331 = 4 * v326;
        v332 = 4 * (v326 + a4);
        v333 = 4 * (v209 + 6 * a4);
        v334 = 4 * (v209 - a4 + 8 * a4);
        v335 = v11;
        do
        {
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = v10;
          v339 = &v11->i8[4 * v324 * v10];
          v340 = a5;
          v341 = v335;
          v342 = v12;
          v343 = 0uLL;
          v344 = 0uLL;
          v345 = 0uLL;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          do
          {
            v349 = *(float32x4_t *)a5;
            a5 += 16;
            v336 = vmlaq_f32(v336, v349, *v341);
            v337 = vmlaq_f32(v337, v349, *(float32x4_t *)((char *)v341 + v323));
            v350 = (float32x4_t *)((char *)v341 + v323 + v323);
            v343 = vmlaq_f32(v343, v349, *v350);
            v351 = (float32x4_t *)((char *)v350 + v323);
            v348 = vmlaq_f32(v348, v349, *v351);
            v352 = (float32x4_t *)((char *)v351 + v323);
            v347 = vmlaq_f32(v347, v349, *v352);
            v353 = (float32x4_t *)((char *)v352 + v323);
            v346 = vmlaq_f32(v346, v349, *v353);
            v354 = (float32x4_t *)((char *)v353 + v323);
            v345 = vmlaq_f32(v345, v349, *v354);
            v344 = vmlaq_f32(v344, v349, *(float32x4_t *)((char *)v354 + v323));
            v342 -= 4;
            ++v341;
          }
          while (v342 > 4);
          v355 = &a6[v324 * a7];
          _Q7 = vpaddq_f32(vpaddq_f32(vaddq_f32(v336, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v327]))), vaddq_f32(v337, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v328])))), vpaddq_f32(vaddq_f32(v343, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v329]))), vaddq_f32(v348, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v330])))));
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v347, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v331]))), vaddq_f32(v346, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v332])))), vpaddq_f32(vaddq_f32(v345, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v333]))), vaddq_f32(v344, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v334])))));
          *v355 = vmlas_n_f32(*v355 * a9, _S0, _Q7.f32[0]);
          __asm { FMLA            S4, S0, V7.S[1] }
          v355[a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[2] }
          v355[2 * a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[3] }
          v355[3 * a7] = _S4;
          v355[4 * a7] = vmlas_n_f32(v355[4 * a7] * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v355[5 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          v355[6 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          v355[7 * a7] = _S4;
          v324 += 8;
          result = v324 | 7;
          v335 = (float32x4_t *)((char *)v335 + v448);
          v10 = v338;
          a5 = v340;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v364 = v444;
      }
      else
      {
        v364 = v444;
        v366 = v444 + 2 * v10;
        v367 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 12));
        v368 = 16 * v10;
        v369 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 8));
        v370 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 4));
        v371 = 4 * v366;
        v372 = 4 * (v366 + v10);
        v373 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v374 = 0uLL;
          v375 = 0uLL;
          v376 = 0uLL;
          v377 = 0uLL;
          if (v12 >= 5)
          {
            v378 = (float32x4_t *)a5;
            v379 = v373;
            v380 = v370;
            v381 = v369;
            v382 = v367;
            for (jj = v12; jj > 4; jj -= 4)
            {
              v384 = *v378++;
              v385 = v384;
              v386 = *v379++;
              v377 = vmlaq_f32(v377, v385, v386);
              v387 = *v380++;
              v376 = vmlaq_f32(v376, v385, v387);
              v388 = *v381++;
              v375 = vmlaq_f32(v375, v385, v388);
              v389 = *v382++;
              v374 = vmlaq_f32(v374, v385, v389);
            }
          }
          v390 = &v11->i8[4 * v324 * v10];
          result = (uint64_t)&a6[v324 * a7];
          v365 = (float32x4_t *)(a5 + 4 * v444);
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v377, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444]))), vaddq_f32(v376, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444 + 4 * v10])))), vpaddq_f32(vaddq_f32(v375, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v371]))), vaddq_f32(v374, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v372])))));
          *(float *)result = vmlas_n_f32(*(float *)result * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          *(_DWORD *)(result + 4 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          *(_DWORD *)(result + 8 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          *(_DWORD *)(result + 12 * a7) = _S4;
          v324 += 4;
          v367 = (float32x4_t *)((char *)v367 + v368);
          v369 = (float32x4_t *)((char *)v369 + v368);
          v370 = (float32x4_t *)((char *)v370 + v368);
          v373 = (float32x4_t *)((char *)v373 + v368);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v419 = (char *)v11 + v10 * (4 * v324 + 4);
        v420 = 8 * v10;
        v421 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v422 = 0uLL;
          v423 = 0uLL;
          if (v12 >= 5)
          {
            v424 = (float32x4_t *)a5;
            v425 = v421;
            result = (uint64_t)v419;
            for (kk = v12; kk > 4; kk -= 4)
            {
              v427 = *v424++;
              v428 = v427;
              v429 = *v425++;
              v423 = vmlaq_f32(v423, v428, v429);
              v430 = *(float32x4_t *)result;
              result += 16;
              v422 = vmlaq_f32(v422, v428, v430);
            }
          }
          v431 = &a6[v324 * a7];
          _Q3 = vpaddq_f32(vaddq_f32(v423, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364)))), vaddq_f32(v422, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364 + 4 * v10)))));
          _Q3.i64[0] = vpaddq_f32(_Q3, _Q3).u64[0];
          *v431 = vmlas_n_f32(*v431 * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v431[a7] = _S4;
          v324 += 2;
          v419 += v420;
          v421 = (float32x4_t *)((char *)v421 + v420);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v434 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v435 = 0uLL;
          if (v12 >= 5)
          {
            v436 = (float32x4_t *)a5;
            v437 = v434;
            for (mm = v12; mm > 4; mm -= 4)
            {
              v439 = *v436++;
              v440 = v439;
              v441 = *v437++;
              v435 = vmlaq_f32(v435, v440, v441);
            }
          }
          v442 = (int8x16_t)vaddq_f32(v435, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364))));
          a6[v324 * a7] = (float)(a6[v324 * a7] * a9)
                        + (float)(_S0
                                * vaddv_f32(vadd_f32(*(float32x2_t *)v442.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v442, v442, 8uLL))));
          ++v324;
          v434 = (float32x4_t *)((char *)v434 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v241 = *(float32x4_t *)a5;
      v242 = *(float32x4_t *)(a5 + 4 * result - 16);
      v243 = vmvnq_s8(*(int8x16_t *)((char *)&unk_1D33076C0 + 4 * (8 - result)));
      do
      {
        v244 = (int8x16_t)vaddq_f32(vmulq_f32(v242, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v241, *v11), v243));
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(*(float32x2_t *)v244.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL))));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v240 = *(float32x2_t *)a5;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        do
        {
          *a6 = (float)(*a6 * a9) + (float)(_S0 * vaddv_f32(vmul_f32(v240, *(float32x2_t *)v11->f32)));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v320 = *(float32x2_t *)(a5 + 4);
      v321 = (float32x2_t *)(a3 + 4);
      do
      {
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(vmul_f32(v320, *v321), (float32x2_t)vmul_f32(v240, *(float32x2_t *)((char *)v321 - 4)).u32[0])));
        a6 += a7;
        v321 = (float32x2_t *)((char *)v321 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v113 = *(float *)a5;
    do
    {
      *a6 = (float)(*a6 * a9) + (float)(_S0 * (float)(v113 * v11->f32[0]));
      a6 += a7;
      v11 = (float32x4_t *)((char *)v11 + 4 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t gemvN_1xn<Vector<float,4l>,ScaleOne>(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x4_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f32(v10, *v14, *v13);
      v11 = vmlaq_n_f32(v11, *(float32x4_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 = (float32x4_t *)((char *)v14 + 8 * a4);
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f32(v10, *(float32x4_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f32(vaddq_f32(v11, v10), a9);
  if (result == 4 && a8 == 1)
  {
    *a7 = vaddq_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 4) & (result >> 63);
    v17 = 4;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f32[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16++ & 3))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float32x4_t gemvN_aligned_mxn<Vector<float,4l>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, float32x4_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  const float *v24;
  float32x4_t v25;
  float v26;
  float32x4_t *v27;
  float v28;
  float32x4_t *v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  const float *v40;
  uint64_t v41;
  const float *v42;
  float32x4_t v43;
  float v44;
  float32x4_t *v45;
  float v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  int64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  if (v9 + 12 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  }
  else
  {
    v11 = 4 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float32x4_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f32(v24);
          v10 = 8 * a6;
          v24 = (const float *)((char *)v24 + v10);
          v13 = vmlaq_f32(v13, v25, *v21);
          v15 = vmlaq_f32(v15, v25, v21[1]);
          v17 = vmlaq_f32(v17, v25, v21[2]);
          v19 = vmlaq_f32(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f32(v14, *(float32x4_t *)((char *)v21 + 4 * a4), v26);
          v16 = vmlaq_n_f32(v16, *(float32x4_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f32(v18, *(float32x4_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f32(v20, *(float32x4_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 = (float32x4_t *)((char *)v21 + 8 * a4);
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float32x4_t *)(v8 + 4 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f32(v13, *v27, v28);
        v15 = vmlaq_n_f32(v15, v27[1], v28);
        v17 = vmlaq_n_f32(v17, v27[2], v28);
        v19 = vmlaq_n_f32(v19, v27[3], v28);
      }
      v29 = (float32x4_t *)(a7 + 4 * v9);
      v30 = vaddq_f32(vaddq_f32(v16, v15), v29[1]);
      *v29 = vaddq_f32(vaddq_f32(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f32(vaddq_f32(v20, v19), v29[3]);
      v29[2] = vaddq_f32(vaddq_f32(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 16;
      v32 = v9 + 28;
      v9 += 16;
    }
    while (v32 < a1);
  }
  if (v31 + 4 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float32x4_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f32(v42);
          v33 = 8 * a6;
          v42 = (const float *)((char *)v42 + v33);
          v35 = vmlaq_f32(v35, v43, *v39);
          v37 = vmlaq_f32(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f32(v36, *(float32x4_t *)((char *)v39 + 4 * a4), v44);
          v38 = vmlaq_n_f32(v38, *(float32x4_t *)((char *)v39 + 4 * a4 + 16), v44);
          v41 += 2;
          v39 = (float32x4_t *)((char *)v39 + 8 * a4);
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float32x4_t *)(v8 + 4 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f32(v35, *v45, v46);
        v37 = vmlaq_n_f32(v37, v45[1], v46);
      }
      v47 = (float32x4_t *)(a7 + 4 * v31);
      result = vaddq_f32(vaddq_f32(v38, v37), v47[1]);
      *v47 = vaddq_f32(vaddq_f32(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 8;
      v49 = v31 + 12;
      v31 += 8;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float32x4_t *)(a7 + 4 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float32x4_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f32(v52, *v55, *v56);
        v53 = vmlaq_n_f32(v53, *(float32x4_t *)((char *)v55 + 4 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 = (float32x4_t *)((char *)v55 + 8 * a4);
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f32(v52, *(float32x4_t *)(v8 + 4 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f32(vaddq_f32(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

uint64_t gemvN_1xn<Vector<float,2l>,ScaleOne>(uint64_t result, uint64_t a2, float32x2_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float *v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0;
    v12 = 2;
    v13 = a5;
    v10 = 0;
    v14 = a3;
    do
    {
      v10 = vmla_n_f32(v10, *v14, *v13);
      v11 = vmla_n_f32(v11, *(float32x2_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  if (v9 < a2)
    v10 = vmla_n_f32(v10, *(float32x2_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmul_n_f32(vadd_f32(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vadd_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = (float *)a7 + v16 * a8;
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

_OWORD *dgebpScaleAlignedC_8M4N_hurricane(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;

  v8 = a3;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    v21 = a3[3];
    v17 = (float64x2_t *)((char *)a3 + v9);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v17[3];
    v22 = (float64x2_t *)((char *)v17 + v9);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v22[3];
    v27 = (float64x2_t *)((char *)v22 + v9);
    v33 = *a2;
    v34 = a2[1];
    v32 = a2 + 2;
    v35 = vmulq_n_f64(v18, a7);
    v36 = vmulq_n_f64(v19, a7);
    v37 = vmulq_n_f64(v20, a7);
    v38 = vmulq_n_f64(v21, a7);
    v39 = vmulq_n_f64(v23, a7);
    v40 = vmulq_n_f64(v24, a7);
    v41 = vmulq_n_f64(v25, a7);
    v42 = vmulq_n_f64(v26, a7);
    v43 = vmulq_n_f64(v28, a7);
    v44 = vmulq_n_f64(v29, a7);
    v45 = vmulq_n_f64(v30, a7);
    v46 = vmulq_n_f64(v31, a7);
    v47 = vmulq_n_f64(*v27, a7);
    v48 = vmulq_n_f64(v27[1], a7);
    v49 = vmulq_n_f64(v27[2], a7);
    v50 = vmulq_n_f64(v27[3], a7);
    do
    {
      v35 = vmlaq_n_f64(v35, v11, v33.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v11, v33, 1);
      v43 = vmlaq_n_f64(v43, v11, v34.f64[0]);
      v47 = vmlaq_laneq_f64(v47, v11, v34, 1);
      v36 = vmlaq_n_f64(v36, v12, v33.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v12, v33, 1);
      v44 = vmlaq_n_f64(v44, v12, v34.f64[0]);
      v48 = vmlaq_laneq_f64(v48, v12, v34, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v37 = vmlaq_n_f64(v37, v14, v33.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v14, v33, 1);
      v45 = vmlaq_n_f64(v45, v14, v34.f64[0]);
      v49 = vmlaq_laneq_f64(v49, v14, v34, 1);
      v38 = vmlaq_n_f64(v38, v15, v33.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v15, v33, 1);
      v46 = vmlaq_n_f64(v46, v15, v34.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v15, v34, 1);
      v14 = *(float64x2_t *)v51;
      v15 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v33 = *v32;
      v34 = v32[1];
      v32 += 2;
      --v16;
    }
    while (v16);
    v52 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v35;
    v8[1] = v36;
    v8[2] = v37;
    v8[3] = v38;
    v8 += 4;
    *v52 = v39;
    v52[1] = v40;
    v52[2] = v41;
    v52[3] = v42;
    v53 = (float64x2_t *)((char *)v52 + v9);
    *v53 = v43;
    v53[1] = v44;
    v53[2] = v45;
    v53[3] = v46;
    v54 = (float64x2_t *)((char *)v53 + v9);
    *v54 = v47;
    v54[1] = v48;
    v54[2] = v49;
    v54[3] = v50;
    a3 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t Accelerate_AR_spotrf(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  float *v41;
  int v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;

  v10 = *a4;
  *a5 = 0;
  v11 = lsame_();
  if (!v11 && !lsame_())
  {
    v14 = -1;
    goto LABEL_29;
  }
  v12 = *a2;
  if ((v12 & 0x80000000) != 0)
  {
    v14 = -2;
    goto LABEL_29;
  }
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = *a2;
  if (*a4 < v13)
  {
    v14 = -4;
LABEL_29:
    *a5 = v14;
    goto LABEL_30;
  }
  v14 = *a5;
  if (*a5)
  {
LABEL_30:
    v62 = -v14;
    xerbla_();
    return 0;
  }
  v56 = v10;
  if ((_DWORD)v12)
  {
    if (v12 <= 0x200)
      v15 = 32;
    else
      v15 = 64;
    if (v12 <= 0x1964)
      v16 = v15;
    else
      v16 = 128;
    if (v16 >= v12)
    {
      Accelerate_AR_spotf2(a1, a2, a3, a4, a5);
    }
    else
    {
      v17 = ~(_DWORD)v10;
      v57 = a3 + 4 * v17;
      v58 = a2;
      v59 = v16;
      v18 = 0;
      if (v11)
      {
        v19 = 0;
        v20 = 4 * v10 + 4 * v17 + a3 + 4;
        v21 = (int)v10 * (uint64_t)(int)v16;
        v52 = 4 * v21;
        v54 = 4 * (v21 + v16);
        v22 = 1;
        v23 = (float *)v20;
        while (1)
        {
          v24 = v18 + *a2;
          v61 = v24;
          v62 = v19;
          if ((int)v16 < v24)
            v24 = v16;
          v60 = v24;
          Accelerate_AR_ssyrk("Upper", "Transpose", (unsigned int *)&v60, (unsigned int *)&v62, &c_b13, v20, (unsigned int *)a4, (float *)&c_b14, (uint64_t)v23, a4);
          Accelerate_AR_spotf2((uint64_t)"Upper", &v60, (uint64_t)v23, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v26 = v19 + v60 + 1;
          v27 = *a2;
          if (v26 <= *a2)
          {
            v61 = v19;
            v62 = v18 + v27 - v60;
            v51 = v57 + 4 * (v19 + (int)v10 * (v60 + v22)) + 4;
            Accelerate_AR_sgemm("Transpose", "No transpose", &v60, &v62, &v61, (uint64_t)&c_b13, v20, a4, v57 + 4 * (v26 * (int)v10 + 1), a4, (uint64_t)&c_b14, v51, SHIDWORD(v51), a4);
            v62 = v18 + *v58 - v60;
            a2 = v58;
            Accelerate_AR_strsm("Left", "Upper", "Transpose", "Non-unit", (unsigned int *)&v60, (unsigned int *)&v62, &c_b14, v23, v28, v29, v30, v31, v32, v33, v34, v35, a4, (char *)(v57 + 4 * (v19 + (int)v10 * (v60 + v22)) + 4), a4);
          }
          LODWORD(v16) = v59;
          v19 += v59;
          v18 -= v59;
          v23 = (float *)((char *)v23 + v54);
          v20 += v52;
          v22 += v59;
          if (v19 + 1 > v12)
            return 0;
        }
      }
      else
      {
        v37 = v10 + 1;
        v38 = a3 + 4 * v17 + 4 * ((int)v10 + 1);
        v55 = 4 * v16;
        v53 = v16 * (v10 + 1);
        v39 = 1;
        while (1)
        {
          v40 = v18 + *a2;
          v61 = v40;
          if ((int)v16 < v40)
            v40 = v16;
          v60 = v40;
          LODWORD(v19) = v39 - 1;
          v62 = v39 - 1;
          v41 = (float *)(v57 + 4 * v37);
          Accelerate_AR_ssyrk("Lower", "No transpose", (unsigned int *)&v60, (unsigned int *)&v62, &c_b13, v38, (unsigned int *)a4, (float *)&c_b14, (uint64_t)v41, a4);
          Accelerate_AR_spotf2((uint64_t)"Lower", &v60, (uint64_t)v41, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v42 = *a2;
          if (v39 + v60 <= *a2)
          {
            v61 = v39 - 1;
            v62 = v18 + v42 - v60;
            Accelerate_AR_sgemm("No transpose", "Transpose", &v62, &v60, &v61, (uint64_t)&c_b13, v57 + 4 * (v56 + v39 + v60), a4, v38, a4, (uint64_t)&c_b14, v57 + 4 * (v37 + v60), (unint64_t)(v57 + 4 * (v37 + v60)) >> 32, a4);
            v62 = v18 + *v58 - v60;
            a2 = v58;
            Accelerate_AR_strsm("Right", "Lower", "Transpose", "Non-unit", (unsigned int *)&v62, (unsigned int *)&v60, &c_b14, v41, v43, v44, v45, v46, v47, v48, v49, v50, a4, (char *)(v57 + 4 * (v37 + v60)), a4);
          }
          LODWORD(v16) = v59;
          v18 -= v59;
          v38 += v55;
          v37 += v53;
          v39 += v59;
          if (v39 > (int)v12)
            return 0;
        }
      }
      *a5 = v19 + v25;
    }
  }
  return 0;
}

uint64_t ssyrk_noPack_UT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t i;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  __int32 *v29;
  float32x2_t *v30;
  __int32 *v31;
  float32x2_t *v32;
  int32x2_t *v33;
  float32x2_t *v34;
  int32x2_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t *v51;
  __n128 *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  __int32 *v57;
  __int32 *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x2_t *v67;
  float32x4_t *v68;
  float32x2_t v69;
  float32x4_t *v70;
  __int32 *v71;
  float32x4_t v72;
  __int32 *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  uint64_t result;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  __int32 *v81;
  float *v82;
  __int32 *v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t *v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t *v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t *v108;
  __int32 *v109;
  __int32 *v110;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  uint64_t v114;
  unint64_t *v115;
  float32x2_t v116;
  float v117;

  a7.i64[1] = a8.i64[0];
  v20 = 0;
  v21 = 4 * a4;
  v22 = 4 * a6;
  v23 = a1 <= 3;
  for (i = a1 - 3; !v23; v20 += 4)
  {
    v25 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v22);
    if (v20)
    {
      v26 = 0;
      do
      {
        v27 = a2;
        v28 = (float32x2_t *)(a3 + v20 * v21);
        v29 = (__int32 *)(a3 + v26 * v21);
        v30 = (float32x2_t *)((char *)v28 + v21);
        v31 = &v29[(unint64_t)v21 / 4];
        v32 = (float32x2_t *)((char *)v28 + v21 + v21);
        v33 = (int32x2_t *)&v29[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
        v34 = (float32x2_t *)((char *)v32 + v21);
        v35 = (int32x2_t *)((char *)v33 + v21);
        v36 = (float32x4_t)veorq_s8(a8, a8);
        v37 = v36;
        v38 = v36;
        v39 = v36;
        if ((a2 & 1) == 0)
          goto LABEL_7;
        v16.i32[0] = *v29++;
        v17.i32[0] = *v31++;
        v18.i32[0] = v33->i32[0];
        v33 = (int32x2_t *)((char *)v33 + 4);
        v19.i32[0] = v35->i32[0];
        v35 = (int32x2_t *)((char *)v35 + 4);
        v40 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v41 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v42 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v43 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
        v19 = vtrn1_s32(v18, v19);
        *(int32x2_t *)&v16.u32[2] = v19;
        v36 = vmlaq_n_f32(v36, v16, v40);
        v37 = vmlaq_n_f32(v37, v16, v41);
        v38 = vmlaq_n_f32(v38, v16, v42);
        v39 = vmlaq_n_f32(v39, v16, v43);
        v27 = a2 - 1;
        if (a2 > 1)
        {
LABEL_7:
          do
          {
            v16.i64[0] = *(_QWORD *)v29;
            v29 += 2;
            v17.i64[0] = *(_QWORD *)v31;
            v31 += 2;
            v18 = *v33++;
            v19 = *v35++;
            v44 = *v28++;
            v45 = *v30++;
            v14 = *v32++;
            v15 = *v34++;
            *(int32x2_t *)&v16.u32[2] = v18;
            v17.u64[1] = (unint64_t)v19;
            v46 = (float32x4_t)vtrn1q_s32((int32x4_t)v16, v17);
            v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v16, v17);
            v36 = vmlaq_lane_f32(vmlaq_n_f32(v36, v46, v44.f32[0]), v47, v44, 1);
            v37 = vmlaq_lane_f32(vmlaq_n_f32(v37, v46, v45.f32[0]), v47, v45, 1);
            v38 = vmlaq_lane_f32(vmlaq_n_f32(v38, v46, v14.f32[0]), v47, v14, 1);
            v39 = vmlaq_lane_f32(vmlaq_n_f32(v39, v46, v15.f32[0]), v47, v15, 1);
            v23 = v27 <= 2;
            v27 -= 2;
          }
          while (!v23);
        }
        a12 = *v25;
        v48 = (float32x4_t *)((char *)v25 + v22);
        v50 = *v48;
        v49 = (float32x4_t *)((char *)v48 + v22);
        v12 = *v49;
        v51 = (float32x4_t *)((char *)v49 + v22);
        v13 = *v51;
        v52 = (__n128 *)((char *)v51 + v22 + -4 * v22);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v36, a7.f32[0]), a12, a7, 2);
        *v52 = (__n128)a8;
        v53 = (float32x4_t *)((char *)v52 + v22);
        *v53 = vmlaq_laneq_f32(vmulq_n_f32(v37, a7.f32[0]), v50, a7, 2);
        v54 = (float32x4_t *)((char *)v53 + v22);
        *v54 = vmlaq_laneq_f32(vmulq_n_f32(v38, a7.f32[0]), v12, a7, 2);
        v55 = (float32x4_t *)((char *)v54 + v22);
        *v55 = vmlaq_laneq_f32(vmulq_n_f32(v39, a7.f32[0]), v13, a7, 2);
        v25 = (float32x4_t *)((char *)v55 + v22 + -4 * v22 + 16);
        v26 += 4;
      }
      while (v26 < v20);
    }
    v56 = a2;
    v57 = (__int32 *)(a3 + v20 * v21);
    v58 = &v57[(unint64_t)v21 / 4];
    v59 = (float32x2_t *)&v57[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
    v60 = (float32x2_t *)((char *)v59 + v21);
    a8 = veorq_s8(a8, a8);
    v61 = *(float32x2_t *)a8.i8;
    v62 = (float32x4_t)a8;
    v63 = (float32x4_t)a8;
    if ((a2 & 1) == 0)
      goto LABEL_12;
    v12.i32[0] = *v57++;
    v13.i32[0] = *v58++;
    v14.i32[0] = v59->i32[0];
    v59 = (float32x2_t *)((char *)v59 + 4);
    v15.i32[0] = v60->i32[0];
    v60 = (float32x2_t *)((char *)v60 + 4);
    *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
    v19 = vtrn1_s32((int32x2_t)v14, (int32x2_t)v15);
    *(int32x2_t *)&v16.u32[2] = v19;
    *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v16.f32, v12.f32[0]);
    v61 = vmla_n_f32(v61, *(float32x2_t *)v16.f32, v13.f32[0]);
    v62 = vmlaq_n_f32(v62, v16, v14.f32[0]);
    v63 = vmlaq_n_f32(v63, v16, v15.f32[0]);
    v56 = a2 - 1;
    if (a2 > 1)
    {
LABEL_12:
      do
      {
        v64.i64[0] = *(_QWORD *)v57;
        v57 += 2;
        v65.i64[0] = *(_QWORD *)v58;
        v58 += 2;
        v14 = *v59++;
        v15 = *v60++;
        v64.u64[1] = (unint64_t)v14;
        v65.u64[1] = (unint64_t)v15;
        a12 = (float32x4_t)vtrn1q_s32(v64, v65);
        v66 = (float32x4_t)vtrn2q_s32(v64, v65);
        *(float32x2_t *)a8.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, *(float *)v64.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v64.i8, 1);
        v61 = vmla_lane_f32(vmla_n_f32(v61, *(float32x2_t *)a12.f32, *(float *)v65.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v65.i8, 1);
        v62 = vmlaq_lane_f32(vmlaq_n_f32(v62, a12, v14.f32[0]), v66, v14, 1);
        v63 = vmlaq_lane_f32(vmlaq_n_f32(v63, a12, v15.f32[0]), v66, v15, 1);
        v23 = v56 <= 2;
        v56 -= 2;
      }
      while (!v23);
    }
    a12.i32[0] = v25->i32[0];
    v67 = (float32x2_t *)((char *)v25 + v22);
    v69 = *v67;
    v68 = (float32x4_t *)((char *)v67 + v22);
    v12 = *v68;
    v70 = (float32x4_t *)((char *)v68 + v22);
    v13 = *v70;
    v71 = (__int32 *)((char *)v70 + v22 + -4 * v22);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v72 = vmlaq_laneq_f32(vmulq_n_f32(v62, a7.f32[0]), v12, a7, 2);
    v73 = &v71[(unint64_t)v22 / 2];
    *v71 = a8.i32[0];
    v74 = (float32x2_t *)&v71[(unint64_t)v22 / 4];
    *v74 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v69, a7, 2);
    v75 = (float32x2_t *)((char *)v74 + v22);
    *v75 = *(float32x2_t *)v72.f32;
    v73[2] = v72.i32[2];
    *(float32x4_t *)&v75->f32[(unint64_t)v22 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v63, a7.f32[0]), v13, a7, 2);
    v23 = i <= 4;
    i -= 4;
  }
  v23 = i <= -3;
  result = i + 3;
  if (!v23)
  {
    if (result >= 2)
    {
      v77 = (unint64_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v22);
      if (v20)
      {
        v78 = 0;
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + v20 * v21);
          v81 = (__int32 *)(a3 + v78 * v21);
          v82 = &v80[(unint64_t)v21 / 4];
          v83 = &v81[(unint64_t)v21 / 4];
          v84 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v85 = v84;
          if ((a2 & 1) == 0)
            goto LABEL_22;
          v16.i32[0] = *v81++;
          v17.i32[0] = *v83++;
          v86 = *v80++;
          v87 = *v82++;
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v84 = vmla_n_f32(v84, *(float32x2_t *)v16.f32, v86);
          v85 = vmla_n_f32(v85, *(float32x2_t *)v16.f32, v87);
          v79 = a2 - 1;
          if (a2 > 1)
          {
LABEL_22:
            do
            {
              v16.i64[0] = *(_QWORD *)v81;
              v81 += 2;
              v17.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              v12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              v13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              v88 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v89 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v84 = vmla_lane_f32(vmla_n_f32(v84, v88, v12.f32[0]), v89, *(float32x2_t *)v12.f32, 1);
              v85 = vmla_lane_f32(vmla_n_f32(v85, v88, v13.f32[0]), v89, *(float32x2_t *)v13.f32, 1);
              v23 = v79 <= 2;
              v79 -= 2;
            }
            while (!v23);
          }
          a12.i64[0] = *v77;
          v90 = (float32x2_t *)((char *)v77 + v22);
          v91 = *v90;
          v92 = (float32x2_t *)((char *)v90 + v22 + -2 * v22);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v84, a7.f32[0]), *(float32x2_t *)a12.f32, a7, 2);
          *v92 = *(float32x2_t *)a8.i8;
          v93 = (float32x2_t *)((char *)v92 + v22);
          *v93 = vmla_laneq_f32(vmul_n_f32(v85, a7.f32[0]), v91, a7, 2);
          v77 = (unint64_t *)((char *)&v93[1] + v22 + -2 * v22);
          v78 += 2;
        }
        while (v78 < v20);
      }
      v94 = a2;
      v95 = (float32x2_t *)(a3 + v20 * v21);
      v96 = (float32x2_t *)((char *)v95 + v21);
      v97 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v98 = v97;
      if ((a2 & 1) == 0)
        goto LABEL_27;
      v12.i32[0] = v95->i32[0];
      v95 = (float32x2_t *)((char *)v95 + 4);
      v13.i32[0] = v96->i32[0];
      v96 = (float32x2_t *)((char *)v96 + 4);
      *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
      v97 = vmla_n_f32(v97, *(float32x2_t *)v16.f32, v12.f32[0]);
      v98 = vmla_n_f32(v98, *(float32x2_t *)v16.f32, v13.f32[0]);
      v94 = a2 - 1;
      if (a2 > 1)
      {
LABEL_27:
        do
        {
          v99 = *v95++;
          v100 = *v96++;
          *(int32x2_t *)a12.f32 = vtrn1_s32((int32x2_t)v99, (int32x2_t)v100);
          v101 = (float32x2_t)vtrn2_s32((int32x2_t)v99, (int32x2_t)v100);
          v97 = vmla_lane_f32(vmla_n_f32(v97, *(float32x2_t *)a12.f32, v99.f32[0]), v101, v99, 1);
          v98 = vmla_lane_f32(vmla_n_f32(v98, *(float32x2_t *)a12.f32, v100.f32[0]), v101, v100, 1);
          v23 = v94 <= 2;
          v94 -= 2;
        }
        while (!v23);
      }
      a12.i32[0] = *(_DWORD *)v77;
      v102 = (float32x2_t *)((char *)v77 + v22);
      v103 = *v102;
      v104 = (float32x2_t *)((char *)v102 + v22 + -2 * v22);
      v97.f32[0] = v97.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v97, *(float32x2_t *)a12.f32, a7, 2);
      v104->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v104 + v22) = vmla_laneq_f32(vmul_n_f32(v98, a7.f32[0]), v103, a7, 2);
      result -= 2;
      v20 += 2;
    }
    if (result >= 1)
    {
      v105 = (float32x2_t *)a5;
      v106 = 0;
      if (v20 >= 1)
      {
        do
        {
          v107 = a2;
          v108 = (float32x2_t *)(a3 + v20 * v21);
          v109 = (__int32 *)(a3 + v106 * v21);
          v110 = &v109[(unint64_t)v21 / 4];
          v111 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          if ((a2 & 1) == 0)
            goto LABEL_34;
          v16.i32[0] = *v109++;
          v17.i32[0] = *v110++;
          v112 = v108->f32[0];
          v108 = (float32x2_t *)((char *)v108 + 4);
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v111 = vmla_n_f32(v111, *(float32x2_t *)v16.f32, v112);
          v107 = a2 - 1;
          if (a2 > 1)
          {
LABEL_34:
            do
            {
              v16.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v17.i64[0] = *(_QWORD *)v110;
              v110 += 2;
              v113 = *v108++;
              v111 = vmla_lane_f32(vmla_n_f32(v111, (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113.f32[0]), (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113, 1);
              v23 = v107 <= 2;
              v107 -= 2;
            }
            while (!v23);
          }
          *(float32x2_t *)a12.f32 = *v105;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v111, a7.f32[0]), *v105, a7, 2);
          *v105++ = *(float32x2_t *)a8.i8;
          v106 += 2;
        }
        while (v106 < v20 - 1);
      }
      v114 = a2;
      v115 = (unint64_t *)(a3 + v20 * v21);
      v116 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v117 = *(float *)v115,
            v115 = (unint64_t *)((char *)v115 + 4),
            v116.f32[0] = v117 * v117,
            v114 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i64[0] = *v115++;
          v116 = vmla_f32(v116, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v23 = v114 <= 2;
          v114 -= 2;
        }
        while (!v23);
        v116.f32[0] = vaddv_f32(v116);
      }
      a12.i32[0] = v105->i32[0];
      v116.f32[0] = v116.f32[0] * a7.f32[0];
      v105->i32[0] = vmla_laneq_f32(v116, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void ssyrk_Pack_Upper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__int128 a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,int a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,__int128 a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int128 a58,__int128 a59,__int128 a60,__int128 a61,__int128 a62,__int128 a63)
{
  __int128 a64;
  __int128 a65;
  char a66;
  int v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(float);
  void (*v79)(__n128);
  float32x4_t *v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float *(*v96)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float *(*v97)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  float32x4_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float32x2_t v118;
  float32x2_t *v119;
  __n128 *v120;
  float32x4_t v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float32x2_t v127;
  float32x2_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  float32x4_t *v132;
  float32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const float *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(float);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*vars0)(__n128);
  uint64_t vars8;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x2_t v183;
  float *(*v184)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  float *(*v193)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  float32x4_t *v199;
  uint64_t v200;
  uint64_t v201;

  v66 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16);
  v201 = v70;
  v194 = v71;
  v73 = v72;
  v75 = v74;
  v76 = v67;
  STACK[0x102A8] = *MEMORY[0x1E0C80C00];
  if (v66 == 111)
    v77 = 1;
  else
    v77 = v68;
  v78 = (void (*)(float))sgePack_B_NoTran;
  if (v66 == 111)
    v78 = (void (*)(float))sgePack_B_Tran;
  v161 = v78;
  if (v66 == 111)
    v79 = (void (*)(__n128))sgePack_A_NoTran;
  else
    v79 = (void (*)(__n128))sgePack_A_Tran;
  v198 = v69;
  if (v67 < 1)
  {
    v199 = (float32x4_t *)&a66;
    v81 = &STACK[0x10240];
  }
  else
  {
    v80 = (float32x4_t *)malloc_type_malloc((v67 << 9) + 65632, 0x100004052888210uLL);
    *(_QWORD *)&v69 = v198;
    v199 = v80;
    v81 = (unint64_t *)&v80[4096];
  }
  v171 = (uint64_t)(v81 + 8);
  if (v73 >= 1)
  {
    v164 = 0;
    v82 = 0;
    v192 = v76 - 3;
    v183 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&v69, 0).u64[0];
    if (v76 <= 0)
      v83 = -(-v76 & 3);
    else
      v83 = v76 & 3;
    v172 = (v201 << 9) + 512;
    v173 = v83;
    v189 = 16 * v201;
    v187 = v194 + 12 * v201;
    v170 = 4 * v201;
    v182 = v194 + 16;
    v84 = 128;
    v186 = v194 + 8 * v201;
    v185 = v194 + 4 * v201;
    v160 = v73;
    vars8 = v77;
    v169 = v76;
    vars0 = v79;
    while (1)
    {
      v85 = v73 >= v84 ? v84 : v73;
      v162 = v82 + 128;
      v163 = v84;
      v86 = v82 + 128 <= v73 ? 128 : v73 - v82;
      v200 = v86;
      v161(v75);
      v87 = (__n128)v198;
      if (v76 >= 1)
        break;
LABEL_134:
      v84 = v163 + 128;
      v164 -= 128;
      v82 = v162;
      v73 = v160;
      if (v162 >= v160)
        goto LABEL_135;
    }
    v181 = 0;
    v88 = 0;
    v89 = 0;
    v174 = (v85 + v164) << 9;
    v190 = 16 * (v85 + v164);
    v90 = *(float *)&v198 != 0.0;
    if (*(float *)&v198 == 1.0 || v82 != 0)
      v90 = 0;
    v191 = v90;
    v92 = v200 & 3;
    if (v200 <= 0)
      v92 = -(-v200 & 3);
    v165 = 4 - v92;
    v166 = v92;
    v178 = v194;
    v93 = 128;
    v180 = v194;
    v179 = v171;
    v193 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
    v184 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
    while (1)
    {
      v176 = v93;
      v177 = v88;
      if (v76 >= v93)
        v94 = v93;
      else
        v94 = v76;
      v188 = v94 + v88;
      v175 = v89 + 128;
      if (v89 + 128 <= v76)
        v95 = 128;
      else
        v95 = v76 - v89;
      v196 = v194 + 4 * v89;
      v197 = v89;
      v96 = v184;
      if ((v95 & 7) != 0)
        v96 = sgebpScaleUnalignedC_8M4N;
      v184 = v96;
      v97 = v193;
      if ((v95 & 7) != 0)
        v97 = sgebpUnalignedC_8M4N;
      v193 = v97;
      v195 = v95;
      v79(v87);
      v98 = v197;
      v99 = *(float *)&v198;
      v100 = v197;
      if (v197 < v192)
        break;
LABEL_92:
      if (v173)
      {
        if (v100 - v98 >= v195)
          v139 = v195;
        else
          v139 = v100 - v98;
        v140 = v195 - v139;
        if (v195 - v139 >= 3)
          v141 = 3;
        else
          v141 = v195 - v139;
        if (v140 >= 1)
        {
          v87 = 0uLL;
          a62 = 0u;
          a63 = 0u;
          a60 = 0u;
          a61 = 0u;
          a58 = 0u;
          a59 = 0u;
        }
        v142 = v196 + 4 * v100 * v201;
        v143 = (const float *)(v171 + 4 * v100 * v200);
        if (v191)
        {
          if (v139)
            sgebpScale_8M1N(v199, (const float *)(v171 + 4 * v100 * v200), v142, v201, v139, v173, v200, v99);
          if (v140 >= 1)
          {
            v144 = v166;
            if (v166)
            {
              if (v139 <= 0)
                v145 = -(-v139 & 7);
              else
                v145 = v139 & 7;
              v144 = v145 * v165;
            }
            sgebp_8M1N((float32x4_t *)((char *)v199 + 4 * v139 * v200 + 4 * v144), v143, (uint64_t)&a58, 8, v141, v173, v200);
            if (v173 >= 1)
            {
              v146 = 0;
              v147 = v100 + v177;
              if (v100 + v177 >= v188)
                v147 = v188;
              v148 = v178 + v170 * v100 + 4 * v147;
              v149 = &a58;
              v150 = 1;
              do
              {
                v151 = 0;
                do
                {
                  v87.n128_f32[0] = *((float *)v149 + v151) + (float)(*(float *)(v148 + 4 * v151) * *(float *)&v198);
                  *(_DWORD *)(v148 + 4 * v151++) = v87.n128_u32[0];
                }
                while (v150 != v151);
                ++v146;
                ++v150;
                v149 += 2;
                v148 += v170;
              }
              while (v146 != v173);
            }
          }
        }
        else
        {
          if (v139)
            sgebp_8M1N(v199, (const float *)(v171 + 4 * v100 * v200), v142, v201, v139, v173, v200);
          if (v140 >= 1)
          {
            v152 = v166;
            if (v166)
            {
              if (v139 <= 0)
                v153 = -(-v139 & 7);
              else
                v153 = v139 & 7;
              v152 = v153 * v165;
            }
            sgebp_8M1N((float32x4_t *)((char *)v199 + 4 * v139 * v200 + 4 * v152), v143, (uint64_t)&a58, 8, v141, v173, v200);
            if (v173 >= 1)
            {
              v154 = 0;
              v155 = v100 + v177;
              if (v100 + v177 >= v188)
                v155 = v188;
              v156 = v178 + v170 * v100 + 4 * v155;
              v157 = &a58;
              v158 = 1;
              do
              {
                v159 = 0;
                do
                {
                  v87.n128_f32[0] = *(float *)(v156 + 4 * v159) + *((float *)v157 + v159);
                  *(_DWORD *)(v156 + 4 * v159++) = v87.n128_u32[0];
                }
                while (v158 != v159);
                ++v154;
                ++v158;
                v157 += 2;
                v156 += v170;
              }
              while (v154 != v173);
            }
          }
        }
      }
      v179 += v174;
      v180 += v172;
      v93 = v176 + 128;
      v88 = v177 - 128;
      v181 += v172;
      v178 += 512;
      v89 = v175;
      if (v175 >= v76)
        goto LABEL_134;
    }
    v101 = 0;
    v103 = v180;
    v102 = v181;
    v104 = (_OWORD *)v179;
    v105 = v197;
    while (1)
    {
      if (v101 <= 0)
        v106 = -(-v101 & 7);
      else
        v106 = v101 & 7;
      v107 = v101 - v106;
      if (v101 - v106 >= v195)
        v108 = v195;
      else
        v108 = v101 - v106;
      v109 = v195 - v108;
      if (v195 - v108 >= 1)
      {
        v87 = 0uLL;
        a64 = 0u;
        a65 = 0u;
        a62 = 0u;
        a63 = 0u;
        a60 = 0u;
        a61 = 0u;
        a58 = 0u;
        a59 = 0u;
      }
      v110 = v98 + v101;
      v111 = v196 + 4 * v105 * v201;
      v112 = (float32x4_t *)(v194 + v102);
      if (v191)
      {
        if (v108)
        {
          v184(v199, (uint64_t)v104, v112, v201, v108, v200, v99);
          v99 = *(float *)&v198;
        }
        if (v109 < 1)
          goto LABEL_90;
        if (v109 >= 8)
          v113 = 8;
        else
          v113 = v195 - v108;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v193)(&v199->f32[v108 * v200], v104, &a58, 8, v113);
        v114 = v111 + 4 * v108;
        if (v188 >= v107)
          v115 = v107;
        else
          v115 = v188;
        v116 = 4 * v115;
        if ((v110 & 4) != 0)
        {
          v99 = *(float *)&v198;
          *(float32x4_t *)(v103 + v116) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v103 + v116), *(float *)&v198), (float32x4_t)a58);
          if (v188 >= v107)
            v129 = v107;
          else
            v129 = v188;
          *(float *)(v182 + 4 * v129 + v102) = *(float *)&a59
                                             + (float)(*(float *)(v182 + 4 * v129 + v102) * *(float *)&v198);
          v130 = v185 + 4 * v129 + v102;
          *(float32x4_t *)v130 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v130, *(float *)&v198), (float32x4_t)a60);
          *(float32x2_t *)(v130 + 16) = vadd_f32(vmul_f32(v183, *(float32x2_t *)(v130 + 16)), *(float32x2_t *)&a61);
          v131 = v186 + 4 * v129 + v102;
          *(float32x4_t *)v131 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v131, *(float *)&v198), (float32x4_t)a62);
          *(float32x2_t *)(v131 + 16) = vadd_f32(vmul_f32(v183, *(float32x2_t *)(v131 + 16)), *(float32x2_t *)&a63);
          *(float *)(v131 + 24) = *((float *)&a63 + 2) + (float)(*(float *)(v131 + 24) * *(float *)&v198);
          v132 = (float32x4_t *)(v187 + v102 + 4 * v129);
          v133 = v132[1];
          *v132 = vaddq_f32(vmulq_n_f32(*v132, *(float *)&v198), (float32x4_t)a64);
          v120 = (__n128 *)(v114 + 12 * v201 + 16);
          v121 = vmulq_n_f32(v133, *(float *)&v198);
          v122 = &a65;
        }
        else
        {
          v99 = *(float *)&v198;
          *(float *)(v103 + v116) = *(float *)&a58 + (float)(*(float *)(v103 + v116) * *(float *)&v198);
          if (v188 >= v107)
            v117 = v107;
          else
            v117 = v188;
          v118 = (float32x2_t)a62;
          *(float32x2_t *)(v185 + 4 * v117 + v102) = vadd_f32(vmul_f32(v183, *(float32x2_t *)(v185 + 4 * v117 + v102)), *(float32x2_t *)&a60);
          v119 = (float32x2_t *)(v186 + 4 * v117 + v102);
          *v119 = vadd_f32(vmul_f32(v183, *v119), v118);
          v119[1].f32[0] = *((float *)&a62 + 2) + (float)(v119[1].f32[0] * *(float *)&v198);
          v120 = (__n128 *)(v114 + 12 * v201);
          v121 = vmulq_n_f32(*(float32x4_t *)(v187 + v102 + 4 * v117), *(float *)&v198);
          v122 = &a64;
        }
      }
      else
      {
        if (v108)
        {
          v193(v199, (uint64_t)v104, v112, v201, v108, v200);
          v99 = *(float *)&v198;
        }
        if (v109 < 1)
          goto LABEL_90;
        if (v109 >= 8)
          v123 = 8;
        else
          v123 = v195 - v108;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v193)(&v199->f32[v108 * v200], v104, &a58, 8, v123);
        v124 = v188;
        if (v188 >= v107)
          v125 = v107;
        else
          v125 = v188;
        v126 = 4 * v125;
        if ((v110 & 4) != 0)
        {
          *(float32x4_t *)(v103 + v126) = vaddq_f32(*(float32x4_t *)(v103 + v126), (float32x4_t)a58);
          if (v188 >= v107)
            v134 = v107;
          else
            v134 = v188;
          *(float *)(v182 + 4 * v134 + v102) = *(float *)(v182 + 4 * v134 + v102) + *(float *)&a59;
          v135 = v185 + 4 * v134 + v102;
          *(float32x4_t *)v135 = vaddq_f32(*(float32x4_t *)v135, (float32x4_t)a60);
          *(float32x2_t *)(v135 + 16) = vadd_f32(*(float32x2_t *)(v135 + 16), *(float32x2_t *)&a61);
          v136 = v186 + 4 * v134 + v102;
          *(float32x4_t *)v136 = vaddq_f32(*(float32x4_t *)v136, (float32x4_t)a62);
          *(float32x2_t *)(v136 + 16) = vadd_f32(*(float32x2_t *)(v136 + 16), *(float32x2_t *)&a63);
          *(float *)(v136 + 24) = *(float *)(v136 + 24) + *((float *)&a63 + 2);
          v137 = v187 + v102 + 4 * v134;
          *(float32x4_t *)v137 = vaddq_f32(*(float32x4_t *)v137, (float32x4_t)a64);
          v138 = *(float32x4_t *)(v137 + 16);
          v120 = (__n128 *)(v137 + 16);
          v121 = v138;
          v122 = &a65;
        }
        else
        {
          *(float *)(v103 + v126) = *(float *)(v103 + v126) + *(float *)&a58;
          if (v188 >= v107)
            v124 = v107;
          v127 = (float32x2_t)a62;
          *(float32x2_t *)(v185 + 4 * v124 + v102) = vadd_f32(*(float32x2_t *)(v185 + 4 * v124 + v102), *(float32x2_t *)&a60);
          v128 = (float32x2_t *)(v186 + 4 * v124 + v102);
          *v128 = vadd_f32(*v128, v127);
          v128[1].f32[0] = v128[1].f32[0] + *((float *)&a62 + 2);
          v120 = (__n128 *)(v111 + 4 * v108 + 12 * v201);
          v121 = *(float32x4_t *)(v187 + v102 + 4 * v124);
          v122 = &a64;
        }
        v99 = *(float *)&v198;
      }
      v87 = (__n128)vaddq_f32(v121, *(float32x4_t *)v122);
      *v120 = v87;
LABEL_90:
      v105 += 4;
      v101 += 4;
      v98 = v197;
      v100 = v197 + v101;
      v104 = (_OWORD *)((char *)v104 + v190);
      v103 += v189;
      v102 += v189;
      if (v197 + v101 >= v192)
      {
        v76 = v169;
        v79 = vars0;
        goto LABEL_92;
      }
    }
  }
LABEL_135:
  if (v76 >= 1)
    free(v199);
}

void sgeSetZero(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 4 * a1;
    v7 = 4 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sgeScale(int __N, uint64_t a2, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 4 * a4;
    do
    {
      cblas_sscal(__N, a5, __X, 1);
      __X = (float *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void strScale(int a1, uint64_t __N, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = __N;
  if (a1 == 121)
  {
    if (__N >= 1)
    {
      v8 = 0;
      v9 = 4 * a4;
      do
      {
        cblas_sscal(++v8, a5, __X, 1);
        __X = (float *)((char *)__X + v9);
      }
      while (v7 != v8);
    }
  }
  else if (__N >= 1)
  {
    v10 = 4 * a4 + 4;
    do
    {
      cblas_sscal(v7, a5, __X, 1);
      __X = (float *)((char *)__X + v10);
      --v7;
    }
    while (v7);
  }
}

void ssyReflect(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  const float *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (float *)(a3 + 4);
      v8 = 1;
      v9 = (const float *)(a3 + 4 * __incY);
      do
      {
        cblas_scopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_scopy(--v6, (const float *)(v5 + 4), 1, (float *)(v5 + 4 * __incY), __incY);
      v5 += 4 * __incY + 4;
    }
    while (v6 != 1);
  }
}

uint64_t sgePack_A_Tran_Aligned(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t *v22;
  BOOL v23;
  int32x4_t v24;
  int32x4_t v25;

  v5 = (uint64_t *)((char *)a3 + 4 * a4);
  v6 = &a3[a4];
  v7 = &v5[a4];
  v8 = &v6[a4];
  v9 = &v7[a4];
  v10 = &v8[a4];
  v11 = &v9[a4];
  v12 = 32 * a4 - 4 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        v14.i64[0] = *a3++;
        v15.i64[0] = *v5++;
        v16 = *v6++;
        v17 = *v7++;
        v18.i64[0] = *v8++;
        v19.i64[0] = *v9++;
        v20 = *v10++;
        v21 = *v11++;
        v14.i64[1] = v16;
        v15.i64[1] = v17;
        v18.i64[1] = v20;
        v19.i64[1] = v21;
        *a5 = vtrn1q_s32(v14, v15);
        a5[1] = vtrn1q_s32(v18, v19);
        v22 = a5 + 2;
        *v22 = vtrn2q_s32(v14, v15);
        v22[1] = vtrn2q_s32(v18, v19);
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      v24.i32[0] = *(_DWORD *)a3;
      a3 = (uint64_t *)((char *)a3 + 4);
      v24.i32[1] = *(_DWORD *)v5;
      v5 = (uint64_t *)((char *)v5 + 4);
      v24.i32[2] = *(_DWORD *)v6;
      v6 = (uint64_t *)((char *)v6 + 4);
      v24.i32[3] = *(_DWORD *)v7;
      v7 = (uint64_t *)((char *)v7 + 4);
      v25.i32[0] = *(_DWORD *)v8;
      v8 = (uint64_t *)((char *)v8 + 4);
      v25.i32[1] = *(_DWORD *)v9;
      v9 = (uint64_t *)((char *)v9 + 4);
      v25.i32[2] = *(_DWORD *)v10;
      v10 = (uint64_t *)((char *)v10 + 4);
      v25.i32[3] = *(_DWORD *)v11;
      v11 = (uint64_t *)((char *)v11 + 4);
      *a5 = v24;
      a5[1] = v25;
      a5 += 2;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (uint64_t *)((char *)a3 + v12);
    v5 = (uint64_t *)((char *)v5 + v12);
    v6 = (uint64_t *)((char *)v6 + v12);
    v7 = (uint64_t *)((char *)v7 + v12);
    v8 = (uint64_t *)((char *)v8 + v12);
    v9 = (uint64_t *)((char *)v9 + v12);
    v10 = (uint64_t *)((char *)v10 + v12);
    v11 = (uint64_t *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

uint64_t strmm_noPack_LLNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x2_t *v28;
  int64x2_t v29;
  float32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  BOOL v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  float v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  __int32 *v78;
  float32x2_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  uint64_t j;
  int32x4_t *v87;
  int32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t *v95;
  int32x4_t v96;
  float32x2_t *v97;
  int32x4_t v98;
  float32x4_t *v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t *v116;
  float32x2_t *v117;
  __int32 *v118;
  __int32 *v119;
  float32x2_t v120;
  float v121;
  float32_t v122;
  __int32 *v123;
  float32x2_t v124;
  float32_t v125;
  float32_t v126;
  uint64_t k;
  float32x4_t *v128;
  float32x4_t *v129;
  uint64_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t *v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t *v147;
  __int32 *v148;
  __int32 *v149;
  float32x2_t v150;
  float v151;
  __int32 *v152;
  float32x2_t v153;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v30 = vmulq_n_f32(v49, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v20 = *v17;
      v19 = (float32x4_t *)((char *)v17 + v8);
      v21 = *v19;
      v22 = (float32x2_t *)&v19->u32[(unint64_t)v8 / 4 + 2];
      v23 = *v12;
      v24 = (float32x2_t *)(a5 + v9 * v7);
      v25 = *v13;
      v26 = (float32x2_t *)((char *)v13 - 4 * i);
      v27 = *v14;
      v28 = (float32x2_t *)((char *)v14 - 4 * i);
      v29 = *v15;
      v30 = (float32x4_t *)((char *)v15 - 4 * i);
      v31 = (int32x4_t)vtrn1q_s64(v23, v27);
      v32 = (int32x4_t)vtrn1q_s64(v25, v29);
      v33 = (int32x4_t)vtrn2q_s64(v23, v27);
      v34 = (int32x4_t)vtrn2q_s64(v25, v29);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (float32x4_t)vtrn2q_s32(v31, v32);
      v37 = (float32x4_t)vtrn1q_s32(v33, v34);
      v38 = (int64x2_t)vmulq_n_f32(v35, v20.f32[0]);
      v39 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v20.f32, 1), vmulq_lane_f32(v36, *(float32x2_t *)v21.f32, 1));
      v40 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v35, v20, 2), v37, COERCE_FLOAT(*v22)), vmulq_laneq_f32(v36, v21, 2));
      v41 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v35, v20, 3), v37, *v22, 1), vmulq_laneq_f32(v36, v21, 3)), vmulq_n_f32((float32x4_t)vtrn2q_s32(v33, v34), v22->f32[(unint64_t)v8 / 4 + 1]));
      v42 = (int32x4_t)vtrn1q_s64(v38, v40);
      v43 = (int32x4_t)vtrn1q_s64(v39, v41);
      v44 = (int32x4_t)vtrn2q_s64(v38, v40);
      v45 = (int32x4_t)vtrn2q_s64(v39, v41);
      v46 = (float32x4_t)vtrn1q_s32(v42, v43);
      v47 = (float32x4_t)vtrn2q_s32(v42, v43);
      v48 = (float32x4_t)vtrn1q_s32(v44, v45);
      v49 = (float32x4_t)vtrn2q_s32(v44, v45);
      if ((i & 1) != 0)
      {
        v50 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v51 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v52 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v53 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v54 = v30->f32[0];
        v30 = (float32x4_t *)((char *)v30 + 4);
        v46 = vmlaq_n_f32(v46, v50, v51);
        v47 = vmlaq_n_f32(v47, v50, v52);
        v48 = vmlaq_n_f32(v48, v50, v53);
        v49 = vmlaq_n_f32(v49, v50, v54);
        v18 = i - 1;
      }
      if (v18)
      {
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v60 = *v16;
          v59 = (float32x4_t *)((char *)v16 + v8);
          v61 = *v59;
          v16 = (float32x4_t *)((char *)v59 + v8);
          v62 = *v24++;
          v63 = *v26++;
          v64 = *v28++;
          v65 = *(float32x2_t *)v30->f32;
          v30 = (float32x4_t *)((char *)v30 + 8);
          v46 = vmlaq_n_f32(v46, v60, v62.f32[0]);
          v47 = vmlaq_n_f32(v47, v60, v63.f32[0]);
          v48 = vmlaq_n_f32(v48, v60, v64.f32[0]);
          v49 = vmlaq_n_f32(v49, v60, v65.f32[0]);
          v55 = vmlaq_lane_f32(v55, v61, v62, 1);
          v56 = vmlaq_lane_f32(v56, v61, v63, 1);
          v57 = vmlaq_lane_f32(v57, v61, v64, 1);
          v58 = vmlaq_lane_f32(v58, v61, v65, 1);
          v66 = v18 <= 2;
          v18 -= 2;
        }
        while (!v66);
        v46 = vaddq_f32(v46, v55);
        v47 = vaddq_f32(v47, v56);
        v48 = vaddq_f32(v48, v57);
        v49 = vaddq_f32(v49, v58);
      }
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v46, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v47, a7);
      *(float32x4_t *)v28->f32 = vmulq_n_f32(v48, a7);
    }
    if (i)
    {
      v67 = (float32x2_t *)(a5 + v9 * v7);
      v68 = (float32x2_t *)((char *)v67 + v7);
      v69 = &v67[(unint64_t)v7 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v7 / 4] + v7);
      v71 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v8 / 4];
          v73.i32[1] = *v72;
          v74 = *(float *)&v72[(unint64_t)v8 / 4];
          v71 = &v72[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v75 = (float)(vaddv_f32(vmul_f32(v73, *v68)) + (float)(v68[1].f32[0] * v74)) * a7;
          v76 = (float)(vaddv_f32(vmul_f32(v73, *v69)) + (float)(v69[1].f32[0] * v74)) * a7;
          v77 = (float)(vaddv_f32(vmul_f32(v73, *v70)) + (float)(v70[1].f32[0] * v74)) * a7;
          v67[1].f32[0] = (float)(vaddv_f32(vmul_f32(v73, *v67)) + (float)(v67[1].f32[0] * v74)) * a7;
          v68[1].f32[0] = v75;
          v69[1].f32[0] = v76;
          v70[1].f32[0] = v77;
        }
        v79.i32[0] = *v71;
        v78 = &v71[(unint64_t)v8 / 4];
        v79.i32[1] = *v78;
        v71 = &v78[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
        v80 = vaddv_f32(vmul_f32(v79, *v68)) * a7;
        v81 = vaddv_f32(vmul_f32(v79, *v69)) * a7;
        v82 = vaddv_f32(vmul_f32(v79, *v70)) * a7;
        v67->f32[1] = vaddv_f32(vmul_f32(v79, *v67)) * a7;
        v68->f32[1] = v80;
        v69->f32[1] = v81;
        v70->f32[1] = v82;
      }
      v83 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v84 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v85 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v83;
      v69->f32[0] = v84;
      v70->f32[0] = v85;
    }
    v9 += 4;
    v66 = v10 <= 4;
    v10 -= 4;
  }
  while (!v66);
  v66 = v10 <= -3;
  a2 = v10 + 3;
  if (!v66)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v99 = vmulq_n_f32(v105, a7))
      {
        j -= 4;
        v87 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v88 = (int32x4_t *)((char *)v87 + v7);
        v89 = (float32x4_t *)(a3 + 4 * j);
        v90 = (float32x4_t *)((char *)v89 + j * v8);
        v91 = j;
        v93 = *v90;
        v92 = (float32x4_t *)((char *)v90 + v8);
        v94 = *v92;
        v95 = (float32x2_t *)&v92->u32[(unint64_t)v8 / 4 + 2];
        v96 = *v87;
        v97 = (float32x2_t *)(a5 + v9 * v7);
        v98 = *v88;
        v99 = (float32x4_t *)((char *)v88 - 4 * j);
        v100 = vtrn1q_s32(v96, v98);
        v101 = vtrn2q_s32(v96, v98);
        *(float32x2_t *)v102.i8 = vmul_n_f32(*(float32x2_t *)v100.i8, v93.f32[0]);
        *(float32x2_t *)v103.i8 = vadd_f32(vmul_lane_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v93.f32, 1), vmul_lane_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v94.f32, 1));
        v102.u64[1] = (unint64_t)vadd_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 2), (float32x2_t)v100.u64[1], COERCE_FLOAT(*v95)), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 2));
        v103.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 3), (float32x2_t)v100.u64[1], *v95, 1), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 3)), vmul_n_f32((float32x2_t)v101.u64[1], v95->f32[(unint64_t)v8 / 4 + 1]));
        v104 = (float32x4_t)vtrn1q_s32(v102, v103);
        v105 = (float32x4_t)vtrn2q_s32(v102, v103);
        if ((j & 1) != 0)
        {
          v106 = *v89;
          v89 = (float32x4_t *)((char *)v89 + v8);
          v107 = v97->f32[0];
          v97 = (float32x2_t *)((char *)v97 + 4);
          v108 = v99->f32[0];
          v99 = (float32x4_t *)((char *)v99 + 4);
          v104 = vmlaq_n_f32(v104, v106, v107);
          v105 = vmlaq_n_f32(v105, v106, v108);
          v91 = j - 1;
        }
        if (v91)
        {
          v109 = 0uLL;
          v110 = 0uLL;
          do
          {
            v112 = *v89;
            v111 = (float32x4_t *)((char *)v89 + v8);
            v113 = *v111;
            v89 = (float32x4_t *)((char *)v111 + v8);
            v114 = *v97++;
            v115 = *(float32x2_t *)v99->f32;
            v99 = (float32x4_t *)((char *)v99 + 8);
            v104 = vmlaq_n_f32(v104, v112, v114.f32[0]);
            v105 = vmlaq_n_f32(v105, v112, v115.f32[0]);
            v109 = vmlaq_lane_f32(v109, v113, v114, 1);
            v110 = vmlaq_lane_f32(v110, v113, v115, 1);
            v66 = v91 <= 2;
            v91 -= 2;
          }
          while (!v66);
          v104 = vaddq_f32(v104, v109);
          v105 = vaddq_f32(v105, v110);
        }
        *(float32x4_t *)v97->f32 = vmulq_n_f32(v104, a7);
      }
      if (j)
      {
        v116 = (float32x2_t *)(a5 + v9 * v7);
        v117 = (float32x2_t *)((char *)v116 + v7);
        v118 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v120.i32[0] = *v118;
            v119 = &v118[(unint64_t)v8 / 4];
            v120.i32[1] = *v119;
            v121 = *(float *)&v119[(unint64_t)v8 / 4];
            v118 = &v119[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v122 = (float)(vaddv_f32(vmul_f32(v120, *v117)) + (float)(v117[1].f32[0] * v121)) * a7;
            v116[1].f32[0] = (float)(vaddv_f32(vmul_f32(v120, *v116)) + (float)(v116[1].f32[0] * v121)) * a7;
            v117[1].f32[0] = v122;
          }
          v124.i32[0] = *v118;
          v123 = &v118[(unint64_t)v8 / 4];
          v124.i32[1] = *v123;
          v118 = &v123[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v125 = vaddv_f32(vmul_f32(v124, *v117)) * a7;
          v116->f32[1] = vaddv_f32(vmul_f32(v124, *v116)) * a7;
          v117->f32[1] = v125;
        }
        v126 = (float)(*(float *)v118 * v117->f32[0]) * a7;
        v116->f32[0] = (float)(*(float *)v118 * v116->f32[0]) * a7;
        v117->f32[0] = v126;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v137 = vmulq_n_f32(v139, a7))
      {
        k -= 4;
        v128 = (float32x4_t *)(a3 + 4 * k);
        v129 = (float32x4_t *)((char *)v128 + k * v8);
        v130 = k;
        v132 = *v129;
        v131 = (float32x4_t *)((char *)v129 + v8);
        v133 = *v131;
        v134 = (float32x2_t *)&v131->u32[(unint64_t)v8 / 4 + 2];
        v135 = *(float32x2_t *)((char *)v134 + v8);
        v136 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v137 = (float32x4_t *)(a5 + v9 * v7);
        v133.i32[0] = 0;
        v135.i32[0] = 0;
        v138.i64[0] = 0;
        *(float32x2_t *)&v138.u32[2] = vmla_laneq_f32(vmul_laneq_f32(*v134, v136, 2), v135, v136, 3);
        v139 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v136.f32[0]), v133, *(float32x2_t *)v136.f32, 1), v138);
        if ((k & 1) != 0)
        {
          v140 = *v128;
          v128 = (float32x4_t *)((char *)v128 + v8);
          v141 = v137->f32[0];
          v137 = (float32x4_t *)((char *)v137 + 4);
          v139 = vmlaq_n_f32(v139, v140, v141);
          v130 = k - 1;
        }
        if (v130)
        {
          v142 = 0uLL;
          do
          {
            v144 = *v128;
            v143 = (float32x4_t *)((char *)v128 + v8);
            v145 = *v143;
            v128 = (float32x4_t *)((char *)v143 + v8);
            v146 = *(float32x2_t *)v137->f32;
            v137 = (float32x4_t *)((char *)v137 + 8);
            v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
            v142 = vmlaq_lane_f32(v142, v145, v146, 1);
            v66 = v130 <= 2;
            v130 -= 2;
          }
          while (!v66);
          v139 = vaddq_f32(v139, v142);
        }
      }
      if (k)
      {
        v147 = (float32x2_t *)(a5 + v9 * v7);
        v148 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v150.i32[0] = *v148;
            v149 = &v148[(unint64_t)v8 / 4];
            v150.i32[1] = *v149;
            v151 = *(float *)&v149[(unint64_t)v8 / 4];
            v148 = &v149[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v147[1].f32[0] = (float)(vaddv_f32(vmul_f32(v150, *v147)) + (float)(v147[1].f32[0] * v151)) * a7;
          }
          v153.i32[0] = *v148;
          v152 = &v148[(unint64_t)v8 / 4];
          v153.i32[1] = *v152;
          v148 = &v152[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v147->f32[1] = vaddv_f32(vmul_f32(v153, *v147)) * a7;
        }
        v147->f32[0] = (float)(*(float *)v148 * v147->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LLNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  int64x2_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  BOOL v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t *v66;
  float32x2_t *v67;
  __int32 *v68;
  __int32 *v69;
  float32x2_t v70;
  float32_t v71;
  float32_t v72;
  float32_t v73;
  float32_t v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  float32_t v78;
  float32_t v79;
  uint64_t j;
  int32x4_t *v81;
  int32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  float32x2_t *v87;
  int32x4_t v88;
  float32x2_t *v89;
  int32x4_t v90;
  float32x4_t *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t *v109;
  __int32 *v110;
  __int32 *v111;
  float32x2_t v112;
  float32_t v113;
  float32_t v114;
  float32_t v115;
  uint64_t k;
  float32x4_t *v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float32x4_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t *v134;
  __int32 *v135;
  __int32 *v136;
  float32x2_t v137;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v28 = vmulq_n_f32(v46, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v21 = *v12;
      v22 = (float32x2_t *)(a5 + v9 * v7);
      v23 = *v13;
      v24 = (float32x2_t *)((char *)v13 - 4 * i);
      v25 = *v14;
      v26 = (float32x2_t *)((char *)v14 - 4 * i);
      v27 = *v15;
      v28 = (float32x4_t *)((char *)v15 - 4 * i);
      v29 = (int32x4_t)vtrn1q_s64(v21, v25);
      v30 = (int32x4_t)vtrn1q_s64(v23, v27);
      v31 = (int32x4_t)vtrn2q_s64(v21, v25);
      v32 = (int32x4_t)vtrn2q_s64(v23, v27);
      v33 = (float32x4_t)vtrn1q_s32(v29, v30);
      v34 = (float32x4_t)vtrn2q_s32(v29, v30);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (int64x2_t)vmlaq_lane_f32(v34, v33, *(float32x2_t *)v19.f32, 1);
      v37 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(v35, v33, v19, 2), vmulq_n_f32(v34, COERCE_FLOAT(*v20)));
      v38 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vtrn2q_s32(v31, v32), v33, v19, 3), v35, v20->f32[(unint64_t)v8 / 4 + 1]), vmulq_lane_f32(v34, *v20, 1));
      v39 = (int32x4_t)vtrn1q_s64((int64x2_t)v33, v37);
      v40 = (int32x4_t)vtrn1q_s64(v36, v38);
      v41 = (int32x4_t)vtrn2q_s64((int64x2_t)v33, v37);
      v42 = (int32x4_t)vtrn2q_s64(v36, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (float32x4_t)vtrn2q_s32(v39, v40);
      v45 = (float32x4_t)vtrn1q_s32(v41, v42);
      v46 = (float32x4_t)vtrn2q_s32(v41, v42);
      if ((i & 1) != 0)
      {
        v47 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v48 = v22->f32[0];
        v22 = (float32x2_t *)((char *)v22 + 4);
        v49 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v50 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v51 = v28->f32[0];
        v28 = (float32x4_t *)((char *)v28 + 4);
        v43 = vmlaq_n_f32(v43, v47, v48);
        v44 = vmlaq_n_f32(v44, v47, v49);
        v45 = vmlaq_n_f32(v45, v47, v50);
        v46 = vmlaq_n_f32(v46, v47, v51);
        v18 = i - 1;
      }
      if (v18)
      {
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v57 = *v16;
          v56 = (float32x4_t *)((char *)v16 + v8);
          v58 = *v56;
          v16 = (float32x4_t *)((char *)v56 + v8);
          v59 = *v22++;
          v60 = *v24++;
          v61 = *v26++;
          v62 = *(float32x2_t *)v28->f32;
          v28 = (float32x4_t *)((char *)v28 + 8);
          v43 = vmlaq_n_f32(v43, v57, v59.f32[0]);
          v44 = vmlaq_n_f32(v44, v57, v60.f32[0]);
          v45 = vmlaq_n_f32(v45, v57, v61.f32[0]);
          v46 = vmlaq_n_f32(v46, v57, v62.f32[0]);
          v52 = vmlaq_lane_f32(v52, v58, v59, 1);
          v53 = vmlaq_lane_f32(v53, v58, v60, 1);
          v54 = vmlaq_lane_f32(v54, v58, v61, 1);
          v55 = vmlaq_lane_f32(v55, v58, v62, 1);
          v63 = v18 <= 2;
          v18 -= 2;
        }
        while (!v63);
        v43 = vaddq_f32(v43, v52);
        v44 = vaddq_f32(v44, v53);
        v45 = vaddq_f32(v45, v54);
        v46 = vaddq_f32(v46, v55);
      }
      *(float32x4_t *)v22->f32 = vmulq_n_f32(v43, a7);
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v44, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v45, a7);
    }
    if (i)
    {
      v64 = (float32x2_t *)(a5 + v9 * v7);
      v65 = (float32x2_t *)((char *)v64 + v7);
      v66 = &v64[(unint64_t)v7 / 4];
      v67 = (float32x2_t *)((char *)&v64[(unint64_t)v7 / 4] + v7);
      v68 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v70.i32[0] = *v68;
          v69 = &v68[(unint64_t)v8 / 4];
          v70.i32[1] = *v69;
          v68 = &v69[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v71 = (float)(vaddv_f32(vmul_f32(v70, *v65)) + v65[1].f32[0]) * a7;
          v72 = (float)(vaddv_f32(vmul_f32(v70, *v66)) + v66[1].f32[0]) * a7;
          v73 = (float)(vaddv_f32(vmul_f32(v70, *v67)) + v67[1].f32[0]) * a7;
          v64[1].f32[0] = (float)(vaddv_f32(vmul_f32(v70, *v64)) + v64[1].f32[0]) * a7;
          v65[1].f32[0] = v71;
          v66[1].f32[0] = v72;
          v67[1].f32[0] = v73;
        }
        v74 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v65)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v65)))
            * a7;
        v75 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v66)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v66)))
            * a7;
        v76 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v67)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v67)))
            * a7;
        v64->f32[1] = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v64))
                            + COERCE_FLOAT(HIDWORD(*(unint64_t *)v64)))
                    * a7;
        v65->f32[1] = v74;
        v66->f32[1] = v75;
        v67->f32[1] = v76;
      }
      v77 = v65->f32[0] * a7;
      v78 = v66->f32[0] * a7;
      v79 = v67->f32[0] * a7;
      v64->f32[0] = v64->f32[0] * a7;
      v65->f32[0] = v77;
      v66->f32[0] = v78;
      v67->f32[0] = v79;
    }
    v9 += 4;
    v63 = v10 <= 4;
    v10 -= 4;
  }
  while (!v63);
  v63 = v10 <= -3;
  a2 = v10 + 3;
  if (!v63)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v91 = vmulq_n_f32(v97, a7))
      {
        j -= 4;
        v81 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v82 = (int32x4_t *)((char *)v81 + v7);
        v83 = (float32x4_t *)(a3 + 4 * j);
        v84 = (float32x4_t *)((char *)v83 + j * v8);
        v85 = j;
        v86 = *v84;
        v87 = (float32x2_t *)&v84->u32[(unint64_t)v8 / 4 + 2];
        v88 = *v81;
        v89 = (float32x2_t *)(a5 + v9 * v7);
        v90 = *v82;
        v91 = (float32x4_t *)((char *)v82 - 4 * j);
        v92 = vtrn1q_s32(v88, v90);
        v93 = vtrn2q_s32(v88, v90);
        *(float32x2_t *)v94.i8 = vmla_lane_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v92.i8, *(float32x2_t *)v86.f32, 1);
        v95 = vadd_f32(vmla_n_f32(vmla_laneq_f32((float32x2_t)v93.u64[1], *(float32x2_t *)v92.i8, v86, 3), (float32x2_t)v92.u64[1], v87->f32[(unint64_t)v8 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)v93.i8, *v87, 1));
        v92.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32((float32x2_t)v92.u64[1], *(float32x2_t *)v92.i8, v86, 2), vmul_n_f32(*(float32x2_t *)v93.i8, COERCE_FLOAT(*v87)));
        v94.u64[1] = (unint64_t)v95;
        v96 = (float32x4_t)vtrn1q_s32(v92, v94);
        v97 = (float32x4_t)vtrn2q_s32(v92, v94);
        if ((j & 1) != 0)
        {
          v98 = *v83;
          v83 = (float32x4_t *)((char *)v83 + v8);
          v99 = v89->f32[0];
          v89 = (float32x2_t *)((char *)v89 + 4);
          v100 = v91->f32[0];
          v91 = (float32x4_t *)((char *)v91 + 4);
          v96 = vmlaq_n_f32(v96, v98, v99);
          v97 = vmlaq_n_f32(v97, v98, v100);
          v85 = j - 1;
        }
        if (v85)
        {
          v101 = 0uLL;
          v102 = 0uLL;
          do
          {
            v104 = *v83;
            v103 = (float32x4_t *)((char *)v83 + v8);
            v105 = *v103;
            v83 = (float32x4_t *)((char *)v103 + v8);
            v106 = *v89++;
            v107 = *(float32x2_t *)v91->f32;
            v91 = (float32x4_t *)((char *)v91 + 8);
            v96 = vmlaq_n_f32(v96, v104, v106.f32[0]);
            v97 = vmlaq_n_f32(v97, v104, v107.f32[0]);
            v101 = vmlaq_lane_f32(v101, v105, v106, 1);
            v102 = vmlaq_lane_f32(v102, v105, v107, 1);
            v63 = v85 <= 2;
            v85 -= 2;
          }
          while (!v63);
          v96 = vaddq_f32(v96, v101);
          v97 = vaddq_f32(v97, v102);
        }
        *(float32x4_t *)v89->f32 = vmulq_n_f32(v96, a7);
      }
      if (j)
      {
        v108 = (float32x2_t *)(a5 + v9 * v7);
        v109 = (float32x2_t *)((char *)v108 + v7);
        v110 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v112.i32[0] = *v110;
            v111 = &v110[(unint64_t)v8 / 4];
            v112.i32[1] = *v111;
            v110 = &v111[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v113 = (float)(vaddv_f32(vmul_f32(v112, *v109)) + v109[1].f32[0]) * a7;
            v108[1].f32[0] = (float)(vaddv_f32(vmul_f32(v112, *v108)) + v108[1].f32[0]) * a7;
            v109[1].f32[0] = v113;
          }
          v114 = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v109)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v109)))
               * a7;
          v108->f32[1] = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v108))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v108)))
                       * a7;
          v109->f32[1] = v114;
        }
        v115 = v109->f32[0] * a7;
        v108->f32[0] = v108->f32[0] * a7;
        v109->f32[0] = v115;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v124 = vmulq_n_f32(v126, a7))
      {
        k -= 4;
        v117 = (float32x4_t *)(a3 + 4 * k);
        v118 = (float32x4_t *)((char *)v117 + k * v8);
        v119 = k;
        v120 = *v118;
        v121 = (float32x2_t *)&v118->u32[(unint64_t)v8 / 4 + 2];
        v122 = *(float32x2_t *)((char *)v121 + v8);
        v123 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v124 = (float32x4_t *)(a5 + v9 * v7);
        v120.i32[0] = 0;
        v122.i32[0] = 0;
        v125.i64[0] = 0;
        *(float32x2_t *)&v125.u32[2] = vmla_laneq_f32(vmul_lane_f32(*v121, *(float32x2_t *)v123.f32, 1), v122, v123, 2);
        v126 = vaddq_f32(vmlaq_n_f32(v123, v120, v123.f32[0]), v125);
        if ((k & 1) != 0)
        {
          v127 = *v117;
          v117 = (float32x4_t *)((char *)v117 + v8);
          v128 = v124->f32[0];
          v124 = (float32x4_t *)((char *)v124 + 4);
          v126 = vmlaq_n_f32(v126, v127, v128);
          v119 = k - 1;
        }
        if (v119)
        {
          v129 = 0uLL;
          do
          {
            v131 = *v117;
            v130 = (float32x4_t *)((char *)v117 + v8);
            v132 = *v130;
            v117 = (float32x4_t *)((char *)v130 + v8);
            v133 = *(float32x2_t *)v124->f32;
            v124 = (float32x4_t *)((char *)v124 + 8);
            v126 = vmlaq_n_f32(v126, v131, v133.f32[0]);
            v129 = vmlaq_lane_f32(v129, v132, v133, 1);
            v63 = v119 <= 2;
            v119 -= 2;
          }
          while (!v63);
          v126 = vaddq_f32(v126, v129);
        }
      }
      if (k)
      {
        v134 = (float32x2_t *)(a5 + v9 * v7);
        v135 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v137.i32[0] = *v135;
            v136 = &v135[(unint64_t)v8 / 4];
            v137.i32[1] = *v136;
            v135 = &v136[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v134[1].f32[0] = (float)(vaddv_f32(vmul_f32(v137, *v134)) + v134[1].f32[0]) * a7;
          }
          v134->f32[1] = (float)((float)(*(float *)v135 * COERCE_FLOAT(*v134))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v134)))
                       * a7;
        }
        v134->f32[0] = v134->f32[0] * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LLTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  float32x2_t v29;
  __int32 *v30;
  float v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  float32x2_t *v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  BOOL v78;
  uint64_t v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  float32x2_t *v84;
  __int32 *v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  float32_t v95;
  float32_t v96;
  float32_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  float32x2_t *v107;
  __int32 *v108;
  __int32 *v109;
  float32x4_t v110;
  __int32 *v111;
  float32x4_t v112;
  __int32 *v113;
  float32x2_t v114;
  __int32 *v115;
  float v116;
  float32x2_t *v117;
  int32x4_t v118;
  float32x2_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  float32x2_t *v143;
  __int32 *v144;
  float32x2_t v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32_t v153;
  float32_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  float32x4_t *v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  float32x4_t v165;
  __int32 *v166;
  float32x4_t v167;
  __int32 *v168;
  float32x2_t v169;
  __int32 *v170;
  float v171;
  float32x2_t *v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  float32x2_t v184;
  uint64_t v185;
  float32x2_t *v186;
  float32x2_t *v187;
  float *v188;
  float32x2_t v189;
  float v190;
  float32x2_t v191;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = (float32x4_t *)((char *)v18 + v8);
        v20 = 4 * (result - v11);
        v21 = result - v11 - 4;
        v22 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 2 + 2];
        v23 = &v18->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v19;
        v26 = (__int32 *)&v19[1];
        v29 = *v22;
        v28 = (__int32 *)&v22[1];
        v31 = *(float *)v23;
        v30 = v23 + 1;
        v33 = *v14;
        v32 = (float32x2_t *)&v14[1];
        v35 = *v15;
        v34 = (float32x2_t *)&v15[1];
        v37 = *v16;
        v36 = (float32x2_t *)&v16[1];
        v39 = *v17;
        v38 = (float32x2_t *)&v17[1];
        v40 = (int32x4_t)vtrn1q_s64(v33, v37);
        v41 = (int32x4_t)vtrn1q_s64(v35, v39);
        v42 = (int32x4_t)vtrn2q_s64(v33, v37);
        v43 = (int32x4_t)vtrn2q_s64(v35, v39);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (float32x4_t)vtrn1q_s32(v42, v43);
        v46 = (float32x4_t)vtrn2q_s32(v42, v43);
        v47 = (int64x2_t)vmulq_n_f32(v46, v31);
        v48 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v27, 3), v44, *(float32x2_t *)v27.f32, 1), vmulq_laneq_f32(v45, v27, 2));
        v49 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v46, v29, 1), vmulq_n_f32(v45, v29.f32[0]));
        v50 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v25, 3), v44, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v45, v25, 2)), vmulq_n_f32((float32x4_t)vtrn1q_s32(v40, v41), v25.f32[0]));
        v51 = (int32x4_t)vtrn1q_s64(v50, v49);
        v52 = (int32x4_t)vtrn1q_s64(v48, v47);
        v53 = (int32x4_t)vtrn2q_s64(v50, v49);
        v54 = (int32x4_t)vtrn2q_s64(v48, v47);
        v55 = (float32x4_t)vtrn1q_s32(v51, v52);
        v56 = (float32x4_t)vtrn2q_s32(v51, v52);
        v57 = (float32x4_t)vtrn1q_s32(v53, v54);
        v58 = (float32x4_t)vtrn2q_s32(v53, v54);
        if ((v21 & 1) != 0)
        {
          v59.i32[0] = *v24++;
          v59.i32[1] = *v26++;
          v59.i32[2] = *v28++;
          v59.i32[3] = *v30++;
          v60 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v61 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v62 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v63 = v38->f32[0];
          v38 = (float32x2_t *)((char *)v38 + 4);
          v55 = vmlaq_n_f32(v55, v59, v60);
          v56 = vmlaq_n_f32(v56, v59, v61);
          v57 = vmlaq_n_f32(v57, v59, v62);
          v58 = vmlaq_n_f32(v58, v59, v63);
          v21 = result - v11 - 5;
        }
        if (v21)
        {
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          do
          {
            v68.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v69.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v70 = *(_QWORD *)v28;
            v28 += 2;
            v71 = *(_QWORD *)v30;
            v30 += 2;
            v72 = *v32++;
            v73 = *v34++;
            v74 = *v36++;
            v75 = *v38++;
            v68.i64[1] = v70;
            v69.i64[1] = v71;
            v76 = (float32x4_t)vtrn1q_s32(v68, v69);
            v77 = (float32x4_t)vtrn2q_s32(v68, v69);
            v55 = vmlaq_n_f32(v55, v76, v72.f32[0]);
            v56 = vmlaq_n_f32(v56, v76, v73.f32[0]);
            v57 = vmlaq_n_f32(v57, v76, v74.f32[0]);
            v58 = vmlaq_n_f32(v58, v76, v75.f32[0]);
            v64 = vmlaq_lane_f32(v64, v77, v72, 1);
            v65 = vmlaq_lane_f32(v65, v77, v73, 1);
            v66 = vmlaq_lane_f32(v66, v77, v74, 1);
            v67 = vmlaq_lane_f32(v67, v77, v75, 1);
            v78 = v21 <= 2;
            v21 -= 2;
          }
          while (!v78);
          v55 = vaddq_f32(v55, v64);
          v56 = vaddq_f32(v56, v65);
          v57 = vaddq_f32(v57, v66);
          v58 = vaddq_f32(v58, v67);
        }
        *(float32x4_t *)&v32->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        *(float32x4_t *)&v34->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v56, a7);
        *(float32x4_t *)&v36->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v57, a7);
        *(float32x4_t *)&v38->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v58, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v78 = v13 <= 4;
        v13 -= 4;
      }
      while (!v78);
    }
    v79 = result & 3;
    if (!v12 && v79 != 0)
    {
      v80 = (float32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v81 = (float32x2_t *)((char *)v80 + v7);
      v82 = &v80[(unint64_t)v7 / 4];
      v83 = (float32x2_t *)((char *)&v80[(unint64_t)v7 / 4] + v7);
      v84 = (float32x2_t *)(a3 + v11 * v8 + 4 * v11);
      if (v79 != 1)
      {
        if (v79 != 2)
        {
          v86 = *v84;
          v85 = (__int32 *)&v84[1];
          v87 = vmul_f32(v86, *v80);
          v88 = vmul_f32(v86, *v81);
          v89 = vmul_f32(v86, *v82);
          v90 = vmul_f32(v86, *v83);
          v86.i32[0] = *v85;
          v84 = (float32x2_t *)&v85[(unint64_t)v8 / 4 - 1];
          v88.f32[0] = (float)(vaddv_f32(v88) + (float)(v86.f32[0] * v81[1].f32[0])) * a7;
          v89.f32[0] = (float)(vaddv_f32(v89) + (float)(v86.f32[0] * v82[1].f32[0])) * a7;
          v90.f32[0] = (float)(vaddv_f32(v90) + (float)(v86.f32[0] * v83[1].f32[0])) * a7;
          v80->f32[0] = (float)(vaddv_f32(v87) + (float)(v86.f32[0] * v80[1].f32[0])) * a7;
          v80 = (float32x2_t *)((char *)v80 + 4);
          v81->i32[0] = v88.i32[0];
          v81 = (float32x2_t *)((char *)v81 + 4);
          v82->i32[0] = v89.i32[0];
          v82 = (float32x2_t *)((char *)v82 + 4);
          v83->i32[0] = v90.i32[0];
          v83 = (float32x2_t *)((char *)v83 + 4);
        }
        v91 = *v84;
        v84 = (float32x2_t *)((char *)v84 + v8 + 4);
        v92 = vaddv_f32(vmul_f32(v91, *v81)) * a7;
        v93 = vaddv_f32(vmul_f32(v91, *v82)) * a7;
        v94 = vaddv_f32(vmul_f32(v91, *v83)) * a7;
        v80->f32[0] = vaddv_f32(vmul_f32(v91, *v80)) * a7;
        v80 = (float32x2_t *)((char *)v80 + 4);
        v81->f32[0] = v92;
        v81 = (float32x2_t *)((char *)v81 + 4);
        v82->f32[0] = v93;
        v82 = (float32x2_t *)((char *)v82 + 4);
        v83->f32[0] = v94;
        v83 = (float32x2_t *)((char *)v83 + 4);
      }
      v95 = (float)(v84->f32[0] * v81->f32[0]) * a7;
      v96 = (float)(v84->f32[0] * v82->f32[0]) * a7;
      v97 = (float)(v84->f32[0] * v83->f32[0]) * a7;
      v80->f32[0] = (float)(v84->f32[0] * v80->f32[0]) * a7;
      v81->f32[0] = v95;
      v82->f32[0] = v96;
      v83->f32[0] = v97;
    }
    v9 += 4;
    v78 = v10 <= 4;
    v10 -= 4;
  }
  while (!v78);
  v78 = v10 <= -3;
  a2 = v10 + 3;
  if (!v78)
  {
LABEL_22:
    if (a2 > 1)
    {
      v98 = 0;
      v99 = __OFSUB__(result, 3);
      v100 = result - 3;
      if (result > 3)
      {
        do
        {
          v101 = (int32x4_t *)(a5 + v9 * v7 + 4 * v98);
          v102 = (int32x4_t *)((char *)v101 + v7);
          v103 = (float32x4_t *)(a3 + v98 * v8 + 4 * v98);
          v104 = (float32x4_t *)((char *)v103 + v8);
          v105 = 4 * (result - v98);
          v106 = result - v98 - 4;
          v107 = (float32x2_t *)&v103->u32[(unint64_t)v8 / 2 + 2];
          v108 = &v103->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v110 = *v103;
          v109 = (__int32 *)&v103[1];
          v112 = *v104;
          v111 = (__int32 *)&v104[1];
          v114 = *v107;
          v113 = (__int32 *)&v107[1];
          v116 = *(float *)v108;
          v115 = v108 + 1;
          v118 = *v101;
          v117 = (float32x2_t *)&v101[1];
          v120 = *v102;
          v119 = (float32x2_t *)&v102[1];
          v121 = vtrn1q_s32(v118, v120);
          v122 = vtrn2q_s32(v118, v120);
          *(float32x2_t *)v123.i8 = vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v112, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v112.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v112, 2));
          *(float32x2_t *)v124.i8 = vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v110, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v110.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v110, 2)), vmul_n_f32(*(float32x2_t *)v121.i8, v110.f32[0]));
          v124.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32((float32x2_t)v122.u64[1], v114, 1), vmul_n_f32((float32x2_t)v121.u64[1], v114.f32[0]));
          v123.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)v122.u64[1], v116);
          v125 = (float32x4_t)vtrn1q_s32(v124, v123);
          v126 = (float32x4_t)vtrn2q_s32(v124, v123);
          if ((v106 & 1) != 0)
          {
            v127.i32[0] = *v109++;
            v127.i32[1] = *v111++;
            v127.i32[2] = *v113++;
            v127.i32[3] = *v115++;
            v128 = v117->f32[0];
            v117 = (float32x2_t *)((char *)v117 + 4);
            v129 = v119->f32[0];
            v119 = (float32x2_t *)((char *)v119 + 4);
            v125 = vmlaq_n_f32(v125, v127, v128);
            v126 = vmlaq_n_f32(v126, v127, v129);
            v106 = result - v98 - 5;
          }
          if (v106)
          {
            v130 = 0uLL;
            v131 = 0uLL;
            do
            {
              v132.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v133.i64[0] = *(_QWORD *)v111;
              v111 += 2;
              v134 = *(_QWORD *)v113;
              v113 += 2;
              v135 = *(_QWORD *)v115;
              v115 += 2;
              v136 = *v117++;
              v137 = *v119++;
              v132.i64[1] = v134;
              v133.i64[1] = v135;
              v138 = (float32x4_t)vtrn1q_s32(v132, v133);
              v139 = (float32x4_t)vtrn2q_s32(v132, v133);
              v125 = vmlaq_n_f32(v125, v138, v136.f32[0]);
              v126 = vmlaq_n_f32(v126, v138, v137.f32[0]);
              v130 = vmlaq_lane_f32(v130, v139, v136, 1);
              v131 = vmlaq_lane_f32(v131, v139, v137, 1);
              v78 = v106 <= 2;
              v106 -= 2;
            }
            while (!v78);
            v125 = vaddq_f32(v125, v130);
            v126 = vaddq_f32(v126, v131);
          }
          *(float32x4_t *)&v117->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v125, a7);
          *(float32x4_t *)&v119->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v126, a7);
          v98 += 4;
          v99 = __OFSUB__(v100, 4);
          v78 = v100 <= 4;
          v100 -= 4;
        }
        while (!v78);
      }
      v140 = result & 3;
      if (!v99 && v140 != 0)
      {
        v141 = (float32x2_t *)(a5 + v9 * v7 + 4 * v98);
        v142 = (float32x2_t *)((char *)v141 + v7);
        v143 = (float32x2_t *)(a3 + v98 * v8 + 4 * v98);
        if (v140 != 1)
        {
          if (v140 != 2)
          {
            v145 = *v143;
            v144 = (__int32 *)&v143[1];
            v147 = *v141;
            v146 = v141 + 1;
            v149 = *v142;
            v148 = v142 + 1;
            v150 = vmul_f32(v145, v147);
            v151 = vmul_f32(v145, v149);
            v145.i32[0] = *v144;
            v143 = (float32x2_t *)&v144[(unint64_t)v8 / 4 - 1];
            v147.i32[0] = v146->i32[0];
            --v146;
            v149.i32[0] = v148->i32[0];
            --v148;
            v146->f32[0] = (float)(vaddv_f32(v150) + (float)(v145.f32[0] * v147.f32[0])) * a7;
            v141 = (float32x2_t *)((char *)v146 + 4);
            v148->f32[0] = (float)(vaddv_f32(v151) + (float)(v145.f32[0] * v149.f32[0])) * a7;
            v142 = (float32x2_t *)((char *)v148 + 4);
          }
          v152 = *v143;
          v143 = (float32x2_t *)((char *)v143 + v8 + 4);
          v153 = vaddv_f32(vmul_f32(v152, *v142)) * a7;
          v141->f32[0] = vaddv_f32(vmul_f32(v152, *v141)) * a7;
          v141 = (float32x2_t *)((char *)v141 + 4);
          v142->f32[0] = v153;
          v142 = (float32x2_t *)((char *)v142 + 4);
        }
        v154 = (float)(v143->f32[0] * v142->f32[0]) * a7;
        v141->f32[0] = (float)(v143->f32[0] * v141->f32[0]) * a7;
        v142->f32[0] = v154;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v155 = 0;
      v156 = __OFSUB__(result, 3);
      v157 = result - 3;
      if (result > 3)
      {
        do
        {
          v158 = (float32x4_t *)(a5 + v9 * v7 + 4 * v155);
          v159 = (float32x4_t *)(a3 + v155 * v8 + 4 * v155);
          v160 = (float32x4_t *)((char *)v159 + v8);
          v161 = result - v155 - 4;
          v162 = (float32x2_t *)&v159->u32[(unint64_t)v8 / 2 + 2];
          v163 = &v159->f32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v165 = *v159;
          v164 = (__int32 *)&v159[1];
          v167 = *v160;
          v166 = (__int32 *)&v160[1];
          v169 = *v162;
          v168 = (__int32 *)&v162[1];
          v171 = *v163;
          v170 = (__int32 *)(v163 + 1);
          v173 = *v158;
          v172 = (float32x2_t *)&v158[1];
          v167.i32[0] = 0;
          v174 = vmulq_f32(v165, v173);
          v175 = vmulq_f32(v167, v173);
          v176.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174));
          v176.f32[3] = v171 * v173.f32[3];
          v176.i32[2] = vaddv_f32(vmul_f32(v169, *(float32x2_t *)&v173.u32[2]));
          v176.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175));
          if ((v161 & 1) != 0)
          {
            v177.i32[0] = *v164++;
            v177.i32[1] = *v166++;
            v177.i32[2] = *v168++;
            v177.i32[3] = *v170++;
            v178 = v172->f32[0];
            v172 = (float32x2_t *)((char *)v172 + 4);
            v176 = vmlaq_n_f32(v176, v177, v178);
            v161 = result - v155 - 5;
          }
          if (v161)
          {
            v179 = 0uLL;
            do
            {
              v180.i64[0] = *(_QWORD *)v164;
              v164 += 2;
              v181.i64[0] = *(_QWORD *)v166;
              v166 += 2;
              v182 = *(_QWORD *)v168;
              v168 += 2;
              v183 = *(_QWORD *)v170;
              v170 += 2;
              v184 = *v172++;
              v180.i64[1] = v182;
              v181.i64[1] = v183;
              v176 = vmlaq_n_f32(v176, (float32x4_t)vtrn1q_s32(v180, v181), v184.f32[0]);
              v179 = vmlaq_lane_f32(v179, (float32x4_t)vtrn2q_s32(v180, v181), v184, 1);
              v78 = v161 <= 2;
              v161 -= 2;
            }
            while (!v78);
            v176 = vaddq_f32(v176, v179);
          }
          *(float32x4_t *)&v172->f32[-(result - v155)] = vmulq_n_f32(v176, a7);
          v155 += 4;
          v156 = __OFSUB__(v157, 4);
          v78 = v157 <= 4;
          v157 -= 4;
        }
        while (!v78);
      }
      v185 = result & 3;
      if (!v156 && v185 != 0)
      {
        v186 = (float32x2_t *)(a5 + v9 * v7 + 4 * v155);
        v187 = (float32x2_t *)(a3 + v155 * v8 + 4 * v155);
        if (v185 != 1)
        {
          if (v185 != 2)
          {
            v189 = *v187;
            v188 = (float *)&v187[1];
            v190 = *v188;
            v187 = (float32x2_t *)&v188[(unint64_t)v8 / 4 - 1];
            v186->f32[0] = (float)(vaddv_f32(vmul_f32(v189, *v186)) + (float)(v190 * v186[1].f32[0])) * a7;
            v186 = (float32x2_t *)((char *)v186 + 4);
          }
          v191 = *v187;
          v187 = (float32x2_t *)((char *)v187 + v8 + 4);
          v186->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v191, *v186), a7));
          v186 = (float32x2_t *)((char *)v186 + 4);
        }
        v186->f32[0] = (float)(v187->f32[0] * v186->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LLTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x2_t v27;
  __int32 *v28;
  float v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  BOOL v75;
  uint64_t v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  float *v81;
  float32x2_t v82;
  int32x2_t *v83;
  float v84;
  float v85;
  int32x2_t *v86;
  float v87;
  float v88;
  int32x2_t *v89;
  float v90;
  float v91;
  int32x2_t *v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int32x4_t *v106;
  int32x4_t *v107;
  float32x4_t *v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t *v111;
  __int32 *v112;
  __int32 *v113;
  __int32 *v114;
  float32x4_t v115;
  __int32 *v116;
  float32x2_t v117;
  __int32 *v118;
  float v119;
  float32x2_t *v120;
  int32x4_t v121;
  float32x2_t *v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  int32x2_t *v144;
  int32x2_t *v145;
  float *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float v149;
  float32x2_t *v150;
  float v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  __int32 *v165;
  float32x4_t v166;
  __int32 *v167;
  float32x2_t v168;
  __int32 *v169;
  float v170;
  float32x2_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x2_t v183;
  uint64_t v184;
  _QWORD *v185;
  float32x2_t *v186;
  float32x2_t v187;
  _QWORD *v188;
  float v189;
  float32x2_t v190;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = 4 * (result - v11);
        v20 = result - v11 - 4;
        v21 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 4 + 2];
        v22 = &v18->i32[(unint64_t)v8 / 2 + 3];
        v23 = (__int32 *)((char *)&v18[1] + 2 * v8 + v8);
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v21;
        v26 = (__int32 *)&v21[1];
        v29 = *(float *)v22;
        v28 = v22 + 1;
        v31 = *v14;
        v30 = (float32x2_t *)&v14[1];
        v33 = *v15;
        v32 = (float32x2_t *)&v15[1];
        v35 = *v16;
        v34 = (float32x2_t *)&v16[1];
        v37 = *v17;
        v36 = (float32x2_t *)&v17[1];
        v38 = (int32x4_t)vtrn1q_s64(v31, v35);
        v39 = (int32x4_t)vtrn1q_s64(v33, v37);
        v40 = (int32x4_t)vtrn2q_s64(v31, v35);
        v41 = (int32x4_t)vtrn2q_s64(v33, v37);
        v42 = (float32x4_t)vtrn2q_s32(v38, v39);
        v43 = (float32x4_t)vtrn1q_s32(v40, v41);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (int64x2_t)vmlaq_n_f32(v43, v44, v29);
        v46 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)vtrn1q_s32(v38, v39), v44, v25, 3), v42, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v43, v25, 2));
        v47 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(v42, v44, v27, 1), vmulq_n_f32(v43, v27.f32[0]));
        v48 = (int32x4_t)vtrn1q_s64(v46, v45);
        v49 = (int32x4_t)vtrn1q_s64(v47, (int64x2_t)v44);
        v50 = (int32x4_t)vtrn2q_s64(v46, v45);
        v51 = (int32x4_t)vtrn2q_s64(v47, (int64x2_t)v44);
        v52 = (float32x4_t)vtrn1q_s32(v48, v49);
        v53 = (float32x4_t)vtrn2q_s32(v48, v49);
        v54 = (float32x4_t)vtrn1q_s32(v50, v51);
        v55 = (float32x4_t)vtrn2q_s32(v50, v51);
        if ((v20 & 1) != 0)
        {
          v56.i32[0] = *v24++;
          v56.i32[1] = *v26++;
          v56.i32[2] = *v28++;
          v56.i32[3] = *v23++;
          v57 = v30->f32[0];
          v30 = (float32x2_t *)((char *)v30 + 4);
          v58 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v59 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v60 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v52 = vmlaq_n_f32(v52, v56, v57);
          v53 = vmlaq_n_f32(v53, v56, v58);
          v54 = vmlaq_n_f32(v54, v56, v59);
          v55 = vmlaq_n_f32(v55, v56, v60);
          v20 = result - v11 - 5;
        }
        if (v20)
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          do
          {
            v65.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v66.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v67 = *(_QWORD *)v28;
            v28 += 2;
            v68 = *(_QWORD *)v23;
            v23 += 2;
            v69 = *v30++;
            v70 = *v32++;
            v71 = *v34++;
            v72 = *v36++;
            v65.i64[1] = v67;
            v66.i64[1] = v68;
            v73 = (float32x4_t)vtrn1q_s32(v65, v66);
            v74 = (float32x4_t)vtrn2q_s32(v65, v66);
            v52 = vmlaq_n_f32(v52, v73, v69.f32[0]);
            v53 = vmlaq_n_f32(v53, v73, v70.f32[0]);
            v54 = vmlaq_n_f32(v54, v73, v71.f32[0]);
            v55 = vmlaq_n_f32(v55, v73, v72.f32[0]);
            v61 = vmlaq_lane_f32(v61, v74, v69, 1);
            v62 = vmlaq_lane_f32(v62, v74, v70, 1);
            v63 = vmlaq_lane_f32(v63, v74, v71, 1);
            v64 = vmlaq_lane_f32(v64, v74, v72, 1);
            v75 = v20 <= 2;
            v20 -= 2;
          }
          while (!v75);
          v52 = vaddq_f32(v52, v61);
          v53 = vaddq_f32(v53, v62);
          v54 = vaddq_f32(v54, v63);
          v55 = vaddq_f32(v55, v64);
        }
        *(float32x4_t *)&v30->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v52, a7);
        *(float32x4_t *)&v32->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v53, a7);
        *(float32x4_t *)&v34->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v54, a7);
        *(float32x4_t *)&v36->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v75 = v13 <= 4;
        v13 -= 4;
      }
      while (!v75);
    }
    v76 = result & 3;
    if (!v12 && v76 != 0)
    {
      v77 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v78 = (int32x2_t *)((char *)v77 + v7);
      v79 = &v77[(unint64_t)v7 / 4];
      v80 = (int32x2_t *)((char *)&v77[(unint64_t)v7 / 4] + v7);
      v81 = (float *)(a3 + v11 * v8 + 4 * v11 + 4);
      if (v76 != 1)
      {
        if (v76 != 2)
        {
          v82 = *(float32x2_t *)v81;
          v81 = (float *)((char *)v81 + v8 + 4);
          v84 = *(float *)v77->i32;
          v83 = (int32x2_t *)((char *)v77 + 4);
          v85 = v84;
          v87 = *(float *)v78->i32;
          v86 = (int32x2_t *)((char *)v78 + 4);
          v88 = v87;
          v90 = *(float *)v79->i32;
          v89 = (int32x2_t *)((char *)v79 + 4);
          v91 = v90;
          v93 = *(float *)v80->i32;
          v92 = (int32x2_t *)((char *)v80 + 4);
          v94 = (float32x2_t)*v83;
          v83 = (int32x2_t *)((char *)v83 - 4);
          v95 = (float32x2_t)*v86;
          v86 = (int32x2_t *)((char *)v86 - 4);
          v96 = (float32x2_t)*v89;
          v89 = (int32x2_t *)((char *)v89 - 4);
          v97 = (float32x2_t)*v92;
          v92 = (int32x2_t *)((char *)v92 - 4);
          *(float *)v83->i32 = (float)(vaddv_f32(vmul_f32(v82, v94)) + v85) * a7;
          v77 = (int32x2_t *)((char *)v83 + 4);
          *(float *)v86->i32 = (float)(vaddv_f32(vmul_f32(v82, v95)) + v88) * a7;
          v78 = (int32x2_t *)((char *)v86 + 4);
          *(float *)v89->i32 = (float)(vaddv_f32(vmul_f32(v82, v96)) + v91) * a7;
          v79 = (int32x2_t *)((char *)v89 + 4);
          *(float *)v92->i32 = (float)(vaddv_f32(vmul_f32(v82, v97)) + v93) * a7;
          v80 = (int32x2_t *)((char *)v92 + 4);
        }
        v98 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v77, *v78), vmul_n_f32((float32x2_t)vtrn2_s32(*v77, *v78), *v81)), a7);
        v99 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v79, *v80), vmul_n_f32((float32x2_t)vtrn2_s32(*v79, *v80), *v81)), a7);
        v77->i32[0] = v98.i32[0];
        v77 = (int32x2_t *)((char *)v77 + 4);
        v78->i32[0] = v98.i32[1];
        v78 = (int32x2_t *)((char *)v78 + 4);
        v79->i32[0] = v99.i32[0];
        v79 = (int32x2_t *)((char *)v79 + 4);
        v80->i32[0] = v99.i32[1];
        v80 = (int32x2_t *)((char *)v80 + 4);
      }
      v100 = *(float *)v78->i32 * a7;
      v101 = *(float *)v79->i32 * a7;
      v102 = *(float *)v80->i32 * a7;
      *(float *)v77->i32 = *(float *)v77->i32 * a7;
      *(float *)v78->i32 = v100;
      *(float *)v79->i32 = v101;
      *(float *)v80->i32 = v102;
    }
    v9 += 4;
    v75 = v10 <= 4;
    v10 -= 4;
  }
  while (!v75);
  v75 = v10 <= -3;
  a2 = v10 + 3;
  if (!v75)
  {
LABEL_22:
    if (a2 > 1)
    {
      v103 = 0;
      v104 = __OFSUB__(result, 3);
      v105 = result - 3;
      if (result > 3)
      {
        do
        {
          v106 = (int32x4_t *)(a5 + v9 * v7 + 4 * v103);
          v107 = (int32x4_t *)((char *)v106 + v7);
          v108 = (float32x4_t *)(a3 + v103 * v8 + 4 * v103);
          v109 = 4 * (result - v103);
          v110 = result - v103 - 4;
          v111 = (float32x2_t *)&v108->u32[(unint64_t)v8 / 4 + 2];
          v112 = &v108->i32[(unint64_t)v8 / 2 + 3];
          v113 = (__int32 *)((char *)&v108[1] + 2 * v8 + v8);
          v115 = *v108;
          v114 = (__int32 *)&v108[1];
          v117 = *v111;
          v116 = (__int32 *)&v111[1];
          v119 = *(float *)v112;
          v118 = v112 + 1;
          v121 = *v106;
          v120 = (float32x2_t *)&v106[1];
          v123 = *v107;
          v122 = (float32x2_t *)&v107[1];
          v124 = vtrn1q_s32(v121, v123);
          v125 = vtrn2q_s32(v121, v123);
          *(float32x2_t *)v126.i8 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)v124.i8, (float32x2_t)v125.u64[1], v115, 3), *(float32x2_t *)v125.i8, *(float32x2_t *)v115.f32, 1), vmul_laneq_f32((float32x2_t)v124.u64[1], v115, 2));
          *(float32x2_t *)v127.i8 = vadd_f32(vmla_lane_f32(*(float32x2_t *)v125.i8, (float32x2_t)v125.u64[1], v117, 1), vmul_n_f32((float32x2_t)v124.u64[1], v117.f32[0]));
          v126.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v124.u64[1], (float32x2_t)v125.u64[1], v119);
          v127.i64[1] = v125.i64[1];
          v128 = (float32x4_t)vtrn1q_s32(v126, v127);
          v129 = (float32x4_t)vtrn2q_s32(v126, v127);
          if ((v110 & 1) != 0)
          {
            v130.i32[0] = *v114++;
            v130.i32[1] = *v116++;
            v130.i32[2] = *v118++;
            v130.i32[3] = *v113++;
            v131 = v120->f32[0];
            v120 = (float32x2_t *)((char *)v120 + 4);
            v132 = v122->f32[0];
            v122 = (float32x2_t *)((char *)v122 + 4);
            v128 = vmlaq_n_f32(v128, v130, v131);
            v129 = vmlaq_n_f32(v129, v130, v132);
            v110 = result - v103 - 5;
          }
          if (v110)
          {
            v133 = 0uLL;
            v134 = 0uLL;
            do
            {
              v135.i64[0] = *(_QWORD *)v114;
              v114 += 2;
              v136.i64[0] = *(_QWORD *)v116;
              v116 += 2;
              v137 = *(_QWORD *)v118;
              v118 += 2;
              v138 = *(_QWORD *)v113;
              v113 += 2;
              v139 = *v120++;
              v140 = *v122++;
              v135.i64[1] = v137;
              v136.i64[1] = v138;
              v141 = (float32x4_t)vtrn1q_s32(v135, v136);
              v142 = (float32x4_t)vtrn2q_s32(v135, v136);
              v128 = vmlaq_n_f32(v128, v141, v139.f32[0]);
              v129 = vmlaq_n_f32(v129, v141, v140.f32[0]);
              v133 = vmlaq_lane_f32(v133, v142, v139, 1);
              v134 = vmlaq_lane_f32(v134, v142, v140, 1);
              v75 = v110 <= 2;
              v110 -= 2;
            }
            while (!v75);
            v128 = vaddq_f32(v128, v133);
            v129 = vaddq_f32(v129, v134);
          }
          *(float32x4_t *)&v120->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v128, a7);
          *(float32x4_t *)&v122->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v129, a7);
          v103 += 4;
          v104 = __OFSUB__(v105, 4);
          v75 = v105 <= 4;
          v105 -= 4;
        }
        while (!v75);
      }
      v143 = result & 3;
      if (!v104 && v143 != 0)
      {
        v144 = (int32x2_t *)(a5 + v9 * v7 + 4 * v103);
        v145 = (int32x2_t *)((char *)v144 + v7);
        v146 = (float *)(a3 + v103 * v8 + 4 * v103 + 4);
        if (v143 != 1)
        {
          if (v143 != 2)
          {
            v147 = *(float32x2_t *)v146;
            v146 = (float *)((char *)v146 + v8 + 4);
            v149 = *(float *)v144->i32;
            v148 = (float32x2_t *)((char *)v144 + 4);
            v151 = *(float *)v145->i32;
            v150 = (float32x2_t *)((char *)v145 + 4);
            v152 = vmul_f32(v147, *v148);
            v153 = vmul_f32(v147, *v150);
            v148 = (float32x2_t *)((char *)v148 - 4);
            v150 = (float32x2_t *)((char *)v150 - 4);
            v148->f32[0] = (float)(vaddv_f32(v152) + v149) * a7;
            v144 = (int32x2_t *)((char *)v148 + 4);
            v150->f32[0] = (float)(vaddv_f32(v153) + v151) * a7;
            v145 = (int32x2_t *)((char *)v150 + 4);
          }
          v154 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v144, *v145), vmul_n_f32((float32x2_t)vtrn2_s32(*v144, *v145), *v146)), a7);
          v144->i32[0] = v154.i32[0];
          v144 = (int32x2_t *)((char *)v144 + 4);
          v145->i32[0] = v154.i32[1];
          v145 = (int32x2_t *)((char *)v145 + 4);
        }
        v155 = *(float *)v145->i32 * a7;
        *(float *)v144->i32 = *(float *)v144->i32 * a7;
        *(float *)v145->i32 = v155;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v156 = 0;
      v157 = __OFSUB__(result, 3);
      v158 = result - 3;
      if (result > 3)
      {
        do
        {
          v159 = (float32x4_t *)(a5 + v9 * v7 + 4 * v156);
          v160 = (float32x4_t *)(a3 + v156 * v8 + 4 * v156);
          v161 = result - v156 - 4;
          v162 = (float32x2_t *)&v160->u32[(unint64_t)v8 / 4 + 2];
          v163 = &v160->f32[(unint64_t)v8 / 2 + 3];
          v164 = (__int32 *)((char *)&v160[1] + 2 * v8 + v8);
          v166 = *v160;
          v165 = (__int32 *)&v160[1];
          v168 = *v162;
          v167 = (__int32 *)&v162[1];
          v170 = *v163;
          v169 = (__int32 *)(v163 + 1);
          v172 = *v159;
          v171 = (float32x2_t *)&v159[1];
          v166.i32[0] = 0;
          v173 = vmulq_f32(v166, v172);
          v174.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v173, v173));
          v174.i64[1] = COERCE_UNSIGNED_INT(v170 * v172.f32[3]);
          v174.i32[1] = vaddv_f32(vmul_f32(v168, *(float32x2_t *)&v172.u32[2]));
          v175 = vaddq_f32(v174, v172);
          if ((v161 & 1) != 0)
          {
            v176.i32[0] = *v165++;
            v176.i32[1] = *v167++;
            v176.i32[2] = *v169++;
            v176.i32[3] = *v164++;
            v177 = v171->f32[0];
            v171 = (float32x2_t *)((char *)v171 + 4);
            v175 = vmlaq_n_f32(v175, v176, v177);
            v161 = result - v156 - 5;
          }
          if (v161)
          {
            v178 = 0uLL;
            do
            {
              v179.i64[0] = *(_QWORD *)v165;
              v165 += 2;
              v180.i64[0] = *(_QWORD *)v167;
              v167 += 2;
              v181 = *(_QWORD *)v169;
              v169 += 2;
              v182 = *(_QWORD *)v164;
              v164 += 2;
              v183 = *v171++;
              v179.i64[1] = v181;
              v180.i64[1] = v182;
              v175 = vmlaq_n_f32(v175, (float32x4_t)vtrn1q_s32(v179, v180), v183.f32[0]);
              v178 = vmlaq_lane_f32(v178, (float32x4_t)vtrn2q_s32(v179, v180), v183, 1);
              v75 = v161 <= 2;
              v161 -= 2;
            }
            while (!v75);
            v175 = vaddq_f32(v175, v178);
          }
          *(float32x4_t *)&v171->f32[-(result - v156)] = vmulq_n_f32(v175, a7);
          v156 += 4;
          v157 = __OFSUB__(v158, 4);
          v75 = v158 <= 4;
          v158 -= 4;
        }
        while (!v75);
      }
      v184 = result & 3;
      if (!v157 && v184 != 0)
      {
        v185 = (_QWORD *)(a5 + v9 * v7 + 4 * v156);
        v186 = (float32x2_t *)(a3 + v156 * v8 + 4 * v156 + 4);
        if (v184 != 1)
        {
          if (v184 != 2)
          {
            v187 = *v186;
            v186 = (float32x2_t *)((char *)v186 + v8 + 4);
            v189 = *(float *)v185;
            v188 = (_QWORD *)((char *)v185 + 4);
            v190 = *(float32x2_t *)v188;
            v188 = (_QWORD *)((char *)v188 - 4);
            *(float *)v188 = (float)(vaddv_f32(vmul_f32(v187, v190)) + v189) * a7;
            v185 = (_QWORD *)((char *)v188 + 4);
          }
          *(float *)v185 = (float)((float)(COERCE_FLOAT(HIDWORD(*v185)) * v186->f32[0]) + COERCE_FLOAT(*v185)) * a7;
          v185 = (_QWORD *)((char *)v185 + 4);
        }
        *(float *)v185 = *(float *)v185 * a7;
      }
    }
  }
  return result;
}

_OWORD *dgebpAlignedC_8M4N_hurricane(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t *v41;

  v7 = a3;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = a3[3];
    v16 = (float64x2_t *)((char *)a3 + v8);
    v22 = *v16;
    v23 = v16[1];
    v24 = v16[2];
    v25 = v16[3];
    v21 = (float64x2_t *)((char *)v16 + v8);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v21[3];
    v26 = (float64x2_t *)((char *)v21 + v8);
    v31 = *v26;
    v32 = v26[1];
    v33 = v26[2];
    v34 = v26[3];
    v36 = *a2;
    v37 = a2[1];
    v35 = a2 + 2;
    do
    {
      v17 = vmlaq_n_f64(v17, v10, v36.f64[0]);
      v22 = vmlaq_laneq_f64(v22, v10, v36, 1);
      v27 = vmlaq_n_f64(v27, v10, v37.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v10, v37, 1);
      v18 = vmlaq_n_f64(v18, v11, v36.f64[0]);
      v23 = vmlaq_laneq_f64(v23, v11, v36, 1);
      v28 = vmlaq_n_f64(v28, v11, v37.f64[0]);
      v32 = vmlaq_laneq_f64(v32, v11, v37, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v38 = result + 2;
      v19 = vmlaq_n_f64(v19, v13, v36.f64[0]);
      v24 = vmlaq_laneq_f64(v24, v13, v36, 1);
      v29 = vmlaq_n_f64(v29, v13, v37.f64[0]);
      v33 = vmlaq_laneq_f64(v33, v13, v37, 1);
      v20 = vmlaq_n_f64(v20, v14, v36.f64[0]);
      v25 = vmlaq_laneq_f64(v25, v14, v36, 1);
      v30 = vmlaq_n_f64(v30, v14, v37.f64[0]);
      v34 = vmlaq_laneq_f64(v34, v14, v37, 1);
      v13 = *(float64x2_t *)v38;
      v14 = *((float64x2_t *)v38 + 1);
      result = v38 + 2;
      v36 = *v35;
      v37 = v35[1];
      v35 += 2;
      --v15;
    }
    while (v15);
    v39 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v17;
    v7[1] = v18;
    v7[2] = v19;
    v7[3] = v20;
    v7 += 4;
    *v39 = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v40 = (float64x2_t *)((char *)v39 + v8);
    *v40 = v27;
    v40[1] = v28;
    v40[2] = v29;
    v40[3] = v30;
    v41 = (float64x2_t *)((char *)v40 + v8);
    *v41 = v31;
    v41[1] = v32;
    v41[2] = v33;
    v41[3] = v34;
    a3 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t strmm_noPack_RUNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, __n128 a11, __n128 a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL i;
  __n128 *v21;
  float *v22;
  float32x2_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float32x2_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  BOOL v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float v66;
  float32x2_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  uint64_t v70;
  BOOL j;
  unint64_t *v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t *v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t *v106;
  float32x2_t *v107;
  uint64_t v108;
  float32x2_t *v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t *v118;
  float32x2_t v119;
  uint64_t v120;
  BOOL k;
  unsigned __int32 *v122;
  float *v123;
  float32x2_t *v124;
  float32x4_t *v125;
  float32x4_t *v126;
  uint64_t v127;
  float v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float32x4_t v132;
  float *v133;
  float32x4_t v134;
  float *v135;
  unsigned __int32 *v136;
  unsigned __int32 *v137;
  unsigned __int32 *v138;
  float *v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int32 *v150;
  float32x2_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  __int32 *v155;
  float32x2_t *v156;
  float32x2_t v157;
  __int32 *v158;
  float32x2_t v159;
  float *v160;
  float v161;
  float32x2_t v162;
  __int32 *v163;
  float32x2_t v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_21;
  v18 = result - 3;
  do
  {
    v19 = a2;
    for (i = __OFSUB__(a2, 3); v19 > 3; i = __OFSUB__(v19, 3))
    {
      v19 -= 4;
      v21 = (__n128 *)(a5 + v19 * v15 + 4 * v17);
      v22 = (float *)(a3 + v19 * v16 + 4 * v19);
      v23 = (float32x2_t *)&v22[(unint64_t)v16 / 4];
      v24 = (float32x4_t *)&v22[(unint64_t)v16 / 2];
      v25 = (float32x4_t *)&v22[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
      v26 = v19;
      v27 = *v22;
      v28 = (float *)(a3 + v19 * v16);
      v29 = *v23;
      v30 = (float *)v23 - v19;
      v31 = *v24;
      v32 = &v24->f32[-v19];
      v33 = *v25;
      v34 = &v25->f32[-v19];
      a11 = *v21;
      v35 = (__n128 *)((char *)v21 + v15);
      a12 = *v35;
      v36 = (float32x4_t *)((char *)v35 + v15);
      a13 = *v36;
      v37 = (float32x4_t *)((char *)v36 + v15);
      a14 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v15 - v19 * v15 + -4 * v15);
      v39 = vmulq_n_f32((float32x4_t)a11, v27);
      v40 = vaddq_f32(vmulq_n_f32((float32x4_t)a11, v29.f32[0]), vmulq_lane_f32((float32x4_t)a12, v29, 1));
      v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v31.f32[0]), a13, v31, 2), vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v31.f32, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v33.f32[0]), a13, v33, 2), vmlaq_laneq_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v33.f32, 1), a14, v33, 3));
      if ((v19 & 1) != 0)
      {
        v43 = *v38;
        v38 = (float32x4_t *)((char *)v38 + v15);
        v44 = *v28++;
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v39 = vmlaq_n_f32(v39, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v26 = v19 - 1;
      }
      if (v26)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v38;
          v52 = (float32x4_t *)((char *)v38 + v15);
          v54 = *v52;
          v38 = (float32x4_t *)((char *)v52 + v15);
          a11.n128_u64[0] = *(_QWORD *)v28;
          v28 += 2;
          a12.n128_u64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v39 = vmlaq_n_f32(v39, v53, a11.n128_f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.n128_f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, (float32x2_t)a11.n128_u64[0], 1);
          v49 = vmlaq_lane_f32(v49, v54, (float32x2_t)a12.n128_u64[0], 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v55 = v26 <= 2;
          v26 -= 2;
        }
        while (!v55);
        v39 = vaddq_f32(v39, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v39, a7);
      *v38 = v14;
      v56 = (float32x4_t *)((char *)v38 + v15);
      *v56 = vmulq_n_f32(v40, a7);
      v57 = (float32x4_t *)((char *)v56 + v15);
      *v57 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v42, a7);
    }
    v58 = a2 & 3;
    if (!i && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + 4 * v17);
      v60 = (float32x2_t *)(a3 + (v19 - 1) * v16);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          v61 = *v60;
          v63 = *v59;
          v62 = (float32x4_t *)((char *)v59 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *(__n128 *)v64;
          v66 = v60[1].f32[0];
          v60 = (float32x2_t *)((char *)v60 - v16);
          *v64 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v61.f32[0]), vmulq_lane_f32(v65, v61, 1)), vmulq_n_f32(*v64, v66)), a7);
          v59 = (float32x4_t *)((char *)v64 - 2 * v15);
        }
        v67 = *v60;
        v69 = *v59;
        v68 = (float32x4_t *)((char *)v59 + v15);
        a11 = *(__n128 *)v68;
        v60 = (float32x2_t *)((char *)v60 - v16);
        *v68 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v69, v67.f32[0]), vmulq_lane_f32(*v68, v67, 1)), a7);
        v59 = (float32x4_t *)((char *)v68 - v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v59, v60->f32[0]), a7);
      *v59 = v14;
    }
    v17 += 4;
    v55 = v18 <= 4;
    v18 -= 4;
  }
  while (!v55);
  v55 = v18 <= -3;
  result = v18 + 3;
  if (!v55)
  {
LABEL_21:
    if (result > 1)
    {
      v70 = a2;
      for (j = __OFSUB__(a2, 3); v70 > 3; j = __OFSUB__(v70, 3))
      {
        v70 -= 4;
        v72 = (unint64_t *)(a5 + v70 * v15 + 4 * v17);
        v73 = (float *)(a3 + v70 * v16 + 4 * v70);
        v74 = (float32x2_t *)&v73[(unint64_t)v16 / 4];
        v75 = (float32x4_t *)&v73[(unint64_t)v16 / 2];
        v76 = (float32x4_t *)&v73[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v77 = v70;
        v78 = *v73;
        v79 = (float *)(a3 + v70 * v16);
        v80 = *v74;
        v81 = (float *)v74 - v70;
        v82 = *v75;
        v83 = &v75->f32[-v70];
        v84 = *v76;
        v85 = &v76->f32[-v70];
        a11.n128_u64[0] = *v72;
        v86 = (unint64_t *)((char *)v72 + v15);
        a12.n128_u64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v15);
        a13.i64[0] = *v87;
        v88 = (unint64_t *)((char *)v87 + v15);
        a14.i64[0] = *v88;
        v89 = (float32x2_t *)((char *)v88 + v15 - v70 * v15 + -4 * v15);
        v90 = vmul_n_f32((float32x2_t)a11.n128_u64[0], v78);
        v91 = vadd_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v80.f32[0]), vmul_lane_f32((float32x2_t)a12.n128_u64[0], v80, 1));
        v92 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v82.f32, 1));
        v93 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v84.f32[0]), *(float32x2_t *)a13.f32, v84, 2), vmla_laneq_f32(vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v84.f32, 1), *(float32x2_t *)a14.f32, v84, 3));
        if ((v70 & 1) != 0)
        {
          v94 = *v89;
          v89 = (float32x2_t *)((char *)v89 + v15);
          v95 = *v79++;
          v96 = *v81++;
          v97 = *v83++;
          v98 = *v85++;
          v90 = vmla_n_f32(v90, v94, v95);
          v91 = vmla_n_f32(v91, v94, v96);
          v92 = vmla_n_f32(v92, v94, v97);
          v93 = vmla_n_f32(v93, v94, v98);
          v77 = v70 - 1;
        }
        if (v77)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v104 = *v89;
            v103 = (float32x2_t *)((char *)v89 + v15);
            v105 = *v103;
            v89 = (float32x2_t *)((char *)v103 + v15);
            a11.n128_u64[0] = *(_QWORD *)v79;
            v79 += 2;
            a12.n128_u64[0] = *(_QWORD *)v81;
            v81 += 2;
            a13.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            a14.i64[0] = *(_QWORD *)v85;
            v85 += 2;
            v90 = vmla_n_f32(v90, v104, a11.n128_f32[0]);
            v91 = vmla_n_f32(v91, v104, a12.n128_f32[0]);
            v92 = vmla_n_f32(v92, v104, a13.f32[0]);
            v93 = vmla_n_f32(v93, v104, a14.f32[0]);
            v99 = vmla_lane_f32(v99, v105, (float32x2_t)a11.n128_u64[0], 1);
            v100 = vmla_lane_f32(v100, v105, (float32x2_t)a12.n128_u64[0], 1);
            v101 = vmla_lane_f32(v101, v105, *(float32x2_t *)a13.f32, 1);
            v102 = vmla_lane_f32(v102, v105, *(float32x2_t *)a14.f32, 1);
            v55 = v77 <= 2;
            v77 -= 2;
          }
          while (!v55);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
          v92 = vadd_f32(v92, v101);
          v93 = vadd_f32(v93, v102);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v90, a7);
        *v89 = *(float32x2_t *)v14.f32;
        v106 = (float32x2_t *)((char *)v89 + v15);
        *v106 = vmul_n_f32(v91, a7);
        v107 = (float32x2_t *)((char *)v106 + v15);
        *v107 = vmul_n_f32(v92, a7);
        *(float32x2_t *)((char *)v107 + v15) = vmul_n_f32(v93, a7);
      }
      v108 = a2 & 3;
      if (!j && v108 != 0)
      {
        v109 = (float32x2_t *)(a5 + 4 * v17);
        v110 = (float32x2_t *)(a3 + (v70 - 1) * v16);
        if (v108 != 1)
        {
          if (v108 != 2)
          {
            v111 = *v110;
            v113 = *v109;
            v112 = (float32x2_t *)((char *)v109 + v15);
            v115 = *v112;
            v114 = (float32x2_t *)((char *)v112 + v15);
            a12.n128_u64[0] = (unint64_t)*v114;
            v116 = v110[1].f32[0];
            v110 = (float32x2_t *)((char *)v110 - v16);
            *v114 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v113, v111.f32[0]), vmul_lane_f32(v115, v111, 1)), vmul_n_f32(*v114, v116)), a7);
            v109 = &v114[v15 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v117 = *v110;
          v119 = *v109;
          v118 = (float32x2_t *)((char *)v109 + v15);
          a11.n128_u64[0] = (unint64_t)*v118;
          v110 = (float32x2_t *)((char *)v110 - v16);
          *v118 = vmul_n_f32(vadd_f32(vmul_n_f32(v119, v117.f32[0]), vmul_lane_f32(*v118, v117, 1)), a7);
          v109 = (float32x2_t *)((char *)v118 - v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v109, v110->f32[0]), a7);
        *v109 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v120 = a2;
      for (k = __OFSUB__(a2, 3); v120 > 3; k = __OFSUB__(v120, 3))
      {
        v120 -= 4;
        v122 = (unsigned __int32 *)(a5 + v120 * v15 + 4 * v17);
        v123 = (float *)(a3 + v120 * v16 + 4 * v120);
        v124 = (float32x2_t *)&v123[(unint64_t)v16 / 4];
        v125 = (float32x4_t *)&v123[(unint64_t)v16 / 2];
        v126 = (float32x4_t *)&v123[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v127 = v120;
        v128 = *v123;
        v129 = (float *)(a3 + v120 * v16);
        v130 = *v124;
        v131 = (float *)v124 - v120;
        v132 = *v125;
        v133 = &v125->f32[-v120];
        v134 = *v126;
        v135 = &v126->f32[-v120];
        a11.n128_u32[0] = *v122;
        v136 = &v122[(unint64_t)v15 / 4];
        a12.n128_u32[0] = *v136;
        v137 = &v136[(unint64_t)v15 / 4];
        a13.i32[0] = *v137;
        v138 = &v137[(unint64_t)v15 / 4];
        a14.i32[0] = *v138;
        v139 = (float *)((char *)&v138[(unint64_t)v15 / 4] - v120 * v15 + -4 * v15);
        a11.n128_u64[0] = (unint64_t)vtrn1_s32((int32x2_t)a11.n128_u64[0], (int32x2_t)a12.n128_u64[0]);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        a11.n128_u64[1] = a13.i64[0];
        v132.i32[3] = 0;
        v14.f32[0] = v128 * a11.n128_f32[0];
        v140 = vmul_f32(v130, (float32x2_t)a11.n128_u64[0]);
        v141 = vmulq_f32(v132, (float32x4_t)a11);
        v142 = vmulq_f32(v134, (float32x4_t)a11);
        v143 = (float32x2_t)vpaddq_f32(v141, v141).u64[0];
        v144 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
        if ((v120 & 1) != 0)
        {
          v145 = *v139;
          v139 = (float *)((char *)v139 + v15);
          v146 = *v129++;
          v147 = *v131++;
          v148 = *v133++;
          v149 = *v135++;
          v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v145 * v146);
          v140.f32[0] = vaddv_f32(v140) + (float)(v145 * v147);
          v143.f32[0] = vaddv_f32(v143) + (float)(v145 * v148);
          v144.f32[0] = vaddv_f32(v144) + (float)(v145 * v149);
          v127 = v120 - 1;
        }
        if (v127)
        {
          do
          {
            v151.f32[0] = *v139;
            v150 = (__int32 *)&v139[(unint64_t)v15 / 4];
            v151.i32[1] = *v150;
            v139 = (float *)&v150[(unint64_t)v15 / 4];
            a11.n128_u64[0] = *(_QWORD *)v129;
            v129 += 2;
            a12.n128_u64[0] = *(_QWORD *)v131;
            v131 += 2;
            a13.i64[0] = *(_QWORD *)v133;
            v133 += 2;
            a14.i64[0] = *(_QWORD *)v135;
            v135 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v151, (float32x2_t)a11.n128_u64[0]);
            v140 = vmla_f32(v140, v151, (float32x2_t)a12.n128_u64[0]);
            v143 = vmla_f32(v143, v151, *(float32x2_t *)a13.f32);
            v144 = vmla_f32(v144, v151, *(float32x2_t *)a14.f32);
            v55 = v127 <= 2;
            v127 -= 2;
          }
          while (!v55);
        }
        *v139 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v152 = &v139[(unint64_t)v15 / 4];
        *v152 = vaddv_f32(v140) * a7;
        v153 = &v152[(unint64_t)v15 / 4];
        *v153 = vaddv_f32(v143) * a7;
        v153[(unint64_t)v15 / 4] = vaddv_f32(v144) * a7;
      }
      v154 = a2 & 3;
      if (!k && v154 != 0)
      {
        v155 = (__int32 *)(a5 + 4 * v17);
        v156 = (float32x2_t *)(a3 + (v120 - 1) * v16);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v157 = *v156;
            v159.i32[0] = *v155;
            v158 = &v155[(unint64_t)v15 / 4];
            v159.i32[1] = *v158;
            v160 = (float *)&v158[(unint64_t)v15 / 4];
            v161 = v156[1].f32[0];
            v156 = (float32x2_t *)((char *)v156 - v16);
            *v160 = (float)(vaddv_f32(vmul_f32(v159, v157)) + (float)(v161 * *v160)) * a7;
            v155 = (__int32 *)&v160[v15 / 0xFFFFFFFFFFFFFFFELL];
          }
          v162 = *v156;
          v164.i32[0] = *v155;
          v163 = &v155[(unint64_t)v15 / 4];
          v164.i32[1] = *v163;
          v156 = (float32x2_t *)((char *)v156 - v16);
          *(float *)v163 = vaddv_f32(vmul_f32(v164, v162)) * a7;
          v155 = &v163[v15 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v155 = (float)(*(float *)v155 * v156->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RUNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL i;
  float32x4_t *v22;
  uint64_t v23;
  float *v24;
  float32x2_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  float32x4_t *v60;
  float *v61;
  float32x2_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  BOOL j;
  float32x2_t *v71;
  uint64_t v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x2_t *v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  unint64_t *v84;
  float32x2_t v85;
  unint64_t *v86;
  unint64_t *v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t v112;
  float32x2_t *v113;
  float32x2_t v114;
  float32x2_t *v115;
  float32x2_t v116;
  uint64_t v117;
  BOOL k;
  __int32 *v119;
  uint64_t v120;
  float *v121;
  float32x2_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  float *v125;
  float v126;
  float *v127;
  float32x2_t v128;
  float *v129;
  float32x4_t v130;
  float *v131;
  unsigned __int32 *v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  float *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  __int32 *v145;
  float32x2_t v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  float32x2_t *v152;
  float32x2_t v153;
  __int32 *v154;
  float32x2_t v155;
  float *v156;
  float *v157;
  float v158;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_21;
  v19 = result - 3;
  do
  {
    v20 = a2;
    for (i = __OFSUB__(a2, 3); v20 > 3; i = __OFSUB__(v20, 3))
    {
      v20 -= 4;
      v22 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v23 = a3 + v20 * v17 + 4 * v20;
      v24 = (float *)(v23 + v17);
      v25 = (float32x2_t *)(v23 + 2 * v17);
      v26 = (float32x4_t *)(v23 + v17 + 2 * v17);
      v27 = v20;
      v28 = (float32x2_t *)(a3 + v20 * v17);
      v29 = *v24;
      v30 = &v24[-v20];
      v31 = *v25;
      v32 = (float *)v25 - v20;
      v33 = *v26;
      v34 = &v26->f32[-v20];
      v36 = *v22;
      v35 = (float32x4_t *)((char *)v22 + v16);
      a12 = *v35;
      v37 = (float32x4_t *)((char *)v35 + v16);
      a13 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v16);
      a14 = *v38;
      v39 = (float32x4_t *)((char *)v38 + v16 - v20 * v16 + -4 * v16);
      v40 = vmlaq_n_f32(a12, v36, v29);
      v41 = vaddq_f32(vmlaq_n_f32(a13, v36, v31.f32[0]), vmulq_lane_f32(a12, v31, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(a14, v36, v33.f32[0]), a13, v33, 2), vmulq_lane_f32(a12, *(float32x2_t *)v33.f32, 1));
      if ((v20 & 1) != 0)
      {
        v43 = *v39;
        v39 = (float32x4_t *)((char *)v39 + v16);
        v44 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v36 = vmlaq_n_f32(v36, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v27 = v20 - 1;
      }
      if (v27)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v39;
          v52 = (float32x4_t *)((char *)v39 + v16);
          v54 = *v52;
          v39 = (float32x4_t *)((char *)v52 + v16);
          v55 = *v28++;
          a12.i64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v36 = vmlaq_n_f32(v36, v53, v55.f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, v55, 1);
          v49 = vmlaq_lane_f32(v49, v54, *(float32x2_t *)a12.f32, 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v56 = v27 <= 2;
          v27 -= 2;
        }
        while (!v56);
        v36 = vaddq_f32(v36, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v36, a7);
      v15 = vmulq_n_f32(v40, a7);
      *v39 = v14;
      v57 = (float32x4_t *)((char *)v39 + v16);
      *v57 = v15;
      v58 = (float32x4_t *)((char *)v57 + v16);
      *v58 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v58 + v16) = vmulq_n_f32(v42, a7);
    }
    v59 = a2 & 3;
    if (!i && v59 != 0)
    {
      v60 = (float32x4_t *)(a5 + 4 * v18);
      v61 = (float *)(a3 + (v20 - 1) * v17);
      if (v59 != 1)
      {
        if (v59 != 2)
        {
          v62 = *(float32x2_t *)v61;
          v64 = *v60;
          v63 = (float32x4_t *)((char *)v60 + v16);
          v66 = *v63;
          v65 = (float32x4_t *)((char *)v63 + v16);
          v61 = (float *)((char *)v61 - v17);
          a12 = vmlaq_n_f32(*v65, v64, v62.f32[0]);
          *v65 = vmulq_n_f32(vaddq_f32(vmulq_lane_f32(v66, v62, 1), a12), a7);
          v60 = (float32x4_t *)((char *)v65 - 2 * v16);
        }
        v68 = *v60;
        v67 = (float32x4_t *)((char *)v60 + v16);
        *v67 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v68, *v61), *v67), a7);
        v60 = (float32x4_t *)((char *)v67 - v16);
      }
      v14 = vmulq_n_f32(*v60, a7);
      *v60 = v14;
    }
    v18 += 4;
    v56 = v19 <= 4;
    v19 -= 4;
  }
  while (!v56);
  v56 = v19 <= -3;
  result = v19 + 3;
  if (!v56)
  {
LABEL_21:
    if (result > 1)
    {
      v69 = a2;
      for (j = __OFSUB__(a2, 3); v69 > 3; j = __OFSUB__(v69, 3))
      {
        v69 -= 4;
        v71 = (float32x2_t *)(a5 + v69 * v16 + 4 * v18);
        v72 = a3 + v69 * v17 + 4 * v69;
        v73 = (float *)(v72 + v17);
        v74 = (float32x2_t *)(v72 + 2 * v17);
        v75 = (float32x4_t *)(v72 + v17 + 2 * v17);
        v76 = v69;
        v77 = (float32x2_t *)(a3 + v69 * v17);
        v78 = *v73;
        v79 = &v73[-v69];
        v80 = *v74;
        v81 = (float *)v74 - v69;
        v82 = *v75;
        v83 = &v75->f32[-v69];
        v85 = *v71;
        v84 = (unint64_t *)((char *)v71 + v16);
        a12.i64[0] = *v84;
        v86 = (unint64_t *)((char *)v84 + v16);
        a13.i64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v16);
        a14.i64[0] = *v87;
        v88 = (float32x2_t *)((char *)v87 + v16 - v69 * v16 + -4 * v16);
        v89 = vmla_n_f32(*(float32x2_t *)a12.f32, v85, v78);
        v90 = vadd_f32(vmla_n_f32(*(float32x2_t *)a13.f32, v85, v80.f32[0]), vmul_lane_f32(*(float32x2_t *)a12.f32, v80, 1));
        v91 = vadd_f32(vmla_laneq_f32(vmla_n_f32(*(float32x2_t *)a14.f32, v85, v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)v82.f32, 1));
        if ((v69 & 1) != 0)
        {
          v92 = *v88;
          v88 = (float32x2_t *)((char *)v88 + v16);
          v93 = v77->f32[0];
          v77 = (float32x2_t *)((char *)v77 + 4);
          v94 = *v79++;
          v95 = *v81++;
          v96 = *v83++;
          v85 = vmla_n_f32(v85, v92, v93);
          v89 = vmla_n_f32(v89, v92, v94);
          v90 = vmla_n_f32(v90, v92, v95);
          v91 = vmla_n_f32(v91, v92, v96);
          v76 = v69 - 1;
        }
        if (v76)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v102 = *v88;
            v101 = (float32x2_t *)((char *)v88 + v16);
            v103 = *v101;
            v88 = (float32x2_t *)((char *)v101 + v16);
            v104 = *v77++;
            a12.i64[0] = *(_QWORD *)v79;
            v79 += 2;
            a13.i64[0] = *(_QWORD *)v81;
            v81 += 2;
            a14.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            v85 = vmla_n_f32(v85, v102, v104.f32[0]);
            v89 = vmla_n_f32(v89, v102, a12.f32[0]);
            v90 = vmla_n_f32(v90, v102, a13.f32[0]);
            v91 = vmla_n_f32(v91, v102, a14.f32[0]);
            v97 = vmla_lane_f32(v97, v103, v104, 1);
            v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
            v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
            v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)a14.f32, 1);
            v56 = v76 <= 2;
            v76 -= 2;
          }
          while (!v56);
          v85 = vadd_f32(v85, v97);
          v89 = vadd_f32(v89, v98);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v85, a7);
        *(float32x2_t *)v15.f32 = vmul_n_f32(v89, a7);
        *v88 = *(float32x2_t *)v14.f32;
        v105 = (float32x2_t *)((char *)v88 + v16);
        *v105 = *(float32x2_t *)v15.f32;
        v106 = (float32x2_t *)((char *)v105 + v16);
        *v106 = vmul_n_f32(v90, a7);
        *(float32x2_t *)((char *)v106 + v16) = vmul_n_f32(v91, a7);
      }
      v107 = a2 & 3;
      if (!j && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + 4 * v18);
        v109 = (float *)(a3 + (v69 - 1) * v17);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v110 = *(float32x2_t *)v109;
            v112 = *v108;
            v111 = (float32x2_t *)((char *)v108 + v16);
            v114 = *v111;
            v113 = (float32x2_t *)((char *)v111 + v16);
            *(float32x2_t *)a12.f32 = *v113;
            v109 = (float *)((char *)v109 - v17);
            *(float32x2_t *)v15.f32 = vmul_lane_f32(v114, v110, 1);
            *v113 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v112, v110.f32[0]), *(float32x2_t *)v15.f32), *v113), a7);
            v108 = &v113[v16 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v116 = *v108;
          v115 = (float32x2_t *)((char *)v108 + v16);
          *v115 = vmul_n_f32(vadd_f32(vmul_n_f32(v116, *v109), *v115), a7);
          v108 = (float32x2_t *)((char *)v115 - v16);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(*v108, a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v117 = a2;
      for (k = __OFSUB__(a2, 3); v117 > 3; k = __OFSUB__(v117, 3))
      {
        v117 -= 4;
        v119 = (__int32 *)(a5 + v117 * v16 + 4 * v18);
        v120 = a3 + v117 * v17 + 4 * v117;
        v121 = (float *)(v120 + v17);
        v122 = (float32x2_t *)(v120 + 2 * v17);
        v123 = (float32x4_t *)(v120 + v17 + 2 * v17);
        v124 = v117;
        v125 = (float *)(a3 + v117 * v17);
        v126 = *v121;
        v127 = &v121[-v117];
        v128 = *v122;
        v129 = (float *)v122 - v117;
        v130 = *v123;
        v131 = &v123->f32[-v117];
        v14.i32[0] = *v119;
        v132 = (unsigned __int32 *)&v119[(unint64_t)v16 / 4];
        a12.i32[0] = *v132;
        v133 = &v132[(unint64_t)v16 / 4];
        a13.i32[0] = *v133;
        v134 = &v133[(unint64_t)v16 / 4];
        a14.i32[0] = *v134;
        v135 = (float *)((char *)&v134[(unint64_t)v16 / 4] - v117 * v16 + -4 * v16);
        *(int32x2_t *)v136.f32 = vtrn1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v136.i64[1] = a13.i64[0];
        v130.i32[3] = 0;
        v14.i32[1] = 0;
        v138 = vmul_f32(v128, *(float32x2_t *)v136.f32);
        v137 = vmulq_f32(v130, v136);
        v15.f32[0] = (float)(v126 * v136.f32[0]) + a12.f32[0];
        v139 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
        v138.f32[0] = vaddv_f32(v138) + a13.f32[0];
        v139.f32[0] = vaddv_f32(v139) + a14.f32[0];
        if ((v117 & 1) != 0)
        {
          v140 = *v135;
          v135 = (float *)((char *)v135 + v16);
          v141 = *v125++;
          v142 = *v127++;
          v143 = *v129++;
          v144 = *v131++;
          v14.f32[0] = v14.f32[0] + (float)(v140 * v141);
          v15.f32[0] = v15.f32[0] + (float)(v140 * v142);
          v138.f32[0] = v138.f32[0] + (float)(v140 * v143);
          v139.f32[0] = v139.f32[0] + (float)(v140 * v144);
          v124 = v117 - 1;
        }
        if (v124)
        {
          do
          {
            v146.f32[0] = *v135;
            v145 = (__int32 *)&v135[(unint64_t)v16 / 4];
            v146.i32[1] = *v145;
            v135 = (float *)&v145[(unint64_t)v16 / 4];
            v147 = *(float32x2_t *)v125;
            v125 += 2;
            a12.i64[0] = *(_QWORD *)v127;
            v127 += 2;
            a13.i64[0] = *(_QWORD *)v129;
            v129 += 2;
            a14.i64[0] = *(_QWORD *)v131;
            v131 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v146, v147);
            *(float32x2_t *)v15.f32 = vmla_f32(*(float32x2_t *)v15.f32, v146, *(float32x2_t *)a12.f32);
            v138 = vmla_f32(v138, v146, *(float32x2_t *)a13.f32);
            v139 = vmla_f32(v139, v146, *(float32x2_t *)a14.f32);
            v56 = v124 <= 2;
            v124 -= 2;
          }
          while (!v56);
        }
        *v135 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v148 = &v135[(unint64_t)v16 / 4];
        *v148 = vaddv_f32(*(float32x2_t *)v15.f32) * a7;
        v149 = &v148[(unint64_t)v16 / 4];
        *v149 = vaddv_f32(v138) * a7;
        v149[(unint64_t)v16 / 4] = vaddv_f32(v139) * a7;
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v18);
        v152 = (float32x2_t *)(a3 + (v117 - 1) * v17);
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v153 = *v152;
            v155.i32[0] = *v151;
            v154 = &v151[(unint64_t)v16 / 4];
            v155.i32[1] = *v154;
            v156 = (float *)&v154[(unint64_t)v16 / 4];
            v152 = (float32x2_t *)((char *)v152 - v17);
            *v156 = (float)(vaddv_f32(vmul_f32(v155, v153)) + *v156) * a7;
            v151 = (__int32 *)&v156[v16 / 0xFFFFFFFFFFFFFFFELL];
          }
          v158 = *(float *)v151;
          v157 = (float *)&v151[(unint64_t)v16 / 4];
          *v157 = (float)((float)(v158 * v152->f32[0]) + *v157) * a7;
          v151 = (__int32 *)&v157[v16 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = *(float *)v151 * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RUTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float *v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  BOOL v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  float *v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t *v76;
  float *v77;
  uint64_t v78;
  float32x2_t *v79;
  float v80;
  float32x4_t *v81;
  float32x2_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t *v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float *v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  float32x2_t *v115;
  float32x2_t v116;
  unint64_t *v117;
  float32x2_t v118;
  float32x2_t *v119;
  float *v120;
  float v121;
  float v122;
  unint64_t *v123;
  float32x2_t v124;
  float32x2_t *v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned __int32 *v129;
  float *v130;
  uint64_t v131;
  float32x2_t *v132;
  float v133;
  float32x4_t *v134;
  float32x2_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  unsigned __int32 *v140;
  unsigned __int32 *v141;
  unsigned __int32 *v142;
  float *v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float *v147;
  float v148;
  float v149;
  float32x4_t *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float *v164;
  float v165;
  float v166;
  float *v167;
  float *v168;
  float v169;
  float v170;
  float *v171;
  float v172;
  float v173;
  float *v174;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v26 = *v23;
        v25 = (float32x2_t *)&v23[(unint64_t)v16 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v16);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v16);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v16);
        a11 = *v22;
        v33 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v15);
        a13 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a14 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v37 = vmulq_laneq_f32(a14, v32, 3);
        v38 = vaddq_f32(vmlaq_lane_f32(vmulq_lane_f32(a14, *(float32x2_t *)v32.f32, 1), a12, v28, 1), vmulq_lane_f32(a13, *(float32x2_t *)v30.f32, 1));
        v39 = vaddq_f32(vmulq_laneq_f32(a14, v32, 2), vmulq_laneq_f32(a13, v30, 2));
        v40 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(a14, v32.f32[0]), a12, v28.f32[0]), vmlaq_n_f32(vmulq_n_f32(a13, v30.f32[0]), a11, v26));
        if ((v24 & 1) != 0)
        {
          v41 = *v36;
          v36 = (float32x4_t *)((char *)v36 + v15);
          a11 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v16);
          v40 = vmlaq_n_f32(v40, v41, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v41, *(float32x2_t *)a11.f32, 1);
          v39 = vmlaq_laneq_f32(v39, v41, a11, 2);
          v37 = vmlaq_laneq_f32(v37, v41, a11, 3);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          do
          {
            v47 = *v36;
            v46 = (float32x4_t *)((char *)v36 + v15);
            v48 = *v46;
            v36 = (float32x4_t *)((char *)v46 + v15);
            a11 = *v31;
            v49 = (float32x4_t *)((char *)v31 + v16);
            a12 = *v49;
            v31 = (float32x4_t *)((char *)v49 + v16);
            v40 = vmlaq_n_f32(v40, v47, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v47, *(float32x2_t *)a11.f32, 1);
            v39 = vmlaq_laneq_f32(v39, v47, a11, 2);
            v37 = vmlaq_laneq_f32(v37, v47, a11, 3);
            v42 = vmlaq_n_f32(v42, v48, a12.f32[0]);
            v43 = vmlaq_lane_f32(v43, v48, *(float32x2_t *)a12.f32, 1);
            v44 = vmlaq_laneq_f32(v44, v48, a12, 2);
            v45 = vmlaq_laneq_f32(v45, v48, a12, 3);
            v50 = v24 <= 2;
            v24 -= 2;
          }
          while (!v50);
          v40 = vaddq_f32(v40, v42);
          v38 = vaddq_f32(v38, v43);
          v39 = vaddq_f32(v39, v44);
          v37 = vaddq_f32(v37, v45);
        }
        v14 = vmulq_n_f32(v40, a7);
        v51 = (float32x4_t *)((char *)v36 - (a2 - v19) * v15);
        *v51 = v14;
        v52 = (float32x4_t *)((char *)v51 + v15);
        *v52 = vmulq_n_f32(v38, a7);
        v53 = (float32x4_t *)((char *)v52 + v15);
        *v53 = vmulq_n_f32(v39, a7);
        *(float32x4_t *)((char *)v53 + v15) = vmulq_n_f32(v37, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v50 = v21 <= 4;
        v21 -= 4;
      }
      while (!v50);
    }
    v54 = a2 & 3;
    if (!v20 && v54 != 0)
    {
      v55 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v56 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v54 != 1)
      {
        if (v54 != 2)
        {
          v58 = *v56;
          v57 = &v56[(unint64_t)v16 / 4];
          v60 = *v57;
          v59 = &v57[(unint64_t)v16 / 4];
          v61 = *v59;
          v56 = &v59[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v63 = *v55;
          v62 = (float32x4_t *)((char *)v55 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *v64;
          v66 = (float32x4_t *)((char *)v64 - 2 * v15);
          *v66 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v58), vmulq_n_f32(v65, v60)), vmulq_n_f32(a12, v61)), a7);
          v55 = (float32x4_t *)((char *)v66 + v15);
        }
        v68 = *v56;
        v67 = &v56[(unint64_t)v16 / 4];
        v69 = *v67;
        v56 = v67 + 1;
        v71 = *v55;
        v70 = (float32x4_t *)((char *)v55 + v15);
        a11 = *v70;
        v72 = (float32x4_t *)((char *)v70 - v15);
        *v72 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v71, v68), vmulq_n_f32(a11, v69)), a7);
        v55 = (float32x4_t *)((char *)v72 + v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v55, *v56), a7);
      *v55 = v14;
    }
    v17 += 4;
    v50 = v18 <= 4;
    v18 -= 4;
  }
  while (!v50);
  v50 = v18 <= -3;
  result = v18 + 3;
  if (!v50)
  {
LABEL_22:
    if (result > 1)
    {
      v73 = 0;
      v74 = __OFSUB__(a2, 3);
      v75 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v76 = (unint64_t *)(a5 + v73 * v15 + 4 * v17);
          v77 = (float *)(a3 + v73 * v16 + 4 * v73);
          v78 = a2 - v73 - 4;
          v80 = *v77;
          v79 = (float32x2_t *)&v77[(unint64_t)v16 / 4];
          v82 = *v79;
          v81 = (float32x4_t *)((char *)v79 + v16);
          v84 = *v81;
          v83 = (float32x4_t *)((char *)v81 + v16);
          v86 = *v83;
          v85 = (float32x4_t *)((char *)v83 + v16);
          a11.i64[0] = *v76;
          v87 = (unint64_t *)((char *)v76 + v15);
          a12.i64[0] = *v87;
          v88 = (unint64_t *)((char *)v87 + v15);
          a13.i64[0] = *v88;
          v89 = (unint64_t *)((char *)v88 + v15);
          a14.i64[0] = *v89;
          v90 = (float32x2_t *)((char *)v89 + v15);
          v91 = vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3);
          v92 = vadd_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, *(float32x2_t *)v86.f32, 1), *(float32x2_t *)a12.f32, v82, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, *(float32x2_t *)v84.f32, 1));
          v93 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 2), vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2));
          v94 = vadd_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)a14.f32, v86.f32[0]), *(float32x2_t *)a12.f32, v82.f32[0]), vmla_n_f32(vmul_n_f32(*(float32x2_t *)a13.f32, v84.f32[0]), *(float32x2_t *)a11.f32, v80));
          if ((v78 & 1) != 0)
          {
            v95 = *v90;
            v90 = (float32x2_t *)((char *)v90 + v15);
            a11 = *v85;
            v85 = (float32x4_t *)((char *)v85 + v16);
            v94 = vmla_n_f32(v94, v95, a11.f32[0]);
            v92 = vmla_lane_f32(v92, v95, *(float32x2_t *)a11.f32, 1);
            v93 = vmla_laneq_f32(v93, v95, a11, 2);
            v91 = vmla_laneq_f32(v91, v95, a11, 3);
            v78 = a2 - v73 - 5;
          }
          if (v78)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v101 = *v90;
              v100 = (float32x2_t *)((char *)v90 + v15);
              v102 = *v100;
              v90 = (float32x2_t *)((char *)v100 + v15);
              a11 = *v85;
              v103 = (float32x4_t *)((char *)v85 + v16);
              a12 = *v103;
              v85 = (float32x4_t *)((char *)v103 + v16);
              v94 = vmla_n_f32(v94, v101, a11.f32[0]);
              v92 = vmla_lane_f32(v92, v101, *(float32x2_t *)a11.f32, 1);
              v93 = vmla_laneq_f32(v93, v101, a11, 2);
              v91 = vmla_laneq_f32(v91, v101, a11, 3);
              v96 = vmla_n_f32(v96, v102, a12.f32[0]);
              v97 = vmla_lane_f32(v97, v102, *(float32x2_t *)a12.f32, 1);
              v98 = vmla_laneq_f32(v98, v102, a12, 2);
              v99 = vmla_laneq_f32(v99, v102, a12, 3);
              v50 = v78 <= 2;
              v78 -= 2;
            }
            while (!v50);
            v94 = vadd_f32(v94, v96);
            v92 = vadd_f32(v92, v97);
            v93 = vadd_f32(v93, v98);
            v91 = vadd_f32(v91, v99);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v94, a7);
          v104 = (float32x2_t *)((char *)v90 - (a2 - v73) * v15);
          *v104 = *(float32x2_t *)v14.f32;
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v92, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = vmul_n_f32(v93, a7);
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v91, a7);
          v73 += 4;
          v74 = __OFSUB__(v75, 4);
          v50 = v75 <= 4;
          v75 -= 4;
        }
        while (!v50);
      }
      v107 = a2 & 3;
      if (!v74 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v73 * v15 + 4 * v17);
        v109 = (float *)(a3 + v73 * v16 + 4 * v73);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v111 = *v109;
            v110 = &v109[(unint64_t)v16 / 4];
            v113 = *v110;
            v112 = &v110[(unint64_t)v16 / 4];
            v114 = *v112;
            v109 = &v112[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v116 = *v108;
            v115 = (float32x2_t *)((char *)v108 + v15);
            v118 = *v115;
            v117 = (unint64_t *)((char *)v115 + v15);
            a12.i64[0] = *v117;
            v119 = (float32x2_t *)&v117[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v119 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v116, v111), vmul_n_f32(v118, v113)), vmul_n_f32(*(float32x2_t *)a12.f32, v114)), a7);
            v108 = (float32x2_t *)((char *)v119 + v15);
          }
          v121 = *v109;
          v120 = &v109[(unint64_t)v16 / 4];
          v122 = *v120;
          v109 = v120 + 1;
          v124 = *v108;
          v123 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v123;
          v125 = (float32x2_t *)((char *)v123 - v15);
          *v125 = vmul_n_f32(vadd_f32(vmul_n_f32(v124, v121), vmul_n_f32(*(float32x2_t *)a11.f32, v122)), a7);
          v108 = (float32x2_t *)((char *)v125 + v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v108, *v109), a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v126 = 0;
      v127 = __OFSUB__(a2, 3);
      v128 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v129 = (unsigned __int32 *)(a5 + v126 * v15 + 4 * v17);
          v130 = (float *)(a3 + v126 * v16 + 4 * v126);
          v131 = a2 - v126 - 4;
          v133 = *v130;
          v132 = (float32x2_t *)&v130[(unint64_t)v16 / 4];
          v135 = *v132;
          v134 = (float32x4_t *)((char *)v132 + v16);
          v137 = *v134;
          v136 = (float32x4_t *)((char *)v134 + v16);
          v139 = *v136;
          v138 = (float32x4_t *)((char *)v136 + v16);
          a11.i32[0] = *v129;
          v140 = &v129[(unint64_t)v15 / 4];
          a12.i32[0] = *v140;
          v141 = &v140[(unint64_t)v15 / 4];
          a13.i32[0] = *v141;
          v142 = &v141[(unint64_t)v15 / 4];
          a14.i32[0] = *v142;
          v143 = (float *)&v142[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v137.i32[3] = 0;
          v14.f32[0] = v133 * a11.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(*(float32x2_t *)v14.f32, vmul_lane_f32(v135, *(float32x2_t *)a11.f32, 1));
          v144 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v137, a11, 2), vmulq_laneq_f32(v139, a11, 3)));
          if ((v131 & 1) != 0)
          {
            v145 = *v143;
            v143 = (float *)((char *)v143 + v15);
            a11 = *v138;
            v138 = (float32x4_t *)((char *)v138 + v16);
            v144 = vmlaq_n_f32(v144, a11, v145);
            v131 = a2 - v126 - 5;
          }
          if (v131)
          {
            v146 = 0uLL;
            do
            {
              v148 = *v143;
              v147 = &v143[(unint64_t)v15 / 4];
              v149 = *v147;
              v143 = &v147[(unint64_t)v15 / 4];
              a11 = *v138;
              v150 = (float32x4_t *)((char *)v138 + v16);
              a12 = *v150;
              v138 = (float32x4_t *)((char *)v150 + v16);
              v144 = vmlaq_n_f32(v144, a11, v148);
              v146 = vmlaq_n_f32(v146, a12, v149);
              v50 = v131 <= 2;
              v131 -= 2;
            }
            while (!v50);
            v144 = vaddq_f32(v144, v146);
          }
          v14 = vmulq_n_f32(v144, a7);
          v151 = (_DWORD *)((char *)v143 - (a2 - v126) * v15);
          *v151 = v14.i32[0];
          v152 = &v151[(unint64_t)v15 / 4];
          *v152 = v14.i32[1];
          v153 = &v152[(unint64_t)v15 / 4];
          *v153 = v14.i32[2];
          v153[(unint64_t)v15 / 4] = v14.i32[3];
          v126 += 4;
          v127 = __OFSUB__(v128, 4);
          v50 = v128 <= 4;
          v128 -= 4;
        }
        while (!v50);
      }
      v154 = a2 & 3;
      if (!v127 && v154 != 0)
      {
        v155 = (float *)(a5 + v126 * v15 + 4 * v17);
        v156 = (float *)(a3 + v126 * v16 + 4 * v126);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v158 = *v156;
            v157 = &v156[(unint64_t)v16 / 4];
            v160 = *v157;
            v159 = &v157[(unint64_t)v16 / 4];
            v161 = *v159;
            v156 = &v159[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v163 = *v155;
            v162 = &v155[(unint64_t)v15 / 4];
            v165 = *v162;
            v164 = &v162[(unint64_t)v15 / 4];
            v166 = *v164;
            v167 = &v164[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v167 = (float)((float)((float)(v158 * v163) + (float)(v160 * v165)) + (float)(v161 * v166)) * a7;
            v155 = &v167[(unint64_t)v15 / 4];
          }
          v169 = *v156;
          v168 = &v156[(unint64_t)v16 / 4];
          v170 = *v168;
          v156 = v168 + 1;
          v172 = *v155;
          v171 = &v155[(unint64_t)v15 / 4];
          v173 = *v171;
          v174 = &v171[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v174 = (float)((float)(v169 * v172) + (float)(v170 * v173)) * a7;
          v155 = &v174[(unint64_t)v15 / 4];
        }
        *v155 = (float)(*v155 * *v156) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RUTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, int32x2_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float v27;
  float32x4_t *v28;
  float32x2_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  BOOL v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  float *v72;
  float32x2_t *v73;
  float v74;
  float32x4_t *v75;
  float32x2_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  unint64_t *v79;
  unint64_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x2_t *v98;
  uint64_t v99;
  float32x2_t *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float32x2_t *v105;
  float32x2_t v106;
  unint64_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  unint64_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int32 *v116;
  uint64_t v117;
  float *v118;
  float32x2_t *v119;
  float v120;
  float32x4_t *v121;
  float32x2_t v122;
  float32x4_t *v123;
  float32x4_t v124;
  unsigned __int32 *v125;
  unsigned __int32 *v126;
  __int32 *v127;
  float *v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float *v132;
  float v133;
  float v134;
  float32x4_t *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float *v147;
  float v148;
  float v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float *v154;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_22;
  v19 = result - 3;
  do
  {
    v20 = 0;
    v21 = __OFSUB__(a2, 3);
    v22 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v23 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
        v24 = a2 - v20 - 4;
        v25 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
        v27 = *v25;
        v26 = (float32x2_t *)&v25[(unint64_t)v17 / 4];
        v29 = *v26;
        v28 = (float32x4_t *)((char *)v26 + v17);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v17);
        a11 = *v23;
        v32 = (float32x4_t *)((char *)v23 + v16);
        a12 = *v32;
        v33 = (float32x4_t *)((char *)v32 + v16);
        a13 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v16);
        v36 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v16);
        v37 = vmlaq_laneq_f32(a13, v36, v31, 2);
        v38 = vaddq_f32(vmlaq_lane_f32(a12, v36, *(float32x2_t *)v31.f32, 1), vmulq_lane_f32(a13, v29, 1));
        v39 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(a11, v36, v31.f32[0]), a12, v27), vmulq_n_f32(a13, v29.f32[0]));
        if ((v24 & 1) != 0)
        {
          v40 = *v35;
          v35 = (float32x4_t *)((char *)v35 + v16);
          a11 = *v30;
          v30 = (float32x4_t *)((char *)v30 + v17);
          v39 = vmlaq_n_f32(v39, v40, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v40, *(float32x2_t *)a11.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v40, a11, 2);
          v36 = vmlaq_laneq_f32(v36, v40, a11, 3);
          v24 = a2 - v20 - 5;
        }
        if (v24)
        {
          v41 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          do
          {
            v46 = *v35;
            v45 = (float32x4_t *)((char *)v35 + v16);
            v47 = *v45;
            v35 = (float32x4_t *)((char *)v45 + v16);
            a11 = *v30;
            v48 = (float32x4_t *)((char *)v30 + v17);
            a12 = *v48;
            v30 = (float32x4_t *)((char *)v48 + v17);
            v39 = vmlaq_n_f32(v39, v46, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v46, *(float32x2_t *)a11.f32, 1);
            v37 = vmlaq_laneq_f32(v37, v46, a11, 2);
            v36 = vmlaq_laneq_f32(v36, v46, a11, 3);
            v41 = vmlaq_n_f32(v41, v47, a12.f32[0]);
            v42 = vmlaq_lane_f32(v42, v47, *(float32x2_t *)a12.f32, 1);
            v43 = vmlaq_laneq_f32(v43, v47, a12, 2);
            v44 = vmlaq_laneq_f32(v44, v47, a12, 3);
            v49 = v24 <= 2;
            v24 -= 2;
          }
          while (!v49);
          v39 = vaddq_f32(v39, v41);
          v38 = vaddq_f32(v38, v42);
          v37 = vaddq_f32(v37, v43);
          v36 = vaddq_f32(v36, v44);
        }
        v14 = vmulq_n_f32(v39, a7);
        v15 = vmulq_n_f32(v38, a7);
        v50 = (float32x4_t *)((char *)v35 - (a2 - v20) * v16);
        *v50 = v14;
        v51 = (float32x4_t *)((char *)v50 + v16);
        *v51 = v15;
        v52 = (float32x4_t *)((char *)v51 + v16);
        *v52 = vmulq_n_f32(v37, a7);
        *(float32x4_t *)((char *)v52 + v16) = vmulq_n_f32(v36, a7);
        v20 += 4;
        v21 = __OFSUB__(v22, 4);
        v49 = v22 <= 4;
        v22 -= 4;
      }
      while (!v49);
    }
    v53 = a2 & 3;
    if (!v21 && v53 != 0)
    {
      v54 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v55 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
      if (v53 != 1)
      {
        if (v53 != 2)
        {
          v57 = *v55;
          v56 = &v55[(unint64_t)v17 / 4];
          v58 = *v56;
          v55 = v56 + 1;
          v60 = *v54;
          v59 = (float32x4_t *)((char *)v54 + v16);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v16);
          a12 = *v61;
          v63 = (float32x4_t *)((char *)v61 - 2 * v16);
          *v63 = vmulq_n_f32(vaddq_f32(vmlaq_n_f32(v60, v62, v57), vmulq_n_f32(a12, v58)), a7);
          v54 = (float32x4_t *)((char *)v63 + v16);
        }
        v65 = *v54;
        v64 = (float32x4_t *)((char *)v54 + v16);
        a11 = *v64;
        v66 = (float32x4_t *)((char *)v64 - v16);
        *v66 = vmulq_n_f32(vmlaq_n_f32(v65, a11, *v55), a7);
        v54 = (float32x4_t *)((char *)v66 + v16);
      }
      v14 = vmulq_n_f32(*v54, a7);
      *v54 = v14;
    }
    v18 += 4;
    v49 = v19 <= 4;
    v19 -= 4;
  }
  while (!v49);
  v49 = v19 <= -3;
  result = v19 + 3;
  if (!v49)
  {
LABEL_22:
    if (result > 1)
    {
      v67 = 0;
      v68 = __OFSUB__(a2, 3);
      v69 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v70 = (unint64_t *)(a5 + v67 * v16 + 4 * v18);
          v71 = a2 - v67 - 4;
          v72 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
          v74 = *v72;
          v73 = (float32x2_t *)&v72[(unint64_t)v17 / 4];
          v76 = *v73;
          v75 = (float32x4_t *)((char *)v73 + v17);
          v78 = *v75;
          v77 = (float32x4_t *)((char *)v75 + v17);
          a11.i64[0] = *v70;
          v79 = (unint64_t *)((char *)v70 + v16);
          a12.i64[0] = *v79;
          v80 = (unint64_t *)((char *)v79 + v16);
          a13.i64[0] = *v80;
          v81 = (float32x2_t *)((char *)v80 + v16);
          v83 = *v81;
          v82 = (float32x2_t *)((char *)v81 + v16);
          v84 = vmla_laneq_f32(*(float32x2_t *)a13.f32, v83, v78, 2);
          v85 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v83, *(float32x2_t *)v78.f32, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, v76, 1));
          v86 = vadd_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)a11.f32, v83, v78.f32[0]), *(float32x2_t *)a12.f32, v74), vmul_n_f32(*(float32x2_t *)a13.f32, v76.f32[0]));
          if ((v71 & 1) != 0)
          {
            v87 = *v82;
            v82 = (float32x2_t *)((char *)v82 + v16);
            a11 = *v77;
            v77 = (float32x4_t *)((char *)v77 + v17);
            v86 = vmla_n_f32(v86, v87, a11.f32[0]);
            v85 = vmla_lane_f32(v85, v87, *(float32x2_t *)a11.f32, 1);
            v84 = vmla_laneq_f32(v84, v87, a11, 2);
            v83 = vmla_laneq_f32(v83, v87, a11, 3);
            v71 = a2 - v67 - 5;
          }
          if (v71)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v93 = *v82;
              v92 = (float32x2_t *)((char *)v82 + v16);
              v94 = *v92;
              v82 = (float32x2_t *)((char *)v92 + v16);
              a11 = *v77;
              v95 = (float32x4_t *)((char *)v77 + v17);
              a12 = *v95;
              v77 = (float32x4_t *)((char *)v95 + v17);
              v86 = vmla_n_f32(v86, v93, a11.f32[0]);
              v85 = vmla_lane_f32(v85, v93, *(float32x2_t *)a11.f32, 1);
              v84 = vmla_laneq_f32(v84, v93, a11, 2);
              v83 = vmla_laneq_f32(v83, v93, a11, 3);
              v88 = vmla_n_f32(v88, v94, a12.f32[0]);
              v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)a12.f32, 1);
              v90 = vmla_laneq_f32(v90, v94, a12, 2);
              v91 = vmla_laneq_f32(v91, v94, a12, 3);
              v49 = v71 <= 2;
              v71 -= 2;
            }
            while (!v49);
            v86 = vadd_f32(v86, v88);
            v85 = vadd_f32(v85, v89);
            v84 = vadd_f32(v84, v90);
            v83 = vadd_f32(v83, v91);
          }
          *(float32x2_t *)v15.f32 = vmul_n_f32(v85, a7);
          v96 = (float32x2_t *)((char *)v82 - (a2 - v67) * v16);
          *v96 = vmul_n_f32(v86, a7);
          v97 = (float32x2_t *)((char *)v96 + v16);
          *v97 = *(float32x2_t *)v15.f32;
          v98 = (float32x2_t *)((char *)v97 + v16);
          *v98 = vmul_n_f32(v84, a7);
          *(float32x2_t *)((char *)v98 + v16) = vmul_n_f32(v83, a7);
          v67 += 4;
          v68 = __OFSUB__(v69, 4);
          v49 = v69 <= 4;
          v69 -= 4;
        }
        while (!v49);
      }
      v99 = a2 & 3;
      if (!v68 && v99 != 0)
      {
        v100 = (float32x2_t *)(a5 + v67 * v16 + 4 * v18);
        v101 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
        if (v99 != 1)
        {
          if (v99 != 2)
          {
            v103 = *v101;
            v102 = &v101[(unint64_t)v17 / 4];
            v104 = *v102;
            v101 = v102 + 1;
            v106 = *v100;
            v105 = (float32x2_t *)((char *)v100 + v16);
            v108 = *v105;
            v107 = (unint64_t *)((char *)v105 + v16);
            a12.i64[0] = *v107;
            v109 = (float32x2_t *)&v107[v16 / 0xFFFFFFFFFFFFFFFCLL];
            *v109 = vmul_n_f32(vadd_f32(vmla_n_f32(v106, v108, v103), vmul_n_f32(*(float32x2_t *)a12.f32, v104)), a7);
            v100 = (float32x2_t *)((char *)v109 + v16);
          }
          v111 = *v100;
          v110 = (unint64_t *)((char *)v100 + v16);
          a11.i64[0] = *v110;
          v112 = (float32x2_t *)((char *)v110 - v16);
          *v112 = vmul_n_f32(vmla_n_f32(v111, *(float32x2_t *)a11.f32, *v101), a7);
          v100 = (float32x2_t *)((char *)v112 + v16);
        }
        *v100 = vmul_n_f32(*v100, a7);
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v113 = 0;
      v114 = __OFSUB__(a2, 3);
      v115 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v116 = (unsigned __int32 *)(a5 + v113 * v16 + 4 * v18);
          v117 = a2 - v113 - 4;
          v118 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
          v120 = *v118;
          v119 = (float32x2_t *)&v118[(unint64_t)v17 / 4];
          v122 = *v119;
          v121 = (float32x4_t *)((char *)v119 + v17);
          v124 = *v121;
          v123 = (float32x4_t *)((char *)v121 + v17);
          a11.i32[0] = *v116;
          v125 = &v116[(unint64_t)v16 / 4];
          a12.i32[0] = *v125;
          v126 = &v125[(unint64_t)v16 / 4];
          a13.i32[0] = *v126;
          v127 = (__int32 *)&v126[(unint64_t)v16 / 4];
          a14.i32[0] = *v127;
          v128 = (float *)&v127[(unint64_t)v16 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, a14);
          a11.i64[1] = a13.i64[0];
          v124.i32[3] = 0;
          v15.f32[0] = v120 * a12.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(vmul_laneq_f32(v122, a11, 2), *(float32x2_t *)v15.f32);
          v129 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v124, a11, 3), a11));
          if ((v117 & 1) != 0)
          {
            v130 = *v128;
            v128 = (float *)((char *)v128 + v16);
            a11 = *v123;
            v123 = (float32x4_t *)((char *)v123 + v17);
            v129 = vmlaq_n_f32(v129, a11, v130);
            v117 = a2 - v113 - 5;
          }
          if (v117)
          {
            v131 = 0uLL;
            do
            {
              v133 = *v128;
              v132 = &v128[(unint64_t)v16 / 4];
              v134 = *v132;
              v128 = &v132[(unint64_t)v16 / 4];
              a11 = *v123;
              v135 = (float32x4_t *)((char *)v123 + v17);
              a12 = *v135;
              v123 = (float32x4_t *)((char *)v135 + v17);
              v129 = vmlaq_n_f32(v129, a11, v133);
              v131 = vmlaq_n_f32(v131, a12, v134);
              v49 = v117 <= 2;
              v117 -= 2;
            }
            while (!v49);
            v129 = vaddq_f32(v129, v131);
          }
          v14 = vmulq_n_f32(v129, a7);
          v136 = (_DWORD *)((char *)v128 - (a2 - v113) * v16);
          *v136 = v14.i32[0];
          v137 = &v136[(unint64_t)v16 / 4];
          *v137 = v14.i32[1];
          v138 = &v137[(unint64_t)v16 / 4];
          *v138 = v14.i32[2];
          v138[(unint64_t)v16 / 4] = v14.i32[3];
          v113 += 4;
          v114 = __OFSUB__(v115, 4);
          v49 = v115 <= 4;
          v115 -= 4;
        }
        while (!v49);
      }
      v139 = a2 & 3;
      if (!v114 && v139 != 0)
      {
        v140 = (float *)(a5 + v113 * v16 + 4 * v18);
        v141 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
        if (v139 != 1)
        {
          if (v139 != 2)
          {
            v143 = *v141;
            v142 = &v141[(unint64_t)v17 / 4];
            v144 = *v142;
            v141 = v142 + 1;
            v146 = *v140;
            v145 = &v140[(unint64_t)v16 / 4];
            v148 = *v145;
            v147 = &v145[(unint64_t)v16 / 4];
            v149 = *v147;
            v150 = &v147[v16 / 0xFFFFFFFFFFFFFFFELL];
            *v150 = (float)((float)(v146 + (float)(v143 * v148)) + (float)(v144 * v149)) * a7;
            v140 = &v150[(unint64_t)v16 / 4];
          }
          v152 = *v140;
          v151 = &v140[(unint64_t)v16 / 4];
          v153 = *v151;
          v154 = &v151[v16 / 0xFFFFFFFFFFFFFFFCLL];
          *v154 = (float)(v152 + (float)(*v141 * v153)) * a7;
          v140 = &v154[(unint64_t)v16 / 4];
        }
        *v140 = *v140 * a7;
      }
    }
  }
  return result;
}

void ssyrk_Pack_Lower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,int __N,uint64_t a31,int a32,uint64_t a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,char a42)
{
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, float);
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *(*v72)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v73)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const float *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, float);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v126;
  uint64_t v127;
  float *(*v128)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  float *(*v132)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t __Na;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v42 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16);
  v139 = v45;
  v122 = v46;
  v114 = v47;
  v49 = v48;
  v51 = v50;
  v53 = v52;
  v54 = v43;
  STACK[0x101F8] = *MEMORY[0x1E0C80C00];
  if (v42 == 111)
    v55 = v44;
  else
    v55 = 1;
  v113 = v55;
  vars0 = v44;
  if (v42 == 111)
    v56 = 1;
  else
    v56 = v44;
  v121 = v56;
  v57 = (void (*)(uint64_t, uint64_t, float))sgePack_B_NoTran;
  if (v42 == 111)
    v57 = (void (*)(uint64_t, uint64_t, float))sgePack_B_Tran;
  v112 = v57;
  v58 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sgePack_A_Tran;
  if (v42 == 111)
    v58 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sgePack_A_NoTran;
  v120 = v58;
  if (v43 < 1)
  {
    v136 = &a42;
    v59 = &STACK[0x10180];
  }
  else
  {
    v136 = (char *)malloc_type_malloc((v43 << 9) + 65632, 0x100004052888210uLL);
    v59 = (unint64_t *)(v136 + 0x10000);
  }
  v130 = (uint64_t)(v59 + 8);
  if (v49 >= 1)
  {
    v60 = 0;
    v61 = 16 * v139;
    v116 = 4 * v139;
    v62 = 4 * v139 + 4;
    v119 = v54;
    v111 = v49;
    while (1)
    {
      v115 = v60 + 128;
      v63 = v60 + 128 <= v49 ? 128 : v49 - v60;
      v123 = v114 + 4 * v60 * v113;
      v112(v63, v54, v53);
      if (v54 >= 1)
        break;
LABEL_96:
      v60 = v115;
      v49 = v111;
      if (v115 >= v111)
        goto LABEL_97;
    }
    v64 = v63;
    v65 = 0;
    v66 = v51 != 0.0;
    if (v51 == 1.0 || v60 != 0)
      v66 = 0;
    v129 = v66;
    v68 = v63 & 3;
    if (v63 <= 0)
      v68 = -(-v63 & 3);
    v117 = 4 - v68;
    v118 = v68;
    v69 = v122;
    v128 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
    v132 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
    __Na = v63;
    while (1)
    {
      v138 = v65;
      v70 = v65 + 128;
      if (v65 + 128 <= v54)
        v71 = 128;
      else
        v71 = v54 - v65;
      v131 = v122 + 4 * v65;
      v72 = v132;
      if ((v71 & 7) != 0)
        v72 = sgebpUnalignedC_8M4N;
      v132 = v72;
      v73 = v128;
      if ((v71 & 7) != 0)
        v73 = sgebpScaleUnalignedC_8M4N;
      v128 = v73;
      v120(v71, v64, v123 + 4 * v65 * v121, vars0, v136);
      v74 = v138;
      v75 = v71;
      v135 = v71;
      v126 = v70;
      v127 = v69;
      vars8 = v71 + v138;
      if (v71 + v138 >= 4)
      {
        v76 = 0;
        v77 = 0;
        v140 = v71 + v138 - 3;
        v78 = v69;
        v64 = __Na;
        while (2)
        {
          v79 = v77 - v74;
          v80 = v77 & 4;
          if ((v77 & 4) != 0)
            v81 = v77 - v74 - 4;
          else
            v81 = v77 - v74;
          v82 = v81 & ~(v79 >> 63);
          if (v82 > v75)
            goto LABEL_63;
          v83 = v131 + 4 * v77 * v139;
          v84 = (_OWORD *)(v130 + 4 * v77 * v64);
          if (v79 < 0)
          {
            v86 = 0;
            if (v129)
              goto LABEL_54;
          }
          else
          {
            v133 = 16 * (v76 & 1);
            v134 = v130 + 4 * v77 * v64;
            v85 = (char *)&a34 + v133;
            a40 = 0u;
            a41 = 0u;
            a38 = 0u;
            a39 = 0u;
            a36 = 0u;
            a37 = 0u;
            a34 = 0u;
            a35 = 0u;
            if (v75 - v81 >= 8)
              v86 = 8;
            else
              v86 = v75 - v81;
            v132((float32x4_t *)&v136[4 * v81 * v64], (uint64_t)v84, (float32x4_t *)&a34, 8, v86, v64);
            v83 += 4 * v81;
            if (v129)
            {
              v87 = 0;
              v84 = (_OWORD *)v134;
              v88 = v78 + v133 + 4 * v81;
              v64 = __Na;
              v75 = v135;
              do
              {
                if (v80 < v86)
                {
                  v89 = 0;
                  do
                  {
                    *(float *)(v88 + 4 * v89) = *(float *)&v85[4 * v89] + (float)(*(float *)(v88 + 4 * v89) * v51);
                    ++v89;
                  }
                  while (v80 + v89 < v86);
                }
                ++v80;
                ++v87;
                v85 += 36;
                v88 += v62;
              }
              while (v87 != 4);
              v61 = 16 * v139;
              v74 = v138;
              if (v86 + v82 >= v135)
                goto LABEL_63;
LABEL_54:
              v128((float32x4_t *)&v136[4 * (v86 + v82) * v64], (uint64_t)v84, (float32x4_t *)(v83 + 4 * v86), v139, v75 - (v86 + v82), v64, v51);
LABEL_62:
              v64 = __Na;
              v74 = v138;
              v75 = v135;
LABEL_63:
              v77 += 4;
              ++v76;
              v78 += v61;
              if (v77 >= v140)
                goto LABEL_66;
              continue;
            }
            v90 = 0;
            v84 = (_OWORD *)v134;
            v91 = v78 + v133 + 4 * v81;
            v64 = __Na;
            v75 = v135;
            do
            {
              if (v80 < v86)
              {
                v92 = 0;
                do
                {
                  *(float *)(v91 + 4 * v92) = *(float *)(v91 + 4 * v92) + *(float *)&v85[4 * v92];
                  ++v92;
                }
                while (v80 + v92 < v86);
              }
              ++v80;
              ++v90;
              v85 += 36;
              v91 += v62;
            }
            while (v90 != 4);
            v61 = 16 * v139;
            v74 = v138;
            if (v86 + v82 >= v135)
              goto LABEL_63;
          }
          break;
        }
        v132((float32x4_t *)&v136[4 * (v86 + v82) * v64], (uint64_t)v84, (float32x4_t *)(v83 + 4 * v86), v139, v75 - (v86 + v82), v64);
        goto LABEL_62;
      }
      v77 = 0;
      v64 = __Na;
LABEL_66:
      v93 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v93)
      {
        v94 = v77 - v74;
        v95 = (v77 - v74) & ~((v77 - v74) >> 63);
        if (v75 > v95)
          break;
      }
LABEL_95:
      v69 = v127 + 512;
      v65 = v126;
      v54 = v119;
      if (v126 >= v119)
        goto LABEL_96;
    }
    v96 = v131 + 4 * v77 * v139;
    v97 = (const float *)(v130 + 4 * v77 * v64);
    if (v94 < 0)
    {
      v99 = 0;
      v105 = 0;
      v106 = 0;
      if (v129)
      {
LABEL_86:
        sgebpScale_8M1N((float32x4_t *)&v136[4 * v105 * v64 + 4 * v99], v97, v96, v139, v75 - v105, v93, __Na, v51);
LABEL_94:
        v64 = __Na;
        goto LABEL_95;
      }
    }
    else
    {
      a38 = 0u;
      a39 = 0u;
      a36 = 0u;
      a37 = 0u;
      a34 = 0u;
      a35 = 0u;
      if (v75 - v95 >= 8)
        v98 = 8;
      else
        v98 = v75 - v95;
      if (v118)
        v99 = (v95 & 4) * v117;
      else
        v99 = 0;
      v100 = v96 + 4 * v95;
      sgebp_8M1N((float32x4_t *)&v136[4 * v94 * v64 + 4 * v99], (const float *)(v130 + 4 * v77 * v64), (uint64_t)&a34, 8, v98, v93, v64);
      if (v129)
      {
        v64 = __Na;
        if (v93 >= 1)
        {
          v101 = 0;
          v102 = v127 + v116 * v77 + 4 * v95;
          v103 = &a34;
          do
          {
            v104 = 0;
            do
            {
              *(float *)(v102 + 4 * v104) = *((float *)v103 + v104) + (float)(*(float *)(v102 + 4 * v104) * v51);
              ++v104;
            }
            while (v101 + v104 < v93);
            ++v101;
            v103 = (__int128 *)((char *)v103 + 36);
            v102 += v62;
          }
          while (v101 != v93);
        }
        v96 = v100 + 4 * v98;
        v105 = v98 + v95;
        v61 = 16 * v139;
        v75 = v135;
        goto LABEL_86;
      }
      v64 = __Na;
      if (v93 >= 1)
      {
        v107 = 0;
        v108 = v127 + v116 * v77 + 4 * v95;
        v109 = &a34;
        do
        {
          v110 = 0;
          do
          {
            *(float *)(v108 + 4 * v110) = *(float *)(v108 + 4 * v110) + *((float *)v109 + v110);
            ++v110;
          }
          while (v107 + v110 < v93);
          ++v107;
          v109 = (__int128 *)((char *)v109 + 36);
          v108 += v62;
        }
        while (v107 != v93);
      }
      v96 = v100 + 4 * v98;
      v106 = v98 + v95;
      v61 = 16 * v139;
      v75 = v135;
    }
    sgebp_8M1N((float32x4_t *)&v136[4 * v106 * v64 + 4 * v99], v97, v96, v139, v75 - v106, v93, __Na);
    goto LABEL_94;
  }
LABEL_97:
  if (v54 >= 1)
    free(v136);
}

void pixelBufferLineIterator_cold_1()
{
  __assert_rtn("GetPixelSizeInBytes", "CMIBareMetalTexture.m", 171, "( pixelSizeInBytes % 8) == 0");
}

void SSRCastTypeEnumFromString_cold_1()
{
  __assert_rtn("SSRCastTypeEnumFromString", "CMISmartStyleRendererUtilsV1.m", 130, "type != SSRCastTypeCount");
}

void SSRTuningTypeEnumFromString_cold_1()
{
  __assert_rtn("SSRTuningTypeEnumFromString", "CMISmartStyleRendererUtilsV1.m", 162, "type != SSRTuningTypeCount");
}

void SSRStatsTypeEnumFromString_cold_1()
{
  __assert_rtn("SSRStatsTypeEnumFromString", "CMISmartStyleRendererUtilsV1.m", 225, "type != SSRStatsTypeCount");
}

void GetPixelBlockSizeInBytes_cold_1()
{
  __assert_rtn("GetPixelBlockSizeInBytes", "PixelBufferUtils.m", 142, "(pixelSizeInBytes % 8) == 0");
}

void filter_coefficients_cold_1()
{
  __assert_rtn("to_fixed", "FigM2MController.m", 47, "intsz + decsz <= (int)(sizeof( ret) * 8)");
}

void bfpn_create_correction_model_from_fdr_cold_1()
{
  const __CFAllocator *v0;
  const void **v1;
  CFIndex v2;
  const CFArrayCallBacks *v3;

  dlerror();
  v0 = (const __CFAllocator *)abort_report_np();
  CFArrayCreate(v0, v1, v2, v3);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1E0C9D620](dict, rect);
}

OSStatus CMSampleBufferCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMVideoFormatDescriptionRef formatDescription, const CMSampleTimingInfo *sampleTiming, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF58](allocator, imageBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, sampleTiming, sampleBufferOut);
}

uint64_t CMTimeDivide()
{
  return MEMORY[0x1E0C9F300]();
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

OSStatus CMVideoFormatDescriptionCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9F528](allocator, imageBuffer, formatDescriptionOut);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8900](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8908](buffer, *(_QWORD *)&attachmentMode);
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  MEMORY[0x1E0CA8928](sourceBuffer, destinationBuffer);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8950](buffer, key, value, *(_QWORD *)&attachmentMode);
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8958](buffer, theAttachments, *(_QWORD *)&attachmentMode);
}

uint64_t CVMetalBufferCacheCreate()
{
  return MEMORY[0x1E0CA8A10]();
}

uint64_t CVMetalBufferCacheCreateBufferFromImage()
{
  return MEMORY[0x1E0CA8A18]();
}

uint64_t CVMetalBufferCacheFlush()
{
  return MEMORY[0x1E0CA8A20]();
}

uint64_t CVMetalBufferGetBuffer()
{
  return MEMORY[0x1E0CA8A28]();
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
  MEMORY[0x1E0CA8A40](textureCache, options);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AC0](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  MEMORY[0x1E0CA8B10](pixelBuffer, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B68](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x1E0CA8B78](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

CFDictionaryRef CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef allocator, OSType pixelFormat)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8C08](allocator, *(_QWORD *)&pixelFormat);
}

uint64_t FigCFDictionaryGetCGFloatIfPresent()
{
  return MEMORY[0x1E0C9FBB0]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1E0C9FC10]();
}

uint64_t FigCreateIOSurfacePropertiesDictionary()
{
  return MEMORY[0x1E0CEC8D8]();
}

uint64_t FigCreatePixelBufferCacheModeArray()
{
  return MEMORY[0x1E0CEC8E8]();
}

uint64_t FigDebugAssert3()
{
  return MEMORY[0x1E0CA04E0]();
}

uint64_t FigGetCFPreferenceDoubleWithDefault()
{
  return MEMORY[0x1E0CA0A60]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1E0CA0A70]();
}

uint64_t FigNote_AllowInternalDefaultLogs()
{
  return MEMORY[0x1E0CA0F80]();
}

uint64_t FigSignalErrorAt()
{
  return MEMORY[0x1E0CA1550]();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB9A0](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x1E0D3A1D0]();
}

uint64_t IOSurfaceAcceleratorGetHistogram()
{
  return MEMORY[0x1E0D3A1D8]();
}

uint64_t IOSurfaceAcceleratorSetCustomFilter()
{
  return MEMORY[0x1E0D3A1F0]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x1E0D3A200]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBBA0](buffer, planeIndex);
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x1E0CBBBD8]();
}

size_t IOSurfaceGetElementHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBBF0](buffer);
}

size_t IOSurfaceGetElementWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC00](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBC38](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC48](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC70](buffer);
}

uint64_t IOSurfaceGetSliceCount()
{
  return MEMORY[0x1E0CBBCB8]();
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBCF0](buffer, planeIndex);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t MTLPixelFormatGetInfo()
{
  return MEMORY[0x1E0CC69B8]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x1E0CC69C8]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

simd_float2x2 __invert_f2(simd_float2x2 a1)
{
  simd_float2 v1;
  simd_float2 v2;
  simd_float2x2 result;

  MEMORY[0x1E0C80B28]((__n128)a1, *(__n128 *)((char *)&a1 + 8));
  result.columns[1] = v2;
  result.columns[0] = v1;
  return result;
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x1E0C80B30]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

uint64_t _get_cpu_capabilities()
{
  return MEMORY[0x1E0C80F88]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1E0C81068]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int cblas_errprn(int __ierr, int __info, char *__form, ...)
{
  return MEMORY[0x1E0C8BB98](*(_QWORD *)&__ierr, *(_QWORD *)&__info, __form);
}

void cblas_scopy(const int __N, const float *__X, const int __incX, float *__Y, const int __incY)
{
  MEMORY[0x1E0C8BBC8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
}

float cblas_sdot(const int __N, const float *__X, const int __incX, const float *__Y, const int __incY)
{
  float result;

  MEMORY[0x1E0C8BBD8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
  return result;
}

void cblas_sger(const CBLAS_ORDER __Order, const int __M, const int __N, const float __alpha, const float *__X, const int __incX, const float *__Y, const int __incY, float *__A, const int __lda)
{
  MEMORY[0x1E0C8BC30](*(_QWORD *)&__Order, *(_QWORD *)&__M, *(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY, __A, __alpha);
}

void cblas_sscal(const int __N, const float __alpha, float *__X, const int __incX)
{
  MEMORY[0x1E0C8BC60](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __alpha);
}

void cblas_xerbla(int __p, char *__rout, char *__form, ...)
{
  MEMORY[0x1E0C8BC78](*(_QWORD *)&__p, __rout, __form);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D18](group, queue, context, work);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t e5rt_async_event_create_from_iosurface_shared_event()
{
  return MEMORY[0x1E0D1F8B0]();
}

uint64_t e5rt_async_event_release()
{
  return MEMORY[0x1E0D1F8C8]();
}

uint64_t e5rt_async_event_set_active_future_value()
{
  return MEMORY[0x1E0D1F8D8]();
}

uint64_t e5rt_buffer_object_get_iosurface()
{
  return MEMORY[0x1E0D1F920]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x1E0D1F938]();
}

uint64_t e5rt_execution_stream_config_options_create()
{
  return MEMORY[0x1E0D1FA68]();
}

uint64_t e5rt_execution_stream_config_options_set_enable_low_latency_async_events()
{
  return MEMORY[0x1E0D1FA70]();
}

uint64_t e5rt_execution_stream_config_options_set_skip_io_fences()
{
  return MEMORY[0x1E0D1FA78]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x1E0D1FA80]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x1E0D1FA98]();
}

uint64_t e5rt_execution_stream_operation_bind_completion_event()
{
  return MEMORY[0x1E0D1FAB8]();
}

uint64_t e5rt_execution_stream_operation_bind_dependent_events()
{
  return MEMORY[0x1E0D1FAD0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x1E0D1FAE0]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x1E0D1FB60]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x1E0D1FB98]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x1E0D1FBA8]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x1E0D1FBB8]();
}

uint64_t e5rt_execution_stream_set_config_options()
{
  return MEMORY[0x1E0D1FBE0]();
}

uint64_t e5rt_execution_stream_submit_async()
{
  return MEMORY[0x1E0D1FBE8]();
}

uint64_t e5rt_get_last_error_message()
{
  return MEMORY[0x1E0D1FBF8]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x1E0D1FC08]();
}

uint64_t e5rt_io_port_is_tensor()
{
  return MEMORY[0x1E0D1FC38]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x1E0D1FC48]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x1E0D1FC68]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x1E0D1FDC8]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x1E0D1FE50]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x1E0D1FE68]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x1E0D1FE70]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1E0D1FF10]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1E0D1FF38]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1E0D1FF40]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1E0D1FFB8]();
}

uint64_t espresso_network_bind_direct_cvpixelbuffer()
{
  return MEMORY[0x1E0D1FFD8]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x1E0D20060]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1E0D200B0]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1E0D200C8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1E0D200E8]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x1E0D20110]();
}

uint64_t espresso_plan_submit()
{
  return MEMORY[0x1E0D20150]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fgetc(FILE *a1)
{
  return MEMORY[0x1E0C83388](a1);
}

uint64_t fig_log_call_emit_and_clean_up_after_send_and_compose()
{
  return MEMORY[0x1E0CA1F60]();
}

uint64_t fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type()
{
  return MEMORY[0x1E0CA1F68]();
}

uint64_t fig_log_get_emitter()
{
  return MEMORY[0x1E0CA1F70]();
}

uint64_t fig_note_initialize_category_with_default_work_cf()
{
  return MEMORY[0x1E0CA1F88]();
}

int fls(int a1)
{
  return MEMORY[0x1E0C83418](*(_QWORD *)&a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fscanf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83520](a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

uint64_t lsame_()
{
  return MEMORY[0x1E0C8BDB8]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x1E0C840C0](__b, __pattern4, __len);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x1E0C84E88]();
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

double sdot_(int *n, float *sx, int *incx, float *sy, int *incy)
{
  double result;

  MEMORY[0x1E0C8BDC8](n, sx, incx, sy, incy);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

uint64_t sposv_NEWLAPACK()
{
  return MEMORY[0x1E0C8BEF8]();
}

void srand(unsigned int a1)
{
  MEMORY[0x1E0C85478](*(_QWORD *)&a1);
}

int sscal_(int *n, float *sa, float *sx, int *incx)
{
  return MEMORY[0x1E0C8BF08](n, sa, sx, incx);
}

uint64_t ssyevx_NEWLAPACK()
{
  return MEMORY[0x1E0C8BF28]();
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CC00](buf, height, width, *(_QWORD *)&pixelBits, *(_QWORD *)&flags);
}

uint64_t xerbla_()
{
  return MEMORY[0x1E0C8DBD0]();
}

