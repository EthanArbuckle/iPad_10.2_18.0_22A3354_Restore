void partial apply for closure #3 in ConversationManagerClient.init()(uint64_t *a1)
{
  closure #3 in ConversationManagerClient.init()(a1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

ValueMetadata *type metadata accessor for ConversationManagerInterface()
{
  return &type metadata for ConversationManagerInterface;
}

ValueMetadata *type metadata accessor for GroupActivityDescription()
{
  return &type metadata for GroupActivityDescription;
}

uint64_t one-time initialization function for client(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.client);
}

uint64_t one-time initialization function for default(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.default);
}

uint64_t protocol witness for ActivitySessionContainerProvider.onActivitySessionsChanged.getter in conformance ConversationManagerClient()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*v0 + direct field offset for ConversationManagerClient.publishers);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

void type metadata completion function for ConversationManagerClient()
{
  unint64_t v0;

  type metadata accessor for Published<TUConversationActivitySessionContainer?>();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

void type metadata accessor for Published<TUConversationActivitySessionContainer?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<TUConversationActivitySessionContainer?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TUConversationActivitySessionContainer?);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  }
}

uint64_t Lock.init()()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = 0;
  return v0;
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self();
}

id static ConversationManagerClient.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static ConversationManagerClient.shared;
}

void closure #4 in ConversationManagerClient.init()(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;

  v3 = *a1;
  v4 = *a1 + 64;
  v5 = 1 << *(_BYTE *)(*a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v9 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = *(id *)(*(_QWORD *)(v3 + 56) + 8 * i);
    if (objc_msgSend(v15, sel_state) == (id)3)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_28:
      *a2 = v15;
      return;
    }

    if (v7)
      goto LABEL_4;
LABEL_5:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v12 >= v8)
      goto LABEL_27;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v9;
    if (v13)
      goto LABEL_22;
    v9 = v12 + 1;
    if (v12 + 1 >= v8)
      goto LABEL_27;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    if (v13)
      goto LABEL_22;
    v9 = v12 + 2;
    if (v12 + 2 >= v8)
      goto LABEL_27;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    if (v13)
      goto LABEL_22;
    v9 = v12 + 3;
    if (v12 + 3 >= v8)
      goto LABEL_27;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    if (v13)
      goto LABEL_22;
    v9 = v12 + 4;
    if (v12 + 4 >= v8)
      goto LABEL_27;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    if (v13)
      goto LABEL_22;
    v14 = v12 + 5;
    if (v14 >= v8)
    {
LABEL_27:
      swift_release();
      swift_bridgeObjectRelease();
      v15 = 0;
      goto LABEL_28;
    }
    v13 = *(_QWORD *)(v4 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_30;
        if (v9 >= v8)
          goto LABEL_27;
        v13 = *(_QWORD *)(v4 + 8 * v9);
        ++v14;
        if (v13)
          goto LABEL_22;
      }
    }
    v9 = v14;
LABEL_22:
    v7 = (v13 - 1) & v13;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

void Lock.withLock<A>(_:)(void (*a1)(void))
{
  uint64_t v1;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t partial apply for closure #2 in HostConnectionNotificationObserver.init(queue:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in HostConnectionNotificationObserver.init(queue:)(a1, *(void **)(v1 + 16));
}

uint64_t closure #1 in HostConnectionNotificationObserver.init(queue:)(uint64_t *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a1;
  *v7 = a2;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = a2;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((a2 & 1) != 0)
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (result)
    {
      v11 = v8;
      CurrentValueSubject.send(_:)();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void one-time initialization function for canConnectBypassingSharePlayRestriction()
{
  id v0;
  char v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = specialized NSProcessInfo.getEntitlementBoolValue(_:)(0xD000000000000039, 0x80000001ACF7C660);

  static HostConnectionNotificationObserver.canConnectBypassingSharePlayRestriction = v1 & 1;
}

uint64_t specialized NSProcessInfo.getEntitlementBoolValue(_:)(uint64_t a1, uint64_t a2)
{
  SecTaskRef v4;
  __SecTask *v5;
  __CFString *v6;
  CFTypeRef v7;
  uint64_t v8;
  unsigned __int8 v10;

  v4 = SecTaskCreateFromSelf(0);
  if (!v4)
    return 2;
  v5 = v4;
  v6 = (__CFString *)MEMORY[0x1AF4480F4](a1, a2);
  v7 = SecTaskCopyValueForEntitlement(v5, v6, 0);

  v8 = 2;
  if (v7)
  {
    if (swift_dynamicCast())
      return v10;
    else
      return 2;
  }
  return v8;
}

uint64_t ConversationManagerClient.onActivitySessionsChanged.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + direct field offset for ConversationManagerClient.publishers);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

void closure #3 in ConversationManagerClient.init()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t Strong;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *a1;
  Strong = swift_unknownObjectUnownedLoadStrong();
  v8 = *(id *)(Strong + direct field offset for XPCClient.queue);

  *v5 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  LOBYTE(Strong) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((Strong & 1) != 0)
  {
    if (one-time initialization token for client == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v22 = v13;
    *(_DWORD *)v12 = 136315138;
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001ACF7BFE0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v10, v11, "Handling %s by requesting initial state.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v13, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);
  }

  if (v6 == 1)
  {
    v14 = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v16 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x1A0))();

    if ((v16 & 1) == 0)
    {
      v17 = swift_unknownObjectUnownedLoadStrong();
      (*(void (**)(void))((*v15 & (uint64_t)v17->isa) + 0x1E8))();
      goto LABEL_13;
    }
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      v20 = "ConversationManagerClient not re-requesting initial state since we have initial state.";
LABEL_11:
      _os_log_impl(&dword_1ACCCC000, v17, v18, v20, v19, 2u);
      MEMORY[0x1AF44981C](v19, -1, -1);
    }
  }
  else
  {
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      v20 = "Host has no conversations.";
      goto LABEL_11;
    }
  }
LABEL_13:

}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

char *ConversationManagerClient.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  objc_class *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(_QWORD *, _QWORD);
  uint64_t v51;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[4];
  id v63;
  objc_super v64;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>);
  v2 = *(_QWORD *)(v1 - 8);
  v58 = v1;
  v59 = v2;
  MEMORY[0x1E0C80A78](v1);
  v56 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>>);
  v5 = *(_QWORD *)(v4 - 8);
  v60 = v4;
  v61 = v5;
  MEMORY[0x1E0C80A78](v4);
  v57 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<HostConnectionNotificationObserver, OS_dispatch_queue>);
  v11 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  v55 = v11;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[direct field offset for ConversationManagerClient.pluginClientReporter] = 0;
  *(_QWORD *)&v0[direct field offset for ConversationManagerClient.pubSubTopicReporter] = 0;
  v18 = direct field offset for ConversationManagerClient.customEndpointProviders;
  v19 = v0;
  v20 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[v18] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v21 = (uint64_t *)&v19[direct field offset for ConversationManagerClient.publishers];
  v62[0] = specialized Dictionary.init(dictionaryLiteral:)(v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>);
  swift_allocObject();
  v22 = CurrentValueSubject.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  v23 = PassthroughSubject.init()();
  *v21 = v22;
  v21[1] = v23;
  *(_QWORD *)&v19[direct field offset for ConversationManagerClient.subscriptions] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v19[direct field offset for ConversationManagerClient.$__lazy_storage_$_notification] = 0;
  v19[direct field offset for ConversationManagerClient.hasInitialState] = 0;
  v24 = &v19[direct field offset for ConversationManagerClient._activeSessionContainer];
  v62[0] = 0;
  v53[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUConversationActivitySessionContainer?);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v24, v17, v14);

  v25 = (objc_class *)type metadata accessor for ConversationManagerClient();
  v64.receiver = v19;
  v64.super_class = v25;
  v26 = (char *)objc_msgSendSuper2(&v64, sel_init);
  v27 = direct field offset for XPCClient.queue;
  v28 = *(void **)&v26[direct field offset for XPCClient.queue];
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v26;
  type metadata accessor for PluginClientReporter();
  v30 = (_QWORD *)swift_allocObject();
  v31 = MEMORY[0x1E0DEE9E0];
  v30[5] = MEMORY[0x1E0DEE9E0];
  v30[6] = v31;
  v30[2] = v28;
  v30[3] = partial apply for closure #1 in ConversationManagerClient.init();
  v30[4] = v29;
  v32 = &v26[direct field offset for ConversationManagerClient.pluginClientReporter];
  swift_beginAccess();
  *(_QWORD *)v32 = v30;
  v33 = v26;
  v34 = v28;
  swift_release();
  v35 = *(void **)&v26[v27];
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = v33;
  type metadata accessor for PubSubTopicReporter();
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = v35;
  v37[3] = partial apply for closure #2 in ConversationManagerClient.init();
  v37[4] = v36;
  v37[5] = v31;
  v38 = &v33[direct field offset for ConversationManagerClient.pubSubTopicReporter];
  swift_beginAccess();
  *(_QWORD *)v38 = v37;
  v39 = v33;
  v40 = v35;
  swift_release();
  v62[0] = ConversationManagerClient.notification.getter();
  v63 = *(id *)&v26[v27];
  v41 = v63;
  v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v9, 1, 1, v42);
  type metadata accessor for HostConnectionNotificationObserver();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type HostConnectionNotificationObserver and conformance HostConnectionNotificationObserver, (uint64_t (*)(uint64_t))type metadata accessor for HostConnectionNotificationObserver, (uint64_t)&protocol conformance descriptor for HostConnectionNotificationObserver);
  _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
  v43 = v41;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  swift_allocObject();
  swift_unknownObjectUnownedInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<HostConnectionNotificationObserver, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<HostConnectionNotificationObserver, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v44 = v54;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v13, v44);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v45 = *(_QWORD *)&v39[direct field offset for ConversationManagerClient.publishers];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v45;
  v62[0] = v46;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
  v47 = v56;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>, MEMORY[0x1E0C95950]);
  v49 = v57;
  v48 = v58;
  Publisher.removeDuplicates(by:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v48);
  v50 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v39)
                                                                                   + 0x1E0))(v62);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>>, MEMORY[0x1E0C958E0]);
  v51 = v60;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v51);
  v50(v62, 0);

  return v39;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF449714]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF44972C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF449720](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1AF44972C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for HostConnectionNotificationObserver()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DarwinNotification()
{
  return objc_opt_self();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CustomEndpointProvider>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v13 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingUserInfoKey, Any));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (CodingUserInfoKey, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = (unint64_t)outlined init with take of Any(v9, (_OWORD *)(v7[7] + 32 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, BackgroundSessionManagerDataSource>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, BackgroundSessionManagerDataSource));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = outlined init with take of BackgroundSessionManagerDataSource(&v17, v3[7] + 40 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, AttachmentLedger_AttachmentEncryption));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AttachmentLedger_AttachmentEncryption>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (UInt64, AttachmentLedger_AttachmentEncryption));
      v11 = *v5;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      result = outlined init with take of ActivitySession.DomainAssertionWrapper(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

char *@objc XPCClient.init()()
{
  return XPCClient.init()();
}

char *XPCClient.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  _QWORD *v7;
  Swift::String v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  unint64_t v36;
  unint64_t v37;
  objc_super v38;

  ObjectType = swift_getObjectType();
  v29 = *MEMORY[0x1E0DEEDD8] & *v0;
  v1 = v29;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  MEMORY[0x1E0C80A78](v2);
  v32 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v6);
  v31 = direct field offset for XPCClient.queue;
  v30 = type metadata accessor for OS_dispatch_queue();
  v36 = 0;
  v37 = 0xE000000000000000;
  v7 = v0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v36 = 0xD000000000000015;
  v37 = 0x80000001ACF831C0;
  v28 = *(_QWORD *)(v1 + 80);
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v36 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v32, *MEMORY[0x1E0DEF8D0], v34);
  *(_QWORD *)((char *)v0 + v31) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v9 = (_QWORD *)((char *)v7 + direct field offset for XPCClient.connectionClosure);
  *v9 = 0;
  v9[1] = 0;
  v10 = (char *)v7 + direct field offset for XPCClient._connection;
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_QWORD *)v10 + 4) = 0;

  v11 = v28;
  v12 = *(_QWORD *)(v29 + 88);
  v14 = (objc_class *)type metadata accessor for XPCClient(0, v28, v12, v13);
  v38.receiver = v7;
  v38.super_class = v14;
  v15 = (char *)objc_msgSendSuper2(&v38, sel_init);
  v16 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v11;
  v17[3] = v12;
  v18 = v11;
  v19 = ObjectType;
  v17[4] = v16;
  v17[5] = v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = partial apply for closure #1 in XPCClient.init();
  *(_QWORD *)(v20 + 24) = v17;
  v21 = &v15[direct field offset for XPCClient._connection];
  swift_beginAccess();
  v22 = *((_QWORD *)v21 + 1);
  *((_QWORD *)v21 + 1) = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection);
  *((_QWORD *)v21 + 2) = v20;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v22);
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v18;
  v23[3] = v12;
  v23[4] = v19;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for closure #2 in XPCClient.init();
  *(_QWORD *)(v24 + 24) = v23;
  v25 = *((_QWORD *)v21 + 3);
  *((_QWORD *)v21 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ();
  *((_QWORD *)v21 + 4) = v24;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v25);
  return v15;
}

uint64_t _sxRi_zRi0_zlyytIseghHr_SgWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1AF44969C](a1, v6, a5);
}

uint64_t type metadata accessor for XPCClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCClient);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

_QWORD *HostConnectionNotificationObserver.init(queue:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<DarwinNotification, OS_dispatch_queue>);
  v7 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  v42 = v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v39 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v40 = (char *)v34 - v10;
  v43 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UInt64, Never>);
  swift_allocObject();
  v11 = CurrentValueSubject.init(_:)();
  v12 = v1;
  v1[5] = MEMORY[0x1E0DEE9E8];
  v1[4] = v11;
  v13 = type metadata accessor for DarwinNotification();
  swift_allocObject();
  v14 = a1;
  v1[2] = DarwinNotification.init(name:queue:)(0xD00000000000003ALL, 0x80000001ACF7BFE0, v14);
  if (one-time initialization token for canConnectBypassingSharePlayRestriction != -1)
    swift_once();
  if (static HostConnectionNotificationObserver.canConnectBypassingSharePlayRestriction == 1)
  {
    v15 = v13;
    swift_allocObject();
    v16 = DarwinNotification.init(name:queue:)(0xD000000000000056, 0x80000001ACF7C020, v14);
  }
  else
  {
    v16 = 0;
    v15 = v13;
  }
  v34[0] = v15;
  v1[3] = v16;
  v43 = v1[2];
  v44 = v14;
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v35 = v17;
  v37 = v18;
  ((void (*)(char *, uint64_t, uint64_t))v18)(v5, 1, 1);
  v19 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v20 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DarwinNotification and conformance DarwinNotification, (uint64_t (*)(uint64_t))type metadata accessor for DarwinNotification, (uint64_t)&protocol conformance descriptor for DarwinNotification);
  v21 = _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
  swift_retain();
  v22 = v40;
  v38 = v19;
  v36 = v20;
  v23 = (uint64_t)v5;
  v34[1] = v21;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  swift_release();
  v24 = swift_allocObject();
  swift_weakInit();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v14;
  *(_QWORD *)(v25 + 24) = v24;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<DarwinNotification, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<DarwinNotification, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v26 = v14;
  v27 = v41;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v28 = *(void (**)(char *, uint64_t))(v42 + 8);
  v28(v22, v27);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (v12[3])
  {
    v43 = v12[3];
    v44 = v26;
    v37(v5, 1, 1, v35);
    swift_retain();
    v29 = v39;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v23, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
    swift_release();
    v30 = swift_allocObject();
    swift_weakInit();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v26;
    *(_QWORD *)(v31 + 24) = v30;
    v32 = v26;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    v28(v29, v27);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }

  return v12;
}

uint64_t type metadata accessor for TUConversationActivity(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id one-time initialization function for shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConversationManagerClient()), sel_init);
  static ConversationManagerClient.shared = (uint64_t)result;
  return result;
}

{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CPAudioRoutePolicyManager()), sel_init);
  static CPAudioRoutePolicyManager.shared = (uint64_t)result;
  return result;
}

{
  id result;
  uint64_t v1;
  __int128 v2;
  __int128 v3;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (result)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v2, &v3);
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IMUserNotificationCenter);
    result = (id)swift_dynamicCast();
    static IMUserNotificationCenter.shared = v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  id result;

  result = closure #1 in variable initialization expression of static CPApplicationPolicyManager.shared();
  static CPApplicationPolicyManager.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for ConversationManagerClient()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationManagerClient;
  if (!type metadata singleton initialization cache for ConversationManagerClient)
    return swift_getSingletonMetadata();
  return result;
}

char *@objc ConversationManagerClient.init()()
{
  return ConversationManagerClient.init()();
}

void ActivitySession.$state.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[13];
  v6 = (void *)v3[14];
  v8 = v3[11];
  v7 = (void *)v3[12];
  v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

void (*ConversationManagerClient.$activeSessionContainer.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = direct field offset for ConversationManagerClient._activeSessionContainer;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

_QWORD *ConversationManagerClient.notification.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v1 = direct field offset for ConversationManagerClient.$__lazy_storage_$_notification;
  if (*(_QWORD *)(v0 + direct field offset for ConversationManagerClient.$__lazy_storage_$_notification))
  {
    v2 = *(_QWORD **)(v0 + direct field offset for ConversationManagerClient.$__lazy_storage_$_notification);
  }
  else
  {
    v3 = v0;
    v4 = *(void **)(v0 + direct field offset for XPCClient.queue);
    type metadata accessor for HostConnectionNotificationObserver();
    swift_allocObject();
    v2 = HostConnectionNotificationObserver.init(queue:)(v4);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t type metadata accessor for PluginClientReporter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PubSubTopicReporter()
{
  return objc_opt_self();
}

uint64_t DarwinNotification.init(name:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v18[6];

  v4 = v3;
  *(_DWORD *)(v3 + 32) = -1;
  v8 = (int *)(v3 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UInt64, Never>);
  swift_allocObject();
  *(_QWORD *)(v3 + 40) = CurrentValueSubject.init(_:)();
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_bridgeObjectRetain();
  v9 = a3;
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRetain();
  swift_release();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v3;
  v18[4] = partial apply for closure #1 in DarwinNotification.init(name:queue:);
  v18[5] = v10;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v18[3] = &block_descriptor_39;
  v11 = _Block_copy(v18);
  swift_release();
  v12 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v8) = notify_register_dispatch((const char *)(v12 + 32), v8, v9, v11);
  swift_endAccess();
  swift_release();
  _Block_release(v11);

  if ((_DWORD)v8)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.default);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Could not create notification observer.", v16, 2u);
      MEMORY[0x1AF44981C](v16, -1, -1);
    }

  }
  else
  {
    DarwinNotification.handleNotification()();
  }

  return v4;
}

uint64_t DarwinNotification.handleNotification()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t state64[2];

  v1 = v0;
  state64[1] = *MEMORY[0x1E0C80C00];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v0 + 32), state64))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ACCCC000, v3, v4, "Could not get current state.", v5, 2u);
      MEMORY[0x1AF44981C](v5, -1, -1);
    }

    v6 = 0;
  }
  else
  {
    v6 = state64[0];
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_retain();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    state64[0] = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = *(_QWORD *)(v1 + 16);
    v13 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)state64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v8, v9, "Received DarwinNotification %s value: %llu", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v11, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);

  }
  else
  {

    swift_release();
  }
  state64[0] = v6;
  return CurrentValueSubject.send(_:)();
}

uint64_t one-time initialization function for default(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance HostConnectionNotificationObserver()
{
  return HostConnectionNotificationObserver.receive<A>(subscriber:)();
}

uint64_t HostConnectionNotificationObserver.receive<A>(subscriber:)()
{
  return CurrentValueSubject.receive<A>(subscriber:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance DarwinNotification()
{
  return DarwinNotification.receive<A>(subscriber:)();
}

uint64_t DarwinNotification.receive<A>(subscriber:)()
{
  return CurrentValueSubject.receive<A>(subscriber:)();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for XPCClient()
{
  return swift_initClassMetadata2();
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t CPDataCryptorClass()
{
  return objc_opt_class();
}

id CPDefaultLog()
{
  if (CPDefaultLog_onceToken != -1)
    dispatch_once(&CPDefaultLog_onceToken, &__block_literal_global);
  return (id)CPDefaultLog_CPDefaultLog;
}

void sub_1ACCD2B58(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1ACCD2BBC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1ACCD2C28(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

id getGKLocalPlayerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGKLocalPlayerClass_softClass;
  v7 = getGKLocalPlayerClass_softClass;
  if (!getGKLocalPlayerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGKLocalPlayerClass_block_invoke;
    v3[3] = &unk_1E5C80FB0;
    v3[4] = &v4;
    __getGKLocalPlayerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ACCD56AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGKDaemonProxyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGKDaemonProxyClass_softClass;
  v7 = getGKDaemonProxyClass_softClass;
  if (!getGKDaemonProxyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGKDaemonProxyClass_block_invoke;
    v3[3] = &unk_1E5C80FB0;
    v3[4] = &v4;
    __getGKDaemonProxyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ACCD5764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id cpGameCenterLog()
{
  if (cpGameCenterLog___once != -1)
    dispatch_once(&cpGameCenterLog___once, &__block_literal_global_25);
  return (id)cpGameCenterLog__log;
}

void __getGKLocalPlayerClass_block_invoke(uint64_t a1)
{
  GameCenterFoundationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("GKLocalPlayer");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGKLocalPlayerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getGKLocalPlayerClass_block_invoke_cold_1();
    GameCenterFoundationLibrary();
  }
}

void GameCenterFoundationLibrary()
{
  void *v0;

  if (!GameCenterFoundationLibraryCore_frameworkLibrary)
    GameCenterFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!GameCenterFoundationLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getGKDaemonProxyClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  GameCenterFoundationLibrary();
  result = objc_getClass("GKDaemonProxy");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getGKDaemonProxyClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = __getGKDaemonProxyClass_block_invoke_cold_1();
    return (Class)__cpGameCenterLog_block_invoke(v3);
  }
  return result;
}

void __cpGameCenterLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create(CPLoggingSubsystem, "CPGameCenterUtilities");
  v1 = (void *)cpGameCenterLog__log;
  cpGameCenterLog__log = (uint64_t)v0;

}

BOOL static ActivitySession.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ActivitySession.Errors.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ActivitySession.Errors.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ActivitySession.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActivitySession.Errors()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ActivitySession.Errors()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActivitySession.Errors()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ActivitySession.State.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = (unint64_t)*v0 >> 62;
  if (!(_DWORD)v2)
    return 0x6164696C61766E49;
  if ((_DWORD)v2 == 1)
    return 0x664F6465646E6148;
  v4 = 0x64656E696F4ALL;
  if (v1 != 0x8000000000000008)
    v4 = 1952867660;
  if (v1 == 0x8000000000000000)
    return 0x676E6974696157;
  else
    return v4;
}

uint64_t static ActivitySession.State.== infix(_:_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *a2;
  v4 = *a1 >> 62;
  if (!(_DWORD)v4)
  {
    if (v3 >> 62)
      goto LABEL_22;
    v7 = *(_QWORD *)(v2 + 24);
    v8 = *(_QWORD *)(v3 + 24);
    if (v7)
    {
      if (v8)
      {
        if (*(_QWORD *)(v2 + 16) != *(_QWORD *)(v3 + 16) || v7 != v8)
        {
          v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of ActivitySession.State(v3);
          outlined copy of ActivitySession.State(v2);
          outlined consume of ActivitySession.State(v2);
          outlined consume of ActivitySession.State(v3);
          if ((v10 & 1) != 0)
            goto LABEL_30;
LABEL_25:
          v6 = 0;
          return v6 & 1;
        }
        outlined copy of ActivitySession.State(v3);
        outlined copy of ActivitySession.State(v2);
LABEL_28:
        outlined consume of ActivitySession.State(v2);
        v11 = v3;
LABEL_29:
        outlined consume of ActivitySession.State(v11);
LABEL_30:
        v6 = 1;
        return v6 & 1;
      }
    }
    else if (!v8)
    {
      outlined copy of ActivitySession.State(v3);
      outlined copy of ActivitySession.State(v2);
      swift_bridgeObjectRelease_n();
      goto LABEL_28;
    }
    outlined copy of ActivitySession.State(v3);
    outlined copy of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v3);
    goto LABEL_25;
  }
  if ((_DWORD)v4 != 1)
  {
    if (v2 == 0x8000000000000000)
    {
      if (v3 != 0x8000000000000000)
        goto LABEL_22;
      outlined consume of ActivitySession.State(0x8000000000000000);
      v11 = 0x8000000000000000;
    }
    else if (v2 == 0x8000000000000008)
    {
      if (v3 != 0x8000000000000008)
        goto LABEL_22;
      outlined consume of ActivitySession.State(0x8000000000000008);
      v11 = 0x8000000000000008;
    }
    else
    {
      if (v3 != 0x8000000000000010)
        goto LABEL_22;
      outlined consume of ActivitySession.State(0x8000000000000010);
      v11 = 0x8000000000000010;
    }
    goto LABEL_29;
  }
  if (v3 >> 62 != 1)
  {
LABEL_22:
    outlined copy of ActivitySession.State(*a2);
    outlined copy of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v3);
    v6 = 0;
    return v6 & 1;
  }
  v5 = *(_QWORD *)(v2 + 16);
  v13 = *(_QWORD *)(v3 + 16);
  v14 = v5;
  outlined copy of ActivitySession.State(v3);
  outlined copy of ActivitySession.State(v2);
  v6 = static ActivitySession.State.== infix(_:_:)(&v14, &v13);
  outlined consume of ActivitySession.State(v2);
  outlined consume of ActivitySession.State(v3);
  return v6 & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ActivitySession.State()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = (unint64_t)*v0 >> 62;
  if (!(_DWORD)v2)
    return 0x6164696C61766E49;
  if ((_DWORD)v2 == 1)
    return 0x664F6465646E6148;
  v4 = 0x64656E696F4ALL;
  if (v1 != 0x8000000000000008)
    v4 = 1952867660;
  if (v1 == 0x8000000000000000)
    return 0x676E6974696157;
  else
    return v4;
}

uint64_t ActivitySession.Capabilities.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_QWORD *ActivitySession.Capabilities.pluginNames.getter()
{
  _BYTE *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  if ((*v0 & 1) == 0)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
  v1[2] = v3 + 1;
  v4 = &v1[2 * v3];
  v4[4] = 0xD000000000000010;
  v4[5] = 0x80000001ACF7C6E0;
  return v1;
}

uint64_t *ActivitySession.Capabilities.attachments.unsafeMutableAddressor()
{
  if (one-time initialization token for attachments != -1)
    swift_once();
  return &static ActivitySession.Capabilities.attachments;
}

void one-time initialization function for attachments()
{
  static ActivitySession.Capabilities.attachments = 1;
}

CopresenceCore::ActivitySession::Capabilities __swiftcall ActivitySession.Capabilities.init(rawValue:)(CopresenceCore::ActivitySession::Capabilities rawValue)
{
  CopresenceCore::ActivitySession::Capabilities *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ActivitySession.Capabilities.attachments.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance ActivitySession.Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance ActivitySession.Capabilities(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance ActivitySession.Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance ActivitySession.Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ActivitySession.Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ActivitySession.Capabilities(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance ActivitySession.Capabilities@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance ActivitySession.Capabilities@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance ActivitySession.Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance ActivitySession.Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ActivitySession.Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance ActivitySession.Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ActivitySession.Capabilities(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ActivitySession.Capabilities(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance ActivitySession.Capabilities(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ActivitySession.Capabilities()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance ActivitySession.Capabilities()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance ActivitySession.Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ActivitySession.Capabilities@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ActivitySession.Capabilities(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ActivitySession.Capabilities(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t ActivitySession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___CPActivitySession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path getter for ActivitySession.activityInterval : ActivitySession(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x150))();
}

uint64_t key path setter for ActivitySession.activityInterval : ActivitySession(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for DateInterval();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x158))(v6);
}

uint64_t ActivitySession.activityInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___CPActivitySession_activityInterval;
  swift_beginAccess();
  v4 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySession.activityInterval.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___CPActivitySession_activityInterval;
  swift_beginAccess();
  v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ActivitySession.activityInterval.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.terminatingHandle : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.terminatingHandle : ActivitySession(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x170);
  v4 = *a1;
  return v3(v2);
}

void *ActivitySession.terminatingHandle.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR___CPActivitySession_terminatingHandle);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void ActivitySession.terminatingHandle.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR___CPActivitySession_terminatingHandle);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*ActivitySession.terminatingHandle.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.isFirstJoin : ActivitySession@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x180))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ActivitySession.isFirstJoin : ActivitySession(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x188))(*a1);
}

uint64_t ActivitySession.isFirstJoin.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_isFirstJoin);
  swift_beginAccess();
  return *v1;
}

uint64_t ActivitySession.isFirstJoin.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___CPActivitySession_isFirstJoin);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ActivitySession.isFirstJoin.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySession.isPermittedToJoin.getter()
{
  _QWORD *v0;
  _BOOL8 v1;
  unint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  unint64_t v6;

  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))(&v6);
  if (v6 >> 62 == 1)
  {
    v2 = *(_QWORD *)(v6 + 16);
    v3 = v2 >> 62;
    v4 = (v2 & 0xFFFFFFFFFFFFFFF7) == 0x8000000000000000;
    v1 = v3 == 2 && v4;
    goto LABEL_9;
  }
  if (v6 >> 62 != 2 || (v6 | 8) != 0x8000000000000008)
  {
    v1 = 0;
LABEL_9:
    outlined consume of ActivitySession.State(v6);
    return v1;
  }
  return 1;
}

uint64_t ActivitySession.persistentSceneIdentifier.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 16 * v2 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t key path getter for ActivitySession.persistentSceneIdentifiers : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1A8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.persistentSceneIdentifiers : ActivitySession(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a1;
  v3 = (uint64_t *)(*a2 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  swift_bridgeObjectRetain();
  ActivitySession.persistentSceneIdentifiers.didset(v4);
  return swift_bridgeObjectRelease();
}

uint64_t ActivitySession.persistentSceneIdentifiers.didset(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  _QWORD *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (void **)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = a1 + 16 * v10;
    v13 = *(_QWORD *)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v14 = (char *)v1 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers;
  result = swift_beginAccess();
  v15 = *(_QWORD *)(*(_QWORD *)v14 + 16);
  if (!v15)
  {
    if (!v12)
      return result;
    goto LABEL_17;
  }
  v16 = *(_QWORD *)v14 + 16 * v15;
  v18 = *(_QWORD *)(v16 + 16);
  v17 = *(_QWORD *)(v16 + 24);
  result = swift_bridgeObjectRetain();
  if (!v12)
  {
    if (!v17)
      return result;
    goto LABEL_17;
  }
  if (!v17)
  {
LABEL_17:
    result = swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (v13 == v18 && v12 == v17)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    return result;
LABEL_18:
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3B0))(result);
  if (!result)
    return result;
  v22 = (void *)result;
  v23 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(result
                                                              + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
  result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v24 = v28;

  v25 = (*(uint64_t (**)(void))((*v21 & *v1) + 0x1A0))();
  if (v26)
  {
    v27 = (void *)MEMORY[0x1AF4480F4](v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
  }
  objc_msgSend(v24, sel_setAssociatedSceneWithSceneSessionIdentifier_, v27);

  return swift_unknownObjectRelease();
}

uint64_t ActivitySession.persistentSceneIdentifiers.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for ActivitySession.persistentSceneIsEligibleForAutoClose : ActivitySession@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1C0))();
  *a2 = result & 1;
  return result;
}

void key path setter for ActivitySession.persistentSceneIsEligibleForAutoClose : ActivitySession(char *a1)
{
  ActivitySession.persistentSceneIsEligibleForAutoClose.setter(*a1);
}

Swift::Void __swiftcall ActivitySession.sessionChanged()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _QWORD v17[2];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (_QWORD *)((char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  v8 = v0;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v17[1] = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v8;

    _os_log_impl(&dword_1ACCCC000, v9, v10, "%@ notifying manager of change", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {

    v9 = v8;
  }

  if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v8->isa) + 0x380))())
  {
    v15 = v14;
    ObjectType = swift_getObjectType();
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v15 + 48))(v8, ObjectType, v15);
    swift_unknownObjectRelease();
  }
}

uint64_t ActivitySession.persistentSceneIsEligibleForAutoClose.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose);
  swift_beginAccess();
  return *v1;
}

void ActivitySession.persistentSceneIsEligibleForAutoClose.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (_BYTE *)(v1 + OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose);
  swift_beginAccess();
  v8 = *v7;
  *v7 = a1;
  v9 = *(void **)(v1 + OBJC_IVAR___CPActivitySession_queue);
  *v6 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) != 0)
  {
    if (v8 != *v7)
      ActivitySession.sessionChanged()();
  }
  else
  {
    __break(1u);
  }
}

uint64_t key path getter for ActivitySession.audioSessionID : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1D8))();
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for ActivitySession.audioSessionID : ActivitySession(unsigned int *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1E0))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

unint64_t ActivitySession.audioSessionID.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR___CPActivitySession_audioSessionID);
  swift_beginAccess();
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t ActivitySession.audioSessionID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = v1 + OBJC_IVAR___CPActivitySession_audioSessionID;
  result = swift_beginAccess();
  *(_DWORD *)v3 = a1;
  *(_BYTE *)(v3 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*ActivitySession.audioSessionID.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path getter for ActivitySession.domainAssertion : ActivitySession(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1F0))();
}

uint64_t key path setter for ActivitySession.domainAssertion : ActivitySession(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1F8))(v6);
}

uint64_t ActivitySession.domainAssertion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___CPActivitySession_domainAssertion;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
}

uint64_t ActivitySession.domainAssertion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___CPActivitySession_domainAssertion;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v3, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  return swift_endAccess();
}

uint64_t (*ActivitySession.domainAssertion.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.distributionCount : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x220))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.distributionCount : ActivitySession(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x228))(*a1);
}

uint64_t ActivitySession.distributionCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___CPActivitySession_distributionCount;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t ActivitySession.distributionCount.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPActivitySession_distributionCount);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ActivitySession.distributionCount.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.applicationState : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x268))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.applicationState : ActivitySession(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x270))(*a1);
}

uint64_t ActivitySession.applicationState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___CPActivitySession_applicationState;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t ActivitySession.applicationState.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPActivitySession_applicationState);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ActivitySession.applicationState.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySession.foregroundPresentationSubject.getter()
{
  return swift_retain();
}

_QWORD *key path getter for ActivitySession.capabilities : ActivitySession@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x280))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for ActivitySession.capabilities : ActivitySession(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x288))(&v4);
}

uint64_t ActivitySession.capabilities.didset()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  _QWORD v20[4];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (_QWORD *)((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  v8 = v0;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412546;
    v20[1] = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v8;

    *(_WORD *)(v11 + 12) = 2048;
    v14 = (uint64_t *)((char *)v13 + OBJC_IVAR___CPActivitySession_capabilities);
    swift_beginAccess();
    v15 = *v14;

    v20[0] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1ACCCC000, v9, v10, "%@ updated capabilities to %ld", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {

    v9 = v8;
  }

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v8->isa) + 0x380))();
  if (result)
  {
    v18 = v17;
    ObjectType = swift_getObjectType();
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v18 + 152))(v8, ObjectType, v18);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ActivitySession.capabilities.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPActivitySession_capabilities);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t ActivitySession.capabilities.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPActivitySession_capabilities);
  swift_beginAccess();
  *v3 = v2;
  return ActivitySession.capabilities.didset();
}

uint64_t (*ActivitySession.capabilities.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ActivitySession.capabilities.modify;
}

uint64_t ActivitySession.capabilities.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return ActivitySession.capabilities.didset();
  return result;
}

void ActivitySession.logDurationMetric(_:)()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t aBlock[6];

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
  v2 = objc_msgSend(v1, sel_activity);

  v3 = objc_msgSend(v2, sel_metadata);
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_context);

    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
      strcpy((char *)(inited + 32), "activity_type");
      *(_WORD *)(inited + 46) = -4864;
      v6 = objc_msgSend(v4, sel_analyticsIdentifier);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;

      v10 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      v11 = (void *)MEMORY[0x1AF4480F4](v7, v9);
      swift_bridgeObjectRelease();
      v12 = objc_msgSend(v10, sel_initWithString_, v11);

      *(_QWORD *)(inited + 48) = v12;
      *(_QWORD *)(inited + 56) = 0x6E6F697461727564;
      *(_QWORD *)(inited + 64) = 0xE800000000000000;
      DateInterval.duration.getter();
      *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v13);
      v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      if (one-time initialization token for default != -1)
        swift_once();
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc();
        v19 = swift_slowAlloc();
        aBlock[0] = v19;
        *(_DWORD *)v18 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001ACF7C700, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2080;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
        v20 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v16, v17, "Logged coreanalytics event %s %s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v19, -1, -1);
        MEMORY[0x1AF44981C](v18, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v22 = (void *)MEMORY[0x1AF4480F4](0xD000000000000028, 0x80000001ACF7C700);
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = v14;
      aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.logDurationMetric(_:);
      aBlock[5] = v23;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      aBlock[3] = (uint64_t)&block_descriptor;
      v24 = _Block_copy(aBlock);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v24);

    }
  }
}

_QWORD *key path getter for ActivitySession.state : ActivitySession@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x2A0))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for ActivitySession.state : ActivitySession(unint64_t *a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t (*v3)(unint64_t *);
  unint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(unint64_t *))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2A8);
  outlined copy of ActivitySession.State(v5);
  return v3(&v5);
}

void ActivitySession.state.didset(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t *__return_ptr);
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  Swift::Int32 v59;
  Swift::String v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  void (*v65)(uint64_t *, _QWORD);
  uint64_t v66;
  void (*v67)(void);
  char *v68;
  uint64_t (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  unint64_t v80;
  void (*v81)(uint64_t *__return_ptr, unint64_t);
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t *, _QWORD);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t ObjectType;
  char *v99;
  uint64_t v100;
  char *v101;
  void (*v102)(unint64_t *__return_ptr, uint64_t);
  uint64_t v103[4];
  unint64_t v104;
  unint64_t v105;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for DateInterval();
  ObjectType = *(_QWORD *)(v100 - 8);
  v6 = MEMORY[0x1E0C80A78](v100);
  v97 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v99 = (char *)&v91 - v8;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v96 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v101 = (char *)&v91 - v13;
  v14 = type metadata accessor for DispatchPredicate();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  v19 = *a1;
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E0DEF740], v14);
  v20 = v18;
  LOBYTE(a1) = _dispatchPreconditionTest(_:)();
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((a1 & 1) == 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  v103[0] = v19;
  v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v102 = *(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2A0);
  v102(&v105, v21);
  v23 = v105;
  v104 = v105;
  v24 = static ActivitySession.State.== infix(_:_:)((unint64_t *)v103, &v104);
  outlined consume of ActivitySession.State(v23);
  if ((v24 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_4:
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.default);
      v26 = v1;
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v29 = 138412290;
        v103[0] = (uint64_t)v26;
        v31 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v30 = v26;

        _os_log_impl(&dword_1ACCCC000, v27, v28, "%@ dropping state update since value is the same", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v30, -1, -1);
        MEMORY[0x1AF44981C](v29, -1, -1);
      }
      else
      {

      }
      return;
    }
LABEL_58:
    swift_once();
    goto LABEL_4;
  }
  v95 = v10;
  if (one-time initialization token for default != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Log.default);
  v33 = v1;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.default.getter();
  v36 = os_log_type_enabled(v34, v35);
  v93 = v5;
  v94 = v9;
  if (v36)
  {
    v37 = swift_slowAlloc();
    v38 = (_QWORD *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    v103[0] = v39;
    *(_DWORD *)v37 = 138412546;
    v105 = (unint64_t)v33;
    v92 = v19;
    v40 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v38 = v33;

    *(_WORD *)(v37 + 12) = 2080;
    ((void (*)(unint64_t *__return_ptr))v102)(&v105);
    v104 = v105;
    v41 = String.init<A>(reflecting:)();
    v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v103);
    v19 = v92;
    v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v34, v35, "%@ changed to state: %s", (uint8_t *)v37, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v38, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v39, -1, -1);
    MEMORY[0x1AF44981C](v37, -1, -1);
  }
  else
  {

  }
  v43 = *(uint64_t (**)(void))((*v22 & *v33) + 0x3B0);
  v44 = v43();
  v45 = v95;
  v46 = (void (*)(uint64_t *__return_ptr))v102;
  if (v44)
  {
    v47 = (void *)v44;
    v48 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v44
                                                                + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
    if (!swift_dynamicCast())
    {
      __break(1u);
      return;
    }
    v49 = (void *)v105;

    v46(v103);
    if ((unint64_t)v103[0] >> 62)
    {
      if ((unint64_t)v103[0] >> 62 == 1)
      {
        outlined consume of ActivitySession.State(v103[0]);
        v50 = 4;
      }
      else if (v103[0] == 0x8000000000000000)
      {
        v50 = 0;
      }
      else if (v103[0] == 0x8000000000000008)
      {
        v50 = 1;
      }
      else
      {
        v50 = 5;
      }
    }
    else
    {
      outlined consume of ActivitySession.State(v103[0]);
      v50 = 2;
    }
    objc_msgSend(v49, sel_setStateWithState_error_, v50, 0);
    v44 = swift_unknownObjectRelease();
  }
  ((void (*)(unint64_t *__return_ptr, uint64_t))v46)(&v105, v44);
  if ((v105 & 0x8000000000000000) != 0)
  {
    if (v105 == 0x8000000000000000)
      goto LABEL_28;
    if (v105 == 0x8000000000000008)
    {
      Date.init()();
      v90 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*v22 & *v33) + 0x160))(v103);
      DateInterval.start.setter();
      v90(v103, 0);
      goto LABEL_28;
    }
  }
  else
  {
    outlined consume of ActivitySession.State(v105);
  }
  (*(void (**)(_QWORD))((*v22 & *v33) + 0x3B8))(0);
LABEL_28:
  v103[0] = v19;
  v105 = 0x8000000000000008;
  if ((static ActivitySession.State.== infix(_:_:)((unint64_t *)v103, &v105) & 1) == 0)
  {
    v46(v103);
    v51 = v103[0];
    v104 = 0x8000000000000008;
    v105 = v103[0];
    v52 = static ActivitySession.State.== infix(_:_:)(&v105, &v104);
    v53 = outlined consume of ActivitySession.State(v51);
    if ((v52 & 1) != 0)
    {
      v54 = ((uint64_t (*)(unint64_t))v43)(v53);
      if (v54)
      {
        v55 = (char *)v54;
        if (ActivitySession.needsAssertions()())
        {
          v56 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
          if (*(_QWORD *)((char *)v33 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem))
          {
            swift_retain();
            dispatch thunk of DispatchWorkItem.cancel()();
            swift_release();
            *(_QWORD *)((char *)v33 + v56) = 0;
            swift_release();
          }
          v57 = *(_QWORD *)&v55[direct field offset for XPCHostConnection.bundleIdentifier];
          v58 = *(void **)&v55[direct field offset for XPCHostConnection.bundleIdentifier + 8];
          v59 = objc_msgSend(*(id *)&v55[direct field offset for XPCHostConnection.connection], sel_processIdentifier);
          v60._countAndFlagsBits = v57;
          v60._object = v58;
          ActivitySession.acquireDomainAssertion(bundleID:pid:)(v60, v59);
        }

      }
    }
  }
  v46(v103);
  v61 = v103[0];
  v104 = 0x8000000000000008;
  v105 = v103[0];
  v62 = static ActivitySession.State.== infix(_:_:)(&v105, &v104);
  outlined consume of ActivitySession.State(v61);
  if ((v62 & 1) == 0)
    ActivitySession.invalidateAssertions(useDelay:)(1);
  v103[0] = v19;
  v105 = 0x8000000000000008;
  if ((static ActivitySession.State.== infix(_:_:)((unint64_t *)v103, &v105) & 1) != 0)
  {
    ((void (*)(uint64_t *__return_ptr))v102)(v103);
    v63 = v103[0];
    v104 = 0x8000000000000008;
    v105 = v103[0];
    v64 = static ActivitySession.State.== infix(_:_:)(&v105, &v104);
    outlined consume of ActivitySession.State(v63);
    if ((v64 & 1) == 0)
    {
      Date.init()();
      v65 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*v22 & *v33) + 0x160))(v103);
      DateInterval.end.setter();
      v65(v103, 0);
      v66 = (*(uint64_t (**)(_QWORD))((*v22 & *v33) + 0x188))(0);
      v67 = *(void (**)(void))((*v22 & *v33) + 0x150);
      v68 = v99;
      ((void (*)(uint64_t))v67)(v66);
      (*(void (**)(char *))((*v22 & *v33) + 0x298))(v68);
      v69 = *(uint64_t (**)(char *, uint64_t))(ObjectType + 8);
      v70 = v69(v68, v100);
      if ((*(uint64_t (**)(uint64_t))((*v22 & *v33) + 0x380))(v70))
      {
        v92 = v71;
        ObjectType = swift_getObjectType();
        v72 = v99;
        v67();
        v73 = v101;
        DateInterval.start.getter();
        v74 = v100;
        v75 = v69(v72, v100);
        v76 = v97;
        ((void (*)(uint64_t))v67)(v75);
        v77 = v96;
        DateInterval.end.getter();
        v69(v76, v74);
        v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v45 = v95;
        (*(void (**)(_QWORD *, char *, char *, uint64_t))(v92 + 104))(v33, v73, v77, ObjectType);
        swift_unknownObjectRelease();
        v78 = *(void (**)(char *, uint64_t))(v45 + 8);
        v79 = v94;
        v78(v77, v94);
        v78(v73, v79);
      }
    }
  }
  v103[0] = v19;
  v105 = 0x8000000000000010;
  v80 = static ActivitySession.State.== infix(_:_:)((unint64_t *)v103, &v105);
  v81 = (void (*)(uint64_t *__return_ptr, unint64_t))v102;
  if ((v80 & 1) != 0)
  {
    ((void (*)(uint64_t *__return_ptr))v102)(v103);
    v82 = v103[0];
    v104 = 0x8000000000000000;
    v105 = v103[0];
    v83 = static ActivitySession.State.== infix(_:_:)(&v105, &v104);
    v80 = outlined consume of ActivitySession.State(v82);
    if ((v83 & 1) != 0)
    {
      v84 = (uint64_t)v93;
      Date.init()();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v84, 0, 1, v94);
      v85 = (uint64_t)v33 + OBJC_IVAR___CPActivitySession_permittedJoinTimestamp;
      swift_beginAccess();
      outlined assign with take of ActivitySession.DomainAssertionWrapper?(v84, v85, (uint64_t *)&demangling cache variable for type metadata for Date?);
      v80 = swift_endAccess();
    }
  }
  v81(v103, v80);
  v86 = v103[0];
  if ((v103[0] & 0x8000000000000000) == 0)
  {
    outlined consume of ActivitySession.State(v103[0]);
LABEL_47:
    v86 = (*(uint64_t (**)(_QWORD))((*v22 & *v33) + 0x270))(0);
    goto LABEL_48;
  }
  if (v103[0] != 0x8000000000000000)
  {
    if (v103[0] == 0x8000000000000008)
      goto LABEL_47;
    v86 = (*(uint64_t (**)(uint64_t))((*v22 & *v33) + 0x270))(1);
  }
LABEL_48:
  if ((*(uint64_t (**)(uint64_t))((*v22 & *v33) + 0x380))(v86))
  {
    v88 = v87;
    v89 = swift_getObjectType();
    v103[0] = v19;
    (*(void (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(v88 + 96))(v33, v103, v89, v88);
    swift_unknownObjectRelease();
  }
}

uint64_t ActivitySession.State.cpActivitySessionState.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = (unint64_t)*v0 >> 62;
  if (!(_DWORD)v2)
    return 2;
  if ((_DWORD)v2 == 1)
    return 4;
  v4 = 1;
  if (v1 != 0x8000000000000008)
    v4 = 5;
  if (v1 == 0x8000000000000000)
    return 0;
  else
    return v4;
}

void ActivitySession.acquireAssertionsIfNecessary(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::Int32 v6;
  Swift::String v7;

  if (ActivitySession.needsAssertions()())
  {
    v3 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
    if (*(_QWORD *)(v1 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
      *(_QWORD *)(v1 + v3) = 0;
      swift_release();
    }
    v4 = *(_QWORD *)(a1 + direct field offset for XPCHostConnection.bundleIdentifier);
    v5 = *(void **)(a1 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
    v6 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_processIdentifier);
    v7._countAndFlagsBits = v4;
    v7._object = v5;
    ActivitySession.acquireDomainAssertion(bundleID:pid:)(v7, v6);
  }
}

Swift::Void __swiftcall ActivitySession.invalidateAssertions(useDelay:)(Swift::Bool useDelay)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v21 = type metadata accessor for DispatchTimeInterval();
  v3 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v5 = (_QWORD *)((char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for DispatchTime();
  v20 = *(_QWORD *)(v22 - 8);
  v6 = MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v19 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v11);
  v12 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
  v13 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem);
  if (useDelay)
  {
    if (!v13)
    {
      v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      aBlock[4] = partial apply for closure #1 in ActivitySession.invalidateAssertions(useDelay:);
      aBlock[5] = v14;
      v19[2] = v14;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_6;
      v19[3] = _Block_copy(aBlock);
      v23 = MEMORY[0x1E0DEE9D8];
      v19[1] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      v15 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      swift_release();
      static DispatchTime.now()();
      *v5 = 2;
      v16 = v21;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF4A0], v21);
      MEMORY[0x1AF447E78](v8, v5);
      (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v16);
      v17 = *(void (**)(char *, uint64_t))(v20 + 8);
      v18 = v22;
      v17(v8, v22);
      MEMORY[0x1AF4485E0](v10, v15);
      v17(v10, v18);
      *(_QWORD *)(v1 + v12) = v15;
      swift_release();
    }
  }
  else
  {
    if (v13)
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
      *(_QWORD *)(v1 + v12) = 0;
      swift_release();
    }
    ActivitySession.invalidateDomainAssertion()();
  }
}

uint64_t ActivitySession.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

unint64_t ActivitySession.state.setter()
{
  void *v0;
  unint64_t v1;
  id v2;
  unint64_t v4;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v1 = v4;
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v0;
  static Published.subscript.setter();
  ActivitySession.state.didset((uint64_t *)&v4);
  return outlined consume of ActivitySession.State(v1);
}

unint64_t (*ActivitySession.state.modify(uint64_t a1))(unint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return ActivitySession.state.modify;
}

unint64_t ActivitySession.state.modify(unint64_t *a1, char a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;

  v4 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v5 = (void *)a1[2];
  if ((a2 & 1) != 0)
  {
    outlined copy of ActivitySession.State(v4);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v6 = a1[1];
    swift_getKeyPath();
    swift_getKeyPath();
    a1[1] = v4;
    v5;
    static Published.subscript.setter();
    v9 = v6;
    ActivitySession.state.didset((uint64_t *)&v9);
    outlined consume of ActivitySession.State(v6);
    return outlined consume of ActivitySession.State(*a1);
  }
  else
  {
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v8 = a1[1];
    swift_getKeyPath();
    swift_getKeyPath();
    a1[1] = v4;
    v5;
    static Published.subscript.setter();
    v9 = v8;
    ActivitySession.state.didset((uint64_t *)&v9);
    return outlined consume of ActivitySession.State(v8);
  }
}

uint64_t key path getter for ActivitySession.$state : ActivitySession(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x2B8))();
}

uint64_t key path setter for ActivitySession.$state : ActivitySession(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>.Publisher);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x2C0))(v6);
}

uint64_t ActivitySession.$state.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t ActivitySession.$state.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*ActivitySession.$state.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR___CPActivitySession__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

id ActivitySession.activity.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___CPActivitySession_activity);
  swift_beginAccess();
  return *v1;
}

void ActivitySession.activity.setter(id *a1)
{
  uint64_t v1;
  id **v3;
  id *v4;
  id *v5;

  v3 = (id **)(v1 + OBJC_IVAR___CPActivitySession_activity);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;
  ActivitySession.activity.didset(v4);

}

uint64_t key path getter for ActivitySession.activity : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x2D0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.activity : ActivitySession(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x2D8))(*a1);
}

void ActivitySession.activity.didset(id *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  NSObject *v18;
  id *v19;
  id v20;
  id v21;
  id *v22;
  __objc2_ivar_list **p_ivars;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  char v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  int v43;
  id *v44;
  void *v45;
  id v46;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR___CPActivitySession_queue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  v10 = v1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  v13 = v12;
  v14 = &unk_1EECCF000;
  if (os_log_type_enabled(v11, v12))
  {
    v15 = swift_slowAlloc();
    v16 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v15 = 138412546;
    v44 = a1;
    v46 = v10;
    v17 = v10;
    v43 = v13;
    v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v16 = v10;

    *(_WORD *)(v15 + 12) = 2112;
    v19 = (id *)((char *)&v18->isa + OBJC_IVAR___CPActivitySession_activity);
    swift_beginAccess();
    v46 = *v19;
    v20 = v46;
    v21 = v46;
    a1 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v16[1] = v20;
    v14 = (_QWORD *)&unk_1EECCF000;

    _os_log_impl(&dword_1ACCCC000, v11, (os_log_type_t)v43, "ActivitySession %@ activity changed to %@", (uint8_t *)v15, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {

    v11 = v10;
  }

  v22 = (id *)((char *)&v10->isa + v14[310]);
  swift_beginAccess();
  p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
  v24 = objc_msgSend(*v22, sel_metadata);
  objc_msgSend(v24, sel_saveImageToDisk);

  v25 = objc_msgSend(*v22, sel_metadata);
  v26 = objc_msgSend(a1, sel_metadata);
  v27 = v26;
  if (v25)
  {
    if (v26)
    {
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivityMetadata);
      v28 = v25;
      v29 = static NSObject.== infix(_:_:)();

      if ((v29 & 1) != 0)
        goto LABEL_18;
      goto LABEL_14;
    }
    v27 = v25;
  }
  else if (!v26)
  {
    goto LABEL_18;
  }

LABEL_14:
  v30 = a1;
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v44 = v22;
    v33 = (uint8_t *)swift_slowAlloc();
    v34 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v33 = 138412290;
    v46 = v30;
    v35 = v30;
    p_ivars = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v34 = v30;

    v22 = v44;
    _os_log_impl(&dword_1ACCCC000, v31, v32, "Cleaning up image for old metadata %@", v33, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v34, -1, -1);
    MEMORY[0x1AF44981C](v33, -1, -1);
  }
  else
  {

    v31 = v30;
  }

  v36 = objc_msgSend(v30, (SEL)p_ivars[223]);
  objc_msgSend(v36, sel_removeImageDiskFile);

LABEL_18:
  v37 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v10->isa) + 0x3B0))();
  if (!v37)
  {
LABEL_21:
    ActivitySession.sessionChanged()();
    return;
  }
  v38 = (void *)v37;
  v39 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v37
                                                              + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
  if (swift_dynamicCast())
  {
    v40 = v45;

    v41 = *v22;
    objc_msgSend(v40, sel_setActivityWithActivity_, v41);

    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  __break(1u);
}

void (*ActivitySession.activity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___CPActivitySession_activity;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess();
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return ActivitySession.activity.modify;
}

void ActivitySession.activity.modify(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id v9;
  void *v10;
  id v11;

  v3 = *(void **)a1;
  v5 = (void **)(*(_QWORD *)a1 + 24);
  v4 = *v5;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v8 = *(id **)(v7 + v6);
  *(_QWORD *)(v7 + v6) = *v5;
  v9 = v4;
  v10 = v9;
  if ((a2 & 1) != 0)
  {
    v11 = v9;
    ActivitySession.activity.didset(v8);

    v8 = (id *)*v5;
  }
  else
  {
    ActivitySession.activity.didset(v8);

  }
  free(v3);
}

id ActivitySession.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPActivitySession_queue);
}

uint64_t key path getter for ActivitySession.isLocallyInitiated : ActivitySession@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x2E8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ActivitySession.isLocallyInitiated : ActivitySession(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR___CPActivitySession_isLocallyInitiated);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t ActivitySession.isLocallyInitiated.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_isLocallyInitiated);
  swift_beginAccess();
  return *v1;
}

uint64_t key path getter for ActivitySession.isUsingAirplay : ActivitySession@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x318))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ActivitySession.isUsingAirplay : ActivitySession(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x320))(*a1);
}

uint64_t ActivitySession.isUsingAirplay.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_isUsingAirplay);
  swift_beginAccess();
  return *v1;
}

void ActivitySession.isUsingAirplay.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (_BYTE *)(v1 + OBJC_IVAR___CPActivitySession_isUsingAirplay);
  swift_beginAccess();
  *v7 = a1;
  v8 = *(void **)(v1 + OBJC_IVAR___CPActivitySession_queue);
  *v6 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
    ActivitySession.sessionChanged()();
  else
    __break(1u);
}

void (*ActivitySession.isUsingAirplay.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v3[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[5] = v5;
  v3[6] = malloc(*(_QWORD *)(v5 + 64));
  swift_beginAccess();
  return ActivitySession.isUsingAirplay.modify;
}

void ActivitySession.isUsingAirplay.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *a1;
  swift_endAccess();
  v4 = (_QWORD *)v3[6];
  if ((a2 & 1) != 0)
    goto LABEL_4;
  v5 = v3[4];
  v6 = *(void **)(v3[3] + OBJC_IVAR___CPActivitySession_queue);
  v7 = v3[5];
  *v4 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v4, *MEMORY[0x1E0DEF740], v5);
  v8 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v5);
  if ((v6 & 1) != 0)
  {
    v4 = (_QWORD *)v3[6];
    ActivitySession.sessionChanged()();
LABEL_4:
    free(v4);
    free(v3);
    return;
  }
  __break(1u);
}

id ActivitySession.tuConversationActivitySession.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  Class isa;
  Class v17;
  Class v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  _QWORD *v23;
  void *v24;
  id v25;
  id v26;
  Class v27;
  id v28;
  Class v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))(v3);
  objc_msgSend(v7, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  v8 = swift_dynamicCast();
  v44 = v46[1];
  (*(void (**)(unint64_t *__return_ptr, uint64_t))((*v6 & *v1) + 0x2A0))(v46, v8);
  v45 = v5;
  if (v46[0] >> 62)
  {
    if (v46[0] >> 62 == 1)
    {
      outlined consume of ActivitySession.State(v46[0]);
      v9 = 4;
    }
    else
    {
      v10 = 1;
      if (v46[0] != 0x8000000000000008)
        v10 = 5;
      if (v46[0] == 0x8000000000000000)
        v9 = 0;
      else
        v9 = v10;
    }
  }
  else
  {
    outlined consume of ActivitySession.State(v46[0]);
    v9 = 2;
  }
  v43 = v9;
  v11 = *(uint64_t (**)(void))((*v6 & *v1) + 0x2E8);
  v42 = *(id *)((char *)v1 + OBJC_IVAR___CPActivitySession_endpoint);
  v41 = v11();
  v40 = (*(uint64_t (**)(void))((*v6 & *v1) + 0x180))();
  v12 = (*(uint64_t (**)(void))((*v6 & *v1) + 0x368))();
  specialized Set.init<A>(_:)(v12);
  v13 = *((_BYTE *)v1 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive);
  v14 = (*(uint64_t (**)(void))((*v6 & *v1) + 0x268))();
  v15 = objc_allocWithZone(MEMORY[0x1E0DBD278]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v17 = Date._bridgeToObjectiveC()().super.isa;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  v18 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v38) = v13;
  LOBYTE(v37) = v40 & 1;
  v19 = v15;
  v20 = (void *)v44;
  v21 = v42;
  v22 = objc_msgSend(v19, sel_initWithActivity_state_uuid_endpoint_locallyInitiated_timestamp_isFirstJoin_activeRemoteParticipants_isLocalParticipantActive_applicationState_, v44, v43, isa, v42, v41 & 1, v17, v37, v18, v38, v14);

  v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v24 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x168))();
  objc_msgSend(v22, sel_setTerminatingHandle_, v24);

  objc_msgSend(v22, sel_setDistributionCount_, (*(uint64_t (**)(void))((*v23 & *v1) + 0x220))());
  v25 = objc_msgSend(v22, sel_setPermittedToJoin_, (*(uint64_t (**)(id))((*v23 & *v1) + 0x198))(objc_msgSend(v22, sel_setIsLightweightPrimaryInitiated_, *((unsigned __int8 *)v1 + OBJC_IVAR___CPActivitySession_isLightweightPrimaryInitiated))) & 1);
  v26 = objc_msgSend(v22, sel_setPersistentSceneIsEligibleForAutoClose_, (*(uint64_t (**)(id))((*v23 & *v1) + 0x1C0))(v25) & 1);
  (*(void (**)(id))((*v23 & *v1) + 0x1A8))(v26);
  v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setPersistentSceneIdentifiers_, v27);

  v28 = objc_msgSend(v22, sel_setUsingAirplay_, (*(uint64_t (**)(void))((*v23 & *v1) + 0x318))() & 1);
  v29 = 0;
  if (((*(uint64_t (**)(id))((*v23 & *v1) + 0x1D8))(v28) & 0x100000000) == 0)
    v29 = UInt32._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v22, sel_setClientAudioSessionID_, v29);

  v30 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, sel_setLocalCreationTimestamp_, v30);

  v31 = (uint64_t)v1 + OBJC_IVAR___CPActivitySession_permittedJoinTimestamp;
  swift_beginAccess();
  v32 = (uint64_t)v45;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, (uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v33 = type metadata accessor for Date();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) != 1)
  {
    v35 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  objc_msgSend(v22, sel_setPermittedJoinTimestamp_, v35);

  return v22;
}

void specialized Set.init<A>(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13[2];

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  v2 = 0;
  v13[1] = (id)Set.init(minimumCapacity:)();
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_23;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_23;
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_23;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    specialized Set._Variant.insert(_:)(v13, *(id *)(*(_QWORD *)(a1 + 56) + 8 * v9));

  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v3, MEMORY[0x1E0CB09C8]);
  v19 = Set.init(minimumCapacity:)();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v9, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant();
  result = Set.init(minimumCapacity:)();
  v9 = result;
  if (v2)
  {
    v4 = (Swift::UInt64 *)(a1 + 48);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v4 += 3;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((uint64_t)&v8, v5, v6, v7);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t key path getter for ActivitySession.activeParticipantsUpdateItem : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x350))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.activeParticipantsUpdateItem : ActivitySession(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x358);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t ActivitySession.activeParticipantsUpdateItem.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ActivitySession.activeParticipantsUpdateItem.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &OBJC_IVAR___CPActivitySession_activeParticipantsUpdateItem);
}

uint64_t (*ActivitySession.activeParticipantsUpdateItem.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.activeParticipants : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x368))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.activeParticipants : ActivitySession(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x370);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ActivitySession.activeParticipants.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t ActivitySession.activeParticipants.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (uint64_t *)(v1 + OBJC_IVAR___CPActivitySession_activeParticipants);
  swift_beginAccess();
  v8 = *v7;
  *v7 = a1;
  v9 = *(void **)(v1 + OBJC_IVAR___CPActivitySession_queue);
  *v6 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) != 0)
  {
    v12 = swift_bridgeObjectRetain();
    v13 = specialized _NativeDictionary.mapValues<A>(_:)(v12);
    swift_bridgeObjectRelease();
    v14 = specialized _NativeDictionary.mapValues<A>(_:)(v8);
    v15 = specialized static Dictionary<>.== infix(_:_:)((unint64_t)v13, (uint64_t)v14);
    swift_release();
    swift_release();
    if ((v15 & 1) == 0)
      ActivitySession.sessionChanged()();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*ActivitySession.activeParticipants.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = malloc(*(_QWORD *)(v5 + 64));
  v7 = OBJC_IVAR___CPActivitySession_activeParticipants;
  v3[7] = v6;
  v3[8] = v7;
  v8 = (_QWORD *)(v1 + v7);
  swift_beginAccess();
  v3[3] = *v8;
  swift_bridgeObjectRetain();
  return ActivitySession.activeParticipants.modify;
}

void ActivitySession.activeParticipants.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  id v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  void *v18;
  id v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(v4 + v3);
  *(_QWORD *)(v4 + v3) = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v6 = v2[5];
  v7 = *(void **)(v2[4] + OBJC_IVAR___CPActivitySession_queue);
  v9 = v2[6];
  v8 = (_QWORD *)v2[7];
  *v8 = v7;
  v10 = *MEMORY[0x1E0DEF740];
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 104);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v11(v8, v10, v6);
    v12 = v7;
    v13 = _dispatchPreconditionTest(_:)();
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v8, v6);
    if ((v13 & 1) != 0)
    {
      v14 = swift_bridgeObjectRetain();
      v15 = specialized _NativeDictionary.mapValues<A>(_:)(v14);
      swift_bridgeObjectRelease();
      v16 = specialized _NativeDictionary.mapValues<A>(_:)(v5);
      v17 = specialized static Dictionary<>.== infix(_:_:)((unint64_t)v15, (uint64_t)v16);
      swift_release();
      swift_release();
      if ((v17 & 1) == 0)
        ActivitySession.sessionChanged()();
      v18 = (void *)v2[7];
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      free(v18);
      free(v2);
      return;
    }
    __break(1u);
  }
  else
  {
    v11(v8, *MEMORY[0x1E0DEF740], v6);
    v19 = v7;
    v20 = _dispatchPreconditionTest(_:)();
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v8, v6);
    if ((v20 & 1) != 0)
    {
      v21 = swift_bridgeObjectRetain();
      v22 = specialized _NativeDictionary.mapValues<A>(_:)(v21);
      swift_bridgeObjectRelease();
      v23 = specialized _NativeDictionary.mapValues<A>(_:)(v5);
      v24 = specialized static Dictionary<>.== infix(_:_:)((unint64_t)v22, (uint64_t)v23);
      swift_release();
      swift_release();
      if ((v24 & 1) == 0)
        ActivitySession.sessionChanged()();
      v18 = (void *)v2[7];
      goto LABEL_10;
    }
  }
  __break(1u);
}

uint64_t key path getter for ActivitySession.sessionManager : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x380))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ActivitySession.sessionManager : ActivitySession(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x388);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t ActivitySession.sessionManager.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___CPActivitySession_sessionManager;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t ActivitySession.sessionManager.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR___CPActivitySession_sessionManager;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ActivitySession.sessionManager.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___CPActivitySession_sessionManager;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

void ActivitySession.sessionManager.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t key path getter for ActivitySession.rtcReporter : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x398))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.rtcReporter : ActivitySession(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x3A0);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t ActivitySession.rtcReporter.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t ActivitySession.rtcReporter.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &OBJC_IVAR___CPActivitySession_rtcReporter);
}

uint64_t ActivitySession.activeParticipantsUpdateItem.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_release();
}

uint64_t (*ActivitySession.rtcReporter.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

id ActivitySession.endpoint.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPActivitySession_endpoint);
}

uint64_t ActivitySession.notificationCenter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR___CPActivitySession_notificationCenter, a1);
}

uint64_t key path getter for ActivitySession.connection : ActivitySession@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x3B0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.connection : ActivitySession(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x3B8);
  v4 = *a1;
  return v3(v2);
}

void *ActivitySession.connection.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR___CPActivitySession_connection);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void ActivitySession.connection.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  char *v4;
  void *v5;
  char *v6;

  v3 = (void **)(v1 + OBJC_IVAR___CPActivitySession_connection);
  swift_beginAccess();
  v4 = (char *)*v3;
  if (*v3)
  {
    v5 = *(void **)&v4[direct field offset for XPCHostConnection.connection];
    v6 = v4;
    objc_msgSend(v5, sel_setExportedObject_, 0);
    objc_msgSend(v5, sel_setInvalidationHandler_, 0);
    objc_msgSend(v5, sel_setInterruptionHandler_, 0);
    objc_msgSend(v5, sel_invalidate);

    v4 = (char *)*v3;
  }
  *v3 = a1;

}

void (*ActivitySession.connection.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___CPActivitySession_connection;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess();
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return ActivitySession.connection.modify;
}

void ActivitySession.connection.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  char *v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  id v15;

  v2 = *(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(char **)(v6 + v5);
  if ((a2 & 1) != 0)
  {
    if (v7)
    {
      v8 = *(void **)&v7[direct field offset for XPCHostConnection.connection];
      v9 = v3;
      v10 = v7;
      objc_msgSend(v8, sel_setExportedObject_, 0);
      objc_msgSend(v8, sel_setInvalidationHandler_, 0);
      objc_msgSend(v8, sel_setInterruptionHandler_, 0);
      objc_msgSend(v8, sel_invalidate);

      v11 = *(void **)(v6 + v5);
      v6 = v2[4];
      v5 = v2[5];
    }
    else
    {
      v15 = v3;
      v11 = 0;
    }
    *(_QWORD *)(v6 + v5) = v3;

    v14 = *v4;
  }
  else
  {
    if (v7)
    {
      v12 = *(void **)&v7[direct field offset for XPCHostConnection.connection];
      v13 = v7;
      objc_msgSend(v12, sel_setExportedObject_, 0);
      objc_msgSend(v12, sel_setInvalidationHandler_, 0);
      objc_msgSend(v12, sel_setInterruptionHandler_, 0);
      objc_msgSend(v12, sel_invalidate);

      v14 = *(void **)(v6 + v5);
      v6 = v2[4];
      v5 = v2[5];
    }
    else
    {
      v14 = 0;
    }
    *(_QWORD *)(v6 + v5) = v3;
  }

  free(v2);
}

uint64_t default argument 1 of ActivitySession.updateActiveParticipants(with:fromCache:)()
{
  return 0;
}

uint64_t ActivitySession.updateActiveParticipants(with:fromCache:)(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t ObjectType;
  dispatch_group_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  void *v30;
  id v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint8_t *v41;
  int v42;
  void *v43;
  id v44;
  uint64_t v45;
  void (*v46)(dispatch_group_t);
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, void (*)(void *), _QWORD *, uint64_t, unint64_t);
  NSObject *v95;
  dispatch_group_t v96;
  void (*v97)(uint64_t);
  uint64_t v98;
  _QWORD *v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t result;
  _QWORD v111[2];
  _QWORD *v112;
  uint8_t *v113;
  int v114;
  os_log_t v115;
  uint64_t v116;
  void (*v117)(_QWORD *, uint64_t);
  uint64_t (*v118)(uint64_t);
  char *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  dispatch_group_t v128;
  void *v129;
  _QWORD *v130;
  uint64_t aBlock[6];
  uint64_t v132;
  uint64_t v133;
  char v134;

  v3 = v2;
  LODWORD(v123) = a2;
  v122 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v122);
  v6 = (char *)v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)type metadata accessor for Logger();
  v8 = *(v7 - 1);
  MEMORY[0x1E0C80A78](v7);
  v128 = (dispatch_group_t)((char *)v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (_QWORD *)((char *)v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v2 + OBJC_IVAR___CPActivitySession_queue);
  *v13 = v14;
  ObjectType = *MEMORY[0x1E0DEF740];
  v125 = *(_QWORD **)(v11 + 104);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v125)(v13, ObjectType, v10);
  v120 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  v16 = *(dispatch_group_t *)(v11 + 8);
  ((void (*)(_QWORD *, uint64_t))v16)(v13, v10);
  if ((v14 & 1) != 0)
  {
    v117 = (void (*)(_QWORD *, uint64_t))v16;
    v119 = v6;
    v132 = a1;
    v133 = 0;
    v134 = 1;
    v17 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v3) + 0x2D0);
    v18 = swift_bridgeObjectRetain();
    v118 = v17;
    v19 = (void *)v17(v18);
    v20 = objc_msgSend(v19, sel_bundleIdentifier);

    v21 = (_QWORD *)&unk_1ED303000;
    v126 = (_QWORD *)a1;
    v127 = v7;
    v124 = v8;
    if (v20)
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = a1;
      v25 = v24;

      v7 = (id)v3;
      swift_bridgeObjectRetain();
      v26 = specialized Sequence.first(where:)(v23, v7, v22, v25);
      v28 = v27;
      v121 = 0;
      swift_bridgeObjectRelease_n();

      if ((v28 & 1) != 0)
      {
        v16 = (dispatch_group_t)OBJC_IVAR___CPActivitySession_isLocalParticipantActive;
        if (*((_BYTE *)v7 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive) == 1)
        {
          if (one-time initialization token for default != -1)
            goto LABEL_77;
          goto LABEL_11;
        }
      }
      else
      {
        v133 = v26;
        v134 = 0;
        v16 = (dispatch_group_t)OBJC_IVAR___CPActivitySession_isLocalParticipantActive;
        v29 = *((unsigned __int8 *)v7 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive);
        *((_BYTE *)v7 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive) = 1;
        v30 = v120;
        *v13 = v120;
        ((void (*)(_QWORD *, uint64_t, uint64_t))v125)(v13, ObjectType, v10);
        v31 = v30;
        LOBYTE(v30) = _dispatchPreconditionTest(_:)();
        v117(v13, v10);
        if ((v30 & 1) == 0)
        {
          __break(1u);
          goto LABEL_76;
        }
        if (v29 != *((unsigned __int8 *)&v16->isa + (_QWORD)v7))
          ActivitySession.sessionChanged()();
        specialized Set._Variant.remove(_:)(v26);
      }
      a1 = (uint64_t)v126;
      v7 = v127;
      v8 = v124;
LABEL_19:
      v16 = v128;
      v21 = &unk_1ED303000;
    }
    else
    {
      v121 = 0;
      v16 = v128;
    }
    if (v21[372] == -1)
      goto LABEL_21;
  }
  else
  {
LABEL_73:
    __break(1u);
  }
  swift_once();
LABEL_21:
  v45 = __swift_project_value_buffer((uint64_t)v7, (uint64_t)static Log.default);
  v46 = *(void (**)(dispatch_group_t))(v8 + 16);
  v117 = (void (*)(_QWORD *, uint64_t))v45;
  v46(v16);
  swift_bridgeObjectRetain_n();
  v13 = (id)v3;
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.default.getter();
  v49 = os_log_type_enabled(v47, v48);
  v125 = v13;
  if (v49)
  {
    v50 = swift_slowAlloc();
    v51 = v13;
    v52 = (_QWORD *)swift_slowAlloc();
    v116 = swift_slowAlloc();
    aBlock[0] = v116;
    *(_DWORD *)v50 = 138413058;
    v129 = v51;
    v53 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v52 = v51;

    *(_WORD *)(v50 + 12) = 1024;
    LODWORD(v129) = v123 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v50 + 18) = 2080;
    swift_beginAccess();
    if ((v134 & 1) != 0)
    {
      v54 = 0xE300000000000000;
      v55 = 7104878;
    }
    else
    {
      v130 = (_QWORD *)v133;
      v55 = String.init<A>(reflecting:)();
      v54 = v56;
    }
    v57 = v126;
    v130 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 28) = 2080;
    v58 = swift_bridgeObjectRetain();
    v59 = specialized _copyCollectionToContiguousArray<A>(_:)(v58);
    swift_bridgeObjectRelease();
    v130 = v59;
    v60 = v121;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v130);
    v121 = v60;
    if (v60)
      goto LABEL_79;
    v61 = MEMORY[0x1AF44828C](v130, MEMORY[0x1E0DEE190]);
    v8 = v62;
    swift_release();
    v130 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v8, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v47, v48, "%@ updating activeParticipants, fromCache: %{BOOL}d, localParticipantID:%s participantIDs: %s", (uint8_t *)v50, 0x26u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v52, -1, -1);
    v63 = v116;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v63, -1, -1);
    MEMORY[0x1AF44981C](v50, -1, -1);

    (*(void (**)(dispatch_group_t, _QWORD *))(v124 + 8))(v128, v127);
    a1 = (uint64_t)v57;
    v13 = v125;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(dispatch_group_t, _QWORD *))(v8 + 8))(v16, v7);
  }
  v64 = OBJC_IVAR___CPActivitySession_activeParticipantIDs;
  if ((specialized static Set.== infix(_:_:)(*(_QWORD *)((char *)v13 + OBJC_IVAR___CPActivitySession_activeParticipantIDs), a1) & 1) != 0)
  {
    if ((v123 & 1) == 0
      || (v65 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x368))(),
          v66 = specialized Set.init<A>(_:)(v65),
          v67 = specialized static Set.== infix(_:_:)(v66, v132),
          swift_bridgeObjectRelease(),
          (v67 & 1) != 0))
    {
      v68 = v13;
      v69 = Logger.logObject.getter();
      v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc();
        v72 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v71 = 138412290;
        aBlock[0] = (uint64_t)v68;
        v73 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v72 = v68;

        _os_log_impl(&dword_1ACCCC000, v69, v70, "%@ not updating activeParticipants since no change was detected", v71, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v72, -1, -1);
        MEMORY[0x1AF44981C](v71, -1, -1);

      }
      else
      {

      }
      return swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)((char *)v13 + v64) = a1;
  swift_bridgeObjectRetain();
  v74 = swift_bridgeObjectRelease();
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x350))(v74))
  {
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  v128 = dispatch_group_create();
  v75 = swift_allocObject();
  *(_QWORD *)(v75 + 16) = MEMORY[0x1E0DEE9E0];
  v76 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v77 = swift_allocObject();
  *(_QWORD *)(v77 + 16) = v76;
  *(_QWORD *)(v77 + 24) = v75;
  aBlock[4] = (uint64_t)partial apply for closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:);
  aBlock[5] = v77;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_18;
  _Block_copy(aBlock);
  v130 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  ObjectType = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  swift_retain();
  v124 = v75;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  v78 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  v79 = swift_release();
  v80 = (void *)v118(v79);
  v81 = objc_msgSend(v80, sel_bundleIdentifier);

  if (!v81)
  {
    swift_bridgeObjectRetain_n();
    v99 = v13;
    v100 = Logger.logObject.getter();
    v101 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v100, v101))
    {
      v102 = swift_slowAlloc();
      v126 = (_QWORD *)swift_slowAlloc();
      v127 = (_QWORD *)swift_slowAlloc();
      aBlock[0] = (uint64_t)v127;
      *(_DWORD *)v102 = 136315394;
      swift_bridgeObjectRetain();
      v103 = v13;
      v104 = Set.description.getter();
      v119 = (char *)v78;
      v106 = v105;
      swift_bridgeObjectRelease();
      v130 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v102 + 12) = 2112;
      v130 = v99;
      v107 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v108 = v126;
      *v126 = v103;

      _os_log_impl(&dword_1ACCCC000, v100, v101, "Failed to update participants for participantIDs %s on %@ because of invalid bundleID", (uint8_t *)v102, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v108, -1, -1);
      v109 = (uint64_t)v127;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v109, -1, -1);
      MEMORY[0x1AF44981C](v102, -1, -1);

LABEL_67:
      swift_release();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v119 = (char *)v78;
  v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v123 = v82;

  v83 = *(_QWORD *)(a1 + 56);
  v127 = (_QWORD *)(a1 + 56);
  v84 = 1 << *(_BYTE *)(a1 + 32);
  v85 = -1;
  if (v84 < 64)
    v85 = ~(-1 << v84);
  v3 = v85 & v83;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v10 = 0;
  v7 = (_QWORD *)((unint64_t)(v84 + 63) >> 6);
  v16 = v128;
  while (v3)
  {
    v86 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    v87 = v86 | (v10 << 6);
LABEL_56:
    v91 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v87);
    if ((v134 & 1) != 0 || v91 != v133)
    {
      dispatch_group_enter(v128);
      if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x380))())
      {
        v8 = v92;
        ObjectType = swift_getObjectType();
        v93 = (_QWORD *)swift_allocObject();
        v93[2] = v124;
        v93[3] = v91;
        v93[4] = v16;
        v94 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void *), _QWORD *, uint64_t, unint64_t))(v8 + 40);
        swift_retain();
        v95 = v16;
        v94(v91, v122, v123, partial apply for closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:), v93, ObjectType, v8);
        a1 = (uint64_t)v126;
        swift_unknownObjectRelease();
        v13 = v125;
        swift_release();
      }
    }
  }
  if (__OFADD__(v10++, 1))
  {
    __break(1u);
    goto LABEL_73;
  }
  if (v10 >= (uint64_t)v7)
    goto LABEL_64;
  v89 = v127[v10];
  if (v89)
  {
LABEL_55:
    v3 = (v89 - 1) & v89;
    v87 = __clz(__rbit64(v89)) + (v10 << 6);
    goto LABEL_56;
  }
  v90 = v10 + 1;
  if (v10 + 1 >= (uint64_t)v7)
    goto LABEL_64;
  v89 = v127[v90];
  if (v89)
    goto LABEL_54;
  v90 = v10 + 2;
  if (v10 + 2 >= (uint64_t)v7)
    goto LABEL_64;
  v89 = v127[v90];
  if (v89)
    goto LABEL_54;
  v90 = v10 + 3;
  if (v10 + 3 >= (uint64_t)v7)
    goto LABEL_64;
  v89 = v127[v90];
  if (v89)
    goto LABEL_54;
  v90 = v10 + 4;
  if (v10 + 4 >= (uint64_t)v7)
    goto LABEL_64;
  v89 = v127[v90];
  if (v89)
    goto LABEL_54;
  v90 = v10 + 5;
  if (v10 + 5 >= (uint64_t)v7)
  {
LABEL_64:
    swift_release();
    swift_bridgeObjectRelease();
    v96 = v128;
    OS_dispatch_group.notify(queue:work:)();
    v97 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x358);
    v98 = swift_retain();
    v97(v98);

    goto LABEL_67;
  }
  v89 = v127[v90];
  if (v89)
  {
LABEL_54:
    v10 = v90;
    goto LABEL_55;
  }
  while (1)
  {
    v10 = v90 + 1;
    if (__OFADD__(v90, 1))
      break;
    if (v10 >= (uint64_t)v7)
      goto LABEL_64;
    v89 = v127[v10];
    ++v90;
    if (v89)
      goto LABEL_55;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  swift_once();
LABEL_11:
  __swift_project_value_buffer((uint64_t)v127, (uint64_t)static Log.default);
  v32 = v7;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.default.getter();
  v35 = v34;
  v36 = os_log_type_enabled(v33, v34);
  v116 = (uint64_t)v32;
  if (v36)
  {
    v115 = v33;
    v37 = swift_slowAlloc();
    v114 = v35;
    v38 = (uint8_t *)v37;
    v112 = (_QWORD *)swift_slowAlloc();
    v113 = v38;
    *(_DWORD *)v38 = 138412290;
    v111[1] = v38 + 4;
    aBlock[0] = (uint64_t)v32;
    v39 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v40 = v112;
    *v112 = v32;

    v33 = v115;
    v41 = v113;
    _os_log_impl(&dword_1ACCCC000, v115, (os_log_type_t)v114, "%@ setting isLocalParticipantActive=false", v113, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v40, -1, -1);
    MEMORY[0x1AF44981C](v41, -1, -1);
  }
  else
  {

  }
  a1 = (uint64_t)v126;

  v42 = *((unsigned __int8 *)&v16->isa + (_QWORD)v7);
  *((_BYTE *)&v16->isa + (_QWORD)v7) = 0;
  v43 = v120;
  *v13 = v120;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v125)(v13, ObjectType, v10);
  v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)();
  v117(v13, v10);
  v8 = v124;
  if ((v43 & 1) != 0)
  {
    if (v42 != *((unsigned __int8 *)&v16->isa + (_QWORD)v7))
      ActivitySession.sessionChanged()();
    v7 = v127;
    goto LABEL_19;
  }
  __break(1u);
LABEL_79:
  swift_bridgeObjectRelease();
  result = swift_release();
  __break(1u);
  return result;
}

void closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  NSObject *log;
  uint64_t v18;
  uint64_t v19[3];

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1AF449918](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (one-time initialization token for default != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    v5 = v3;
    swift_retain_n();
    v6 = v5;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      log = v7;
      v10 = (_QWORD *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v19[0] = v18;
      *(_DWORD *)v9 = 138412546;
      v11 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v10 = v3;

      *(_WORD *)(v9 + 12) = 2080;
      swift_beginAccess();
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      swift_bridgeObjectRetain();
      v12 = Dictionary.description.getter();
      v14 = v13;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, log, v8, "Retrieved all participants for %@, updating with participants %s", (uint8_t *)v9, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v10, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      MEMORY[0x1AF44981C](v9, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    v15 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x370);
    v16 = swift_bridgeObjectRetain();
    v15(v16);

  }
}

void closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:)(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  if (a1)
  {
    swift_beginAccess();
    v7 = a1;
    specialized Dictionary.subscript.setter((uint64_t)a1, a3);
    swift_endAccess();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v11 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v9, v10, "updateActiveParticipants, could not find active-remote-participant for participantID %llu", v11, 0xCu);
      MEMORY[0x1AF44981C](v11, -1, -1);
    }

  }
  dispatch_group_leave(a4);
}

void ActivitySession.join(audioSessionID:completion:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char *v13;
  uint64_t v14;

  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)&v3[OBJC_IVAR___CPActivitySession_queue];
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v13 = v3;
    swift_retain();
    specialized ActivitySession.invalidationBlock(execute:)(v13, v13, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3);
    swift_release();

  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in ActivitySession.join(audioSessionID:completion:)(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  void (*v8)(uint64_t *__return_ptr);
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(_QWORD *, uint64_t, uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x2A0);
  v8(&v44);
  v9 = v44;
  v42 = 0x8000000000000000;
  v43 = v44;
  v10 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v43, &v42);
  v11 = outlined consume of ActivitySession.State(v9);
  if ((v10 & 1) != 0
    || (((void (*)(uint64_t *__return_ptr, unint64_t))v8)(&v44, v11),
        v12 = v44,
        v42 = 0x8000000000000008,
        v43 = v44,
        v13 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v43, &v42),
        outlined consume of ActivitySession.State(v12),
        (v13 & 1) != 0))
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.host);
    v15 = a1;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v39 = a3;
      v40 = a4;
      v18 = swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v44 = v38;
      *(_DWORD *)v18 = 138412546;
      v43 = (uint64_t)v15;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v15;

      *(_WORD *)(v18 + 12) = 2080;
      if ((a2 & 0x100000000) != 0)
      {
        v21 = 0xE300000000000000;
        v22 = 7104878;
      }
      else
      {
        LODWORD(v43) = a2;
        v22 = String.init<A>(reflecting:)();
        v21 = v25;
      }
      a3 = v39;
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v16, v17, "Joining %@ with audioSessionID: %s", (uint8_t *)v18, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v38, -1, -1);
      MEMORY[0x1AF44981C](v18, -1, -1);

      a4 = v40;
      v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    }
    else
    {

    }
    v44 = 0x8000000000000008;
    (*(void (**)(uint64_t *))((*v7 & *v15) + 0x2A8))(&v44);
    (*(void (**)(unint64_t))((*v7 & *v15) + 0x1E0))(a2 | ((HIDWORD(a2) & 1) << 32));
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = a3;
    *(_QWORD *)(v26 + 24) = a4;
    v27 = *(uint64_t (**)(uint64_t))((*v7 & *v15) + 0x380);
    v28 = swift_retain();
    if (v27(v28))
    {
      v30 = v29;
      ObjectType = swift_getObjectType();
      v32 = UUID.uuidString.getter();
      v34 = v33;
      v35 = (_QWORD *)swift_allocObject();
      v35[2] = v15;
      v35[3] = partial apply for closure #1 in closure #1 in ActivitySession.join(audioSessionID:completion:);
      v35[4] = v26;
      v36 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v30 + 72);
      v37 = v15;
      swift_retain();
      v36(v37, v32, v34, closure #1 in ActivitySession.fetchDataCryptor(completion:)partial apply, v35, ObjectType, v30);
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors();
    swift_allocError();
    *v23 = 1;
    return swift_willThrow();
  }
}

uint64_t ActivitySession.invalidationBlock(execute:)(uint64_t (*a1)(void))
{
  void *v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *log;
  uint64_t v19;
  uint64_t v20;

  result = a1();
  if (v2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    v5 = v1;
    v6 = v2;
    v7 = v5;
    v8 = v2;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      log = v9;
      v12 = (_QWORD *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v20 = v19;
      *(_DWORD *)v11 = 138412546;
      v13 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v14 = v12;
      *v12 = v7;

      *(_WORD *)(v11 + 12) = 2080;
      v15 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      v9 = log;
      _os_log_impl(&dword_1ACCCC000, log, v10, "%@ was invalidated with error: %s", (uint8_t *)v11, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v19, -1, -1);
      MEMORY[0x1AF44981C](v11, -1, -1);
    }
    else
    {

    }
    objc_msgSend(v7, sel_resetSession);
    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActivitySession.leave()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  v3 = MEMORY[0x1E0DEEDD8];
  v9 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2D0))(v8);
  v10 = objc_msgSend(v9, sel_metadata);

  if (!v10
    || (v11 = objc_msgSend(v10, sel_lifetimePolicy), v10, v11 != (id)1)
    || ((*(uint64_t (**)(void))((*(_QWORD *)v3 & *v1) + 0x2E8))() & 1) == 0)
  {
    v16 = v1;
    specialized ActivitySession.invalidationBlock(execute:)(v16, (uint64_t)v16, (uint64_t (*)(uint64_t))closure #1 in ActivitySession.leave());

    return;
  }
  if (one-time initialization token for host != -1)
    goto LABEL_11;
LABEL_6:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1ACCCC000, v13, v14, "Requested leave, but ending instead due to lifetimePolicy", v15, 2u);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }

  (*(void (**)(void))((*(_QWORD *)v3 & *v1) + 0x3E0))();
}

uint64_t closure #1 in ActivitySession.leave()(_QWORD *a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD *__return_ptr);
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _BYTE *v20;
  _QWORD v21[3];
  unint64_t v22;
  unint64_t v23;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x2A0);
  v3(v21);
  v4 = v21[0];
  v23 = v21[0];
  v22 = 0x8000000000000008;
  v5 = static ActivitySession.State.== infix(_:_:)(&v23, &v22);
  v6 = outlined consume of ActivitySession.State(v4);
  if ((v5 & 1) != 0
    || (((void (*)(_QWORD *__return_ptr, unint64_t))v3)(v21, v6),
        v7 = v21[0],
        v23 = v21[0],
        v22 = 0x8000000000000000,
        v8 = static ActivitySession.State.== infix(_:_:)(&v23, &v22),
        outlined consume of ActivitySession.State(v7),
        (v8 & 1) != 0))
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.host);
    v10 = a1;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v21[0] = v10;
      v15 = (_QWORD *)v14;
      *(_DWORD *)v13 = 138412290;
      v16 = v10;
      v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v15 = v10;

      _os_log_impl(&dword_1ACCCC000, v11, v12, "Leaving %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v15, -1, -1);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }
    else
    {

    }
    v21[0] = 0x8000000000000010;
    (*(void (**)(_QWORD *))((*v2 & *v10) + 0x2A8))(v21);
    v17 = (_QWORD *)((char *)v10 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
    swift_beginAccess();
    v18 = *v17;
    *v17 = MEMORY[0x1E0DEE9D8];
    ActivitySession.persistentSceneIdentifiers.didset(v18);
    return swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors();
    swift_allocError();
    *v20 = 1;
    return swift_willThrow();
  }
}

Swift::Void __swiftcall ActivitySession.end()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  v8 = v0;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v16 = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v8;

    _os_log_impl(&dword_1ACCCC000, v9, v10, "Ending %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {

  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  v16 = (_QWORD *)v14;
  (*(void (**)(_QWORD **))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v8) + 0x2A8))(&v16);
}

Swift::Void __swiftcall ActivitySession.permitJoin()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  NSObject *v22;
  void (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  _QWORD v25[4];
  unint64_t v26;
  unint64_t v27;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (_QWORD *)((char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  v8 = v0;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v25[0] = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v8;

    _os_log_impl(&dword_1ACCCC000, v9, v10, "Received request for %@ to be permitted", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {

    v9 = v8;
  }

  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v8->isa) + 0x2A0))(v25);
  v15 = v25[0];
  v26 = 0x8000000000000010;
  v27 = v25[0];
  v16 = static ActivitySession.State.== infix(_:_:)(&v27, &v26);
  outlined consume of ActivitySession.State(v15);
  if ((v16 & 1) != 0)
  {
    v17 = v8;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v20 = 138412290;
      v25[0] = v17;
      v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v21 = v17;

      _os_log_impl(&dword_1ACCCC000, v18, v19, "Permitting %@ to be joined", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v21, -1, -1);
      MEMORY[0x1AF44981C](v20, -1, -1);
    }
    else
    {

      v18 = v17;
    }

    v23 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*v14 & (uint64_t)v17->isa) + 0x230))(v25);
    if (__OFADD__(*v24, 1))
    {
      __break(1u);
    }
    else
    {
      ++*v24;
      v23(v25, 0);
      v25[0] = 0x8000000000000000;
      (*(void (**)(_QWORD *))((*v14 & (uint64_t)v17->isa) + 0x2A8))(v25);
    }
  }
}

uint64_t ActivitySession.logAttachmentEvent(report:reportEvent:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for host != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  v8 = v3;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v12 = 138412546;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v9;

    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v10, v11, "%@: Logging attachment event in RTC reporting: %s", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x398))();
  if (result)
  {
    RTCReporter.reportAttachmentEvent(report:)(a1);
    return swift_release();
  }
  return result;
}

void ActivitySession.postEvent(event:)(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t v47;
  os_log_type_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  Class isa;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySession_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)();
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_46:
    swift_once();
LABEL_7:
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.default);
    v23 = v2;
    v24 = a1;
    v25 = v23;
    v26 = v24;
    v27 = v25;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, (os_log_type_t)v29))
    {

      return;
    }
    v75 = v29;
    v30 = swift_slowAlloc();
    v31 = (_QWORD *)swift_slowAlloc();
    v76 = swift_slowAlloc();
    v78 = (unint64_t)v27;
    v79 = v76;
    *(_DWORD *)v30 = 138412802;
    v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v31 = v27;

    *(_WORD *)(v30 + 12) = 2112;
    v78 = (unint64_t)v26;
    v33 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v31[1] = v26;

    *(_WORD *)(v30 + 22) = 2080;
    ((void (*)(unint64_t *__return_ptr))v10)(&v78);
    if (v78 >> 62)
    {
      if (v78 >> 62 != 1)
      {
        v47 = v76;
        v48 = v75;
        v49 = 0xE600000000000000;
        v50 = 0x64656E696F4ALL;
        if (v78 != 0x8000000000000008)
        {
          v50 = 1952867660;
          v49 = 0xE400000000000000;
        }
        if (v78 == 0x8000000000000000)
          v35 = 0x676E6974696157;
        else
          v35 = v50;
        if (v78 == 0x8000000000000000)
          v34 = 0xE700000000000000;
        else
          v34 = v49;
        goto LABEL_26;
      }
      outlined consume of ActivitySession.State(v78);
      v34 = 0xE900000000000066;
      v35 = 0x664F6465646E6148;
    }
    else
    {
      outlined consume of ActivitySession.State(v78);
      v34 = 0xEB00000000646574;
      v35 = 0x6164696C61766E49;
    }
    v47 = v76;
    v48 = v75;
LABEL_26:
    v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v28, v48, "%@ dropping event %@ because state != joined. state: %s", (uint8_t *)v30, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v31, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v47, -1, -1);
    v51 = v30;
    goto LABEL_43;
  }
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2A0);
  ((void (*)(unint64_t *__return_ptr, uint64_t))v10)(&v79, v11);
  v13 = v79;
  v77 = 0x8000000000000008;
  v78 = v79;
  v14 = static ActivitySession.State.== infix(_:_:)(&v78, &v77);
  v15 = outlined consume of ActivitySession.State(v13);
  if ((v14 & 1) == 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_7;
    goto LABEL_46;
  }
  v16 = *(_QWORD *)&a1[OBJC_IVAR___CPActivitySessionEvent_originatorID];
  v17 = (*(uint64_t (**)(unint64_t))((*v12 & *v2) + 0x368))(v15);
  if (!*(_QWORD *)(v17 + 16) || (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) == 0))
  {
    v76 = v16;
    v36 = swift_bridgeObjectRelease();
    v37 = *(uint64_t (**)(uint64_t))((*v12 & *v2) + 0x2D0);
    v38 = (void *)v37(v36);
    v39 = objc_msgSend(v38, sel_bundleIdentifier);

    if (v39)
    {
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v43 = v42;

      if ((*(uint64_t (**)(void))((*v12 & *v2) + 0x380))())
      {
        v45 = v44;
        ObjectType = swift_getObjectType();
        v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 24))(v76, v41, v43, ObjectType, v45);
        swift_unknownObjectRelease();
        v40 = swift_bridgeObjectRelease();
        if (v20)
          goto LABEL_31;
      }
      else
      {
        v40 = swift_bridgeObjectRelease();
      }
    }
    v52 = (void *)v37(v40);
    v53 = objc_msgSend(v52, sel_bundleIdentifier);

    if (v53)
    {
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v56 = v55;

      if ((*(uint64_t (**)(void))((*v12 & *v2) + 0x380))())
      {
        v58 = v57;
        v59 = swift_getObjectType();
        v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 32))(v76, v54, v56, v59, v58);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        if (v20)
          goto LABEL_31;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v70 = type metadata accessor for Logger();
    __swift_project_value_buffer(v70, (uint64_t)static Log.default);
    v71 = a1;
    v28 = Logger.logObject.getter();
    v72 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v72))
    {

      return;
    }
    v73 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v73 = 134217984;
    v79 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1ACCCC000, v28, v72, "Received event from unknown participant %llu", v73, 0xCu);
    v51 = (uint64_t)v73;
LABEL_43:
    MEMORY[0x1AF44981C](v51, -1, -1);

    return;
  }
  v20 = *(void **)(*(_QWORD *)(v17 + 56) + 8 * v18);
  v21 = v20;
  swift_bridgeObjectRelease();
LABEL_31:
  v60 = *(_QWORD *)&a1[OBJC_IVAR___CPActivitySessionEvent_type];
  v61 = objc_allocWithZone(MEMORY[0x1E0DBD260]);
  v62 = v20;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v64 = objc_msgSend(v61, sel_initWithSessionUUID_originator_type_, isa, v62, v60);

  if (*(_QWORD *)&a1[OBJC_IVAR___CPActivitySessionEvent_item + 8])
    v65 = (void *)MEMORY[0x1AF4480F4](*(_QWORD *)&a1[OBJC_IVAR___CPActivitySessionEvent_item]);
  else
    v65 = 0;
  objc_msgSend(v64, sel_setItem_, v65);

  v66 = (void *)(*(uint64_t (**)(id))((*v12 & *v2) + 0x330))(objc_msgSend(v64, sel_setQueueItemType_, *(_QWORD *)&a1[OBJC_IVAR___CPActivitySessionEvent_queueItemType]));
  objc_msgSend(v64, sel_setSession_, v66);

  if ((*(uint64_t (**)(id))((*v12 & *v2) + 0x380))(objc_msgSend(v64, sel_setUrl_, *(_QWORD *)&a1[OBJC_IVAR___CPActivitySessionEvent_url])))
  {
    v68 = v67;
    v69 = swift_getObjectType();
    (*(void (**)(_QWORD *, id, uint64_t, uint64_t))(v68 + 64))(v2, v64, v69, v68);

    swift_unknownObjectRelease();
  }
  else
  {

  }
}

Swift::Void __swiftcall ActivitySession.requestEncryptionKeys(for:)(Swift::OpaquePointer_optional a1)
{
  _QWORD *v1;
  void *rawValue;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  rawValue = a1.value._rawValue;
  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (rawValue)
    {
      v9 = v1;
      v10 = swift_bridgeObjectRetain();
      v11 = specialized Sequence.compactMap<A>(_:)(v10, v9);
      swift_bridgeObjectRelease();

    }
    else
    {
      v11 = 0;
    }
    v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380))())
    {
      v14 = v13;
      ObjectType = swift_getObjectType();
      v16 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x450))();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 80))(v1, v11, v16, v17, ObjectType, v14);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ActivitySession.activeRemoteParticipant(with:completion:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;

  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)((char *)v3 + OBJC_IVAR___CPActivitySession_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x380))(result))
    {
      v16 = v15;
      v17 = (void *)(*(uint64_t (**)(void))((*v14 & *v3) + 0x2D0))();
      v18 = objc_msgSend(v17, sel_bundleIdentifier);

      if (v18)
      {
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v21 = v20;

        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(_QWORD), uint64_t, uint64_t, uint64_t))(v16 + 40))(a1, v19, v21, a2, a3, ObjectType, v16);
        swift_unknownObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
    }
    return a2(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(uint64_t a1, uint64_t a2, int a3, void (*a4)(_QWORD), uint64_t a5)
{
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjCClassFromMetadata;
  id v38;
  Swift::String v39;
  Swift::String_optional v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  Swift::String v48;
  Swift::String_optional v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  char *v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  id v85;
  Swift::String v86;
  Swift::String_optional v87;
  Swift::String v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void (*v100)(_QWORD);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;

  LODWORD(v99) = a3;
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)&v5[OBJC_IVAR___CPActivitySession_queue];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) != 0)
  {
    v97 = a2;
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v17 = type metadata accessor for Logger();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  v19 = v5;
  v98 = v18;
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  v22 = os_log_type_enabled(v20, v21);
  v100 = a4;
  v101 = a5;
  v96 = a1;
  if (v22)
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v102 = (uint64_t)v19;
    v103 = v24;
    *(_DWORD *)v23 = 136315138;
    type metadata accessor for ActivitySession(0);
    v25 = v19;
    v26 = String.init<A>(reflecting:)();
    v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v20, v21, "Presenting session dismissal alert for %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v23, -1, -1);
  }
  else
  {

  }
  v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v29 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v19) + 0x3B0))();
  if (v29)
  {
    v30 = (char *)v29;
    v31 = (void *)(*(uint64_t (**)(void))((*v28 & *(_QWORD *)v19) + 0x2D0))();
    v32 = objc_msgSend(v31, sel_metadata);

    if (v32 && (v33 = objc_msgSend(v32, sel_title), v32, v33))
    {
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v36 = v35;

      type metadata accessor for ConversationManagerHost();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v38 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v104._object = (void *)0xE000000000000000;
      v39._object = (void *)0x80000001ACF7C750;
      v39._countAndFlagsBits = 0xD000000000000015;
      v40.value._countAndFlagsBits = 0x6E65736572706F43;
      v40.value._object = (void *)0xEE0065726F436563;
      v41._countAndFlagsBits = 0;
      v41._object = (void *)0xE000000000000000;
      v104._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v39, v40, (NSBundle)v38, v41, v104);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_1ACF59E20;
      *(_QWORD *)(v42 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v42 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v42 + 32) = v34;
      *(_QWORD *)(v42 + 40) = v36;
    }
    else
    {
      v43 = *(_QWORD *)&v30[direct field offset for XPCHostConnection.bundleIdentifier];
      v44 = *(_QWORD *)&v30[direct field offset for XPCHostConnection.bundleIdentifier + 8];
      objc_allocWithZone(MEMORY[0x1E0CA5870]);
      swift_bridgeObjectRetain();
      v45 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v43, v44, 1);
      v83 = v45;
      if (v45)
      {
        type metadata accessor for ConversationManagerHost();
        v84 = swift_getObjCClassFromMetadata();
        v85 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v84);
        v106._object = (void *)0xE000000000000000;
        v86._countAndFlagsBits = 0x415F40255F444E45;
        v86._object = (void *)0xEF454D414E5F5050;
        v87.value._countAndFlagsBits = 0x6E65736572706F43;
        v87.value._object = (void *)0xEE0065726F436563;
        v88._countAndFlagsBits = 0;
        v88._object = (void *)0xE000000000000000;
        v106._countAndFlagsBits = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v86, v87, (NSBundle)v85, v88, v106);

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v89 = swift_allocObject();
        *(_OWORD *)(v89 + 16) = xmmword_1ACF59E20;
        v90 = objc_msgSend(v83, sel_localizedName);
        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v93 = v92;

        *(_QWORD *)(v89 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v89 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v89 + 32) = v91;
        *(_QWORD *)(v89 + 40) = v93;
        v51 = String.init(format:_:)();
        v53 = v94;

LABEL_13:
        v54 = (char)v99;
        swift_bridgeObjectRelease();
        v55 = v54 & 1;
        v56 = ActivitySession.buildDisplayOptions(title:allowingCancellation:)(v51, v53, v54 & 1);
        swift_bridgeObjectRelease();
        if (v56)
        {
          v57 = *(_QWORD *)&v19[OBJC_IVAR___CPActivitySession_notificationCenter + 24];
          v58 = *(_QWORD *)&v19[OBJC_IVAR___CPActivitySession_notificationCenter + 32];
          v99 = v30;
          __swift_project_boxed_opaque_existential_1(&v19[OBJC_IVAR___CPActivitySession_notificationCenter], v57);
          v59 = UUID.uuidString.getter();
          v61 = v60;
          v62 = swift_allocObject();
          *(_BYTE *)(v62 + 16) = v55;
          v63 = v100;
          v64 = v101;
          *(_QWORD *)(v62 + 24) = v19;
          *(_QWORD *)(v62 + 32) = v63;
          *(_QWORD *)(v62 + 40) = v64;
          v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v58 + 8);
          v66 = v19;
          swift_retain();
          v65(v59, v61, v96, v97, v56, 0, partial apply for closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:), v62, v57, v58);

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v75 = v19;
          v76 = Logger.logObject.getter();
          v77 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v76, v77))
          {
            v78 = (uint8_t *)swift_slowAlloc();
            v79 = swift_slowAlloc();
            v102 = (uint64_t)v75;
            v103 = v79;
            *(_DWORD *)v78 = 136315138;
            type metadata accessor for ActivitySession(0);
            v80 = v75;
            v81 = String.init<A>(reflecting:)();
            v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v103);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
            _os_log_impl(&dword_1ACCCC000, v76, v77, "Skipping session dismissal alert and ending session because only one option would be presented: %s", v78, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v79, -1, -1);
            MEMORY[0x1AF44981C](v78, -1, -1);
          }
          else
          {

          }
          (*(void (**)(void (*)(_QWORD), uint64_t))((*v28 & *(_QWORD *)v75) + 0x418))(v100, v101);

        }
        return;
      }
      type metadata accessor for ConversationManagerHost();
      v46 = swift_getObjCClassFromMetadata();
      v47 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v46);
      v105._object = (void *)0xE000000000000000;
      v48._countAndFlagsBits = 0x495443415F444E45;
      v48._object = (void *)0xEC00000059544956;
      v49.value._countAndFlagsBits = 0x6E65736572706F43;
      v49.value._object = (void *)0xEE0065726F436563;
      v50._countAndFlagsBits = 0;
      v50._object = (void *)0xE000000000000000;
      v105._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v48, v49, (NSBundle)v47, v50, v105);

    }
    v51 = String.init(format:_:)();
    v53 = v52;
    goto LABEL_13;
  }
  v67 = v19;
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc();
    v71 = swift_slowAlloc();
    v102 = (uint64_t)v67;
    v103 = v71;
    *(_DWORD *)v70 = 136315138;
    type metadata accessor for ActivitySession(0);
    v72 = v67;
    v73 = String.init<A>(reflecting:)();
    v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v68, v69, "Not presenting session dismissal alert because we don't have an XPC connection for the app (not joined?) session: %s", v70, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v71, -1, -1);
    MEMORY[0x1AF44981C](v70, -1, -1);
  }
  else
  {

  }
  v100(0);
}

uint64_t closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(uint64_t result, char a2, _QWORD *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (result == 2)
  {
    if ((a2 & 1) == 0)
      return result;
    v7 = *MEMORY[0x1E0DEEDD8] & *a3;
    return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(v7 + 1056))(a4, a5);
  }
  if (result == 1)
  {
    v7 = *MEMORY[0x1E0DEEDD8] & *a3;
    if ((a2 & 1) != 0)
      return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(v7 + 1048))(a4, a5);
    return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(v7 + 1056))(a4, a5);
  }
  if ((a2 & 1) == 0)
  {
    v7 = *MEMORY[0x1E0DEEDD8] & *a3;
    return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(v7 + 1048))(a4, a5);
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  v9 = a3;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v17 = v13;
    *(_DWORD *)v12 = 136315138;
    type metadata accessor for ActivitySession(0);
    v14 = v9;
    v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v10, v11, "User chose not to dismiss session %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v13, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);
  }
  else
  {

  }
  return a4(1);
}

uint64_t ActivitySession.endSessionForAll(completion:)(void (*a1)(_QWORD), uint64_t a2)
{
  return ActivitySession.endSessionForAll(completion:)(a1, a2, "User chose to end for all for %s", (uint64_t)&unk_1E5C81228, (uint64_t)partial apply for closure #1 in ActivitySession.endSessionForAll(completion:), (uint64_t)&block_descriptor_33);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t ActivitySession.endSessionForLocal(completion:)(void (*a1)(_QWORD), uint64_t a2)
{
  return ActivitySession.endSessionForAll(completion:)(a1, a2, "User chose to leave session %s", (uint64_t)&unk_1E5C81250, (uint64_t)partial apply for closure #1 in ActivitySession.endSessionForLocal(completion:), (uint64_t)&block_descriptor_39);
}

uint64_t ActivitySession.endSessionForAll(completion:)(void (*a1)(_QWORD), uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t aBlock[6];

  v41 = a3;
  v42 = a2;
  v43 = a1;
  v10 = type metadata accessor for DispatchWorkItemFlags();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v46 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.default);
  v17 = v6;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v38 = a6;
    v20 = swift_slowAlloc();
    v39 = v11;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v40 = v10;
    v23 = v22;
    v47 = (uint64_t)v17;
    aBlock[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v36 = a4;
    type metadata accessor for ActivitySession(0);
    v24 = v17;
    v37 = v15;
    v25 = a5;
    v26 = v24;
    v27 = String.init<A>(reflecting:)();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a6 = v38;
    swift_bridgeObjectRelease();

    a5 = v25;
    v15 = v37;
    _os_log_impl(&dword_1ACCCC000, v18, v19, v41, v21, 0xCu);
    swift_arrayDestroy();
    v29 = v23;
    v10 = v40;
    MEMORY[0x1AF44981C](v29, -1, -1);
    v30 = v21;
    v11 = v39;
    MEMORY[0x1AF44981C](v30, -1, -1);
  }
  else
  {

  }
  v43(0);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v17;
  aBlock[4] = a5;
  aBlock[5] = v31;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a6;
  v32 = _Block_copy(aBlock);
  v33 = v17;
  static DispatchQoS.unspecified.getter();
  v47 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v34 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v15, v34, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v45);
  return swift_release();
}

uint64_t closure #1 in ActivitySession.endSessionForLocal(completion:)(_QWORD *a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x3D8))();
}

Swift::Void __swiftcall ActivitySession.terminateSessionIfAtEndOfLifetime()()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  void (*v2)(_QWORD *__return_ptr);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0);
  v11 = ((_QWORD *(*)(unint64_t *__return_ptr, uint64_t))v2)(&v41, v10);
  v12 = v41;
  if ((v41 & 0x8000000000000000) == 0)
    v11 = (_QWORD *)outlined consume of ActivitySession.State(v41);
  v1 = *(uint64_t (**)(void))((*v3 & *v0) + 0x2E8);
  if ((((uint64_t (*)(_QWORD *))v1)(v11) & 1) == 0
    || (v13 = (void *)(*(uint64_t (**)(void))((*v3 & *v0) + 0x2D0))(),
        v14 = objc_msgSend(v13, sel_metadata),
        v13,
        !v14)
    || (v15 = objc_msgSend(v14, sel_lifetimePolicy), v14, (v12 & 0x8000000000000000) == 0)
    || v15 != (id)1)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_13:
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.default);
      v26 = v0;
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc();
        v30 = swift_slowAlloc();
        v41 = v30;
        *(_DWORD *)v29 = 67109634;
        LOBYTE(v40) = v1() & 1;
        LODWORD(v40) = v40;
        v31 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v29 + 8) = 2080;
        v32 = (void *)(*(uint64_t (**)(uint64_t))((*v3 & *v26) + 0x2D0))(v31);
        v33 = objc_msgSend(v32, sel_metadata);

        if (v33)
        {
          v34 = objc_msgSend(v33, sel_lifetimePolicy);

          v40 = (uint64_t)v34;
          type metadata accessor for TUConversationActivityLifetimePolicy(0);
          v35 = String.init<A>(reflecting:)();
          v37 = v36;
        }
        else
        {
          v37 = 0xE300000000000000;
          v35 = 7104878;
        }
        v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v29 + 18) = 2080;
        v2(&v40);
        v38 = String.init<A>(reflecting:)();
        v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, v27, v28, "terminateSessionIfAtEndOfLifetime, Not terminating session.  isLocallyInitiated: %{BOOL}d, lifetimePolicy: %s, state: %s", (uint8_t *)v29, 0x1Cu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v30, -1, -1);
        MEMORY[0x1AF44981C](v29, -1, -1);
      }
      else
      {

      }
      return;
    }
LABEL_23:
    swift_once();
    goto LABEL_13;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.default);
  v17 = v0;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v40 = (uint64_t)v17;
    v41 = v21;
    *(_DWORD *)v20 = 136315138;
    type metadata accessor for ActivitySession(0);
    v22 = v17;
    v23 = String.init<A>(reflecting:)();
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v18, v19, "terminateSessionIfAtEndOfLifetime, terminating %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);
  }
  else
  {

  }
  (*(void (**)(void))((*v3 & *v17) + 0x3E0))();
}

unint64_t ActivitySession.buildDisplayOptions(title:allowingCancellation:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjCClassFromMetadata;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  _QWORD *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  Swift::String v54;
  Swift::String_optional v55;
  Swift::String v56;
  Swift::String v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  _OWORD v66[2];
  Swift::String v67;
  uint64_t v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E20;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v8;
  v9 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_bridgeObjectRelease();
  v64 = a3;
  v10 = swift_initStackObject();
  if ((a3 & 1) != 0)
  {
    *(_OWORD *)(v10 + 16) = xmmword_1ACF59E30;
    *(_QWORD *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v10 + 40) = v11;
    *(_QWORD *)(v10 + 72) = v9;
    *(_QWORD *)(v10 + 48) = a1;
    *(_QWORD *)(v10 + 56) = a2;
    *(_QWORD *)(v10 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v10 + 88) = v12;
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v14 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v15 = objc_msgSend(v14, sel_bundleForClass_, ObjCClassFromMetadata);
    v69._object = (void *)0xE000000000000000;
    v16._object = (void *)0x80000001ACF7CE00;
    v16._countAndFlagsBits = 0xD000000000000010;
    v17.value._countAndFlagsBits = 0x6E65736572706F43;
    v17.value._object = (void *)0xEE0065726F436563;
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    v69._countAndFlagsBits = 0;
    v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v69);

    *(_QWORD *)(v10 + 120) = v9;
    *(Swift::String *)(v10 + 96) = v19;
    *(_QWORD *)(v10 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v10 + 136) = v20;
    v21 = objc_msgSend(v14, (SEL)&selRef_multiplayerService + 1, ObjCClassFromMetadata);
    v70._object = (void *)0xE000000000000000;
    v22._countAndFlagsBits = 0x4C45434E4143;
    v22._object = (void *)0xE600000000000000;
    v23.value._countAndFlagsBits = 0x6E65736572706F43;
    v23.value._object = (void *)0xEE0065726F436563;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v70._countAndFlagsBits = 0;
    v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v70);

    *(Swift::String *)(v10 + 144) = v25;
    *(_QWORD *)(v10 + 168) = v9;
    *(_QWORD *)(v10 + 176) = 0xD000000000000022;
    *(_QWORD *)(v10 + 216) = MEMORY[0x1E0DEBB98];
    *(_QWORD *)(v10 + 184) = 0x80000001ACF7CE20;
    *(_QWORD *)(v10 + 192) = 1;
  }
  else
  {
    *(_OWORD *)(v10 + 16) = xmmword_1ACF59E10;
    *(_QWORD *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v10 + 40) = v26;
    *(_QWORD *)(v10 + 72) = v9;
    *(_QWORD *)(v10 + 48) = a1;
    *(_QWORD *)(v10 + 56) = a2;
    *(_QWORD *)(v10 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v10 + 88) = v27;
    type metadata accessor for ConversationManagerHost();
    v28 = swift_getObjCClassFromMetadata();
    v29 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v30 = objc_msgSend(v29, sel_bundleForClass_, v28);
    v71._object = (void *)0xE000000000000000;
    v31._object = (void *)0x80000001ACF7CE00;
    v31._countAndFlagsBits = 0xD000000000000010;
    v32.value._countAndFlagsBits = 0x6E65736572706F43;
    v32.value._object = (void *)0xEE0065726F436563;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v71._countAndFlagsBits = 0;
    v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, (NSBundle)v30, v33, v71);

    *(_QWORD *)(v10 + 120) = v9;
    *(Swift::String *)(v10 + 96) = v34;
  }
  v35 = specialized Dictionary.init(dictionaryLiteral:)(v10);
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v38 = v37;
  v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2E8))() & 1) != 0
    && (v40 = (void *)(*(uint64_t (**)(void))((*v39 & *v3) + 0x2D0))(),
        v41 = objc_msgSend(v40, sel_metadata),
        v40,
        v41)
    && (v42 = objc_msgSend(v41, sel_lifetimePolicy), v41, v42 == (id)1))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Log.default);
    v44 = v3;
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = swift_slowAlloc();
      v67._countAndFlagsBits = v48;
      *(_DWORD *)v47 = 136315138;
      type metadata accessor for ActivitySession(0);
      v49 = v44;
      v50 = String.init<A>(reflecting:)();
      *(_QWORD *)&v66[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v67._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v45, v46, "excluding end-only-for-me option for locally initiated session with initiator-owned content association: %s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v48, -1, -1);
      MEMORY[0x1AF44981C](v47, -1, -1);
    }
    else
    {

    }
    if ((v64 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v63;
    v68 = MEMORY[0x1E0DEBB98];
    v67._countAndFlagsBits = 0;
    outlined init with take of Any(&v67, v66);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = v35;
    v59 = v62;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    v52 = swift_getObjCClassFromMetadata();
    v53 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v52);
    v72._object = (void *)0xE000000000000000;
    v54._countAndFlagsBits = 0x5F524F465F444E45;
    v54._object = (void *)0xEA0000000000454DLL;
    v55.value._countAndFlagsBits = 0x6E65736572706F43;
    v55.value._object = (void *)0xEE0065726F436563;
    v56._countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    v72._countAndFlagsBits = 0;
    v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, (NSBundle)v53, v56, v72);

    v68 = v9;
    v67 = v57;
    outlined init with take of Any(&v67, v66);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = v35;
    v59 = v36;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v66, v59, v38, isUniquelyReferenced_nonNull_native);
  v60 = v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v60;
}

id default argument 6 of ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)@<X0>(_QWORD *a1@<X8>)
{
  id v3;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3 = (id)static IMUserNotificationCenter.shared;
  a1[3] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IMUserNotificationCenter);
  a1[4] = &protocol witness table for IMUserNotificationCenter;
  *a1 = v3;
  return v3;
}

char *ActivitySession.__allocating_init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  objc_class *v8;
  id v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  int v25;
  int v26;

  v25 = a6;
  v26 = a7;
  v24 = a5;
  v14 = objc_allocWithZone(v8);
  ObjectType = swift_getObjectType();
  v16 = *(_QWORD *)(a8 + 24);
  v17 = *(_QWORD *)(a8 + 32);
  v18 = __swift_mutable_project_boxed_opaque_existential_1(a8, v16);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  v22 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(a1, a2, a3, v24, v25, v26, (uint64_t)v20, v14, ObjectType, v16, a4, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a8);
  return v22;
}

char *ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v23;
  int v24;
  void *v25;

  v23 = a6;
  v24 = a7;
  ObjectType = swift_getObjectType();
  v15 = *(_QWORD *)(a8 + 24);
  v16 = *(_QWORD *)(a8 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a8, v15);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(a1, a2, a3, a5, v23, v24, (uint64_t)v19, v25, ObjectType, v15, a4, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a8);
  return v21;
}

char *ActivitySession.__allocating_init(activitySession:manager:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized ActivitySession.__allocating_init(activitySession:manager:)(a1, a2, v3, ObjectType, a3);
}

id ActivitySession.__deallocating_deinit()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void **v3;
  void *v4;
  objc_super v6;

  v1 = v0;
  v2 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
  if (*(_QWORD *)&v0[OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    *(_QWORD *)&v0[v2] = 0;
    swift_release();
  }
  ActivitySession.invalidateDomainAssertion()();
  v3 = (void **)&v0[OBJC_IVAR___CPActivitySession_connection];
  swift_beginAccess();
  v4 = *v3;
  *v3 = 0;

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for ActivitySession(0);
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

uint64_t default argument 0 of ActivitySession.invalidateAssertions(useDelay:)()
{
  return 0;
}

Swift::Void __swiftcall ActivitySession.refreshDataCryptor()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(_QWORD *, uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    (*(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))(&v26, v7);
    v9 = v26;
    v24 = 0x8000000000000008;
    v25 = v26;
    v10 = static ActivitySession.State.== infix(_:_:)(&v25, &v24);
    outlined consume of ActivitySession.State(v9);
    if ((v10 & 1) != 0)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v0;
      v12 = *(uint64_t (**)(void))((*v8 & *v0) + 0x380);
      v13 = v0;
      if (v12())
      {
        v15 = v14;
        ObjectType = swift_getObjectType();
        v17 = UUID.uuidString.getter();
        v19 = v18;
        v20 = (_QWORD *)swift_allocObject();
        v20[2] = v13;
        v20[3] = partial apply for closure #1 in ActivitySession.refreshDataCryptor();
        v20[4] = v11;
        v21 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v15 + 72);
        v22 = v13;
        swift_retain();
        v21(v22, v17, v19, partial apply for closure #1 in ActivitySession.fetchDataCryptor(completion:), v20, ObjectType, v15);
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in ActivitySession.refreshDataCryptor()(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  void *v4;
  id v5;
  void *v6;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x3B0))();
  if (result)
  {
    v4 = (void *)result;
    v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(result
                                                               + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
    result = swift_dynamicCast();
    if ((_DWORD)result)
    {

      objc_msgSend(v6, sel_setDataCryptor_, a1);
      return swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in ActivitySession.fetchDataCryptor(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18[0] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a1;
  aBlock[4] = partial apply for closure #1 in closure #1 in ActivitySession.fetchDataCryptor(completion:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_109;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v8, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v18[0] + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t ActivitySession.topicName.getter()
{
  return UUID.uuidString.getter();
}

Swift::Void __swiftcall ActivitySession.invalidate(replacementBundleIdentifier:)(Swift::String replacementBundleIdentifier)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  void (*v21)(_QWORD **);
  void *v22;
  _QWORD *v23;

  object = replacementBundleIdentifier._object;
  countAndFlagsBits = replacementBundleIdentifier._countAndFlagsBits;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (void **)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v1[OBJC_IVAR___CPActivitySession_queue];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  v11 = v1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v22 = object;
    v23 = v11;
    v16 = countAndFlagsBits;
    v17 = (_QWORD *)v15;
    *(_DWORD *)v14 = 138412290;
    v18 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v11;

    _os_log_impl(&dword_1ACCCC000, v12, v13, "Invalidating %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v19 = v17;
    countAndFlagsBits = v16;
    object = v22;
    MEMORY[0x1AF44981C](v19, -1, -1);
    MEMORY[0x1AF44981C](v14, -1, -1);
  }
  else
  {

  }
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = countAndFlagsBits;
  *(_QWORD *)(v20 + 24) = object;
  v23 = (_QWORD *)v20;
  v21 = *(void (**)(_QWORD **))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v11) + 0x2A8);
  swift_bridgeObjectRetain();
  v21(&v23);
}

id ActivitySession.rbsAssertion(for:)(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  Class isa;
  id v11;

  v1 = objc_msgSend((id)objc_opt_self(), sel_targetWithPid_, a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = (void *)MEMORY[0x1AF4480F4](v2);
  swift_bridgeObjectRelease();
  v4 = (void *)MEMORY[0x1AF4480F4](0x74634170756F7247, 0xEF73656974697669);
  v5 = objc_msgSend((id)objc_opt_self(), sel_attributeWithDomain_name_, v3, v4);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1ACF59E40;
  *(_QWORD *)(v6 + 32) = v5;
  specialized Array._endMutation()();
  v7 = objc_allocWithZone(MEMORY[0x1E0D87C98]);
  v8 = v5;
  v9 = (void *)MEMORY[0x1AF4480F4](0xD000000000000024, 0x80000001ACF7C770);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for RBSAttribute);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v7, sel_initWithExplanation_target_attributes_, v9, v1, isa);

  return v11;
}

void ActivitySession.updateApplicationState(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (a1 != 1
      || ((*(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2A0))(&v16, v9), v11 = v16, v14 = 0x8000000000000008, v15 = v16, v12 = static ActivitySession.State.== infix(_:_:)(&v15, &v14), outlined consume of ActivitySession.State(v11), (v12 & 1) == 0))
    {
      (*(void (**)(uint64_t))((*v10 & *v1) + 0x270))(a1);
      ActivitySession.sessionChanged()();
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ActivitySession.refreshActiveParticipants()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v7 = *(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8);
    v8 = swift_bridgeObjectRetain();
    v7(v8, 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Bool __swiftcall ActivitySession.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized ActivitySession.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:)(_BYTE *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x380))();
  if (result)
  {
    v6 = v5;
    ObjectType = swift_getObjectType();
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 56))(a2, ObjectType, v6);
    result = swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  *a1 = v8 & 1;
  return result;
}

Swift::Void __swiftcall ActivitySession.requestForegroundPresentation()()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void (*v9)(unint64_t *__return_ptr);
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    v24 = (unint64_t)v2;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v2;

    _os_log_impl(&dword_1ACCCC000, v3, v4, "Asked to be presented as foreground for %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

  }
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2A0);
  v9(&v24);
  v10 = v24;
  v22 = 0x8000000000000008;
  v23 = v24;
  v11 = static ActivitySession.State.== infix(_:_:)(&v23, &v22);
  v12 = outlined consume of ActivitySession.State(v10);
  if ((v11 & 1) != 0
    || (((void (*)(unint64_t *__return_ptr, unint64_t))v9)(&v24, v12),
        v13 = v24,
        v22 = 0x8000000000000000,
        v23 = v24,
        v14 = static ActivitySession.State.== infix(_:_:)(&v23, &v22),
        outlined consume of ActivitySession.State(v13),
        (v14 & 1) != 0))
  {
    v15 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x270))(1);
    if ((*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x380))(v15))
    {
      v17 = v16;
      ObjectType = swift_getObjectType();
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v17 + 112))(v2, ObjectType, v17);
      swift_unknownObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>, MEMORY[0x1E0C95F40]);
    Subject<>.send()();
  }
  else
  {
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1ACCCC000, v19, v20, "Not presenting in foreground as session is not in joined or waiting state", v21, 2u);
      MEMORY[0x1AF44981C](v21, -1, -1);
    }

  }
}

Swift::Void __swiftcall ActivitySession.associateScene(sceneID:)(Swift::String sceneID)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  _QWORD v16[2];
  _QWORD aBlock[6];

  object = sceneID._object;
  countAndFlagsBits = sceneID._countAndFlagsBits;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(_QWORD *)&v1[OBJC_IVAR___CPActivitySession_queue];
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v1;
  v13[3] = countAndFlagsBits;
  v13[4] = object;
  aBlock[4] = partial apply for closure #1 in ActivitySession.associateScene(sceneID:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_52;
  v14 = _Block_copy(aBlock);
  v15 = v1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v16[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v5, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
}

Swift::Void __swiftcall ActivitySession._associateScene(sceneID:)(Swift::String sceneID)
{
  char *v1;
  void *object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t countAndFlagsBits;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65[4];

  object = sceneID._object;
  countAndFlagsBits = sceneID._countAndFlagsBits;
  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR___CPActivitySession_queue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v12 = v1;
  v61 = v11;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = countAndFlagsBits;
  if (v15)
  {
    v17 = swift_slowAlloc();
    v18 = (_QWORD *)swift_slowAlloc();
    v60 = swift_slowAlloc();
    v65[0] = v60;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain();
    v64 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, (unint64_t)object, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2112;
    v64 = v12;
    v19 = v12;
    v16 = countAndFlagsBits;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v18 = v12;

    _os_log_impl(&dword_1ACCCC000, v13, v14, "Associating sceneID: %s with %@", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    v20 = v60;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);

  }
  else
  {

    v21 = swift_bridgeObjectRelease_n();
  }
  v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v23 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v12) + 0x1A8);
  v24 = ((uint64_t (*)(uint64_t))v23)(v21);
  v65[0] = v16;
  v65[1] = (uint64_t)object;
  MEMORY[0x1E0C80A78](v24);
  *(&v59 - 2) = (uint64_t)v65;
  v25 = specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)(&v59 - 4), v24);
  v27 = v26;
  v28 = swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
    v29 = (uint64_t)v12;
    v30 = ((uint64_t (*)(uint64_t))v23)(v28);
    v31 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
    }
    else if ((v31 & 0x8000000000000000) == 0)
    {
      v29 = v30;
      if (*(_QWORD *)(v30 + 16) >= v31)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v32 = swift_dynamicCastClass();
        if (!v32)
        {
          swift_bridgeObjectRelease();
          v32 = MEMORY[0x1E0DEE9D8];
        }
        v33 = *(_QWORD *)(v32 + 16);
        swift_release();
        if (v33 == v31)
        {
          v34 = swift_dynamicCastClass();
          if (!v34)
          {
            swift_bridgeObjectRelease();
            v34 = MEMORY[0x1E0DEE9D8];
          }
          goto LABEL_15;
        }
LABEL_34:
        swift_bridgeObjectRelease();
        v34 = specialized _copyCollectionToContiguousArray<A>(_:)(v29, v29 + 32, 0, (2 * v31) | 1);
LABEL_15:
        swift_bridgeObjectRelease();
        v35 = (uint64_t *)&v12[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers];
        swift_beginAccess();
        v36 = *v35;
        *v35 = v34;
        goto LABEL_21;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_33;
  }
  v37 = (uint64_t *)&v12[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers];
  swift_beginAccess();
  v38 = (_QWORD *)*v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
  v40 = v38[2];
  v39 = v38[3];
  if (v40 >= v39 >> 1)
    v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
  v38[2] = v40 + 1;
  v41 = &v38[2 * v40];
  v41[4] = v16;
  v41[5] = object;
  v36 = *v37;
  *v37 = (uint64_t)v38;
LABEL_21:
  ActivitySession.persistentSceneIdentifiers.didset(v36);
  v42 = swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(((uint64_t (*)(uint64_t))v23)(v42) + 16);
  swift_bridgeObjectRelease();
  if (v43 >= 2)
  {
    v60 = (uint64_t)object;
    v44 = v12;
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.default.getter();
    v61 = v45;
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc();
      v48 = (_QWORD *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      v63 = (uint64_t)v44;
      v64 = (_QWORD *)v59;
      *(_DWORD *)v47 = 138412546;
      v49 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v48 = v44;

      *(_WORD *)(v47 + 12) = 2080;
      v23();
      v50 = MEMORY[0x1AF44828C]();
      v52 = v51;
      swift_bridgeObjectRelease();
      v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v53 = v61;
      _os_log_impl(&dword_1ACCCC000, v61, v46, "Persistent scene identifiers for %@: %s", (uint8_t *)v47, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v48, -1, -1);
      v54 = v59;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v54, -1, -1);
      v55 = v47;
      v16 = countAndFlagsBits;
      MEMORY[0x1AF44981C](v55, -1, -1);

    }
    else
    {

    }
    object = (void *)v60;
    v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  }
  if ((*(uint64_t (**)(void))((*v22 & *(_QWORD *)v12) + 0x380))())
  {
    v57 = v56;
    ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v57 + 120))(v12, v16, object, ObjectType, v57);
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall ActivitySession._disassociateScene()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36[3];

  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, unint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  v8 = (*(uint64_t (**)(_QWORD *, unint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))(v8);
  if (v10)
  {
    v5 = (_QWORD *)v9;
    v2 = v10;
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Log.host);
      swift_bridgeObjectRetain_n();
      v12 = v0;
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.default.getter();
      v15 = os_log_type_enabled(v13, v14);
      v34 = v5;
      if (v15)
      {
        v16 = swift_slowAlloc();
        v17 = (_QWORD *)swift_slowAlloc();
        v33 = swift_slowAlloc();
        v36[0] = v33;
        *(_DWORD *)v16 = 136315394;
        swift_bridgeObjectRetain();
        v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v5, v2, v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2112;
        v35 = (uint64_t)v12;
        v18 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v17 = v12;

        v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        _os_log_impl(&dword_1ACCCC000, v13, v14, "Disassociating sceneID: %s from %@", (uint8_t *)v16, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v17, -1, -1);
        v19 = v33;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v19, -1, -1);
        MEMORY[0x1AF44981C](v16, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v27 = (_QWORD *)((char *)v12 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
      swift_beginAccess();
      v28 = *v27;
      *v27 = MEMORY[0x1E0DEE9D8];
      ActivitySession.persistentSceneIdentifiers.didset(v28);
      v29 = swift_bridgeObjectRelease();
      if ((*(uint64_t (**)(uint64_t))((*v1 & *v12) + 0x380))(v29))
      {
        v31 = v30;
        ObjectType = swift_getObjectType();
        (*(void (**)(_QWORD *, _QWORD *, unint64_t, uint64_t, uint64_t))(v31 + 128))(v12, v34, v2, ObjectType, v31);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for host != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.host);
  v21 = v0;
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v24 = 138412290;
    v36[0] = (uint64_t)v21;
    v26 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v25 = v21;

    _os_log_impl(&dword_1ACCCC000, v22, v23, "Tried to disassociate scene but no scene was associated with %@", v24, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v25, -1, -1);
    MEMORY[0x1AF44981C](v24, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall ActivitySession._disassociateScene(sceneID:)(Swift::String sceneID)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[4];
  uint64_t v43;

  object = sceneID._object;
  countAndFlagsBits = sceneID._countAndFlagsBits;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (_QWORD **)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)();
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v10 = MEMORY[0x1E0DEEDD8];
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A8);
  v12 = (_QWORD *)((uint64_t (*)(uint64_t))v5)(v11);
  v13 = specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, v12);
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Log.host);
      swift_bridgeObjectRetain_n();
      v15 = v1;
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc();
        v39 = (_QWORD *)swift_slowAlloc();
        v41 = swift_slowAlloc();
        v42[0] = v41;
        *(_DWORD *)v18 = 136315394;
        swift_bridgeObjectRetain();
        v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v42);
        v40 = countAndFlagsBits;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v18 + 12) = 2112;
        v43 = (uint64_t)v15;
        v19 = v15;
        countAndFlagsBits = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v20 = v39;
        *v39 = v15;

        v10 = MEMORY[0x1E0DEEDD8];
        _os_log_impl(&dword_1ACCCC000, v16, v17, "Disassociating sceneID: %s from %@", (uint8_t *)v18, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v20, -1, -1);
        v21 = v41;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v21, -1, -1);
        MEMORY[0x1AF44981C](v18, -1, -1);

      }
      else
      {

        v22 = swift_bridgeObjectRelease_n();
      }
      v31 = ((uint64_t (*)(uint64_t))v5)(v22);
      swift_bridgeObjectRetain();
      v32 = specialized _ArrayProtocol.filter(_:)(v31, countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = (_QWORD *)((char *)v15 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
      swift_beginAccess();
      v34 = *v33;
      *v33 = v32;
      ActivitySession.persistentSceneIdentifiers.didset(v34);
      v35 = swift_bridgeObjectRelease();
      if ((*(uint64_t (**)(uint64_t))((*(_QWORD *)v10 & *v15) + 0x380))(v35))
      {
        v37 = v36;
        ObjectType = swift_getObjectType();
        (*(void (**)(_QWORD *, uint64_t, void *, uint64_t, uint64_t))(v37 + 128))(v15, countAndFlagsBits, object, ObjectType, v37);
        swift_unknownObjectRelease();
      }
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for host != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v24 = v1;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v42[0] = v29;
    *(_DWORD *)v27 = 136315394;
    swift_bridgeObjectRetain();
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2112;
    v43 = (uint64_t)v24;
    v30 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v28 = v24;

    _os_log_impl(&dword_1ACCCC000, v25, v26, "Tried to disassociate scene %s but it was not associated with %@", (uint8_t *)v27, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v28, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = (id)MEMORY[0x1AF448904](0, a2);
LABEL_5:
      v6 = v5;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1)
        goto LABEL_18;
      if (v4)
        break;
      v4 = 5;
      while (1)
      {
        v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v13 = *(id *)(a2 + 8 * v4);
        v14 = static NSObject.== infix(_:_:)();

        if ((v14 & 1) != 0)
          goto LABEL_6;
        ++v4;
        if (v12 == v3)
          goto LABEL_18;
      }
      __break(1u);
    }
    v9 = 1;
    while (1)
    {
      MEMORY[0x1AF448904](v9, a2);
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0)
        goto LABEL_6;
      ++v9;
      if (v10 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

id ActivitySession.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ActivitySession.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t protocol witness for Identifiable.id.getter in conformance ActivitySession@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR___CPActivitySession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySession.updateActivity<A>(_:newValue:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  _QWORD v13[2];

  v4 = *(_QWORD *)(*MEMORY[0x1E0DED210] + *a1 + 8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v13 - v7;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2D0))(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v13[1] = v10;
  v11 = v10;
  swift_setAtReferenceWritableKeyPath();

  return (*(uint64_t (**)(id))((*v9 & *v2) + 0x2D8))(v11);
}

void ActivitySession.updateActivity(_:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  void *v46;
  unsigned int v47;
  void *v48;
  id v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  id v55;
  NSObject *v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  NSObject *v63;
  NSObject *v64;
  id v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  id v82;
  _QWORD *v83;
  id v84;
  NSObject *v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  _QWORD *v101;
  id v102;
  _QWORD *v103;
  _QWORD *v104;
  char v105;
  char v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  _QWORD *v110;
  id v111;
  os_log_type_t v112;
  _QWORD *v113;
  _QWORD *v114;
  id v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  os_log_t v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  id v124;
  char *v125;
  Class isa;
  void *v127;
  id v128;
  uint64_t v129;
  uint64_t (*v130)(void);
  unint64_t v131;
  unint64_t v132;
  Class v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  char *v138;
  Class v139;
  void *v140;
  id v141;
  id v142;
  uint64_t v143;
  void (*v144)(uint64_t *__return_ptr);
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t ObjectType;
  void *v152;
  uint64_t v153;
  void *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  id v161;
  uint64_t *v162;
  _QWORD *v163;
  int v164;
  uint64_t v165;
  os_log_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(void);
  uint64_t aBlock[6];
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v3 = type metadata accessor for Date();
  v169 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v168 = (char *)&v159 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v171 = *(_QWORD *)(v5 - 8);
  v172 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v170 = (char *)&v159 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v159 - v14;
  v16 = type metadata accessor for DispatchPredicate();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF740], v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_66;
  }
  v167 = v3;
  v22 = objc_msgSend(a1, sel_activityIdentifier);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  v173 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2D0);
  v26 = (void *)v173();
  v27 = objc_msgSend(v26, sel_activityIdentifier);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  if (v23 == v28 && v25 == v30)
  {
    v31 = swift_bridgeObjectRelease_n();
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v31 = swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
      goto LABEL_17;
  }
  v33 = (void *)((uint64_t (*)(uint64_t))v173)(v31);
  v34 = objc_msgSend(v33, sel_bundleIdentifier);

  if (v34)
  {
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  v38 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

  }
  else
  {
    v40 = 0;
    v42 = 0;
  }
  v43 = specialized static BundleIdentiferMap.areEquivalentBundleIDs(bundleID:otherBundleID:)(v35, v37, v40, v42);
  swift_bridgeObjectRelease();
  v44 = swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_17:
    if (one-time initialization token for host == -1)
    {
LABEL_18:
      v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Log.host);
      v54 = v1;
      v55 = a1;
      v56 = v54;
      v57 = v55;
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.error.getter();
      v60 = v59;
      if (os_log_type_enabled(v58, v59))
      {
        v61 = swift_slowAlloc();
        v62 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v61 = 138412802;
        aBlock[0] = (uint64_t)v56;
        v63 = v56;
        LODWORD(v172) = v60;
        v64 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v62 = v56;

        *(_WORD *)(v61 + 12) = 2112;
        aBlock[0] = (uint64_t)v57;
        v65 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v62[1] = v57;

        *(_WORD *)(v61 + 22) = 2112;
        v66 = v173();
        aBlock[0] = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v62[2] = v66;

        _os_log_impl(&dword_1ACCCC000, v58, (os_log_type_t)v172, "%@ dropping activity update because of mismatched activityIdentifiers or bundleID %@ vs %@", (uint8_t *)v61, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v62, -1, -1);
        MEMORY[0x1AF44981C](v61, -1, -1);
      }
      else
      {

        v58 = v56;
      }

      -[NSObject resetSession](v56, sel_resetSession);
      return;
    }
LABEL_66:
    swift_once();
    goto LABEL_18;
  }
  v45 = v173;
  v46 = (void *)((uint64_t (*)(uint64_t))v173)(v44);
  v47 = objc_msgSend(a1, sel_isEquivalentToActivity_, v46);

  if (v47)
  {
    v48 = (void *)v45();
    v49 = objc_msgSend(v48, sel_metadata);

    if (v49)
    {
      v50 = objc_msgSend(v49, sel_imageData);

      if (v50)
      {
        v49 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v52 = v51;

        goto LABEL_25;
      }
      v49 = 0;
    }
    v52 = 0xF000000000000000;
LABEL_25:
    v67 = objc_msgSend(a1, sel_metadata);
    v68 = v67;
    if (v67)
    {
      v69 = objc_msgSend(v67, sel_imageData);

      if (v69)
      {
        v68 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v71 = v70;

        goto LABEL_30;
      }
      v68 = 0;
    }
    v71 = 0xF000000000000000;
LABEL_30:
    if (v52 >> 60 == 15)
    {
      if (v71 >> 60 == 15)
        goto LABEL_51;
    }
    else if (v71 >> 60 != 15)
    {
      outlined copy of Data?((uint64_t)v49, v52);
      specialized static Data.== infix(_:_:)((uint64_t)v49, v52);
      v106 = v105;
      outlined consume of Data?((uint64_t)v68, v71);
      outlined consume of Data?((uint64_t)v49, v52);
      outlined consume of Data?((uint64_t)v49, v52);
      if ((v106 & 1) != 0)
        goto LABEL_51;
      goto LABEL_35;
    }
    outlined consume of Data?((uint64_t)v49, v52);
    outlined consume of Data?((uint64_t)v68, v71);
LABEL_35:
    v72 = objc_msgSend(a1, sel_metadata);
    if (v72)
    {
      v73 = v72;
      v74 = objc_msgSend(v72, sel_imageData);

      if (v74)
      {
        v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v77 = v76;

        outlined consume of Data._Representation(v75, v77);
        v45 = v173;
        goto LABEL_38;
      }
    }
LABEL_51:
    if (one-time initialization token for host != -1)
      swift_once();
    v107 = type metadata accessor for Logger();
    __swift_project_value_buffer(v107, (uint64_t)static Log.host);
    v108 = v1;
    v109 = a1;
    v110 = v108;
    v111 = v109;
    v98 = Logger.logObject.getter();
    v112 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v112))
    {
      v100 = swift_slowAlloc();
      v113 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v100 = 138412546;
      aBlock[0] = (uint64_t)v110;
      v114 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v113 = v110;

      *(_WORD *)(v100 + 12) = 2112;
      aBlock[0] = (uint64_t)v111;
      v115 = v111;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v113[1] = v111;

      _os_log_impl(&dword_1ACCCC000, v98, v112, "%@ dropping activity update because of no significant changes %@", (uint8_t *)v100, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      v103 = v113;
LABEL_55:
      MEMORY[0x1AF44981C](v103, -1, -1);
      MEMORY[0x1AF44981C](v100, -1, -1);

      return;
    }

    return;
  }
LABEL_38:
  v78 = (void *)v45();
  v79 = specialized static TUConversationActivity.< infix(_:_:)(v78, a1);

  if ((v79 & 1) == 0)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v96 = type metadata accessor for Logger();
    __swift_project_value_buffer(v96, (uint64_t)static Log.host);
    v97 = a1;
    v98 = Logger.logObject.getter();
    v99 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v98, v99))
    {

      return;
    }
    v100 = swift_slowAlloc();
    v101 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v100 = 138412290;
    aBlock[0] = (uint64_t)v97;
    v102 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v101 = v97;

    _os_log_impl(&dword_1ACCCC000, v98, v99, "Dropping activity update because it is older than the current activity %@", (uint8_t *)v100, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v103 = v101;
    goto LABEL_55;
  }
  if (one-time initialization token for host != -1)
    swift_once();
  v80 = type metadata accessor for Logger();
  __swift_project_value_buffer(v80, (uint64_t)static Log.host);
  v81 = v1;
  v82 = a1;
  v83 = v81;
  v84 = v82;
  v85 = Logger.logObject.getter();
  v86 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v85, (os_log_type_t)v86))
  {
    v160 = v8;
    v164 = v86;
    v166 = v85;
    v87 = swift_slowAlloc();
    v88 = (_QWORD *)swift_slowAlloc();
    v165 = swift_slowAlloc();
    aBlock[0] = v165;
    *(_DWORD *)v87 = 138412802;
    v176 = (uint64_t)v84;
    v89 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v161 = v84;
    *v88 = v84;

    *(_WORD *)(v87 + 12) = 2112;
    v90 = v173();
    v176 = v90;
    v162 = &v177;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v163 = v88;
    v88[1] = v90;

    *(_WORD *)(v87 + 22) = 2080;
    v91 = v171;
    v92 = v172;
    v93 = *(void (**)(char *, char *, uint64_t))(v171 + 16);
    v93(v15, (char *)v83 + OBJC_IVAR___CPActivitySession_id, v172);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v15, 0, 1, v92);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v13, 1, v92) == 1)
    {
      v94 = 0xE300000000000000;
      v95 = 7104878;
    }
    else
    {
      v116 = v170;
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v170, v13, v92);
      v93(v160, v116, v92);
      v117 = String.init<A>(reflecting:)();
      v118 = v91;
      v95 = v117;
      v94 = v119;
      (*(void (**)(char *, uint64_t))(v118 + 8))(v116, v92);
    }
    v104 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    outlined destroy of UUID?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v94, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    v120 = v166;
    _os_log_impl(&dword_1ACCCC000, v166, (os_log_type_t)v164, "Updating activity %@ vs %@ on %s", (uint8_t *)v87, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v121 = v163;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v121, -1, -1);
    v122 = v165;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v122, -1, -1);
    MEMORY[0x1AF44981C](v87, -1, -1);

    v45 = v173;
    v84 = v161;
  }
  else
  {

    v104 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  }
  v123 = (void *)v45();
  v124 = objc_msgSend(v84, sel_UUID);
  v125 = v170;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v171 + 8))(v125, v172);
  objc_msgSend(v123, sel_setUUID_, isa);

  v127 = (void *)v45();
  v128 = objc_msgSend(v84, sel_applicationContext);
  v129 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v130 = v45;
  v132 = v131;

  v133 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v129, v132);
  objc_msgSend(v127, sel_setApplicationContext_, v133);

  v134 = (void *)v130();
  v135 = objc_msgSend(v84, sel_metadata);
  objc_msgSend(v134, sel_setMetadata_, v135);

  v136 = (void *)v130();
  v137 = objc_msgSend(v84, sel_timestamp);
  v138 = v168;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v139 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v169 + 8))(v138, v167);
  objc_msgSend(v136, sel_setTimestamp_, v139);

  v140 = (void *)v130();
  v141 = objc_msgSend(v84, sel_trustedFromHandle);
  objc_msgSend(v140, sel_setTrustedFromHandle_, v141);

  v142 = objc_msgSend(v84, sel_originator);
  v143 = v130();
  objc_msgSend((id)v143, sel_setOriginator_, v142);
  (*(void (**)(uint64_t))((*v104 & *v83) + 0x2D8))(v143);

  v144 = *(void (**)(uint64_t *__return_ptr))((*v104 & *v83) + 0x2A0);
  v144(aBlock);
  v145 = aBlock[0];
  v175 = 0x8000000000000000;
  v176 = aBlock[0];
  LOBYTE(v143) = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v176, &v175);
  v146 = outlined consume of ActivitySession.State(v145);
  if ((v143 & 1) != 0
    || (((void (*)(uint64_t *__return_ptr, unint64_t))v144)(aBlock, v146),
        v147 = aBlock[0],
        v175 = 0x8000000000000008,
        v176 = aBlock[0],
        v148 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v176, &v175),
        v146 = outlined consume of ActivitySession.State(v147),
        (v148 & 1) != 0))
  {
    v146 = (*(uint64_t (**)(unint64_t))((*v104 & *v83) + 0x380))(v146);
    if (v146)
    {
      v150 = v149;
      ObjectType = swift_getObjectType();
      v152 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v150 + 16))(ObjectType, v150);
      swift_unknownObjectRelease();
      v153 = swift_allocObject();
      *(_QWORD *)(v153 + 16) = v83;
      aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.updateActivity(_:);
      aBlock[5] = v153;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_58;
      v154 = _Block_copy(aBlock);
      v155 = v83;
      swift_release();
      objc_msgSend(v152, sel_authorizePiPForActivity_withCompletion_, v155, v154);
      _Block_release(v154);

    }
  }
  if ((*(uint64_t (**)(unint64_t))((*v104 & *v83) + 0x380))(v146))
  {
    v157 = v156;
    v158 = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v157 + 88))(v83, v158, v157);
    swift_unknownObjectRelease();
  }
}

void closure #1 in ActivitySession.updateActivity(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  id v10;

  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  v10 = a3;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v10;

    _os_log_impl(&dword_1ACCCC000, v5, v6, "[PiP] Authorized pip for %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);

  }
  else
  {

  }
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void ActivitySession.updateActivityImage(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(void);
  void *v10;
  id v11;
  Class isa;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0);
  v10 = (void *)((uint64_t (*)(uint64_t))v9)(v7);
  v11 = objc_msgSend(v10, sel_metadata);

  if (v11)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, sel_setImageData_, isa);

    v13 = v11;
    v14 = (void *)v9();
    objc_msgSend(v14, sel_setMetadata_, v13);
    (*(void (**)(void *))((*v8 & *v0) + 0x2D8))(v14);

    goto LABEL_7;
  }
  if (one-time initialization token for host != -1)
    goto LABEL_9;
LABEL_5:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  v13 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1ACCCC000, v13, v16, "No metadata to update", v17, 2u);
    MEMORY[0x1AF44981C](v17, -1, -1);
  }
LABEL_7:

}

Swift::Bool __swiftcall ActivitySession.needsAssertions()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *__return_ptr, _QWORD *);
  void (*v15)(char *__return_ptr, _QWORD *);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  char v27;
  _QWORD v28[2];

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0);
  v3 = (void *)v2();
  v4 = objc_msgSend(v3, sel_isScreenSharingActivity);

  if ((v4 & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7))
      goto LABEL_23;
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    v9 = "[Assertion] Does not need assertion because is screen sharing";
LABEL_22:
    _os_log_impl(&dword_1ACCCC000, v6, v7, v9, v8, 2u);
    MEMORY[0x1AF44981C](v8, -1, -1);
LABEL_23:

    return 0;
  }
  v10 = (void *)v2();
  v11 = objc_msgSend(v10, sel_isSystemActivity);

  if ((v11 & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.default);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7))
      goto LABEL_23;
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    v9 = "[Assertion] Does not need assertion because is system activity";
    goto LABEL_22;
  }
  v13 = (*(uint64_t (**)(void))((*v1 & *v0) + 0x3B0))();
  if (!v13)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.default);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v7))
      goto LABEL_23;
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    v9 = "[Assertion] Does not need assertion because no connection";
    goto LABEL_22;
  }
  v6 = v13;
  v14 = (void (**)(char *__return_ptr, _QWORD *))(v13
                                                           + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  v15 = *v14;
  v16 = *(uint64_t *)((char *)&v6[1].isa + direct field offset for XPCHostConnection.bundleIdentifier);
  v28[0] = *((char *)v6 + direct field offset for XPCHostConnection.bundleIdentifier);
  v28[1] = v16;
  swift_retain();
  v15(&v27, v28);
  swift_release();
  if (v27 != 1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1ACCCC000, v24, v25, "[Assertion] Does not need assertion because app is a daemon", v26, 2u);
      MEMORY[0x1AF44981C](v26, -1, -1);
    }

    goto LABEL_23;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1ACCCC000, v18, v19, "[Assertion] Needs assertion because it is an app", v20, 2u);
    MEMORY[0x1AF44981C](v20, -1, -1);
  }

  return 1;
}

Swift::Void __swiftcall ActivitySession.acquireDomainAssertion(bundleID:pid:)(Swift::String bundleID, Swift::Int32 pid)
{
  char *v2;
  uint64_t v3;
  void *object;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  id v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  char *v57;
  id v58;
  char *v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t countAndFlagsBits;
  void *v81;
  unsigned int v82;
  uint64_t v83;
  id v84[2];

  v3 = *(_QWORD *)&pid;
  object = bundleID._object;
  countAndFlagsBits = bundleID._countAndFlagsBits;
  v84[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  v8 = *(_QWORD *)(v78 - 8);
  v9 = MEMORY[0x1E0C80A78](v78);
  v76 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v79 = (uint64_t *)((char *)&v73 - v11);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)&v2[OBJC_IVAR___CPActivitySession_queue];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    v75 = v8;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v19 = type metadata accessor for Logger();
  v20 = __swift_project_value_buffer(v19, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v21 = v2;
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v22, v23);
  v82 = v3;
  v74 = v7;
  v77 = (unint64_t)object;
  v81 = (void *)v20;
  if (v24)
  {
    v25 = swift_slowAlloc();
    v26 = (_QWORD *)swift_slowAlloc();
    v27 = (void *)swift_slowAlloc();
    v84[0] = v27;
    *(_DWORD *)v25 = 136315650;
    swift_bridgeObjectRetain();
    v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 1024;
    LODWORD(v83) = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 18) = 2112;
    v83 = (uint64_t)v21;
    v28 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v26 = v21;

    _os_log_impl(&dword_1ACCCC000, v22, v23, "[Assertion] Attempting to acquire domain assertion for app with bundleID:%s pid:%d %@", (uint8_t *)v25, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v26, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v27, -1, -1);
    v29 = v25;
    v3 = v82;
    MEMORY[0x1AF44981C](v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v30 = objc_retain(objc_retain((id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v21)
                                                                       + 0x460))(v3)));
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    v34 = (void *)swift_slowAlloc();
    v84[0] = v34;
    *(_DWORD *)v33 = 136315138;
    v83 = (uint64_t)v30;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for RBSAssertion);
    v35 = v30;
    v36 = String.init<A>(reflecting:)();
    v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v31, v32, "[Assertion] Generated assertion: %s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v34, -1, -1);
    MEMORY[0x1AF44981C](v33, -1, -1);
  }
  else
  {

  }
  v38 = v77;
  objc_msgSend(v30, sel_addObserver_, v21);
  ActivitySession.invalidateDomainAssertion()();
  v84[0] = 0;
  v39 = objc_msgSend(v30, sel_acquireWithError_, v84);
  v40 = v84[0];
  if (v39)
  {
    v41 = &v21[OBJC_IVAR___CPActivitySession_id];
    v42 = v79;
    v43 = (char *)v79 + *(int *)(v78 + 28);
    v44 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v43, v41, v44);
    v45 = countAndFlagsBits;
    *v42 = v30;
    v42[1] = v45;
    v42[2] = v38;
    *((_DWORD *)v42 + 6) = v82;
    v46 = v76;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v42, v76, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    swift_bridgeObjectRetain();
    v47 = v30;
    v48 = v40;
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v52 = (void *)swift_slowAlloc();
      v84[0] = v52;
      *(_DWORD *)v51 = 136315138;
      v53 = ActivitySession.DomainAssertionWrapper.description.getter();
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v46, type metadata accessor for ActivitySession.DomainAssertionWrapper);
      _os_log_impl(&dword_1ACCCC000, v49, v50, "[Assertion] Successfully acquired domain assertion for app with %s", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v52, -1, -1);
      MEMORY[0x1AF44981C](v51, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v46, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    }

    v70 = (uint64_t)v74;
    v71 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v72 = v79;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v79, (uint64_t)v74, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v70, 0, 1, v78);
    (*(void (**)(uint64_t))((*v71 & *(_QWORD *)v21) + 0x1F8))(v70);

    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v72, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  }
  else
  {
    v55 = v84[0];
    v56 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRetain();
    v57 = v21;
    v58 = v56;
    swift_bridgeObjectRetain();
    v59 = v57;
    v60 = v56;
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc();
      v79 = (_QWORD *)swift_slowAlloc();
      v81 = (void *)swift_slowAlloc();
      v84[0] = v81;
      *(_DWORD *)v63 = 136315906;
      swift_bridgeObjectRetain();
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v38, (uint64_t *)v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 1024;
      LODWORD(v83) = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 18) = 2112;
      v83 = (uint64_t)v59;
      v64 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v65 = v79;
      *v79 = v59;

      *(_WORD *)(v63 + 28) = 2080;
      v83 = (uint64_t)v56;
      v66 = v56;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v67 = String.init<A>(reflecting:)();
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v61, v62, "[Assertion] Domain assertion request failed for app with bundleID:%s pid:%d %@. Error:%s ", (uint8_t *)v63, 0x26u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v65, -1, -1);
      v69 = v81;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v69, -1, -1);
      MEMORY[0x1AF44981C](v63, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    objc_msgSend(v30, sel_removeObserver_, v59);

  }
}

void closure #1 in ActivitySession.invalidateAssertions(useDelay:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1AF449918](v1);
  if (v2)
  {
    v3 = (char *)v2;
    v4 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
    if (*(_QWORD *)(v2 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
      *(_QWORD *)&v3[v4] = 0;
      swift_release();
    }
    ActivitySession.invalidateDomainAssertion()();

  }
}

Swift::Void __swiftcall ActivitySession.invalidateDomainAssertion()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  _QWORD v26[2];
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v26 - v6;
  v8 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (id *)((char *)v26 - v14);
  v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v15, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    if (objc_msgSend(*v15, sel_isValid))
    {
      if (one-time initialization token for host != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.host);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, (uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        v28 = swift_slowAlloc();
        v30 = v28;
        v27 = v20;
        *(_DWORD *)v20 = 136315138;
        v26[1] = v20 + 4;
        v21 = ActivitySession.DomainAssertionWrapper.description.getter();
        v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v30);
        v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
        v23 = v27;
        _os_log_impl(&dword_1ACCCC000, v18, v19, "[Assertion] Invalidating domain assertion for app with %s", v27, 0xCu);
        v24 = v28;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v24, -1, -1);
        MEMORY[0x1AF44981C](v23, -1, -1);
      }
      else
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
      }

      v25 = *v15;
      objc_msgSend(*v15, sel_removeObserver_, v1);
      objc_msgSend(v25, sel_invalidate);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
      (*(void (**)(char *))((*v16 & *v1) + 0x1F8))(v5);
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  }
}

id ActivitySession.DomainAssertionWrapper.assertion.getter()
{
  id *v0;

  return *v0;
}

uint64_t ActivitySession.DomainAssertionWrapper.bundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActivitySession.DomainAssertionWrapper.pid.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t ActivitySession.DomainAssertionWrapper.activitySessionUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySession.DomainAssertionWrapper(0) + 28);
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySession.DomainAssertionWrapper.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;

  _StringGuts.grow(_:)(55);
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  v1._object = (void *)0x80000001ACF7C7E0;
  String.append(_:)(v1);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3A64697020;
  v5._object = (void *)0xE500000000000000;
  String.append(_:)(v5);
  v10 = *(unsigned int *)(v0 + 24);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001ACF7C800;
  v7._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return HIDWORD(v10);
}

uint64_t ActivitySession.DomainAssertionWrapper.init(assertion:bundleID:pid:activitySessionUUID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_DWORD *)(a6 + 24) = a4;
  v7 = a6 + *(int *)(type metadata accessor for ActivitySession.DomainAssertionWrapper(0) + 28);
  v8 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a5, v8);
}

uint64_t closure #1 in ActivitySession.assertionWillInvalidate(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v26 - v11;
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1F0))(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  if (one-time initialization token for host != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v9, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v29 = v19;
    *(_DWORD *)v18 = 136315138;
    v20 = ActivitySession.DomainAssertionWrapper.description.getter();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    _os_log_impl(&dword_1ACCCC000, v16, v17, "[Assertion] DomainAssertionObserver assertionWillInvalidate for app with %s", v18, 0xCu);
    swift_arrayDestroy();
    v22 = v19;
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v18, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  }

  (*(void (**)(uint64_t *__return_ptr))((*v13 & *a1) + 0x2A0))(&v29);
  v23 = v29;
  v27 = 0x8000000000000008;
  v28 = v29;
  v24 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v28, &v27);
  outlined consume of ActivitySession.State(v23);
  if ((v24 & 1) != 0)
  {
    v25 = a1;
    specialized tryLog<A>(_:_:function:line:)((uint64_t)"[Assertion] Leaving ActivitySession", 35, 2, 0xD00000000000001BLL, 0x80000001ACF7CDE0, 1149, v25);

  }
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
}

void ActivitySession.assertion(_:didInvalidateWithError:)(uint64_t a1, void *a2)
{
  specialized ActivitySession.assertion(_:didInvalidateWithError:)(a2);
}

Swift::Void __swiftcall ActivitySession.resetSession()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  NSObject *v18;
  void (*v19)(_QWORD *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  void *v33;
  unsigned int v34;
  char *v35;
  NSObject *v36;
  unsigned int v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  uint64_t v48;
  id v49;
  char *v50;
  unint64_t v51;
  char *v52;
  NSObject *v53;
  id v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void (*v60)(uint64_t *, _QWORD);
  _QWORD *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(_QWORD *, uint64_t);
  uint64_t v69;
  id v70;
  unsigned int v71;
  NSObject *v72;
  uint64_t v73[4];
  uint64_t v74;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v62 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v66 = (char *)&v62 - v12;
  v13 = type metadata accessor for DispatchPredicate();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char **)((char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *v16 = v17;
  v18 = *(NSObject **)(v14 + 104);
  v71 = *MEMORY[0x1E0DEF740];
  v72 = v18;
  ((void (*)(_QWORD *))v18)(v16);
  v70 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  v19 = *(void (**)(_QWORD *, uint64_t))(v14 + 8);
  v19(v16, v13);
  if ((v17 & 1) != 0)
  {
    v62 = v5;
    v63 = v7;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v20 = type metadata accessor for Logger();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static Log.host);
  v22 = v0;
  v67 = v21;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v64 = v11;
  v65 = v2;
  v68 = v19;
  v69 = v13;
  if (v25)
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    *(_DWORD *)v26 = 136315138;
    v73[0] = v27;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v23, v24, "Resetting session %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v27, -1, -1);
    MEMORY[0x1AF44981C](v26, -1, -1);

  }
  else
  {

  }
  v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v31 = (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v22) + 0x3B8))(0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((*v30 & *(_QWORD *)v22) + 0x2A0))(v73, v31);
  if (((unint64_t)v73[0] >> 62) <= 1)
  {
    outlined consume of ActivitySession.State(v73[0]);
    return;
  }
  if (v73[0] != 0x8000000000000010)
  {
    v32 = *(uint64_t (**)(void))((*v30 & *(_QWORD *)v22) + 0x2D0);
    v33 = (void *)v32();
    v34 = objc_msgSend(v33, sel_isScreenSharingActivity);

    if (v34 && ((*(uint64_t (**)(void))((*v30 & *(_QWORD *)v22) + 0x2E8))() & 1) != 0)
    {
      v35 = v22;
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.default.getter();
      v72 = v36;
      if (os_log_type_enabled(v36, (os_log_type_t)v37))
      {
        v71 = v37;
        v38 = (uint8_t *)swift_slowAlloc();
        v70 = (id)swift_slowAlloc();
        v73[0] = (uint64_t)v70;
        *(_DWORD *)v38 = 136315138;
        v40 = v65;
        v39 = (uint64_t)v66;
        v41 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
        v41(v66, &v35[OBJC_IVAR___CPActivitySession_id], v1);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v39, 0, 1, v1);
        v42 = (uint64_t)v64;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v39, (uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v42, 1, v1) == 1)
        {
          v43 = 0xE300000000000000;
          v44 = 7104878;
        }
        else
        {
          v50 = v63;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v63, v42, v1);
          v41(v62, v50, v1);
          v44 = String.init<A>(reflecting:)();
          v43 = v51;
          v52 = v50;
          v39 = (uint64_t)v66;
          (*(void (**)(char *, uint64_t))(v40 + 8))(v52, v1);
        }
        outlined destroy of UUID?(v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v43, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        v53 = v72;
        _os_log_impl(&dword_1ACCCC000, v72, (os_log_type_t)v71, "Setting state after reset to invalidated for screen sharing activity with id %s", v38, 0xCu);
        v54 = v70;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v54, -1, -1);
        MEMORY[0x1AF44981C](v38, -1, -1);

      }
      else
      {

      }
      v55 = swift_allocObject();
      *(_QWORD *)(v55 + 16) = 0;
      *(_QWORD *)(v55 + 24) = 0;
      v73[0] = v55;
      (*(void (**)(uint64_t *))((*v30 & *(_QWORD *)v35) + 0x2A8))(v73);
    }
    else
    {
      (*(void (**)(uint64_t))((*v30 & *(_QWORD *)v22) + 0x270))(1);
      v73[0] = 0x8000000000000000;
      (*(void (**)(uint64_t *))((*v30 & *(_QWORD *)v22) + 0x2A8))(v73);
      v45 = OBJC_IVAR___CPActivitySession_isLocalParticipantActive;
      v46 = v22[OBJC_IVAR___CPActivitySession_isLocalParticipantActive];
      v22[OBJC_IVAR___CPActivitySession_isLocalParticipantActive] = 0;
      v48 = v69;
      v47 = v70;
      *v16 = v70;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v72)(v16, v71, v48);
      v49 = v47;
      LOBYTE(v47) = _dispatchPreconditionTest(_:)();
      v68(v16, v48);
      if ((v47 & 1) == 0)
      {
        __break(1u);
        goto LABEL_28;
      }
      if (v46 != v22[v45])
        ActivitySession.sessionChanged()();
    }
    v56 = (uint64_t *)&v22[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers];
    swift_beginAccess();
    v57 = *v56;
    *v56 = MEMORY[0x1E0DEE9D8];
    ActivitySession.persistentSceneIdentifiers.didset(v57);
    v58 = swift_bridgeObjectRelease();
    v59 = (void *)((uint64_t (*)(uint64_t))v32)(v58);
    LODWORD(v57) = objc_msgSend(v59, sel_isStaticActivity);

    if (!(_DWORD)v57)
      return;
    v60 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*v30 & *(_QWORD *)v22)
                                                                                       + 0x230))(v73);
    if (!__OFADD__(*v61, 1))
    {
      ++*v61;
      v60(v73, 0);
      return;
    }
LABEL_28:
    __break(1u);
  }
}

uint64_t ActivitySession.sendResource(atURL:to:metadata:completion:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  dispatch_group_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(void);
  uint64_t v28;
  void *v29;
  unint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  void (*v41)(void);
  void *v42;
  void *v43;
  _BYTE *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t v56;
  _QWORD aBlock[7];

  v50 = a3;
  v51 = a4;
  v48 = a2;
  v49 = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v54 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v52 = *(_QWORD *)(v12 - 8);
  v53 = (void *)v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = dispatch_group_create();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = MEMORY[0x1E0DEE9E8];
  v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x2D0))();
  v18 = objc_msgSend(v17, sel_bundleIdentifier);

  v55 = a5;
  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v9;
    v20 = v19;
    v22 = v21;

    v23 = v15;
    v24 = v6;
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Sequence.forEach(_:)(v48, v23, v24, v20, v22, v16);

    swift_bridgeObjectRelease_n();
    swift_release();
    v48 = *(_QWORD *)((char *)v24 + OBJC_IVAR___CPActivitySession_queue);
    v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v26 = (_QWORD *)swift_allocObject();
    v27 = v55;
    v26[2] = v25;
    v26[3] = v27;
    v29 = v49;
    v28 = v50;
    v26[4] = a6;
    v26[5] = v29;
    v26[6] = v16;
    v26[7] = v28;
    v30 = v51;
    v26[8] = v51;
    aBlock[4] = partial apply for closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_69;
    v31 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    v32 = v29;
    outlined copy of Data._Representation(v28, v30);
    static DispatchQoS.unspecified.getter();
    v56 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    v33 = v47;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();

    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v33);
    (*(void (**)(char *, void *))(v52 + 8))(v14, v53);
    swift_release();
    swift_release();
  }
  else
  {
    v53 = v15;
    v54 = a6;
    if (one-time initialization token for default != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Log.default);
    v35 = v6;
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v38 = 138412290;
      aBlock[0] = v35;
      v40 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v39 = v35;

      _os_log_impl(&dword_1ACCCC000, v36, v37, "Failed to send resource on %@ because of invalid bundleID", v38, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v39, -1, -1);
      MEMORY[0x1AF44981C](v38, -1, -1);

    }
    else
    {

    }
    v41 = v55;
    v42 = v53;
    lazy protocol witness table accessor for type ActivitySessionErrors and conformance ActivitySessionErrors();
    v43 = (void *)swift_allocError();
    *v44 = 2;
    v41();

  }
  return swift_release();
}

void closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:)(void *a1, NSObject *a2, void *a3)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;

  if (a1)
  {
    swift_beginAccess();
    specialized Set._Variant.insert(_:)(&v13, a1);
    swift_endAccess();

  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    v7 = a3;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412546;
      v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v11 = v7;

      *(_WORD *)(v10 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v8, v9, "sendResource: %@ failed to resolve participant for identifier %llu to send resource", (uint8_t *)v10, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v11, -1, -1);
      MEMORY[0x1AF44981C](v10, -1, -1);

    }
    else
    {

    }
  }
  dispatch_group_leave(a2);
}

void closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  _BYTE *v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, char *, void (*)(void), uint64_t, uint64_t, uint64_t);
  uint64_t ObjectType;

  v13 = a1 + 16;
  swift_beginAccess();
  v14 = (char *)MEMORY[0x1AF449918](v13);
  if (v14)
  {
    v15 = v14;
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v14) + 0x380))())
    {
      v17 = v16;
      ObjectType = swift_getObjectType();
      swift_beginAccess();
      v18 = *(_QWORD *)(a5 + 16);
      v19 = &v15[OBJC_IVAR___CPActivitySession_id];
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, void (*)(void), uint64_t, uint64_t, uint64_t))(v17 + 136);
      swift_bridgeObjectRetain();
      v22(a4, v18, a6, a7, v19, a2, a3, ObjectType, v17);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

  }
  lazy protocol witness table accessor for type ActivitySessionErrors and conformance ActivitySessionErrors();
  v20 = (void *)swift_allocError();
  *v21 = 2;
  a2();

}

void ActivitySession.receivedResource(atURL:withMetadata:fromParticipantIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  id v7;
  NSURL *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  Class isa;
  id v15;
  void *v16;

  v5 = v4;
  v7 = objc_allocWithZone(MEMORY[0x1E0DBD380]);
  URL._bridgeToObjectiveC()(v8);
  v10 = v9;
  v15 = objc_msgSend(v7, sel_initWithURL_withExtensionType_, v9, 0);

  v11 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x3B0))();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v11
                                                                + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
    if (swift_dynamicCast())
    {

      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v16, sel_receivedResourceAtURL_withMetadata_fromParticipantWithIdentifier_, v15, isa, a4);

      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {

  }
}

uint64_t ActivitySession.requestEndpoint(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;

  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)((char *)v4 + OBJC_IVAR___CPActivitySession_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x380))(result);
    if (result)
    {
      v17 = v16;
      ObjectType = swift_getObjectType();
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 144))(v4, a1, a2, a3, a4, ObjectType, v17);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ActivitySession.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v1._object = (void *)0x80000001ACF7C820;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  v17 = (unint64_t)v0;
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x203A6469202CLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A6574617473202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))(&v17);
  v6 = v17;
  if (v17 >> 62)
  {
    if (v17 >> 62 == 1)
    {
      v7 = 0xE900000000000066;
      v8 = 0x664F6465646E6148;
    }
    else
    {
      v9 = 0xE600000000000000;
      v10 = 0x64656E696F4ALL;
      if (v17 != 0x8000000000000008)
      {
        v10 = 1952867660;
        v9 = 0xE400000000000000;
      }
      if (v17 == 0x8000000000000000)
        v8 = 0x676E6974696157;
      else
        v8 = v10;
      if (v17 == 0x8000000000000000)
        v7 = 0xE700000000000000;
      else
        v7 = v9;
    }
  }
  else
  {
    v7 = 0xEB00000000646574;
    v8 = 0x6164696C61766E49;
  }
  v11 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  outlined consume of ActivitySession.State(v6);
  v12._countAndFlagsBits = 0xD00000000000001CLL;
  v12._object = (void *)0x80000001ACF7C840;
  String.append(_:)(v12);
  v13 = *(_QWORD *)((*(uint64_t (**)(void))((*v5 & *v0) + 0x368))() + 16);
  swift_bridgeObjectRelease();
  v17 = v13;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v18;
}

uint64_t default argument 1 of AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)()
{
  return 0;
}

uint64_t default argument 1 of PresenceConfiguration.init(presenceIdentifier:isPersonal:clientIdentifier:)()
{
  return 0;
}

uint64_t default argument 0 of ActivityListPresenceContext.init(activityIDs:)()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t default argument 0 of static NSUserDefaults.classProtectedStorage(suiteName:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t default argument 2 of AnyPresentDevice.init(id:handleValue:isCurrentDevice:timestamp:context:)()
{
  return 0;
}

uint64_t default argument 2 of AnyPresentDevice<A>.init(id:handleValue:isCurrentDevice:timestamp:)()
{
  return 0;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v33 - v9;
  result = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v33 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v12;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v4);
      return 0;
    }
    v30 = ~v28;
    while (1)
    {
      v26(v7, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v7, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v10, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v32)(v10, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v20 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return 1;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return 1;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v36)
            return 1;
          v21 = *(_QWORD *)(v35 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_24:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 4;
  if (v23 >= v36)
    return 1;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_34;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    result = static Hasher._hash(seed:_:)();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(_QWORD *)(v19 + 8 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(_QWORD *)(v19 + 8 * v18) == v16)
      goto LABEL_7;
  }
}

void specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;

  v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v4)
      __CocoaSet.isEqual(to:)();
    else
      specialized _NativeSet.isEqual(to:)(v5, a2);
    return;
  }
  if (v4)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    specialized _NativeSet.isEqual(to:)(v6, a1);
    return;
  }
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v27 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a1 + 56);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  v10 = 0;
  v28 = (unint64_t)(v7 + 63) >> 6;
  v11 = a2 + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_38;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v14 >= v28)
      return;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v28)
        return;
      v15 = *(_QWORD *)(v27 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v28)
          return;
        v15 = *(_QWORD *)(v27 + 8 * v10);
        if (!v15)
        {
          v10 = v14 + 3;
          if (v14 + 3 >= v28)
            return;
          v15 = *(_QWORD *)(v27 + 8 * v10);
          if (!v15)
            break;
        }
      }
    }
LABEL_37:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_38:
    v17 = *(_QWORD *)(a2 + 40);
    v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v13);
    v19 = NSObject._rawHashValue(seed:)(v17);
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_45;
    v29 = v10;
    v22 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
    v23 = static NSObject.== infix(_:_:)();

    if ((v23 & 1) == 0)
    {
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
        v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) != 0)
          goto LABEL_19;
      }
LABEL_45:

      return;
    }
LABEL_19:

    v10 = v29;
  }
  v16 = v14 + 4;
  if (v16 >= v28)
    return;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_37;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v28)
      return;
    v15 = *(_QWORD *)(v27 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_37;
  }
LABEL_48:
  __break(1u);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;

  v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v4)
      __CocoaSet.isEqual(to:)();
    else
      specialized _NativeSet.isEqual(to:)(v5, a2);
    return;
  }
  if (v4)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    specialized _NativeSet.isEqual(to:)(v6, a1);
    return;
  }
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v27 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a1 + 56);
  type metadata accessor for AddressableMember();
  v10 = 0;
  v28 = (unint64_t)(v7 + 63) >> 6;
  v11 = a2 + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_38;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v14 >= v28)
      return;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v28)
        return;
      v15 = *(_QWORD *)(v27 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v28)
          return;
        v15 = *(_QWORD *)(v27 + 8 * v10);
        if (!v15)
        {
          v10 = v14 + 3;
          if (v14 + 3 >= v28)
            return;
          v15 = *(_QWORD *)(v27 + 8 * v10);
          if (!v15)
            break;
        }
      }
    }
LABEL_37:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_38:
    v17 = *(_QWORD *)(a2 + 40);
    v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v13);
    v19 = NSObject._rawHashValue(seed:)(v17);
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_45;
    v29 = v10;
    v22 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
    v23 = static NSObject.== infix(_:_:)();

    if ((v23 & 1) == 0)
    {
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
        v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) != 0)
          goto LABEL_19;
      }
LABEL_45:

      return;
    }
LABEL_19:

    v10 = v29;
  }
  v16 = v14 + 4;
  if (v16 >= v28)
    return;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_37;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v28)
      return;
    v15 = *(_QWORD *)(v27 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_37;
  }
LABEL_48:
  __break(1u);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  BOOL v84;
  uint64_t (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  int64_t v115;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v113 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v114 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      if (!v7)
      {
        v10 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
        }
        else
        {
          if (v10 >= v114)
            return 1;
          v11 = *(_QWORD *)(v113 + 8 * v10);
          ++v4;
          if (v11)
            goto LABEL_21;
          v4 = v10 + 1;
          if (v10 + 1 >= v114)
            return 1;
          v11 = *(_QWORD *)(v113 + 8 * v4);
          if (v11)
            goto LABEL_21;
          v4 = v10 + 2;
          if (v10 + 2 >= v114)
            return 1;
          v11 = *(_QWORD *)(v113 + 8 * v4);
          if (v11)
            goto LABEL_21;
          v12 = v10 + 3;
          if (v12 >= v114)
            return 1;
          v11 = *(_QWORD *)(v113 + 8 * v12);
          if (v11)
          {
            v4 = v12;
LABEL_21:
            v7 = (v11 - 1) & v11;
            v9 = __clz(__rbit64(v11)) + (v4 << 6);
            goto LABEL_22;
          }
          while (1)
          {
            v4 = v12 + 1;
            if (__OFADD__(v12, 1))
              break;
            if (v4 >= v114)
              return 1;
            v11 = *(_QWORD *)(v113 + 8 * v4);
            ++v12;
            if (v11)
              goto LABEL_21;
          }
        }
        __break(1u);
        return result;
      }
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
LABEL_22:
      v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v9);
      v14 = *v13;
      v15 = v13[1];
      v16 = *(_QWORD **)(*(_QWORD *)(v3 + 56) + 8 * v9);
      swift_bridgeObjectRetain();
      swift_retain();
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
        goto LABEL_121;
      v20 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v17);
      v21 = v20[2] == v16[2] && v20[3] == v16[3];
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_121;
      v115 = v4;
      v22 = *(uint64_t (**)(uint64_t))(*v20 + 112);
      v23 = swift_retain();
      v24 = v22(v23);
      v25 = (*(uint64_t (**)(void))(*v16 + 112))();
      v26 = v25;
      if (v24)
      {
        if (!v25)
        {
          swift_release();
          swift_release();
          goto LABEL_121;
        }
        v27 = *(_QWORD **)(v24 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
        v28 = *(_QWORD **)(v25 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
        v29 = v27[2];
        if (v29 != v28[2])
          goto LABEL_119;
        if (v29)
          v30 = v27 == v28;
        else
          v30 = 1;
        if (!v30)
        {
          if (v27[4] != v28[4])
            goto LABEL_119;
          v46 = v27 + 5;
          v47 = v28 + 5;
          v48 = v29 - 1;
          while (v48)
          {
            v50 = *v46++;
            v49 = v50;
            v51 = *v47++;
            --v48;
            if (v49 != v51)
              goto LABEL_119;
          }
        }
        v31 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 128);
        v32 = swift_retain();
        v33 = v31(v32);
        v34 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 128))();
        v35 = *(_QWORD *)(v33 + 16);
        if (v35 != *(_QWORD *)(v34 + 16))
        {
          swift_release();
          swift_release();
          swift_release_n();
          goto LABEL_127;
        }
        if (v35 && v33 != v34)
        {
          if (*(_QWORD *)(v33 + 32) != *(_QWORD *)(v34 + 32))
          {
LABEL_116:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_117:
            swift_release();
            swift_release();
            swift_release_n();
            goto LABEL_121;
          }
          v36 = 0;
          v37 = v35 - 1;
          while (v37 != v36)
          {
            v38 = *(_QWORD *)(v33 + 40 + 8 * v36);
            v39 = *(_QWORD *)(v34 + 8 * v36++ + 40);
            if (v38 != v39)
              goto LABEL_116;
          }
        }
        swift_bridgeObjectRelease();
        v40 = swift_bridgeObjectRelease();
        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 184))(v40);
        v43 = v42;
        v44 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 184))();
        if ((v43 & 1) != 0)
        {
          if ((v45 & 1) == 0)
            goto LABEL_117;
        }
        else if ((v45 & 1) != 0 || v41 != v44)
        {
          goto LABEL_117;
        }
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 208))(v44);
        v54 = v53;
        v55 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 208))();
        if ((v54 & 1) != 0)
        {
          if ((v56 & 1) == 0)
            goto LABEL_117;
        }
        else if ((v56 & 1) != 0 || v52 != v55)
        {
          goto LABEL_117;
        }
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 232))(v55);
        v58 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 232))();
        swift_release_n();
        swift_release();
        if (v57 != v58)
          goto LABEL_120;
      }
      else if (v25)
      {
        swift_release();
        goto LABEL_120;
      }
      v59 = v20[5];
      v60 = v16[5];
      if (v59)
      {
        if (!v60
          || !specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(v59 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets), *(_QWORD **)(v60 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets)))
        {
          goto LABEL_120;
        }
        v61 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 128);
        swift_retain();
        v62 = swift_retain();
        v63 = (_QWORD *)v61(v62);
        v64 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v60 + 128))();
        v65 = specialized static Array<A>.== infix(_:_:)(v63, v64);
        swift_bridgeObjectRelease();
        v66 = swift_bridgeObjectRelease();
        if (!v65)
          goto LABEL_119;
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 184))(v66);
        v69 = v68;
        v70 = (*(uint64_t (**)(void))(*(_QWORD *)v60 + 184))();
        if ((v69 & 1) != 0)
        {
          if ((v71 & 1) == 0)
            goto LABEL_119;
        }
        else if ((v71 & 1) != 0 || v67 != v70)
        {
          goto LABEL_119;
        }
        v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 208))(v70);
        v74 = v73;
        v75 = (*(uint64_t (**)(void))(*(_QWORD *)v60 + 208))();
        if ((v74 & 1) != 0)
        {
          if ((v76 & 1) == 0)
            goto LABEL_119;
        }
        else if ((v76 & 1) != 0 || v72 != v75)
        {
          goto LABEL_119;
        }
        v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 232))(v75);
        v78 = (*(uint64_t (**)(void))(*(_QWORD *)v60 + 232))();
        swift_release();
        swift_release();
        if (v77 != v78)
          goto LABEL_120;
      }
      else if (v60)
      {
        goto LABEL_120;
      }
      v79 = v20[6];
      v80 = v16[6];
      if (v79)
        break;
      swift_release();
      swift_release();
      result = 0;
      v4 = v115;
      if (v80)
        return result;
    }
    if (!v80)
      goto LABEL_120;
    v81 = *(_QWORD **)(v79 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
    v82 = *(_QWORD **)(v80 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
    v83 = v81[2];
    if (v83 != v82[2])
      goto LABEL_120;
    if (v83)
      v84 = v81 == v82;
    else
      v84 = 1;
    if (!v84)
    {
      if (v81[4] != v82[4])
        goto LABEL_120;
      v100 = v81 + 5;
      v101 = v82 + 5;
      v102 = v83 - 1;
      while (v102)
      {
        v104 = *v100++;
        v103 = v104;
        v105 = *v101++;
        --v102;
        if (v103 != v105)
          goto LABEL_120;
      }
    }
    v85 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 128);
    swift_retain();
    v86 = swift_retain();
    v87 = v85(v86);
    v88 = (*(uint64_t (**)(void))(*(_QWORD *)v80 + 128))();
    v89 = *(_QWORD *)(v87 + 16);
    if (v89 != *(_QWORD *)(v88 + 16))
      break;
    if (!v89 || v87 == v88)
      goto LABEL_97;
    if (*(_QWORD *)(v87 + 32) != *(_QWORD *)(v88 + 32))
    {
LABEL_118:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_119:
      swift_release();
      swift_release();
LABEL_120:
      swift_release();
LABEL_121:
      swift_release();
      return 0;
    }
    v90 = 0;
    v91 = v89 - 1;
    while (v91 != v90)
    {
      v92 = *(_QWORD *)(v87 + 40 + 8 * v90);
      v93 = *(_QWORD *)(v88 + 8 * v90++ + 40);
      if (v92 != v93)
        goto LABEL_118;
    }
LABEL_97:
    swift_bridgeObjectRelease();
    v94 = swift_bridgeObjectRelease();
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 184))(v94);
    v97 = v96;
    v98 = (*(uint64_t (**)(void))(*(_QWORD *)v80 + 184))();
    if ((v97 & 1) != 0)
    {
      if ((v99 & 1) == 0)
        goto LABEL_119;
    }
    else if ((v99 & 1) != 0 || v95 != v98)
    {
      goto LABEL_119;
    }
    v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 208))(v98);
    v108 = v107;
    v109 = (*(uint64_t (**)(void))(*(_QWORD *)v80 + 208))();
    if ((v108 & 1) != 0)
    {
      if ((v110 & 1) == 0)
        goto LABEL_119;
    }
    else if ((v110 & 1) != 0 || v106 != v109)
    {
      goto LABEL_119;
    }
    v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 232))(v109);
    v112 = (*(uint64_t (**)(void))(*(_QWORD *)v80 + 232))();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    result = 0;
    v4 = v115;
    if (v111 != v112)
      return result;
  }
  swift_release();
  swift_release();
  swift_release();
LABEL_127:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  _BYTE v53[24];
  int64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  int64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v66 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v64 = &v53[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1E0C80A78](v65);
  v7 = &v53[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v53[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v9);
  v72 = &v53[-v13];
  MEMORY[0x1E0C80A78](v12);
  v71 = &v53[-v14];
  v70 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v15 = *(_QWORD *)(v70 - 8);
  v16 = MEMORY[0x1E0C80A78](v70);
  v18 = &v53[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16);
  v20 = &v53[-v19];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = &v53[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22);
  v26 = (uint64_t *)&v53[-v25];
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v62 = v11;
  v63 = 0;
  v67 = v4;
  v68 = v7;
  v27 = *(_QWORD *)(a1 + 64);
  v55 = a1 + 64;
  v28 = 1 << *(_BYTE *)(a1 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v56 = (unint64_t)(v28 + 63) >> 6;
  v54 = v56 - 1;
  v57 = a2;
  v58 = &v53[-v25];
  v60 = v15;
  v61 = a1;
  v59 = v24;
  if (v30)
  {
    v69 = (v30 - 1) & v30;
    v31 = __clz(__rbit64(v30)) | (v63 << 6);
    v33 = v67;
    v32 = (uint64_t)v68;
LABEL_7:
    v34 = *(_QWORD *)(a1 + 56);
    *v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v31);
    v35 = v34 + *(_QWORD *)(v15 + 72) * v31;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption));
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v35, (uint64_t)v24 + *(int *)(v36 + 48), type metadata accessor for AttachmentLedger_AttachmentEncryption);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v24, 0, 1, v36);
    goto LABEL_29;
  }
  v37 = v63 + 1;
  if (__OFADD__(v63, 1))
  {
    __break(1u);
    JUMPOUT(0x1ACCEC7DCLL);
  }
  v33 = v67;
  v32 = (uint64_t)v68;
  if (v37 < v56)
  {
    v38 = *(_QWORD *)(v55 + 8 * v37);
    if (v38)
    {
LABEL_11:
      v69 = (v38 - 1) & v38;
      v31 = __clz(__rbit64(v38)) + (v37 << 6);
      v63 = v37;
      goto LABEL_7;
    }
    v39 = v63 + 2;
    ++v63;
    if (v37 + 1 < v56)
    {
      v38 = *(_QWORD *)(v55 + 8 * v39);
      if (v38)
      {
LABEL_14:
        v37 = v39;
        goto LABEL_11;
      }
      v63 = v37 + 1;
      if (v37 + 2 < v56)
      {
        v38 = *(_QWORD *)(v55 + 8 * (v37 + 2));
        if (v38)
        {
          v37 += 2;
          goto LABEL_11;
        }
        v63 = v37 + 2;
        if (v37 + 3 < v56)
        {
          v38 = *(_QWORD *)(v55 + 8 * (v37 + 3));
          if (v38)
          {
            v37 += 3;
            goto LABEL_11;
          }
          v39 = v37 + 4;
          v63 = v37 + 3;
          if (v37 + 4 < v56)
          {
            v38 = *(_QWORD *)(v55 + 8 * v39);
            if (v38)
              goto LABEL_14;
            while (1)
            {
              v37 = v39 + 1;
              if (__OFADD__(v39, 1))
                __break(1u);
              if (v37 >= v56)
                break;
              v38 = *(_QWORD *)(v55 + 8 * v37);
              ++v39;
              if (v38)
                goto LABEL_11;
            }
            v63 = v54;
          }
        }
      }
    }
  }
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v24, 1, 1, v40);
  v69 = 0;
LABEL_29:
  outlined init with take of (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?((uint64_t)v24, (uint64_t)v26);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption));
  v42 = 1;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v26, 1, v41) != 1)
  {
    v43 = *v26;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v26 + *(int *)(v41 + 48), (uint64_t)v20, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    v44 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
    if ((v45 & 1) != 0)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v15 + 72) * v44, (uint64_t)v18, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      v46 = v70;
      v47 = v71;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v18[*(int *)(v70 + 28)], (uint64_t)v71, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      v48 = v72;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v20[*(int *)(v46 + 28)], (uint64_t)v72, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      v49 = v32 + *(int *)(v65 + 48);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v47, v32, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v48, v49, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
      if (v50(v32, 1, v33) == 1)
      {
        if (v50(v49, 1, v33) == 1)
        {
          outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v72, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v71, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          __asm { BR              X10 }
        }
      }
      else
      {
        v51 = (uint64_t)v62;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v32, (uint64_t)v62, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        if (v50(v49, 1, v33) != 1)
        {
          outlined init with take of ActivitySession.DomainAssertionWrapper(v49, (uint64_t)v64, type metadata accessor for AttachmentLedger_EncryptionID);
          __asm { BR              X10 }
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper(v51, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      outlined destroy of UUID?(v32, &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
      outlined destroy of UUID?((uint64_t)v72, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v71, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v20, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    return 0;
  }
  return v42;
}

uint64_t default argument 0 of DatagramChannelStream.close(error:)()
{
  type metadata accessor for DatagramChannelError(0);
  return swift_storeEnumTagMultiPayload();
}

id default argument 5 of BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  return objc_msgSend(objc_allocWithZone((Class)CPSharedConversationServerBag), sel_init);
}

id default argument 9 of BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  return objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
}

uint64_t default argument 0 of DatagramClient._close(error:)()
{
  type metadata accessor for DatagramChannelError(0);
  return swift_storeEnumTagMultiPayload();
}

unint64_t default argument 3 of UnencryptedAttachment.init(key:metadata:mmcsMetadata:encryptionSlots:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

uint64_t default argument 5 of UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)()
{
  return 1;
}

unint64_t default argument 0 of BackgroundSession.leave(endState:)()
{
  return 0xC000000000000000;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(uint64_t a1, uint64_t a2, void (*a3)(unsigned __int8 *__return_ptr, _QWORD *))
{
  unsigned __int8 v4;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  a3(&v4, v5);
  return v4;
}

uint64_t default argument 0 of PresenceHostSession._leave(endState:)()
{
  return 0;
}

uint64_t default argument 0 of Histogram.intervalDescription(omitEmptyBins:)()
{
  return 0;
}

uint64_t default argument 1 of DarwinNotification.init(name:queue:)()
{
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  return static OS_dispatch_queue.main.getter();
}

uint64_t default argument 1 of PubSubClient.init(serviceProvider:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)()
{
  return 3;
}

double default argument 2 of PubSubClient.init(serviceProvider:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)()
{
  return 1.0;
}

uint64_t default argument 1 of PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)()
{
  return 3;
}

double default argument 2 of PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)()
{
  return 1.0;
}

uint64_t default argument 5 of CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)()
{
  return TULockdownModeEnabled();
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1AF4480F4]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

void protocol witness for Hashable.hash(into:) in conformance TUConversationActivityEventType()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TUConversationActivityEventType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TUConversationActivityEventType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CPApplicationLauncherOptions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;

  type metadata accessor for CodingUserInfoKey();
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1AF44888C](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

void specialized _NativeSet.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != __CocoaSet.count.getter())
    return;
  v4 = 0;
  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_6:
    v12 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v11);
    v13 = __CocoaSet.contains(_:)();

    if ((v13 & 1) == 0)
      return;
  }
  v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v14);
  ++v4;
  if (v15)
    goto LABEL_19;
  v4 = v14 + 1;
  if (v14 + 1 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  v16 = v14 + 2;
  if (v16 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      return;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IDSGroupSessionProvider.CurrentSessionInfo>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IDSGroupSessionProvider.Participant>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopicInfo>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AttachmentLedger_AttachmentMetadata>, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NWEndpoint>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CCE2A0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationManagerHost.EndpointRequest>, (uint64_t (*)(_QWORD))type metadata accessor for ConversationManagerHost.EndpointRequest);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, TUConversationActivitySessionContainer)>, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_Record>, type metadata accessor for CP_Record);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, UUID)>, &demangling cache variable for type metadata for (UInt64, UUID));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_SequenceNumber>, type metadata accessor for CP_SequenceNumber);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<()>, &demangling cache variable for type metadata for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ApplicationLaunchBehavior>, &demangling cache variable for type metadata for ApplicationLaunchBehavior);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PubSubTopic.ReceivedRecord>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = (unint64_t)(v10 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = MEMORY[0x1E0DEE9D8] + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + (v8 << 6))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (_QWORD *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, UInt64>);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)();
  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = (char *)(result + 8);
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8 * i), sel_identifier);
    *(_QWORD *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v16;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v17 = v3[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v19;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return v3;
    v14 = *(_QWORD *)(v20 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return v3;
      v14 = *(_QWORD *)(v20 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return v3;
        v14 = *(_QWORD *)(v20 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return v3;
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return v3;
    v14 = *(_QWORD *)(v20 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)();
  v3 = result;
  v4 = 0;
  v26 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v25 = (unint64_t)(v6 + 63) >> 6;
  v9 = (char *)(result + 8);
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 56) + 40 * i + 24);
    v19 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    swift_bridgeObjectRetain();
    result = objc_msgSend(v19, sel_initWithBool_, v18);
    *(_QWORD *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    v20 = (_QWORD *)(v3[6] + 16 * i);
    *v20 = v16;
    v20[1] = v17;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v25)
      return v3;
    v13 = *(_QWORD *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v25)
        return v3;
      v13 = *(_QWORD *)(v24 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v25)
          return v3;
        v13 = *(_QWORD *)(v24 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v25)
    return v3;
  v13 = *(_QWORD *)(v24 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v25)
      return v3;
    v13 = *(_QWORD *)(v24 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(_QWORD))type metadata accessor for ActivitySession, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:));
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(_QWORD))type metadata accessor for AddressableMember, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:));
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(_QWORD))type metadata accessor for PresenceHostSession, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:));
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(_QWORD))type metadata accessor for ConversationManagerHostConnection, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:));
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v2;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v6 = __CocoaSet.contains(_:)();
    swift_release();
    if ((v6 & 1) != 0)
    {
      v7 = specialized Set._Variant._migrateToNative(_:removing:)(v5, a1);
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  v8 = *(void **)(a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  swift_bridgeObjectRetain();
  v9 = v8;
  NSObject.hash(into:)();

  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  swift_retain();
  v13 = static NSObject.== infix(_:_:)();
  swift_release();
  if ((v13 & 1) == 0)
  {
    v14 = ~v11;
    do
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      swift_retain();
      v15 = static NSObject.== infix(_:_:)();
      swift_release();
    }
    while ((v15 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v17 = v19;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * v12);
  specialized _NativeSet._delete(at:)(v12);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

uint64_t specialized Set._Variant.remove(_:)(void *a1, void (*a2)(_QWORD), void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v27;

  v6 = v4;
  v8 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v10 = *v4;
    else
      v10 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = a1;
    v12 = __CocoaSet.contains(_:)();

    if ((v12 & 1) != 0)
    {
      v13 = specialized Set._Variant._migrateToNative(_:removing:)(v10, (uint64_t)v11, a4, a2);
      swift_bridgeObjectRelease();
      return v13;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  v15 = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain();
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v8 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v8 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_15;
  a2(0);
  v19 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v18);
  v20 = static NSObject.== infix(_:_:)();

  if ((v20 & 1) == 0)
  {
    v21 = ~v17;
    do
    {
      v18 = (v18 + 1) & v21;
      if (((*(_QWORD *)(v8 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_15;
      v22 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v18);
      v23 = static NSObject.== infix(_:_:)();

    }
    while ((v23 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *v6;
  v27 = *v6;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v25 = v27;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v18);
  specialized _NativeSet._delete(at:)(v18);
  *v6 = v27;
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v7 = v4;
  swift_bridgeObjectRelease();
  v8 = __CocoaSet.count.getter();
  v9 = swift_unknownObjectRetain();
  v10 = a3(v9, v8);
  v22 = v10;
  v11 = *(_QWORD *)(v10 + 40);
  swift_retain();
  v12 = NSObject._rawHashValue(seed:)(v11);
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    a4(0);
    v15 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v14);
    v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v14);
      specialized _NativeSet._delete(at:)(v14);
      if ((static NSObject.== infix(_:_:)() & 1) != 0)
      {
        *v7 = v22;
        return v20;
      }
      __break(1u);
    }
    else
    {
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  void *v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  Swift::Int v18;

  v3 = v2;
  swift_bridgeObjectRelease();
  v5 = __CocoaSet.count.getter();
  v6 = swift_unknownObjectRetain();
  v7 = specialized _NativeSet.init(_:capacity:)(v6, v5);
  v18 = v7;
  Hasher.init(_seed:)();
  v8 = *(void **)(a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  swift_retain();
  v9 = v8;
  NSObject.hash(into:)();

  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v7 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
    swift_retain();
    v13 = static NSObject.== infix(_:_:)();
    swift_release();
    if ((v13 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v16 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v12);
      specialized _NativeSet._delete(at:)(v12);
      if ((static NSObject.== infix(_:_:)() & 1) != 0)
      {
        *v3 = v18;
        return v16;
      }
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v14;
        if (((*(_QWORD *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        swift_retain();
        v15 = static NSObject.== infix(_:_:)();
        swift_release();
        if ((v15 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        v11 = *(void **)(v10 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
        swift_retain();
        v12 = v11;
        NSObject.hash(into:)();

        v13 = Hasher._finalize()();
        swift_release();
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_QWORD *)(v15 + 8 * v2);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_OWORD *)(v12 + 16 * v2);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for UUID();
  v28 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v25 = v1;
    v11 = ~v9;
    swift_retain();
    v12 = _HashTable.previousHole(before:)();
    v27 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v28 + 72);
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
      do
      {
        v15 = v14 * v10;
        v26(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v3);
        v17 = v16 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v17 < v13 || a1 < (uint64_t)v17)
            goto LABEL_6;
        }
        else if (v17 < v13 && a1 < (uint64_t)v17)
        {
          goto LABEL_6;
        }
        v20 = v14 * a1;
        if (v14 * a1 < v15 || *(_QWORD *)(v7 + 48) + v14 * a1 >= (unint64_t)(*(_QWORD *)(v7 + 48) + v15 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v20 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v27 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v27 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v25;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v21 = *v1;
  v22 = *(_QWORD *)(*v1 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: ())>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 1;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 24);
  if (v1 >> 62)
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((2 * v1 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v2 = 16 * v1;
  v3 = v2 & 0xFFFFFFFFFFFFFFE0;
  if ((v2 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      v4 = result;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v5 = swift_allocObject();
      v6 = _swift_stdlib_malloc_size((const void *)v5);
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = 2 * v6 - 64;
      v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, (_BYTE *)(v5 + 32), v3, v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v7 == v3)
        return v5;
      __break(1u);
    }
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = __CocoaSet.count.getter();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v2, a1);
  result = outlined consume of [String : ()].Iterator._Variant();
  if (v6 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = v2;
  v5[3] = (2 * (v7 >> 3)) | 1;
  v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v8 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t *v22;
  unint64_t v23;
  Swift::Int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (unint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v18 = (char *)(v17 + 1);
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16)
              *v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6)
              *v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a3 - (_QWORD)a2;
  v10 = a2 - __src + 31;
  if (a2 - __src >= 0)
    v10 = a2 - __src;
  v11 = v10 >> 5;
  v12 = v9 + 31;
  if (v9 >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 5;
  v31 = __src;
  v30 = __dst;
  if (v11 >= v12 >> 5)
  {
    if (v9 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst)
        memmove(__dst, a2, 32 * v13);
      v19 = &v4[32 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v9 >= 32)
      {
        v20 = (char *)(a3 - 32);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 32;
          v23 = *((_QWORD *)v21 - 4);
          v24 = *((_QWORD *)v21 - 3);
          v21 -= 32;
          v25 = *((_QWORD *)v19 - 4) == v23 && *((_QWORD *)v19 - 3) == v24;
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v29 = v19 - 32;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
            {
              v27 = *((_OWORD *)v19 - 1);
              *(_OWORD *)v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v27;
            }
            v21 = v6;
            v19 -= 32;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
            {
              v26 = *((_OWORD *)v21 + 1);
              *(_OWORD *)v20 = *(_OWORD *)v21;
              *((_OWORD *)v20 + 1) = v26;
            }
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 32;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v11] <= __dst)
      memmove(__dst, __src, 32 * v11);
    v14 = &v4[32 * v11];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            v18 = *((_OWORD *)v4 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v18;
          }
          v4 += 32;
          v30 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 32;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            v17 = *((_OWORD *)v6 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v17;
          }
        }
        v7 += 32;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v31 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v6 = (uint64_t *)(a3 + 16 * v4 + 24);
    do
    {
      v7 = *v6;
      v10[0] = *(v6 - 1);
      v10[1] = v7;
      swift_bridgeObjectRetain();
      v8 = a1(v10);
      swift_bridgeObjectRelease();
      if (v3)
        break;
      v6 -= 2;
      --v4;
    }
    while (!(v8 & 1 | (v4 == 0)));
  }
  return v4;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  v4 = a4;
  v6 = a2;
  v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    result = (_QWORD *)Set.Iterator.init(_cocoa:)();
    v4 = v27;
    v7 = v28;
    v8 = v29;
    v9 = v30;
    v10 = v31;
    if (v6)
      goto LABEL_3;
LABEL_36:
    v11 = 0;
    goto LABEL_38;
  }
  v9 = 0;
  v19 = -1 << *(_BYTE *)(a4 + 32);
  v7 = a4 + 56;
  v8 = ~v19;
  v20 = -v19;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v10 = v21 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v11 = 0;
LABEL_38:
    v22 = v24;
LABEL_41:
    *v22 = v4;
    v22[1] = v7;
    v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (_QWORD *)v11;
  }
  if (a3 < 0)
    goto LABEL_48;
  v11 = 0;
  v25 = (unint64_t)(v8 + 64) >> 6;
  v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_40;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v14 = v26;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v26)
        goto LABEL_40;
      goto LABEL_8;
    }
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_7;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v15 >= v25)
    {
      v10 = 0;
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v7 + 8 * v15);
    if (v16)
      goto LABEL_23;
    v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25)
        goto LABEL_44;
      v16 = *(_QWORD *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        v15 = v9 + 3;
        goto LABEL_23;
      }
      v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      v16 = *(_QWORD *)(v7 + 8 * v17);
      if (!v16)
      {
        v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          v10 = 0;
          v9 = v17;
          goto LABEL_40;
        }
        v16 = *(_QWORD *)(v7 + 8 * v15);
        if (!v16)
        {
          v18 = v9 + 6;
          while (v25 != v18)
          {
            v16 = *(_QWORD *)(v7 + 8 * v18++);
            if (v16)
            {
              v15 = v18 - 1;
              goto LABEL_23;
            }
          }
          v10 = 0;
          v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    v15 = v17;
LABEL_23:
    v10 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v15 << 6);
    v9 = v15;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
    v14 = result;
    if (!result)
      goto LABEL_40;
LABEL_8:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      v11 = a3;
LABEL_40:
      v8 = v23;
      v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _BYTE *a2, int64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v10;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_17;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_17:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if (a3 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v7 = *(_QWORD *)(a4 + 24);
  if (v7 >> 62)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = (16 * v7) & 0xFFFFFFFFFFFFFFE0;
  if (!v8)
  {
LABEL_16:
    v6 = v8;
    goto LABEL_17;
  }
  result = FixedBitArray.subscript.getter(0, a4);
  if (v8 >= 1)
  {
    *a2 = result & 1;
    if (v6 != 1)
    {
      v10 = 1;
      while (v6 != v10)
      {
        if (v8 == v10)
          goto LABEL_16;
        if (v10 >> 5 >= *(_QWORD *)(a4 + 16))
          goto LABEL_19;
        a2[v10] = (*(_DWORD *)(a4 + 32 + 4 * (v10 >> 5)) >> v10) & 1;
        if (v6 == ++v10)
          goto LABEL_17;
      }
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_17;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = 16 * v16;
    v21 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v22 = v21[1];
    v23 = *(_OWORD *)(*(_QWORD *)(a4 + 56) + v20);
    *(_QWORD *)v11 = *v21;
    *(_QWORD *)(v11 + 8) = v22;
    *(_OWORD *)(v11 + 16) = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }
    v11 += 32;
    swift_bridgeObjectRetain();
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

char *specialized ActivitySession.__allocating_init(activitySession:manager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t (*v20)(id, char *, uint64_t, uint64_t, char *, id, id, _QWORD *);
  id v21;
  char *v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v26 = a5;
  v8 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a1, sel_activity);
  v15 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  v16 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = objc_msgSend(a1, sel_isLocallyInitiated);
  v18 = objc_msgSend(a1, sel_isLightweightPrimaryInitiated);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v19 = (void *)static IMUserNotificationCenter.shared;
  v27[3] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IMUserNotificationCenter);
  v27[4] = &protocol witness table for IMUserNotificationCenter;
  v27[0] = v19;
  v20 = *(uint64_t (**)(id, char *, uint64_t, uint64_t, char *, id, id, _QWORD *))(a3 + 1080);
  v21 = v19;
  v22 = (char *)(id)v20(v14, v13, a2, v26, v10, v17, v18, v27);
  LOBYTE(v20) = objc_msgSend(a1, sel_isUsingAirplay);

  swift_unknownObjectRelease();
  v23 = &v22[OBJC_IVAR___CPActivitySession_isUsingAirplay];
  swift_beginAccess();
  *v23 = (char)v20;

  return v22;
}

char *specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5, int a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  id *v34;
  void *v35;
  id v36;
  id v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(_BYTE *, uint64_t, uint64_t);
  char v40;
  id v41;
  id v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  objc_class *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  char *v71;
  id v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  id v80;
  uint64_t v82;
  id v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  char *v86;
  int v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[3];
  unint64_t v97;
  uint64_t v98;
  unint64_t v99[3];
  objc_super v100;
  uint64_t v101[5];

  v87 = a6;
  LODWORD(v90) = a5;
  v95 = a4;
  v89 = a1;
  v91 = a9;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v16);
  v86 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v84 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101[3] = a10;
  v101[4] = a12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v101);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(boxed_opaque_existential_1, a7, a10);
  v22 = a8;
  DateInterval.init()();
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_terminatingHandle] = 0;
  v22[OBJC_IVAR___CPActivitySession_isFirstJoin] = 1;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers] = MEMORY[0x1E0DEE9D8];
  v22[OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose] = 0;
  v24 = &v22[OBJC_IVAR___CPActivitySession_audioSessionID];
  *(_DWORD *)v24 = 0;
  v24[4] = 1;
  v25 = &v22[OBJC_IVAR___CPActivitySession_domainAssertion];
  v26 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem] = 0;
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_distributionCount] = 0;
  v22[OBJC_IVAR___CPActivitySession_isLocalParticipantActive] = 0;
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_activeParticipantIDs] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_applicationState] = 1;
  v27 = OBJC_IVAR___CPActivitySession_foregroundPresentationSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(_QWORD *)&v22[v27] = PassthroughSubject.init()();
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_capabilities] = 0;
  Date.init()();
  v28 = &v22[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
  v29 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v29 - 8);
  v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  v85(v28, 1, 1, v29);
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_activeParticipantsUpdateItem] = 0;
  v31 = OBJC_IVAR___CPActivitySession_activeParticipants;
  *(_QWORD *)&v22[v31] = specialized Dictionary.init(dictionaryLiteral:)(v23);
  v32 = &v22[OBJC_IVAR___CPActivitySession_sessionManager];
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_sessionManager + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_rtcReporter] = 0;
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_connection] = 0;
  v92 = v19;
  v33 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16);
  v94 = a2;
  v93 = v18;
  v33(&v22[OBJC_IVAR___CPActivitySession_id], a2, v18);
  v34 = (id *)&v22[OBJC_IVAR___CPActivitySession_activity];
  v35 = v89;
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_activity] = v89;
  v36 = v35;
  v37 = objc_msgSend(v36, sel_metadata);
  objc_msgSend(v37, sel_saveImageToDisk);

  swift_beginAccess();
  *((_QWORD *)v32 + 1) = a11;
  swift_unknownObjectWeakAssign();
  v38 = *(uint64_t (**)(uint64_t, uint64_t))(a11 + 8);
  v89 = a3;
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_queue] = v38(v91, a11);
  v88 = v30;
  v39 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 16);
  v40 = (char)v90;
  v91 = v29;
  v39(&v22[OBJC_IVAR___CPActivitySession_timestamp], v95, v29);
  v41 = objc_msgSend((id)objc_opt_self(), sel_anonymousListener);
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_listener] = v41;
  v42 = objc_msgSend(v41, sel_endpoint);
  *(_QWORD *)&v22[OBJC_IVAR___CPActivitySession_endpoint] = v42;
  if ((v40 & 1) != 0)
    v43 = 0x8000000000000000;
  else
    v43 = 0x8000000000000010;
  v44 = &v22[OBJC_IVAR___CPActivitySession__state];
  swift_beginAccess();
  v99[0] = v43;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  v45 = &unk_1ED303000;
  if (objc_msgSend(*v34, sel_isScreenSharingActivity))
  {
    v46 = v33;
    swift_beginAccess();
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v44, v47);
    v96[0] = 0x8000000000000000;
    Published.init(initialValue:)();
    swift_endAccess();
    if (one-time initialization token for host != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Log.host);
    v49 = v84;
    v50 = v93;
    v46(v84, v94, v93);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v54 = swift_slowAlloc();
      v99[0] = v54;
      v83 = v36;
      *(_DWORD *)v53 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v55 = dispatch thunk of CustomStringConvertible.description.getter();
      v96[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v99);
      v40 = (char)v90;
      v36 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v49, v50);
      _os_log_impl(&dword_1ACCCC000, v51, v52, "Setting initial ActivitySession(%s) state to waiting for screen sharing activity", v53, 0xCu);
      swift_arrayDestroy();
      v57 = v54;
      v45 = (_QWORD *)&unk_1ED303000;
      MEMORY[0x1AF44981C](v57, -1, -1);
      MEMORY[0x1AF44981C](v53, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v92 + 8))(v49, v50);
    }

  }
  v22[OBJC_IVAR___CPActivitySession_isLocallyInitiated] = v40 & 1;
  v22[OBJC_IVAR___CPActivitySession_isLightweightPrimaryInitiated] = v87 & 1;
  outlined init with copy of UserNotificationCenter((uint64_t)v101, (uint64_t)&v22[OBJC_IVAR___CPActivitySession_notificationCenter]);
  v22[OBJC_IVAR___CPActivitySession_isUsingAirplay] = 0;

  v58 = (objc_class *)type metadata accessor for ActivitySession(0);
  v100.receiver = v22;
  v100.super_class = v58;
  v59 = (char *)objc_msgSendSuper2(&v100, sel_init);
  v60 = *(void **)&v59[OBJC_IVAR___CPActivitySession_listener];
  v61 = v59;
  objc_msgSend(v60, sel_setDelegate_, v61);
  objc_msgSend(v60, sel_resume);
  type metadata accessor for RTCReporter();
  swift_allocObject();
  v62 = v61;
  v63 = RTCReporter.init(session:)(v62);
  v64 = &v62[OBJC_IVAR___CPActivitySession_rtcReporter];
  swift_beginAccess();
  *(_QWORD *)v64 = v63;
  v65 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v62) + 0x2A0))(v96, v65);
  v66 = v96[0];
  v97 = 0x8000000000000000;
  v98 = v96[0];
  LOBYTE(v64) = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v98, &v97);
  outlined consume of ActivitySession.State(v66);
  if ((v64 & 1) != 0)
  {
    v67 = (uint64_t)v86;
    Date.init()();
    v85((char *)v67, 0, 1, v91);
    v68 = (uint64_t)&v62[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?(v67, v68, (uint64_t *)&demangling cache variable for type metadata for Date?);
    swift_endAccess();
  }
  if (v45[104] != -1)
    swift_once();
  v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Log.host);
  v70 = v36;
  v71 = v62;
  v72 = v70;
  v73 = v71;
  v74 = Logger.logObject.getter();
  v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    v76 = swift_slowAlloc();
    v90 = v59;
    v77 = v76;
    v78 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v77 = 138412546;
    v96[0] = (uint64_t)v73;
    v79 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v78 = v90;

    *(_WORD *)(v77 + 12) = 2112;
    v96[0] = (uint64_t)v72;
    v80 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v78[1] = v72;

    _os_log_impl(&dword_1ACCCC000, v74, v75, "Initialized %@ activity: %@", (uint8_t *)v77, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v78, -1, -1);
    MEMORY[0x1AF44981C](v77, -1, -1);
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v95, v91);
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v94, v93);
  return v73;
}

uint64_t specialized static ActivitySession.State.InvalidationReason.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      if (*a1 != *a2 || v3 != v4)
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      return 1;
    }
    return 0;
  }
  if (v4)
    return 0;
  swift_bridgeObjectRelease_n();
  return 1;
}

unint64_t outlined copy of ActivitySession.State(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_retain();
  return result;
}

unint64_t outlined consume of ActivitySession.State(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_release();
  return result;
}

uint64_t sub_1ACCF3074()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySession.logDurationMetric(_:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1ACCF30A8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySession.invalidateAssertions(useDelay:)()
{
  uint64_t v0;

  closure #1 in ActivitySession.invalidateAssertions(useDelay:)(v0);
}

uint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for TUConversationActivity(255, a2);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of UserNotificationCenter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1ACCF3158()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:)()
{
  uint64_t v0;

  closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1ACCF318C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1ACCF3300()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1ACCF3334 + dword_1ACCF350C[v0 >> 62]))();
}

uint64_t sub_1ACCF3344@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  return specialized Set.init<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AddressableMember();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1AF448904](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E0DBD2F8, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  unint64_t result;
  char v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  void *v14;
  id v15;
  char v16;
  id v17;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TUConversationParticipant>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = (void *)a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v17 = v5;
    return (unint64_t)v3;
  }
  v8 = (void **)(a1 + 7);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v4;
    *(_QWORD *)(v3[7] + v9) = v5;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v4 = (uint64_t)*(v8 - 1);
    v14 = *v8;
    v15 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v13;
    v5 = v14;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  uint64_t v17;

  v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for TUConversationActivity(0, a2);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(a4, a2);
  result = Set.init(minimumCapacity:)();
  v17 = result;
  if (v9)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v11)
      return v17;
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v11)
      return v17;
  }
  if (v11 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = MEMORY[0x1AF448904](i, a1);
        a5(&v16, v13);

      }
    }
    else
    {
      v14 = (void **)(a1 + 32);
      do
      {
        v15 = *v14++;
        a5(&v16, (uint64_t)v15);

        --v11;
      }
      while (v11);
    }
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void *v22;

  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_21;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_24;
      v16 = *(_QWORD *)(v6 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_24;
        v16 = *(_QWORD *)(v6 + 8 * v12);
        if (!v16)
        {
          v12 = v15 + 3;
          if (v15 + 3 >= v10)
            goto LABEL_24;
          v16 = *(_QWORD *)(v6 + 8 * v12);
          if (!v16)
          {
            v17 = v15 + 4;
            if (v17 >= v10)
            {
LABEL_24:
              swift_release();
              return 0;
            }
            v16 = *(_QWORD *)(v6 + 8 * v17);
            v12 = v17;
            if (!v16)
              break;
          }
        }
      }
    }
LABEL_20:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_21:
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14);
    result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x380))(result);
    if (result)
    {
      v20 = v19;
      ObjectType = swift_getObjectType();
      v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 24))(v18, a3, a4, ObjectType, v20);
      result = swift_unknownObjectRelease();
      if (v22)
      {
        swift_release();

        return v18;
      }
    }
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, NSObject *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v28;
  void (*v30)(uint64_t, uint64_t, uint64_t, void (*)(void *), _QWORD *, uint64_t, uint64_t);
  uint64_t ObjectType;

  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v28 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (v10)
  {
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v14 = v13 | (v12 << 6);
LABEL_22:
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14);
    dispatch_group_enter(a2);
    result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x380))();
    if (result)
    {
      v20 = v19;
      ObjectType = swift_getObjectType();
      v21 = (_QWORD *)swift_allocObject();
      v21[2] = a2;
      v21[3] = a3;
      v21[4] = v18;
      v21[5] = a6;
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void *), _QWORD *, uint64_t, uint64_t))(v20 + 40);
      v22 = a2;
      v23 = a3;
      swift_retain();
      v30(v18, a4, a5, partial apply for closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:), v21, ObjectType, v20);
      swift_release();
      result = swift_unknownObjectRelease();
    }
  }
  v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v15 >= v28)
    return swift_release();
  v16 = *(_QWORD *)(v24 + 8 * v15);
  ++v12;
  if (v16)
    goto LABEL_21;
  v12 = v15 + 1;
  if (v15 + 1 >= v28)
    return swift_release();
  v16 = *(_QWORD *)(v24 + 8 * v12);
  if (v16)
    goto LABEL_21;
  v12 = v15 + 2;
  if (v15 + 2 >= v28)
    return swift_release();
  v16 = *(_QWORD *)(v24 + 8 * v12);
  if (v16)
    goto LABEL_21;
  v12 = v15 + 3;
  if (v15 + 3 >= v28)
    return swift_release();
  v16 = *(_QWORD *)(v24 + 8 * v12);
  if (v16)
  {
LABEL_21:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_22;
  }
  v17 = v15 + 4;
  if (v17 >= v28)
    return swift_release();
  v16 = *(_QWORD *)(v24 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v28)
      return swift_release();
    v16 = *(_QWORD *)(v24 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized ActivitySession.invalidationBlock(execute:)(void *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t result;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *log;
  uint64_t v23;
  uint64_t v24;

  result = closure #1 in ActivitySession.join(audioSessionID:completion:)(a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5);
  if (v5)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    v9 = a1;
    v10 = v5;
    v11 = v9;
    v12 = v5;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      log = v13;
      v16 = (_QWORD *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v24 = v23;
      *(_DWORD *)v15 = 138412546;
      v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v18 = v16;
      *v16 = v11;

      *(_WORD *)(v15 + 12) = 2080;
      v19 = v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v20 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      v13 = log;
      _os_log_impl(&dword_1ACCCC000, log, v14, "%@ was invalidated with error: %s", (uint8_t *)v15, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v23, -1, -1);
      MEMORY[0x1AF44981C](v15, -1, -1);
    }
    else
    {

    }
    objc_msgSend(v11, sel_resetSession);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1ACCF44D0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized ActivitySession.invalidationBlock(execute:)(void *a1, uint64_t a2)
{
  return specialized ActivitySession.invalidationBlock(execute:)(a1, a2, (uint64_t (*)(uint64_t))closure #1 in FastSyncActivitySession.leave());
}

uint64_t specialized ActivitySession.invalidationBlock(execute:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  void *v3;
  uint64_t result;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *log;
  uint64_t v21;
  uint64_t v22;

  result = a3(a2);
  if (v3)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    v7 = a1;
    v8 = v3;
    v9 = v7;
    v10 = v3;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      log = v11;
      v14 = (_QWORD *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v22 = v21;
      *(_DWORD *)v13 = 138412546;
      v15 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16 = v14;
      *v14 = v9;

      *(_WORD *)(v13 + 12) = 2080;
      v17 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v18 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      v11 = log;
      _os_log_impl(&dword_1ACCCC000, log, v12, "%@ was invalidated with error: %s", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v16, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v21, -1, -1);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }
    else
    {

    }
    objc_msgSend(v9, sel_resetSession);
    return swift_willThrow();
  }
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v4 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x368);
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v8 = *(id *)(a1 + 8 * v6 + 32);
    v9 = v4(isUniquelyReferenced_nonNull_native);
    if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v11 & 1) != 0))
    {
      v12 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease();
      v8 = objc_msgSend(v12, sel_identifier);

    }
    else
    {
      swift_bridgeObjectRelease();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v14 = v7[2];
    v13 = v7[3];
    if (v14 >= v13 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v7);
      v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    ++v6;
    v7[2] = v14 + 1;
    v7[v14 + 4] = v8;
  }
  while (v2 != v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t type metadata accessor for ActivitySession(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for ActivitySession);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1ACCF4A38()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD **)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t sub_1ACCF4AB8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySession.endSessionForAll(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x3E0))();
}

uint64_t partial apply for closure #1 in ActivitySession.endSessionForLocal(completion:)()
{
  uint64_t v0;

  return closure #1 in ActivitySession.endSessionForLocal(completion:)(*(_QWORD **)(v0 + 16));
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivityLifetimePolicy, (uint64_t)&unk_1E5C7A150, MEMORY[0x1E0DEEC78]);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t partial apply for closure #1 in ActivitySession.refreshDataCryptor()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ActivitySession.refreshDataCryptor()(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1ACCF4B68()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ActivitySession.fetchDataCryptor(completion:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ActivitySession.fetchDataCryptor(completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ActivitySession.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t isEscapingClosureAtFileLocation;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  char *v15;
  uint64_t result;
  void (*v17)(unint64_t *__return_ptr, uint64_t);
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char *v23;
  char *v24;
  id v25;
  NSObject *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  id v34;
  char *v35;
  NSObject *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  unint64_t v49[3];
  unint64_t v50;
  unint64_t aBlock;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t (*v55)();
  uint64_t v56;
  char v57;

  v2 = v1;
  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  isEscapingClosureAtFileLocation = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v48 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    aBlock = isEscapingClosureAtFileLocation;
    v9 = (id)isEscapingClosureAtFileLocation;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v48 = isEscapingClosureAtFileLocation;

    _os_log_impl(&dword_1ACCCC000, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v48, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {

  }
  v57 = 0;
  v10 = *(NSObject **)&v2[OBJC_IVAR___CPActivitySession_queue];
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = &v57;
  *(_QWORD *)(v11 + 24) = v2;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:);
  *(_QWORD *)(v12 + 24) = v11;
  v55 = thunk for @callee_guaranteed () -> ()partial apply;
  v56 = v12;
  v13 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v52 = 1107296256;
  v53 = thunk for @escaping @callee_guaranteed () -> ();
  v54 = &block_descriptor_93;
  v14 = _Block_copy(&aBlock);
  v15 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v10, v14);
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v14 & 1) == 0)
  {
    v17 = *(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v15)
                                                                         + 0x2A0);
    v17(&aBlock, result);
    v18 = aBlock;
    v49[0] = aBlock;
    v50 = 0x8000000000000008;
    v19 = static ActivitySession.State.== infix(_:_:)(v49, &v50);
    v20 = outlined consume of ActivitySession.State(v18);
    if ((v19 & 1) != 0
      || (v17(&aBlock, v20),
          v21 = aBlock,
          v49[0] = aBlock,
          v50 = 0x8000000000000000,
          v22 = static ActivitySession.State.== infix(_:_:)(v49, &v50),
          outlined consume of ActivitySession.State(v21),
          (v22 & 1) != 0))
    {
      if (v57 == 1)
      {
        v23 = (char *)objc_allocWithZone((Class)type metadata accessor for ActivitySessionHostConnection());
        swift_unknownObjectWeakInit();
        v24 = &v23[direct field offset for ActivitySessionHostConnection.__isAppProcess];
        *(_QWORD *)v24 = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
        *((_QWORD *)v24 + 1) = 0;
        v25 = (id)isEscapingClosureAtFileLocation;
        v26 = v10;
        v27 = specialized XPCHostConnection.init(connection:queue:)(v25, v26);
        if (!v27)
        {
          v45 = v25;
          v38 = Logger.logObject.getter();
          v46 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v38, v46))
          {

            v38 = v45;
            goto LABEL_17;
          }
          v47 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v47 = 67109120;
          LODWORD(aBlock) = -[NSObject processIdentifier](v45, sel_processIdentifier);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_1ACCCC000, v38, v46, "ActivitySessionHostConnection could not be created; rejecting connection from PID %d.",
            v47,
            8u);
          v44 = (uint64_t)v47;
          goto LABEL_15;
        }
        v28 = v27;
        v29 = 1;
        swift_beginAccess();
        swift_unknownObjectWeakAssign();
        v30 = swift_allocObject();
        *(_QWORD *)(v30 + 16) = v15;
        *(_QWORD *)(v30 + 24) = v28;
        v31 = swift_allocObject();
        *(_QWORD *)(v31 + 16) = partial apply for closure #2 in ActivitySession.listener(_:shouldAcceptNewConnection:);
        *(_QWORD *)(v31 + 24) = v30;
        v55 = thunk for @callee_guaranteed () -> ()partial apply;
        v56 = v31;
        aBlock = v13;
        v52 = 1107296256;
        v53 = thunk for @escaping @callee_guaranteed () -> ();
        v54 = &block_descriptor_103;
        v32 = _Block_copy(&aBlock);
        v33 = v15;
        v15 = v28;
        swift_retain();
        swift_release();
        dispatch_sync(v26, v32);

        _Block_release(v32);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) == 0)
          return v29;
        __break(1u);
      }
    }
    v34 = (id)isEscapingClosureAtFileLocation;
    v35 = v15;
    v36 = v34;
    v37 = v35;
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v38, v39))
    {

      v38 = v36;
      goto LABEL_17;
    }
    v40 = swift_slowAlloc();
    v41 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v40 = 138412546;
    aBlock = (unint64_t)v36;
    v42 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v41 = v36;

    *(_WORD *)(v40 + 12) = 2112;
    aBlock = (unint64_t)v37;
    v43 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v41[1] = v37;

    _os_log_impl(&dword_1ACCCC000, v38, v39, "Dropping new connection %@ because state isn't accepting new connections %@", (uint8_t *)v40, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v41, -1, -1);
    v44 = v40;
LABEL_15:
    MEMORY[0x1AF44981C](v44, -1, -1);
LABEL_17:
    swift_release();

    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1ACCF5680()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ActivitySession.associateScene(sceneID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x490))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v6 = 0;
  v7 = result + 40;
  v8 = -(uint64_t)v3;
  v9 = MEMORY[0x1E0DEE9D8];
  v19 = result + 40;
  do
  {
    if (v6 <= v3)
      v10 = v3;
    else
      v10 = v6;
    v11 = -(uint64_t)v10;
    for (i = (uint64_t *)(v7 + 16 * v6++); ; i += 2)
    {
      if (v11 + v6 == 1)
      {
        __break(1u);
        return result;
      }
      v13 = *(i - 1);
      v14 = *i;
      if (v13 != a2 || v14 != a3)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          break;
      }
      ++v6;
      if (v8 + v6 == 1)
        return v9;
    }
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
    v17 = *(_QWORD *)(v9 + 16);
    v16 = *(_QWORD *)(v9 + 24);
    if (v17 >= v16 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v9 + 16) = v17 + 1;
    v18 = v9 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v13;
    *(_QWORD *)(v18 + 40) = v14;
    v3 = v20;
    v7 = v19;
  }
  while (v8 + v6);
  return v9;
}

{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(__int128 *);
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(__int128 *);
  __int128 v15[2];
  __int128 v16[2];
  unint64_t v17;

  v5 = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = (uint64_t (*)(__int128 *))result;
    v5 = 0;
    v8 = a3 + 32;
    v9 = MEMORY[0x1E0DEE9D8];
    v13 = *(_QWORD *)(a3 + 16);
    v14 = (uint64_t (*)(__int128 *))result;
    while (v5 < *(_QWORD *)(a3 + 16))
    {
      outlined init with copy of UserNotificationCenter(v8, (uint64_t)v16);
      v10 = v7(v16);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
        swift_release();
        swift_bridgeObjectRelease();
        return v5;
      }
      if ((v10 & 1) != 0)
      {
        outlined init with take of BackgroundSessionManagerDataSource(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v17;
        v12 = *(_QWORD *)(v17 + 16);
        v11 = *(_QWORD *)(v17 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v9 = v17;
        }
        *(_QWORD *)(v9 + 16) = v12 + 1;
        result = outlined init with take of BackgroundSessionManagerDataSource(v15, v9 + 40 * v12 + 32);
        v6 = v13;
        v7 = v14;
      }
      else
      {
        result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
      }
      ++v5;
      v8 += 40;
      if (v6 == v5)
      {
        v5 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void partial apply for closure #1 in ActivitySession.updateActivity(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in ActivitySession.updateActivity(_:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t type metadata accessor for ActivitySession.DomainAssertionWrapper(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for ActivitySession.DomainAssertionWrapper);
}

uint64_t type metadata accessor for ActivitySession(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized ActivitySession.assertionWillInvalidate(_:)()
{
  char *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v8[6];

  v1 = *(NSObject **)&v0[OBJC_IVAR___CPActivitySession_queue];
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in ActivitySession.assertionWillInvalidate(_:);
  *(_QWORD *)(v3 + 24) = v2;
  v8[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v8[5] = v3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_83;
  v4 = _Block_copy(v8);
  v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void specialized ActivitySession.assertion(_:didInvalidateWithError:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;

  if (one-time initialization token for host != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = a1;
  v4 = a1;
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    if (a1)
    {
      v8 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v9 = String.init<A>(reflecting:)();
      v11 = v10;
    }
    else
    {
      v11 = 0xE300000000000000;
      v9 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, oslog, v5, "[Assertion] DomainAssertionObserver didInvalidateWithError for app with error:%s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);

  }
  else
  {

  }
}

unint64_t lazy protocol witness table accessor for type ActivitySessionErrors and conformance ActivitySessionErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors;
  if (!lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySessionErrors, &type metadata for ActivitySessionErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors;
  if (!lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySessionErrors, &type metadata for ActivitySessionErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors);
  }
  return result;
}

uint64_t sub_1ACCF5CDC()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocObject();
}

void partial apply for closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:)()
{
  uint64_t v0;

  closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:)(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

unint64_t lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors;
  if (!lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySession.Errors, &type metadata for ActivitySession.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors;
  if (!lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySession.Errors, &type metadata for ActivitySession.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySession.Capabilities, &type metadata for ActivitySession.Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySession.Capabilities, &type metadata for ActivitySession.Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySession.Capabilities, &type metadata for ActivitySession.Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivitySession.Capabilities, &type metadata for ActivitySession.Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in ActivitySession()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.applicationLauncher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.localParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionChanged(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionIsJoinable(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:receivedEvent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 72))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:requestEncryptionKeysForParticipants:topicName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionActivityChanged(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:stateChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionUnjoined(session:startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.requestForegroundPresentationFor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:associatedScene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:disassociatedScene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sendResource(atURL:to:metadata:activitySessionUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 136))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:requestedEndpointWith:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 144))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionCapabilitiesUpdated(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t ObjC metadata update function for ActivitySession()
{
  return type metadata accessor for ActivitySession(0);
}

void type metadata completion function for ActivitySession()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateInterval();
    if (v1 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for ActivitySession.DomainAssertionWrapper?, (void (*)(uint64_t))type metadata accessor for ActivitySession.DomainAssertionWrapper);
      if (v2 <= 0x3F)
      {
        type metadata accessor for TUConversationActivityLifetimePolicy(319, &lazy cache variable for type metadata for Published<ActivitySession.State>, (uint64_t)&type metadata for ActivitySession.State, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Date();
          if (v4 <= 0x3F)
          {
            type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
            if (v5 <= 0x3F)
              swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t method lookup function for ActivitySession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivitySession.activityInterval.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of ActivitySession.activityInterval.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of ActivitySession.activityInterval.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of ActivitySession.terminatingHandle.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of ActivitySession.terminatingHandle.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of ActivitySession.terminatingHandle.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of ActivitySession.isFirstJoin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of ActivitySession.isFirstJoin.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of ActivitySession.isFirstJoin.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ActivitySession.isPermittedToJoin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ActivitySession.persistentSceneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ActivitySession.persistentSceneIdentifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ActivitySession.persistentSceneIsEligibleForAutoClose.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ActivitySession.audioSessionID.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ActivitySession.audioSessionID.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1E0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ActivitySession.audioSessionID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ActivitySession.domainAssertion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ActivitySession.domainAssertion.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ActivitySession.domainAssertion.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of ActivitySession.distributionCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of ActivitySession.distributionCount.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of ActivitySession.distributionCount.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of ActivitySession.applicationState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of ActivitySession.applicationState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of ActivitySession.applicationState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of ActivitySession.capabilities.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of ActivitySession.capabilities.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ActivitySession.capabilities.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of ActivitySession.logDurationMetric(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of ActivitySession.state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ActivitySession.state.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ActivitySession.state.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ActivitySession.$state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ActivitySession.$state.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of ActivitySession.$state.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of ActivitySession.activity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ActivitySession.activity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of ActivitySession.activity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of ActivitySession.isLocallyInitiated.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ActivitySession.isUsingAirplay.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of ActivitySession.isUsingAirplay.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of ActivitySession.isUsingAirplay.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of ActivitySession.tuConversationActivitySession.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipantsUpdateItem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipantsUpdateItem.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipantsUpdateItem.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipants.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipants.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipants.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of ActivitySession.sessionManager.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of ActivitySession.sessionManager.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of ActivitySession.sessionManager.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of ActivitySession.rtcReporter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of ActivitySession.rtcReporter.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of ActivitySession.rtcReporter.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of ActivitySession.connection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of ActivitySession.connection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of ActivitySession.connection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of ActivitySession.updateActiveParticipants(with:fromCache:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of ActivitySession.join(audioSessionID:completion:)(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3D0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ActivitySession.leave()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of ActivitySession.end()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of ActivitySession.permitJoin()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of ActivitySession.logAttachmentEvent(report:reportEvent:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of ActivitySession.postEvent(event:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of ActivitySession.requestEncryptionKeys(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x400))();
}

uint64_t dispatch thunk of ActivitySession.activeRemoteParticipant(with:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of ActivitySession.endSessionForAll(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x418))();
}

uint64_t dispatch thunk of ActivitySession.endSessionForLocal(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x420))();
}

uint64_t dispatch thunk of ActivitySession.terminateSessionIfAtEndOfLifetime()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of ActivitySession.__allocating_init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1080))();
}

uint64_t dispatch thunk of ActivitySession.refreshDataCryptor()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of ActivitySession.topicName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of ActivitySession.invalidate(replacementBundleIdentifier:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of ActivitySession.rbsAssertion(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of ActivitySession.updateApplicationState(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of ActivitySession.refreshActiveParticipants()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x470))();
}

uint64_t dispatch thunk of ActivitySession.listener(_:shouldAcceptNewConnection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of ActivitySession.requestForegroundPresentation()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of ActivitySession.associateScene(sceneID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of ActivitySession._associateScene(sceneID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of ActivitySession._disassociateScene()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of ActivitySession._disassociateScene(sceneID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A0))();
}

void type metadata accessor for ActivitySession.DomainAssertionWrapper?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ActivitySession.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySession.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1ACCF6C04 + 4 * byte_1ACF59E55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1ACCF6C38 + 4 * byte_1ACF59E50[v4]))();
}

uint64_t sub_1ACCF6C38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACCF6C40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACCF6C48);
  return result;
}

uint64_t sub_1ACCF6C54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACCF6C5CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1ACCF6C60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACCF6C68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ActivitySession.Errors(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ActivitySession.Errors(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySession.Errors()
{
  return &type metadata for ActivitySession.Errors;
}

unint64_t *initializeBufferWithCopyOfBuffer for ActivitySession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of ActivitySession.State(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for ActivitySession.State(unint64_t *a1)
{
  return outlined consume of ActivitySession.State(*a1);
}

unint64_t *assignWithCopy for ActivitySession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of ActivitySession.State(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of ActivitySession.State(v4);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for ActivitySession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of ActivitySession.State(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySession.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ActivitySession.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for ActivitySession.State(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *destructiveProjectEnumData for ActivitySession.State(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for ActivitySession.State(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySession.State()
{
  return &type metadata for ActivitySession.State;
}

_QWORD *initializeBufferWithCopyOfBuffer for ActivitySession.State.InvalidationReason(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ActivitySession.State.InvalidationReason()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ActivitySession.State.InvalidationReason(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for ActivitySession.State.InvalidationReason(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySession.State.InvalidationReason(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ActivitySession.State.InvalidationReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for ActivitySession.State.InvalidationReason(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for ActivitySession.State.InvalidationReason(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivitySession.State.InvalidationReason()
{
  return &type metadata for ActivitySession.State.InvalidationReason;
}

ValueMetadata *type metadata accessor for ActivitySession.Capabilities()
{
  return &type metadata for ActivitySession.Capabilities;
}

char *initializeBufferWithCopyOfBuffer for ActivitySession.DomainAssertionWrapper(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v6;
    *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
    v7 = *(int *)(a3 + 28);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UUID();
    v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v12 = v4;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for ActivitySession.DomainAssertionWrapper(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v11 = v5;
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySession.DomainAssertionWrapper()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACCF7328(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ActivitySession.DomainAssertionWrapper()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACCF73B0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ActivitySession.DomainAssertionWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for TUConversationActivityEventQueueItemType(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivityEventQueueItemType, (uint64_t)&unk_1E5C7E990, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for TUConversationActivityEventType(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivityEventType, (uint64_t)&unk_1E5C7E928, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CPActivitySessionState(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for CPActivitySessionState, (uint64_t)&unk_1E5C7E8B0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CPApplicationType(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, (unint64_t *)&lazy cache variable for type metadata for CPApplicationType, (uint64_t)&unk_1E5C7E830, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s, (uint64_t)&unk_1E5C7E808, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for TUConversationActivitySessionApplicationState(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivitySessionApplicationState, (uint64_t)&unk_1E5C7E9B0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CARTransportType(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for CARTransportType, (uint64_t)&unk_1E5C7E7E8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for IDSSessionEndedReason(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for IDSSessionEndedReason, (uint64_t)&unk_1E5C7E870, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for PGBackgroundPIPAuthorizationState(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for PGBackgroundPIPAuthorizationState, (uint64_t)&unk_1E5C7E948, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for CFErrorRef, (uint64_t)&unk_1E5C7E698, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CPApplicationLauncherOptions(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for CPApplicationLauncherOptions, (uint64_t)&unk_1E5C7E900, MEMORY[0x1E0DEEC78]);
}

uint64_t base witness table accessor for Equatable in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, (uint64_t (*)(uint64_t))type metadata accessor for CPApplicationLauncherOptions, (uint64_t)&protocol conformance descriptor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, (uint64_t (*)(uint64_t))type metadata accessor for CPApplicationLauncherOptions, (uint64_t)&protocol conformance descriptor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for RawRepresentable in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, (uint64_t (*)(uint64_t))type metadata accessor for CPApplicationLauncherOptions, (uint64_t)&protocol conformance descriptor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for SetAlgebra in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, (uint64_t (*)(uint64_t))type metadata accessor for CPApplicationLauncherOptions, (uint64_t)&protocol conformance descriptor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for Equatable in TUConversationActivityEventType()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type TUConversationActivityEventType and conformance TUConversationActivityEventType, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivityEventType, (uint64_t)&protocol conformance descriptor for TUConversationActivityEventType);
}

uint64_t base witness table accessor for Equatable in TUConversationActivityEventQueueItemType()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type TUConversationActivityEventQueueItemType and conformance TUConversationActivityEventQueueItemType, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivityEventQueueItemType, (uint64_t)&protocol conformance descriptor for TUConversationActivityEventQueueItemType);
}

uint64_t outlined destroy of weak ActivitySessionManagerProtocol?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

unint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for IDSGroupSessionProvider.Participant, &type metadata for IDSGroupSessionProvider.Participant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for IDSGroupSessionProvider.Participant, &type metadata for IDSGroupSessionProvider.Participant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of BackgroundSessionManagerDataSource(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1ACCF7FEC()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:)(a1, *(NSObject **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in ActivitySession.assertionWillInvalidate(_:)()
{
  uint64_t v0;

  return closure #1 in ActivitySession.assertionWillInvalidate(_:)(*(_QWORD **)(v0 + 16));
}

uint64_t sub_1ACCF8034()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1ACCF804C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v0;

  return closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:)(*(_BYTE **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1ACCF8078()
{
  return swift_deallocObject();
}

uint64_t sub_1ACCF8088()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ActivitySession.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t (*v3)(void *);
  id v4;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(uint64_t (**)(void *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3B8);
  v4 = v2;
  return v3(v2);
}

uint64_t sub_1ACCF8100()
{
  return swift_deallocObject();
}

uint64_t sub_1ACCF8110()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ActivitySession.fetchDataCryptor(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined assign with take of ActivitySession.DomainAssertionWrapper?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of ActivitySession.DomainAssertionWrapper?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1ACCF826C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ActivitySession.join(audioSessionID:completion:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(a1, 0);
}

uint64_t sub_1ACCF82B4()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_44Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

void type metadata accessor for nw_group_membership_changed_type_t(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for nw_group_membership_changed_type_t, (uint64_t)&unk_1E5C7E968, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for IMUserNotificationResponse(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for IMUserNotificationResponse, (uint64_t)&unk_1E5C7E8E0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for IDSGroupSessionEncryptionControllerRejectionReason(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for IDSGroupSessionEncryptionControllerRejectionReason, (uint64_t)&unk_1E5C7A170, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void RunningBoardAppVisibilityMonitor.visibleBundleIdentifiers.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t OneShotCancellationBox.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x1AF44981C](*(_QWORD *)(v0 + 16), -1, -1);
  outlined consume of OneShotCancellationBox.State(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t OneShotCancellationBox.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = v0;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 24);
  if (!v2)
    goto LABEL_5;
  if (v2 != 1)
  {
    swift_retain();
    AnyCancellable.cancel()();
    outlined consume of OneShotCancellationBox.State(v2);
    v2 = *(_QWORD *)(v1 + 24);
LABEL_5:
    v3 = 1;
    *(_QWORD *)(v1 + 24) = 1;
    goto LABEL_6;
  }
  v3 = 0;
LABEL_6:
  outlined consume of OneShotCancellationBox.State(v2);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  return v3;
}

uint64_t Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 24) = 0;
  v13 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v12 + 16) = v13;
  *v13 = 0;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = v12;
  v14[5] = a3;
  v14[6] = a4;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a5;
  v15[3] = a6;
  v15[4] = v12;
  v15[5] = a1;
  v15[6] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v16 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  v17 = *(_QWORD *)(v12 + 24);
  if (!v17)
  {
    *(_QWORD *)(v12 + 24) = v16;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
    swift_release();
    return swift_release();
  }
  if (v17 == 1)
    goto LABEL_4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OneShotCancellationBox()
{
  return objc_opt_self();
}

uint64_t closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for Subscribers.Completion();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v15 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
  if ((OneShotCancellationBox.cancel()() & 1) != 0)
    a3(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Publisher.sinkOnce(_:onError:)(a1, *(_QWORD *)(v1 + 32), *(void (**)(char *))(v1 + 40));
}

unint64_t outlined consume of OneShotCancellationBox.State(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

uint64_t Publisher<>.sinkOnce(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 24) = 0;
  v9 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v8 + 16) = v9;
  *v9 = 0;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = v8;
  v10[5] = a1;
  v10[6] = a2;
  swift_retain();
  swift_retain();
  v11 = Publisher<>.sink(receiveValue:)();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  v12 = *(_QWORD *)(v8 + 24);
  if (!v12)
  {
    *(_QWORD *)(v8 + 24) = v11;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v12 == 1)
    goto LABEL_4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  result = OneShotCancellationBox.cancel()();
  if ((result & 1) != 0)
    return v3(a1);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OneShotCancellationBox.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for OneShotCancellationBox.State(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for OneShotCancellationBox.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for OneShotCancellationBox.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OneShotCancellationBox.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OneShotCancellationBox.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for OneShotCancellationBox.State(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for OneShotCancellationBox.State(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

void *type metadata accessor for OneShotCancellationBox.State()
{
  return &unk_1E5C7CEB8;
}

id PresenceSessionConnectionInfo.endpoint.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint);
}

id PresenceSessionConnectionInfo.__allocating_init(endpoint:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id PresenceSessionConnectionInfo.init(endpoint:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PresenceSessionConnectionInfo();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for PresenceSessionConnectionInfo()
{
  return objc_opt_self();
}

unint64_t PresenceSessionConnectionInfo.description.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint);
  v2 = objc_msgSend(v1, sel_description);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD000000000000028;
}

uint64_t static PresenceSessionConnectionInfo.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall PresenceSessionConnectionInfo.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint);
  v4 = (id)MEMORY[0x1AF4480F4](0x746E696F70646E65, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

}

id PresenceSessionConnectionInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  type metadata accessor for NSXPCListenerEndpoint();
  v5 = (char *)v4;
  v6 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v6)
  {
    *(_QWORD *)&v5[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v6;

    v9.receiver = v5;
    v9.super_class = v2;
    v7 = objc_msgSendSuper2(&v9, sel_init);

  }
  else
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v7;
}

id PresenceSessionConnectionInfo.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  id v5;
  objc_super v7;

  type metadata accessor for NSXPCListenerEndpoint();
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    *(_QWORD *)&v3[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v4;

    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for PresenceSessionConnectionInfo();
    v5 = objc_msgSendSuper2(&v7, sel_init);

  }
  else
  {

    type metadata accessor for PresenceSessionConnectionInfo();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

unint64_t type metadata accessor for NSXPCListenerEndpoint()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSXPCListenerEndpoint;
  if (!lazy cache variable for type metadata for NSXPCListenerEndpoint)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSXPCListenerEndpoint);
  }
  return result;
}

id PresenceSessionConnectionInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PresenceSessionConnectionInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PresenceSessionConnectionInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceSessionConnectionInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PresenceSessionConnectionInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PresenceSessionConnectionInfo.__allocating_init(endpoint:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PresenceSessionConnectionInfo.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PresenceSessionConnectionInfo.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

id PresenceSessionParticipant.id.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id);
}

id PresenceSessionParticipant.handle.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle);
}

uint64_t PresenceSessionParticipant.isCurrentDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice);
}

id PresenceSessionParticipant.__allocating_init(id:handle:isCurrentDevice:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_class *v4;
  objc_class *v5;
  _BYTE *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  objc_super v15;

  v5 = v4;
  v10 = objc_allocWithZone(v5);
  *(NSUUID *)&v10[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = UUID._bridgeToObjectiveC()();
  v11 = MEMORY[0x1AF4480F4](a2, a3);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v11;
  v10[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = a4;

  v15.receiver = v10;
  v15.super_class = v5;
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  return v12;
}

id PresenceSessionParticipant.init(id:handle:isCurrentDevice:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  _BYTE *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  objc_super v14;

  v9 = v4;
  *(NSUUID *)&v9[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = UUID._bridgeToObjectiveC()();
  v10 = MEMORY[0x1AF4480F4](a2, a3);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v9[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v10;
  v9[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = a4;

  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for PresenceSessionParticipant();
  v11 = objc_msgSendSuper2(&v14, sel_init);
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  return v11;
}

uint64_t type metadata accessor for PresenceSessionParticipant()
{
  return objc_opt_self();
}

uint64_t PresenceSessionParticipant.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;

  v1 = v0;
  _StringGuts.grow(_:)(67);
  v2._countAndFlagsBits = 0xD00000000000001FLL;
  v2._object = (void *)0x80000001ACF7DBC0;
  String.append(_:)(v2);
  v3 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id);
  v4 = objc_msgSend(v3, sel_description);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x656C646E6168202CLL;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  v10 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle);
  v11 = objc_msgSend(v10, sel_description);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease();
  v16._object = (void *)0x80000001ACF7DBE0;
  v16._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v16);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice))
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice))
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 41;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 0;
}

uint64_t static PresenceSessionParticipant.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall PresenceSessionParticipant.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id);
  v4 = (void *)MEMORY[0x1AF4480F4](25705, 0xE200000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle);
  v6 = (void *)MEMORY[0x1AF4480F4](0x656C646E6168, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice);
  v8 = (id)MEMORY[0x1AF4480F4](0x6E65727275437369, 0xEF65636976654474);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v7, v8);

}

id PresenceSessionParticipant.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PresenceSessionParticipant.init(coder:)(a1);
}

id PresenceSessionParticipant.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  objc_super v14;

  v2 = v1;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v5)
    goto LABEL_7;
  v6 = (void *)v5;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v7)
  {
LABEL_6:

LABEL_7:
    type metadata accessor for PresenceSessionParticipant();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v8 = (void *)v7;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v9 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (!v9)
  {

    v6 = v8;
    goto LABEL_6;
  }
  v10 = v9;
  *(_QWORD *)&v4[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = v6;
  *(_QWORD *)&v4[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v8;
  v11 = objc_msgSend(v9, sel_BOOLValue);

  v4[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = v11;
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for PresenceSessionParticipant();
  v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

id PresenceSessionParticipant.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PresenceSessionParticipant.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PresenceSessionParticipant.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceSessionParticipant();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PresenceSessionParticipant()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PresenceSessionParticipant.__allocating_init(id:handle:isCurrentDevice:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of PresenceSessionParticipant.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PresenceSessionParticipant.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t AttachmentLedgerClient.Config.participantIDSalt.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedgerClient.Config.createTopicMaxAttempts.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

double AttachmentLedgerClient.Config.createTopicRpcRetryIntervalSeconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

CopresenceCore::AttachmentLedgerClient::Config __swiftcall AttachmentLedgerClient.Config.init(participantIDSalt:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:)(Swift::String participantIDSalt, Swift::Int createTopicMaxAttempts, Swift::Double createTopicRpcRetryIntervalSeconds)
{
  uint64_t v3;
  CopresenceCore::AttachmentLedgerClient::Config result;

  *(Swift::String *)v3 = participantIDSalt;
  *(_QWORD *)(v3 + 16) = createTopicMaxAttempts;
  *(Swift::Double *)(v3 + 24) = createTopicRpcRetryIntervalSeconds;
  result.participantIDSalt = participantIDSalt;
  result.createTopicRpcRetryIntervalSeconds = createTopicRpcRetryIntervalSeconds;
  result.createTopicMaxAttempts = createTopicMaxAttempts;
  return result;
}

uint64_t AttachmentLedgerClient.config.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  *a1 = v1[3];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedgerClient.serviceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + 56, a1);
}

uint64_t AttachmentLedgerClient.localParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t AttachmentLedgerClient.__allocating_init(serviceProvider:config:localParticipantID:)(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v6 = swift_allocObject();
  v10 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of BackgroundSessionManagerDataSource(a1, v6 + 56);
  *(_OWORD *)(v6 + 24) = v10;
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 96) = a3;
  return v6;
}

uint64_t AttachmentLedgerClient.init(serviceProvider:config:localParticipantID:)(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v8 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3 + 56);
  *(_OWORD *)(v3 + 24) = v8;
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 96) = a3;
  return v3;
}

uint64_t AttachmentLedgerClient.__allocating_init(client:config:localParticipantID:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v11 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  v8 = type metadata accessor for PluginAttachmentLedgerServiceProvider();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  v15[3] = v8;
  v15[4] = &protocol witness table for PluginAttachmentLedgerServiceProvider;
  v15[0] = v9;
  v12 = v11;
  v13 = v6;
  v14 = v7;
  return (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t))(v3 + 136))(v15, &v12, a3);
}

uint64_t AttachmentLedgerClient.updateVirtualParticipant(_:localParticipantID:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[10];
  v6 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v5);
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v6 + 56))(objc_msgSend(a1, sel_identifier), a2, v5, v6);
}

uint64_t AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t TopicRequest;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v19 = a1;
  v20 = a2;
  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v5 = *(_QWORD *)(TopicRequest - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](TopicRequest);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = v2[10];
  v13 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v12);
  *v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v14 = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AttachmentLedger_CreateTopicRequest);
    v16 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v17 = (v6 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v3;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v18 + v16, type metadata accessor for AttachmentLedger_CreateTopicRequest);
    *(_QWORD *)(v18 + v17) = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic.Configuration?, Error>);
    swift_allocObject();
    swift_retain();
    return Future.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(void (*a1)(__int128 *), void (*a2)(__int128 *), _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t TopicRequest;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(__int128 *);
  uint64_t v26;
  void (*v27)(__int128 *);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (**v32)(__int128 *);
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v11 = *(_QWORD *)(TopicRequest - 8);
  MEMORY[0x1E0C80A78](TopicRequest);
  v40 = v12;
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a4;
  v14 = a4[1];
  swift_beginAccess();
  v16 = a3[2];
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_retain();
  swift_bridgeObjectRelease();
  v20 = swift_bridgeObjectRelease();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v19 + 288))(&v41, v20);
  v21 = v41;
  v22 = v44;
  if (!(v44 >> 62))
    goto LABEL_12;
  if (v44 >> 62 != 1)
  {
    if (v44 != 0x8000000000000000
      || (unint64_t)v42 | *((_QWORD *)&v41 + 1) | (unint64_t)v41 | *((_QWORD *)&v42 + 1) | v43 | v45)
    {
      v37 = v43 | v45;
      v38 = v42 | *((_QWORD *)&v41 + 1);
      v39 = *((_QWORD *)&v42 + 1);
      outlined consume of PluginAttachmentLedgerTopic.State(v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1), v43, v44);
      if (v22 != 0x8000000000000000 || v21 != 1 || v38 | v39 | v37)
        goto LABEL_6;
LABEL_13:
      v43 = 0;
      v41 = 0u;
      v42 = 0u;
      LOWORD(v44) = 1;
      a1(&v41);
      return swift_release();
    }
LABEL_12:
    outlined consume of PluginAttachmentLedgerTopic.State(v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1), v43, v44);
    goto LABEL_13;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1), v43, v44);
LABEL_6:
  swift_release();
LABEL_8:
  v23 = a3[10];
  v24 = a3[11];
  __swift_project_boxed_opaque_existential_1(a3 + 7, v23);
  v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v24 + 24))(a4, v23, v24);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)a4, (uint64_t)v13, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  v25 = a1;
  v26 = *(unsigned __int8 *)(v11 + 80);
  v37 = (uint64_t)a3;
  v38 = a5;
  v27 = a2;
  v28 = (v26 + 16) & ~v26;
  v29 = (uint64_t)v13;
  v30 = (v40 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject();
  outlined init with take of ActivitySession.DomainAssertionWrapper(v29, v31 + v28, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  v32 = (void (**)(__int128 *))(v31 + v30);
  *v32 = v25;
  v32[1] = v27;
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)a4, v29, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  v33 = (v26 + 48) & ~v26;
  v34 = (_QWORD *)swift_allocObject();
  v35 = v37;
  v34[2] = v38;
  v34[3] = v35;
  v34[4] = v25;
  v34[5] = v27;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v29, (uint64_t)v34 + v33, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  swift_retain_n();
  swift_retain();
  specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), v31, (uint64_t)partial apply for closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), (uint64_t)v34);
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1, NSObject *a2, void (*a3)(_BYTE *), uint64_t a4)
{
  uint64_t TopicResponse;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Topic;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  os_log_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t TopicRequest;
  uint64_t v71;
  uint64_t v72;
  os_log_t v73;
  unsigned int *v74;
  _QWORD *v75;
  uint64_t v76;
  void (*v77)(_BYTE *);
  uint64_t v78;
  _BYTE v79[40];
  __int16 v80;

  v76 = a4;
  v77 = a3;
  v73 = a2;
  TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  MEMORY[0x1E0C80A78](TopicResponse);
  v7 = (uint64_t *)((char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicRequest?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v71 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v72 = (uint64_t)&v65 - v11;
  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v12 = *(_QWORD *)(TopicRequest - 8);
  v13 = MEMORY[0x1E0C80A78](TopicRequest);
  v68 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v69 = (uint64_t)&v65 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v65 - v17;
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v20 = *(_QWORD *)(Topic - 8);
  v21 = MEMORY[0x1E0C80A78](Topic);
  v74 = (unsigned int *)((char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v65 - v24;
  MEMORY[0x1E0C80A78](v23);
  v75 = (uint64_t *)((char *)&v65 - v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v65 - v31;
  if (*(_BYTE *)(a1 + 8) == 1 && (unint64_t)(*(_QWORD *)a1 - 1) <= 1)
  {
    v33 = a1 + *(int *)(TopicResponse + 28);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)&v65 - v31, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
    v35 = v34(v32, 1, Topic);
    outlined destroy of UUID?((uint64_t)v32, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    if (v35 == 1)
    {
      v36 = 0;
      v37 = 0uLL;
      v38 = 0uLL;
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
      if (v34(v30, 1, Topic) == 1)
      {
        v46 = v75;
        *v75 = 0;
        v46[1] = 0;
        *((_DWORD *)v46 + 4) = 0;
        UnknownStorage.init()();
        outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
      }
      else
      {
        v46 = v75;
        outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t)v75, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      }
      v47 = (uint64_t)v18;
      if (one-time initialization token for attachmentLedgerService != -1)
        swift_once();
      v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Log.attachmentLedgerService);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v46, (uint64_t)v25, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v73, (uint64_t)v18, type metadata accessor for AttachmentLedger_CreateTopicRequest);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, (os_log_type_t)v50))
      {
        v67 = v50;
        v73 = v49;
        v51 = swift_slowAlloc();
        v66 = swift_slowAlloc();
        *(_QWORD *)v79 = v66;
        *(_DWORD *)v51 = 136315394;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
        v52 = Message.debugDescription.getter();
        v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
        v54 = (uint8_t *)v51;
        *(_WORD *)(v51 + 12) = 2080;
        v55 = v72;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v47, v72, type metadata accessor for AttachmentLedger_CreateTopicRequest);
        v56 = TopicRequest;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v55, 0, 1, TopicRequest);
        v57 = v71;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v55, v71, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicRequest?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v57, 1, v56) == 1)
        {
          v58 = 0xE300000000000000;
          v59 = 7104878;
        }
        else
        {
          v60 = v69;
          outlined init with take of ActivitySession.DomainAssertionWrapper(v57, v69, type metadata accessor for AttachmentLedger_CreateTopicRequest);
          outlined init with copy of ActivitySession.DomainAssertionWrapper(v60, v68, type metadata accessor for AttachmentLedger_CreateTopicRequest);
          v59 = String.init<A>(reflecting:)();
          v58 = v61;
          outlined destroy of ActivitySession.DomainAssertionWrapper(v60, type metadata accessor for AttachmentLedger_CreateTopicRequest);
        }
        outlined destroy of UUID?(v55, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicRequest?);
        v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v58, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v47, type metadata accessor for AttachmentLedger_CreateTopicRequest);
        v62 = v73;
        _os_log_impl(&dword_1ACCCC000, v73, (os_log_type_t)v67, "[CreateTopic] Received server-specified topic-config, config=%s for request=%s", v54, 0x16u);
        v63 = v66;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v63, -1, -1);
        MEMORY[0x1AF44981C](v54, -1, -1);

        v46 = v75;
      }
      else
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_CreateTopicRequest);

      }
      v64 = v74;
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v46, (uint64_t)v74, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      PluginAttachmentLedgerTopic.Configuration.init(proto:)(v64, (uint64_t)v79);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v46, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      v37 = *(_OWORD *)v79;
      v38 = *(_OWORD *)&v79[16];
      v36 = *(_QWORD *)&v79[32];
    }
    *(_OWORD *)v79 = v37;
    *(_OWORD *)&v79[16] = v38;
    *(_QWORD *)&v79[32] = v36;
    v80 = v35 == 1;
    v77(v79);
  }
  else
  {
    if (one-time initialization token for attachmentLedgerService != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Log.attachmentLedgerService);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_CreateTopicResponse);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v42 = 134217984;
      v43 = *v7;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_CreateTopicResponse);
      *(_QWORD *)v79 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v40, v41, "[CreateTopic] Failed, unexpected response-status, code=%ld", v42, 0xCu);
      MEMORY[0x1AF44981C](v42, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_CreateTopicResponse);
    }

    type metadata accessor for AttachmentLedgerTopicError(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedgerTopicError and conformance AttachmentLedgerTopicError, type metadata accessor for AttachmentLedgerTopicError, (uint64_t)&protocol conformance descriptor for AttachmentLedgerTopicError);
    v44 = (void *)swift_allocError();
    *v45 = 0xD000000000000017;
    v45[1] = 0x80000001ACF7DCF0;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)v79 = v44;
    memset(&v79[8], 0, 32);
    v80 = 256;
    v77(v79);

  }
}

void closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TopicRequest;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t *);
  void *v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  double v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (**v60)(uint64_t *);
  void *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(uint64_t *);
  void *v87;
  void (*v88)(uint64_t *);
  uint64_t v89;
  uint64_t v90;
  uint64_t aBlock;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v76 = a6;
  v87 = a3;
  v88 = (void (*)(uint64_t *))a5;
  v86 = a4;
  v89 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v83 = *(_QWORD *)(v7 - 8);
  v84 = v7;
  MEMORY[0x1E0C80A78](v7);
  v82 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v80 = *(_QWORD *)(v9 - 8);
  v81 = v9;
  MEMORY[0x1E0C80A78](v9);
  v79 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v73 = *(_QWORD *)(TopicRequest - 8);
  MEMORY[0x1E0C80A78](TopicRequest);
  v74 = v12;
  v75 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for DispatchTimeInterval();
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v70 = (uint64_t *)((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v78 = type metadata accessor for DispatchTime();
  v69 = *(_QWORD *)(v78 - 8);
  v14 = MEMORY[0x1E0C80A78](v78);
  v85 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v77 = (char *)&v66 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v66 - v21;
  v23 = type metadata accessor for PluginRpcError();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v66 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v66 - v31;
  if (one-time initialization token for attachmentLedgerService != -1)
    swift_once();
  v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Log.attachmentLedgerService);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v68 = a1;
    v36 = (uint8_t *)swift_slowAlloc();
    v67 = swift_slowAlloc();
    aBlock = v67;
    *(_DWORD *)v36 = 136315138;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v32, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v23);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v20, &demangling cache variable for type metadata for PluginRpcError?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v20, 1, v23) == 1)
    {
      v37 = 0xE300000000000000;
      v38 = 7104878;
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v20, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      v38 = String.init<A>(reflecting:)();
      v37 = v41;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    }
    v40 = v87;
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for PluginRpcError?);
    v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v37, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    _os_log_impl(&dword_1ACCCC000, v34, v35, "Failed to CreateTopic due to error: %s", v36, 0xCu);
    v42 = v67;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v42, -1, -1);
    MEMORY[0x1AF44981C](v36, -1, -1);

    v39 = v88;
    a1 = v68;
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);

    v40 = v87;
    v39 = v88;
  }
  if (*((_QWORD *)v40 + 5) == v89)
  {
    type metadata accessor for AttachmentLedgerTopicError(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedgerTopicError and conformance AttachmentLedgerTopicError, type metadata accessor for AttachmentLedgerTopicError, (uint64_t)&protocol conformance descriptor for AttachmentLedgerTopicError);
    v43 = (void *)swift_allocError();
    outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v44, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    swift_storeEnumTagMultiPayload();
    aBlock = (uint64_t)v43;
    v92 = 0u;
    v93 = 0u;
    LOWORD(v94) = 256;
    v86(&aBlock);

    return;
  }
  v45 = *((_QWORD *)v40 + 10);
  v46 = *((_QWORD *)v40 + 11);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v40 + 7, v45);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
  v48 = v85;
  static DispatchTime.now()();
  v49 = *((double *)v40 + 6);
  if ((~*(_QWORD *)&v49 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v49 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v49 < 9.22337204e18)
  {
    v50 = v70;
    *v70 = (uint64_t)v49;
    v51 = *MEMORY[0x1E0DEF4A0];
    v87 = (void *)v47;
    v52 = v71;
    v53 = v72;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v71 + 104))(v50, v51, v72);
    v54 = v77;
    MEMORY[0x1AF447E78](v48, v50);
    (*(void (**)(_QWORD *, uint64_t))(v52 + 8))(v50, v53);
    v88 = *(void (**)(uint64_t *))(v69 + 8);
    v55 = v78;
    ((void (*)(char *, uint64_t))v88)(v48, v78);
    v56 = v75;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v76, v75, type metadata accessor for AttachmentLedger_CreateTopicRequest);
    v57 = (*(unsigned __int8 *)(v73 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    v58 = (v74 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
    v59 = swift_allocObject();
    *(_QWORD *)(v59 + 16) = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper(v56, v59 + v57, type metadata accessor for AttachmentLedger_CreateTopicRequest);
    *(_QWORD *)(v59 + v58) = v89;
    v60 = (void (**)(uint64_t *))(v59 + ((v58 + 15) & 0xFFFFFFFFFFFFFFF8));
    *v60 = v86;
    v60[1] = v39;
    *((_QWORD *)&v93 + 1) = partial apply for closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:);
    v94 = v59;
    aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v92 = 1107296256;
    *((_QWORD *)&v92 + 1) = thunk for @escaping @callee_guaranteed () -> ();
    *(_QWORD *)&v93 = &block_descriptor_0;
    v61 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v62 = v79;
    static DispatchQoS.unspecified.getter();
    v90 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v63 = v82;
    v64 = v84;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v65 = v87;
    MEMORY[0x1AF4485D4](v54, v62, v63, v61);
    _Block_release(v61);

    (*(void (**)(char *, uint64_t))(v83 + 8))(v63, v64);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v81);
    ((void (*)(char *, uint64_t))v88)(v54, v55);
    swift_release();
    return;
  }
LABEL_17:
  __break(1u);
}

uint64_t closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;

  if (__OFADD__(a3, 1))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 152))(a2, a3 + 1);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a4;
    *(_QWORD *)(v7 + 24) = a5;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a4;
    *(_QWORD *)(v8 + 24) = a5;
    swift_retain_n();
    specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), v7, (uint64_t)partial apply for closure #2 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), v8);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TopicRequest;
  uint64_t v11;
  _BYTE *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  MEMORY[0x1E0C80A78](TopicRequest);
  v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = a1;
  v26 = a2;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, v13, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
  static Message.with(_:)();
  v15 = *(_QWORD *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 80));
  v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v15, v14);
  v19 = v5;
  v20 = a1;
  v21 = a2;
  v22 = v12;
  v23 = a3;
  v24 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
  OS_dispatch_queue.sync<A>(execute:)();

  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  return v27;
}

uint64_t closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t TopicRequest;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t *v22;
  __int128 v23[2];

  v22 = a7;
  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v14 = *(_QWORD *)(TopicRequest - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](TopicRequest);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a4, (uint64_t)v16, v17);
  outlined init with copy of UserNotificationCenter(a5, (uint64_t)v23);
  v18 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a1;
  v20[3] = a2;
  v20[4] = a3;
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v16, (uint64_t)v20 + v18, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  outlined init with take of BackgroundSessionManagerDataSource(v23, (uint64_t)v20 + v19);
  *(_QWORD *)((char *)v20 + ((v19 + 47) & 0xFFFFFFFFFFFFFFF8)) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = Future.init(_:)();
  *v22 = result;
  return result;
}

uint64_t closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(void (*a1)(__int128 *), uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(__int128 *);
  uint64_t v38;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_beginAccess();
  v16 = a3[2];
  v17 = *(_QWORD *)(v16 + 16);
  swift_retain();
  if (!v17)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v37 = a1;
  v20 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v18);
  swift_retain();
  swift_bridgeObjectRelease();
  v21 = swift_bridgeObjectRelease();
  v38 = v20;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v20 + 288))(&v40, v21);
  v22 = v40;
  v23 = v42;
  v24 = v44;
  if (!(v44 >> 62))
    goto LABEL_11;
  if (v44 >> 62 == 1)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v40, *((uint64_t *)&v40 + 1), v41, v42, v43, v44);
LABEL_6:
    swift_release();
LABEL_8:
    (*(void (**)(uint64_t, _QWORD))(*a3 + 152))(a6, 0);
    outlined init with copy of UserNotificationCenter(a7, (uint64_t)&v40);
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = a3;
    v25[3] = a4;
    v25[4] = a5;
    v25[5] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<PluginAttachmentLedgerTopic, Error>) -> ();
    v25[6] = v15;
    outlined init with take of BackgroundSessionManagerDataSource(&v40, (uint64_t)(v25 + 7));
    v25[12] = a8;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<PluginAttachmentLedgerTopic, Error>) -> ();
    *(_QWORD *)(v26 + 24) = v15;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:), (uint64_t)v25, (uint64_t)partial apply for closure #2 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:), v26);
    swift_release();
    swift_release();
    return swift_release();
  }
  if (v44 != 0x8000000000000000 || v41 | *((_QWORD *)&v40 + 1) | (unint64_t)v40 | v42 | v43 | v45)
  {
    v35 = v43 | v45;
    v36 = v41 | *((_QWORD *)&v40 + 1);
    outlined consume of PluginAttachmentLedgerTopic.State(v40, *((uint64_t *)&v40 + 1), v41, v42, v43, v44);
    if (v24 != 0x8000000000000000 || v22 != 1 || v36 | v23 | v35)
      goto LABEL_6;
  }
  else
  {
LABEL_11:
    outlined consume of PluginAttachmentLedgerTopic.State(v40, *((uint64_t *)&v40 + 1), v41, v42, v43, v44);
  }
  swift_release();
  if (one-time initialization token for attachmentLedgerService != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.attachmentLedgerService);
  swift_retain_n();
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    *(_QWORD *)&v40 = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = PluginAttachmentLedgerTopic.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v29, v30, "[CreateTopic] Topic already exists. Returning %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v32, -1, -1);
    MEMORY[0x1AF44981C](v31, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *(_QWORD *)&v40 = v38;
  BYTE8(v40) = 0;
  swift_retain();
  v37(&v40);
  return swift_release_n();
}

uint64_t closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(_QWORD, _QWORD), uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void (*v42)(_QWORD, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51[5];
  _QWORD v52[5];

  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v18 = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  v19 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(v19 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, (uint64_t)a4);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v41 = a8;
  v42 = a5;
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  v23 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 288))(&v44, v23);
  v24 = v44;
  v25 = v49;
  if (!(v49 >> 62))
    goto LABEL_14;
  if (v49 >> 62 == 1)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v44, v45, v46, v47, v48, v49);
LABEL_6:
    swift_release();
    a8 = v41;
    a5 = v42;
LABEL_8:
    if ((v18 & 1) != 0)
    {
      v16 = 10.0;
      v14 = 1.0;
      v15 = 3;
      v13 = 2;
      v17 = 1.0;
    }
    outlined init with copy of UserNotificationCenter(a2 + 56, (uint64_t)&v44);
    outlined init with copy of UserNotificationCenter(a7, (uint64_t)v52);
    v51[0] = v13;
    v51[1] = v14;
    v51[2] = v15;
    v51[3] = v17;
    v51[4] = v16;
    v26 = *(_QWORD *)(a2 + 96);
    type metadata accessor for PluginAttachmentLedgerTopic(0);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a3, a4, (uint64_t)&v44, (uint64_t)v52, v51, v26, a8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52[0] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, a3, (uint64_t)a4, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a2 + 16) = v52[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_11;
  }
  if (v49 != 0x8000000000000000 || v46 | v45 | v44 | v47 | v48 | v50)
  {
    v38 = v48 | v50;
    v39 = v46 | v45;
    v40 = v47;
    outlined consume of PluginAttachmentLedgerTopic.State(v44, v45, v46, v47, v48, v49);
    if (v25 != 0x8000000000000000 || v24 != 1 || v39 | v40 | v38)
      goto LABEL_6;
  }
  else
  {
LABEL_14:
    outlined consume of PluginAttachmentLedgerTopic.State(v44, v45, v46, v47, v48, v49);
  }
  if (one-time initialization token for attachmentLedgerService != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.attachmentLedgerService);
  swift_retain_n();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v44 = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = PluginAttachmentLedgerTopic.description.getter();
    v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v32, v33, "[CreateTopic] Topic already exists. Returning %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v35, -1, -1);
    MEMORY[0x1AF44981C](v34, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  a5 = v42;
LABEL_11:
  v29 = swift_retain();
  a5(v29, 0);
  return swift_release_n();
}

uint64_t AttachmentLedgerClient.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  return v0;
}

uint64_t AttachmentLedgerClient.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  return swift_deallocClassInstance();
}

uint64_t sub_1ACCFBEC0()
{
  uint64_t v0;
  uint64_t TopicRequest;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(TopicRequest - 8) + 80);
  v3 = (v2 + 24) & ~v2;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + v3 + *(int *)(TopicRequest + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(void (*a1)(__int128 *), void (*a2)(__int128 *))
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(a1, a2, *(_QWORD **)(v2 + 16), (uint64_t *)(v2 + v6), *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t partial apply for closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t type metadata accessor for AttachmentLedgerClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for AttachmentLedgerClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AttachmentLedgerClient.__allocating_init(serviceProvider:config:localParticipantID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of AttachmentLedgerClient.updateVirtualParticipant(_:localParticipantID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t initializeBufferWithCopyOfBuffer for AttachmentLedgerClient.Config(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for AttachmentLedgerClient.Config(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedgerClient.Config(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for AttachmentLedgerClient.Config(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerClient.Config(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerClient.Config(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerClient.Config()
{
  return &type metadata for AttachmentLedgerClient.Config;
}

uint64_t sub_1ACCFC234()
{
  uint64_t v0;
  uint64_t TopicRequest;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v2 = *(_QWORD *)(TopicRequest - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(TopicRequest + 24);
  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v4);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(void (*a1)(__int128 *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + v6, v2 + v7, *(_QWORD *)(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<PluginAttachmentLedgerTopic, Error>) -> ()(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1ACCFC3B0()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(_QWORD, _QWORD))(v1 + 40), *(_QWORD *)(v1 + 48), v1 + 56, *(void **)(v1 + 96));
}

uint64_t sub_1ACCFC40C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(*a1, 1);
}

uint64_t outlined consume of PluginAttachmentLedgerTopic.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a6 >> 62 == 1)
    return swift_bridgeObjectRelease();
  if (!(a6 >> 62))
    return swift_release();
  return result;
}

uint64_t sub_1ACCFC47C()
{
  uint64_t v0;
  uint64_t TopicRequest;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(TopicRequest - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(TopicRequest + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(a1, (v1 + v4), *(void (**)(_BYTE *))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1ACCFC57C()
{
  uint64_t v0;
  uint64_t TopicRequest;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(TopicRequest - 8) + 80);
  v3 = (v2 + 48) & ~v2;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + v3 + *(int *)(TopicRequest + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8) + 80);
  closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t *))(v1 + 32), *(void (**)(uint64_t *))(v1 + 40), v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_1ACCFC664()
{
  uint64_t v0;
  uint64_t TopicRequest;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(TopicRequest - 8) + 80);
  v3 = (v2 + 24) & ~v2;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + v3 + *(int *)(TopicRequest + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  uint64_t v3;
  char v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;
  char v9;
  char v10;

  v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v8 = v3;
  v9 = v4;
  v10 = 0;
  return v2(v7);
}

void partial apply for closure #2 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(void **a1)
{
  uint64_t v1;
  void (*v2)(void **);
  void *v3;
  id v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;

  v2 = *(void (**)(void **))(v1 + 16);
  v3 = *a1;
  v5 = v3;
  v6 = 0u;
  v7 = 0u;
  v8 = 256;
  v4 = v3;
  v2(&v5);

}

uint64_t one-time initialization function for $traceID()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<UUID?>);
  swift_allocObject();
  result = TaskLocal.init(wrappedValue:)();
  static AsyncSerialQueue.$traceID = result;
  return result;
}

uint64_t *AsyncSerialQueue.$traceID.unsafeMutableAddressor()
{
  if (one-time initialization token for $traceID != -1)
    swift_once();
  return &static AsyncSerialQueue.$traceID;
}

uint64_t static AsyncSerialQueue.$traceID.getter()
{
  if (one-time initialization token for $traceID != -1)
    swift_once();
  return swift_retain();
}

uint64_t static AsyncSerialQueue.traceID.getter()
{
  if (one-time initialization token for $traceID != -1)
    swift_once();
  return TaskLocal.get()();
}

uint64_t AsyncSerialQueue.traceID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AsyncSerialQueue.init(priority:bufferingPolicy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v58 = a1;
  v59 = a2;
  v55 = a3;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v53 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v56 - 8);
  v6 = MEMORY[0x1E0C80A78](v56);
  v47 = v7;
  v48 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v42 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>);
  v49 = *(_QWORD *)(v51 - 8);
  v14 = MEMORY[0x1E0C80A78](v51);
  v44 = v15;
  v45 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v42 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v42 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
  v50 = v11;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v52 = v10;
  v27 = v10;
  v28 = v55;
  v26(v13, v59, v27);
  v60 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for @Sendable ());
  v57 = v17;
  AsyncStream.init(_:bufferingPolicy:_:)();
  UUID.init()();
  v54 = v5;
  v29 = *(void (**)(uint64_t, char *))(v5 + 16);
  v30 = v56;
  v29(v28, v9);
  v46 = v23;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v21, &demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v21, 1, v24);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v32 = type metadata accessor for AsyncSerialQueue();
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v28 + *(int *)(v32 + 20), v21, v24);
    v33 = v53;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v58, v53, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v34 = v48;
    v43 = v9;
    ((void (*)(char *, char *, uint64_t))v29)(v48, v9, v30);
    v35 = v49;
    v36 = v45;
    v37 = v51;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v45, v57, v51);
    v38 = v54;
    v39 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    v40 = (v47 + *(unsigned __int8 *)(v35 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = 0;
    *(_QWORD *)(v41 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v41 + v39, v34, v30);
    (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v41 + v40, v36, v37);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v33, (uint64_t)&async function pointer to partial apply for closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:), v41);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v59, v52);
    outlined destroy of UUID?(v58, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v43, v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v57, v37);
    return outlined destroy of UUID?((uint64_t)v46, &demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  }
  return result;
}

uint64_t closure #1 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AsyncSerialQueue.init(priority:bufferingPolicy:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AsyncSerialQueue;
  if (!type metadata singleton initialization cache for AsyncSerialQueue)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (one-time initialization token for $traceID != -1)
    swift_once();
  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  v6 = swift_task_alloc();
  v0[6] = v6;
  *(_QWORD *)(v6 + 16) = v2;
  v7 = (_QWORD *)swift_task_alloc();
  v0[7] = v7;
  *v7 = v0;
  v7[1] = closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  outlined destroy of UUID?(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1ACCFD0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>)
                                      - 8)
                          + 80);
  v8 = (v6 + v7) & ~v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + v8;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(a1, v9, v10, v11, v12);
}

uint64_t closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Iterator);
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>);
  AsyncStream.makeAsyncIterator()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(v0 + 16);
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 24);
    v4 = (uint64_t (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v2;
    *v2 = v0;
    v2[1] = closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
    return v4();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *v0;
  swift_task_dealloc();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 64) = v4;
  *v4 = v3;
  v4[1] = closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  type metadata accessor for AnyCancellable();
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  return swift_task_create();
}

uint64_t AsyncSerialQueue.perform(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(v13 + 20), v5);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v16[0] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  v16[1] = v14;
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ()
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ()))(a1, v4);
}

uint64_t AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
                                                                           + async function pointer to withUnsafeContinuation<A>(isolation:_:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v5(*(_QWORD *)(v0 + 16), 0, 0, (uint64_t)partial apply for closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:), v1);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:)
                                                                           + async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v5(*(_QWORD *)(v0 + 16), 0, 0, (uint64_t)partial apply for closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:), v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v20 = a5;
  v21 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v20;
  v16[3] = a1;
  v16[4] = a3;
  v16[5] = a4;
  v17 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21 + *(int *)(v17 + 20), v8);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v18 + 24) = v16;
  v22 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v23 = v18;
  swift_retain();
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v20 = a5;
  v21 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v20;
  v16[3] = a1;
  v16[4] = a3;
  v16[5] = a4;
  v17 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21 + *(int *)(v17 + 20), v8);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v18 + 24) = v16;
  v22 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v23 = v18;
  swift_retain();
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(a1, v1[3], v1[4], v1[5], v1[2]);
}

{
  uint64_t *v1;

  return closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v6 = swift_task_alloc();
  v4[4] = v6;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v4[5] = v7;
  *v7 = v4;
  v7[1] = closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(v6);
}

{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4[3] = a1;
  v4[4] = a4;
  v4[5] = *(_QWORD *)(a4 - 8);
  v6 = swift_task_alloc();
  v4[6] = v6;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v4[7] = v7;
  *v7 = v4;
  v7[1] = closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(v6);
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 32))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 64) + 40), *(_QWORD *)(v0 + 32));
  swift_continuation_resume();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 32))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 64) + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_continuation_throwingResume();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 64);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2, v0 + 16, v1);
  swift_continuation_throwingResumeWithError();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withUnsafeContinuation<A>(isolation:_:);
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withUnsafeThrowingContinuation<A>(isolation:_:);
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

BOOL static AsyncSerialQueue.Condition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AsyncSerialQueue.Condition.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AsyncSerialQueue.Condition.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AsyncSerialQueue.Condition(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Void __swiftcall AsyncSerialQueue.precondition(_:)(CopresenceCore::AsyncSerialQueue::Condition a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v2 = (_BYTE *)a1;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  v6 = MEMORY[0x1E0C80A78](v43);
  v42 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v41 = (char *)&v38 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v38 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v38 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v38 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v40 = (char *)&v38 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v38 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v38 - v23;
  v25 = type metadata accessor for AsyncSerialQueue();
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v38 - v29;
  if ((*v2 & 1) != 0)
  {
    outlined init with copy of AsyncSerialQueue(v1, (uint64_t)v28);
    if (one-time initialization token for $traceID != -1)
      swift_once();
    TaskLocal.get()();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v14, v28, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v14, 0, 1, v3);
    v22 = v42;
    v1 = (uint64_t)&v42[*(int *)(v43 + 48)];
    v24 = (char *)&demangling cache variable for type metadata for UUID?;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v17, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v31((uint64_t)v22, 1, v3) == 1)
    {
      outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of AsyncSerialQueue((uint64_t)v28);
      if (v31(v1, 1, v3) == 1)
      {
        outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        __break(1u);
        goto LABEL_7;
      }
    }
    else
    {
      v30 = v38;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v31(v1, 1, v3) != 1)
        goto LABEL_18;
      outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of AsyncSerialQueue((uint64_t)v28);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v3);
    }
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for (UUID?, UUID?));
    return;
  }
LABEL_7:
  outlined init with copy of AsyncSerialQueue(v1, (uint64_t)v30);
  if (one-time initialization token for $traceID != -1)
    swift_once();
  TaskLocal.get()();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v22, v30, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v22, 0, 1, v3);
  v17 = v41;
  v32 = (uint64_t)&v41[*(int *)(v43 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, v32, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v28 = *(char **)(v4 + 48);
  v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v17, 1, v3);
  v14 = v40;
  if (v33 == 1)
  {
    outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of AsyncSerialQueue((uint64_t)v30);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v28)(v32, 1, v3) == 1)
    {
      outlined destroy of UUID?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      return;
    }
    goto LABEL_22;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v17, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v28)(v32, 1, v3) == 1)
  {
LABEL_21:
    outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of AsyncSerialQueue((uint64_t)v30);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
LABEL_22:
    outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for (UUID?, UUID?));
    __break(1u);
    return;
  }
  v34 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v39, v32, v3);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v1 = dispatch thunk of static Equatable.== infix(_:_:)();
  v4 = *(_QWORD *)(v4 + 8);
  ((void (*)(char *, uint64_t))v4)(v34, v3);
  outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of AsyncSerialQueue((uint64_t)v30);
  ((void (*)(char *, uint64_t))v4)(v14, v3);
  outlined destroy of UUID?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((v1 & 1) != 0)
    return;
  __break(1u);
LABEL_18:
  v35 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v39, v1, v3);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37 = *(void (**)(char *, uint64_t))(v4 + 8);
  v37(v35, v3);
  v24 = (char *)&demangling cache variable for type metadata for UUID?;
  outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of AsyncSerialQueue((uint64_t)v28);
  v37(v30, v3);
  outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((v36 & 1) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
}

uint64_t outlined init with copy of AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AsyncSerialQueue(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0CB09D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0CB09F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition;
  if (!lazy protocol witness table cache variable for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AsyncSerialQueue.Condition, &type metadata for AsyncSerialQueue.Condition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncSerialQueue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncSerialQueue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACCFF058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AsyncSerialQueue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACCFF0DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AsyncSerialQueue()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<@Sendable ()>.Continuation();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for AsyncStream<@Sendable ()>.Continuation()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for @Sendable ());
    v0 = type metadata accessor for AsyncStream.Continuation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  }
}

uint64_t getEnumTagSinglePayload for AsyncSerialQueue.Condition(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncSerialQueue.Condition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACCFF314 + 4 * byte_1ACF5AAE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACCFF348 + 4 * asc_1ACF5AAE0[v4]))();
}

uint64_t sub_1ACCFF348(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACCFF350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACCFF358);
  return result;
}

uint64_t sub_1ACCFF364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACCFF36CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACCFF370(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACCFF378(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AsyncSerialQueue.Condition(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AsyncSerialQueue.Condition()
{
  return &type metadata for AsyncSerialQueue.Condition;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1ACCFF458()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5Tu))(a1, v4);
}

uint64_t sub_1ACCFF4EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (int *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v3, v5, v4, v2);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (int *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v3, v5, v4, v2);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(a1, v4);
}

uint64_t specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v5();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v5(v2 + 16);
}

uint64_t specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_continuation_throwingResume();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v2 = v1;
  swift_continuation_throwingResumeWithError();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 64) + 40) = *(_QWORD *)(v0 + 16);
  swift_continuation_throwingResume();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v2 = v1;
  swift_continuation_throwingResumeWithError();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceDataSource.assertPresence()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[5] = AssociatedTypeWitness;
  v3[6] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PresenceDataSource.assertPresence()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD);

  v1 = v0[5];
  v2 = v0[3];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v1, AssociatedConformanceWitness);
  v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(**(int **)(v2 + 64) + *(_QWORD *)(v2 + 64));
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = PresenceDataSource.assertPresence();
  return v6(v0[7], v0[2], v0[3]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *(_QWORD *)(*v1 + 40);
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(v5 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t PresenceConfiguration.isPersonal.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PresenceConfiguration.isPersonal.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PresenceConfiguration.isPersonal.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PresenceConfiguration.presenceIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PresenceConfiguration.presenceIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*PresenceConfiguration.presenceIdentifier.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PresenceConfiguration.clientIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PresenceConfiguration.clientIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*PresenceConfiguration.clientIdentifier.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void __swiftcall PresenceConfiguration.init(presenceIdentifier:isPersonal:clientIdentifier:)(CopresenceCore::PresenceConfiguration *__return_ptr retstr, Swift::String presenceIdentifier, Swift::Bool isPersonal, Swift::String clientIdentifier)
{
  retstr->isPersonal = isPersonal;
  retstr->presenceIdentifier = presenceIdentifier;
  retstr->clientIdentifier = clientIdentifier;
}

unint64_t PresenceConfiguration.description.getter()
{
  uint64_t v0;

  return specialized PresenceConfiguration.description.getter(*(_BYTE *)v0 & 1, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceConfiguration()
{
  uint64_t v0;

  return specialized PresenceConfiguration.description.getter(*(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t static PresenceConfiguration.meToMe(clientIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Swift::String v6;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x43654D6F54654D2ELL;
  v6._object = (void *)0xEE006C656E6E6168;
  String.append(_:)(v6);
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 16) = a2;
  *(_QWORD *)(a3 + 24) = a1;
  *(_QWORD *)(a3 + 32) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t SKPresenceDataSource.members.didset(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  v7[5] = a1;
  v8 = v1;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in SKPresenceDataSource.members.didset, (uint64_t)v7);
  return swift_release();
}

uint64_t closure #1 in SKPresenceDataSource.members.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 160) = a4;
  *(_QWORD *)(v5 + 168) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in SKPresenceDataSource.members.didset()
{
  _QWORD *v0;
  uint64_t *v1;
  char **v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  char v40;
  char **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(char **, _QWORD);
  uint64_t v63;
  int *v64;
  _QWORD *v65;
  uint64_t (*v66)();
  char *v67;
  uint64_t v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  char *v73;
  uint64_t *v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  char v83;
  char **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void *v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void (*v104)(char **, _QWORD);
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t typeb;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  unint64_t v111;
  uint64_t (*v112)(uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;

  v2 = (char **)(v0 + 20);
  v3 = (_QWORD *)v0[20];
  v4 = v0 + 17;
  v5 = v0[21];
  v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))();
  v2[2] = (char *)v6;
  swift_bridgeObjectRetain();
  v7 = specialized Set.subtracting(_:)(v6, v5);
  v8 = v7;
  v111 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
      goto LABEL_3;
LABEL_8:
    v1 = (uint64_t *)(v2 - 6);
    swift_bridgeObjectRelease();
    v21 = specialized Set.subtracting(_:)(*(_QWORD *)(v106 + 168), *(_QWORD *)(v106 + 176));
    v8 = v21;
    v111 = v21 & 0xC000000000000001;
    if ((v21 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter())
        goto LABEL_10;
    }
    else if (*(_QWORD *)(v21 + 16))
    {
LABEL_10:
      if (one-time initialization token for service == -1)
        goto LABEL_11;
      goto LABEL_69;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for service == -1)
    {
LABEL_39:
      v67 = *v2;
      v68 = type metadata accessor for Logger();
      __swift_project_value_buffer(v68, (uint64_t)static Log.service);
      v69 = v67;
      v70 = Logger.logObject.getter();
      v71 = static os_log_type_t.default.getter();
      v72 = os_log_type_enabled(v70, v71);
      v73 = *v2;
      if (v72)
      {
        v74 = (uint64_t *)(v2 - 7);
        v75 = (uint8_t *)swift_slowAlloc();
        v76 = swift_slowAlloc();
        v115 = v76;
        *(_DWORD *)v75 = 136315138;
        v77 = *(_QWORD *)&v73[direct field offset for SKPresenceDataSource.presenceIdentifier];
        v78 = *(_QWORD *)&v73[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
        swift_bridgeObjectRetain();
        *v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, v70, v71, "Successfully updated members for identifier: %s", v75, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v76, -1, -1);
        MEMORY[0x1AF44981C](v75, -1, -1);
      }
      else
      {

      }
      return (*(uint64_t (**)(void))(v106 + 8))();
    }
LABEL_71:
    swift_once();
    goto LABEL_39;
  }
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_8;
LABEL_3:
  if (one-time initialization token for service != -1)
    swift_once();
  v9 = *v2;
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v11 = v9;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *v2;
  if (v14)
  {
    v1 = (uint64_t *)(v2 - 1);
    v16 = swift_slowAlloc();
    typeb = swift_slowAlloc();
    v115 = typeb;
    *(_DWORD *)v16 = 136315394;
    *v4 = v8;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    v17 = String.init<A>(reflecting:)();
    *(v2 - 2) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    v19 = *(_QWORD *)&v15[direct field offset for SKPresenceDataSource.presenceIdentifier];
    v20 = *(_QWORD *)&v15[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    *(v2 - 1) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v12, v13, "Removing members: %s from presence for identifier: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](typeb, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  if (v111)
  {
    v35 = __CocoaSet.count.getter();
    if (v35)
      goto LABEL_16;
LABEL_19:
    swift_bridgeObjectRelease();
    v39 = MEMORY[0x1E0DEE9D8];
LABEL_36:
    v63 = v106;
    *(_QWORD *)(v106 + 184) = v39;
    v64 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v106 + 160)) + 0xF8);
    v112 = (uint64_t (*)(uint64_t))((char *)v64 + *v64);
    v65 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v106 + 192) = v65;
    v66 = closure #1 in SKPresenceDataSource.members.didset;
    goto LABEL_67;
  }
  v35 = *(_QWORD *)(v8 + 16);
  if (!v35)
    goto LABEL_19;
LABEL_16:
  v113 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35 & ~(v35 >> 63), 0);
  if (v111)
  {
    v36 = __CocoaSet.startIndex.getter();
    v38 = 1;
  }
  else
  {
    v36 = specialized _NativeSet.startIndex.getter(v8);
    v38 = v40 & 1;
  }
  v115 = v36;
  v116 = v37;
  v117 = v38;
  if (v35 < 0)
  {
    __break(1u);
LABEL_69:
    swift_once();
LABEL_11:
    v22 = *v2;
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.service);
    v24 = v22;
    swift_bridgeObjectRetain_n();
    v25 = v24;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = *v2;
    if (v28)
    {
      v30 = swift_slowAlloc();
      v107 = swift_slowAlloc();
      v115 = v107;
      *(_DWORD *)v30 = 136315394;
      *v1 = v8;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
      v31 = String.init<A>(reflecting:)();
      *(v2 - 5) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      v33 = *(_QWORD *)&v29[direct field offset for SKPresenceDataSource.presenceIdentifier];
      v34 = *(_QWORD *)&v29[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
      swift_bridgeObjectRetain();
      *(v2 - 4) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v26, v27, "Adding members: %s to presence for identifier: %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v107, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    if (v111)
    {
      v79 = __CocoaSet.count.getter();
      if (v79)
      {
LABEL_44:
        v114 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79 & ~(v79 >> 63), 0);
        if (v111)
        {
          v80 = __CocoaSet.startIndex.getter();
          v82 = 1;
        }
        else
        {
          v80 = specialized _NativeSet.startIndex.getter(v8);
          v82 = v83 & 1;
        }
        v115 = v80;
        v116 = v81;
        v117 = v82;
        if ((v79 & 0x8000000000000000) == 0)
        {
          v84 = v2 - 14;
          *(_QWORD *)typea = v8;
          do
          {
            while (1)
            {
              v91 = v115;
              v90 = v116;
              v92 = v117;
              specialized Set.subscript.getter(v115, v116, v117, v8);
              v94 = v93;
              v95 = *(void **)&v93[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
              v96 = objc_msgSend(v95, sel_normalizedValue);
              if (!v96)
                v96 = objc_msgSend(v95, sel_value);
              v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v99 = v98;

              v100 = v114;
              result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v114 + 16) + 1, 1);
                v100 = v114;
              }
              v102 = *(_QWORD *)(v100 + 16);
              v101 = *(_QWORD *)(v100 + 24);
              if (v102 >= v101 >> 1)
              {
                result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
                v100 = v114;
              }
              *(_QWORD *)(v100 + 16) = v102 + 1;
              v103 = v100 + 16 * v102;
              *(_QWORD *)(v103 + 32) = v97;
              *(_QWORD *)(v103 + 40) = v99;
              if (v111)
                break;
              v8 = *(_QWORD *)typea;
              v85 = specialized _NativeSet.index(after:)(v91, v90, v92, *(_QWORD *)typea);
              v87 = v86;
              v89 = v88;
              outlined consume of Set<AddressableMember>.Index._Variant(v91, v90, v92);
              v115 = v85;
              v116 = v87;
              v117 = v89 & 1;
              if (!--v79)
                goto LABEL_65;
            }
            v8 = *(_QWORD *)typea;
            if ((v92 & 1) == 0)
              goto LABEL_73;
            if (__CocoaSet.Index.handleBitPattern.getter())
              swift_isUniquelyReferenced_nonNull_native();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
            v104 = (void (*)(char **, _QWORD))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v104(v84, 0);
            --v79;
          }
          while (v79);
LABEL_65:
          outlined consume of Set<AddressableMember>.Index._Variant(v115, v116, v117);
          swift_bridgeObjectRelease();
          v39 = v114;
          goto LABEL_66;
        }
        __break(1u);
        goto LABEL_71;
      }
    }
    else
    {
      v79 = *(_QWORD *)(v8 + 16);
      if (v79)
        goto LABEL_44;
    }
    swift_bridgeObjectRelease();
    v39 = MEMORY[0x1E0DEE9D8];
LABEL_66:
    v63 = v106;
    *(_QWORD *)(v106 + 208) = v39;
    v105 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v106 + 160)) + 0xE8);
    v112 = (uint64_t (*)(uint64_t))((char *)v105 + *v105);
    v65 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v106 + 216) = v65;
    v66 = closure #1 in SKPresenceDataSource.members.didset;
LABEL_67:
    *v65 = v63;
    v65[1] = v66;
    return v112(v39);
  }
  v41 = v2 - 18;
  *(_QWORD *)type = v8;
  while (1)
  {
    while (1)
    {
      v48 = v115;
      v47 = v116;
      v49 = v117;
      specialized Set.subscript.getter(v115, v116, v117, v8);
      v51 = v50;
      v52 = *(void **)&v50[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
      v53 = objc_msgSend(v52, sel_normalizedValue);
      if (!v53)
        v53 = objc_msgSend(v52, sel_value);
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v56 = v55;

      v57 = v113;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v113 + 16) + 1, 1);
        v57 = v113;
      }
      v60 = *(_QWORD *)(v57 + 16);
      v59 = *(_QWORD *)(v57 + 24);
      if (v60 >= v59 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        v57 = v113;
      }
      *(_QWORD *)(v57 + 16) = v60 + 1;
      v61 = v57 + 16 * v60;
      *(_QWORD *)(v61 + 32) = v54;
      *(_QWORD *)(v61 + 40) = v56;
      if (v111)
        break;
      v8 = *(_QWORD *)type;
      v42 = specialized _NativeSet.index(after:)(v48, v47, v49, *(_QWORD *)type);
      v44 = v43;
      v46 = v45;
      outlined consume of Set<AddressableMember>.Index._Variant(v48, v47, v49);
      v115 = v42;
      v116 = v44;
      v117 = v46 & 1;
      if (!--v35)
        goto LABEL_35;
    }
    v8 = *(_QWORD *)type;
    if ((v49 & 1) == 0)
      break;
    if (__CocoaSet.Index.handleBitPattern.getter())
      swift_isUniquelyReferenced_nonNull_native();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
    v62 = (void (*)(char **, _QWORD))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v62(v41, 0);
    if (!--v35)
    {
LABEL_35:
      outlined consume of Set<AddressableMember>.Index._Variant(v115, v116, v117);
      swift_bridgeObjectRelease();
      v39 = v113;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t result;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD);
  int *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;

  v1 = specialized Set.subtracting(_:)(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  v2 = v1;
  v60 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    if (one-time initialization token for service == -1)
    {
LABEL_9:
      v18 = *(void **)(v0 + 160);
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.service);
      v20 = v18;
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.default.getter();
      v23 = os_log_type_enabled(v21, v22);
      v24 = *(char **)(v0 + 160);
      if (v23)
      {
        v25 = (uint8_t *)swift_slowAlloc();
        v26 = swift_slowAlloc();
        v63 = v26;
        *(_DWORD *)v25 = 136315138;
        v27 = *(_QWORD *)&v24[direct field offset for SKPresenceDataSource.presenceIdentifier];
        v28 = *(_QWORD *)&v24[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, v21, v22, "Successfully updated members for identifier: %s", v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v26, -1, -1);
        MEMORY[0x1AF44981C](v25, -1, -1);
      }
      else
      {

      }
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_38:
    swift_once();
    goto LABEL_9;
  }
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_8;
LABEL_3:
  if (one-time initialization token for service != -1)
    swift_once();
  v3 = *(void **)(v0 + 160);
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  v5 = v3;
  swift_bridgeObjectRetain_n();
  v6 = v5;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(char **)(v0 + 160);
  v58 = v0;
  v59 = v2;
  if (v9)
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v63 = v12;
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)(v0 + 112) = v59;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    v13 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    v0 = v11 + 14;
    v15 = *(_QWORD *)&v10[direct field offset for SKPresenceDataSource.presenceIdentifier];
    v16 = *(_QWORD *)&v10[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v58 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v7, v8, "Adding members: %s to presence for identifier: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    v17 = v12;
    v2 = v59;
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  if (v60)
  {
    v29 = __CocoaSet.count.getter();
    if (v29)
      goto LABEL_14;
LABEL_17:
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x1E0DEE9D8];
LABEL_36:
    *(_QWORD *)(v58 + 208) = v33;
    v56 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v58 + 160)) + 0xE8);
    v61 = (uint64_t (*)(uint64_t))((char *)v56 + *v56);
    v57 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v58 + 216) = v57;
    *v57 = v58;
    v57[1] = closure #1 in SKPresenceDataSource.members.didset;
    return v61(v33);
  }
  v29 = *(_QWORD *)(v2 + 16);
  if (!v29)
    goto LABEL_17;
LABEL_14:
  v62 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29 & ~(v29 >> 63), 0);
  if (v60)
  {
    v30 = __CocoaSet.startIndex.getter();
    v32 = 1;
  }
  else
  {
    v30 = specialized _NativeSet.startIndex.getter(v2);
    v32 = v35 & 1;
  }
  v63 = v30;
  v64 = v31;
  v65 = v32;
  if (v29 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  while (1)
  {
    while (1)
    {
      v42 = v63;
      v41 = v64;
      v43 = v65;
      specialized Set.subscript.getter(v63, v64, v65, v2);
      v45 = v44;
      v46 = *(void **)&v44[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
      v47 = objc_msgSend(v46, sel_normalizedValue);
      if (!v47)
        v47 = objc_msgSend(v46, sel_value);
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v50 = v49;

      v51 = v62;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v62 + 16) + 1, 1);
        v51 = v62;
      }
      v53 = *(_QWORD *)(v51 + 16);
      v52 = *(_QWORD *)(v51 + 24);
      if (v53 >= v52 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        v51 = v62;
      }
      *(_QWORD *)(v51 + 16) = v53 + 1;
      v54 = v51 + 16 * v53;
      *(_QWORD *)(v54 + 32) = v48;
      *(_QWORD *)(v54 + 40) = v50;
      if (v60)
        break;
      v2 = v59;
      v36 = specialized _NativeSet.index(after:)(v42, v41, v43, v59);
      v38 = v37;
      v40 = v39;
      outlined consume of Set<AddressableMember>.Index._Variant(v42, v41, v43);
      v63 = v36;
      v64 = v38;
      v65 = v40 & 1;
      if (!--v29)
        goto LABEL_35;
    }
    v2 = v59;
    if ((v43 & 1) == 0)
      break;
    if (__CocoaSet.Index.handleBitPattern.getter())
      swift_isUniquelyReferenced_nonNull_native();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
    v55 = (void (*)(uint64_t, _QWORD))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v55(v58 + 48, 0);
    if (!--v29)
    {
LABEL_35:
      outlined consume of Set<AddressableMember>.Index._Variant(v63, v64, v65);
      swift_bridgeObjectRelease();
      v33 = v62;
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = *(void **)(v0 + 160);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(char **)(v0 + 160);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *(_QWORD *)&v7[direct field offset for SKPresenceDataSource.presenceIdentifier];
    v11 = *(_QWORD *)&v7[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v4, v5, "Successfully updated members for identifier: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 200);
  swift_bridgeObjectRelease();
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = *(void **)(v0 + 160);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  v4 = v2;
  v5 = v1;
  v6 = v4;
  v7 = v1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(char **)(v0 + 160);
  if (v10)
  {
    v12 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v12 = 136315394;
    v13 = *(_QWORD *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier];
    v14 = *(_QWORD *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 12) = 2080;
    *(_QWORD *)(v0 + 80) = v1;
    v15 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v16 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v8, v9, "Failed to update members for identifier: %s with error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v19, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = *(void **)(v0 + 160);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  v4 = v2;
  v5 = v1;
  v6 = v4;
  v7 = v1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(char **)(v0 + 160);
  if (v10)
  {
    v12 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v12 = 136315394;
    v13 = *(_QWORD *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier];
    v14 = *(_QWORD *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 12) = 2080;
    *(_QWORD *)(v0 + 80) = v1;
    v15 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v16 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v8, v9, "Failed to update members for identifier: %s with error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v19, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SKPresenceDataSource.members.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SKPresenceDataSource.members.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v1 + direct field offset for SKPresenceDataSource.members);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  SKPresenceDataSource.members.didset(v4);
  return swift_bridgeObjectRelease();
}

void (*SKPresenceDataSource.members.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (_QWORD *)(v1 + direct field offset for SKPresenceDataSource.members);
  swift_beginAccess();
  v3[3] = *v4;
  swift_bridgeObjectRetain();
  return SKPresenceDataSource.members.modify;
}

void SKPresenceDataSource.members.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = swift_bridgeObjectRetain();
    SKPresenceDataSource.members.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    SKPresenceDataSource.members.setter(v3);
  }
  free(v2);
}

uint64_t property wrapper backing initializer of SKPresenceDataSource.presentDevices@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a1;
  swift_getExtendedExistentialTypeMetadata();
  v3 = type metadata accessor for Array();
  return CurrentSubject.init(wrappedValue:)((uint64_t)&v5, v3, a2);
}

uint64_t SKPresenceDataSource.presentDevices.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50);
  swift_getExtendedExistentialTypeMetadata();
  v1 = type metadata accessor for Array();
  type metadata accessor for CurrentSubject(0, v1, v2, v3);
  CurrentSubject.wrappedValue.getter();
  return v5;
}

uint64_t SKPresenceDataSource.$presentDevices.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getExtendedExistentialTypeMetadata();
  v0 = type metadata accessor for Array();
  type metadata accessor for CurrentSubject(0, v0, v1, v2);
  protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.getter in conformance FastSyncAnalyticsReporter();
  return swift_retain();
}

uint64_t SKPresenceDataSource.presentDevicesPublisher.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
  swift_getExtendedExistentialTypeMetadata();
  type metadata accessor for Array();
  v1 = type metadata accessor for CurrentValueSubject();
  MEMORY[0x1AF44972C](MEMORY[0x1E0C95FB8], v1);
  v2 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v2;
}

char *SKPresenceDataSource.__allocating_init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2);
}

char *specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2)
{
  return specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>);
}

{
  return specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>, (uint64_t *)&demangling cache variable for type metadata for SKPresenceDataSource<ActivityListPresenceContext>);
}

char *specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  objc_class *v29;
  char *v30;
  void *v31;
  void *v32;
  char *v33;
  id v34;
  id v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t *v46;
  objc_super v47;
  unint64_t v48;
  unint64_t v49;

  v46 = a4;
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  MEMORY[0x1E0C80A78](v8);
  v42 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v40);
  v39 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v11);
  *(_QWORD *)&v4[direct field offset for SKPresenceDataSource.members] = MEMORY[0x1E0DEE9E8];
  v12 = direct field offset for SKPresenceDataSource._presentDevices;
  v13 = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_allocObject();
  v14 = v4;
  *(_QWORD *)&v4[v12] = CurrentValueSubject.init(_:)();
  v38 = a1;
  v15 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 8);
  v16 = (uint64_t *)&v14[direct field offset for SKPresenceDataSource.presenceIdentifier];
  *v16 = v41;
  v16[1] = v15;
  v37 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v48 = 0;
  v49 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v48 = 0xD000000000000013;
  v49 = 0x80000001ACF7DD40;
  v18 = *v16;
  v17 = (void *)v16[1];
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = v18;
  v19._object = v17;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v45 = a2;
  static DispatchQoS.unspecified.getter();
  v48 = v13;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, *MEMORY[0x1E0DEF8D0], v44);
  *(_QWORD *)&v14[direct field offset for SKPresenceDataSource.queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v21 = *(_QWORD *)(v38 + 24);
  v20 = *(_QWORD *)(v38 + 32);
  v22 = (unsigned __int8 *)v38;
  v23 = objc_allocWithZone(MEMORY[0x1E0DACA68]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = (void *)MEMORY[0x1AF4480F4](v21, v20);
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v23, sel_initWithServiceIdentifier_, v24);

  objc_msgSend(v25, sel_setIsPersonal_, *v22);
  v26 = objc_allocWithZone(MEMORY[0x1E0DACA60]);
  v27 = (void *)MEMORY[0x1AF4480F4](v41, v15);
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v26, sel_initWithPresenceIdentifier_options_, v27, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)&v14[direct field offset for SKPresenceDataSource.presence] = v28;
  v29 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(v46);
  v47.receiver = v14;
  v47.super_class = v29;
  v30 = (char *)objc_msgSendSuper2(&v47, sel_init);
  v31 = *(void **)&v30[direct field offset for SKPresenceDataSource.presence];
  v32 = *(void **)&v30[direct field offset for SKPresenceDataSource.queue];
  v33 = v30;
  v34 = v31;
  v35 = v32;
  objc_msgSend(v34, sel_addDelegate_queue_, v33, v35);

  return v33;
}

char *SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  objc_class *v29;
  char *v30;
  void *v31;
  void *v32;
  char *v33;
  id v34;
  id v35;
  _QWORD v37[2];
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  objc_super v48;
  uint64_t v49;
  unint64_t v50;

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  MEMORY[0x1E0C80A78](v6);
  v42 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v40);
  v39 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v9);
  *(_QWORD *)((char *)v2 + direct field offset for SKPresenceDataSource.members) = MEMORY[0x1E0DEE9E8];
  v10 = direct field offset for SKPresenceDataSource._presentDevices;
  v11 = *(_QWORD *)(v5 + 80);
  v12 = v2;
  v49 = v11;
  v46 = v11;
  swift_getExtendedExistentialTypeMetadata();
  v13 = static Array._allocateUninitialized(_:)();
  v47 = *(_QWORD *)(v5 + 88);
  property wrapper backing initializer of SKPresenceDataSource.presentDevices(v13, &v49);
  *(_QWORD *)((char *)v2 + v10) = v49;
  v38 = a1;
  v14 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 8);
  v15 = (_QWORD *)((char *)v12 + direct field offset for SKPresenceDataSource.presenceIdentifier);
  *v15 = v41;
  v15[1] = v14;
  v37[1] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v49 = 0;
  v50 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v49 = 0xD000000000000013;
  v50 = 0x80000001ACF7DD40;
  v17 = *v15;
  v16 = (void *)v15[1];
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v17;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v45 = a2;
  static DispatchQoS.unspecified.getter();
  v49 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, *MEMORY[0x1E0DEF8D0], v44);
  *(_QWORD *)((char *)v12 + direct field offset for SKPresenceDataSource.queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v20 = *(_QWORD *)(v38 + 24);
  v19 = *(_QWORD *)(v38 + 32);
  v21 = (unsigned __int8 *)v38;
  v22 = objc_allocWithZone(MEMORY[0x1E0DACA68]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = (void *)MEMORY[0x1AF4480F4](v20, v19);
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(v22, sel_initWithServiceIdentifier_, v23);

  objc_msgSend(v24, sel_setIsPersonal_, *v21);
  v25 = objc_allocWithZone(MEMORY[0x1E0DACA60]);
  v26 = (void *)MEMORY[0x1AF4480F4](v41, v14);
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v25, sel_initWithPresenceIdentifier_options_, v26, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)((char *)v12 + direct field offset for SKPresenceDataSource.presence) = v27;
  v29 = (objc_class *)type metadata accessor for SKPresenceDataSource(0, v46, v47, v28);
  v48.receiver = v12;
  v48.super_class = v29;
  v30 = (char *)objc_msgSendSuper2(&v48, sel_init);
  v31 = *(void **)&v30[direct field offset for SKPresenceDataSource.presence];
  v32 = *(void **)&v30[direct field offset for SKPresenceDataSource.queue];
  v33 = v30;
  v34 = v31;
  v35 = v32;
  objc_msgSend(v34, sel_addDelegate_queue_, v33, v35);

  return v33;
}

id PresenceConfiguration.options.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v1 = *((_QWORD *)v0 + 3);
  v2 = *((_QWORD *)v0 + 4);
  v3 = objc_allocWithZone(MEMORY[0x1E0DACA68]);
  swift_bridgeObjectRetain();
  v4 = (void *)MEMORY[0x1AF4480F4](v1, v2);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithServiceIdentifier_, v4);

  objc_msgSend(v5, sel_setIsPersonal_, *v0);
  return v5;
}

uint64_t SKPresenceDataSource.assertPresence(using:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[43] = a1;
  v2[44] = v1;
  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v2[45] = *v1;
  v2[46] = v4;
  v5 = *(_QWORD *)((v4 & v3) + 0x50);
  v2[47] = v5;
  v6 = type metadata accessor for Optional();
  v2[48] = v6;
  v2[49] = *(_QWORD *)(v6 - 8);
  v2[50] = swift_task_alloc();
  v2[51] = *(_QWORD *)(v5 - 8);
  v2[52] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SKPresenceDataSource.assertPresence(using:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t type;
  uint64_t v37[2];

  if (one-time initialization token for host != -1)
    swift_once();
  v2 = v0[51];
  v1 = v0[52];
  v3 = v0[47];
  v4 = v0[43];
  v5 = (void *)v0[44];
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v7(v1, v4, v3);
  v8 = v5;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v13 = v0[51];
  v12 = v0[52];
  if (v11)
  {
    v14 = v0[50];
    v15 = v0[47];
    v33 = v0[49];
    v34 = v0[48];
    type = v10;
    v16 = (char *)v0[44];
    v32 = v0[52];
    v17 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v37[0] = v35;
    *(_DWORD *)v17 = 136315394;
    v18 = objc_msgSend(*(id *)&v16[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    v31 = v13;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v0[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v17 + 12) = 2080;
    v7(v14, v32, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v14, 0, 1, v15);
    v22 = >> prefix<A>(_:)(v14, v15);
    v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v14, v34);
    v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v15);
    _os_log_impl(&dword_1ACCCC000, v9, type, "Asserting presence for identifier: %s using context: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v35, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);

  }
  else
  {
    v25 = v0[47];
    v26 = (void *)v0[44];

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v25);
  }
  static Task<>.checkCancellation()();
  v0[53] = 0;
  v27 = *(void **)(v0[44] + direct field offset for SKPresenceDataSource.presence);
  v0[54] = v27;
  v0[2] = v0;
  v0[3] = SKPresenceDataSource.assertPresence(using:);
  v28 = swift_continuation_init();
  v0[31] = MEMORY[0x1E0C809B0];
  v29 = v0 + 31;
  v29[1] = 0x40000000;
  v29[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v29[3] = &block_descriptor_1;
  v29[4] = v28;
  objc_msgSend(v27, sel_retainTransientSubscriptionAssertionWithCompletion_, v29);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 440) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  Class isa;

  v1 = v0[53];
  static Task<>.checkCancellation()();
  if (v1)
  {
    v0[58] = v1;
    v2 = (void *)v0[54];
    v0[18] = v0;
    v0[19] = SKPresenceDataSource.assertPresence(using:);
    v3 = swift_continuation_init();
    v0[26] = MEMORY[0x1E0C809B0];
    v4 = v0 + 26;
    v4[1] = 0x40000000;
    v4[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v4[3] = &block_descriptor_3;
    v4[4] = v3;
    objc_msgSend(v2, sel_releaseTransientSubscriptionAssertionWithCompletion_, v4);
  }
  else
  {
    v5 = (void *)v0[54];
    (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)((v0[45] & v0[46]) + 0x58) + 8) + 16))(v0[47]);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v0[56] = isa;
    swift_bridgeObjectRelease();
    v0[10] = v0;
    v0[11] = SKPresenceDataSource.assertPresence(using:);
    v0[40] = swift_continuation_init();
    v0[36] = MEMORY[0x1E0C809B0];
    v0[37] = 0x40000000;
    v0[38] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v0[39] = &block_descriptor_4;
    objc_msgSend(v5, sel_assertPresenceWithPresencePayloadDictionary_completion_, isa, v0 + 36);
  }
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 456) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 472) = *(_QWORD *)(*(_QWORD *)v0 + 176);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[56];
  swift_willThrow();

  v0[58] = v0[57];
  v2 = (void *)v0[54];
  v0[18] = v0;
  v0[19] = SKPresenceDataSource.assertPresence(using:);
  v3 = swift_continuation_init();
  v0[26] = MEMORY[0x1E0C809B0];
  v4 = v0 + 26;
  v4[1] = 0x40000000;
  v4[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v4[3] = &block_descriptor_3;
  v4[4] = v3;
  objc_msgSend(v2, sel_releaseTransientSubscriptionAssertionWithCompletion_, v4);
  return swift_continuation_await();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 472);
  swift_willThrow();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t SKPresenceDataSource.releasePresence()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  char *v8;
  uint64_t *v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;

  v1 = v0 + 18;
  if (one-time initialization token for host != -1)
    swift_once();
  v2 = (void *)v0[23];
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = (char *)v0[23];
  v9 = &one-time initialization token for protoMessageName;
  if (v7)
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18 = v17;
    *(_DWORD *)v10 = 136315138;
    v11 = objc_msgSend(*(id *)&v8[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    v1 = v0 + 18;
    v9 = &one-time initialization token for protoMessageName;
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Releasing presence for identifier: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);
  }
  else
  {

  }
  v15 = *(void **)(v0[23] + v9[489]);
  v0[24] = v15;
  v0[2] = v0;
  v0[3] = SKPresenceDataSource.releasePresence();
  v0[22] = swift_continuation_init();
  v0[18] = MEMORY[0x1E0C809B0];
  v0[19] = 0x40000000;
  v0[20] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[21] = &block_descriptor_6_0;
  objc_msgSend(v15, sel_releasePresenceWithCompletion_, v1);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 200) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[24];
  v0[10] = v0;
  v0[11] = SKPresenceDataSource.releasePresence();
  v2 = swift_continuation_init();
  v0[18] = MEMORY[0x1E0C809B0];
  v3 = v0 + 18;
  v3[1] = 0x40000000;
  v3[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v3[3] = &block_descriptor_7;
  v3[4] = v2;
  objc_msgSend(v1, sel_releaseTransientSubscriptionAssertionWithCompletion_, v3);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 208) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[25];
  swift_willThrow();

  v2 = (void *)v0[24];
  v0[10] = v0;
  v0[11] = SKPresenceDataSource.releasePresence();
  v3 = swift_continuation_init();
  v0[18] = MEMORY[0x1E0C809B0];
  v4 = v0 + 18;
  v4[1] = 0x40000000;
  v4[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v4[3] = &block_descriptor_7;
  v4[4] = v3;
  objc_msgSend(v2, sel_releaseTransientSubscriptionAssertionWithCompletion_, v4);
  return swift_continuation_await();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SKPresenceDataSource.inviteHandle(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return swift_task_switch();
}

uint64_t SKPresenceDataSource.inviteHandle(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;

  v1 = v0 + 10;
  if (one-time initialization token for host != -1)
    swift_once();
  v2 = (void *)v0[17];
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v9 = v0[16];
  v8 = (char *)v0[17];
  if (v7)
  {
    v10 = v0[15];
    v11 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25 = v24;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    v12 = objc_msgSend(*(id *)&v8[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16 = v13;
    v1 = v0 + 10;
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Inviting handle %s to presence for identifier: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v17 = v0[16];
  v18 = v0[15];
  v19 = *(void **)(v0[17] + direct field offset for SKPresenceDataSource.presence);
  v20 = objc_allocWithZone(MEMORY[0x1E0DACA58]);
  swift_bridgeObjectRetain();
  v21 = (void *)MEMORY[0x1AF4480F4](v18, v17);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_initWithString_, v21);
  v0[18] = v22;

  v0[2] = v0;
  v0[3] = SKPresenceDataSource.inviteHandle(_:);
  v0[14] = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[13] = &block_descriptor_8;
  objc_msgSend(v19, sel_inviteHandleFromPrimaryAccountHandle_completion_, v22, v1);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SKPresenceDataSource.inviteHandles(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch();
}

uint64_t SKPresenceDataSource.inviteHandles(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  Class isa;
  uint64_t v29;
  uint64_t v30;

  v1 = v0 + 10;
  if (one-time initialization token for host != -1)
    swift_once();
  v2 = (void *)v0[16];
  v3 = type metadata accessor for Logger();
  v0[17] = __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = (char *)v0[16];
  if (v7)
  {
    v9 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v30 = v29;
    *(_DWORD *)v9 = 136315394;
    v10 = swift_bridgeObjectRetain();
    v11 = MEMORY[0x1AF44828C](v10, MEMORY[0x1E0DEA968]);
    v13 = v12;
    swift_bridgeObjectRelease();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    v14 = objc_msgSend(*(id *)&v8[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    v18 = v15;
    v1 = v0 + 10;
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Inviting handles %s to presence for identifier: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v19 = v0[15];
  v20 = *(void **)(v0[16] + direct field offset for SKPresenceDataSource.presence);
  v0[18] = v20;
  v21 = *(_QWORD *)(v19 + 16);
  if (v21)
  {
    v30 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v22 = (uint64_t *)(v19 + 40);
    do
    {
      v24 = *(v22 - 1);
      v23 = *v22;
      v25 = objc_allocWithZone(MEMORY[0x1E0DACA58]);
      swift_bridgeObjectRetain();
      v26 = (void *)MEMORY[0x1AF4480F4](v24, v23);
      swift_bridgeObjectRelease();
      objc_msgSend(v25, sel_initWithString_, v26);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v22 += 2;
      --v21;
    }
    while (v21);
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKHandle);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[19] = isa;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[3] = SKPresenceDataSource.inviteHandles(_:);
  v0[14] = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[13] = &block_descriptor_10;
  objc_msgSend(v20, sel_inviteHandlesFromPrimaryAccountHandle_completion_, isa, v1);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 128);

  swift_bridgeObjectRetain_n();
  v2 = v1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v0 + 144);
    v17 = *(void **)(v0 + 128);
    v6 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v6 = 136315394;
    v7 = swift_bridgeObjectRetain();
    v8 = MEMORY[0x1AF44828C](v7, MEMORY[0x1E0DEA968]);
    v10 = v9;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    v11 = objc_msgSend(v5, sel_presenceIdentifier);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v3, v4, "Successfully invited handles %s to %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 128);
    swift_bridgeObjectRelease_n();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SKPresenceDataSource.removeHandle(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return swift_task_switch();
}

uint64_t SKPresenceDataSource.removeHandle(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;

  v1 = v0 + 10;
  if (one-time initialization token for host != -1)
    swift_once();
  v2 = (void *)v0[17];
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  v7 = os_log_type_enabled(v5, v6);
  v9 = v0[16];
  v8 = (char *)v0[17];
  if (v7)
  {
    v10 = v0[15];
    v11 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25 = v24;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    v12 = objc_msgSend(*(id *)&v8[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16 = v13;
    v1 = v0 + 10;
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Removing handle %s from presence for identifier:  %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v17 = v0[16];
  v18 = v0[15];
  v19 = *(void **)(v0[17] + direct field offset for SKPresenceDataSource.presence);
  v20 = objc_allocWithZone(MEMORY[0x1E0DACA58]);
  swift_bridgeObjectRetain();
  v21 = (void *)MEMORY[0x1AF4480F4](v18, v17);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_initWithString_, v21);
  v0[18] = v22;

  v0[2] = v0;
  v0[3] = SKPresenceDataSource.removeHandle(_:);
  v0[14] = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[13] = &block_descriptor_12;
  objc_msgSend(v19, sel_removeInvitedHandle_completion_, v22, v1);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t SKPresenceDataSource.removeHandles(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch();
}

uint64_t SKPresenceDataSource.removeHandles(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  Class isa;
  uint64_t v29;
  uint64_t v30;

  v1 = v0 + 10;
  if (one-time initialization token for host != -1)
    swift_once();
  v2 = (void *)v0[16];
  v3 = type metadata accessor for Logger();
  v0[17] = __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = (char *)v0[16];
  if (v7)
  {
    v9 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v30 = v29;
    *(_DWORD *)v9 = 136315394;
    v10 = swift_bridgeObjectRetain();
    v11 = MEMORY[0x1AF44828C](v10, MEMORY[0x1E0DEA968]);
    v13 = v12;
    swift_bridgeObjectRelease();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    v14 = objc_msgSend(*(id *)&v8[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    v18 = v15;
    v1 = v0 + 10;
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Removing handles %s from presence for identifier:  %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v19 = v0[15];
  v20 = *(void **)(v0[16] + direct field offset for SKPresenceDataSource.presence);
  v0[18] = v20;
  v21 = *(_QWORD *)(v19 + 16);
  if (v21)
  {
    v30 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v22 = (uint64_t *)(v19 + 40);
    do
    {
      v24 = *(v22 - 1);
      v23 = *v22;
      v25 = objc_allocWithZone(MEMORY[0x1E0DACA58]);
      swift_bridgeObjectRetain();
      v26 = (void *)MEMORY[0x1AF4480F4](v24, v23);
      swift_bridgeObjectRelease();
      objc_msgSend(v25, sel_initWithString_, v26);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v22 += 2;
      --v21;
    }
    while (v21);
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKHandle);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[19] = isa;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[3] = SKPresenceDataSource.removeHandles(_:);
  v0[14] = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[13] = &block_descriptor_14;
  objc_msgSend(v20, sel_removeInvitedHandles_completion_, isa, v1);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 128);

  swift_bridgeObjectRetain_n();
  v2 = v1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v0 + 144);
    v17 = *(void **)(v0 + 128);
    v6 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v6 = 136315394;
    v7 = swift_bridgeObjectRetain();
    v8 = MEMORY[0x1AF44828C](v7, MEMORY[0x1E0DEA968]);
    v10 = v9;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    v11 = objc_msgSend(v5, sel_presenceIdentifier);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v3, v4, "Successfully removed handles %s to %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 128);
    swift_bridgeObjectRelease_n();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SKPresenceDataSource.presentDevicesChanged(for:)(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_presentDevices);
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKPresentDevice);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SKPresentDevice]);
  swift_getExtendedExistentialTypeMetadata();
  v2 = MEMORY[0x1E0DEAF38];
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [SKPresentDevice] and conformance [A], &demangling cache variable for type metadata for [SKPresentDevice], MEMORY[0x1E0DEAF38]);
  Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for Array();
  MEMORY[0x1AF44972C](v2, v3);
  Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  specialized SKPresenceDataSource.presentDevices.setter();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in SKPresenceDataSource.presentDevicesChanged(for:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v31;
  void (*v32)(uint64_t, uint64_t);
  _QWORD *v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v31 - v9;
  v11 = a1[3];
  v12 = a1[4];
  v13 = __swift_project_boxed_opaque_existential_1(a1, v11);
  v14 = *(void (**)(uint64_t, uint64_t))(v12 + 40);
  v33 = v13;
  v34 = v14;
  v35 = v12;
  v36 = v11;
  v14(v11, v12);
  v15 = a2[3];
  v16 = a2[4];
  v17 = __swift_project_boxed_opaque_existential_1(a2, v15);
  v18 = *(void (**)(uint64_t, uint64_t))(v16 + 40);
  v31 = v17;
  v32 = v18;
  v18(v15, v16);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  if ((v19 & 1) != 0)
  {
    v21 = a1[3];
    v22 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v21);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
    v25 = v24;
    v26 = a2[3];
    v27 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v26);
    if (v23 == (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 24))(v26, v27) && v25 == v28)
    {
      swift_bridgeObjectRelease_n();
      v29 = 0;
    }
    else
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v34(v36, v35);
    v32(v15, v16);
    v29 = static Date.< infix(_:_:)();
    v20(v8, v4);
    v20(v10, v4);
  }
  return v29 & 1;
}

void @objc SKPresenceDataSource.presentDevicesChanged(for:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SKPresenceDataSource.presentDevicesChanged(for:)(v4);

}

void SKPresenceDataSource.invitedHandlesChanged(for:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;

  if (one-time initialization token for host != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  v4 = a1;
  v5 = v1;
  v19 = v4;
  v6 = (char *)v5;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v20 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = objc_msgSend(v19, sel_invitedHandles);
    v12 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKHandle);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v14 = MEMORY[0x1AF44828C](v13, v12);
    v16 = v15;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v17 = *(_QWORD *)&v6[direct field offset for SKPresenceDataSource.presenceIdentifier];
    v18 = *(_QWORD *)&v6[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Presence updated invited handles: %s for identifier: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

  }
}

void @objc SKPresenceDataSource.invitedHandlesChanged(for:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SKPresenceDataSource.invitedHandlesChanged(for:)(v4);

}

void @objc SKPresenceDataSource.presenceDaemonDisconnected(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized SKPresenceDataSource.presenceDaemonDisconnected(_:)();

}

id SKPresenceDataSource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SKPresenceDataSource.init()()
{
  specialized SKPresenceDataSource.init()();
}

void @objc SKPresenceDataSource.init()()
{
  specialized SKPresenceDataSource.init()();
}

id SKPresenceDataSource.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for SKPresenceDataSource(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc SKPresenceDataSource.__ivar_destroyer(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t protocol witness for PresenceDataSource.presentDevicesPublisher.getter in conformance SKPresenceDataSource<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t protocol witness for PresenceDataSource.presentDevices.getter in conformance SKPresenceDataSource<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t protocol witness for PresenceDataSource.members.getter in conformance SKPresenceDataSource<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t protocol witness for PresenceDataSource.members.setter in conformance SKPresenceDataSource<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t (*protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>(_QWORD *a1))()
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x98))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PresenceDataSource.assertPresence(using:) in conformance SKPresenceDataSource<A>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD0);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v7(a1);
}

uint64_t protocol witness for PresenceDataSource.releasePresence() in conformance SKPresenceDataSource<A>()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

uint64_t SKPresenceDataSource<>.init(config:targetQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t SKPresenceDataSource<>.init(personalPresenceDataSourceUsingClientIdentifier:targetQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Swift::String v7;
  _QWORD v9[5];

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[0] = a1;
  v7._countAndFlagsBits = 0x43654D6F54654D2ELL;
  v7._object = (void *)0xEE006C656E6E6168;
  String.append(_:)(v7);
  LOBYTE(v9[0]) = 1;
  v9[1] = a1;
  v9[2] = a2;
  v9[3] = a1;
  v9[4] = a2;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 200))(v9, a3);
}

uint64_t PresenceController.__allocating_init(config:targetQueue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, ValueMetadata *, unint64_t);
  unint64_t v11;
  uint64_t v12;

  v3 = v2;
  v6 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>));
  v7 = a2;
  v8 = specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>);
  v9 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type SKPresenceDataSource<EmptyPresenceContext> and conformance SKPresenceDataSource<A>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>, (uint64_t)&protocol conformance descriptor for SKPresenceDataSource<A>);
  v10 = *(uint64_t (**)(char *, uint64_t, ValueMetadata *, unint64_t))(v3 + 184);
  v11 = lazy protocol witness table accessor for type EmptyPresenceContext and conformance EmptyPresenceContext();
  v12 = v10(v8, v9, &type metadata for EmptyPresenceContext, v11);

  return v12;
}

uint64_t PersonalPresenceController.__allocating_init<A>(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  PersonalPresenceController.init<A>(dataSource:)(a1, v6, a3);
  return v5;
}

uint64_t PersonalPresenceController.init<A>(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DF07B8], v6);
  AsyncSerialQueue.init(priority:bufferingPolicy:)((uint64_t)v12, (uint64_t)v9, (uint64_t)v15);
  outlined init with take of AsyncSerialQueue((uint64_t)v15, v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  v17 = (_QWORD *)(v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource);
  *v17 = a1;
  v17[1] = a3;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs) = MEMORY[0x1E0DEE9E8];
  return v3;
}

uint64_t PersonalPresenceController.updatePersonalPresenceDataSource()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD *, uint64_t, uint64_t);
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[11];
  v6 = &unk_1ED2FB000;
  if (v4)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v24 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = (_QWORD *)(v5 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs);
    swift_beginAccess();
    v0[9] = *v9;
    swift_bridgeObjectRetain();
    v10 = String.init<A>(reflecting:)();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Update personal presence data source with current activity IDs: %s", v7, 0xCu);
    swift_arrayDestroy();
    v12 = v8;
    v6 = (_QWORD *)&unk_1ED2FB000;
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v13 = v0[11];
  v14 = (uint64_t *)(v13 + v6[187]);
  swift_beginAccess();
  v15 = *v14;
  v0[12] = *v14;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource + 8);
  ObjectType = swift_getObjectType();
  if (v16)
  {
    v0[8] = v15;
    v22 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))(**(int **)(v17 + 64) + *(_QWORD *)(v17 + 64));
    swift_bridgeObjectRetain();
    v19 = (_QWORD *)swift_task_alloc();
    v0[14] = v19;
    *v19 = v0;
    v19[1] = PersonalPresenceController.updatePersonalPresenceDataSource();
    return v22(v0 + 8, ObjectType, v17);
  }
  else
  {
    v23 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v17 + 72) + *(_QWORD *)(v17 + 72));
    v21 = (_QWORD *)swift_task_alloc();
    v0[13] = v21;
    *v21 = v0;
    v21[1] = PersonalPresenceController.updatePersonalPresenceDataSource();
    return v23(ObjectType, v17);
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PersonalPresenceController.presentDevicePublisher(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(unint64_t, char *, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v23 = a1;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>);
  v28 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v24 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>, [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]>);
  v29 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v25 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource + 8);
  ObjectType = swift_getObjectType();
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(ObjectType, v9);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v22(v6, a1, v3);
  v11 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v12 = swift_allocObject();
  v13 = *(void (**)(unint64_t, char *, uint64_t))(v4 + 32);
  v13(v12 + v11, v6, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>, MEMORY[0x1E0C95D90]);
  v14 = v24;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  v22(v6, v23, v3);
  v15 = swift_allocObject();
  v13(v15 + v11, v6, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>, MEMORY[0x1E0C957C0]);
  v17 = v25;
  v16 = v26;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v16);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>, [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>, [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]>, MEMORY[0x1E0C95950]);
  v18 = v27;
  v19 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v18);
  return v19;
}

void closure #1 in PersonalPresenceController.presentDevicePublisher(for:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  if (one-time initialization token for host != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v23 = v21;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>);
    v14 = MEMORY[0x1AF44828C](v8, v13);
    v16 = v15;
    swift_bridgeObjectRelease();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_1ACCCC000, v10, v11, "Filtering multiplexed devices: %s for presence identifier: %s", (uint8_t *)v12, 0x16u);
    v19 = v21;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v19, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

}

uint64_t closure #2 in PersonalPresenceController.presentDevicePublisher(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  _QWORD v14[4];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18[2];
  uint64_t v19;

  v4 = *a1;
  v14[2] = a2;
  swift_bridgeObjectRetain();
  v5 = specialized _ArrayProtocol.filter(_:)((uint64_t)partial apply for closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:), (uint64_t)v14, v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v5 + 32;
    v8 = v19;
    do
    {
      outlined init with copy of UserNotificationCenter(v7, (uint64_t)v15);
      v9 = v16;
      v10 = v17;
      __swift_project_boxed_opaque_existential_1(v15, v16);
      PresentDevice.withoutContext()(v9, v10, (uint64_t *)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v19;
      }
      v12 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v8 = v19;
      }
      *(_QWORD *)(v8 + 16) = v12 + 1;
      outlined init with take of BackgroundSessionManagerDataSource(v18, v8 + 40 * v12 + 32);
      v7 += 40;
      --v6;
    }
    while (v6);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
  }
  *a3 = v8;
  return result;
}

uint64_t closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD v7[4];
  uint64_t v8;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 48))(&v8, v3, v4);
  v7[2] = a2;
  v5 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v7, v8);
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t PersonalPresenceController.assertPresence(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[12] = a1;
  v2[13] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v2[14] = v3;
  v2[15] = *(_QWORD *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v2[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[18] = v5;
  v2[19] = *(_QWORD *)(v5 + 64);
  v2[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PersonalPresenceController.assertPresence(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[17];
  v4 = v0[18];
  v5 = v0[12];
  v6 = v0[13];
  v0[21] = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject();
  v0[22] = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(_QWORD *)(v9 + v8) = v6;
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[22];
  v3 = v0[15];
  v2 = v0[16];
  v4 = v0[14];
  v0[2] = v0;
  v0[3] = PersonalPresenceController.assertPresence(for:);
  v5 = swift_continuation_init();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PersonalPresenceController.assertPresence(for:);
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v0[10] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 184) = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PersonalPresenceController.assertPresence(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[14] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v3[15] = v4;
  v3[16] = *(_QWORD *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PersonalPresenceController.assertPresence(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = v0[12];
  v2 = (char *)v0[20];
  v3 = v0[15];
  v4 = v0[16];
  v5 = type metadata accessor for Logger();
  v0[21] = __swift_project_value_buffer(v5, (uint64_t)static Log.host);
  v6 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v0[22] = v6;
  v6(v2, v1, v3);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[20];
  v11 = v0[15];
  v12 = v0[16];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v28 = v27;
    *(_DWORD *)v13 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Asserting presence for activity ID: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v27, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[20], v0[15]);
  }

  v18 = (char *)v0[18];
  v17 = v0[19];
  v19 = v0[15];
  v21 = v0[12];
  v20 = v0[13];
  v22 = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs;
  v0[23] = v16;
  v0[24] = v22;
  v23 = (uint64_t *)(v20 + v22);
  swift_beginAccess();
  v6(v18, v21, v19);
  v28 = *v23;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)(v17, v18);
  v16(v17, v19);
  v24 = v28;
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *v23 = v24;
  swift_endAccess();
  v25 = (_QWORD *)swift_task_alloc();
  v0[25] = v25;
  *v25 = v0;
  v25[1] = closure #1 in PersonalPresenceController.assertPresence(for:);
  v25[11] = v0[13];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23[2];

  v1 = *(void **)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 176))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 208);
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 120);
    v9 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v23[0] = v22;
    *(_DWORD *)v9 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 72) = v6;
    v12 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v4, v5, "Error asserting presence for activity ID: %s error: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 208);
    (*(void (**)(_QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));

  }
  v16 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 96);
  v18 = (uint64_t *)(*(_QWORD *)(v0 + 104) + *(_QWORD *)(v0 + 192));
  swift_beginAccess();
  v23[0] = *v18;
  swift_bridgeObjectRetain();
  specialized Set._Variant.remove(_:)(v17, v16);
  outlined destroy of UUID?(v16);
  v19 = v23[0];
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *v18 = v19;
  swift_endAccess();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PersonalPresenceController.releasePresence(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[12] = a1;
  v2[13] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v2[14] = v3;
  v2[15] = *(_QWORD *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v2[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[18] = v5;
  v2[19] = *(_QWORD *)(v5 + 64);
  v2[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PersonalPresenceController.releasePresence(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[17];
  v4 = v0[18];
  v5 = v0[12];
  v6 = v0[13];
  v0[21] = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject();
  v0[22] = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(_QWORD *)(v9 + v8) = v6;
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[22];
  v3 = v0[15];
  v2 = v0[16];
  v4 = v0[14];
  v0[2] = v0;
  v0[3] = PersonalPresenceController.releasePresence(for:);
  v5 = swift_continuation_init();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PersonalPresenceController.releasePresence(for:);
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply;
  *(_QWORD *)(v7 + 24) = v6;
  v0[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 184) = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t closure #1 in PersonalPresenceController.releasePresence(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[14] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v3[15] = v4;
  v3[16] = *(_QWORD *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PersonalPresenceController.releasePresence(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = v0[12];
  v2 = v0[20];
  v3 = v0[15];
  v4 = v0[16];
  v5 = type metadata accessor for Logger();
  v0[21] = __swift_project_value_buffer(v5, (uint64_t)static Log.host);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[22] = v6;
  v6(v2, v1, v3);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[20];
  v11 = v0[15];
  v12 = v0[16];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v26 = v25;
    *(_DWORD *)v13 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Releasing presence for activity ID: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v25, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[20], v0[15]);
  }

  v17 = v0[13];
  v18 = v0[14];
  v19 = v0[12];
  v20 = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs;
  v0[23] = v16;
  v0[24] = v20;
  v21 = (uint64_t *)(v17 + v20);
  swift_beginAccess();
  v26 = *v21;
  swift_bridgeObjectRetain();
  specialized Set._Variant.remove(_:)(v19, v18);
  outlined destroy of UUID?(v18);
  v22 = v26;
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *v21 = v22;
  swift_endAccess();
  v23 = (_QWORD *)swift_task_alloc();
  v0[25] = v23;
  *v23 = v0;
  v23[1] = closure #1 in PersonalPresenceController.releasePresence(for:);
  v23[11] = v0[13];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27[2];

  v1 = *(void **)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 176))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 208);
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 120);
    v9 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v27[0] = v26;
    *(_DWORD *)v9 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 72) = v6;
    v12 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v4, v5, "Error releasing presence for activity ID: %s error: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v26, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 208);
    (*(void (**)(_QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));

  }
  v16 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 176);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(char **)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 96);
  v21 = (uint64_t *)(*(_QWORD *)(v0 + 104) + *(_QWORD *)(v0 + 192));
  v22 = *(_QWORD *)(v0 + 120);
  swift_beginAccess();
  v17(v19, v20, v22);
  v27[0] = *v21;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)(v18, v19);
  v16(v18, v22);
  v23 = v27[0];
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *v21 = v23;
  swift_endAccess();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PersonalPresenceController.deinit()
{
  uint64_t v0;

  outlined destroy of AsyncSerialQueue(v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PersonalPresenceController.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of AsyncSerialQueue(v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void PersonalPresenceDataSource.members.getter()
{
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>, (void (*)(_QWORD))type metadata accessor for AddressableMember);
  }
}

void (*PersonalPresenceDataSource.members.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v2;

  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>, (void (*)(_QWORD))type metadata accessor for AddressableMember);
  else
    v2 = MEMORY[0x1E0DEE9E8];
  *a1 = v2;
  return PersonalPresenceDataSource.members.modify;
}

void PersonalPresenceDataSource.members.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized PersonalPresenceDataSource.members.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized PersonalPresenceDataSource.members.setter();
  }
}

uint64_t PersonalPresenceDataSource.presentDevices.getter()
{
  uint64_t v1;

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PersonalPresenceDataSource.presentDevices.setter()
{
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonalPresenceDataSource.presentDevices.modify(uint64_t a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource__presentDevices);
  swift_retain();
  CurrentValueSubject.value.getter();
  return PersonalPresenceDataSource.presentDevices.modify;
}

uint64_t PersonalPresenceDataSource.presentDevices.modify(_QWORD *a1, char a2)
{
  a1[1] = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t PersonalPresenceDataSource.$presentDevices.getter()
{
  return swift_retain();
}

uint64_t PersonalPresenceDataSource.presentDevicesPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(*(_QWORD *)v0 + 160))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, MEMORY[0x1E0C95FB8]);
  v1 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v1;
}

uint64_t PersonalPresenceDataSource.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PersonalPresenceDataSource.cancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_cancellables);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonalPresenceDataSource.cancellables.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t PersonalPresenceDataSource.__allocating_init(activityID:personalPresenceController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = specialized PersonalPresenceDataSource.init(activityID:personalPresenceController:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t PersonalPresenceDataSource.init(activityID:personalPresenceController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = specialized PersonalPresenceDataSource.init(activityID:personalPresenceController:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t PersonalPresenceDataSource.assertPresence(using:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = PersonalPresenceDataSource.assertPresence(using:);
  return PersonalPresenceController.assertPresence(for:)(v1);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t PersonalPresenceDataSource.releasePresence()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = PersonalPresenceDataSource.releasePresence();
  return PersonalPresenceController.releasePresence(for:)(v1);
}

uint64_t PersonalPresenceDataSource.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PersonalPresenceDataSource.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PresenceDataSource.presentDevicesPublisher.getter in conformance PersonalPresenceDataSource()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t protocol witness for PresenceDataSource.presentDevices.getter in conformance PersonalPresenceDataSource()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t protocol witness for PresenceDataSource.members.getter in conformance PersonalPresenceDataSource()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t protocol witness for PresenceDataSource.members.setter in conformance PersonalPresenceDataSource()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t (*protocol witness for PresenceDataSource.members.modify in conformance PersonalPresenceDataSource(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 128))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

void protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for PresenceDataSource.assertPresence(using:) in conformance PersonalPresenceDataSource()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 208) + *(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t protocol witness for PresenceDataSource.releasePresence() in conformance PersonalPresenceDataSource()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 216) + *(_QWORD *)(*(_QWORD *)v0 + 216));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

unint64_t specialized PresenceConfiguration.description.getter(char a1, uint64_t a2, void *a3)
{
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x737265507369202CLL;
  v7._object = (void *)0xEE00203A6C616E6FLL;
  String.append(_:)(v7);
  if ((a1 & 1) != 0)
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t specialized SKPresenceDataSource.presentDevices.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getExtendedExistentialTypeMetadata();
  v0 = type metadata accessor for Array();
  type metadata accessor for CurrentSubject(0, v0, v1, v2);
  return specialized CurrentSubject.wrappedValue.setter();
}

uint64_t type metadata accessor for SKPresenceDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SKPresenceDataSource);
}

uint64_t partial apply for closure #1 in SKPresenceDataSource.presentDevicesChanged(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return SKPresentDevice.context<A>(as:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8), a1);
}

uint64_t partial apply for closure #2 in SKPresenceDataSource.presentDevicesChanged(for:)(_QWORD *a1, _QWORD *a2)
{
  return closure #2 in SKPresenceDataSource.presentDevicesChanged(for:)(a1, a2) & 1;
}

void specialized SKPresenceDataSource.presenceDaemonDisconnected(_:)()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  v8 = v0;
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = *(_QWORD *)&v8[direct field offset for SKPresenceDataSource.presenceIdentifier];
    v7 = *(_QWORD *)&v8[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Presence daemon disconnected for identifier: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v5, -1, -1);
    MEMORY[0x1AF44981C](v4, -1, -1);

  }
  else
  {

  }
}

void specialized SKPresenceDataSource.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type EmptyPresenceContext and conformance EmptyPresenceContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext;
  if (!lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for EmptyPresenceContext, &type metadata for EmptyPresenceContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext;
  if (!lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for EmptyPresenceContext, &type metadata for EmptyPresenceContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext;
  if (!lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for EmptyPresenceContext, &type metadata for EmptyPresenceContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext);
  }
  return result;
}

uint64_t outlined init with take of AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in PersonalPresenceController.presentDevicePublisher(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  closure #1 in PersonalPresenceController.presentDevicePublisher(for:)(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PersonalPresenceController.presentDevicePublisher(for:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t partial apply for closure #1 in PersonalPresenceController.assertPresence(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PersonalPresenceController.assertPresence(for:)(a1, v6, v7);
}

uint64_t sub_1ACD08554()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v4[2] = v2;
  v7 = (uint64_t (*)(void))((char *)v3 + *v3);
  v5 = (_QWORD *)swift_task_alloc();
  v4[3] = v5;
  *v5 = v4;
  v5[1] = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v2, v3);
}

uint64_t sub_1ACD08600()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PersonalPresenceController.releasePresence(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PersonalPresenceController.releasePresence(for:)(a1, v6, v7);
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v4[2] = v2;
  v7 = (uint64_t (*)(void))((char *)v3 + *v3);
  v5 = (_QWORD *)swift_task_alloc();
  v4[3] = v5;
  *v5 = v4;
  v5[1] = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v2, v3);
}

void specialized PersonalPresenceDataSource.members.setter()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (one-time initialization token for host != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  swift_bridgeObjectRetain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136315138;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
    swift_bridgeObjectRetain();
    v5 = Set.description.getter();
    v7 = v6;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Not adding additional remote members to personal presence data source: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v4, -1, -1);
    MEMORY[0x1AF44981C](v3, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized PersonalPresenceDataSource.init(activityID:personalPresenceController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource__presentDevices;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  swift_allocObject();
  *(_QWORD *)(v2 + v6) = CurrentValueSubject.init(_:)();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_cancellables) = MEMORY[0x1E0DEE9E8];
  v7 = v2 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_personalPresenceController) = a2;
  swift_retain();
  PersonalPresenceController.presentDevicePublisher(for:)(a1);
  (*(void (**)(void))(*(_QWORD *)v3 + 160))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, MEMORY[0x1E0C95D90]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v3;
}

uint64_t associated type witness table accessor for PresenceDataSource.Context : PresenceContext in SKPresenceDataSource<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_1ACD08B4C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD08B8C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x90);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD08BCC()
{
  return 16;
}

__n128 sub_1ACD08BD8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1ACD08BE4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD08C24()
{
  swift_bridgeObjectRetain();
  specialized SKPresenceDataSource.presentDevices.setter();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1ACD08C54()
{
  return 16;
}

__n128 sub_1ACD08C60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1ACD08C6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD08C9C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 120);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD08CCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD08CFC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD08D2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD08D5C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of PresenceDataSource.presentDevicesPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PresenceDataSource.presentDevices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PresenceDataSource.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PresenceDataSource.members.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PresenceDataSource.members.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PresenceDataSource.assertPresence(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 64) + *(_QWORD *)(a3 + 64));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PresenceDataSource.releasePresence()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 72) + *(_QWORD *)(a2 + 72));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1, a2);
}

uint64_t destroy for PresenceConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PresenceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PresenceConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PresenceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresenceConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceConfiguration()
{
  return &type metadata for PresenceConfiguration;
}

uint64_t type metadata completion function for SKPresenceDataSource()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SKPresenceDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SKPresenceDataSource.members.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SKPresenceDataSource.members.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SKPresenceDataSource.members.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SKPresenceDataSource.presentDevices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SKPresenceDataSource.$presentDevices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SKPresenceDataSource.presentDevicesPublisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SKPresenceDataSource.__allocating_init(presenceConfiguration:targetQueue:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_BYTE *);
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(uint64_t (**)(_BYTE *))(v1 + 200);
  v7[0] = *(_BYTE *)a1;
  v8 = v2;
  v9 = v3;
  v10 = v4;
  return v5(v7);
}

uint64_t dispatch thunk of SKPresenceDataSource.assertPresence(using:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD0);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1);
}

uint64_t dispatch thunk of SKPresenceDataSource.releasePresence()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

uint64_t dispatch thunk of SKPresenceDataSource.inviteHandle(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xE0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v9(a1, a2);
}

uint64_t dispatch thunk of SKPresenceDataSource.inviteHandles(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xE8);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1);
}

uint64_t dispatch thunk of SKPresenceDataSource.removeHandle(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xF0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v9(a1, a2);
}

uint64_t dispatch thunk of SKPresenceDataSource.removeHandles(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF8);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1);
}

uint64_t dispatch thunk of SKPresenceDataSource.presentDevicesChanged(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SKPresenceDataSource.invitedHandlesChanged(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SKPresenceDataSource.presenceDaemonDisconnected(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t ObjC metadata update function for PersonalPresenceController()
{
  return type metadata accessor for PersonalPresenceController(0);
}

uint64_t type metadata accessor for PersonalPresenceController(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PersonalPresenceController);
}

uint64_t type metadata completion function for PersonalPresenceController()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AsyncSerialQueue();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PersonalPresenceController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PersonalPresenceController.__allocating_init<A>(dataSource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t ObjC metadata update function for PersonalPresenceDataSource()
{
  return type metadata accessor for PersonalPresenceDataSource(0);
}

uint64_t type metadata accessor for PersonalPresenceDataSource(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PersonalPresenceDataSource);
}

uint64_t type metadata completion function for PersonalPresenceDataSource()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PersonalPresenceDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevices.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevices.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevices.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.$presentDevices.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevicesPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.cancellables.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.cancellables.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.cancellables.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.__allocating_init(activityID:personalPresenceController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.assertPresence(using:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 208) + *(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.releasePresence()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 216) + *(_QWORD *)(*(_QWORD *)v0 + 216));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<TUConversationVirtualParticipant>, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<BackgroundSessionManagerHostConnection>, (void (*)(_QWORD))type metadata accessor for BackgroundSessionManagerHostConnection);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>, (void (*)(_QWORD))type metadata accessor for ConversationManagerHostConnection);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationParticipant>, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<RBSProcessIdentifier>, &lazy cache variable for type metadata for RBSProcessIdentifier);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v4 = a1;
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      v6 = static _SetStorage.allocate(capacity:)();
      if (!v5)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v6 = MEMORY[0x1E0DEE9E8];
  if (v5)
    goto LABEL_8;
LABEL_4:
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    return;
LABEL_9:
  v9 = v6 + 56;
  v46 = v7;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v10 = 0;
    v43 = v4;
    while (1)
    {
      v11 = MEMORY[0x1AF448904](v10, v4);
      v12 = __OFADD__(v10++, 1);
      if (v12)
      {
        __break(1u);
        goto LABEL_37;
      }
      v13 = v11;
      v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v15 = -1 << *(_BYTE *)(v6 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
      v19 = 1 << v16;
      if (((1 << v16) & v18) != 0)
      {
        type metadata accessor for TUConversationActivity(0, a3);
        v20 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
        {
LABEL_11:
          swift_unknownObjectRelease();
          v4 = v43;
          goto LABEL_12;
        }
        v22 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v22;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          if ((v18 & (1 << v16)) == 0)
            break;
          v23 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
          v24 = static NSObject.== infix(_:_:)();

          if ((v24 & 1) != 0)
            goto LABEL_11;
        }
        v4 = v43;
      }
      *(_QWORD *)(v9 + 8 * v17) = v19 | v18;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v16) = v13;
      v25 = *(_QWORD *)(v6 + 16);
      v12 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v12)
        goto LABEL_38;
      *(_QWORD *)(v6 + 16) = v26;
LABEL_12:
      if (v10 == v46)
        return;
    }
  }
  v27 = 0;
  v44 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v27 != v44)
  {
    v28 = *(_QWORD *)(v6 + 40);
    v29 = *(id *)(v4 + 32 + 8 * v27);
    v30 = NSObject._rawHashValue(seed:)(v28);
    v31 = -1 << *(_BYTE *)(v6 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
    v35 = 1 << v32;
    if (((1 << v32) & v34) != 0)
    {
      type metadata accessor for TUConversationActivity(0, a3);
      v36 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v32);
      v37 = static NSObject.== infix(_:_:)();

      if ((v37 & 1) != 0)
        goto LABEL_24;
      v38 = ~v31;
      v32 = (v32 + 1) & v38;
      v33 = v32 >> 6;
      v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
      v35 = 1 << v32;
      if ((v34 & (1 << v32)) != 0)
      {
        while (1)
        {
          v39 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v32);
          v40 = static NSObject.== infix(_:_:)();

          if ((v40 & 1) != 0)
            break;
          v32 = (v32 + 1) & v38;
          v33 = v32 >> 6;
          v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
          v35 = 1 << v32;
          if ((v34 & (1 << v32)) == 0)
            goto LABEL_32;
        }
LABEL_24:

        v7 = v46;
        goto LABEL_25;
      }
LABEL_32:
      v7 = v46;
    }
    *(_QWORD *)(v9 + 8 * v33) = v35 | v34;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v32) = v29;
    v41 = *(_QWORD *)(v6 + 16);
    v12 = __OFADD__(v41, 1);
    v42 = v41 + 1;
    if (v12)
      goto LABEL_39;
    *(_QWORD *)(v6 + 16) = v42;
LABEL_25:
    if (++v27 == v7)
      return;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, void (*a3)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v4 = a1;
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      v6 = static _SetStorage.allocate(capacity:)();
      if (!v5)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v6 = MEMORY[0x1E0DEE9E8];
  if (v5)
    goto LABEL_8;
LABEL_4:
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    return;
LABEL_9:
  v9 = v6 + 56;
  v46 = v7;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v10 = 0;
    v43 = v4;
    while (1)
    {
      v11 = MEMORY[0x1AF448904](v10, v4);
      v12 = __OFADD__(v10++, 1);
      if (v12)
      {
        __break(1u);
        goto LABEL_37;
      }
      v13 = v11;
      v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v15 = -1 << *(_BYTE *)(v6 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
      v19 = 1 << v16;
      if (((1 << v16) & v18) != 0)
      {
        a3(0);
        v20 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
        {
LABEL_11:
          swift_unknownObjectRelease();
          v4 = v43;
          goto LABEL_12;
        }
        v22 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v22;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          if ((v18 & (1 << v16)) == 0)
            break;
          v23 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
          v24 = static NSObject.== infix(_:_:)();

          if ((v24 & 1) != 0)
            goto LABEL_11;
        }
        v4 = v43;
      }
      *(_QWORD *)(v9 + 8 * v17) = v19 | v18;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v16) = v13;
      v25 = *(_QWORD *)(v6 + 16);
      v12 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v12)
        goto LABEL_38;
      *(_QWORD *)(v6 + 16) = v26;
LABEL_12:
      if (v10 == v46)
        return;
    }
  }
  v27 = 0;
  v44 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v27 != v44)
  {
    v28 = *(_QWORD *)(v6 + 40);
    v29 = *(id *)(v4 + 32 + 8 * v27);
    v30 = NSObject._rawHashValue(seed:)(v28);
    v31 = -1 << *(_BYTE *)(v6 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
    v35 = 1 << v32;
    if (((1 << v32) & v34) != 0)
    {
      a3(0);
      v36 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v32);
      v37 = static NSObject.== infix(_:_:)();

      if ((v37 & 1) != 0)
        goto LABEL_24;
      v38 = ~v31;
      v32 = (v32 + 1) & v38;
      v33 = v32 >> 6;
      v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
      v35 = 1 << v32;
      if ((v34 & (1 << v32)) != 0)
      {
        while (1)
        {
          v39 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v32);
          v40 = static NSObject.== infix(_:_:)();

          if ((v40 & 1) != 0)
            break;
          v32 = (v32 + 1) & v38;
          v33 = v32 >> 6;
          v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
          v35 = 1 << v32;
          if ((v34 & (1 << v32)) == 0)
            goto LABEL_32;
        }
LABEL_24:

        v7 = v46;
        goto LABEL_25;
      }
LABEL_32:
      v7 = v46;
    }
    *(_QWORD *)(v9 + 8 * v33) = v35 | v34;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v32) = v29;
    v41 = *(_QWORD *)(v6 + 16);
    v12 = __OFADD__(v41, 1);
    v42 = v41 + 1;
    if (v12)
      goto LABEL_39;
    *(_QWORD *)(v6 + 16) = v42;
LABEL_25:
    if (++v27 == v7)
      return;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t partial apply for closure #1 in PersonalPresenceDataSource.init(activityID:personalPresenceController:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)()
{
  return specialized closure #1 in Sequence<>.contains(_:)() & 1;
}

{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_1ACD09F8C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SKPresenceDataSource.members.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t outlined consume of Set<AddressableMember>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t SharableObjectIdentifierEncoder.userInfo.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SharableObjectIdentifierEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SharableObjectIdentifierEncoder.userInfo.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t SharableObjectIdentifierEncoder.encode<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v9 = a1;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 88))();
  v4 = type metadata accessor for _SharableObjectIdentifierEncoder();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v5 + 24) = v3;
  v6 = v5
     + OBJC_IVAR____TtC14CopresenceCoreP33_E889BDE102B72D706F1FB007A250847732_SharableObjectIdentifierEncoder_output;
  SHA256.init()();
  v8[3] = v4;
  v8[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  v8[0] = v5;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v4);
  swift_retain();
  _SharableObjectIdentifierEncoder.encode<A>(_:)();
  if (!v2)
  {
    swift_beginAccess();
    outlined init with copy of SharableObjectIdentifier(v6, v9);
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
}

uint64_t type metadata accessor for _SharableObjectIdentifierEncoder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _SharableObjectIdentifierEncoder;
  if (!type metadata singleton initialization cache for _SharableObjectIdentifierEncoder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SharableObjectIdentifierEncoder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharableObjectIdentifierEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SharableObjectIdentifierEncoder.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  return v0;
}

uint64_t SharableObjectIdentifierEncoder.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  return v0;
}

uint64_t _SharableObjectIdentifierEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v5 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, a2, a3, a4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v4 + 16);
  v7 = (_QWORD *)swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7[3] = v6;
  v7[4] = v8;
  v7[2] = v4;
  MEMORY[0x1AF44972C](&protocol conformance descriptor for _SharableObjectIdentifierKeyedEncodingContainer<A>, v5);
  return KeyedEncodingContainer.init<A>(_:)();
}

_QWORD *_SharableObjectIdentifierKeyedEncodingContainer.__allocating_init(referencing:codingPath:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;

  v4 = (_QWORD *)swift_allocObject();
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v4[3] = a2;
  v4[4] = v5;
  v4[2] = a1;
  return v4;
}

uint64_t _SharableObjectIdentifierEncoder.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SharableObjectIdentifier(v0 + OBJC_IVAR____TtC14CopresenceCoreP33_E889BDE102B72D706F1FB007A250847732_SharableObjectIdentifierEncoder_output);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance _SharableObjectIdentifierEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance _SharableObjectIdentifierEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _SharableObjectIdentifierEncoder.container<A>(keyedBy:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance _SharableObjectIdentifierEncoder@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 16);
  a1[3] = &unk_1E5C7E400;
  a1[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = 0;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance _SharableObjectIdentifierEncoder@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.deinit()
{
  uint64_t v0;

  _SharableObjectIdentifierKeyedEncodingContainer.finalize()();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.__deallocating_deinit()
{
  _SharableObjectIdentifierKeyedEncodingContainer.deinit();
  return swift_deallocClassInstance();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.finalize()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v2 = (_QWORD *)(v0 + 32);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain_n();
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  v11 = v4;
  specialized MutableCollection<>.sort(by:)(&v11);
  if (v1)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = v11;
    v6 = v11[2];
    if (v6)
    {
      swift_retain();
      v7 = v5 + 7;
      do
      {
        v8 = (void (*)(uint64_t))*(v7 - 1);
        swift_retain_n();
        v9 = swift_bridgeObjectRetain();
        v8(v9);
        swift_bridgeObjectRelease();
        swift_release_n();
        v7 += 4;
        --v6;
      }
      while (v6);
      swift_release();
    }
    swift_release();
    *v2 = MEMORY[0x1E0DEE9E0];
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v2 = v1;
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_BYTE *)(v8 + 24) = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(_QWORD *)(v9 + 24) = v8;
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v9, v4, v6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 32) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  v8 = v7;
  v9 = *(_QWORD *)(v2 + 16);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v9;
  v10[3] = a1;
  v10[4] = a2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain_n();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v11, v6, v8, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 32) = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C82710, (uint64_t)&unk_1E5C82738, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C825D0, (uint64_t)&unk_1E5C825F8, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C82580, (uint64_t)&unk_1E5C825A8, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C82440, (uint64_t)&unk_1E5C82468, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v2 = v1;
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(double *)(v8 + 24) = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(_QWORD *)(v9 + 24) = v8;
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v9, v4, v6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 32) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v2 = v1;
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(float *)(v8 + 24) = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(_QWORD *)(v9 + 24) = v8;
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v9, v4, v6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 32) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C826C0, (uint64_t)&unk_1E5C826E8, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C82530, (uint64_t)&unk_1E5C82558, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C82670, (uint64_t)&unk_1E5C82698, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C824E0, (uint64_t)&unk_1E5C82508, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(int a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C82620, (uint64_t)&unk_1E5C82648, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1E5C82490, (uint64_t)&unk_1E5C824B8, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v4 = a2;
  MEMORY[0x1AF448244](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v9 = dispatch thunk of CodingKey.stringValue.getter();
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a5;
  *(_QWORD *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, char a2)
{
  char v4;
  _BYTE v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v4 = a2;
  MEMORY[0x1AF448244](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v9 = dispatch thunk of CodingKey.stringValue.getter();
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_WORD *)(v13 + 24) = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a5;
  *(_QWORD *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, __int16 a2)
{
  __int16 v4;
  _BYTE v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v4 = a2;
  MEMORY[0x1AF448244](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v9 = dispatch thunk of CodingKey.stringValue.getter();
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_DWORD *)(v13 + 24) = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a5;
  *(_QWORD *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, int a2)
{
  int v4;
  _BYTE v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v4 = a2;
  MEMORY[0x1AF448244](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v9 = dispatch thunk of CodingKey.stringValue.getter();
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a5;
  *(_QWORD *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = v4;
  v32 = a1;
  v33 = a4;
  v31 = a3;
  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1);
  v30 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v15 + 88);
  v16 = dispatch thunk of CodingKey.stringValue.getter();
  v34 = v17;
  v35 = v16;
  v28 = *(_QWORD *)(v5 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v27 = v7;
  v18 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v31);
  v19 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v20 = (v13 + *(unsigned __int8 *)(v7 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = v11;
  *((_QWORD *)v21 + 3) = v18;
  v22 = v28;
  v23 = v33;
  *((_QWORD *)v21 + 4) = v29;
  *((_QWORD *)v21 + 5) = v23;
  *((_QWORD *)v21 + 6) = v22;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v21[v19], v14, v11);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v21[v20], v30, v18);
  swift_beginAccess();
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:), (uint64_t)v21, v35, v34, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v5 + 32) = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *);
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[7];

  v29 = a5;
  v31[6] = a7;
  v27 = a6;
  v28 = a3;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - v13;
  v15 = *(void (**)(char *))(v9 + 16);
  v15((char *)&v26 - v13);
  v16 = a1 + 16;
  swift_beginAccess();
  v17 = *(_QWORD **)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 16) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *(_QWORD *)v16 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
    *(_QWORD *)v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
  ((void (*)(char *, char *, uint64_t))v15)(v12, v14, a4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, (uint64_t)v12, (uint64_t *)(a1 + 16), a4, v27);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a4);
  swift_endAccess();
  v31[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  v31[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  v31[0] = a1;
  swift_retain();
  v21 = v30;
  dispatch thunk of Encodable.encode(to:)();
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  if (!v21)
  {
    swift_beginAccess();
    v23 = *(_QWORD **)v16;
    if (*(_QWORD *)(*(_QWORD *)v16 + 16))
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v24 = v23[2];
        if (v24)
        {
LABEL_9:
          v25 = v24 - 1;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v23[5 * v24 - 1]);
          v23[2] = v25;
          *(_QWORD *)v16 = v23;
          return swift_endAccess();
        }
LABEL_13:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
    v23 = (_QWORD *)result;
    v24 = *(_QWORD *)(result + 16);
    if (v24)
      goto LABEL_9;
    goto LABEL_13;
  }
  return result;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v5 = v4;
  v35 = a2;
  v36 = a3;
  v34[1] = a4;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v34 - v12;
  v14 = *(void (**)(char *))(v8 + 16);
  v34[0] = v15;
  v14((char *)v34 - v12);
  v16 = v5 + 3;
  swift_beginAccess();
  v17 = (_QWORD *)v5[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[3] = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *v16 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
    *v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
  ((void (*)(char *, char *, uint64_t))v14)(v11, v13, v7);
  v21 = *(_QWORD *)(v6 + 88);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, (uint64_t)v11, v5 + 3, v7, v21);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v22 = v5[3];
  swift_endAccess();
  v24 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, v35, v36, v23);
  v25 = v5[2];
  v26 = (_QWORD *)swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v26[3] = v22;
  v26[4] = v27;
  v26[2] = v25;
  v28 = dispatch thunk of CodingKey.stringValue.getter();
  v30 = v29;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = v7;
  v31[3] = v21;
  v31[4] = v26;
  swift_beginAccess();
  swift_retain();
  v32 = swift_isUniquelyReferenced_nonNull_native();
  v37 = v5[4];
  v5[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:), (uint64_t)v31, v28, v30, v32);
  v5[4] = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  v38 = v26;
  MEMORY[0x1AF44972C](&protocol conformance descriptor for _SharableObjectIdentifierKeyedEncodingContainer<A>, v24);
  KeyedEncodingContainer.init<A>(_:)();
  return $defer #1 <A><A1>() in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v5);
}

uint64_t $defer #1 <A><A1>() in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 24);
  swift_beginAccess();
  v3 = *(_QWORD **)(a1 + 24);
  if (!v3[2])
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_4;
    goto LABEL_7;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v5 = v3[2];
  if (v5)
  {
LABEL_4:
    v6 = v5 - 1;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v3[5 * v5 - 1]);
    v3[2] = v6;
    *v2 = v3;
    return swift_endAccess();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v3 = v2;
  v31 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - v10;
  v12 = *(void (**)(char *))(v6 + 16);
  v30 = v13;
  v12((char *)&v30 - v10);
  v14 = v3 + 3;
  swift_beginAccess();
  v15 = (_QWORD *)v3[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[3] = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    *v14 = v15;
  }
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
    *v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
  ((void (*)(char *, char *, uint64_t))v12)(v9, v11, v5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, (uint64_t)v9, v3 + 3, v5, *(_QWORD *)(v4 + 88));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v19 = v3[3];
  swift_endAccess();
  v20 = v3[2];
  v21 = type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer();
  v22 = (_QWORD *)swift_allocObject();
  v23 = MEMORY[0x1E0DEE9D8];
  v22[3] = v19;
  v22[4] = v23;
  v22[2] = v20;
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = dispatch thunk of CodingKey.stringValue.getter();
  v26 = v25;
  swift_beginAccess();
  swift_retain();
  v27 = swift_isUniquelyReferenced_nonNull_native();
  v32 = v3[4];
  v3[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer(), (uint64_t)v22, v24, v26, v27);
  v3[4] = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  v28 = v31;
  v31[3] = v21;
  v28[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _DeferredSharableObjectIdentifierUnkeyedEncodingContainer and conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer, (uint64_t (*)(uint64_t))type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer, (uint64_t)&protocol conformance descriptor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer);
  *v28 = v22;
  return $defer #1 <A><A1>() in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v3);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.superEncoder()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(char a1)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(double a1)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(float a1)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(char a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(__int16 a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(int a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E0DED960]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E0DED968]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;

  v11 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), a4);
  return a6(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a5 + 80), *(_QWORD *)(a5 + 88), a4);
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), a4);
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E0DED8E0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E0DED8F0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E0DED920]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E0DED8F8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E0DED948]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED8E8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED918]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED940]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED908]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED928]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED910]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED938]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x1E0DED930]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x1E0DED950]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return a5(a1 & 0x1FF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return a5(a1 & 0x1FFFF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return a5(a1 | ((HIDWORD(a1) & 1) << 32), a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;

  v10 = a2 & 1;
  v11 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), a4);
  return a6(a1, v10, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;

  v12 = a3 & 1;
  v13 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a5 + 80), *(_QWORD *)(a5 + 88), a4);
  return a7(a1, a2, v12, a4, v13, a6);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, *(_QWORD *)(a5 + 80), *(_QWORD *)(a5 + 88), a4);
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.superEncoder() in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>@<X0>(_QWORD *a1@<X8>)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.superEncoder()(a1);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_BYTE *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(_QWORD *)(v5 + 24) = v4;
  v6 = (_QWORD *)(v1 + 32);
  swift_beginAccess();
  v7 = *(_QWORD **)(v1 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  swift_endAccess();
  return swift_release();
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C82210, (uint64_t)&unk_1E5C82238, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C82080, (uint64_t)&unk_1E5C820A8, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v8 = (_QWORD *)(v2 + 32);
  swift_beginAccess();
  v9 = *(_QWORD **)(v2 + 32);
  swift_retain_n();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 32) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *v8 = v9;
  }
  v9[2] = v12 + 1;
  v13 = &v9[2 * v12];
  v13[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v13[5] = v7;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  specialized SharableObjectIdentifier.update<A>(_:)(a2, a3);
  return swift_endAccess();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(double *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(_QWORD *)(v5 + 24) = v4;
  v6 = (_QWORD *)(v1 + 32);
  swift_beginAccess();
  v7 = *(_QWORD **)(v1 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(double a1)
{
  double v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(float *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(_QWORD *)(v5 + 24) = v4;
  v6 = (_QWORD *)(v1 + 32);
  swift_beginAccess();
  v7 = *(_QWORD **)(v1 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(float a1)
{
  float v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(uint64_t a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C82260, (uint64_t)&unk_1E5C82288, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C82120, (uint64_t)&unk_1E5C82148, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C820D0, (uint64_t)&unk_1E5C820F8, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C81F90, (uint64_t)&unk_1E5C81FB8, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ());
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(__int16 a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C821C0, (uint64_t)&unk_1E5C821E8, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C82030, (uint64_t)&unk_1E5C82058, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(int a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C82170, (uint64_t)&unk_1E5C82198, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1E5C81FE0, (uint64_t)&unk_1E5C82008, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v9 = *(_QWORD *)(v5 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_BYTE *)(v10 + 24) = a1;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = (_QWORD *)(v5 + 32);
  swift_beginAccess();
  v13 = *(_QWORD **)(v5 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *v12 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    *v12 = v13;
  }
  v13[2] = v16 + 1;
  v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v9 = *(_QWORD *)(v5 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_WORD *)(v10 + 24) = a1;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = (_QWORD *)(v5 + 32);
  swift_beginAccess();
  v13 = *(_QWORD **)(v5 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *v12 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    *v12 = v13;
  }
  v13[2] = v16 + 1;
  v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v9 = *(_QWORD *)(v5 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_DWORD *)(v10 + 24) = a1;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = (_QWORD *)(v5 + 32);
  swift_beginAccess();
  v13 = *(_QWORD **)(v5 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *v12 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    *v12 = v13;
  }
  v13[2] = v16 + 1;
  v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v9 = *(_QWORD *)(v5 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = a1;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = (_QWORD *)(v5 + 32);
  swift_beginAccess();
  v13 = *(_QWORD **)(v5 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *v12 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    *v12 = v13;
  }
  v13[2] = v16 + 1;
  v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v3 + 16);
  (*(void (**)(char *))(v6 + 16))(v8);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v7 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v12 + v10, v8, a2);
  *(_QWORD *)(v12 + v11) = v9;
  v13 = (_QWORD *)(v3 + 32);
  swift_beginAccess();
  v14 = *(_QWORD **)(v3 + 32);
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 32) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    *v13 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
    *v13 = v14;
  }
  v14[2] = v17 + 1;
  v18 = &v14[2 * v17];
  v18[4] = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:);
  v18[5] = v12;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v4[5];

  v4[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  v4[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  v4[0] = a2;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v5 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, a2, a3, a4);
  v6 = v4[2];
  v7 = v4[3];
  v8 = (_QWORD *)swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v8[3] = v7;
  v8[4] = v9;
  v8[2] = v6;
  v10 = v4 + 4;
  swift_beginAccess();
  v11 = (_QWORD *)v4[4];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[4] = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    *v10 = v11;
  }
  v14 = v11[2];
  v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    *v10 = v11;
  }
  v11[2] = v14 + 1;
  v15 = &v11[2 * v14];
  v15[4] = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:);
  v15[5] = v8;
  swift_endAccess();
  MEMORY[0x1AF44972C](&protocol conformance descriptor for _SharableObjectIdentifierKeyedEncodingContainer<A>, v5);
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t result;

  v3 = v1[2];
  v4 = v1[3];
  v5 = type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer();
  v6 = (_QWORD *)swift_allocObject();
  v7 = MEMORY[0x1E0DEE9D8];
  v6[3] = v4;
  v6[4] = v7;
  v6[2] = v3;
  v8 = v1 + 4;
  swift_beginAccess();
  v9 = (_QWORD *)v1[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[4] = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *v8 = v9;
  }
  v9[2] = v12 + 1;
  v13 = &v9[2 * v12];
  v13[4] = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer();
  v13[5] = v6;
  swift_endAccess();
  a1[3] = v5;
  result = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _DeferredSharableObjectIdentifierUnkeyedEncodingContainer and conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer, (uint64_t (*)(uint64_t))type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer, (uint64_t)&protocol conformance descriptor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer);
  a1[4] = result;
  *a1 = v6;
  return result;
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = (_QWORD *)(a1 + 32);
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    v6 = v4 + 40;
    while (1)
    {
      v7 = *(void (**)(uint64_t))(v6 - 8);
      v8 = swift_retain();
      v7(v8);
      if (v1)
        break;
      swift_release();
      v6 += 16;
      if (!--v5)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease_n();
    return swift_release();
  }
  else
  {
LABEL_6:
    *v3 = MEMORY[0x1E0DEE9D8];
    return swift_bridgeObjectRelease();
  }
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(char a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, a2);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(double a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(float a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(__int16 a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(int a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedUnkeyedContainer() in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer@<X0>(_QWORD *a1@<X8>)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _SharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD v7[5];

  v2 = *v0;
  v7[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  v7[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  v7[0] = v2;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  if (!v1)
  {
    v4 = v0[2];
    v5 = __OFADD__(v4, 1);
    v6 = v4 + 1;
    if (v5)
      __break(1u);
    else
      v0[2] = v6;
  }
  return result;
}

void _SharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v5 = v4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v4[2] = v7;
    v8 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(0, a2, a3, a4);
    v10 = *v4;
    v9 = v4[1];
    v11 = (_QWORD *)swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v11[3] = v9;
    v11[4] = v12;
    v11[2] = v10;
    MEMORY[0x1AF44972C](&protocol conformance descriptor for _SharableObjectIdentifierKeyedEncodingContainer<A>, v8);
    KeyedEncodingContainer.init<A>(_:)();
  }
}

uint64_t protocol witness for UnkeyedEncodingContainer.codingPath.getter in conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  char v8;
  _BYTE v9[24];
  uint64_t v10;

  v2 = v1;
  v10 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v8 = a1;
  MEMORY[0x1AF448244](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  result = swift_endAccess();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  *(_QWORD *)(v2 + 16) = v7;
  return result;
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v3 = v2;
  swift_beginAccess();
  specialized SharableObjectIdentifier.update<A>(_:)(a1, a2);
  result = swift_endAccess();
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    *(_QWORD *)(v3 + 16) = v9;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  _BYTE v8[24];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v7 = a1;
  MEMORY[0x1AF448244](&v7, v8);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  result = swift_endAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  *(_QWORD *)(v1 + 16) = v6;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  float v7;
  _BYTE v8[24];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v7 = a1;
  MEMORY[0x1AF448244](&v7, v8);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  result = swift_endAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  *(_QWORD *)(v1 + 16) = v6;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;

  v2 = v1;
  v10 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v8 = a1;
  MEMORY[0x1AF448244](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  result = swift_endAccess();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  *(_QWORD *)(v2 + 16) = v7;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(__int16 a1)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  __int16 v8;
  _BYTE v9[24];
  uint64_t v10;

  v2 = v1;
  v10 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v8 = a1;
  MEMORY[0x1AF448244](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  result = swift_endAccess();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  *(_QWORD *)(v2 + 16) = v7;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(int a1)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  _BYTE v9[24];
  uint64_t v10;

  v2 = v1;
  v10 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v8 = a1;
  MEMORY[0x1AF448244](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  result = swift_endAccess();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  *(_QWORD *)(v2 + 16) = v7;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  return _SharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedUnkeyedContainer() in conformance _SharableObjectIdentifierUnkeyedEncodingContainer@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v3[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v3[2] = v6;
    v7 = *v3;
    v8 = v3[1];
    a3[3] = result;
    a3[4] = a2;
    *a3 = v7;
    a3[1] = v8;
    a3[2] = 0;
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _SharableObjectIdentifierUnkeyedEncodingContainer@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _SharableObjectIdentifierEncoder.encode<A>(_:)()
{
  uint64_t v0;
  _QWORD v2[5];

  v2[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  v2[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (uint64_t (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder, (uint64_t)&protocol conformance descriptor for _SharableObjectIdentifierEncoder);
  v2[0] = v0;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance _SharableObjectIdentifierEncoder()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(char a1)
{
  char v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  specialized SharableObjectIdentifier.update<A>(_:)(a1, a2);
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(double a1)
{
  double v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(float a1)
{
  float v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(uint64_t a1)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(__int16 a1)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

{
  __int16 v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(int a1)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

{
  int v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v3 = a1;
  MEMORY[0x1AF448244](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance _SharableObjectIdentifierEncoder()
{
  return _SharableObjectIdentifierEncoder.encode<A>(_:)();
}

uint64_t outlined init with copy of SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharableObjectIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACD0F5F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD0F628(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 96);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for SharableObjectIdentifierEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for SharableObjectIdentifierEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.userInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.userInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.userInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.encode<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t ObjC metadata update function for _SharableObjectIdentifierEncoder()
{
  return type metadata accessor for _SharableObjectIdentifierEncoder();
}

uint64_t type metadata completion function for _SharableObjectIdentifierEncoder()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SHA256();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for _SharableObjectIdentifierKeyedEncodingContainer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _SharableObjectIdentifierKeyedEncodingContainer);
}

uint64_t type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for _SharableObjectIdentifierUnkeyedEncodingContainer, &unk_1E5C7E400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer()()
{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(v0);
}

uint64_t partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  return _SharableObjectIdentifierKeyedEncodingContainer.finalize()();
}

uint64_t sub_1ACD0F840()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  uint64_t v110;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v108 = result;
  v105 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v96 = v11;
      v107 = v8;
      if (v12 >= 2)
      {
        v97 = *v105;
        do
        {
          v98 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v97)
            goto LABEL_159;
          v99 = v96;
          v100 = *(_QWORD *)&v96[16 * v98 + 32];
          v101 = *(_QWORD *)&v96[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v97 + 32 * v100), (char *)(v97 + 32 * *(_QWORD *)&v96[16 * v12 + 16]), v97 + 32 * v101, __dst);
          if (v1)
            break;
          if (v101 < v100)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
          if (v98 >= *((_QWORD *)v99 + 2))
            goto LABEL_149;
          v102 = &v99[16 * v98 + 32];
          *(_QWORD *)v102 = v100;
          *((_QWORD *)v102 + 1) = v101;
          v103 = *((_QWORD *)v99 + 2);
          if (v12 > v103)
            goto LABEL_150;
          memmove(&v99[16 * v12 + 16], &v99[16 * v12 + 32], 16 * (v103 - v12));
          v96 = v99;
          *((_QWORD *)v99 + 2) = v103 - 1;
          v12 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v107 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: ()));
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v107 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v106 = *a1 + 8;
  v104 = *a1 - 32;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v109 = v3;
  v110 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 32 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 32 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v106 + 32 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 32 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 4;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 32 * v20;
        v26 = 32 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = (_OWORD *)(v10 + v26);
            v30 = v10 + v25;
            v31 = *(_QWORD *)(v10 + v26);
            v32 = *(_QWORD *)(v10 + v26 + 24);
            v33 = *(_OWORD *)(v10 + v26 + 8);
            v34 = *(_OWORD *)(v10 + v25 - 16);
            *v29 = *(_OWORD *)(v10 + v25 - 32);
            v29[1] = v34;
            *(_QWORD *)(v30 - 32) = v31;
            *(_OWORD *)(v30 - 24) = v33;
            *(_QWORD *)(v30 - 8) = v32;
          }
          ++v28;
          v25 -= 32;
          v26 += 32;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v108)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
    {
      v10 = v110;
      while (1)
      {
        v50 = v12 - 1;
        if (v12 >= 4)
        {
          v55 = &v48[16 * v12];
          v56 = *((_QWORD *)v55 - 8);
          v57 = *((_QWORD *)v55 - 7);
          v61 = __OFSUB__(v57, v56);
          v58 = v57 - v56;
          if (v61)
            goto LABEL_135;
          v60 = *((_QWORD *)v55 - 6);
          v59 = *((_QWORD *)v55 - 5);
          v61 = __OFSUB__(v59, v60);
          v53 = v59 - v60;
          v54 = v61;
          if (v61)
            goto LABEL_136;
          v62 = v12 - 2;
          v63 = &v48[16 * v12 - 32];
          v65 = *(_QWORD *)v63;
          v64 = *((_QWORD *)v63 + 1);
          v61 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v61)
            goto LABEL_138;
          v61 = __OFADD__(v53, v66);
          v67 = v53 + v66;
          if (v61)
            goto LABEL_141;
          if (v67 >= v58)
          {
            v85 = &v48[16 * v50];
            v87 = *(_QWORD *)v85;
            v86 = *((_QWORD *)v85 + 1);
            v61 = __OFSUB__(v86, v87);
            v88 = v86 - v87;
            if (v61)
              goto LABEL_145;
            v78 = v53 < v88;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v79 = *((_QWORD *)v11 + 4);
            v80 = *((_QWORD *)v11 + 5);
            v61 = __OFSUB__(v80, v79);
            v72 = v80 - v79;
            v73 = v61;
            goto LABEL_99;
          }
          v52 = *((_QWORD *)v11 + 4);
          v51 = *((_QWORD *)v11 + 5);
          v61 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          v54 = v61;
        }
        if ((v54 & 1) != 0)
          goto LABEL_137;
        v62 = v12 - 2;
        v68 = &v48[16 * v12 - 32];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v71 = __OFSUB__(v69, v70);
        v72 = v69 - v70;
        v73 = v71;
        if (v71)
          goto LABEL_140;
        v74 = &v48[16 * v50];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v61 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v61)
          goto LABEL_143;
        if (__OFADD__(v72, v77))
          goto LABEL_144;
        if (v72 + v77 >= v53)
        {
          v78 = v53 < v77;
LABEL_105:
          if (v78)
            v50 = v62;
          goto LABEL_107;
        }
LABEL_99:
        if ((v73 & 1) != 0)
          goto LABEL_139;
        v81 = &v48[16 * v50];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v61 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v61)
          goto LABEL_142;
        if (v84 < v72)
          goto LABEL_15;
LABEL_107:
        v89 = v50 - 1;
        if (v50 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v90 = v10;
        v91 = &v48[16 * v89];
        v92 = *(_QWORD *)v91;
        v93 = &v48[16 * v50];
        v94 = *((_QWORD *)v93 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 32 * *(_QWORD *)v91), (char *)(v90 + 32 * *(_QWORD *)v93), v90 + 32 * v94, __dst);
        if (v1)
          goto LABEL_115;
        if (v94 < v92)
          goto LABEL_132;
        if (v50 > *((_QWORD *)v11 + 2))
          goto LABEL_133;
        *(_QWORD *)v91 = v92;
        *(_QWORD *)&v48[16 * v89 + 8] = v94;
        v95 = *((_QWORD *)v11 + 2);
        if (v50 >= v95)
          goto LABEL_134;
        v12 = v95 - 1;
        memmove(&v48[16 * v50], v93 + 16, 16 * (v95 - 1 - v50));
        *((_QWORD *)v11 + 2) = v95 - 1;
        v78 = v95 > 2;
        v10 = v110;
        if (!v78)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v110;
LABEL_15:
    v3 = v109;
    if (v9 >= v109)
    {
      v8 = v107;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v108))
    goto LABEL_153;
  if (v13 + v108 >= v3)
    v35 = v3;
  else
    v35 = v13 + v108;
  if (v35 >= v13)
  {
    if (v9 != v35)
    {
      v36 = v104 + 32 * v9;
      do
      {
        v37 = (uint64_t *)(v10 + 32 * v9);
        v38 = *v37;
        v39 = v37[1];
        v40 = v13;
        v41 = v36;
        do
        {
          v42 = v38 == *(_QWORD *)v41 && v39 == *(_QWORD *)(v41 + 8);
          if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v38 = *(_QWORD *)(v41 + 32);
          v43 = *(_QWORD *)(v41 + 56);
          v44 = *(_OWORD *)(v41 + 40);
          v45 = *(_OWORD *)(v41 + 16);
          *(_OWORD *)(v41 + 32) = *(_OWORD *)v41;
          *(_OWORD *)(v41 + 48) = v45;
          *(_QWORD *)v41 = v38;
          *(_OWORD *)(v41 + 8) = v44;
          *(_QWORD *)(v41 + 24) = v43;
          v39 = v44;
          v41 -= 32;
          ++v40;
        }
        while (v9 != v40);
        ++v9;
        v36 += 32;
      }
      while (v9 != v35);
      v9 = v35;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 - 32;
LABEL_5:
    v9 = (uint64_t *)(v7 + 32 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = result == *(_QWORD *)v12 && v10 == *(_QWORD *)(v12 + 8);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *(_QWORD *)(v12 + 32);
      v14 = *(_QWORD *)(v12 + 56);
      v15 = *(_OWORD *)(v12 + 40);
      v16 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)v12;
      *(_OWORD *)(v12 + 48) = v16;
      *(_QWORD *)v12 = result;
      *(_OWORD *)(v12 + 8) = v15;
      *(_QWORD *)(v12 + 24) = v14;
      v10 = v15;
      v12 -= 32;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 31;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
      return (char *)memmove(result, v3, 32 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IDSGroupSessionProvider.CurrentSessionInfo>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PubSubTopic.Message>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, UInt64)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TopicInfo>);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>>, &demangling cache variable for type metadata for any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>>, &demangling cache variable for type metadata for any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: ())>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: ()));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, UUID)>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID))
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID))
                  - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AttachmentLedger_EncryptionID>, type metadata accessor for AttachmentLedger_EncryptionID);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PresentDevice>, &demangling cache variable for type metadata for PresentDevice);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PubSubTopic.ReceivedRecord>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v13 >= &v14[8 * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Data));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_KeyValue>, type metadata accessor for CP_KeyValue);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_EncryptionID>, type metadata accessor for CP_EncryptionID);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_SequenceNumber>, type metadata accessor for CP_SequenceNumber);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of BackgroundSessionManagerDataSource(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1ACD11A30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return _SharableObjectIdentifierKeyedEncodingContainer.finalize()();
}

uint64_t sub_1ACD11A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(v0[6], (uint64_t)v0 + v4, (uint64_t)v0 + ((v4 + *(_QWORD *)(v3 + 64) + v5) & ~v5), v1, v2, v0[4], v0[5]);
}

uint64_t sub_1ACD11B6C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1ACD11B90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1ACD11BB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1ACD11BD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1ACD11BFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)()
{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)(v0 + 16), *(_WORD *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(float *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(double *)(v0 + 24));
}

{
  uint64_t *v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_85Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined destroy of SharableObjectIdentifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SharableObjectIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for _SharableObjectIdentifierUnkeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _SharableObjectIdentifierUnkeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  return &unk_1E5C7E400;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()partial apply()
{
  return partial apply for thunk for @escaping @callee_guaranteed () -> ()();
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t result;
  char v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
  }
  else
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) == 0)
      return result;
    v9 = result;
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!v10)
    {
      specialized _NativeDictionary.copy()();
      v11 = v14;
    }
    v12 = *(void **)(*(_QWORD *)(v11 + 56) + 8 * v9);
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *v3 = v11;

  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[40];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for ProcessAssertion?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ProcessAssertion?);
  }
}

{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[40];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of UUID?(a1, &demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of UUID?(a1, &demangling cache variable for type metadata for NWEndpoint?);
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v17 = v22;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for NWEndpoint?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v19, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(_QWORD))MEMORY[0x1E0CCE2A0], (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v17 = v22;
      }
      outlined init with take of AttachmentLedger_AttachmentEncryption(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  else
  {
    outlined init with take of AttachmentLedger_AttachmentEncryption(a1, (uint64_t)v12);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v19);
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v17 = v22;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v19, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

void RTCReporter.reportAttachmentEvent(report:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  char v14;
  uint64_t inited;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  Class isa;
  unsigned int v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  id v86;
  id v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  _OWORD v95[2];
  uint64_t v96[3];
  uint64_t v97;
  uint64_t v98;

  v2 = v1;
  v98 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v4 = (_QWORD *)MEMORY[0x1AF449918](v1 + 24);
  if (!v4
    || (v5 = v4,
        v6 = (_QWORD *)MEMORY[0x1E0DEEDD8],
        v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2D0))(),
        v5,
        v8 = objc_msgSend(v7, sel_bundleIdentifier),
        v7,
        !v8))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.default);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v29))
      goto LABEL_27;
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_1ACCCC000, v28, v29, "RTC Reporting: reportAttachmentEvent failed - no bundleID found", v30, 2u);
    v31 = v30;
LABEL_26:
    MEMORY[0x1AF44981C](v31, -1, -1);
LABEL_27:

    return;
  }
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = *(uint64_t (**)(void))((*v6 & *a1) + 0x1D8);
  v13 = v12();
  if ((v14 & 1) == 0 && v13 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_allocObject();
    strcpy((char *)(inited + 32), "app_bundle_id");
    *(_WORD *)(inited + 46) = -4864;
    v16 = MEMORY[0x1E0DEA968];
    *(_OWORD *)(inited + 16) = xmmword_1ACF5B420;
    *(_QWORD *)(inited + 48) = v9;
    *(_QWORD *)(inited + 56) = v11;
    *(_QWORD *)(inited + 72) = v16;
    *(_QWORD *)(inited + 80) = 0x616F6C70755F7369;
    *(_QWORD *)(inited + 88) = 0xE900000000000064;
    v17 = (*(uint64_t (**)(void))((*v6 & *a1) + 0xB8))();
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
    *(_BYTE *)(inited + 96) = v17;
    *(_QWORD *)(inited + 120) = v18;
    *(_QWORD *)(inited + 128) = 0xD000000000000010;
    *(_QWORD *)(inited + 136) = 0x80000001ACF7E0B0;
    v19 = (*(uint64_t (**)(void))((*v6 & *a1) + 0xD0))();
    v21 = v20;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    *(_QWORD *)(inited + 144) = v19;
    *(_BYTE *)(inited + 152) = v21 & 1;
    *(_QWORD *)(inited + 168) = v22;
    *(_QWORD *)(inited + 176) = 0xD000000000000011;
    *(_QWORD *)(inited + 184) = 0x80000001ACF7E0D0;
    *(_BYTE *)(inited + 192) = (*(uint64_t (**)(void))((*v6 & *a1) + 0xE8))();
    *(_QWORD *)(inited + 216) = v18;
    *(_QWORD *)(inited + 224) = 0xD000000000000012;
    *(_QWORD *)(inited + 232) = 0x80000001ACF7E0F0;
    v23 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x130))();
    LOBYTE(v18) = v24;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    *(_QWORD *)(inited + 240) = v23;
    *(_BYTE *)(inited + 248) = v18 & 1;
    *(_QWORD *)(inited + 264) = v25;
    *(_QWORD *)(inited + 272) = 0x6D69745F64616F6CLL;
    *(_QWORD *)(inited + 280) = 0xE900000000000065;
    v26 = *(uint64_t (**)(void))((*v6 & *a1) + 0x148);
LABEL_16:
    v52 = v26();
    *(_QWORD *)(inited + 312) = v25;
    *(_QWORD *)(inited + 288) = v52;
    *(_BYTE *)(inited + 296) = v53 & 1;
    goto LABEL_17;
  }
  v32 = ((uint64_t (*)(uint64_t))v12)(v13);
  if ((v33 & 1) == 0 && v32 == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    strcpy((char *)(inited + 32), "app_bundle_id");
    *(_WORD *)(inited + 46) = -4864;
    v34 = MEMORY[0x1E0DEA968];
    *(_OWORD *)(inited + 16) = xmmword_1ACF5B430;
    *(_QWORD *)(inited + 48) = v9;
    *(_QWORD *)(inited + 56) = v11;
    *(_QWORD *)(inited + 72) = v34;
    strcpy((char *)(inited + 80), "is_subscribe");
    *(_BYTE *)(inited + 93) = 0;
    *(_WORD *)(inited + 94) = -5120;
    v35 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x100))();
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
    *(_BYTE *)(inited + 96) = v35;
    *(_QWORD *)(inited + 120) = v36;
    strcpy((char *)(inited + 128), "response_time");
    *(_WORD *)(inited + 142) = -4864;
    v37 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x118))();
    v39 = v38;
    *(_QWORD *)(inited + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    *(_QWORD *)(inited + 144) = v37;
    *(_BYTE *)(inited + 152) = v39 & 1;
LABEL_17:
    v54 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_beginAccess();
    *(_QWORD *)(v2 + 48) = v54;
    goto LABEL_18;
  }
  v40 = ((uint64_t (*)(uint64_t))v12)(v32);
  if ((v41 & 1) == 0 && v40 == 3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1ACF5B420;
    strcpy((char *)(inited + 32), "app_bundle_id");
    *(_WORD *)(inited + 46) = -4864;
    v42 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = v9;
    *(_QWORD *)(inited + 56) = v11;
    *(_QWORD *)(inited + 72) = v42;
    *(_QWORD *)(inited + 80) = 0xD000000000000011;
    *(_QWORD *)(inited + 88) = 0x80000001ACF7E050;
    v43 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x160))();
    v45 = v44;
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    *(_QWORD *)(inited + 96) = v43;
    *(_BYTE *)(inited + 104) = v45 & 1;
    *(_QWORD *)(inited + 120) = v46;
    *(_QWORD *)(inited + 128) = 0xD000000000000016;
    *(_QWORD *)(inited + 136) = 0x80000001ACF7E070;
    v47 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x178))();
    v49 = v48;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    *(_QWORD *)(inited + 144) = v47;
    *(_BYTE *)(inited + 152) = v49 & 1;
    *(_QWORD *)(inited + 168) = v25;
    *(_QWORD *)(inited + 176) = 0xD000000000000014;
    *(_QWORD *)(inited + 184) = 0x80000001ACF7E090;
    *(_QWORD *)(inited + 192) = (*(uint64_t (**)(void))((*v6 & *a1) + 0x190))();
    *(_BYTE *)(inited + 200) = v50 & 1;
    *(_QWORD *)(inited + 216) = v25;
    strcpy((char *)(inited + 224), "download_speed");
    *(_BYTE *)(inited + 239) = -18;
    *(_QWORD *)(inited + 240) = (*(uint64_t (**)(void))((*v6 & *a1) + 0x1A8))();
    *(_BYTE *)(inited + 248) = v51 & 1;
    *(_QWORD *)(inited + 264) = v25;
    strcpy((char *)(inited + 272), "upload_speed");
    *(_BYTE *)(inited + 285) = 0;
    *(_WORD *)(inited + 286) = -5120;
    v26 = *(uint64_t (**)(void))((*v6 & *a1) + 0x1C0);
    goto LABEL_16;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (!*MEMORY[0x1E0D83850])
  {
    __break(1u);
    goto LABEL_35;
  }
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v57 = v56;
  v58 = MEMORY[0x1E0DEB418];
  v97 = MEMORY[0x1E0DEB418];
  v96[0] = 0;
  outlined init with take of Any(v96, v95);
  v59 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v95, v55, v57, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*MEMORY[0x1E0D83868])
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v63 = v62;
  v97 = v58;
  v96[0] = 0;
  outlined init with take of Any(v96, v95);
  v64 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v95, v61, v63, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*MEMORY[0x1E0D83860])
  {
LABEL_36:
    __break(1u);
    return;
  }
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v67 = v66;
  swift_beginAccess();
  v68 = *(_QWORD *)(v2 + 48);
  v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  v96[0] = v68;
  outlined init with take of Any(v96, v95);
  swift_bridgeObjectRetain();
  v69 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v95, v65, v67, v69);
  v70 = v59;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v71 = *(id *)(v2 + 16);
  v72 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v72);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v96[0] = 0;
  v74 = objc_msgSend(v71, sel_sendMessageWithDictionary_error_, isa, v96);

  if (v74)
  {
    v75 = one-time initialization token for default;
    v76 = (id)v96[0];
    if (v75 != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Log.default);
    swift_bridgeObjectRetain();
    v28 = Logger.logObject.getter();
    v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc();
      v80 = swift_slowAlloc();
      v96[0] = v80;
      *(_DWORD *)v79 = 136315138;
      *(_QWORD *)&v95[0] = v70;
      swift_bridgeObjectRetain();
      v81 = String.init<A>(reflecting:)();
      *(_QWORD *)&v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v28, v78, "Sent attachment data to RTC reporting %s", v79, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v80, -1, -1);
      v31 = v79;
      goto LABEL_26;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v83 = (id)v96[0];
    swift_bridgeObjectRelease();
    v84 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for default != -1)
      swift_once();
    v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Log.default);
    v86 = v84;
    v87 = v84;
    v88 = Logger.logObject.getter();
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc();
      v91 = swift_slowAlloc();
      v96[0] = v91;
      *(_DWORD *)v90 = 136315138;
      *(_QWORD *)&v95[0] = v84;
      v92 = v84;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v93 = String.init<A>(reflecting:)();
      *(_QWORD *)&v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v88, v89, "Could not report attachment event: %s", v90, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v91, -1, -1);
      MEMORY[0x1AF44981C](v90, -1, -1);

    }
    else
    {

    }
  }
}

_QWORD *RTCReporter.__allocating_init(session:)(void *a1)
{
  swift_allocObject();
  return RTCReporter.init(session:)(a1);
}

uint64_t RTCReporterCategory.rawValue.getter()
{
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RTCReporterCategory()
{
  return 1;
}

void protocol witness for Hashable.hash(into:) in conformance RTCReporterCategory()
{
  Hasher._combine(_:)(0);
}

BOOL RTCReporterType.init(rawValue:)(uint64_t a1)
{
  return a1 != 0;
}

uint64_t RTCReporterType.rawValue.getter()
{
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RTCReporterCategory()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RTCReporterCategory()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance RTCReporterType@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t AttachmentDataReport.isUpload.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload);
  swift_beginAccess();
  return *v1;
}

uint64_t AttachmentDataReport.isUpload.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AttachmentDataReport.isUpload.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.assetTotalSize.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize);
}

uint64_t AttachmentDataReport.assetTotalSize.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize);
}

uint64_t (*AttachmentDataReport.assetTotalSize.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.isServerBlocked.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked);
  swift_beginAccess();
  return *v1;
}

uint64_t AttachmentDataReport.isServerBlocked.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AttachmentDataReport.isServerBlocked.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.isSubscribe.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe);
  swift_beginAccess();
  return *v1;
}

uint64_t AttachmentDataReport.isSubscribe.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AttachmentDataReport.isSubscribe.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.responseTime.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime);
}

uint64_t AttachmentDataReport.responseTime.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime);
}

uint64_t (*AttachmentDataReport.responseTime.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.endToEndAttachmentLatency.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency);
}

uint64_t AttachmentDataReport.endToEndAttachmentLatency.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency);
}

uint64_t (*AttachmentDataReport.endToEndAttachmentLatency.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.loadTime.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime);
}

uint64_t AttachmentDataReport.loadTime.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime);
}

uint64_t (*AttachmentDataReport.loadTime.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.totalAttachments.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments);
}

uint64_t AttachmentDataReport.totalAttachments.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments);
}

uint64_t (*AttachmentDataReport.totalAttachments.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.totalDownloadBytes.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes);
}

uint64_t AttachmentDataReport.totalDownloadBytes.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes);
}

uint64_t (*AttachmentDataReport.totalDownloadBytes.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.totalUploadBytes.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes);
}

uint64_t AttachmentDataReport.totalUploadBytes.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes);
}

uint64_t (*AttachmentDataReport.totalUploadBytes.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.downloadSpeed.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed);
}

uint64_t AttachmentDataReport.downloadSpeed.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed);
}

uint64_t (*AttachmentDataReport.downloadSpeed.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.uploadSpeed.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed);
}

uint64_t AttachmentDataReport.uploadSpeed.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed);
}

uint64_t (*AttachmentDataReport.uploadSpeed.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.reportType.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType);
}

uint64_t AttachmentDataReport.assetTotalSize.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return *(_QWORD *)v2;
}

uint64_t AttachmentDataReport.reportType.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType);
}

uint64_t AttachmentDataReport.assetTotalSize.setter(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = v3 + *a3;
  result = swift_beginAccess();
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AttachmentDataReport.reportType.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t static AttachmentDataReport.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall AttachmentDataReport.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v3;
  Class isa;
  void *v5;
  char v6;
  NSNumber v7;
  void *v8;
  Class v9;
  void *v10;
  Class v11;
  void *v12;
  double v13;
  char v14;
  uint64_t v15;
  void *v16;
  double v17;
  char v18;
  uint64_t v19;
  void *v20;
  double v21;
  char v22;
  uint64_t v23;
  void *v24;
  char v25;
  NSNumber v26;
  void *v27;
  double v28;
  char v29;
  uint64_t v30;
  void *v31;
  double v32;
  char v33;
  uint64_t v34;
  void *v35;
  double v36;
  char v37;
  uint64_t v38;
  void *v39;
  double v40;
  char v41;
  uint64_t v42;
  void *v43;
  char v44;
  NSNumber v45;
  id v46;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((*(unsigned __int8 (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB8))() == 2)
    isa = 0;
  else
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v5 = (void *)MEMORY[0x1AF4480F4](0x64616F6C70557369, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v3 & *v1) + 0xD0))();
  if ((v6 & 1) != 0)
    v7.super.super.isa = 0;
  else
    v7.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v8 = (void *)MEMORY[0x1AF4480F4](0x746F547465737361, 0xEE00657A69536C61);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7.super.super.isa, v8);
  swift_unknownObjectRelease();

  if ((*(unsigned __int8 (**)(void))((*v3 & *v1) + 0xE8))() == 2)
    v9 = 0;
  else
    v9 = Bool._bridgeToObjectiveC()().super.super.isa;
  v10 = (void *)MEMORY[0x1AF4480F4](0x7265767265537369, 0xEF64656B636F6C42);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

  if ((*(unsigned __int8 (**)(void))((*v3 & *v1) + 0x100))() == 2)
    v11 = 0;
  else
    v11 = Bool._bridgeToObjectiveC()().super.super.isa;
  v12 = (void *)MEMORY[0x1AF4480F4](0x7263736275537369, 0xEB00000000656269);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);
  swift_unknownObjectRelease();

  v13 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x118))());
  if ((v14 & 1) != 0)
    v15 = 0;
  else
    v15 = MEMORY[0x1AF448490](v13);
  v16 = (void *)MEMORY[0x1AF4480F4](0x65736E6F70736572, 0xEC000000656D6954);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v15, v16);
  swift_unknownObjectRelease();

  v17 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x130))());
  if ((v18 & 1) != 0)
    v19 = 0;
  else
    v19 = MEMORY[0x1AF448490](v17);
  v20 = (void *)MEMORY[0x1AF4480F4](0xD000000000000019, 0x80000001ACF7E110);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v19, v20);
  swift_unknownObjectRelease();

  v21 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x148))());
  if ((v22 & 1) != 0)
    v23 = 0;
  else
    v23 = MEMORY[0x1AF448490](v21);
  v24 = (void *)MEMORY[0x1AF4480F4](0x656D695464616F6CLL, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v3 & *v1) + 0x160))();
  if ((v25 & 1) != 0)
    v26.super.super.isa = 0;
  else
    v26.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v27 = (void *)MEMORY[0x1AF4480F4](0xD000000000000010, 0x80000001ACF7E130);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v26.super.super.isa, v27);
  swift_unknownObjectRelease();

  v28 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x178))());
  if ((v29 & 1) != 0)
    v30 = 0;
  else
    v30 = MEMORY[0x1AF448490](v28);
  v31 = (void *)MEMORY[0x1AF4480F4](0xD000000000000012, 0x80000001ACF7E150);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v30, v31);
  swift_unknownObjectRelease();

  v32 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x190))());
  if ((v33 & 1) != 0)
    v34 = 0;
  else
    v34 = MEMORY[0x1AF448490](v32);
  v35 = (void *)MEMORY[0x1AF4480F4](0xD000000000000010, 0x80000001ACF7E170);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v34, v35);
  swift_unknownObjectRelease();

  v36 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x1A8))());
  if ((v37 & 1) != 0)
    v38 = 0;
  else
    v38 = MEMORY[0x1AF448490](v36);
  v39 = (void *)MEMORY[0x1AF4480F4](0x64616F6C6E776F64, 0xED00006465657053);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v38, v39);
  swift_unknownObjectRelease();

  v40 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x1C0))());
  if ((v41 & 1) != 0)
    v42 = 0;
  else
    v42 = MEMORY[0x1AF448490](v40);
  v43 = (void *)MEMORY[0x1AF4480F4](0x705364616F6C7075, 0xEB00000000646565);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v42, v43);
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v3 & *v1) + 0x1D8))();
  if ((v44 & 1) != 0)
    v45.super.super.isa = 0;
  else
    v45.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v46 = (id)MEMORY[0x1AF4480F4](0x795474726F706572, 0xEA00000000006570);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v45.super.super.isa, v46);
  swift_unknownObjectRelease();

}

id AttachmentDataReport.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized AttachmentDataReport.init(coder:)(a1);

  return v4;
}

id AttachmentDataReport.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized AttachmentDataReport.init(coder:)(a1);

  return v2;
}

id AttachmentDataReport.__allocating_init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)(char a1, uint64_t a2, char a3, double a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)(a1, a2, a3, a4, a5);
}

id AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)(char a1, uint64_t a2, char a3, double a4, double a5)
{
  _BYTE *v5;
  _BYTE *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  objc_super v24;

  v10 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload];
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  v11 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked];
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe] = 2;
  v13 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v20 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  v21 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  swift_beginAccess();
  *v10 = a1;
  swift_beginAccess();
  *(_QWORD *)v11 = a2;
  v11[8] = 0;
  swift_beginAccess();
  *v12 = a3;
  swift_beginAccess();
  *(double *)v14 = a4;
  v14[8] = 0;
  swift_beginAccess();
  *(double *)v15 = a5;
  v15[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v21 = 1;
  v21[8] = 0;
  v24.receiver = v5;
  v24.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v24, sel_init);
}

id AttachmentDataReport.__allocating_init(isSubscribe:responseTime:)(char a1, double a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return AttachmentDataReport.init(isSubscribe:responseTime:)(a1, a2);
}

id AttachmentDataReport.init(isSubscribe:responseTime:)(char a1, double a2)
{
  _BYTE *v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  v5 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  v6 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe];
  v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe] = 2;
  v7 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v11 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  swift_beginAccess();
  *v6 = a1;
  swift_beginAccess();
  *(double *)v7 = a2;
  v7[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v15 = 2;
  v15[8] = 0;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v17, sel_init);
}

id AttachmentDataReport.__allocating_init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)(a1, a2, a3, a4, a5);
}

id AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  objc_super v22;

  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  v11 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe] = 2;
  v12 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v20 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  swift_beginAccess();
  *(_QWORD *)v15 = a1;
  v15[8] = 0;
  swift_beginAccess();
  *(double *)v16 = a2;
  v16[8] = 0;
  swift_beginAccess();
  *(double *)v17 = a3;
  v17[8] = 0;
  swift_beginAccess();
  *(double *)v18 = a4;
  v18[8] = 0;
  swift_beginAccess();
  *(double *)v19 = a5;
  v19[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v20 = 3;
  v20[8] = 0;
  v22.receiver = v5;
  v22.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v22, sel_init);
}

id AttachmentDataReport.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AttachmentDataReport.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AttachmentDataReport.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t RTCReporter.activitySession.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1AF449918](v0 + 24);
}

void RTCReporter.activitySession.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*RTCReporter.activitySession.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x1AF449918](v1 + 24);
  return RTCReporter.activitySession.modify;
}

void RTCReporter.activitySession.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

uint64_t RTCReporter.reportSessionInfo.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t RTCReporter.reportSessionInfo.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RTCReporter.reportSessionInfo.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t RTCReporter.userInfo.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t RTCReporter.userInfo.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RTCReporter.userInfo.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t RTCReporter.attachmentData.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t RTCReporter.attachmentData.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RTCReporter.attachmentData.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

_QWORD *RTCReporter.init(session:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t inited;
  _QWORD *result;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  Class v25;
  Class v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;

  v2 = v1;
  v30 = *v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E30;
  result = (_QWORD *)*MEMORY[0x1E0D83880];
  if (!*MEMORY[0x1E0D83880])
  {
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v10;
  v11 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  v12 = objc_msgSend(v11, sel_initWithChar_, 56, v30);
  v13 = type metadata accessor for NSNumber();
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)(inited + 48) = v12;
  result = (_QWORD *)*MEMORY[0x1E0D83888];
  if (!*MEMORY[0x1E0D83888])
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v31 = a1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v14;
  *(_QWORD *)(inited + 120) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 96) = 3223088;
  *(_QWORD *)(inited + 104) = 0xE300000000000000;
  result = (_QWORD *)*MEMORY[0x1E0D838A8];
  if (!*MEMORY[0x1E0D838A8])
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 136) = v15;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v16);
  *(_QWORD *)(inited + 168) = v13;
  *(_QWORD *)(inited + 144) = v17;
  result = (_QWORD *)*MEMORY[0x1E0D83870];
  if (!*MEMORY[0x1E0D83870])
  {
LABEL_12:
    __break(1u);
    return result;
  }
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 184) = v18;
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, 1);
  *(_QWORD *)(inited + 216) = v13;
  *(_QWORD *)(inited + 192) = v19;
  v2[4] = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v20 = MEMORY[0x1E0DEE9E0];
  v2[5] = MEMORY[0x1E0DEE9E0];
  v2[6] = v20;
  swift_beginAccess();
  v21 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v21);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v22 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v22);
  swift_bridgeObjectRelease();
  v23 = objc_allocWithZone(MEMORY[0x1E0D83848]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v25 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v26 = Array._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v23, sel_initWithSessionInfo_userInfo_frameworksToCheck_, isa, v25, v26);

  if (v27)
  {
    swift_beginAccess();
    v28 = v31;
    swift_unknownObjectWeakAssign();
    v2[2] = v27;
    v29 = v27;
    objc_msgSend(v29, sel_startConfigurationWithCompletionHandler_, 0);

  }
  else
  {

    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    outlined init with take of Any(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : ()].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t RTCReporter.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RTCReporter.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];

        *(_QWORD *)(v17 + 8 * v10) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = swift_release();
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = v5;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = *(_QWORD *)(v12 + 24);
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(*(_QWORD *)(v20 + 56) + 16 * v14);
        result = swift_unknownObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        result = outlined consume of Data._Representation(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
        *(_QWORD *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(v18 + 56);

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7] + 16 * v15;
      v23 = *(void **)v22;

      v24 = v28;
      *(_QWORD *)v22 = a1;
      *(_QWORD *)(v22 + 8) = v24;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = v17
            + *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) - 8) + 72)
            * v10;
        return outlined assign with take of AttachmentLedger_AttachmentEncryption(a1, v18);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), void (*a7)(void), void (*a8)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  unint64_t v27;
  char v28;

  v11 = v8;
  v16 = *v8;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a5 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v18);
        result = swift_release();
        *v25 = a1;
        v25[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a5 & 1) == 0)
    {
      a6();
      goto LABEL_7;
    }
    a7();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v22 & 1) == (v28 & 1))
    {
      v18 = v27;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a3, a4, a1, a2, v24);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t), void (*a8)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  char v28;

  v11 = v8;
  v16 = *v8;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a4 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = *(_QWORD *)(v24 + 56) + 40 * v18;
        __swift_destroy_boxed_opaque_existential_1Tm(v25);
        return a7(a1, v25);
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v22 & 1) == (v28 & 1))
    {
      v18 = v27;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a2, a3, a1, v24);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(_QWORD), uint64_t (*a7)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v11;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  char v28;

  v11 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a3 & 1) != 0)
    {
LABEL_7:
      v23 = *v11;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);
        v25 = a6(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v17, a1, v25);
      }
      return a7(v17, a2, a1, v23);
    }
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v21 & 1) == (v28 & 1))
    {
      v17 = v27;
      v23 = *v11;
      if ((v21 & 1) != 0)
        goto LABEL_8;
      return a7(v17, a2, a1, v23);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 16 * v12;
        *(_QWORD *)v19 = a1;
        *(_BYTE *)(v19 + 8) = a2 & 1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 1, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v10 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);
        result = swift_release();
        *(_QWORD *)(v24 + 8 * v17) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized AttachmentDataReport.init(coder:)(void *a1)
{
  _BYTE *v1;
  unsigned __int8 *v3;
  char *v4;
  unsigned __int8 *v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v40;
  unsigned __int8 v41;
  _BYTE *v42;
  unsigned __int8 *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  objc_super v51;

  v3 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload];
  v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  v4 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v42 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked];
  v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  v5 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe];
  *v5 = 2;
  v6 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v43 = v5;
  v44 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(_QWORD *)v44 = 0;
  v44[8] = 1;
  v45 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(_QWORD *)v45 = 0;
  v45[8] = 1;
  v46 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(_QWORD *)v46 = 0;
  v46[8] = 1;
  v47 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(_QWORD *)v47 = 0;
  v47[8] = 1;
  v48 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(_QWORD *)v48 = 0;
  v48[8] = 1;
  v49 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(_QWORD *)v49 = 0;
  v49[8] = 1;
  v50 = v1;
  v9 = (void *)MEMORY[0x1AF4480F4](0x64616F6C70557369, 0xE800000000000000);
  v41 = objc_msgSend(a1, sel_decodeBoolForKey_, v9);

  v10 = (void *)MEMORY[0x1AF4480F4](0x746F547465737361, 0xEE00657A69536C61);
  v40 = objc_msgSend(a1, sel_decodeIntegerForKey_, v10);

  v11 = (void *)MEMORY[0x1AF4480F4](0x7265767265537369, 0xEF64656B636F6C42);
  LOBYTE(v10) = objc_msgSend(a1, sel_decodeBoolForKey_, v11);

  v12 = (void *)MEMORY[0x1AF4480F4](0xD000000000000019, 0x80000001ACF7E110);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v12);
  v14 = v13;

  v15 = (void *)MEMORY[0x1AF4480F4](0x656D695464616F6CLL, 0xE800000000000000);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v15);
  v17 = v16;

  swift_beginAccess();
  *v3 = v41;
  swift_beginAccess();
  *(_QWORD *)v4 = v40;
  v4[8] = 0;
  swift_beginAccess();
  *v42 = (_BYTE)v10;
  swift_beginAccess();
  *(_QWORD *)v7 = v14;
  v7[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v8 = v17;
  v8[8] = 0;
  v18 = (void *)MEMORY[0x1AF4480F4](0x7263736275537369, 0xEB00000000656269);
  v19 = objc_msgSend(a1, sel_decodeBoolForKey_, v18);

  v20 = (void *)MEMORY[0x1AF4480F4](0x65736E6F70736572, 0xEC000000656D6954);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v20);
  v22 = v21;

  swift_beginAccess();
  *v43 = v19;
  swift_beginAccess();
  *(_QWORD *)v6 = v22;
  v6[8] = 0;
  v23 = (void *)MEMORY[0x1AF4480F4](0xD000000000000010, 0x80000001ACF7E130);
  v24 = objc_msgSend(a1, sel_decodeIntegerForKey_, v23);

  v25 = (void *)MEMORY[0x1AF4480F4](0xD000000000000012, 0x80000001ACF7E150);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v25);
  v27 = v26;

  v28 = (void *)MEMORY[0x1AF4480F4](0xD000000000000010, 0x80000001ACF7E170);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v28);
  v30 = v29;

  v31 = (void *)MEMORY[0x1AF4480F4](0x64616F6C6E776F64, 0xED00006465657053);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v31);
  v33 = v32;

  v34 = (void *)MEMORY[0x1AF4480F4](0x705364616F6C7075, 0xEB00000000646565);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v34);
  v36 = v35;

  swift_beginAccess();
  *(_QWORD *)v44 = v24;
  v44[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v45 = v27;
  v45[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v46 = v30;
  v46[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v47 = v33;
  v47[8] = 0;
  swift_beginAccess();
  *(_QWORD *)v48 = v36;
  v48[8] = 0;
  v37 = (void *)MEMORY[0x1AF4480F4](0x795474726F706572, 0xEA00000000006570);
  v38 = objc_msgSend(a1, sel_decodeIntegerForKey_, v37);

  swift_beginAccess();
  *(_QWORD *)v49 = v38;
  v49[8] = 0;

  v51.receiver = v50;
  v51.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v51, sel_init);
}

uint64_t type metadata accessor for AttachmentDataReport()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RTCReporterCategory and conformance RTCReporterCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RTCReporterCategory and conformance RTCReporterCategory;
  if (!lazy protocol witness table cache variable for type RTCReporterCategory and conformance RTCReporterCategory)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for RTCReporterCategory, &type metadata for RTCReporterCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RTCReporterCategory and conformance RTCReporterCategory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RTCReporterType and conformance RTCReporterType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RTCReporterType and conformance RTCReporterType;
  if (!lazy protocol witness table cache variable for type RTCReporterType and conformance RTCReporterType)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for RTCReporterType, &type metadata for RTCReporterType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RTCReporterType and conformance RTCReporterType);
  }
  return result;
}

uint64_t sub_1ACD174C4@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD17504(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xC0))(*a1);
}

uint64_t sub_1ACD17540@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xD0))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD17588(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xD8))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD175D0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD17610(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xF0))(*a1);
}

uint64_t sub_1ACD1764C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD1768C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x108))(*a1);
}

uint64_t sub_1ACD176C8@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x118))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD17710(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x120))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17758@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x130))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD177A0(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x138))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD177E8@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x148))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD17830(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x150))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17878@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x160))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD178C0(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x168))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17908@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x178))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD17950(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x180))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17998@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x190))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD179E0(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x198))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17A28@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1A8))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD17A70(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1B0))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17AB8@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1C0))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD17B00(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1C8))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17B48@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1D8))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1ACD17B90(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1E0))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1ACD17BD8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + 24;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1ACD17C24()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t getEnumTag for RTCReporterCategory()
{
  return 0;
}

ValueMetadata *type metadata accessor for RTCReporterCategory()
{
  return &type metadata for RTCReporterCategory;
}

uint64_t getEnumTagSinglePayload for RTCReporterCategory(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for RTCReporterCategory(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACD17D24 + 4 * byte_1ACF5B440[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACD17D44 + 4 * byte_1ACF5B445[v4]))();
}

_BYTE *sub_1ACD17D24(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACD17D44(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACD17D4C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACD17D54(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACD17D5C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACD17D64(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RTCReporterType()
{
  return &type metadata for RTCReporterType;
}

uint64_t method lookup function for AttachmentDataReport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AttachmentDataReport.isUpload.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AttachmentDataReport.isUpload.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AttachmentDataReport.isUpload.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AttachmentDataReport.assetTotalSize.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AttachmentDataReport.assetTotalSize.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xD8))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.assetTotalSize.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AttachmentDataReport.isServerBlocked.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AttachmentDataReport.isServerBlocked.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AttachmentDataReport.isServerBlocked.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AttachmentDataReport.isSubscribe.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AttachmentDataReport.isSubscribe.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AttachmentDataReport.isSubscribe.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AttachmentDataReport.responseTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AttachmentDataReport.responseTime.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x120))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.responseTime.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AttachmentDataReport.endToEndAttachmentLatency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AttachmentDataReport.endToEndAttachmentLatency.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x138))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.endToEndAttachmentLatency.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AttachmentDataReport.loadTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AttachmentDataReport.loadTime.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x150))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.loadTime.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalAttachments.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalAttachments.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x168))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.totalAttachments.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalDownloadBytes.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalDownloadBytes.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x180))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.totalDownloadBytes.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalUploadBytes.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalUploadBytes.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x198))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.totalUploadBytes.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of AttachmentDataReport.downloadSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of AttachmentDataReport.downloadSpeed.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1B0))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.downloadSpeed.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of AttachmentDataReport.uploadSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of AttachmentDataReport.uploadSpeed.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1C8))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.uploadSpeed.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of AttachmentDataReport.reportType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of AttachmentDataReport.reportType.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1E0))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.reportType.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of AttachmentDataReport.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(isSubscribe:responseTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 528))();
}

uint64_t type metadata accessor for RTCReporter()
{
  return objc_opt_self();
}

uint64_t method lookup function for RTCReporter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RTCReporter.__allocating_init(session:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t outlined init with take of AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t Double.milliseconds.getter(double a1)
{
  unint64_t result;
  double v2;

  if (a1 <= 0.0)
    return 0;
  v2 = a1 * 1000.0;
  if ((~COERCE__INT64(a1 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return (unint64_t)v2;
}

uint64_t one-time initialization function for log()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubSubReporter != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubSubReporter);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for unreliableMessenger != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.unreliableMessenger);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubsub);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubsub);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubsub);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for cryptor != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.cryptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t PluginRpcStream.definition.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PluginRpcStream.traceId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + direct field offset for PluginRpcStream.traceId, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t PluginRpcStream.output.getter()
{
  return swift_retain();
}

uint64_t PluginRpcStream.InputSubscriber.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  PluginRpcStream.InputSubscriber.init()();
  return v0;
}

uint64_t PluginRpcStream.inputSubscriber.getter()
{
  return swift_retain();
}

uint64_t PluginRpcStream.cancellable.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t PluginRpcStream.cancellable.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for PluginRpcStream.cancellable);
}

uint64_t (*PluginRpcStream.cancellable.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t PluginRpcStream.stream.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t PluginRpcStream.stream.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for PluginRpcStream.stream);
}

uint64_t (*PluginRpcStream.stream.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

void PluginRpcStream.__allocating_init(definition:input:traceId:)()
{
  specialized PluginRpcStream.__allocating_init(definition:input:traceId:)();
}

uint64_t sub_1ACD18648(uint64_t a1)
{
  swift_release();
  return a1;
}

void PluginRpcStream.init(definition:input:traceId:)()
{
  specialized PluginRpcStream.init(definition:input:traceId:)();
}

uint64_t sub_1ACD18678(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t PluginRpcStream.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for NWConnection.SendCompletion();
  v20 = *(_QWORD *)(v2 - 8);
  v21 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (uint64_t *)((char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for NWConnection.State();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v19 - v11;
  (*(void (**)(uint64_t))(**(_QWORD **)(v0 + direct field offset for PluginRpcStream.inputSubscriber) + 216))(v10);
  v13 = (_QWORD *)(v0 + direct field offset for PluginRpcStream.stream);
  swift_beginAccess();
  if (*v13)
  {
    swift_retain();
    NWConnection.state.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0CCE5B0], v5);
    v14 = MEMORY[0x1AF447B90](v12, v9);
    v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v9, v5);
    v15(v12, v5);
    if ((v14 & 1) != 0)
    {
      type metadata accessor for NWConnection.ContentContext();
      static NWConnection.ContentContext.finalMessage.getter();
      *v4 = destructiveProjectEnumData for ActivitySession.Errors;
      v4[1] = 0;
      v17 = v20;
      v16 = v21;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v4, *MEMORY[0x1E0CCE460], v21);
      NWConnection.send(content:contentContext:isComplete:completion:)();
      swift_release();
      swift_release();
      (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v4, v16);
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v1 + direct field offset for PluginRpcStream.traceId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t PluginRpcStream.__deallocating_deinit()
{
  PluginRpcStream.deinit();
  return swift_deallocClassInstance();
}

void PluginRpcStream.start(stream:)()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(void (**)(uint64_t))(*v0 + 192);
  v3 = swift_retain();
  v2(v3);
  v4 = swift_allocObject();
  swift_weakInit();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v1 + 80);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v5 + 48) = v4;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in PluginRpcStream.start(stream:));
  NWConnection.stateUpdateHandler.setter();
  swift_release();
  swift_release();
  PluginRpcStream.sendPath()();
}

uint64_t closure #1 in PluginRpcStream.start(stream:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;

  v2 = type metadata accessor for PluginRpcError();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWConnection.State();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWError();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) == *MEMORY[0x1E0CCE5C0])
    {
      (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v4, v12, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v4, 0, 3, v9);
      swift_storeEnumTagMultiPayload();
      PluginRpcStream.terminate(error:)((uint64_t)v4);
      swift_release();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return result;
}

void PluginRpcStream.sendPath()()
{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void (**v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  void (**v33)(uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[4];

  v1 = v0;
  v36 = type metadata accessor for NWConnection.SendCompletion();
  v2 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v4 = (void (**)(uint64_t))((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = type metadata accessor for PluginProtocolHeader();
  MEMORY[0x1E0C80A78](v34);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)log);
  swift_retain();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v35 = v6;
  if (v10)
  {
    v11 = swift_slowAlloc();
    v33 = v4;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc();
    v38[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = PluginRpcStream.description.getter();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v8, v9, "RPC %s sending path", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v13, -1, -1);
    v16 = v12;
    v4 = v33;
    MEMORY[0x1AF44981C](v16, -1, -1);

  }
  else
  {

    v17 = swift_release();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 184))(v17))
  {
    v18 = *((_QWORD *)v0 + 2);
    v19 = *((_QWORD *)v0 + 3);
    swift_bridgeObjectRetain();
    v20 = specialized Data.init<A>(_:)(v18, v19);
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1ACF59E40;
    type metadata accessor for NWProtocolFramer.Message();
    v24 = (uint64_t)v35;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v1 + direct field offset for PluginRpcStream.traceId, (uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v25 = v34;
    swift_storeEnumTagMultiPayload();
    if (one-time initialization token for definition != -1)
      swift_once();
    swift_retain();
    v26 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
    v38[3] = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
    swift_retain();
    dispatch thunk of NWProtocolFramer.Message.subscript.setter();
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v24, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
    *(_QWORD *)(v23 + 32) = v26;
    v38[0] = v23;
    specialized Array._endMutation()();
    if ((unint64_t)v38[0] >> 62)
    {
      outlined copy of Data._Representation(v20, v22);
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      outlined copy of Data._Representation(v20, v22);
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for NWConnection.ContentContext();
    swift_allocObject();
    NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
    *v4 = partial apply for closure #1 in PluginRpcStream.sendPath();
    v4[1] = v1;
    v28 = v36;
    (*(void (**)(void (**)(uint64_t), _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0CCE460], v36);
    swift_retain();
    NWConnection.send(content:contentContext:isComplete:completion:)();
    swift_release();
    outlined consume of Data._Representation(v20, v22);
    swift_release();
    outlined consume of Data._Representation(v20, v22);
    (*(void (**)(void (**)(uint64_t), uint64_t))(v2 + 8))(v4, v28);
  }
  else
  {
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1ACCCC000, v29, v30, "PluginRpcStream.sendPath: Stream not yet started", v31, 2u);
      MEMORY[0x1AF44981C](v31, -1, -1);
    }

  }
}

void closure #1 in PluginRpcStream.sendPath()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14[8];
  void *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for NWError();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v11 = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for NWError?);
    (*(void (**)(uint64_t))(**(_QWORD **)(a2 + direct field offset for PluginRpcStream.inputSubscriber) + 208))(v11);
    PluginRpcStream.receiveNextResponse()();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NWError and conformance NWError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CCEB10], MEMORY[0x1E0CCEB28]);
    v12 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v13, v10, v7);
    v14[0] = 13;
    v15 = v12;
    v16 = 0xD000000000000013;
    v17 = 0x80000001ACF7E460;
    PluginRpcStream.terminate(status:)(v14);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void PluginRpcStream.sendNextRequest(_:)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (**v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t (**v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[5];

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v5 = type metadata accessor for NWConnection.SendCompletion();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v48 = (uint64_t (**)(uint64_t))((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = type metadata accessor for PluginProtocolHeader();
  v8 = MEMORY[0x1E0C80A78](v46);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v4;
  v11 = *(_QWORD *)(v4 + 80);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v15, (uint64_t)log);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v50 = a1;
  v17(v14, a1, v11);
  swift_retain();
  v49 = v16;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  v20 = os_log_type_enabled(v18, v19);
  v47 = v10;
  if (v20)
  {
    v21 = swift_slowAlloc();
    v45 = v5;
    v22 = v21;
    v43 = swift_slowAlloc();
    v44 = v6;
    v53[0] = v43;
    *(_DWORD *)v22 = 136315395;
    v23 = PluginRpcStream.description.getter();
    v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2081;
    v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl(&dword_1ACCCC000, v18, v19, "RPC %s sending request message %{private}s", (uint8_t *)v22, 0x16u);
    v27 = v43;
    swift_arrayDestroy();
    v6 = v44;
    MEMORY[0x1AF44981C](v27, -1, -1);
    v28 = v22;
    v5 = v45;
    MEMORY[0x1AF44981C](v28, -1, -1);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  if ((*(uint64_t (**)(void))(*(_QWORD *)v2 + 184))())
  {
    v29 = v2;
    v33 = Message.serializedData(partial:)();
    v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1ACF59E40;
    type metadata accessor for NWProtocolFramer.Message();
    v37 = v46;
    v38 = (uint64_t)v47;
    swift_storeEnumTagMultiPayload();
    if (one-time initialization token for definition != -1)
      swift_once();
    swift_retain();
    v39 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
    v53[3] = v37;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v38, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
    swift_retain();
    dispatch thunk of NWProtocolFramer.Message.subscript.setter();
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v38, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
    *(_QWORD *)(v36 + 32) = v39;
    v53[0] = v36;
    specialized Array._endMutation()();
    if ((unint64_t)v53[0] >> 62)
    {
      outlined copy of Data._Representation(v33, v35);
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      outlined copy of Data._Representation(v33, v35);
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for NWConnection.ContentContext();
    swift_allocObject();
    NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
    v41 = v48;
    *v48 = partial apply for closure #1 in PluginRpcStream.sendNextRequest(_:);
    v41[1] = v29;
    (*(void (**)(uint64_t (**)(uint64_t), _QWORD, uint64_t))(v6 + 104))(v41, *MEMORY[0x1E0CCE460], v5);
    swift_retain();
    NWConnection.send(content:contentContext:isComplete:completion:)();
    swift_release();
    outlined consume of Data._Representation(v33, v35);
    swift_release();
    outlined consume of Data._Representation(v33, v35);
    (*(void (**)(uint64_t (**)(uint64_t), uint64_t))(v6 + 8))(v41, v5);
  }
  else
  {
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1ACCCC000, v30, v31, "PluginRpcStream.sendNextRequest: Stream not yet started", v32, 2u);
      MEMORY[0x1AF44981C](v32, -1, -1);
    }

  }
}

uint64_t closure #1 in PluginRpcStream.sendNextRequest(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  char v15[8];
  void *v16;
  unint64_t v17;
  unint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for NWError();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v11 = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for NWError?);
    return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(a2
                                                            + direct field offset for PluginRpcStream.inputSubscriber)
                                              + 208))(v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NWError and conformance NWError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CCEB10], MEMORY[0x1E0CCEB28]);
    v13 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v14, v10, v7);
    v15[0] = 13;
    v16 = v13;
    v17 = 0xD00000000000001ELL;
    v18 = 0x80000001ACF7E440;
    PluginRpcStream.terminate(status:)(v15);

    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void PluginRpcStream.receiveNextResponse()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  v1 = *v0;
  if ((*(uint64_t (**)(void))(*v0 + 184))())
  {
    v2 = swift_allocObject();
    swift_weakInit();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 80);
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 88);
    *(_QWORD *)(v3 + 40) = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v3 + 48) = v2;
    swift_retain();
    NWConnection.receiveMessage(completion:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)log);
    oslog = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1ACCCC000, oslog, v5, "PluginRpcStream.receiveNextResponse: Stream not yet started", v6, 2u);
      MEMORY[0x1AF44981C](v6, -1, -1);
    }

  }
}

uint64_t closure #1 in PluginRpcStream.receiveNextResponse()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  int EnumCaseMultiPayload;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[2];
  uint64_t v88;

  v85 = a5;
  v83 = a3;
  v79 = a1;
  v80 = a2;
  v11 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v11);
  v71[1] = (char *)v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v13);
  v75 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Optional();
  v73 = *(_QWORD *)(v74 - 8);
  v15 = MEMORY[0x1E0C80A78](v74);
  v76 = (char *)v71 - v16;
  v77 = *(_QWORD *)(a8 - 8);
  v78 = a8;
  v17 = MEMORY[0x1E0C80A78](v15);
  v84 = (char *)v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v72 = (char *)v71 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginProtocolHeader?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PluginProtocolHeader();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v81 = (char *)v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v82 = (uint64_t)v71 - v27;
  v28 = type metadata accessor for PluginRpcError();
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for NWError();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)v71 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v85, (uint64_t)v33, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v33, v34);
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v30, v37, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v30, 0, 3, v34);
    swift_storeEnumTagMultiPayload();
    PluginRpcStream.terminate(error:)((uint64_t)v30);
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  }
  outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for NWError?);
  v39 = v84;
  if (!v83)
    goto LABEL_18;
  if (one-time initialization token for definition != -1)
    swift_once();
  v40 = dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)();
  if (!v40)
  {
LABEL_18:
    LOBYTE(v87[0]) = 13;
    *(_OWORD *)((char *)v87 + 8) = xmmword_1ACF5B680;
    *((_QWORD *)&v87[1] + 1) = 0x80000001ACF7E3A0;
    PluginRpcStream.terminate(status:)((char *)v87);
    return swift_release();
  }
  v41 = v40;
  type metadata accessor for NWProtocolFramer.Message();
  if (!swift_dynamicCastClass())
  {
    swift_release();
    goto LABEL_18;
  }
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (!*((_QWORD *)&v87[1] + 1))
  {
    outlined destroy of UUID?((uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, 1, 1, v23);
    goto LABEL_17;
  }
  v42 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v22, v42 ^ 1u, 1, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
LABEL_17:
    swift_release();
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for PluginProtocolHeader?);
    goto LABEL_18;
  }
  v43 = v82;
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v22, v82, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
  v44 = v81;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v43, (uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v46 = *v44;
      v47 = v80;
      if (v80 >> 60 == 15)
      {
        v48 = 0;
        v49 = 0;
      }
      else
      {
        v52 = v79;
        outlined copy of Data._Representation(v79, v80);
        static String.Encoding.utf8.getter();
        v48 = String.init(data:encoding:)();
        v49 = v53;
        outlined consume of Data?(v52, v47);
      }
      LOBYTE(v87[0]) = v46;
      *((_QWORD *)&v87[0] + 1) = 0;
      *(_QWORD *)&v87[1] = v48;
      *((_QWORD *)&v87[1] + 1) = v49;
      v54 = 0;
      swift_bridgeObjectRetain();
      PluginRpcStream.terminate(status:)((char *)v87);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined destroy of ActivitySession.DomainAssertionWrapper(v43, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
    }
    else
    {
      v88 = 0;
      memset(v87, 0, sizeof(v87));
      outlined copy of Data?(v79, v80);
      v50 = v78;
      default argument 3 of Message.init(serializedData:extensions:partial:options:)(v78, a10);
      v51 = v76;
      Message.init(serializedData:extensions:partial:options:)();
      v55 = v77;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v51, 0, 1, v50);
      v56 = v72;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v72, v51, v50);
      if (one-time initialization token for log != -1)
        swift_once();
      v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)log);
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v39, v56, v50);
      swift_retain();
      v58 = v55;
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = swift_slowAlloc();
        v62 = swift_slowAlloc();
        v85 = v41;
        v83 = v62;
        *(_QWORD *)&v87[0] = v62;
        *(_DWORD *)v61 = 136315395;
        v63 = PluginRpcStream.description.getter();
        v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, (uint64_t *)v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 12) = 2081;
        v65 = dispatch thunk of CustomStringConvertible.description.getter();
        v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)v87);
        v50 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v67 = *(void (**)(char *, uint64_t))(v58 + 8);
        v67(v39, v50);
        _os_log_impl(&dword_1ACCCC000, v59, v60, "RPC %s received response message %{private}s", (uint8_t *)v61, 0x16u);
        v68 = v83;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v68, -1, -1);
        v69 = v61;
        v56 = v72;
        MEMORY[0x1AF44981C](v69, -1, -1);
      }
      else
      {
        swift_release();
        v67 = *(void (**)(char *, uint64_t))(v58 + 8);
        v67(v39, v50);
      }

      swift_retain();
      PassthroughSubject.send(_:)();
      v70 = swift_release();
      PluginRpcStream.receiveNextResponse()(v70);
      swift_release();
      swift_release();
      v67(v56, v50);
      return outlined destroy of ActivitySession.DomainAssertionWrapper(v82, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
    }
  }
  else
  {
    LOBYTE(v87[0]) = 13;
    *(_OWORD *)((char *)v87 + 8) = xmmword_1ACF5B670;
    *((_QWORD *)&v87[1] + 1) = 0x80000001ACF7E3F0;
    PluginRpcStream.terminate(status:)((char *)v87);
    swift_release();
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v43, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for PluginProtocolHeader);
  }
}

uint64_t PluginRpcStream.terminate(status:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for PluginRpcError();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    v11 = *((_QWORD *)a1 + 3);
    *v7 = *a1;
    v23 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(v7 + 8) = v23;
    *((_QWORD *)v7 + 3) = v11;
    swift_storeEnumTagMultiPayload();
    v12 = (id)v23;
    swift_bridgeObjectRetain();
    PluginRpcStream.terminate(error:)((uint64_t)v7);
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  }
  else
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)log);
    swift_retain();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v25 = v18;
      *(_DWORD *)v17 = 136315138;
      *(_QWORD *)&v23 = v17 + 4;
      v19 = PluginRpcStream.description.getter();
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v15, v16, "RPC %s terminating successfully", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      MEMORY[0x1AF44981C](v17, -1, -1);

    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    PassthroughSubject.send(completion:)();
    v21 = outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(v21);
    if (v22)
    {
      AnyCancellable.cancel()();
      v22 = swift_release();
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 184))(v22);
    if (result)
    {
      NWConnection.cancel()();
      return swift_release();
    }
  }
  return result;
}

uint64_t PluginRpcStream.terminate(error:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v37 - v11;
  v13 = type metadata accessor for PluginRpcError();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v45 = (uint64_t)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v37 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v37 - v20;
  if (one-time initialization token for log != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)log);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  swift_retain();
  v23 = Logger.logObject.getter();
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v46))
  {
    v38 = v19;
    v41 = v23;
    v44 = a1;
    v24 = swift_slowAlloc();
    v40 = swift_slowAlloc();
    v48 = v40;
    *(_DWORD *)v24 = 136315394;
    v25 = PluginRpcStream.description.getter();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v48);
    v39 = &v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for PluginRpcError?);
    v42 = v14;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13);
    v43 = v13;
    if (v27 == 1)
    {
      v28 = 0xE300000000000000;
      v29 = 7104878;
    }
    else
    {
      v30 = (uint64_t)v38;
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v10, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v30, v45, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      v29 = String.init<A>(reflecting:)();
      v28 = v31;
      outlined destroy of ActivitySession.DomainAssertionWrapper(v30, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    }
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for PluginRpcError?);
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    v32 = v41;
    _os_log_impl(&dword_1ACCCC000, v41, (os_log_type_t)v46, "RPC %s terminating with failure: %s", (uint8_t *)v24, 0x16u);
    v33 = v40;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v24, -1, -1);

    v13 = v43;
    a1 = v44;
    v14 = v42;
  }
  else
  {
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);

  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  PassthroughSubject.send(completion:)();
  v34 = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(v34);
  if (v35)
  {
    AnyCancellable.cancel()();
    v35 = swift_release();
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 184))(v35);
  if (result)
  {
    NWConnection.cancel()();
    return swift_release();
  }
  return result;
}

uint64_t PluginRpcStream.InputSubscriber.rpcStream.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t PluginRpcStream.InputSubscriber.rpcStream.setter()
{
  swift_beginAccess();
  swift_weakAssign();
  return swift_release();
}

void (*PluginRpcStream.InputSubscriber.rpcStream.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return PluginRpcStream.InputSubscriber.rpcStream.modify;
}

void PluginRpcStream.InputSubscriber.rpcStream.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_weakAssign();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

void PluginRpcStream.InputSubscriber.receive(subscription:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  closure #1 in PluginRpcStream.InputSubscriber.receive(subscription:)(v1, a1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
}

uint64_t closure #1 in PluginRpcStream.InputSubscriber.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  outlined init with copy of UserNotificationCenter(a2, (uint64_t)v5);
  outlined init with take of Subscription?((uint64_t)v5, (uint64_t)v4);
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v4, a1 + 24, &demangling cache variable for type metadata for Subscription?);
  return swift_endAccess();
}

uint64_t PluginRpcStream.InputSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v1;

  if ((*(uint64_t (**)(void))(*(_QWORD *)v1 + 160))())
  {
    PluginRpcStream.sendNextRequest(_:)(a1);
    swift_release();
  }
  return static Subscribers.Demand.none.getter();
}

uint64_t PluginRpcStream.InputSubscriber.receive(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for NWConnection.SendCompletion();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 160))(v3);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 184))(v6);
    v6 = swift_release();
    if (v7)
    {
      type metadata accessor for NWConnection.ContentContext();
      static NWConnection.ContentContext.finalMessage.getter();
      *v5 = destructiveProjectEnumData for ActivitySession.Errors;
      v5[1] = 0;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0CCE460], v1);
      NWConnection.send(content:contentContext:isComplete:completion:)();
      swift_release();
      swift_release();
      v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 216))(v6);
}

Swift::Void __swiftcall PluginRpcStream.InputSubscriber.requestNextMessage()()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  _QWORD v4[4];

  v1 = *(_QWORD *)(v0 + 16);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + 24, (uint64_t)&v2, &demangling cache variable for type metadata for Subscription?);
  if (v3)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v2, (uint64_t)v4);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
    __swift_project_boxed_opaque_existential_1(v4, v4[3]);
    dispatch thunk of Subscription.request(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v2, &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  }
}

Swift::Void __swiftcall PluginRpcStream.InputSubscriber.resetSubscription()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in PluginRpcStream.InputSubscriber.resetSubscription()(v0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t closure #1 in PluginRpcStream.InputSubscriber.resetSubscription()(uint64_t a1)
{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;

  v1 = a1 + 24;
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v3, v1, &demangling cache variable for type metadata for Subscription?);
  return swift_endAccess();
}

uint64_t PluginRpcStream.InputSubscriber.deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of UUID?(v0 + 24, &demangling cache variable for type metadata for Subscription?);
  swift_weakDestroy();
  return v0;
}

uint64_t PluginRpcStream.InputSubscriber.__deallocating_deinit()
{
  PluginRpcStream.InputSubscriber.deinit();
  return swift_deallocClassInstance();
}

uint64_t PluginRpcStream.InputSubscriber.init()()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  type metadata accessor for Lock();
  v1 = swift_allocObject();
  v2 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = 0;
  *(_QWORD *)(v0 + 16) = v1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  swift_weakInit();
  return v0;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance PluginRpcStream<A, B>.InputSubscriber()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance PluginRpcStream<A, B>.InputSubscriber()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance PluginRpcStream<A, B>.InputSubscriber(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 200))(*a1);
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance PluginRpcStream<A1, B1>.InputSubscriber()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

void PluginRpcStream.receive<A>(subscriber:)()
{
  type metadata accessor for PluginRpcStream.OutputSubscription();
}

uint64_t sub_1ACD1B468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  swift_allocObject();
  v5 = swift_retain();
  v6 = specialized PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)(v5, v3, v2, v1);
  v8[3] = a1;
  v8[4] = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginRpcStream<A, B>.OutputSubscription, a1);
  v8[0] = v6;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
}

uint64_t PluginRpcStream.OutputSubscription.cancel()()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v2, v0 + 24, &demangling cache variable for type metadata for Cancellable?);
  return swift_endAccess();
}

uint64_t PluginRpcStream.OutputSubscription.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of UUID?(v0 + 24, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Cancellable.cancel() in conformance PluginRpcStream<A, B>.OutputSubscription()
{
  return PluginRpcStream.OutputSubscription.cancel()();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance PluginRpcStream<A, B>()
{
  PluginRpcStream.receive<A>(subscriber:)();
}

uint64_t PluginRpcStream.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  _QWORD v14[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + direct field offset for PluginRpcStream.traceId, (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of UUID?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v8 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v9 = *(_QWORD *)(v0 + 24);
    v14[0] = *(_QWORD *)(v0 + 16);
    v14[1] = v9;
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = 10272;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v8 = v14[0];
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginRpcStream<A, B>()
{
  return PluginRpcStream.description.getter();
}

void specialized PluginRpcStream.init(definition:input:traceId:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = direct field offset for PluginRpcStream.output;
  type metadata accessor for PluginRpcError();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (uint64_t (*)(uint64_t))type metadata accessor for PluginRpcError, (uint64_t)&protocol conformance descriptor for PluginRpcError);
  type metadata accessor for PassthroughSubject();
  *(_QWORD *)(v0 + v1) = PassthroughSubject.__allocating_init()();
  type metadata accessor for PluginRpcStream.InputSubscriber();
}

uint64_t sub_1ACD1B81C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;

  v8 = swift_allocObject();
  PluginRpcStream.InputSubscriber.init()();
  *(_QWORD *)(v1 + v3) = v8;
  *(_QWORD *)(v1 + direct field offset for PluginRpcStream.cancellable) = 0;
  *(_QWORD *)(v1 + direct field offset for PluginRpcStream.stream) = 0;
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = v5;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, v1 + direct field offset for PluginRpcStream.traceId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = *(void (**)(uint64_t))(**(_QWORD **)(v1 + *(_QWORD *)(v6 + 2584)) + 168);
  swift_retain();
  v10 = swift_retain();
  v9(v10);
  swift_release();
  v11 = type metadata accessor for AnyPublisher();
  swift_retain();
  MEMORY[0x1AF44972C](MEMORY[0x1E0C95D90], v11);
  MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginRpcStream<A, B>.InputSubscriber, a1);
  Publisher.subscribe<A>(_:)();
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  return v1;
}

void specialized PluginRpcStream.__allocating_init(definition:input:traceId:)()
{
  type metadata accessor for PluginRpcStream();
}

void sub_1ACD1B980()
{
  swift_allocObject();
  specialized PluginRpcStream.init(definition:input:traceId:)();
}

uint64_t sub_1ACD1B9B4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginRpcStream.start(stream:)(uint64_t a1)
{
  return closure #1 in PluginRpcStream.start(stream:)(a1);
}

uint64_t outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void type metadata accessor for PluginRpcStream.OutputSubscription()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t specialized PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  void (*v26)(char *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v27 = a2;
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  v30 = v4 + 24;
  v31 = v4;
  *(_QWORD *)(v4 + 16) = v10;
  v12 = *(_QWORD *)(v10 + direct field offset for PluginRpcStream.output);
  v28 = v10;
  v29 = v12;
  v32[0] = v12;
  v26 = *(void (**)(char *))(v8 + 16);
  v26(v11);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + 64) & ~v13;
  v25[1] = v13 | 7;
  v15 = (char *)swift_allocObject();
  v25[0] = v7[10];
  *((_QWORD *)v15 + 2) = v25[0];
  v16 = v7[11];
  *((_QWORD *)v15 + 3) = v16;
  *((_QWORD *)v15 + 4) = a3;
  v17 = v7[12];
  *((_QWORD *)v15 + 5) = v17;
  v18 = v7[13];
  *((_QWORD *)v15 + 6) = v18;
  *((_QWORD *)v15 + 7) = a4;
  v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v19(&v15[v14], v11, a3);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v11, v27, a3);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = v25[0];
  *((_QWORD *)v20 + 3) = v16;
  *((_QWORD *)v20 + 4) = a3;
  *((_QWORD *)v20 + 5) = v17;
  *((_QWORD *)v20 + 6) = v18;
  *((_QWORD *)v20 + 7) = a4;
  v19(&v20[v14], v11, a3);
  type metadata accessor for PluginRpcError();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (uint64_t (*)(uint64_t))type metadata accessor for PluginRpcError, (uint64_t)&protocol conformance descriptor for PluginRpcError);
  v21 = type metadata accessor for PassthroughSubject();
  swift_retain();
  swift_retain();
  MEMORY[0x1AF44972C](MEMORY[0x1E0C95F48], v21);
  v22 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  v32[3] = type metadata accessor for AnyCancellable();
  v32[4] = MEMORY[0x1E0C95DF8];
  swift_release();
  v32[0] = v22;
  v23 = v30;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v32, v23, &demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  return v31;
}

void base witness table accessor for CustomCombineIdentifierConvertible in PluginRpcStream<A, B>.InputSubscriber()
{
  JUMPOUT(0x1AF44972CLL);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in PluginRpcStream<A, B>.InputSubscriber()
{
  return MEMORY[0x1E0DEDD18];
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in PluginRpcStream<A, B>()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (uint64_t (*)(uint64_t))type metadata accessor for PluginRpcError, (uint64_t)&protocol conformance descriptor for PluginRpcError);
}

uint64_t sub_1ACD1BCBC()
{
  return 32;
}

__n128 sub_1ACD1BCC8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD1BCD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD1BD04(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ACD1BD34()
{
  return 32;
}

__n128 sub_1ACD1BD40(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t keypath_getTm@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t keypath_setTm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 168);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ACD1BDB4()
{
  return 32;
}

__n128 sub_1ACD1BDC0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata completion function for PluginRpcStream()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

void type metadata accessor for PluginRpcStream()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t method lookup function for PluginRpcStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginRpcStream.cancellable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PluginRpcStream.cancellable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PluginRpcStream.cancellable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PluginRpcStream.stream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PluginRpcStream.stream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PluginRpcStream.stream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PluginRpcStream.__allocating_init(definition:input:traceId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PluginRpcStream.start(stream:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t type metadata completion function for PluginRpcStream.InputSubscriber()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for PluginRpcStream.InputSubscriber()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t method lookup function for PluginRpcStream.InputSubscriber()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.receive(subscription:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.receive(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.receive(completion:)(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 200))(a1 & 1);
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.requestNextMessage()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.resetSubscription()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t type metadata completion function for PluginRpcStream.OutputSubscription()
{
  return swift_initClassMetadata2();
}

void base witness table accessor for Cancellable in PluginRpcStream<A, B>.OutputSubscription()
{
  JUMPOUT(0x1AF44972CLL);
}

void base witness table accessor for CustomCombineIdentifierConvertible in PluginRpcStream<A, B>.OutputSubscription()
{
  JUMPOUT(0x1AF44972CLL);
}

uint64_t sub_1ACD1C04C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginRpcStream.receiveNextResponse()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return closure #1 in PluginRpcStream.receiveNextResponse()(a1, a2, a3, a4, a5, v5[6], v5[2], v5[3], v5[4], v5[5]);
}

uint64_t partial apply for closure #1 in PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)()
{
  return dispatch thunk of Subscriber.receive(completion:)();
}

uint64_t objectdestroy_17Tm()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t partial apply for closure #1 in PluginRpcStream.sendNextRequest(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PluginRpcStream.sendNextRequest(_:)(a1, v1);
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in PluginRpcStream.sendPath()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PluginRpcStream.sendPath()(a1, v1);
}

Swift::Void __swiftcall SharableObjectIdentifier.update(_:)(Swift::Bool a1)
{
  Swift::Bool v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  MEMORY[0x1AF448244](&v1, &v2);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
}

void specialized SharableObjectIdentifier.update<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  v10[5] = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for String.Encoding();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[3] = a1;
  v10[4] = a2;
  static String.Encoding.utf8.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.data(using:allowLossyConversion:)();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v9 >> 60 != 15)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1ACD1C538);
}

void SharableObjectIdentifier.update<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for String.Encoding();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  StringProtocol.data(using:allowLossyConversion:)();
  v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5 >> 60 != 15)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1ACD1C7F4);
}

Swift::Void __swiftcall SharableObjectIdentifier.update(_:)(Swift::Double a1)
{
  Swift::Double v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  MEMORY[0x1AF448244](&v1, &v2);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
}

Swift::Void __swiftcall SharableObjectIdentifier.update(_:)(Swift::Float a1)
{
  Swift::Float v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  MEMORY[0x1AF448244](&v1, &v2);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t SharableObjectIdentifier.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in SharableObjectIdentifier.update<A>(_:), (uint64_t)&v9, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
}

uint64_t static SharableObjectIdentifier.identifier<A>(ofType:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = type metadata accessor for SharableObjectIdentifier();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  SHA256.init()();
  specialized SharableObjectIdentifier.update<A>(_:)(a2, a3);
  SharableObjectIdentifier.finalize<A>()(a4, a5);
  return outlined destroy of SharableObjectIdentifier((uint64_t)v11);
}

uint64_t SharableObjectIdentifier.finalize<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = type metadata accessor for SHA256Digest();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v12 - v9;
  SHA256.finalize()();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 8))(v8, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t static SharableObjectIdentifier.identifier<A, B>(ofType:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = type metadata accessor for SharableObjectIdentifier();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SharableObjectIdentifierEncoder();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  SharableObjectIdentifierEncoder.encode<A>(_:)((uint64_t)v11);
  result = swift_release();
  if (!v6)
  {
    SharableObjectIdentifier.finalize<A>()(a4, a6);
    return outlined destroy of SharableObjectIdentifier((uint64_t)v11);
  }
  return result;
}

uint64_t SharableObjectIdentifier.update<A>(_:)()
{
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  return HashFunction.update<A>(data:)();
}

uint64_t closure #1 in SharableObjectIdentifier.update<A>(_:)()
{
  MEMORY[0x1AF448244]();
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t UUID.init(digest:)(uint64_t a1)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8));
  SHA256Digest.withUnsafeBytes<A>(_:)();
  UUID.init(uuid:)();
  v2 = type metadata accessor for SHA256Digest();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

_OWORD *closure #1 in UUID.init(digest:)@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (result)
  {
    if (a2 - (uint64_t)result >= 16)
    {
      *a3 = *result;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SecureHashTruncatable<>.init(digest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  _BYTE *v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = &v20[-v12];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1AF448CB8](&unk_1ACF5B928, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x1AF448C10](v13, a2, v10);
  v15 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v16 = v15 + 7;
  v17 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  if (v15 >= 0)
    v16 = v15;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = v16 >> 3;
  v26 = v17;
  SHA256Digest.withUnsafeBytes<A>(_:)();
  v18 = type metadata accessor for SHA256Digest();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
}

uint64_t specialized closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a4 == a5)
  {
    v5 = a2 - result;
    if (!result)
      v5 = 0;
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (a4 == a5)
  {
    v5 = a2 - result;
    if (!result)
      v5 = 0;
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (a4 == a5)
  {
    v5 = a2 - result;
    if (!result)
      v5 = 0;
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (a4 == a5)
  {
    v5 = a2 - result;
    if (!result)
      v5 = 0;
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;

  if (a3 == a4)
  {
    v6 = a6 - a5;
    if (!a5)
      v6 = 0;
    if (v6 >= a3)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[4];
  int64x2_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = 0;
  v6[3] = v6;
  v7 = vdupq_n_s64(8uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  v4 = type metadata accessor for SHA256Digest();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6[0];
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int(a1, a2);
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int8(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  char v6;
  char *v7;
  int64x2_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = vdupq_n_s64(1uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  v4 = type metadata accessor for SHA256Digest();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6;
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int8(a1, a2);
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int16@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int16(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  __int16 v6;
  __int16 *v7;
  int64x2_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = vdupq_n_s64(2uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  v4 = type metadata accessor for SHA256Digest();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6;
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt16@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int16(a1, a2);
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int32@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int32(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  int v6;
  int *v7;
  int64x2_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = vdupq_n_s64(4uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  v4 = type metadata accessor for SHA256Digest();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6;
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt32@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int32(a1, a2);
}

uint64_t String.init(digest:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5031_sSS14CopresenceCoreE6digestSS9d5Kit12fG21V_tcfcSSs5UInt8VXEfU_Tf1cn_n(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v2 = BidirectionalCollection<>.joined(separator:)();
  v3 = type metadata accessor for SHA256Digest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5031_sSS14CopresenceCoreE6digestSS9d5Kit12fG21V_tcfcSSs5UInt8VXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v2 = type metadata accessor for SHA256Digest();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, v6, MEMORY[0x1E0CA9308]);
  v7 = dispatch thunk of Sequence.underestimatedCount.getter();
  v38 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  v8 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  result = dispatch thunk of Sequence.makeIterator()();
  if ((v7 & 0x8000000000000000) == 0)
  {
    v10 = v37;
    if (v7)
    {
      v11 = *(_QWORD *)(v36 + 16);
      v34 = v36;
      *(_QWORD *)&v35 = v11;
      v33 = v36 + 32;
      v32 = xmmword_1ACF59E20;
      v12 = v37;
      while ((_QWORD)v35 != v12)
      {
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_21;
        if (v12 >= *(_QWORD *)(v34 + 16))
          goto LABEL_22;
        v13 = *(_BYTE *)(v33 + v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = v32;
        *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEDE70];
        *(_QWORD *)(v14 + 64) = MEMORY[0x1E0DEDEC8];
        *(_BYTE *)(v14 + 32) = v13;
        result = String.init(format:_:)();
        v15 = result;
        v17 = v16;
        v38 = v8;
        v19 = *(_QWORD *)(v8 + 16);
        v18 = *(_QWORD *)(v8 + 24);
        if (v19 >= v18 >> 1)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v8 = v38;
        }
        *(_QWORD *)(v8 + 16) = v19 + 1;
        v20 = v8 + 16 * v19;
        *(_QWORD *)(v20 + 32) = v15;
        *(_QWORD *)(v20 + 40) = v17;
        ++v12;
        if (!--v7)
        {
          v37 = v12;
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
      v12 = v37;
LABEL_12:
      v21 = v36;
      v22 = *(_QWORD *)(v36 + 16);
      if (v12 == v22)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        return v8;
      }
      v35 = xmmword_1ACF59E20;
      while (v12 < v22)
      {
        v23 = *(_BYTE *)(v21 + 32 + v12);
        v37 = v12 + 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = v35;
        *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEDE70];
        *(_QWORD *)(v24 + 64) = MEMORY[0x1E0DEDEC8];
        *(_BYTE *)(v24 + 32) = v23;
        result = String.init(format:_:)();
        v25 = result;
        v27 = v26;
        v38 = v8;
        v29 = *(_QWORD *)(v8 + 16);
        v28 = *(_QWORD *)(v8 + 24);
        if (v29 >= v28 >> 1)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v8 = v38;
        }
        *(_QWORD *)(v8 + 16) = v29 + 1;
        v30 = v8 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v25;
        *(_QWORD *)(v30 + 40) = v27;
        v12 = v37;
        v22 = *(_QWORD *)(v21 + 16);
        if (v37 == v22)
          goto LABEL_13;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance String@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5031_sSS14CopresenceCoreE6digestSS9d5Kit12fG21V_tcfcSSs5UInt8VXEfU_Tf1cn_n(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v4 = BidirectionalCollection<>.joined(separator:)();
  v6 = v5;
  v7 = type metadata accessor for SHA256Digest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for Insecure.MD5();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9A18], MEMORY[0x1E0CA9A10]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in SharableObjectIdentifier.update<A>(_:)()
{
  return closure #1 in SharableObjectIdentifier.update<A>(_:)();
}

uint64_t type metadata accessor for SharableObjectIdentifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SharableObjectIdentifier;
  if (!type metadata singleton initialization cache for SharableObjectIdentifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 40);
  v12[1] = *(_OWORD *)(v8 + 48);
  v13 = a1;
  v14 = a2;
  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, (uint64_t)partial apply for closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:), (uint64_t)v12, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t dispatch thunk of SecureHashTruncatable.init(digest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SHA256();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for SharableObjectIdentifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SHA256();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharableObjectIdentifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD1DFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SHA256();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SharableObjectIdentifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD1DFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SHA256();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SharableObjectIdentifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SHA256();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0CB1AA0], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  uint64_t *v2;

  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  uint64_t *v2;

  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  uint64_t *v2;

  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

uint64_t partial apply for closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t GroupActivityDescription.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.actionDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.ongoingDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.completedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int GroupActivityDescription.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void __swiftcall GroupActivityDescription.init(id:actionDescription:ongoingDescription:completedDescription:)(CopresenceCore::GroupActivityDescription *__return_ptr retstr, Swift::String id, Swift::String actionDescription, Swift::String ongoingDescription, Swift::String completedDescription)
{
  retstr->id = id;
  retstr->actionDescription = actionDescription;
  retstr->ongoingDescription = ongoingDescription;
  retstr->completedDescription = completedDescription;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupActivityDescription()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivityDescription()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void one-time initialization function for generic()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD588];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x4F545F4552414853;
  v5._object = (void *)0xEE00524548544547;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E750;
  v10._countAndFlagsBits = 0xD000000000000010;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0x545F444552414853;
  v15._object = (void *)0xEF5245485445474FLL;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.generic = v19;
  *(_QWORD *)algn_1EECB15F8 = v21;
  xmmword_1EECB1600 = (__int128)v8;
  xmmword_1EECB1610 = (__int128)v13;
  xmmword_1EECB1620 = (__int128)v18;
}

void GroupActivityDescription.init(id:actionDescription:ongoingDescription:completedDescription:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  *a8 = v16;
  a8[1] = v18;
  a8[2] = a2;
  a8[3] = a3;
  a8[4] = a4;
  a8[5] = a5;
  a8[6] = a6;
  a8[7] = a7;
}

uint64_t static GroupActivityDescription.generic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for generic != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB15F8;
  v3 = xmmword_1EECB1600;
  v4 = xmmword_1EECB1610;
  v5 = xmmword_1EECB1620;
  *(_QWORD *)a1 = static GroupActivityDescription.generic;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for collaboration()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD570];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001ACF7E6F0;
  v5._countAndFlagsBits = 0xD000000000000014;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000016;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E710;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E730;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.collaboration = v19;
  *(_QWORD *)algn_1EECB1638 = v21;
  xmmword_1EECB1640 = (__int128)v8;
  xmmword_1EECB1650 = (__int128)v13;
  xmmword_1EECB1660 = (__int128)v18;
}

uint64_t static GroupActivityDescription.collaboration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for collaboration != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB1638;
  v3 = xmmword_1EECB1640;
  v4 = xmmword_1EECB1650;
  v5 = xmmword_1EECB1660;
  *(_QWORD *)a1 = static GroupActivityDescription.collaboration;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for listenTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD598];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x545F4E455453494CLL;
  v5._object = (void *)0xEF5245485445474FLL;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000012;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E6B0;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E6D0;
  v15._countAndFlagsBits = 0xD000000000000011;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.listenTogether = v19;
  *(_QWORD *)algn_1EECB1678 = v21;
  xmmword_1EECB1680 = (__int128)v8;
  xmmword_1EECB1690 = (__int128)v13;
  xmmword_1EECB16A0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.listenTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for listenTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB1678;
  v3 = xmmword_1EECB1680;
  v4 = xmmword_1EECB1690;
  v5 = xmmword_1EECB16A0;
  *(_QWORD *)a1 = static GroupActivityDescription.listenTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for watchTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD5C0];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x4F545F4843544157;
  v5._object = (void *)0xEE00524548544547;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E670;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E690;
  v15._countAndFlagsBits = 0xD000000000000010;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.watchTogether = v19;
  *(_QWORD *)algn_1EECB16B8 = v21;
  xmmword_1EECB16C0 = (__int128)v8;
  xmmword_1EECB16D0 = (__int128)v13;
  xmmword_1EECB16E0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.watchTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for watchTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB16B8;
  v3 = xmmword_1EECB16C0;
  v4 = xmmword_1EECB16D0;
  v5 = xmmword_1EECB16E0;
  *(_QWORD *)a1 = static GroupActivityDescription.watchTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for playTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD5A0];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x474F545F59414C50;
  v5._object = (void *)0xED00005245485445;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E650;
  v10._countAndFlagsBits = 0xD000000000000010;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0x545F444559414C50;
  v15._object = (void *)0xEF5245485445474FLL;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.playTogether = v19;
  *(_QWORD *)algn_1EECB16F8 = v21;
  xmmword_1EECB1700 = (__int128)v8;
  xmmword_1EECB1710 = (__int128)v13;
  xmmword_1EECB1720 = (__int128)v18;
}

uint64_t static GroupActivityDescription.playTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for playTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB16F8;
  v3 = xmmword_1EECB1700;
  v4 = xmmword_1EECB1710;
  v5 = xmmword_1EECB1720;
  *(_QWORD *)a1 = static GroupActivityDescription.playTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for workoutTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD5C8];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001ACF7E5F0;
  v5._countAndFlagsBits = 0xD000000000000011;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000013;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E610;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._countAndFlagsBits = 0xD000000000000012;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E630;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.workoutTogether = v19;
  *(_QWORD *)algn_1EECB1738 = v21;
  xmmword_1EECB1740 = (__int128)v8;
  xmmword_1EECB1750 = (__int128)v13;
  xmmword_1EECB1760 = (__int128)v18;
}

uint64_t static GroupActivityDescription.workoutTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for workoutTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB1738;
  v3 = xmmword_1EECB1740;
  v4 = xmmword_1EECB1750;
  v5 = xmmword_1EECB1760;
  *(_QWORD *)a1 = static GroupActivityDescription.workoutTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for shopTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD5B8];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x474F545F504F4853;
  v5._object = (void *)0xED00005245485445;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E5B0;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E5D0;
  v15._countAndFlagsBits = 0xD000000000000010;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.shopTogether = v19;
  *(_QWORD *)algn_1EECB1778 = v21;
  xmmword_1EECB1780 = (__int128)v8;
  xmmword_1EECB1790 = (__int128)v13;
  xmmword_1EECB17A0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.shopTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for shopTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB1778;
  v3 = xmmword_1EECB1780;
  v4 = xmmword_1EECB1790;
  v5 = xmmword_1EECB17A0;
  *(_QWORD *)a1 = static GroupActivityDescription.shopTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for readTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD5A8];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x474F545F44414552;
  v5._object = (void *)0xED00005245485445;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E570;
  v10._countAndFlagsBits = 0xD000000000000010;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._countAndFlagsBits = 0xD000000000000017;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E590;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.readTogether = v19;
  *(_QWORD *)algn_1EECB17B8 = v21;
  xmmword_1EECB17C0 = (__int128)v8;
  xmmword_1EECB17D0 = (__int128)v13;
  xmmword_1EECB17E0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.readTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for readTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB17B8;
  v3 = xmmword_1EECB17C0;
  v4 = xmmword_1EECB17D0;
  v5 = xmmword_1EECB17E0;
  *(_QWORD *)a1 = static GroupActivityDescription.readTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for exploreTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD580];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001ACF7E510;
  v5._countAndFlagsBits = 0xD000000000000010;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000012;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E530;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._countAndFlagsBits = 0xD000000000000011;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E550;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.exploreTogether = v19;
  *(_QWORD *)algn_1EECB17F8 = v21;
  xmmword_1EECB1800 = (__int128)v8;
  xmmword_1EECB1810 = (__int128)v13;
  xmmword_1EECB1820 = (__int128)v18;
}

uint64_t static GroupActivityDescription.exploreTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for exploreTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB17F8;
  v3 = xmmword_1EECB1800;
  v4 = xmmword_1EECB1810;
  v5 = xmmword_1EECB1820;
  *(_QWORD *)a1 = static GroupActivityDescription.exploreTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for learnTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD590];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x4F545F4E5241454CLL;
  v5._object = (void *)0xEE00524548544547;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E4D0;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E4F0;
  v15._countAndFlagsBits = 0xD000000000000010;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.learnTogether = v19;
  *(_QWORD *)algn_1EECB1838 = v21;
  xmmword_1EECB1840 = (__int128)v8;
  xmmword_1EECB1850 = (__int128)v13;
  xmmword_1EECB1860 = (__int128)v18;
}

uint64_t static GroupActivityDescription.learnTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for learnTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB1838;
  v3 = xmmword_1EECB1840;
  v4 = xmmword_1EECB1850;
  v5 = xmmword_1EECB1860;
  *(_QWORD *)a1 = static GroupActivityDescription.learnTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for createTogether()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD578];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x545F455441455243;
  v5._object = (void *)0xEF5245485445474FLL;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001ACF7E490;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001ACF7E4B0;
  v15._countAndFlagsBits = 0xD000000000000010;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.createTogether = v19;
  *(_QWORD *)algn_1EECB1878 = v21;
  xmmword_1EECB1880 = (__int128)v8;
  xmmword_1EECB1890 = (__int128)v13;
  xmmword_1EECB18A0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.createTogether.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for createTogether != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB1878;
  v3 = xmmword_1EECB1880;
  v4 = xmmword_1EECB1890;
  v5 = xmmword_1EECB18A0;
  *(_QWORD *)a1 = static GroupActivityDescription.createTogether;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for screenSharing()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)*MEMORY[0x1E0DBD5B0];
  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x535F4E4545524353;
  v5._object = (void *)0xEC00000045524148;
  v6.value._countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0x535F4E4545524353;
  v10._object = (void *)0xEE00474E49524148;
  v11.value._countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0x535F4E4545524353;
  v15._object = (void *)0xED00004445524148;
  v16.value._countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  static GroupActivityDescription.screenSharing = v19;
  *(_QWORD *)algn_1EECB18B8 = v21;
  xmmword_1EECB18C0 = (__int128)v8;
  xmmword_1EECB18D0 = (__int128)v13;
  xmmword_1EECB18E0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.screenSharing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for screenSharing != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EECB18B8;
  v3 = xmmword_1EECB18C0;
  v4 = xmmword_1EECB18D0;
  v5 = xmmword_1EECB18E0;
  *(_QWORD *)a1 = static GroupActivityDescription.screenSharing;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for allCases()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<GroupActivityDescription>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1ACF5BA30;
  if (one-time initialization token for generic != -1)
    swift_once();
  v1 = *(_QWORD *)algn_1EECB15F8;
  v2 = xmmword_1EECB1600;
  v3 = xmmword_1EECB1610;
  v4 = xmmword_1EECB1620;
  *(_QWORD *)(v0 + 32) = static GroupActivityDescription.generic;
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v0 + 80) = v4;
  v5 = one-time initialization token for watchTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != -1)
    swift_once();
  v6 = *(_QWORD *)algn_1EECB16B8;
  v7 = xmmword_1EECB16C0;
  v8 = xmmword_1EECB16D0;
  v9 = xmmword_1EECB16E0;
  *(_QWORD *)(v0 + 96) = static GroupActivityDescription.watchTogether;
  *(_QWORD *)(v0 + 104) = v6;
  *(_OWORD *)(v0 + 112) = v7;
  *(_OWORD *)(v0 + 128) = v8;
  *(_OWORD *)(v0 + 144) = v9;
  v10 = one-time initialization token for listenTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = *(_QWORD *)algn_1EECB1678;
  v12 = xmmword_1EECB1680;
  v13 = xmmword_1EECB1690;
  v14 = xmmword_1EECB16A0;
  *(_QWORD *)(v0 + 160) = static GroupActivityDescription.listenTogether;
  *(_QWORD *)(v0 + 168) = v11;
  *(_OWORD *)(v0 + 176) = v12;
  *(_OWORD *)(v0 + 192) = v13;
  *(_OWORD *)(v0 + 208) = v14;
  v15 = one-time initialization token for playTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15 != -1)
    swift_once();
  v16 = *(_QWORD *)algn_1EECB16F8;
  v17 = xmmword_1EECB1700;
  v18 = xmmword_1EECB1710;
  v19 = xmmword_1EECB1720;
  *(_QWORD *)(v0 + 224) = static GroupActivityDescription.playTogether;
  *(_QWORD *)(v0 + 232) = v16;
  *(_OWORD *)(v0 + 240) = v17;
  *(_OWORD *)(v0 + 256) = v18;
  *(_OWORD *)(v0 + 272) = v19;
  v20 = one-time initialization token for workoutTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20 != -1)
    swift_once();
  v21 = *(_QWORD *)algn_1EECB1738;
  v22 = xmmword_1EECB1740;
  v23 = xmmword_1EECB1750;
  v24 = xmmword_1EECB1760;
  *(_QWORD *)(v0 + 288) = static GroupActivityDescription.workoutTogether;
  *(_QWORD *)(v0 + 296) = v21;
  *(_OWORD *)(v0 + 304) = v22;
  *(_OWORD *)(v0 + 320) = v23;
  *(_OWORD *)(v0 + 336) = v24;
  v25 = one-time initialization token for screenSharing;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25 != -1)
    swift_once();
  v26 = *(_QWORD *)algn_1EECB18B8;
  v27 = xmmword_1EECB18C0;
  v28 = xmmword_1EECB18D0;
  v29 = xmmword_1EECB18E0;
  *(_QWORD *)(v0 + 352) = static GroupActivityDescription.screenSharing;
  *(_QWORD *)(v0 + 360) = v26;
  *(_OWORD *)(v0 + 368) = v27;
  *(_OWORD *)(v0 + 384) = v28;
  *(_OWORD *)(v0 + 400) = v29;
  v30 = one-time initialization token for shopTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30 != -1)
    swift_once();
  v31 = *(_QWORD *)algn_1EECB1778;
  v32 = xmmword_1EECB1780;
  v33 = xmmword_1EECB1790;
  v34 = xmmword_1EECB17A0;
  *(_QWORD *)(v0 + 416) = static GroupActivityDescription.shopTogether;
  *(_QWORD *)(v0 + 424) = v31;
  *(_OWORD *)(v0 + 432) = v32;
  *(_OWORD *)(v0 + 448) = v33;
  *(_OWORD *)(v0 + 464) = v34;
  v35 = one-time initialization token for readTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v35 != -1)
    swift_once();
  v36 = *(_QWORD *)algn_1EECB17B8;
  v37 = xmmword_1EECB17C0;
  v38 = xmmword_1EECB17D0;
  v39 = xmmword_1EECB17E0;
  *(_QWORD *)(v0 + 480) = static GroupActivityDescription.readTogether;
  *(_QWORD *)(v0 + 488) = v36;
  *(_OWORD *)(v0 + 496) = v37;
  *(_OWORD *)(v0 + 512) = v38;
  *(_OWORD *)(v0 + 528) = v39;
  v40 = one-time initialization token for exploreTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 != -1)
    swift_once();
  v41 = *(_QWORD *)algn_1EECB17F8;
  v42 = xmmword_1EECB1800;
  v43 = xmmword_1EECB1810;
  v44 = xmmword_1EECB1820;
  *(_QWORD *)(v0 + 544) = static GroupActivityDescription.exploreTogether;
  *(_QWORD *)(v0 + 552) = v41;
  *(_OWORD *)(v0 + 560) = v42;
  *(_OWORD *)(v0 + 576) = v43;
  *(_OWORD *)(v0 + 592) = v44;
  v45 = one-time initialization token for learnTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v45 != -1)
    swift_once();
  v46 = *(_QWORD *)algn_1EECB1838;
  v47 = xmmword_1EECB1840;
  v48 = xmmword_1EECB1850;
  v49 = xmmword_1EECB1860;
  *(_QWORD *)(v0 + 608) = static GroupActivityDescription.learnTogether;
  *(_QWORD *)(v0 + 616) = v46;
  *(_OWORD *)(v0 + 624) = v47;
  *(_OWORD *)(v0 + 640) = v48;
  *(_OWORD *)(v0 + 656) = v49;
  v50 = one-time initialization token for createTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v50 != -1)
    swift_once();
  v51 = *(_QWORD *)algn_1EECB1878;
  v52 = xmmword_1EECB1880;
  v53 = xmmword_1EECB1890;
  v54 = xmmword_1EECB18A0;
  *(_QWORD *)(v0 + 672) = static GroupActivityDescription.createTogether;
  *(_QWORD *)(v0 + 680) = v51;
  *(_OWORD *)(v0 + 688) = v52;
  *(_OWORD *)(v0 + 704) = v53;
  *(_OWORD *)(v0 + 720) = v54;
  static GroupActivityDescription.allCases = (_UNKNOWN *)v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static GroupActivityDescription.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static GroupActivityDescription.allCases.setter(void *a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  static GroupActivityDescription.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static GroupActivityDescription.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance GroupActivityDescription@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  *a1 = static GroupActivityDescription.allCases;
  return swift_bridgeObjectRetain();
}

void __swiftcall GroupActivityDescription.init(id:)(CopresenceCore::GroupActivityDescription_optional *__return_ptr retstr, Swift::String id)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t countAndFlagsBits;
  void *object;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  v2 = *((_QWORD *)static GroupActivityDescription.allCases + 2);
  if (v2)
  {
    v3 = (uint64_t *)((char *)static GroupActivityDescription.allCases + 48);
    while (1)
    {
      countAndFlagsBits = *(v3 - 2);
      object = (void *)*(v3 - 1);
      v7 = *v3;
      v6 = (void *)v3[1];
      v9 = v3[2];
      v8 = (void *)v3[3];
      v10 = v3[4];
      v11 = (void *)v3[5];
      if (countAndFlagsBits == id._countAndFlagsBits && object == id._object)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_13;
      v3 += 8;
      if (!--v2)
        goto LABEL_11;
    }
    countAndFlagsBits = id._countAndFlagsBits;
    object = id._object;
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    retstr->value.id._countAndFlagsBits = countAndFlagsBits;
    retstr->value.id._object = object;
    retstr->value.actionDescription._countAndFlagsBits = v7;
    retstr->value.actionDescription._object = v6;
    retstr->value.ongoingDescription._countAndFlagsBits = v9;
    retstr->value.ongoingDescription._object = v8;
    retstr->value.completedDescription._countAndFlagsBits = v10;
    retstr->value.completedDescription._object = v11;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    retstr->value.ongoingDescription = 0u;
    retstr->value.completedDescription = 0u;
    retstr->value.id = 0u;
    retstr->value.actionDescription = 0u;
  }
}

uint64_t GroupActivityDescription.init(id:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v2;
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  v3 = *((_QWORD *)static GroupActivityDescription.allCases + 2);
  if (v3)
  {
    v4 = (uint64_t *)((char *)static GroupActivityDescription.allCases + 48);
    while (1)
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v8 = *v4;
      v7 = v4[1];
      v9 = v4[2];
      v10 = v4[3];
      v11 = v4[4];
      v12 = v4[5];
      if (v5 == v17 && v6 == v18)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_13;
      v4 += 8;
      if (!--v3)
        goto LABEL_11;
    }
    v5 = v17;
    v6 = v18;
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    result = swift_bridgeObjectRelease();
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
    a2[3] = v7;
    a2[4] = v9;
    a2[5] = v10;
    a2[6] = v11;
    a2[7] = v12;
  }
  else
  {
LABEL_11:

    result = swift_bridgeObjectRelease();
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t TUConversationActivityContextIdentifier.isMedia.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    goto LABEL_12;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;
    if (v7 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v9 != v10)
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
LABEL_12:
    v6 = 1;
    goto LABEL_13;
  }
  v6 = 1;
  return v6 & 1;
}

id GroupActivityDescription.tuActivityContext.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v8 = v0[6];
  v7 = v0[7];
  v9 = objc_allocWithZone(MEMORY[0x1E0DBD250]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = (void *)MEMORY[0x1AF4480F4](v1, v2);
  swift_bridgeObjectRelease();
  v11 = (void *)MEMORY[0x1AF4480F4](v3, v4);
  swift_bridgeObjectRelease();
  v12 = (void *)MEMORY[0x1AF4480F4](v5, v6);
  swift_bridgeObjectRelease();
  v13 = (void *)MEMORY[0x1AF4480F4](v8, v7);
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v9, sel_initWithContextIdentifier_actionDescription_ongoingDescription_completedDescription_, v10, v11, v12, v13);

  return v14;
}

id CPGroupActivityDescription.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CPGroupActivityDescription.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPGroupActivityDescription();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CPGroupActivityDescription.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPGroupActivityDescription();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static GroupActivityDescription.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v16 = a1[6];
  v17 = a1[7];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v10 = a2[7];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v6 && v4 == v7 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
    {
      if (v3 == v8 && v5 == v9 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v15 & 1) != 0))
      {
        if (v16 == v11 && v17 == v10)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

id specialized static CPGroupActivityDescription.activityContext(with:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v2;
  v3 = one-time initialization token for allCases;
  v4 = a1;
  if (v3 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *((_QWORD *)static GroupActivityDescription.allCases + 2);
  if (v5)
  {
    v23 = v4;
    v6 = (uint64_t *)((char *)static GroupActivityDescription.allCases + 48);
    while (1)
    {
      v8 = *(v6 - 2);
      v7 = *(v6 - 1);
      v10 = *v6;
      v9 = v6[1];
      v12 = v6[2];
      v11 = v6[3];
      v14 = v6[4];
      v13 = v6[5];
      if (v8 == v24 && v7 == v25)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_15;
      v6 += 8;
      if (!--v5)
      {

        goto LABEL_13;
      }
    }
    v8 = v24;
    v7 = v25;
LABEL_15:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    v17 = objc_allocWithZone(MEMORY[0x1E0DBD250]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = (void *)MEMORY[0x1AF4480F4](v8, v7);
    swift_bridgeObjectRelease();
    v19 = (void *)MEMORY[0x1AF4480F4](v10, v9);
    swift_bridgeObjectRelease();
    v20 = (void *)MEMORY[0x1AF4480F4](v12, v11);
    swift_bridgeObjectRelease();
    v21 = (void *)MEMORY[0x1AF4480F4](v14, v13);
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v17, sel_initWithContextIdentifier_actionDescription_ongoingDescription_completedDescription_, v18, v19, v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {

LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v16;
}

uint64_t type metadata accessor for CPGroupActivityDescription()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type GroupActivityDescription and conformance GroupActivityDescription()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription;
  if (!lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for GroupActivityDescription, &type metadata for GroupActivityDescription);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [GroupActivityDescription] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [GroupActivityDescription] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GroupActivityDescription] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GroupActivityDescription]);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [GroupActivityDescription] and conformance [A]);
  }
  return result;
}

uint64_t destroy for GroupActivityDescription()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for GroupActivityDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GroupActivityDescription(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for GroupActivityDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupActivityDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t method lookup function for CPGroupActivityDescription()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static CPGroupActivityDescription.activityContext(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t SimulatedDataCryptor.encryptionKeyID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___CPSimulatedDataCryptor_encryptionKeyID;
  swift_beginAccess();
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SimulatedDataCryptor.encryptionKeyID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___CPSimulatedDataCryptor_encryptionKeyID;
  swift_beginAccess();
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t key path setter for SimulatedDataCryptor.encryptionKeyID : SimulatedDataCryptor(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x68))(v6);
}

uint64_t (*SimulatedDataCryptor.encryptionKeyID.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t SimulatedDataCryptor.decryptionKeyIDSet.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SimulatedDataCryptor.decryptionKeyIDSet.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SimulatedDataCryptor.decryptionKeyIDSet.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t SimulatedDataCryptor.encryptData(_:seqNum:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (a2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    outlined copy of Data._Representation(result, a2);
    return v2;
  }
  return result;
}

id SimulatedDataCryptor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SimulatedDataCryptor.init()()
{
  void *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  v1 = v0;
  UUID.init()();
  v2 = OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1ACF59E20;
  UUID.init()();
  *(_QWORD *)&v1[v2] = v3;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SimulatedDataCryptor();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for SimulatedDataCryptor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SimulatedDataCryptor;
  if (!type metadata singleton initialization cache for SimulatedDataCryptor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static SimulatedDataCryptor.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static SimulatedDataCryptor.supportsSecureCoding;
}

uint64_t static SimulatedDataCryptor.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static SimulatedDataCryptor.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static SimulatedDataCryptor.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

id SimulatedDataCryptor.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v3 = (char *)objc_allocWithZone(v1);
  UUID.init()();
  v4 = OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E20;
  UUID.init()();
  *(_QWORD *)&v3[v4] = v5;

  v8.receiver = v3;
  v8.super_class = v1;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id SimulatedDataCryptor.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v3 = v1;
  UUID.init()();
  v4 = OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E20;
  UUID.init()();
  *(_QWORD *)&v3[v4] = v5;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for SimulatedDataCryptor();
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id SimulatedDataCryptor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedDataCryptor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1ACD22684(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x60))();
}

uint64_t sub_1ACD226C0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD22700(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x80);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for SimulatedDataCryptor()
{
  return type metadata accessor for SimulatedDataCryptor();
}

uint64_t type metadata completion function for SimulatedDataCryptor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SimulatedDataCryptor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptionKeyID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptionKeyID.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptionKeyID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptionKeyIDSet.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptionKeyIDSet.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptionKeyIDSet.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptData(_:seqNum:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptData(_:keyID:seqNum:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t String.localized.getter(uint64_t a1, void *a2)
{
  uint64_t ObjCClassFromMetadata;
  id v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  Swift::String v11;

  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  v7.value._countAndFlagsBits = 0x6E65736572706F43;
  v7.value._object = (void *)0xEE0065726F436563;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v11)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t PluginEndpoint.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Class isa;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  _QWORD v41[2];
  _QWORD v42[2];

  v1 = v0;
  v2 = type metadata accessor for NWEndpoint();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v6);
  v8 = (_QWORD *)((char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PluginEndpoint(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *v8;
    v9 = (void *)v8[1];
    v11 = v8[2];
    v12 = v8[4];
    v13 = v8[5];
    if (v12 >> 60 == 15)
    {
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      strcpy((char *)v42, "RelaySession(");
      HIWORD(v42[1]) = -4864;
      v14._countAndFlagsBits = v10;
      v14._object = v9;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 8236;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      v41[0] = v11;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 8236;
      v17._object = (void *)0xE200000000000000;
      String.append(_:)(v17);
      v41[0] = v13;
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 41;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
    }
    else
    {
      v23 = v8[3];
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      outlined copy of Data._Representation(v23, v12);
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      strcpy((char *)v42, "RelaySession(");
      HIWORD(v42[1]) = -4864;
      v24._countAndFlagsBits = v10;
      v24._object = v9;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 8236;
      v25._object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      v41[0] = v11;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 8236;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v29 = -[objc_class tu_URLSafeBase64EncodedString](isa, sel_tu_URLSafeBase64EncodedString);

      if (v29)
      {
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v32 = v31;

        v41[0] = v30;
        v41[1] = v32;
        v33 = String.init<A>(reflecting:)();
        v35 = v34;
      }
      else
      {
        v35 = 0xE300000000000000;
        v33 = 7104878;
      }
      v36 = v35;
      String.append(_:)(*(Swift::String *)&v33);
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 8236;
      v37._object = (void *)0xE200000000000000;
      String.append(_:)(v37);
      v41[0] = v13;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 41;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      outlined consume of Data?(v23, v12);
      outlined consume of Data?(v23, v12);
    }
    return v42[0];
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    strcpy((char *)v42, "Direct(");
    v42[1] = 0xE700000000000000;
    v20._countAndFlagsBits = NWEndpoint.debugDescription.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v22 = v42[0];
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v22;
}

uint64_t type metadata accessor for PluginEndpoint()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PluginEndpoint;
  if (!type metadata singleton initialization cache for PluginEndpoint)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of PluginEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PluginEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall PluginEndpoint.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  __int128 v12;
  Swift::UInt64 v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  Swift::UInt64 v24;

  v3 = v2;
  v6 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PluginEndpoint(v3, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of PluginEndpoint(v3);
    v9 = *(_QWORD *)v8;
    v10 = *((_QWORD *)v8 + 1);
    v11 = *((_QWORD *)v8 + 2);
    v12 = *(_OWORD *)(v8 + 24);
    v13 = *((_QWORD *)v8 + 5);
    if (v11 != _ || v13 != localParticipantID)
    {
      v23 = *(_OWORD *)(v8 + 24);
      if (one-time initialization token for log != -1)
        swift_once();
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)log);
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (_DWORD *)swift_slowAlloc();
        v22 = v9;
        v19 = v18;
        *v18 = 134218752;
        v24 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *((_WORD *)v19 + 6) = 2048;
        v24 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *((_WORD *)v19 + 11) = 2048;
        v24 = _;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *((_WORD *)v19 + 16) = 2048;
        v24 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1ACCCC000, v16, v17, "Updating virtualParticipant, old: [virtualParticipant: %llu, localParticipantID: %llu], new: [virtualParticipant: %llu, localParticipantID: %llu]", (uint8_t *)v19, 0x2Au);
        v20 = v19;
        v9 = v22;
        MEMORY[0x1AF44981C](v20, -1, -1);
      }

      v12 = v23;
    }
    *(_QWORD *)v3 = v9;
    *(_QWORD *)(v3 + 8) = v10;
    *(_QWORD *)(v3 + 16) = _;
    *(_OWORD *)(v3 + 24) = v12;
    *(_QWORD *)(v3 + 40) = localParticipantID;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined destroy of PluginEndpoint((uint64_t)v8);
  }
}

uint64_t outlined destroy of PluginEndpoint(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PluginEndpoint();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for PluginEndpoint(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = a2[2];
      v7 = a2 + 3;
      v8 = a2[4];
      swift_bridgeObjectRetain();
      if (v8 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v7;
      }
      else
      {
        v11 = *(_QWORD *)v7;
        outlined copy of Data._Representation(v11, v8);
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = v8;
      }
      *(_QWORD *)(a1 + 40) = a2[5];
    }
    else
    {
      v10 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PluginEndpoint(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    result = swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 >> 60 != 15)
      return outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), v3);
  }
  else
  {
    v4 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

uint64_t initializeWithCopy for PluginEndpoint(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = a2 + 3;
    v6 = a2[4];
    swift_bridgeObjectRetain();
    if (v6 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *v5;
    }
    else
    {
      v8 = *(_QWORD *)v5;
      outlined copy of Data._Representation(v8, v6);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v6;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
  }
  else
  {
    v7 = type metadata accessor for NWEndpoint();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for PluginEndpoint(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((_QWORD *)a1 != a2)
  {
    outlined destroy of PluginEndpoint(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = a2[2];
      v4 = a2 + 3;
      v5 = a2[4];
      swift_bridgeObjectRetain();
      if (v5 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v4;
      }
      else
      {
        v7 = *(_QWORD *)v4;
        outlined copy of Data._Representation(v7, v5);
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = v5;
      }
      *(_QWORD *)(a1 + 40) = a2[5];
    }
    else
    {
      v6 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for PluginEndpoint(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for NWEndpoint();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PluginEndpoint(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of PluginEndpoint((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for NWEndpoint();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PluginEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for PluginEndpoint()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for PluginEndpoint()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FastSyncActivitySession.leave()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v7 = v0;
    specialized ActivitySession.invalidationBlock(execute:)(v7, (uint64_t)v7);

  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in FastSyncActivitySession.leave()(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8_t *v13;
  _BYTE *v14;
  unint64_t v15;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x2A0))(&v15);
  result = v15;
  if (v15 >> 62 != 2)
  {
LABEL_12:
    outlined consume of ActivitySession.State(v15);
    lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors();
    swift_allocError();
    *v14 = 1;
    return swift_willThrow();
  }
  if (v15 != 0x8000000000000000 && v15 != 0x8000000000000008)
  {
    if (v15 == 0x8000000000000010)
      return result;
    goto LABEL_12;
  }
  if (one-time initialization token for host != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.host);
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_DWORD *)v9 = 136315138;
    v15 = v10;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Leaving activity session with identifier %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    v13 = v9;
    v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    MEMORY[0x1AF44981C](v13, -1, -1);

  }
  else
  {

  }
  v15 = 0x8000000000000010;
  return (*(uint64_t (**)(unint64_t *))((*v2 & *v6) + 0x2A8))(&v15);
}

void FastSyncActivitySession.assertionWillInvalidate(_:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for host != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1ACCCC000, oslog, v1, "[Assertion] DomainAssertionObserver assertionWillInvalidate for app.", v2, 2u);
    MEMORY[0x1AF44981C](v2, -1, -1);
  }

}

id FastSyncActivitySession.rbsAssertion(for:)(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  Class isa;
  id v10;

  v1 = objc_msgSend((id)objc_opt_self(), sel_targetWithPid_, a1);
  v2 = (void *)MEMORY[0x1AF4480F4](0xD00000000000001DLL, 0x80000001ACF7E840);
  v3 = (void *)MEMORY[0x1AF4480F4](0x636E795374736146, 0xE800000000000000);
  v4 = objc_msgSend((id)objc_opt_self(), sel_attributeWithDomain_name_, v2, v3);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E40;
  *(_QWORD *)(v5 + 32) = v4;
  specialized Array._endMutation()();
  v6 = objc_allocWithZone(MEMORY[0x1E0D87C98]);
  v7 = v4;
  v8 = (void *)MEMORY[0x1AF4480F4](0xD000000000000024, 0x80000001ACF7C770);
  type metadata accessor for RBSAttribute();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v6, sel_initWithExplanation_target_attributes_, v8, v1, isa);

  return v10;
}

uint64_t FastSyncActivitySession.activeRemoteParticipant(with:completion:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  NSObject *v37;

  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (_QWORD **)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)((char *)v3 + OBJC_IVAR___CPActivitySession_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_6;
  }
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v15 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2D0))(v13);
  v16 = objc_msgSend(v15, sel_bundleIdentifier);

  if (v16)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    if ((*(uint64_t (**)(void))((*v14 & *v3) + 0x380))())
    {
      v21 = v20;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(_QWORD), uint64_t, uint64_t, uint64_t))(v21 + 40))(a1, v17, v19, a2, a3, ObjectType, v21);
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.default);
    v25 = v3;
    v26 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v33))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v36 = (_QWORD *)swift_slowAlloc();
      v37 = v25;
      *(_DWORD *)v28 = 138412290;
      v34 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v35 = v36;
      *v36 = v25;

      _os_log_impl(&dword_1ACCCC000, v26, v33, "[Translation] Invalid sessionManager on session: %@", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      v31 = v35;
      goto LABEL_12;
    }
LABEL_13:

    v26 = v25;
    goto LABEL_14;
  }
  if (one-time initialization token for default != -1)
    goto LABEL_16;
LABEL_6:
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.default);
  v25 = v3;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v26, v27))
    goto LABEL_13;
  v28 = (uint8_t *)swift_slowAlloc();
  v36 = (_QWORD *)swift_slowAlloc();
  v37 = v25;
  *(_DWORD *)v28 = 138412290;
  v29 = v25;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v30 = v36;
  *v36 = v25;

  _os_log_impl(&dword_1ACCCC000, v26, v27, "[Translation] Failed to find bundleIdentifier from activity on session: %@", v28, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  v31 = v30;
LABEL_12:
  MEMORY[0x1AF44981C](v31, -1, -1);
  MEMORY[0x1AF44981C](v28, -1, -1);
LABEL_14:

  return a2(0);
}

char *FastSyncActivitySession.__allocating_init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  objc_class *v8;
  objc_class *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  int v40;
  _BYTE v41[24];
  uint64_t v42;
  uint64_t v43;

  v9 = v8;
  v31 = a8;
  v32 = a3;
  v39 = a6;
  v40 = a7;
  v35 = a5;
  v36 = a2;
  v37 = a4;
  v38 = a1;
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  v34 = v13;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = objc_allocWithZone(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a5, v13);
  outlined init with copy of UserNotificationCenter(a8, (uint64_t)v41);
  v21 = v32;
  ObjectType = swift_getObjectType();
  v23 = v42;
  v24 = v43;
  v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v41, v42);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v28 + 16))(v27);
  v29 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(v38, (uint64_t)v20, v21, (uint64_t)v16, v39, v40, (uint64_t)v27, v33, ObjectType, v23, v37, v24);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v36, v17);
  return v29;
}

char *FastSyncActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  int v38;
  void *v39;
  _BYTE v40[24];
  uint64_t v41;
  uint64_t v42;

  v31 = a8;
  v37 = a6;
  v38 = a7;
  v33 = a5;
  v34 = a2;
  v35 = a4;
  v36 = a1;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a2, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, v12);
  outlined init with copy of UserNotificationCenter(a8, (uint64_t)v40);
  v20 = a3;
  ObjectType = swift_getObjectType();
  v23 = v41;
  v22 = v42;
  v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v26);
  v28 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(v36, (uint64_t)v19, v20, (uint64_t)v15, v37, v38, (uint64_t)v26, v39, ObjectType, v23, v35, v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v34, v16);
  return v28;
}

id FastSyncActivitySession.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FastSyncActivitySession();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t type metadata accessor for RBSAttribute()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RBSAttribute;
  if (!lazy cache variable for type metadata for RBSAttribute)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBSAttribute);
  }
  return result;
}

uint64_t type metadata accessor for FastSyncActivitySession()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FastSyncActivitySession;
  if (!type metadata singleton initialization cache for FastSyncActivitySession)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ObjC metadata update function for FastSyncActivitySession()
{
  return type metadata accessor for FastSyncActivitySession();
}

uint64_t type metadata completion function for FastSyncActivitySession()
{
  return swift_updateClassMetadata2();
}

uint64_t PluginClientMetrics.ConnectionEstablishment.attemptStartedAfterMillis.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t PluginClientMetrics.ConnectionEstablishment.quicHandshakeDurationMillis.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t PluginClientMetrics.ConnectionEstablishment.quicHandshakeRTTMillis.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t PluginClientMetrics.ConnectionEstablishment.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[40];

  specialized PluginClientMetrics.ConnectionEstablishment.init(report:)(a1, (uint64_t)v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionEstablishment?);
}

uint64_t PluginClientMetrics.ConnectionEstablishment.rtcReport.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  char v11;
  char v12;
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;

  v7 = MEMORY[0x1E0DEE190];
  v16 = MEMORY[0x1E0DEE190];
  *(_QWORD *)&v15 = a1;
  outlined init with take of Any(&v15, v14);
  v8 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD00000000000001BLL, 0x80000001ACF7C2B0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v16 = v7;
  *(_QWORD *)&v15 = a2;
  outlined init with take of Any(&v15, v14);
  v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD000000000000018, 0x80000001ACF7C2D0, v10);
  swift_bridgeObjectRelease();
  v16 = v7;
  *(_QWORD *)&v15 = a3;
  outlined init with take of Any(&v15, v14);
  v11 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD000000000000024, 0x80000001ACF7C2F0, v11);
  swift_bridgeObjectRelease();
  v16 = v7;
  *(_QWORD *)&v15 = a4;
  outlined init with take of Any(&v15, v14);
  v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD00000000000001FLL, 0x80000001ACF7C320, v12);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t PluginClientMetrics.ConnectionEstablishment.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0xD000000000000014;
  v4._object = (void *)0x80000001ACF7E890;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  v6._object = (void *)0x80000001ACF7E8B0;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD00000000000001CLL;
  v8._object = (void *)0x80000001ACF7E8D0;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xD000000000000017;
  v10._object = (void *)0x80000001ACF7E8F0;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

BOOL static PluginClientMetrics.ConnectionEstablishment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

uint64_t PluginClientMetrics.ConnectionEstablishment.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1ACD24B9C + 4 * byte_1ACF5BC20[a1]))(0xD000000000000013, 0x80000001ACF7EAF0);
}

uint64_t sub_1ACD24B9C(uint64_t a1)
{
  return a1 + 6;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  unsigned __int8 *v0;

  return PluginClientMetrics.ConnectionEstablishment.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PluginClientMetrics.ConnectionEstablishment.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PluginClientMetrics.ConnectionEstablishment.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;
  char v16;

  v12[0] = a5;
  v12[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PluginClientMetrics.ConnectionEstablishment.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t PluginClientMetrics.ConnectionEstablishment.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = specialized PluginClientMetrics.ConnectionEstablishment.init(from:)(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PluginClientMetrics.ConnectionEstablishment@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = specialized PluginClientMetrics.ConnectionEstablishment.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PluginClientMetrics.ConnectionEstablishment(_QWORD *a1)
{
  uint64_t *v1;

  return PluginClientMetrics.ConnectionEstablishment.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PluginClientMetrics.ConnectionEstablishment(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginClientMetrics.ConnectionEstablishment()
{
  return PluginClientMetrics.ConnectionEstablishment.debugDescription.getter();
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.totalDurationMillis.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.receivedQUICByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.sentQUICByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.receivedApplicationByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.sentApplicationByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.retransmittedQUICByteCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.quicSmoothedRTTMillis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.quicMinimumRTTMillis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.quicRTTVarianceMillis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[80];

  specialized PluginClientMetrics.ConnectionDataTransfer.init(report:)(a1, (uint64_t)v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionDataTransfer?);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.rtcReport.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _OWORD v23[2];
  __int128 v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  v3 = MEMORY[0x1E0DEE190];
  v25 = MEMORY[0x1E0DEE190];
  *(_QWORD *)&v24 = v2;
  outlined init with take of Any(&v24, v23);
  v4 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0x617275642D707271, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v6 = v1[1];
  v25 = v3;
  *(_QWORD *)&v24 = v6;
  outlined init with take of Any(&v24, v23);
  v7 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000013, 0x80000001ACF7C1F0, v7);
  swift_bridgeObjectRelease();
  v8 = v1[2];
  v25 = v3;
  *(_QWORD *)&v24 = v8;
  outlined init with take of Any(&v24, v23);
  v9 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000013, 0x80000001ACF7C210, v9);
  swift_bridgeObjectRelease();
  v10 = v1[4];
  v25 = v3;
  *(_QWORD *)&v24 = v10;
  outlined init with take of Any(&v24, v23);
  v11 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000012, 0x80000001ACF7C1D0, v11);
  swift_bridgeObjectRelease();
  v12 = v1[3];
  v25 = v3;
  *(_QWORD *)&v24 = v12;
  outlined init with take of Any(&v24, v23);
  v13 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000012, 0x80000001ACF7C1B0, v13);
  swift_bridgeObjectRelease();
  v14 = v1[5];
  v25 = v3;
  *(_QWORD *)&v24 = v14;
  outlined init with take of Any(&v24, v23);
  v15 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000015, 0x80000001ACF7C230, v15);
  swift_bridgeObjectRelease();
  v16 = v1[6];
  v25 = v3;
  *(_QWORD *)&v24 = v16;
  outlined init with take of Any(&v24, v23);
  v17 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000015, 0x80000001ACF7C250, v17);
  swift_bridgeObjectRelease();
  v18 = v1[7];
  v25 = v3;
  *(_QWORD *)&v24 = v18;
  outlined init with take of Any(&v24, v23);
  v19 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000010, 0x80000001ACF7C270, v19);
  swift_bridgeObjectRelease();
  v20 = v1[8];
  v25 = v3;
  *(_QWORD *)&v24 = v20;
  outlined init with take of Any(&v24, v23);
  v21 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000010, 0x80000001ACF7C290, v21);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t PluginClientMetrics.ConnectionDataTransfer.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000014;
  v9._object = (void *)0x80000001ACF7E890;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000016;
  v11._object = (void *)0x80000001ACF7E930;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0xD00000000000001DLL;
  v13._object = (void *)0x80000001ACF7E970;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000019;
  v15._object = (void *)0x80000001ACF7E990;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000012;
  v17._object = (void *)0x80000001ACF7E950;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD00000000000001BLL;
  v19._object = (void *)0x80000001ACF7E9B0;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 32;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000016;
  v21._object = (void *)0x80000001ACF7E9D0;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000015;
  v23._object = (void *)0x80000001ACF7E9F0;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000016;
  v25._object = (void *)0x80000001ACF7EA10;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1ACD257D4 + 4 * byte_1ACF5BC24[a1]))(0xD000000000000013, 0x80000001ACF7EAF0);
}

unint64_t sub_1ACD257D4()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  unsigned __int8 *v0;

  return PluginClientMetrics.ConnectionDataTransfer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PluginClientMetrics.ConnectionDataTransfer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PluginClientMetrics.ConnectionDataTransfer.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

__n128 PluginClientMetrics.ConnectionDataTransfer.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  specialized PluginClientMetrics.ConnectionDataTransfer.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

__n128 protocol witness for Decodable.init(from:) in conformance PluginClientMetrics.ConnectionDataTransfer@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  specialized PluginClientMetrics.ConnectionDataTransfer.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PluginClientMetrics.ConnectionDataTransfer(_QWORD *a1)
{
  return PluginClientMetrics.ConnectionDataTransfer.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PluginClientMetrics.ConnectionDataTransfer(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return specialized static PluginClientMetrics.ConnectionDataTransfer.== infix(_:_:)(v7, v9);
}

id PluginClientReporter.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t PluginClientReporter.reportReadyCallback.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t PluginClientReporter.receivedConnectionEstablishmentReportCount.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PluginClientReporter.receivedConnectionEstablishmentReportCount.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginClientReporter.receivedConnectionEstablishmentReportCount.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginClientReporter.receivedDataTransferReportCount.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PluginClientReporter.receivedDataTransferReportCount.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginClientReporter.receivedDataTransferReportCount.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

_QWORD *PluginClientReporter.__allocating_init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;

  result = (_QWORD *)swift_allocObject();
  v7 = MEMORY[0x1E0DEE9E0];
  result[5] = MEMORY[0x1E0DEE9E0];
  result[6] = v7;
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

_QWORD *PluginClientReporter.init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9E0];
  v3[5] = MEMORY[0x1E0DEE9E0];
  v3[6] = v4;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

void PluginClientReporter.includeConnectionEstablishmentReport(_:withTag:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *);
  unint64_t v28;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t *v30;
  uint64_t *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, unint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75[4];
  uint64_t v76;
  _BYTE v77[40];
  _QWORD v78[4];
  char v79;

  v4 = v3;
  v73 = a2;
  v74 = a3;
  v6 = type metadata accessor for NWConnection.EstablishmentReport();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v67 - v11;
  v13 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for DispatchPredicate();
  v14 = *((_QWORD *)v13 - 1);
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = (void *)v4[2];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v14 + 104))(v16, *MEMORY[0x1E0DEF740], v13);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, void (*)(char *, uint64_t, uint64_t)))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_4:
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    v13(v10, a1, v6);
    v20 = v74;
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v72 = swift_slowAlloc();
      v75[0] = v72;
      *(_DWORD *)v23 = 136315394;
      v24 = NWConnection.EstablishmentReport.debugDescription.getter();
      v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v20, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v21, v22, "[Reporter] Dropping connection-establishment-report, could not parse report=%s tag=%s", (uint8_t *)v23, 0x16u);
      v26 = v72;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v26, -1, -1);
      MEMORY[0x1AF44981C](v23, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v12, a1, v6);
  specialized PluginClientMetrics.ConnectionEstablishment.init(report:)((uint64_t)v12, (uint64_t)v77);
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionEstablishment?);
  if ((v79 & 1) != 0)
  {
    if (one-time initialization token for log == -1)
      goto LABEL_4;
    goto LABEL_23;
  }
  v71 = v78[1];
  v72 = v78[0];
  v69 = v78[3];
  v70 = v78[2];
  v27 = *(uint64_t (**)(uint64_t *))(*v4 + 128);
  v28 = v74;
  swift_bridgeObjectRetain();
  v29 = (void (*)(uint64_t *, _QWORD))v27(v75);
  v31 = v30;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76 = *v31;
  v33 = v76;
  *v31 = 0x8000000000000000;
  v34 = v73;
  v36 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v28);
  v37 = *(_QWORD *)(v33 + 16);
  v38 = (v35 & 1) == 0;
  v39 = v37 + v38;
  if (__OFADD__(v37, v38))
  {
    __break(1u);
    goto LABEL_25;
  }
  v40 = v35;
  if (*(_QWORD *)(v33 + 24) >= v39)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
    v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v28);
    if ((v40 & 1) != (v42 & 1))
    {
LABEL_28:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    v36 = v41;
  }
  *v31 = v76;
  swift_bridgeObjectRelease();
  v43 = (_QWORD *)*v31;
  if ((v40 & 1) != 0)
    goto LABEL_16;
  v43[(v36 >> 6) + 8] |= 1 << v36;
  v44 = (uint64_t *)(v43[6] + 16 * v36);
  *v44 = v34;
  v44[1] = v28;
  *(_QWORD *)(v43[7] + 8 * v36) = 0;
  v45 = v43[2];
  swift_bridgeObjectRetain();
  if (__OFADD__(v45, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  v43[2] = v45 + 1;
LABEL_16:
  swift_bridgeObjectRetain();
  v46 = v43[7];
  swift_bridgeObjectRelease();
  v47 = *(_QWORD *)(v46 + 8 * v36);
  v48 = __OFADD__(v47, 1);
  v49 = v47 + 1;
  if (v48)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(_QWORD *)(v46 + 8 * v36) = v49;
  swift_bridgeObjectRelease();
  v29(v75, 0);
  if (one-time initialization token for log != -1)
LABEL_26:
    swift_once();
  v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.default.getter();
  v53 = os_log_type_enabled(v51, v52);
  v55 = v71;
  v54 = v72;
  if (v53)
  {
    v56 = swift_slowAlloc();
    v68 = swift_slowAlloc();
    v75[0] = v68;
    *(_DWORD *)v56 = 136315650;
    v57 = PluginClientMetrics.ConnectionEstablishment.debugDescription.getter();
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v59 = swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2080;
    (*(void (**)(uint64_t))(*v4 + 112))(v59);
    v60 = v34;
    v61 = Dictionary.description.getter();
    v63 = v62;
    swift_bridgeObjectRelease();
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, v75);
    v28 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v54 = v72;
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 22) = 2080;
    swift_bridgeObjectRetain();
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v28, v75);
    v55 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v51, v52, "[Reporter] Received connection-establishment-report=%s counts=%s tag=%s", (uint8_t *)v56, 0x20u);
    v64 = v68;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v64, -1, -1);
    MEMORY[0x1AF44981C](v56, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    v60 = v34;
  }
  v65 = (void (*)(uint64_t, unint64_t, uint64_t))v4[3];
  v66 = PluginClientMetrics.ConnectionEstablishment.rtcReport.getter(v54, v55, v70, v69);
  v65(v60, v28, v66);
  swift_bridgeObjectRelease();
}

void PluginClientReporter.includeConnectionDataTransferReport(_:withTag:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(uint64_t *);
  void (*v29)(uint64_t *, _QWORD);
  uint64_t *v30;
  uint64_t *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  void (*v66)(uint64_t, unint64_t, uint64_t);
  uint64_t v67;
  _BYTE v68[4];
  int v69;
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[4];
  _BYTE v76[80];
  _OWORD v77[4];
  uint64_t v78;
  char v79;
  _OWORD v80[4];
  uint64_t v81;

  v71 = a2;
  v72 = a3;
  v5 = type metadata accessor for NWConnection.DataTransferReport();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v70 = &v68[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v10 = &v68[-v9];
  v11 = (_QWORD *)type metadata accessor for DispatchPredicate();
  v12 = *(v11 - 1);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v68[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v73 = v3;
  v15 = *(void **)(v3 + 16);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, _QWORD *))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_4:
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)log);
    v18 = v70;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v11)(v70, a1, v5);
    swift_bridgeObjectRetain_n();
    v19 = v12;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      v23 = swift_slowAlloc();
      v73 = swift_slowAlloc();
      *(_QWORD *)&v80[0] = v73;
      *(_DWORD *)v23 = 136315394;
      v69 = v22;
      v24 = NWConnection.DataTransferReport.debugDescription.getter();
      v75[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v18, v5);
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      v75[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v19, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v20, (os_log_type_t)v69, "[Reporter] Dropping data-transfer-report, could not parse report=%s tag=%s", (uint8_t *)v23, 0x16u);
      v26 = v73;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v26, -1, -1);
      MEMORY[0x1AF44981C](v23, -1, -1);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v18, v5);

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v11 = *(_QWORD **)(v6 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v11)(v10, a1, v5);
  specialized PluginClientMetrics.ConnectionDataTransfer.init(report:)((uint64_t)v10, (uint64_t)v76);
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionDataTransfer?);
  if ((v79 & 1) != 0)
  {
    v12 = v72;
    if (one-time initialization token for log == -1)
      goto LABEL_4;
    goto LABEL_23;
  }
  v80[2] = v77[2];
  v80[3] = v77[3];
  v81 = v78;
  v80[0] = v77[0];
  v80[1] = v77[1];
  v27 = v72;
  v28 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v73 + 152);
  swift_bridgeObjectRetain();
  v29 = (void (*)(uint64_t *, _QWORD))v28(v75);
  v31 = v30;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v74 = *v31;
  v33 = v74;
  *v31 = 0x8000000000000000;
  v34 = v71;
  v36 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v27);
  v37 = *(_QWORD *)(v33 + 16);
  v38 = (v35 & 1) == 0;
  v39 = v37 + v38;
  if (__OFADD__(v37, v38))
  {
    __break(1u);
    goto LABEL_25;
  }
  v40 = v35;
  if (*(_QWORD *)(v33 + 24) >= v39)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
    v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v27);
    if ((v40 & 1) != (v42 & 1))
    {
LABEL_28:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    v36 = v41;
  }
  *v31 = v74;
  swift_bridgeObjectRelease();
  v43 = (_QWORD *)*v31;
  if ((v40 & 1) != 0)
    goto LABEL_16;
  v43[(v36 >> 6) + 8] |= 1 << v36;
  v44 = (uint64_t *)(v43[6] + 16 * v36);
  *v44 = v34;
  v44[1] = v27;
  *(_QWORD *)(v43[7] + 8 * v36) = 0;
  v45 = v43[2];
  swift_bridgeObjectRetain();
  if (__OFADD__(v45, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  v43[2] = v45 + 1;
LABEL_16:
  swift_bridgeObjectRetain();
  v46 = v43[7];
  swift_bridgeObjectRelease();
  v47 = *(_QWORD *)(v46 + 8 * v36);
  v48 = __OFADD__(v47, 1);
  v49 = v47 + 1;
  if (v48)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(_QWORD *)(v46 + 8 * v36) = v49;
  swift_bridgeObjectRelease();
  v29(v75, 0);
  if (one-time initialization token for log != -1)
LABEL_26:
    swift_once();
  v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  v51 = (_QWORD *)v73;
  swift_retain_n();
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.default.getter();
  v54 = v53;
  if (os_log_type_enabled(v52, v53))
  {
    v55 = swift_slowAlloc();
    v70 = (_BYTE *)swift_slowAlloc();
    v75[0] = (uint64_t)v70;
    *(_DWORD *)v55 = 136315650;
    v69 = v54;
    v56 = PluginClientMetrics.ConnectionDataTransfer.debugDescription.getter();
    v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v58 = swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 12) = 2080;
    (*(void (**)(uint64_t))(*v51 + 136))(v58);
    v59 = Dictionary.description.getter();
    v61 = v60;
    swift_bridgeObjectRelease();
    v62 = v59;
    v51 = (_QWORD *)v73;
    v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v61, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v63 = v71;
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 22) = 2080;
    swift_bridgeObjectRetain();
    v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v27, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v52, (os_log_type_t)v69, "[Reporter] Received data-transfer-report=%s count=%s tag=%s", (uint8_t *)v55, 0x20u);
    v64 = v70;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v64, -1, -1);
    MEMORY[0x1AF44981C](v55, -1, -1);

    v65 = v27;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    v65 = v27;
    v63 = v34;
  }
  v66 = (void (*)(uint64_t, unint64_t, uint64_t))v51[3];
  v67 = PluginClientMetrics.ConnectionDataTransfer.rtcReport.getter();
  v66(v63, v65, v67);
  swift_bridgeObjectRelease();
}

uint64_t PluginClientReporter.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginClientReporter.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TUConversationParticipant>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = 1 << *(_BYTE *)(v5 + 32);
    v34 = v3;
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v35);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v35)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(void **)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        v31 = v30;
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PluginAttachmentLedgerTopic>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CustomEndpointProvider>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ProcessAssertion>, (void (*)(uint64_t, _BYTE *))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PGBackgroundPIPAuthorization>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PluginAttachmentLedgerTopic.Participant>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.ConversationReport>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.PubSubTopicReport>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [UInt64]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, BackgroundSessionManagerDataSource>, (void (*)(uint64_t, _BYTE *))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, AnyDatagramChannelStream>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v3 = v2;
  v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AttachmentLedger_AttachmentEncryption>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v36 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v34 = v3;
    v35 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v20 >= v35)
          goto LABEL_34;
        v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_34;
          v21 = v36[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v35)
                  goto LABEL_34;
                v21 = v36[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v37 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((a2 & 1) != 0)
        outlined init with take of AttachmentLedger_AttachmentEncryption(v25, (uint64_t)v7);
      else
        outlined init with copy of AttachmentLedger_AttachmentEncryption(v25, (uint64_t)v7);
      result = static Hasher._hash(seed:_:)();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v23;
      result = outlined init with take of AttachmentLedger_AttachmentEncryption((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t *v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SeqNumReceivedBuffer>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v32 = v3;
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64)
                bzero(v34, 8 * v33);
              else
                *v34 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 24 * v19;
      v35 = *(_OWORD *)v28;
      v29 = *(_QWORD *)(v28 + 16);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_OWORD *)v17 = v35;
      *(_QWORD *)(v17 + 16) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, UInt64>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CP_Record]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  int64_t v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PubSubTopic.Participant>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v36)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v36)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v36)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v36);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v36)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(v5 + 56) + 16 * v17;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v23 = *(_BYTE *)(v21 + 8);
      v24 = *(_QWORD *)v21;
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v22;
      v15 = *(_QWORD *)(v7 + 56) + 16 * v14;
      *(_QWORD *)v15 = v24;
      *(_BYTE *)(v15 + 8) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  char v43;
  uint64_t v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CPAppPolicy.AuthorizedBundles>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_33;
      v24 = v40[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v24 = v40[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 40 * v21;
    v34 = *(_BYTE *)v33;
    v35 = *(_QWORD *)(v33 + 16);
    v44 = *(_QWORD *)(v33 + 8);
    v43 = *(_BYTE *)(v33 + 24);
    v36 = *(_QWORD *)(v33 + 32);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 40 * v17;
    *(_BYTE *)v19 = v34;
    *(_QWORD *)(v19 + 8) = v44;
    *(_QWORD *)(v19 + 16) = v35;
    *(_BYTE *)(v19 + 24) = v43;
    *(_QWORD *)(v19 + 32) = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [TUHandle]>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopic>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CPAppPolicy.ContactHandles>);
  v39 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_37;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v2;
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_39;
    if (v14 >= v11)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v14);
    if (!v25)
    {
      v26 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_30:
        swift_release();
        v3 = v37;
        if ((v39 & 1) == 0)
          goto LABEL_37;
        goto LABEL_33;
      }
      v25 = *(_QWORD *)(v38 + 8 * v26);
      ++v14;
      if (!v25)
      {
        while (1)
        {
          v14 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v14 >= v11)
            goto LABEL_30;
          v25 = *(_QWORD *)(v38 + 8 * v14);
          ++v26;
          if (v25)
            goto LABEL_19;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
    }
LABEL_19:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_20:
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v5 + 56) + 24 * v22;
    v31 = *(_QWORD *)v30;
    v40 = *(_OWORD *)(v30 + 8);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v34 = v17 == v33;
        if (v17 == v33)
          v17 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v35 == -1);
      v18 = __clz(__rbit64(~v35)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    v20 = *(_QWORD *)(v7 + 56) + 24 * v18;
    *(_QWORD *)v20 = v31;
    *(_OWORD *)(v20 + 8) = v40;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_37;
LABEL_33:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EmptyPresenceContext>);
  v34 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
          goto LABEL_37;
        if (v15 >= v12)
        {
LABEL_30:
          swift_release();
          v3 = v2;
          if ((v34 & 1) != 0)
          {
            v33 = 1 << *(_BYTE *)(v5 + 32);
            if (v33 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v9 = -1 << v33;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v24 = v9[v15];
        if (!v24)
        {
          v25 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_30;
          v24 = v9[v25];
          ++v15;
          if (!v24)
          {
            while (1)
            {
              v15 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              if (v15 >= v12)
                goto LABEL_30;
              v24 = v9[v15];
              ++v25;
              if (v24)
                goto LABEL_19;
            }
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            return result;
          }
        }
LABEL_19:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v27 = *v26;
      v28 = v26[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v31 = v18 == v30;
          if (v18 == v30)
            v18 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v32 == -1);
        v19 = __clz(__rbit64(~v32)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v19);
      *v20 = v27;
      v20[1] = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ActivityListPresenceContext>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_37;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_39;
    if (v14 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v14);
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_30:
        swift_release();
        v3 = v35;
        if ((v37 & 1) == 0)
          goto LABEL_37;
        goto LABEL_33;
      }
      v24 = *(_QWORD *)(v36 + 8 * v25);
      ++v14;
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v11)
            goto LABEL_30;
          v24 = *(_QWORD *)(v36 + 8 * v14);
          ++v25;
          if (v24)
            goto LABEL_19;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
    }
LABEL_19:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_20:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v17 == v31;
        if (v17 == v31)
          v17 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_37;
LABEL_33:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t i;
  int v41;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Attachment>);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v37 = v2;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v38 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 64;
    result = swift_retain();
    v18 = 0;
    for (i = v9; ; v9 = i)
    {
      if (v15)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v18 << 6);
      }
      else
      {
        v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38)
          goto LABEL_34;
        v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          v18 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_34;
          v23 = v39[v18];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              v3 = v37;
              if ((v41 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v9 + 32);
                if (v35 >= 64)
                  bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v35;
                *(_QWORD *)(v9 + 16) = 0;
              }
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v18 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v18 >= v38)
                  goto LABEL_34;
                v23 = v39[v18];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v18 = v24;
          }
        }
LABEL_21:
        v15 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      v25 = *(_QWORD *)(v6 + 72);
      v26 = *(_QWORD *)(v9 + 48) + v25 * v21;
      if ((v41 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v26, v5);
        v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v26, v5);
        v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
        swift_retain();
      }
      lazy protocol witness table accessor for type UUID and conformance UUID();
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v28 = -1 << *(_BYTE *)(v11 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v16 + 8 * v30);
        }
        while (v34 == -1);
        v19 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v25 * v19, v8, v5);
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v27;
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  __int128 v40;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:)>);
  v39 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v40 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v40 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      swift_retain();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19) = v40;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t i;
  int v41;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Set<AnyCancellable>>);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v37 = v2;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v38 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 64;
    result = swift_retain();
    v18 = 0;
    for (i = v9; ; v9 = i)
    {
      if (v15)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v18 << 6);
      }
      else
      {
        v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38)
          goto LABEL_34;
        v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          v18 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_34;
          v23 = v39[v18];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              v3 = v37;
              if ((v41 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v9 + 32);
                if (v35 >= 64)
                  bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v35;
                *(_QWORD *)(v9 + 16) = 0;
              }
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v18 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v18 >= v38)
                  goto LABEL_34;
                v23 = v39[v18];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v18 = v24;
          }
        }
LABEL_21:
        v15 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      v25 = *(_QWORD *)(v6 + 72);
      v26 = *(_QWORD *)(v9 + 48) + v25 * v21;
      if ((v41 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v26, v5);
        v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v26, v5);
        v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
        swift_bridgeObjectRetain();
      }
      lazy protocol witness table accessor for type UUID and conformance UUID();
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v28 = -1 << *(_BYTE *)(v11 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v16 + 8 * v30);
        }
        while (v34 == -1);
        v19 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v25 * v19, v8, v5);
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v27;
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CCE2A0], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, NWEndpoint>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t i;
  int v41;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v37 = v2;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v38 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 64;
    result = swift_retain();
    v18 = 0;
    for (i = v9; ; v9 = i)
    {
      if (v15)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v18 << 6);
      }
      else
      {
        v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38)
          goto LABEL_34;
        v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          v18 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_34;
          v23 = v39[v18];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              v3 = v37;
              if ((v41 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v9 + 32);
                if (v35 >= 64)
                  bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v35;
                *(_QWORD *)(v9 + 16) = 0;
              }
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v18 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v18 >= v38)
                  goto LABEL_34;
                v23 = v39[v18];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v18 = v24;
          }
        }
LABEL_21:
        v15 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      v25 = *(_QWORD *)(v6 + 72);
      v26 = *(_QWORD *)(v9 + 48) + v25 * v21;
      if ((v41 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v26, v5);
        v27 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v26, v5);
        v27 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      }
      lazy protocol witness table accessor for type UUID and conformance UUID();
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v28 = -1 << *(_BYTE *)(v11 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v16 + 8 * v30);
        }
        while (v34 == -1);
        v19 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v25 * v19, v8, v5);
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v27;
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  int v41;
  __int128 v42;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ConversationManagerHostConnection.ConversationContainerWrapper>);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v42 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v42 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      v28 = (id)v42;
      v29 = *((id *)&v42 + 1);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19) = v42;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, UUID>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  char *v44;
  uint64_t v45;

  v3 = v2;
  v45 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  v43 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v40 = v2;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 64);
    v42 = (_QWORD *)(v7 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v41 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41)
          goto LABEL_34;
        v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_34;
          v22 = v42[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v7 + 32);
                if (v38 >= 64)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v7 + 16) = 0;
              }
              break;
            }
            v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v41)
                  goto LABEL_34;
                v22 = v42[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = *(_QWORD *)(v7 + 56);
      v25 = v7;
      v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v5 + 72);
      v30 = v24 + v29 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v44, v30, v45);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v44, v30, v45);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v9 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v14 + 8 * v33);
        }
        while (v37 == -1);
        v17 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v17);
      *v18 = v28;
      v18[1] = v27;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 56) + v29 * v17, v44, v45);
      ++*(_QWORD *)(v9 + 16);
      v7 = v25;
    }
  }
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v37 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36)
          goto LABEL_33;
        v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v36)
            goto LABEL_33;
          v25 = v37[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              v4 = v3;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v6 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_40;
                if (v15 >= v36)
                  goto LABEL_33;
                v25 = v37[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v38;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v4 = v9;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v37 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36)
          goto LABEL_33;
        v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v36)
            goto LABEL_33;
          v25 = v37[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              v4 = v3;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v6 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_40;
                if (v15 >= v36)
                  goto LABEL_33;
                v25 = v37[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v38;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v4 = v9;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  _BYTE v39[40];

  v6 = v4;
  v8 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v37 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v8 + 64);
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = v9 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v36)
          goto LABEL_34;
        v22 = v37[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_34;
          v22 = v37[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              swift_release();
              v6 = v4;
              if ((v38 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v8 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v36)
                  goto LABEL_34;
                v22 = v37[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v20);
      v26 = *v24;
      v25 = v24[1];
      v27 = *(_QWORD *)(v8 + 56) + 40 * v20;
      if ((v38 & 1) != 0)
      {
        a4(v27, v39);
      }
      else
      {
        outlined init with copy of UserNotificationCenter(v27, (uint64_t)v39);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v10 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17);
      *v18 = v26;
      v18[1] = v25;
      result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v39, *(_QWORD *)(v10 + 56) + 40 * v17);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
  *v6 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v6 = v4;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v38 - v10;
  v12 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v14 = result;
  if (*(_QWORD *)(v12 + 16))
  {
    v39 = v6;
    v15 = 0;
    v16 = *(_QWORD *)(v12 + 64);
    v42 = (_QWORD *)(v12 + 64);
    v17 = 1 << *(_BYTE *)(v12 + 32);
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v19 = v18 & v16;
    v41 = (unint64_t)(v17 + 63) >> 6;
    v20 = result + 64;
    v40 = a2;
    v21 = 16;
    if ((a2 & 1) != 0)
      v21 = 32;
    v43 = v21;
    while (1)
    {
      if (v19)
      {
        v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v24 = v23 | (v15 << 6);
      }
      else
      {
        v25 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v42;
        if (v25 >= v41)
          goto LABEL_33;
        v26 = v42[v25];
        ++v15;
        if (!v26)
        {
          v15 = v25 + 1;
          if (v25 + 1 >= v41)
            goto LABEL_33;
          v26 = v42[v15];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v41)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v6 = v39;
                goto LABEL_40;
              }
              v37 = 1 << *(_BYTE *)(v12 + 32);
              if (v37 >= 64)
                bzero(v42, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v42 = -1 << v37;
              v6 = v39;
              *(_QWORD *)(v12 + 16) = 0;
              break;
            }
            v26 = v42[v27];
            if (!v26)
            {
              while (1)
              {
                v15 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_42;
                if (v15 >= v41)
                  goto LABEL_33;
                v26 = v42[v15];
                ++v27;
                if (v26)
                  goto LABEL_23;
              }
            }
            v15 = v27;
          }
        }
LABEL_23:
        v19 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v15 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v24);
      v29 = *(_QWORD *)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + v43))(v11, *(_QWORD *)(v12 + 56) + v29 * v24, v8);
      result = static Hasher._hash(seed:_:)();
      v30 = -1 << *(_BYTE *)(v14 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v20 + 8 * (v31 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v20 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v20 + 8 * v32);
        }
        while (v36 == -1);
        v22 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v22) = v28;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 56) + v29 * v22, v11, v8);
      ++*(_QWORD *)(v14 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v6 = v14;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CCE2A0]);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  result = outlined init with take of AttachmentLedger_AttachmentEncryption(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a5[6] + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  result = a6(a4, a5[7] + 40 * a1);
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v8 = a4[7];
  v9 = a5(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a3, v9);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = a5[7] + 16 * result;
  *(_QWORD *)v5 = a3;
  *(_BYTE *)(v5 + 8) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TUConversationParticipant>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PGBackgroundPIPAuthorization>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  void *v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ConversationManagerHostConnection.ConversationContainerWrapper>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (id)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v28 = v1;
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v29 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v25 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      v12 = v25 + 1;
      if (v25 + 1 >= v16)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v12);
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 16 * v18;
    v21 = *(_QWORD *)(v8 + 48) + v19;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v30 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    v23 = (void *)v30;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v30;
    v24 = v23;
    result = *((id *)&v30 + 1);
  }
  v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    result = (id)swift_release();
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v12 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v12);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PluginAttachmentLedgerTopic>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CustomEndpointProvider>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = outlined init with take of Any(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, ProcessAssertion>, (void (*)(_BYTE *, uint64_t))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Attachment>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:)>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v27 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v23 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v16)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v12;
    if (!v24)
    {
      v12 = v23 + 1;
      if (v23 + 1 >= v16)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v12);
      if (!v24)
        break;
    }
LABEL_25:
    v15 = (v24 - 1) & v24;
    v18 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 16 * v18;
    v21 = *(_QWORD *)(v8 + 48) + v19;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v28 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v28;
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v12 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v12);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PluginAttachmentLedgerTopic.Participant>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Set<AnyCancellable>>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.ConversationReport>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.PubSubTopicReport>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CCE2A0], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, NWEndpoint>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, BackgroundSessionManagerDataSource>, (void (*)(_BYTE *, uint64_t))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyDatagramChannelStream>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AttachmentLedger_AttachmentEncryption>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = 8 * v18;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v21 = *(_QWORD *)(v26 + 72) * v18;
    outlined init with copy of AttachmentLedger_AttachmentEncryption(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v20;
    result = (void *)outlined init with take of AttachmentLedger_AttachmentEncryption((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21);
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SeqNumReceivedBuffer>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, UInt64>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CP_Record]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, UUID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    result = (void *)outlined copy of Data._Representation(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PubSubTopic.Participant>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    LOBYTE(v19) = *(_BYTE *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v21 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v21 = v20;
    *(_BYTE *)(v21 + 8) = v19;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)();
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [TUHandle]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopic>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_unknownObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, void (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE v29[40];

  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v5 = *v2;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v4 = v7;
    return result;
  }
  v27 = v4;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v28 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = 40 * v17;
    outlined init with copy of UserNotificationCenter(*(_QWORD *)(v5 + 56) + 40 * v17, (uint64_t)v29);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    a2(v29, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v4 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - v6;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v28 = v8 + 64;
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19);
    v22 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 56) + v22, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + v20) = v21;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 56) + v22, v7, v4);
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL specialized static PluginClientMetrics.ConnectionDataTransfer.== infix(_:_:)(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x48uLL) == 0;
}

uint64_t specialized PluginClientMetrics.ConnectionEstablishment.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  char *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  _QWORD v55[2];
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = type metadata accessor for NWConnection.EstablishmentReport();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport.Handshake?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for NWConnection.EstablishmentReport.Handshake();
  v11 = *(_QWORD *)(v63 - 8);
  v12 = MEMORY[0x1E0C80A78](v63);
  v14 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v55 - v16;
  v18 = MEMORY[0x1AF447B0C](v15) * 1000.0;
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 <= -1.0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v18 >= 1.84467441e19)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  NWConnection.EstablishmentReport.attemptStartedAfterInterval.getter();
  v20 = v19 * 1000.0;
  if ((~COERCE__INT64(v19 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v20 <= -1.0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v20 >= 1.84467441e19)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v62 = v10;
  v21 = NWConnection.EstablishmentReport.handshakes.getter();
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v56 = v17;
    v57 = v7;
    v60 = v5;
    v61 = a1;
    v58 = v4;
    v59 = a2;
    v64 = type metadata accessor for NWProtocolDefinition();
    type metadata accessor for NWProtocolQUICConnection();
    v23 = v21 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v24 = *(_QWORD *)(v11 + 72);
    v65 = v11;
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    v55[1] = v21;
    swift_bridgeObjectRetain();
    v26 = v63;
    while (1)
    {
      v25(v14, v23, v26);
      v27 = v26;
      NWConnection.EstablishmentReport.Handshake.definition.getter();
      static NWProtocolQUICConnection.definition.getter();
      v28 = static NWProtocolDefinition.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v28 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v14, v27);
      v23 += v24;
      --v22;
      v26 = v27;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        v29 = 1;
        v4 = v58;
        v30 = v59;
        v5 = v60;
        a1 = v61;
        v17 = v56;
        v7 = v57;
        v11 = v65;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    v11 = v65;
    v31 = (uint64_t)v62;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v14, v27);
    v29 = 0;
    v4 = v58;
    v30 = v59;
    v5 = v60;
    a1 = v61;
    v26 = v27;
    v17 = v56;
    v7 = v57;
  }
  else
  {
    v30 = a2;
    v29 = 1;
    v26 = v63;
LABEL_13:
    v31 = (uint64_t)v62;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v31, v29, 1, v26);
  swift_bridgeObjectRelease();
  LODWORD(v65) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v31, 1, v26);
  if ((_DWORD)v65 == 1)
  {
    outlined destroy of NWConnection.EstablishmentReport.Handshake?(v31);
    a2 = v30;
    if (one-time initialization token for log == -1)
    {
LABEL_17:
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)log);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = v7;
        v36 = (uint8_t *)swift_slowAlloc();
        v37 = v4;
        v38 = swift_slowAlloc();
        v67 = v38;
        v60 = v5;
        v61 = a1;
        *(_DWORD *)v36 = 136315138;
        v39 = NWConnection.EstablishmentReport.debugDescription.getter();
        v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v41 = *(void (**)(char *, uint64_t))(v60 + 8);
        v41(v35, v37);
        _os_log_impl(&dword_1ACCCC000, v33, v34, "Could not find QUIC handshake info in establishment report, report=%s", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v38, -1, -1);
        MEMORY[0x1AF44981C](v36, -1, -1);

        v42 = v61;
        v43 = v37;
      }
      else
      {

        v41 = *(void (**)(char *, uint64_t))(v5 + 8);
        v41(v7, v4);
        v42 = a1;
        v43 = v4;
      }
      result = ((uint64_t (*)(uint64_t, uint64_t))v41)(v42, v43);
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      goto LABEL_28;
    }
LABEL_35:
    swift_once();
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v17, v31, v26);
  result = NWConnection.EstablishmentReport.Handshake.handshakeDuration.getter();
  v46 = v45 * 1000.0;
  if ((~COERCE__INT64(v45 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v46 <= -1.0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v46 >= 1.84467441e19)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  a2 = v30;
  NWConnection.EstablishmentReport.Handshake.handshakeRTT.getter();
  v48 = v47;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v63);
  v49 = v48 * 1000.0;
  if ((~COERCE__INT64(v48 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v49 <= -1.0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v49 < 1.84467441e19)
  {
    v50 = (unint64_t)v18;
    v51 = (unint64_t)v20;
    v52 = (unint64_t)v46;
    v53 = (unint64_t)v49;
LABEL_28:
    v54 = (_DWORD)v65 == 1;
    *(_QWORD *)a2 = v50;
    *(_QWORD *)(a2 + 8) = v51;
    *(_QWORD *)(a2 + 16) = v52;
    *(_QWORD *)(a2 + 24) = v53;
    *(_BYTE *)(a2 + 32) = v54;
    return result;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionEstablishment.CodingKeys, &unk_1E5C7C2B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionEstablishment.CodingKeys, &unk_1E5C7C2B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionEstablishment.CodingKeys, &unk_1E5C7C2B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionEstablishment.CodingKeys, &unk_1E5C7C2B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

uint64_t specialized PluginClientMetrics.ConnectionEstablishment.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x80000001ACF7EAF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001ACF7EB10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001ACF7EB30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001ACF7EB50)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized PluginClientMetrics.ConnectionEstablishment.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PluginClientMetrics.ConnectionEstablishment.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v12 = 0;
  v6 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v10 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  v9 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v6;
}

uint64_t specialized PluginClientMetrics.ConnectionDataTransfer.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for NWConnection.DataTransferReport.PathReport();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = NWConnection.DataTransferReport.duration.getter();
  v10 = v9 * 1000.0;
  if ((~COERCE__INT64(v9 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v10 <= -1.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v10 >= 1.84467441e19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  NWConnection.DataTransferReport.aggregatePathReport.getter();
  v24 = NWConnection.DataTransferReport.PathReport.receivedTransportByteCount.getter();
  v11 = NWConnection.DataTransferReport.PathReport.sentTransportByteCount.getter();
  v12 = NWConnection.DataTransferReport.PathReport.receivedApplicationByteCount.getter();
  v13 = NWConnection.DataTransferReport.PathReport.sentApplicationByteCount.getter();
  v14 = NWConnection.DataTransferReport.PathReport.retransmittedTransportByteCount.getter();
  result = NWConnection.DataTransferReport.PathReport.transportSmoothedRTT.getter();
  v16 = v15 * 1000.0;
  if ((~COERCE__INT64(v15 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v16 >= 1.84467441e19)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  result = NWConnection.DataTransferReport.PathReport.transportMinimumRTT.getter();
  v18 = v17 * 1000.0;
  if ((~COERCE__INT64(v17 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v18 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v18 >= 1.84467441e19)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  NWConnection.DataTransferReport.PathReport.transportRTTVariance.getter();
  v20 = v19;
  v21 = type metadata accessor for NWConnection.DataTransferReport();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22 = v20 * 1000.0;
  if ((~COERCE__INT64(v20 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 <= -1.0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v22 < 1.84467441e19)
  {
    *(_QWORD *)a2 = (unint64_t)v10;
    *(_QWORD *)(a2 + 8) = v24;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v14;
    *(_QWORD *)(a2 + 48) = (unint64_t)v16;
    *(_QWORD *)(a2 + 56) = (unint64_t)v18;
    *(_QWORD *)(a2 + 64) = (unint64_t)v22;
    *(_BYTE *)(a2 + 72) = 0;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined init with take of PluginClientMetrics.ConnectionEstablishment?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionDataTransfer.CodingKeys, &unk_1E5C7C188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionDataTransfer.CodingKeys, &unk_1E5C7C188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionDataTransfer.CodingKeys, &unk_1E5C7C188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginClientMetrics.ConnectionDataTransfer.CodingKeys, &unk_1E5C7C188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

uint64_t specialized PluginClientMetrics.ConnectionDataTransfer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x80000001ACF7EAF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001ACF7EB70
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001ACF7EB90
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001ACF7EBB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001ACF7EBD0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001ACF7EBF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001ACF7EC10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001ACF7EC30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001ACF7EC50)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t specialized PluginClientMetrics.ConnectionDataTransfer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PluginClientMetrics.ConnectionDataTransfer.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v31 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v30 = 1;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v29 = 2;
  v22 = KeyedDecodingContainer.decode(_:forKey:)();
  v28 = 3;
  v21 = KeyedDecodingContainer.decode(_:forKey:)();
  v27 = 4;
  v20 = KeyedDecodingContainer.decode(_:forKey:)();
  v26 = 5;
  v19 = KeyedDecodingContainer.decode(_:forKey:)();
  v25 = 6;
  v18 = KeyedDecodingContainer.decode(_:forKey:)();
  v24 = 7;
  v17 = KeyedDecodingContainer.decode(_:forKey:)();
  v23 = 8;
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  *a2 = v9;
  a2[1] = v10;
  v13 = v21;
  a2[2] = v22;
  a2[3] = v13;
  v14 = v19;
  a2[4] = v20;
  a2[5] = v14;
  v15 = v17;
  a2[6] = v18;
  a2[7] = v15;
  a2[8] = v11;
  return result;
}

uint64_t sub_1ACD30948@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD30978(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 120);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD309A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD309D8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

ValueMetadata *type metadata accessor for PluginClientMetrics()
{
  return &type metadata for PluginClientMetrics;
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PluginClientMetrics.ConnectionEstablishment()
{
  return &type metadata for PluginClientMetrics.ConnectionEstablishment;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PluginClientMetrics.ConnectionDataTransfer()
{
  return &type metadata for PluginClientMetrics.ConnectionDataTransfer;
}

uint64_t method lookup function for PluginClientReporter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginClientReporter.receivedConnectionEstablishmentReportCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedConnectionEstablishmentReportCount.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedConnectionEstablishmentReportCount.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedDataTransferReportCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedDataTransferReportCount.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedDataTransferReportCount.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PluginClientReporter.__allocating_init(queue:reportReadyCallback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of PluginClientReporter.includeConnectionEstablishmentReport(_:withTag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PluginClientReporter.includeConnectionDataTransferReport(_:withTag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1ACD30C54 + 4 * byte_1ACF5BC32[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1ACD30C88 + 4 * byte_1ACF5BC2D[v4]))();
}

uint64_t sub_1ACD30C88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD30C90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD30C98);
  return result;
}

uint64_t sub_1ACD30CA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD30CACLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1ACD30CB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD30CB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  return &unk_1E5C7C188;
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACD30DB0 + 4 * byte_1ACF5BC3C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACD30DE4 + 4 * byte_1ACF5BC37[v4]))();
}

uint64_t sub_1ACD30DE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD30DEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD30DF4);
  return result;
}

uint64_t sub_1ACD30E00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD30E08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACD30E0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD30E14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  return &unk_1E5C7C2B8;
}

uint64_t outlined init with copy of AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NWConnection.EstablishmentReport.Handshake?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport.Handshake?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a6;
  v15[5] = a4;
  v15[6] = a5;
  v15[7] = a2;
  v15[8] = a3;
  v16 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in Task<>.init(priority:timeout:operation:), (uint64_t)v15);
  outlined destroy of TaskPriority?(a1);
  return v16;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in Task<>.init(priority:timeout:operation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = closure #1 in Task<>.init(priority:timeout:operation:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1ACD31350()
{
  return objectdestroyTm_1();
}

uint64_t partial apply for closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 32);
  v8 = *(_OWORD *)(v1 + 56);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v8 = type metadata accessor for Optional();
  v7[9] = v8;
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = v0[12];
  v2 = v0[8];
  v12 = v0[7];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  v6 = type metadata accessor for TaskPriority();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v3;
  swift_retain();
  v0[13] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for ThrowingTaskGroup();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTATu, (uint64_t)v8);
  outlined destroy of TaskPriority?(v1);
  v7(v1, 1, 1, v6);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = v4;
  v9[6] = v12;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), (uint64_t)v9);
  outlined destroy of TaskPriority?(v1);
  v10 = (_QWORD *)swift_task_alloc();
  v0[14] = v10;
  *v10 = v0;
  v10[1] = closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v1, *(_QWORD *)(v0 + 72));
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 16), v1, v2);
    MEMORY[0x1AF448454](*v5, v2, v4, MEMORY[0x1E0DEDB38]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v8(a1);
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v9);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for ContinuousClock();
  v6[5] = v7;
  v6[6] = *(_QWORD *)(v7 - 8);
  v6[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  v1 = (_QWORD *)swift_task_alloc();
  v0[8] = v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return v3(v0[2], v0[3], 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for Task<>.Errors(0, *(_QWORD *)(v4 + 32), a3, a4);
  MEMORY[0x1AF44972C](&protocol conformance descriptor for Task<A, B><>.Errors, v5);
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a1, a2, v7, v8, v9, v10, v6);
}

uint64_t sub_1ACD31D94()
{
  return objectdestroyTm_1();
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTu
                                                                   + _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTu))(a1, v4, v5, v6);
}

uint64_t sub_1ACD31E68()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a1, v4, v5, v7, v8, v6);
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    v1 = type metadata accessor for CancellationError();
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DF05E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

uint64_t type metadata accessor for Task<>.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Task<>.Errors);
}

uint64_t type metadata instantiation function for Task<>.Errors()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for Task<>.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACD31FA8 + 4 * byte_1ACF5C088[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACD31FC8 + 4 * byte_1ACF5C08D[v4]))();
}

_BYTE *sub_1ACD31FA8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACD31FC8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACD31FD0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACD31FD8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACD31FE0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACD31FE8(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in Task<A, B><>.Errors()
{
  JUMPOUT(0x1AF44972CLL);
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t HostConnectionNotificationObserver.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id ConversationManagerClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t ConversationManagerClient.pluginClientReporter.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t key path setter for ConversationManagerClient.pluginClientReporter : ConversationManagerClient(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v6 = v5;
  swift_retain();
  return swift_release();
}

uint64_t ConversationManagerClient.pubSubTopicReporter.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t ConversationManagerClient.customEndpointProvider.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
  specialized Collection.first.getter(v1);
  v3 = v2;
  v5 = v4;
  swift_bridgeObjectRelease();
  if (!v3)
    return 0;
  swift_bridgeObjectRelease();
  return v5;
}

_OWORD *specialized Collection.first.getter(uint64_t a1)
{
  _OWORD *result;
  int v3;
  char v4;
  __int128 v5;

  result = (_OWORD *)specialized Dictionary.startIndex.getter();
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_OWORD *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return specialized Dictionary.subscript.getter(&v5, (uint64_t)result, v3, 0, a1);
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = specialized Set.startIndex.getter(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = specialized Set.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t ConversationManagerClient.customEndpointProvider.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  _OWORD *v5;
  void *v6;
  void *v7;
  Swift::String v8;

  if (a1)
  {
    ConversationManagerClient.registerEndpointProvider(_:)(a1, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x140))();
    v5 = specialized Collection.first.getter(v4);
    v7 = v6;
    result = swift_bridgeObjectRelease();
    if (v7)
    {
      swift_unknownObjectRelease();
      v8._countAndFlagsBits = (uint64_t)v5;
      v8._object = v7;
      ConversationManagerClient.unregisterEndpointProvider(identifier:)(v8);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t ConversationManagerClient.registerEndpointProvider(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  _QWORD *v23;
  void *v24;
  id v25;
  char *v26;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v34 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  v11 = (*(uint64_t (**)(void))(a2 + 8))();
  v13 = v12;
  if (one-time initialization token for client != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v29 = a1;
    v17 = swift_slowAlloc();
    v30 = v6;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc();
    v28 = v3;
    v20 = v19;
    aBlock[0] = v19;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, aBlock);
    a1 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v15, v16, "Registering custom endpoint provider: %s", v18, 0xCu);
    swift_arrayDestroy();
    v21 = v20;
    v3 = v28;
    MEMORY[0x1AF44981C](v21, -1, -1);
    v22 = v18;
    v6 = v30;
    MEMORY[0x1AF44981C](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v3;
  v23[3] = v11;
  v23[4] = v13;
  v23[5] = a1;
  v23[6] = a2;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.registerEndpointProvider(_:);
  aBlock[5] = (uint64_t)v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_2;
  v24 = _Block_copy(aBlock);
  v25 = v3;
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v35 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v26 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v26, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

Swift::Void __swiftcall ConversationManagerClient.unregisterEndpointProvider(identifier:)(Swift::String identifier)
{
  void *v1;
  void *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v2 = v1;
  object = identifier._object;
  countAndFlagsBits = identifier._countAndFlagsBits;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v25 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v23 = *(_QWORD *)(v8 - 8);
  v24 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v21 = v5;
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v22 = v2;
    v16 = v15;
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, aBlock);
    v5 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v12, v13, "Unregistering custom endpoint provider: %s", v14, 0xCu);
    swift_arrayDestroy();
    v17 = v16;
    v2 = v22;
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v2;
  v18[3] = countAndFlagsBits;
  v18[4] = object;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:);
  aBlock[5] = (uint64_t)v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6_1;
  v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v20 = v2;
  static DispatchQoS.unspecified.getter();
  v26 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
  swift_release();
}

uint64_t (*ConversationManagerClient.customEndpointProvider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  a1[2] = v1;
  v3 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x140);
  a1[3] = v3;
  v4 = v3();
  specialized Collection.first.getter(v4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  *a1 = v8;
  a1[1] = v10;
  return ConversationManagerClient.customEndpointProvider.modify;
}

uint64_t ConversationManagerClient.customEndpointProvider.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t result;
  uint64_t v11;
  _OWORD *v12;
  void *v13;
  void *v14;
  Swift::String v15;

  v2 = *(_QWORD *)a1;
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 8);
      v4 = swift_unknownObjectRetain();
      ConversationManagerClient.registerEndpointProvider(_:)(v4, v3);
      swift_unknownObjectRelease();
    }
    else
    {
      v5 = (*(uint64_t (**)(void))(a1 + 24))();
      v6 = specialized Collection.first.getter(v5);
      v8 = v7;
      swift_bridgeObjectRelease();
      if (v8)
      {
        swift_unknownObjectRelease();
        v9._countAndFlagsBits = (uint64_t)v6;
        v9._object = v8;
        ConversationManagerClient.unregisterEndpointProvider(identifier:)(v9);
        swift_bridgeObjectRelease();
      }
    }
    return swift_unknownObjectRelease();
  }
  if (v2)
  {
    ConversationManagerClient.registerEndpointProvider(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    return swift_unknownObjectRelease();
  }
  v11 = (*(uint64_t (**)(void))(a1 + 24))();
  v12 = specialized Collection.first.getter(v11);
  v14 = v13;
  result = swift_bridgeObjectRelease();
  if (v14)
  {
    swift_unknownObjectRelease();
    v15._countAndFlagsBits = (uint64_t)v12;
    v15._object = v14;
    ConversationManagerClient.unregisterEndpointProvider(identifier:)(v15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ConversationManagerClient.customEndpointProviders.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ConversationManagerClient.customEndpointProviders.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for ConversationManagerClient.customEndpointProviders);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationManagerClient.customEndpointProviders.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ConversationManagerClient.hasInitialState.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationManagerClient.hasInitialState);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationManagerClient.hasInitialState.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for ConversationManagerClient.hasInitialState);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ConversationManagerClient.hasInitialState.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path getter for ConversationManagerClient.activeSessionContainer : ConversationManagerClient@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationManagerClient.activeSessionContainer : ConversationManagerClient(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1C0);
  v4 = *a1;
  return v3(v2);
}

uint64_t ConversationManagerClient.activeSessionContainer.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t ConversationManagerClient.activeSessionContainer.setter()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  return static Published.subscript.setter();
}

void (*ConversationManagerClient.activeSessionContainer.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

void ConversationManagerClient.activeSessionContainer.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t key path setter for ConversationManagerClient.$activeSessionContainer : ConversationManagerClient(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>.Publisher);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1D8))(v6);
}

uint64_t ConversationManagerClient.$activeSessionContainer.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t ConversationManagerClient.$activeSessionContainer.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(uint64_t a1, uint64_t a2)
{
  return ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1E5C832C8, (uint64_t)partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:), (uint64_t)&block_descriptor_23);
}

void closure #1 in ConversationManagerClient.init()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v39[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = &v39[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16);
  v20 = &v39[-v19];
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for client != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.client);
    swift_bridgeObjectRetain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v46 = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v22, v23, v44, v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v25, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  else
  {
    v44 = a5;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v20, v13, v14);
    if (one-time initialization token for client != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.client);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16))(v18, v20, v14);
    swift_bridgeObjectRetain_n();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.info.getter();
    v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      v30 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      v46 = v42;
      *(_DWORD *)v30 = 136315394;
      swift_bridgeObjectRetain();
      v41 = MEMORY[0x1E0DEE9B8] + 8;
      v31 = Dictionary.description.getter();
      v40 = v29;
      v32 = v31;
      v43 = a4;
      v34 = v33;
      swift_bridgeObjectRelease();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v37(v18, v14);
      _os_log_impl(&dword_1ACCCC000, v27, (os_log_type_t)v40, v44, (uint8_t *)v30, 0x16u);
      v38 = v42;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v38, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      v37 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v37(v18, v14);
    }

    ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a3, (uint64_t)v20);
    v37(v20, v14);
  }
}

uint64_t closure #5 in ConversationManagerClient.init()(void **a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t *v28;
  char v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  char *v34;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v33 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v33 - v17;
  v19 = *a1;
  v20 = *a2;
  if (v19)
  {
    v21 = objc_msgSend(v19, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22(v18, 0, 1, v4);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22((char *)&v33 - v17, 1, 1, v4);
  }
  if (v20)
  {
    v23 = objc_msgSend(v20, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  v22(v16, v24, 1, v4);
  v25 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of UUID?((uint64_t)v18, (uint64_t)v9);
  outlined init with copy of UUID?((uint64_t)v16, v25);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v9, 1, v4) == 1)
  {
    outlined destroy of UUID?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v27 = v26(v25, 1, v4);
    if (v27 == 1)
      v28 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
    else
      v28 = &demangling cache variable for type metadata for (UUID?, UUID?);
    if (v27 == 1)
      v29 = -1;
    else
      v29 = 0;
  }
  else
  {
    outlined init with copy of UUID?((uint64_t)v9, (uint64_t)v13);
    if (v26(v25, 1, v4) == 1)
    {
      outlined destroy of UUID?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v29 = 0;
      v28 = &demangling cache variable for type metadata for (UUID?, UUID?);
    }
    else
    {
      v30 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v34, v25, v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31 = *(void (**)(char *, uint64_t))(v5 + 8);
      v31(v30, v4);
      v28 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      outlined destroy of UUID?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v31(v13, v4);
    }
  }
  outlined destroy of UUID?((uint64_t)v9, v28);
  return v29 & 1;
}

Swift::Void __swiftcall ConversationManagerClient.fetchInitialStateIfNeeded()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t state64[3];
  uint64_t v38[5];

  v1 = v0;
  v38[4] = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)((char *)v1 + direct field offset for XPCClient.queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v5 = ConversationManagerClient.notification.getter();
  v8 = v5[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v8 + 32), state64))
  {
    if (one-time initialization token for default == -1)
    {
LABEL_4:
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.default);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1ACCCC000, v10, v11, "Could not get current state.", v12, 2u);
        MEMORY[0x1AF44981C](v12, -1, -1);
      }

      goto LABEL_7;
    }
LABEL_35:
    swift_once();
    goto LABEL_4;
  }
  v18 = state64[0];
  if (state64[0])
  {
    v19 = swift_release();
    if (v18 != 1)
      return;
    goto LABEL_19;
  }
LABEL_7:
  v13 = v5[3];
  if (!v13)
  {
    swift_release();
    return;
  }
  v38[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v13 + 32), v38))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.default);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Could not get current state.", v17, 2u);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }

    swift_release();
    return;
  }
  v19 = swift_release();
  if (v38[0] != 1)
    return;
LABEL_19:
  if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A0))(v19) & 1) == 0)
  {
    v20 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v21 = specialized NSProcessInfo.isAllowedToConnect<A>(to:)();

    if ((v21 & 1) != 0)
    {
      MEMORY[0x1E0C80A78](v22);
      *(&v35 - 2) = (uint64_t)v1;
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = v1;
      v24 = v1;
      specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded(), (uint64_t)(&v35 - 4), (uint64_t)partial apply for closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded(), v23, (uint64_t)&block_descriptor_156, &demangling cache variable for type metadata for ConversationManagerXPCHost);
      swift_release();
    }
    else
    {
      if (one-time initialization token for client != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.client);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        v29 = swift_slowAlloc();
        v38[0] = v29;
        *(_DWORD *)v28 = 136315138;
        if (one-time initialization token for identity != -1)
          swift_once();
        LOBYTE(v36) = static ConversationManagerInterface.identity;
        v30 = String.init<A>(reflecting:)();
        v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v26, v27, "ConversationManagerClient not requesting initial state since the sandbox does not have access to %s", v28, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v29, -1, -1);
        MEMORY[0x1AF44981C](v28, -1, -1);
      }

      if (one-time initialization token for runtimeIssues != -1)
        swift_once();
      __swift_project_value_buffer(v25, (uint64_t)static Log.runtimeIssues);
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1ACCCC000, v32, v33, "Using SharePlay requires that you add the Group Activities capability to your application's target.", v34, 2u);
        MEMORY[0x1AF44981C](v34, -1, -1);
      }

    }
  }
}

uint64_t specialized NSProcessInfo.isAllowedToConnect<A>(to:)()
{
  void *v0;
  uint64_t v1;

  if (one-time initialization token for identity != -1)
    swift_once();
  v1 = static ConversationManagerInterface.identity;
  if ((static ConversationManagerInterface.identity & 0xFE) != 4)
  {
    objc_msgSend(v0, sel_processIdentifier);
    __asm { BR              X9; loc_1ACD340B0 }
  }
  return 1;
}

uint64_t closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(void **a1, void *a2)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t aBlock[6];
  uint64_t v21;

  v3 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a2;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    v9 = aBlock[0];
    *(_DWORD *)v8 = 136315138;
    v21 = (uint64_t)v5;
    type metadata accessor for ConversationManagerClient();
    v10 = v5;
    v11 = String.init<A>(reflecting:)();
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v6, v7, "ConversationManagerClient requesting initial state %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {

  }
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x1A8))(1);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v5;
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [UUID : TUConversationActivitySessionContainer]) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_162;
  v15 = _Block_copy(aBlock);
  v16 = v5;
  swift_release();
  objc_msgSend(v3, sel_requestConversationContainersByGroupUUIDWithReply_, v15);
  _Block_release(v15);
  v17 = (*(uint64_t (**)(void))((*v13 & *v16) + 0x140))();
  v18 = MEMORY[0x1E0C80A78](v17);
  specialized Sequence.forEach(_:)(v18, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded());
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if (one-time initialization token for client != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    type metadata accessor for UUID();
    v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v7, MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v8 = Dictionary.description.getter();
    v10 = v9;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "ConversationManagerClient got initial state %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v12 = a1;
  swift_retain();
  CurrentValueSubject.send(_:)();
  return swift_release();
}

uint64_t closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded()(void *a1, _QWORD *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;

  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v7, v8, "Error requesting initial state: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  swift_retain();
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x1A8))(0);
}

uint64_t specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(a1, a2, a3, a4, (uint64_t)&block_descriptor_114, &demangling cache variable for type metadata for BackgroundSessionManagerXPCClient);
}

{
  return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(a1, a2, a3, a4, (uint64_t)&block_descriptor_111, &demangling cache variable for type metadata for ActivitySessionXPCHost);
}

uint64_t specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  void *v11;
  void *v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  _QWORD aBlock[6];
  uint64_t v17;

  v11 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ();
  aBlock[3] = a5;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v13 = objc_msgSend(v11, sel_synchronousRemoteObjectProxyWithErrorHandler_, v12);
  _Block_release(v12);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(a6);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v17 = v15;
    a1(&v17);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerClient.handleServerDisconnect()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t state64[3];
  uint64_t v45[4];

  v45[3] = *MEMORY[0x1E0C80C00];
  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[direct field offset for XPCClient.queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (one-time initialization token for client == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v7 = type metadata accessor for Logger();
  v8 = __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  v9 = v0;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11))
  {

    goto LABEL_23;
  }
  v12 = (uint8_t *)swift_slowAlloc();
  v13 = swift_slowAlloc();
  v45[0] = v13;
  *(_DWORD *)v12 = 136315138;
  v14 = ConversationManagerClient.notification.getter();
  v15 = v14[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v15 + 32), state64))
  {
    v42 = v13;
    v16 = v8;
    if (one-time initialization token for default != -1)
      swift_once();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1ACCCC000, v17, v18, "Could not get current state.", v19, 2u);
      MEMORY[0x1AF44981C](v19, -1, -1);
    }

    v8 = v16;
    v13 = v42;
    goto LABEL_10;
  }
  v24 = state64[0];
  if (!state64[0])
  {
LABEL_10:
    v20 = v14[3];
    if (v20)
    {
      state64[0] = 0;
      swift_beginAccess();
      if (notify_get_state(*(_DWORD *)(v20 + 32), state64))
      {
        v42 = v8;
        if (one-time initialization token for default != -1)
          swift_once();
        __swift_project_value_buffer(v7, (uint64_t)static Log.default);
        v21 = Logger.logObject.getter();
        v22 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v23 = 0;
          _os_log_impl(&dword_1ACCCC000, v21, v22, "Could not get current state.", v23, 2u);
          MEMORY[0x1AF44981C](v23, -1, -1);
        }
        swift_release();

        v24 = 0;
      }
      else
      {
        swift_release();
        v24 = state64[0];
      }
    }
    else
    {
      swift_release();
      v24 = 0;
    }
    goto LABEL_22;
  }
  swift_release();
LABEL_22:
  state64[0] = v24;
  v25 = String.init<A>(reflecting:)();
  state64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v45);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1ACCCC000, v10, v11, "Server disconnected for ConversationManagerClient notification state %s", v12, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1AF44981C](v13, -1, -1);
  MEMORY[0x1AF44981C](v12, -1, -1);

LABEL_23:
  swift_retain();
  v45[0] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>, MEMORY[0x1E0C95F40]);
  Subject<>.send()();
  swift_release();
  v27 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x1A8))(0);
  v28 = ConversationManagerClient.notification.getter();
  v29 = v28[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v29 + 32), state64))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1ACCCC000, v30, v31, "Could not get current state.", v32, 2u);
      MEMORY[0x1AF44981C](v32, -1, -1);
    }

  }
  else
  {
    v37 = state64[0];
    if (state64[0])
    {
      swift_release();
      if (v37 != 1)
        return;
      goto LABEL_41;
    }
  }
  v33 = v28[3];
  if (!v33)
  {
    swift_release();
    return;
  }
  v43 = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v33 + 32), &v43))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1ACCCC000, v34, v35, "Could not get current state.", v36, 2u);
      MEMORY[0x1AF44981C](v36, -1, -1);
    }
    swift_release();

    return;
  }
  swift_release();
  if (v43 != 1)
    return;
LABEL_41:
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v40 = 0;
    _os_log_impl(&dword_1ACCCC000, v38, v39, "Re-fetching initial state as we are told there are changed conversations", v40, 2u);
    MEMORY[0x1AF44981C](v40, -1, -1);
  }

  (*(void (**)(void))((*v27 & *(_QWORD *)v9) + 0x1E8))();
}

uint64_t ConversationManagerClient.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v0 + direct field offset for ConversationManagerClient._activeSessionContainer;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id ConversationManagerClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationManagerClient();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc ConversationManagerClient.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v2 = a1 + direct field offset for ConversationManagerClient._activeSessionContainer;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t specialized XPCClient.connection.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  id v3;
  id v4;
  void (*v5)(void **__return_ptr, uint64_t);
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;

  v1 = v0 + direct field offset for XPCClient._connection;
  result = swift_beginAccess();
  v3 = *(id *)v1;
  if (*(_QWORD *)v1)
  {
    v4 = *(id *)v1;
LABEL_5:
    swift_endAccess();
    v8 = v3;
    return (uint64_t)v4;
  }
  v5 = *(void (**)(void **__return_ptr, uint64_t))(v1 + 8);
  if (v5)
  {
    v6 = swift_retain();
    v5(&v9, v6);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v5);
    v7 = v9;
    *(_QWORD *)v1 = v9;
    v4 = v7;
    v3 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ConversationManagerClient.activitySessions.getter()
{
  char *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v7[6];

  v1 = *(NSObject **)&v0[direct field offset for XPCClient.queue];
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in ConversationManagerClient.activitySessions.getter;
  *(_QWORD *)(v3 + 24) = v2;
  v7[4] = _sIg_Ieg_TRTA_0;
  v7[5] = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_35;
  v4 = _Block_copy(v7);
  v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    swift_release();
    return v7[0];
  }
  return result;
}

uint64_t ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  _QWORD v16[2];

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v12 = (_QWORD *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v12 = a2;
  v12[1] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>);
  swift_allocObject();
  v13 = v3;
  swift_bridgeObjectRetain();
  v16[1] = Future.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubClient.TopicCategory, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>, MEMORY[0x1E0C96108]);
  v14 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v14;
}

uint64_t closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];

  v30 = a2;
  v31 = a6;
  v28 = a1;
  v29 = a5;
  v33 = type metadata accessor for DispatchWorkItemFlags();
  v36 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)&a3[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  v20 = (_QWORD *)(v19 + v18);
  v21 = v31;
  *v20 = v29;
  v20[1] = v21;
  v22 = (_QWORD *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8));
  v23 = v30;
  *v22 = v28;
  v22[1] = v23;
  aBlock[4] = partial apply for closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_153;
  v24 = _Block_copy(aBlock);
  v25 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v37 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v26 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v12, v9, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  int64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  id v42;
  id v43;
  id v44;
  void (*v45)(uint64_t *);
  id v46;
  unsigned int v47;
  _BYTE v48[12];
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t *);
  char v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];

  v52 = a3;
  v53 = a4;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v48[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v48[-v14];
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v57 = a2;
  specialized Sequence.first(where:)(partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:), (uint64_t)v56, v59[2]);
  v17 = v16;
  v51 = 0;
  swift_bridgeObjectRelease();
  v54 = a6;
  v55 = a5;
  if (v17)
  {
    v18 = objc_msgSend(v17, sel_activitySessions);

    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, MEMORY[0x1E0DEFCF8]);
    v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v19 = MEMORY[0x1E0DEE9E8];
  }
  v20 = specialized _copyCollectionToContiguousArray<A>(_:)(v19);
  swift_bridgeObjectRelease();
  v21 = v20 < 0 || (v20 & 0x4000000000000000) != 0;
  if (v21)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v22 != 1)
    {
LABEL_9:
      if (!v22)
      {
        swift_release();
        v23 = v53;
        if (one-time initialization token for client != -1)
          swift_once();
        v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Log.client);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v15, a2, v9);
        swift_bridgeObjectRetain_n();
        v25 = Logger.logObject.getter();
        v26 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = swift_slowAlloc();
          v51 = swift_slowAlloc();
          v59[0] = v51;
          *(_DWORD *)v27 = 136315650;
          v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001ACF7EEB0, v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v27 + 12) = 2080;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
          v28 = dispatch thunk of CustomStringConvertible.description.getter();
          v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
          *(_WORD *)(v27 + 22) = 2080;
          swift_bridgeObjectRetain();
          v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v23, v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v25, v26, "ConversationManagerClient.%s did not find matching PubSubClient.TopicCategory for group=%s name=%s", (uint8_t *)v27, 0x20u);
          v30 = v51;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v30, -1, -1);
          MEMORY[0x1AF44981C](v27, -1, -1);

        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);

          swift_bridgeObjectRelease_n();
        }
        v41 = 0;
        v42 = 0;
        goto LABEL_36;
      }
      v31 = v53;
      if (one-time initialization token for client != -1)
        swift_once();
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Log.client);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
      swift_bridgeObjectRetain_n();
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.default.getter();
      v35 = v34;
      if (os_log_type_enabled(v33, v34))
      {
        v36 = swift_slowAlloc();
        v50 = swift_slowAlloc();
        v59[0] = v50;
        *(_DWORD *)v36 = 136315650;
        v49 = v35;
        v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001ACF7EEB0, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 12) = 2080;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v37 = dispatch thunk of CustomStringConvertible.description.getter();
        v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v59);
        v31 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
        *(_WORD *)(v36 + 22) = 2080;
        swift_bridgeObjectRetain();
        v39 = v52;
        v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v31, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v33, (os_log_type_t)v49, "ConversationManagerClient.%s found multiple activities for group=%s, filtering for topic=%s", (uint8_t *)v36, 0x20u);
        v40 = v50;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v40, -1, -1);
        MEMORY[0x1AF44981C](v36, -1, -1);

      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);

        swift_bridgeObjectRelease_n();
        v39 = v52;
      }
      swift_bridgeObjectRetain();
      v42 = specialized Sequence.first(where:)(v20, v39, v31);
      swift_release();
      swift_bridgeObjectRelease();
      if (v42)
      {
        v43 = objc_msgSend(v42, sel_activity);
        goto LABEL_30;
      }
LABEL_35:
      v41 = 0;
LABEL_36:
      v45 = v55;
LABEL_41:
      LOWORD(v59[0]) = v41;
      v45(v59);

      return;
    }
  }
  else
  {
    v22 = *(_QWORD *)(v20 + 16);
    if (v22 != 1)
      goto LABEL_9;
  }
  if (v21)
  {
    swift_bridgeObjectRetain();
    v42 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v42)
      goto LABEL_26;
LABEL_34:
    swift_release();
    goto LABEL_35;
  }
  v42 = *(id *)(v20 + 16);
  if (!v42)
    goto LABEL_34;
LABEL_26:
  if ((v20 & 0xC000000000000001) != 0)
  {
    v44 = (id)MEMORY[0x1AF448904](0, v20);
    goto LABEL_29;
  }
  if (*(_QWORD *)(v20 + 16))
  {
    v44 = *(id *)(v20 + 32);
LABEL_29:
    v42 = v44;
    swift_release();
    v43 = objc_msgSend(v42, sel_activity);
LABEL_30:
    v45 = v55;
    v46 = v43;

    if (v46)
    {
      v42 = v46;
      if (objc_msgSend(v42, sel_isSystemActivity))
      {

        v41 = 2;
      }
      else
      {
        v47 = objc_msgSend(v42, sel_isScreenSharingActivity);

        if (v47)
          v41 = 3;
        else
          v41 = 1;
      }
    }
    else
    {
      v41 = 0;
      v42 = 0;
    }
    goto LABEL_41;
  }
  __break(1u);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  char v7;
  uint64_t v9;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*a1, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

uint64_t ConversationManagerClient.onHostProcessDisconnected.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + direct field offset for ConversationManagerClient.publishers + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<(), Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  return ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1E5C83390, (uint64_t)partial apply for closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:), (uint64_t)&block_descriptor_44);
}

uint64_t ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v24 = a4;
  v25 = a5;
  v23 = a3;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)&v5[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v18 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v5;
  *(_QWORD *)(v19 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v19 + v18, v17, v14);
  aBlock[4] = v24;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v25;
  v20 = _Block_copy(aBlock);
  v21 = v5;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v13, v10, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void **a1)
{
  void *v1;
  Class isa;
  Class v3;

  v1 = *a1;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember, 0x1E0DBD2A0, MEMORY[0x1E0DEFCF8]);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v3 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_addRemoteMembers_toConversationWithUUID_, isa, v3);

}

void closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error adding remote members: %s");
}

uint64_t ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void *a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t state64[13];

  v4 = v3;
  v38 = a2;
  v39 = a3;
  v36 = a1;
  state64[12] = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = ConversationManagerClient.notification.getter();
  v13 = v12[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v13 + 32), state64))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.default);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Could not get current state.", v17, 2u);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }

  }
  else
  {
    v23 = state64[0];
    if (state64[0])
    {
      swift_release();
      if (v23 == 1)
        goto LABEL_19;
      goto LABEL_20;
    }
  }
  v18 = v12[3];
  if (v18)
  {
    state64[0] = 0;
    swift_beginAccess();
    if (notify_get_state(*(_DWORD *)(v18 + 32), state64))
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.default);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1ACCCC000, v20, v21, "Could not get current state.", v22, 2u);
        MEMORY[0x1AF44981C](v22, -1, -1);
      }
      swift_release();

      goto LABEL_20;
    }
    swift_release();
    if (state64[0] == 1)
    {
LABEL_19:
      v24 = (_QWORD *)swift_allocObject();
      v25 = v36;
      v24[2] = v4;
      v24[3] = v25;
      v26 = v39;
      v24[4] = v38;
      v24[5] = v26;
      state64[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:);
      state64[5] = (uint64_t)v24;
      state64[0] = MEMORY[0x1E0C809B0];
      state64[1] = 1107296256;
      state64[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      state64[3] = (uint64_t)&block_descriptor_50;
      v27 = _Block_copy(state64);
      v28 = v25;
      swift_retain();
      v29 = v4;
      static DispatchQoS.unspecified.getter();
      v40 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1AF448634](0, v11, v7, v27);
      _Block_release(v27);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return swift_release();
    }
  }
  else
  {
    swift_release();
  }
LABEL_20:
  if (one-time initialization token for client != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.client);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    state64[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001ACF7BFE0, (uint64_t *)state64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v32, v33, "Short circuiting prepare for activation since %s is reporting no active conversations.", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v35, -1, -1);
    MEMORY[0x1AF44981C](v34, -1, -1);
  }

  return v38(0, 0);
}

uint64_t closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:), (uint64_t)v8, (uint64_t)partial apply for closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:), v6);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v7 = *a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v10[4] = partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:);
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_147;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_prepareForGroupActivityWithOverrides_completionHandler_, a2, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(char a1, void *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v18)(_QWORD, _QWORD);
  uint64_t v19;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = a2;
  v8 = a2;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v19 = v12;
    *(_DWORD *)v11 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 8) = 2080;
    v18 = a3;
    if (a2)
    {
      v13 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v14 = String.init<A>(reflecting:)();
      v16 = v15;
    }
    else
    {
      v16 = 0xE300000000000000;
      v14 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v9, v10, "ConversationManagerClient prepareForGroupActivity success: %{BOOL}d, error: %s", (uint8_t *)v11, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

    a3 = v18;
  }
  else
  {

  }
  return a3(a1 & 1, a2);
}

uint64_t closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v7, v8, "Encountered connection error with prepareForGroupActivity: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  return a2(0, 0);
}

Swift::Void __swiftcall ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(Swift::Bool _, Swift::String forBundleIdentifier)
{
  char *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  object = forBundleIdentifier._object;
  countAndFlagsBits = forBundleIdentifier._countAndFlagsBits;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(_QWORD *)&v2[direct field offset for XPCClient.queue];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v2;
  *(_BYTE *)(v14 + 24) = _;
  *(_QWORD *)(v14 + 32) = countAndFlagsBits;
  *(_QWORD *)(v14 + 40) = object;
  aBlock[4] = partial apply for closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_56;
  v15 = _Block_copy(aBlock);
  v16 = v2;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v19 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
}

void closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD aBlock[6];

  v7 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = closure #2 in closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ();
  aBlock[3] = &block_descriptor_138;
  v8 = _Block_copy(aBlock);
  swift_release();
  v9 = objc_msgSend(v7, sel_synchronousRemoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCHost);
  if (swift_dynamicCast())
  {
    v10 = (void *)MEMORY[0x1AF4480F4](a3, a4);
    objc_msgSend(v11, sel_setActivityAuthorization_forBundleIdentifier_, a2 & 1, v10);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void closure #2 in closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error setting activity authorization: %s");
}

uint64_t ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v30 = a4;
  v31 = a3;
  v35 = type metadata accessor for DispatchWorkItemFlags();
  v38 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v34 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x1E0C80A78](v7);
  v32 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)&a2[direct field offset for XPCClient.queue];
  v29 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v30, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = (v15 + *(unsigned __int8 *)(v10 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a2;
  v20 = v31;
  *(_QWORD *)(v19 + 24) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v19 + v18, v12, v9);
  aBlock[4] = partial apply for closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_126;
  v21 = _Block_copy(aBlock);
  v22 = v29;
  v23 = v20;
  v24 = v32;
  static DispatchQoS.unspecified.getter();
  v39 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v26 = v34;
  v25 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v24, v26, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v37);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  _BYTE v14[16];
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v15 = a2;
  v16 = a3;
  v17 = a4;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(&v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a4, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v8 + 32))(v11 + v10, &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v7);
  v12 = a2;
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:), (uint64_t)v14, (uint64_t)partial apply for closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:), v11, (uint64_t)&block_descriptor_156, &demangling cache variable for type metadata for ConversationManagerXPCHost);
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Class isa;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = *a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_135;
  v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v10, sel_createActivitySessionWith_onConversationWithUUID_completion_, a2, isa, v14);
  _Block_release(v14);

}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  v5 = a2;
  v6 = a1;
  v7 = v5;
  v8 = a1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v11 = 138412546;
    v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v7;

    *(_WORD *)(v11 + 12) = 2080;
    v14 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v9, v10, "Error creating activitySession with request %@, error: %s", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v19, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {

  }
  v20 = (uint64_t)a1;
  v17 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t ConversationManagerClient.buzzMember(_:conversationUUID:)(void *a1, uint64_t a2)
{
  return ConversationManagerClient.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1E5C83408, (uint64_t)partial apply for closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:), (uint64_t)&block_descriptor_64);
}

void closure #2 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error buzzing member: %s");
}

uint64_t ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(char a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v23 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v21 = *(_QWORD *)(v8 - 8);
  v22 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v2[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v2;
  *(_BYTE *)(v16 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, v14, v11);
  aBlock[4] = partial apply for closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_70;
  v17 = _Block_copy(aBlock);
  v18 = v2;
  static DispatchQoS.unspecified.getter();
  v24 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v7, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v11[16] = a2;
  v12 = a3;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v5);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v6 + 32))(v9 + v8, &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:), (uint64_t)v11, (uint64_t)partial apply for closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:), v9, (uint64_t)&block_descriptor_156, &demangling cache variable for type metadata for ConversationManagerXPCHost);
  return swift_release();
}

void closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v11 = a1;
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v23 = v16;
    *(_DWORD *)v15 = 67109634;
    LODWORD(v22) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 8) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_WORD *)(v15 + 18) = 2080;
    v22 = (uint64_t)a1;
    v19 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v20 = String.init<A>(reflecting:)();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v13, v14, "Error setting downlink muted: (%{BOOL}d) for remote participants in conversation: %s with error: %s", (uint8_t *)v15, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

  }
}

uint64_t ConversationManagerClient.kickMember(_:conversationUUID:)(void *a1, uint64_t a2)
{
  return ConversationManagerClient.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1E5C83458, (uint64_t)partial apply for closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:), (uint64_t)&block_descriptor_76);
}

uint64_t ConversationManagerClient.buzzMember(_:conversationUUID:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v25 = a4;
  v26 = a5;
  v24 = a3;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)&v5[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v18 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v5;
  *(_QWORD *)(v19 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v19 + v18, v17, v14);
  aBlock[4] = v25;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v26;
  v20 = _Block_copy(aBlock);
  v21 = v5;
  v22 = a1;
  static DispatchQoS.unspecified.getter();
  v31 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v13, v10, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  return swift_release();
}

void closure #2 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error kicking member: %s");
}

void closure #1 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void **a1)
{
  void *v1;
  Class isa;
  Class v3;

  v1 = *a1;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v3 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_includeMetricsReport_onConversationWithUUID_, isa, v3);

}

void closure #2 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error including metrics report: %s");
}

uint64_t closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t (*v15)(_BYTE *);
  uint64_t (*v16)(_BYTE *, _QWORD);
  uint64_t *v17;
  uint64_t *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;
  _BYTE v23[32];

  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x140);
  v12 = swift_bridgeObjectRetain();
  if (*(_QWORD *)(v11(v12) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v13 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *(uint64_t (**)(_BYTE *))((*v10 & *a1) + 0x150);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v16 = (uint64_t (*)(_BYTE *, _QWORD))v15(v23);
    v18 = v17;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v18;
    *v18 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
    *v18 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v16(v23, 0);
    result = (*(uint64_t (**)(uint64_t))((*v10 & *a1) + 0x1A0))(v20);
    if ((result & 1) != 0)
    {
      MEMORY[0x1E0C80A78](result);
      v21[2] = a2;
      v21[3] = a3;
      return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:), (uint64_t)v21, (uint64_t)closure #2 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:), 0, (uint64_t)&block_descriptor_156, &demangling cache variable for type metadata for ConversationManagerXPCHost);
    }
  }
  return result;
}

void closure #2 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error registering supported identifier for custom endpoint: %s");
}

uint64_t closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t (*v12)(_BYTE *);
  uint64_t (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  _QWORD v15[6];
  _BYTE v16[32];

  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x140);
  v8 = swift_bridgeObjectRetain();
  if (*(_QWORD *)(v7(v8) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    v10 = v9;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
      v12 = *(uint64_t (**)(_BYTE *))((*v6 & *a1) + 0x150);
      swift_bridgeObjectRetain();
      v13 = (uint64_t (*)(_BYTE *, _QWORD))v12(v16);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v14 = v13(v16, 0);
      result = (*(uint64_t (**)(uint64_t))((*v6 & *a1) + 0x1A0))(v14);
      if ((result & 1) != 0)
      {
        MEMORY[0x1E0C80A78](result);
        v15[2] = a2;
        v15[3] = a3;
        return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:), (uint64_t)v15, (uint64_t)closure #2 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:), 0, (uint64_t)&block_descriptor_156, &demangling cache variable for type metadata for ConversationManagerXPCHost);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void closure #2 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error unregistering supported identifier for custom endpoint: %s");
}

uint64_t ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  id v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t aBlock[6];

  v6 = v5;
  v38 = a4;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v42 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  v17 = a3;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    aBlock[0] = v34;
    *(_DWORD *)v20 = 136315394;
    v37 = v11;
    swift_bridgeObjectRetain();
    v33 = a1;
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    v43 = (uint64_t)v17;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    v35 = a5;
    v36 = v15;
    v21 = v6;
    v22 = v17;
    v23 = String.init<A>(reflecting:)();
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
    v11 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v6 = v21;
    a1 = v33;
    a5 = v35;
    v15 = v36;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v18, v19, "Fetching endpoint: %s for activity session: %s", (uint8_t *)v20, 0x16u);
    v25 = v34;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v25, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v6;
  v26[3] = a1;
  v26[4] = a2;
  v26[5] = v17;
  v26[6] = v38;
  v26[7] = a5;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:);
  aBlock[5] = (uint64_t)v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_82;
  v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v28 = v17;
  v29 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v43 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v30 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v15, v30, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v11);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v40);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;
  Class isa;
  id v20;
  void *v21;
  _QWORD aBlock[6];

  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = (void *)MEMORY[0x1AF4480F4](a2, a3);
  v18 = objc_msgSend(a4, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v20 = objc_msgSend(a4, sel_activity);
  aBlock[4] = a5;
  aBlock[5] = a6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  aBlock[3] = &block_descriptor_117;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_fetchEndpointWith_activitySessionUUID_activity_completion_, v17, isa, v20, v21);
  _Block_release(v21);

}

void closure #2 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(void *a1)
{
  closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1, "Error fetching endpoint: %s");
}

void closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void *a1, const char *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *oslog;
  uint64_t v14;

  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a1;
  v6 = a1;
  oslog = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, oslog, v7, a2, v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

  }
}

uint64_t protocol witness for ConversationManagerClientProtocol.onHostProcessDisconnected.getter in conformance ConversationManagerClient()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*v0 + direct field offset for ConversationManagerClient.publishers + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<(), Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for ConversationManagerClientProtocol.prepareForGroupActivity(overrides:completionHandler:) in conformance ConversationManagerClient(void *a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  return ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, a2, a3);
}

void protocol witness for ConversationManagerClientProtocol.setActivityAuthorization(_:forBundleIdentifier:) in conformance ConversationManagerClient(Swift::Bool a1, uint64_t a2, uint64_t a3)
{
  ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(a1, *(Swift::String *)&a2);
}

uint64_t protocol witness for ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:) in conformance ConversationManagerClient(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return swift_task_switch();
}

uint64_t protocol witness for ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:) in conformance ConversationManagerClient()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t protocol witness for ConversationManagerClientProtocol.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:) in conformance ConversationManagerClient(char a1, uint64_t a2)
{
  return ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(a1, a2);
}

uint64_t protocol witness for ConversationManagerClientProtocol.includeMetricsReport(_:conversationUUID:) in conformance ConversationManagerClient(uint64_t a1, uint64_t a2)
{
  return ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a1, a2);
}

uint64_t protocol witness for ActivitySessionContainerProvider.activitySessions.getter in conformance ConversationManagerClient()
{
  return ConversationManagerClient.activitySessions.getter();
}

uint64_t protocol witness for ActivitySessionContainerProvider.pluginClientReporter.getter in conformance ConversationManagerClient()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0xF8))();
}

uint64_t protocol witness for ActivitySessionContainerProvider.pubSubTopicReporter.getter in conformance ConversationManagerClient()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x110))();
}

uint64_t protocol witness for ActivitySessionContainerProvider.topicCategory(groupUUID:name:) in conformance ConversationManagerClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD v17[2];

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v13 = (_QWORD *)(v12 + ((v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v13 = a2;
  v13[1] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>);
  swift_allocObject();
  v14 = v10;
  swift_bridgeObjectRetain();
  v17[1] = Future.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubClient.TopicCategory, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>, MEMORY[0x1E0C96108]);
  v15 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v15;
}

Swift::Void __swiftcall ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)(Swift::OpaquePointer conversationContainersByGroupUUID)
{
  char *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::OpaquePointer *v12;
  void *v13;
  char *v14;
  _QWORD v15[2];
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(_QWORD *)&v1[direct field offset for XPCClient.queue];
  v12 = (Swift::OpaquePointer *)swift_allocObject();
  v12[2]._rawValue = v1;
  v12[3]._rawValue = conversationContainersByGroupUUID._rawValue;
  aBlock[4] = partial apply for closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_88;
  v13 = _Block_copy(aBlock);
  v14 = v1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v4, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
}

uint64_t closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)()
{
  swift_retain();
  CurrentValueSubject.send(_:)();
  return swift_release();
}

void ConversationManagerClient.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t ObjectType;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a4;
  v37 = a1;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v34 = a3;
  if (v17)
  {
    v18 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v39 = v31;
    *(_DWORD *)v18 = 136315394;
    swift_bridgeObjectRetain();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a2, &v39);
    v33 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    v32 = a6;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v39);
    a5 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_1ACCCC000, v15, v16, "Requesting endpoint for identifier=%s activitySessionUUID=%s", (uint8_t *)v18, 0x16u);
    v21 = v31;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    MEMORY[0x1AF44981C](v18, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  v22 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v36) + 0x140);
  v23 = swift_bridgeObjectRetain();
  v24 = v22(v23);
  if (*(_QWORD *)(v24 + 16) && (v25 = specialized __RawDictionaryStorage.find<A>(_:)(v37, a2), (v26 & 1) != 0))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v25 + 8);
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ObjectType = swift_getObjectType();
    v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16))(v34, v35, ObjectType, v27);
    a5();
    swift_unknownObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(_QWORD))a5)(0);
  }
}

uint64_t sub_1ACD39E38()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.registerEndpointProvider(_:)()
{
  uint64_t v0;

  return closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1ACD39E84()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)()
{
  uint64_t v0;

  return closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACD39EBC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD39EFC(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1C0);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1ACD39F48()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationManagerClient.init()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in ConversationManagerClient.init()(a1, a2, a3, *(_QWORD *)(v3 + 16), "Received PluginClientReport report=%s conversationUUID=%s", "PluginClientReporter could not convert parse conversation UUID from tag=%s, dropping report");
}

void partial apply for closure #2 in ConversationManagerClient.init()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in ConversationManagerClient.init()(a1, a2, a3, *(_QWORD *)(v3 + 16), "Received PubSubTopicReport report=%s conversationUUID=%s", "PubSubTopicReporter could not convert parse conversation UUID from tag=%s, dropping report");
}

uint64_t _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = type metadata accessor for TUConversationActivity(255, a2);
    result = MEMORY[0x1AF44972C](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1ACD39FFC()
{
  swift_unknownObjectUnownedDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(void **a1)
{
  uint64_t v1;

  return closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded()(void *a1)
{
  uint64_t v1;

  return closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded()(a1, *(_QWORD **)(v1 + 16));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.activitySessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x1E8))();
}

uint64_t sub_1ACD3A090()
{
  return swift_deallocObject();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:));
}

uint64_t sub_1ACD3A15C()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)()
{
  uint64_t *v0;

  return closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1ACD3A19C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)()
{
  uint64_t v0;

  closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:));
}

uint64_t sub_1ACD3A1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), v0 + ((v1 + 25) & ~v1));
}

uint64_t objectdestroy_60Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[6];

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v7[2] = *(_QWORD *)(v2 + 24);
  v7[3] = v2 + ((v5 + 32) & ~v5);
  return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(a1, (uint64_t)v7, a2, 0, (uint64_t)&block_descriptor_156, &demangling cache variable for type metadata for ConversationManagerXPCHost);
}

uint64_t sub_1ACD3A3B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)()
{
  uint64_t v0;
  __int128 v1;
  _QWORD v3[3];
  __int128 v4;
  __int128 v5;

  v3[2] = *(_QWORD *)(v0 + 24);
  v1 = *(_OWORD *)(v0 + 48);
  v4 = *(_OWORD *)(v0 + 32);
  v5 = v1;
  return specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:), (uint64_t)v3, (uint64_t)closure #2 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:), 0);
}

uint64_t sub_1ACD3A454()
{
  return objectdestroy_84Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)()
{
  return closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)();
}

uint64_t sub_1ACD3A468@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD3A4A8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ConversationManagerClient.pluginClientReporter : ConversationManagerClient(a1, a2, a3, a4, &direct field offset for ConversationManagerClient.pluginClientReporter);
}

uint64_t sub_1ACD3A4C4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD3A504(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ConversationManagerClient.pluginClientReporter : ConversationManagerClient(a1, a2, a3, a4, &direct field offset for ConversationManagerClient.pubSubTopicReporter);
}

uint64_t sub_1ACD3A520@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x128))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACD3A560(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x130);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1ACD3A5B0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x140))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD3A5F0(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x148);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD3A630@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1A0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1ACD3A674(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1A8))(*a1);
}

uint64_t sub_1ACD3A6B0(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1D0))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.onHostProcessDisconnected.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.prepareForGroupActivity(overrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.setActivityAuthorization(_:forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 40) + *(_QWORD *)(a4 + 40));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.includeMetricsReport(_:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t method lookup function for ConversationManagerClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationManagerClient.pluginClientReporter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ConversationManagerClient.pubSubTopicReporter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProviders.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProviders.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProviders.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of ConversationManagerClient.hasInitialState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ConversationManagerClient.hasInitialState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ConversationManagerClient.hasInitialState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ConversationManagerClient.activeSessionContainer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ConversationManagerClient.activeSessionContainer.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ConversationManagerClient.activeSessionContainer.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ConversationManagerClient.$activeSessionContainer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ConversationManagerClient.$activeSessionContainer.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ConversationManagerClient.$activeSessionContainer.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ConversationManagerClient.fetchInitialStateIfNeeded()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t ObjC metadata update function for ConversationManagerClient()
{
  return type metadata accessor for ConversationManagerClient();
}

uint64_t destroy for ConversationManagerClient.Publishers()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for ConversationManagerClient.Publishers(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ConversationManagerClient.Publishers(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ConversationManagerClient.Publishers(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationManagerClient.Publishers(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationManagerClient.Publishers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ConversationManagerClient.Publishers()
{
  return &unk_1E5C7D320;
}

_OWORD *specialized Dictionary.subscript.getter(_OWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    *result = *(_OWORD *)(*(_QWORD *)(a5 + 56) + 16 * a2);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    return (_OWORD *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v24 = type metadata accessor for UUID();
  v23 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_16;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    v20 = v4;
    v21 = v10;
    v22 = a1 & 0xC000000000000001;
    v11 = 4;
    while (1)
    {
      v12 = v22 ? (id)MEMORY[0x1AF448904](v11 - 4, a1) : *(id *)(a1 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v15 = objc_msgSend(v12, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v16 = UUID.uuidString.getter();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
      if (v16 == a2 && v18 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        return v13;
      }
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) != 0)
        goto LABEL_14;

      ++v11;
      if (v14 == v21)
        goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;

  v22 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v7)
      return swift_release();
    v20 = *(_QWORD *)(v22 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v7)
        return swift_release();
      v20 = *(_QWORD *)(v22 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v7)
          return swift_release();
        v20 = *(_QWORD *)(v22 + 8 * v9);
        if (!v20)
        {
          v9 = v19 + 3;
          if (v19 + 3 >= v7)
            return swift_release();
          v20 = *(_QWORD *)(v22 + 8 * v9);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v20 - 1) & v20;
    v11 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    v12 = 16 * v11;
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v12);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    a2(v14, v15, v17, v18);
    swift_unknownObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v21 = v19 + 4;
  if (v21 >= v7)
    return swift_release();
  v20 = *(_QWORD *)(v22 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v7)
      return swift_release();
    v20 = *(_QWORD *)(v22 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized ConversationManagerClient.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t ObjectType;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a4;
  v37 = a1;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v35 = a3;
  if (v17)
  {
    v18 = swift_slowAlloc();
    v33 = a5;
    v19 = v18;
    v32 = swift_slowAlloc();
    v39 = v32;
    *(_DWORD *)v19 = 136315394;
    swift_bridgeObjectRetain();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a2, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    v34 = a6;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v39);
    a6 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_1ACCCC000, v15, v16, "Requesting endpoint for identifier=%s activitySessionUUID=%s", (uint8_t *)v19, 0x16u);
    v22 = v32;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    v23 = v19;
    a5 = v33;
    MEMORY[0x1AF44981C](v23, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  v24 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a5) + 0x140);
  v25 = swift_bridgeObjectRetain();
  v26 = v24(v25);
  if (*(_QWORD *)(v26 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(v37, a2), (v28 & 1) != 0))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 16 * v27 + 8);
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ObjectType = swift_getObjectType();
    v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 16))(v35, v36, ObjectType, v29);
    (*(void (**)(uint64_t, void *))(a6 + 16))(a6, v31);
    swift_unknownObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
  }
}

uint64_t objectdestroy_37Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(a1, a2, *(char **)(v2 + 16), v2 + v6, *v7, v7[1]);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(void **a1)
{
  partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(a1, (SEL *)&selRef_kickMember_conversationUUID_);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(void **a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Class isa;

  v2 = *(unsigned __int8 *)(v1 + 16);
  v3 = *a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setDownlinkMuted_forRemoteParticipantsInConversationWithUUID_, v2, isa);

}

uint64_t sub_1ACD3B4BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(a1, *(_BYTE *)(v1 + 16), v1 + ((v3 + 17) & ~v3));
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:)(void **a1)
{
  partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(a1, (SEL *)&selRef_buzzMember_conversationUUID_);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(void **a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  Class isa;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, *a2, v4, isa);

}

uint64_t sub_1ACD3B5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>)
                                      - 8)
                          + 80);
  return closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), v0 + v2, v0 + ((v3 + v4) & ~v4));
}

void partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1ACD3B720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void *a1)
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  return closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_1ACD3B7DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  return CheckedContinuation.resume(returning:)();
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1ACD3B8C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(char a1, void *a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, a2, *(uint64_t (**)(_QWORD, _QWORD))(v2 + 16));
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void **a1)
{
  closure #1 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(a1);
}

uint64_t sub_1ACD3B910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(void (**)(uint64_t *))(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(id *a1)
{
  return closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(a1) & 1;
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(uint64_t a1)
{
  return closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(a1);
}

void partial apply for closure #2 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = (id)MEMORY[0x1AF4480F4]();
  objc_msgSend(v1, sel_registerIdentifierForCustomEndpoint_, v2);

}

BOOL _cp_sandbox_check()
{
  return sandbox_check() == 0;
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void **a1)
{
  closure #1 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a1);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACD3BB0C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACD3BB30()
{
  return objectdestroy_84Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1ACD3BB3C()
{
  return objectdestroy_84Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_84Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(void **a1)
{
  partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(a1, (SEL *)&selRef_unregisterIdentifierForCustomEndpoint_);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(void **a1)
{
  partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(a1, (SEL *)&selRef_registerIdentifierForCustomEndpoint_);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(void **a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = *a1;
  v7 = (void *)MEMORY[0x1AF4480F4](v5, v4);
  objc_msgSend(v6, *a2, v7);

}

uint64_t PowerLogReporter.streamPayload.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PowerLogReporter.streamPayload.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PowerLogReporter.streamPayload.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t PowerLogReporter.streamID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of Any?(v1 + 24, a1);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PowerLogReporter.streamID.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  outlined assign with take of Any?(a1, v1 + 24);
  return swift_endAccess();
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*PowerLogReporter.streamID.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PowerLogReporter.category.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PowerLogReporter.category.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PowerLogReporter.category.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PowerLogReporter.subsystem.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PowerLogReporter.subsystem.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PowerLogReporter.subsystem.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PowerLogReporter.__allocating_init(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  PowerLogReporter.init(subsystem:category:)(a1, a2, a3, a4);
  return v8;
}

uint64_t PowerLogReporter.init(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;

  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v4 + 56) = a3;
  *(_QWORD *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 72) = a1;
  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 64) = a4;
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 72);
  v11 = *(_QWORD *)(v4 + 80);
  swift_bridgeObjectRetain();
  v12 = (void *)MEMORY[0x1AF4480F4](v10, v11);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 56);
  v14 = *(_QWORD *)(v4 + 64);
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x1AF4480F4](v13, v14);
  swift_bridgeObjectRelease();
  v16 = PPSCreateTelemetryIdentifier();

  if (v16)
  {
    *((_QWORD *)&v19 + 1) = MEMORY[0x1E0DEC548];
    *(_QWORD *)&v18 = v16;
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)&v18, v4 + 24);
  swift_endAccess();
  return v4;
}

Swift::OpaquePointer_optional __swiftcall PowerLogReporter.report(withStreamPayload:)(Swift::OpaquePointer withStreamPayload)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  Class isa;
  uint64_t v6;
  Swift::Bool v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  Swift::OpaquePointer_optional result;

  (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v1 + 136))(&v13, withStreamPayload._rawValue);
  if (v14)
  {
    outlined init with take of Any(&v13, v15);
    outlined init with copy of Any((uint64_t)v15, (uint64_t)&v13);
    v2 = swift_dynamicCast();
    v3 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 112);
    v4 = ((uint64_t (*)(uint64_t))v3)(v2);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v4);
    swift_bridgeObjectRelease();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    PPSSendTelemetry();

    v6 = v3();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v13);
    if (one-time initialization token for default != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1ACCCC000, v9, v10, "Could not unwrap streamID of current activity", v11, 2u);
      MEMORY[0x1AF44981C](v11, -1, -1);
    }

    v6 = 0;
  }
  v12 = (void *)v6;
  result.value._rawValue = v12;
  result.is_nil = v7;
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PowerLogReporter.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PowerLogReporter.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PowerReportingProcotol.streamID.getter in conformance PowerLogReporter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t protocol witness for PowerReportingProcotol.streamID.setter in conformance PowerLogReporter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t (*protocol witness for PowerReportingProcotol.streamID.modify in conformance PowerLogReporter(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 152))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PowerReportingProcotol.category.getter in conformance PowerLogReporter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t protocol witness for PowerReportingProcotol.category.setter in conformance PowerLogReporter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t (*protocol witness for PowerReportingProcotol.category.modify in conformance PowerLogReporter(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 176))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t (*protocol witness for PowerReportingProcotol.subsystem.modify in conformance PowerLogReporter(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 200))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PowerReportingProcotol.streamPayload.getter in conformance PowerLogReporter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t protocol witness for PowerReportingProcotol.streamPayload.setter in conformance PowerLogReporter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t (*protocol witness for PowerReportingProcotol.streamPayload.modify in conformance PowerLogReporter(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 128))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PowerReportingProcotol.init(subsystem:category:) in conformance PowerLogReporter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 208))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for PowerReportingProcotol.report(withStreamPayload:) in conformance PowerLogReporter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t sub_1ACD3C72C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD3C75C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 120);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD3C78C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
}

uint64_t sub_1ACD3C7B4(uint64_t a1, uint64_t a2)
{
  _BYTE v4[32];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 144))(v4);
}

uint64_t sub_1ACD3C7F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACD3C824(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 168);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1ACD3C868@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACD3C898(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 192);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t dispatch thunk of PowerReportingProcotol.streamID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamID.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamID.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PowerReportingProcotol.category.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PowerReportingProcotol.category.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PowerReportingProcotol.category.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PowerReportingProcotol.subsystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PowerReportingProcotol.subsystem.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of PowerReportingProcotol.subsystem.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamPayload.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamPayload.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamPayload.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of PowerReportingProcotol.init(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

uint64_t dispatch thunk of PowerReportingProcotol.report(withStreamPayload:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t type metadata accessor for PowerLogReporter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PowerLogReporter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PowerLogReporter.streamPayload.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PowerLogReporter.streamPayload.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PowerLogReporter.streamPayload.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PowerLogReporter.streamID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PowerLogReporter.streamID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PowerLogReporter.streamID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PowerLogReporter.category.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PowerLogReporter.category.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PowerLogReporter.category.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PowerLogReporter.subsystem.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PowerLogReporter.subsystem.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PowerLogReporter.subsystem.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PowerLogReporter.__allocating_init(subsystem:category:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PowerLogReporter.report(withStreamPayload:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t DatagramClient.doCreateChannelGroup(topic:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  NSObject *secure_udp;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  Class isa;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t (*v28)();
  uint64_t v29;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  if ((*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 + 40);
    v28 = destructiveProjectEnumData for ActivitySession.Errors;
    v29 = 0;
    v24 = MEMORY[0x1E0C809B0];
    v9 = MEMORY[0x1E0C809B0];
    v25 = 1107296256;
    v26 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
    v27 = &block_descriptor_12_0;
    v10 = _Block_copy(&v24);
    v28 = destructiveProjectEnumData for ActivitySession.Errors;
    v29 = 0;
    v24 = v9;
    v25 = 1107296256;
    v26 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
    v27 = &block_descriptor_15;
    v11 = _Block_copy(&v24);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v5, v8);
    secure_udp = nw_parameters_create_secure_udp(v10, v11);
    _Block_release(v11);
    _Block_release(v10);
    v13 = nw_parameters_copy_default_protocol_stack(secure_udp);
    nw_protocol_stack_clear_application_protocols(v13);
    v14 = (void *)objc_opt_self();
    objc_msgSend(v14, sel_augmentConnectionGroupNetworkParameters_, secure_udp);
    v15 = (void *)MEMORY[0x1AF4480F4](v3, v4);
    swift_bridgeObjectRelease();
    v16 = (void *)MEMORY[0x1AF4480F4](a1, a2);
    if (v8 >> 60 == 15)
      v17 = 0;
    else
      v17 = v5;
    if (v8 >> 60 == 15)
      v18 = 0xC000000000000000;
    else
      v18 = v8;
    outlined copy of Data?(v5, v8);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v17, v18);
    v20 = objc_msgSend(v14, sel_createGroupDescriptorForSessionIDAlias_topic_salt_, v15, v16, isa);

    nw_connection_group_create(v20, secure_udp);
    v28 = closure #3 in DatagramClient.doCreateChannelGroup(topic:);
    v29 = 0;
    v24 = MEMORY[0x1E0C809B0];
    v25 = 1107296256;
    v26 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_endpoint, @unowned nw_group_membership_changed_type_t, @unowned Bool) -> (@unowned Bool);
    v27 = &block_descriptor_18_0;
    v21 = _Block_copy(&v24);
    nw_connection_group_set_membership_changed_handler();
    _Block_release(v21);
    type metadata accessor for NWConnectionGroup();
    v22 = NWConnectionGroup.__allocating_init(_:)();
    outlined consume of Data?(v5, v8);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    type metadata accessor for NWConnectionGroup();
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_retain();
    return NWConnectionGroup.init(with:using:)();
  }
  return v22;
}

uint64_t closure #3 in DatagramClient.doCreateChannelGroup(topic:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if (one-time initialization token for log != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)log);
  swift_unknownObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = swift_slowAlloc();
    v4 = swift_slowAlloc();
    v12 = v4;
    *(_DWORD *)v3 = 136315650;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_nw_endpoint);
    v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    type metadata accessor for nw_group_membership_changed_type_t(0);
    v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 22) = 2080;
    v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Set the membership change handler %s %s %s", (uint8_t *)v3, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v4, -1, -1);
    MEMORY[0x1AF44981C](v3, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  return 0;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_endpoint, @unowned nw_group_membership_changed_type_t, @unowned Bool) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7 = swift_unknownObjectRetain();
  LOBYTE(a4) = v6(v7, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t ObjectType;

  v6 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
    __break(1u);
  }
  else
  {
    v11 = result;
    ObjectType = swift_getObjectType();
    return specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(a2, v6, a5, a6, v11, ObjectType, a3);
  }
  return result;
}

uint64_t DatagramClient.createChannelGroup(channelStream:attempt:promise:)(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(a1, a3, a4, a5, v5, ObjectType, a2);
}

void closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t Strong;
  void *v54;
  id v55;
  uint64_t ObjectType;
  uint64_t (*v57)(void);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  unint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(char *, uint64_t);
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  NSObject *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  uint64_t v95;
  NSObject *v96;
  int v97;
  uint64_t v98;
  char *v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  void (*v110)(char *, uint64_t);
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  NSObject *v121;
  os_log_type_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  NSObject *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  int v134;
  NSObject *v135;
  os_log_type_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  os_log_type_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t, uint64_t);
  NSObject *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  void (*v166)(uint64_t);
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD v175[2];
  char v176;
  char *v177;

  v166 = a8;
  v167 = a5;
  v164 = (char *)a7;
  v171 = a6;
  v172 = a3;
  v173 = a4;
  v174 = a1;
  v10 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1E0C80A78](v10);
  v162 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v155 = (uint64_t)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v158 = ((char *)&v143 - v16);
  v17 = MEMORY[0x1E0C80A78](v15);
  v148 = (uint64_t)&v143 - v18;
  MEMORY[0x1E0C80A78](v17);
  v149 = (char *)&v143 - v19;
  v165 = type metadata accessor for NWError();
  v163 = *(_QWORD *)(v165 - 8);
  v20 = MEMORY[0x1E0C80A78](v165);
  v170 = (char *)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v168 = (char *)&v143 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v150 = (char *)&v143 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v151 = (char *)&v143 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v159 = (char *)&v143 - v29;
  MEMORY[0x1E0C80A78](v28);
  v160 = (char *)&v143 - v30;
  v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
  MEMORY[0x1E0C80A78](v146);
  v147 = (uint64_t *)((char *)&v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnectionGroup.State?);
  v33 = MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v143 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v143 - v36;
  v38 = type metadata accessor for NWConnectionGroup.State();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v169 = (char *)&v143 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v40);
  v154 = (char *)&v143 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v46 = (char *)&v143 - v45;
  MEMORY[0x1E0C80A78](v44);
  v48 = (char *)&v143 - v47;
  v49 = type metadata accessor for DispatchPredicate();
  v50 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v52 = (uint64_t *)((char *)&v143 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return;
  v161 = Strong;
  v54 = *(void **)(Strong + 80);
  *v52 = v54;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v50 + 104))(v52, *MEMORY[0x1E0DEF740], v49);
  v55 = v54;
  LOBYTE(v54) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v52, v49);
  if ((v54 & 1) != 0)
  {
    ObjectType = swift_getObjectType();
    v57 = *(uint64_t (**)(void))(v173 + 16);
    v152 = ObjectType;
    v145 = v57();
    if (one-time initialization token for log == -1)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_4:
  v153 = a9;
  v58 = type metadata accessor for Logger();
  v59 = __swift_project_value_buffer(v58, (uint64_t)log);
  v60 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v60(v48, v174, v38);
  v61 = v171;
  swift_bridgeObjectRetain_n();
  v156 = v59;
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.default.getter();
  v64 = os_log_type_enabled(v62, v63);
  v157 = v60;
  if (v64)
  {
    v65 = swift_slowAlloc();
    v144 = swift_slowAlloc();
    *(_QWORD *)&v175[0] = v144;
    *(_DWORD *)v65 = 136315650;
    v60(v37, (uint64_t)v48, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v37, 0, 1, v38);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v37, (uint64_t)v35, &demangling cache variable for type metadata for NWConnectionGroup.State?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v35, 1, v38) == 1)
    {
      v66 = 7104878;
      v67 = 0xE300000000000000;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v46, v35, v38);
      v60(v154, (uint64_t)v46, v38);
      v66 = String.init<A>(reflecting:)();
      v67 = v70;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v46, v38);
    }
    outlined destroy of UUID?((uint64_t)v37, &demangling cache variable for type metadata for NWConnectionGroup.State?);
    v177 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v48, v38);
    *(_WORD *)(v65 + 12) = 2080;
    __asm { BR              X10 }
  }
  v68 = *(void (**)(char *, uint64_t))(v39 + 8);
  v68(v48, v38);

  swift_bridgeObjectRelease_n();
  v69 = v61;
  v71 = a10;
  v72 = v169;
  v157(v169, v174, v38);
  v73 = (*(uint64_t (**)(char *, uint64_t))(v39 + 88))(v72, v38);
  v74 = v170;
  if (v73 == *MEMORY[0x1E0CCE968])
  {
    (*(void (**)(char *, uint64_t))(v39 + 96))(v72, v38);
    v75 = v163;
    v76 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
    v77 = v168;
    v78 = v165;
    v76(v168, v72, v165);
    v79 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    v79(v74, v77, v78);
    swift_bridgeObjectRetain_n();
    v80 = Logger.logObject.getter();
    v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, (os_log_type_t)v81))
    {
      LODWORD(v169) = v81;
      v174 = a10;
      v82 = swift_slowAlloc();
      v171 = swift_slowAlloc();
      *(_QWORD *)&v175[0] = v171;
      *(_DWORD *)v82 = 136315394;
      v83 = (uint64_t)v158;
      v79((char *)v158, v74, v78);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v83, 0, 1, v78);
      v84 = v83;
      v85 = v155;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v84, v155, &demangling cache variable for type metadata for NWError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v85, 1, v78) == 1)
      {
        v86 = 7104878;
        v87 = 0xE300000000000000;
      }
      else
      {
        v115 = v151;
        v76(v151, (char *)v85, v78);
        v79(v150, v115, v78);
        v86 = String.init<A>(reflecting:)();
        v87 = v116;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v115, v78);
      }
      outlined destroy of UUID?((uint64_t)v158, &demangling cache variable for type metadata for NWError?);
      v177 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, (uint64_t *)v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v110 = *(void (**)(char *, uint64_t))(v75 + 8);
      v110(v170, v78);
      *(_WORD *)(v82 + 12) = 2080;
      swift_bridgeObjectRetain();
      v177 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v61, (uint64_t *)v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v80, (os_log_type_t)v169, "NWConnectionGroup in waiting state, error: %s, topic=%s", (uint8_t *)v82, 0x16u);
      v117 = v171;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v117, -1, -1);
      MEMORY[0x1AF44981C](v82, -1, -1);

    }
    else
    {
      v109 = v74;
      v110 = *(void (**)(char *, uint64_t))(v75 + 8);
      v110(v109, v78);

      swift_bridgeObjectRelease_n();
    }
    v118 = (uint64_t)v162;
    v119 = v168;
    v79(v162, v168, v78);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v118, 0, 2, v78);
    specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v118, v172, (uint64_t)v164, v166, v153, v161, v152, v173);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v118, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
    NWConnectionGroup.cancel()();
    swift_release();
    v110(v119, v78);
  }
  else
  {
    v88 = v73;
    if (v73 != *MEMORY[0x1E0CCE960])
    {
      if (v73 == *MEMORY[0x1E0CCE958])
      {
        swift_bridgeObjectRetain_n();
        v111 = Logger.logObject.getter();
        v112 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v111, v112))
        {
          v113 = (uint8_t *)swift_slowAlloc();
          v114 = swift_slowAlloc();
          *(_QWORD *)&v175[0] = v114;
          *(_DWORD *)v113 = 136315138;
          swift_bridgeObjectRetain();
          v177 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v69, (uint64_t *)v175);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v111, v112, "NWConnectionGroup waiting to be started, topic=%s", v113, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v114, -1, -1);
          MEMORY[0x1AF44981C](v113, -1, -1);
          swift_release();

        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n();
        }
        return;
      }
      if (v73 == *MEMORY[0x1E0CCE950])
      {
        swift_bridgeObjectRetain_n();
        v121 = Logger.logObject.getter();
        v122 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v121, v122))
        {
          v123 = swift_slowAlloc();
          v124 = swift_slowAlloc();
          *(_QWORD *)&v175[0] = v124;
          *(_DWORD *)v123 = 134218242;
          v177 = v164;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v123 + 12) = 2080;
          swift_bridgeObjectRetain();
          v177 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v69, (uint64_t *)v175);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v121, v122, "NWConnectionGroup in ready state, channel attempt #%ld succeeded, topic=%s", (uint8_t *)v123, 0x16u);
          swift_arrayDestroy();
          v125 = v124;
          v71 = a10;
          MEMORY[0x1AF44981C](v125, -1, -1);
          MEMORY[0x1AF44981C](v123, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(uint64_t, uint64_t))(v173 + 24))(2, v152);
        v139 = (uint64_t)v147;
        *v147 = v71;
        swift_storeEnumTagMultiPayload();
        swift_retain();
      }
      else
      {
        v134 = *MEMORY[0x1E0CCE970];
        swift_bridgeObjectRetain_n();
        v135 = Logger.logObject.getter();
        if (v88 != v134)
        {
          v140 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v135, v140))
          {
            v141 = (uint8_t *)swift_slowAlloc();
            v142 = swift_slowAlloc();
            *(_QWORD *)&v175[0] = v142;
            *(_DWORD *)v141 = 136315138;
            swift_bridgeObjectRetain();
            v177 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v69, (uint64_t *)v175);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1ACCCC000, v135, v140, "NWConnectionGroup in unknown state, topic=%s", v141, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v142, -1, -1);
            MEMORY[0x1AF44981C](v141, -1, -1);
            swift_release();

          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release();
          }
          v68(v169, v38);
          return;
        }
        v136 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v135, v136))
        {
          v137 = (uint8_t *)swift_slowAlloc();
          v138 = swift_slowAlloc();
          *(_QWORD *)&v175[0] = v138;
          *(_DWORD *)v137 = 136315138;
          swift_bridgeObjectRetain();
          v177 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v69, (uint64_t *)v175);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v135, v136, "NWConnectionGroup in cancelled state, topic=%s", v137, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v138, -1, -1);
          MEMORY[0x1AF44981C](v137, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v139 = (uint64_t)v147;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v163 + 56))(v147, 2, 2, v165);
        swift_storeEnumTagMultiPayload();
      }
      v166(v139);
      swift_release();
      outlined destroy of UUID?(v139, &demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
      return;
    }
    v174 = a10;
    (*(void (**)(char *, uint64_t))(v39 + 96))(v72, v38);
    v89 = v163;
    v90 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
    v91 = v160;
    v92 = v165;
    v90(v160, v72, v165);
    v93 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
    v94 = v159;
    v93(v159, v91, v92);
    swift_bridgeObjectRetain_n();
    v95 = v161;
    swift_retain_n();
    v96 = Logger.logObject.getter();
    v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, (os_log_type_t)v97))
    {
      LODWORD(v169) = v97;
      v158 = v96;
      v98 = swift_slowAlloc();
      v168 = (char *)swift_slowAlloc();
      v177 = v168;
      *(_DWORD *)v98 = 136315650;
      v99 = (char *)v93;
      v100 = *(_BYTE *)(v95 + 48);
      v101 = *(_OWORD *)(v95 + 32);
      v175[0] = *(_OWORD *)(v95 + 16);
      v175[1] = v101;
      v176 = v100;
      v102 = DatagramEndpoint.description.getter();
      *(_QWORD *)&v175[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, (uint64_t *)&v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v98 + 12) = 2080;
      v104 = (uint64_t)v149;
      v93(v149, v159, v92);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56))(v104, 0, 1, v92);
      v105 = v148;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v104, v148, &demangling cache variable for type metadata for NWError?);
      v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v105, 1, v92);
      v170 = v99;
      if (v106 == 1)
      {
        v107 = 7104878;
        v108 = 0xE300000000000000;
      }
      else
      {
        v126 = v151;
        v90(v151, (char *)v105, v92);
        ((void (*)(char *, char *, uint64_t))v99)(v150, v126, v92);
        v107 = String.init<A>(reflecting:)();
        v108 = v127;
        v128 = v126;
        v104 = (uint64_t)v149;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v128, v92);
      }
      v129 = v158;
      outlined destroy of UUID?(v104, &demangling cache variable for type metadata for NWError?);
      *(_QWORD *)&v175[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, (uint64_t *)&v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v120 = *(void (**)(char *, uint64_t))(v89 + 8);
      v120(v159, v92);
      *(_WORD *)(v98 + 22) = 2080;
      v130 = v171;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v175[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v130, (uint64_t *)&v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v129, (os_log_type_t)v169, "NWConnectionGroup to %s failed, error: %s, topic=%s", (uint8_t *)v98, 0x20u);
      v131 = v168;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v131, -1, -1);
      MEMORY[0x1AF44981C](v98, -1, -1);

      v95 = v161;
      v93 = (void (*)(char *, char *, uint64_t))v170;
    }
    else
    {
      swift_release_n();
      v120 = *(void (**)(char *, uint64_t))(v89 + 8);
      v120(v94, v92);

      swift_bridgeObjectRelease_n();
    }
    v132 = (uint64_t)v162;
    v133 = v160;
    v93(v162, v160, v92);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56))(v132, 0, 2, v92);
    specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v132, v172, (uint64_t)v164, v166, v153, v95, v152, v173);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v132, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
    NWConnectionGroup.cancel()();
    swift_release();
    v120(v133, v92);
  }
}

uint64_t specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;

  v59 = a2;
  v13 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(a5 + 80);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0DEF740], v15);
  v56 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    v58 = a3;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a6, a7);
    a3 = v20;
    v55 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
    if (one-time initialization token for log == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v21 = type metadata accessor for Logger();
  v22 = __swift_project_value_buffer(v21, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v53 = v22;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v50 = v16;
    v51 = a1;
    v57 = a4;
    v52 = a6;
    v25 = swift_slowAlloc();
    v63 = swift_slowAlloc();
    *(_DWORD *)v25 = 136315906;
    v26 = *(_BYTE *)(a5 + 48);
    v27 = *(_OWORD *)(a5 + 32);
    v60 = *(_OWORD *)(a5 + 16);
    v61 = v27;
    v62 = v26;
    v28 = DatagramEndpoint.description.getter();
    *(_QWORD *)&v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2048;
    *(_QWORD *)&v60 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 22) = 2080;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n();
  swift_release_n();
  v30 = DatagramClient.doCreateChannelGroup(topic:)(v16, (uint64_t)a3);
  if (v30)
  {
    v31 = v30;
    v32 = v16;
    v33 = swift_allocObject();
    swift_weakInit();
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = v33;
    v34[3] = a1;
    v34[4] = a7;
    v34[5] = v32;
    v35 = v59;
    v34[6] = a3;
    v34[7] = v35;
    v34[8] = v58;
    v34[9] = a4;
    v34[10] = v31;
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:));
    NWConnectionGroup.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = a1;
    *(_QWORD *)(v36 + 24) = a7;
    swift_unknownObjectRetain();
    NWConnectionGroup.setReceiveHandler(maximumMessageSize:rejectOversizedMessages:handler:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 24))(1, a6, a7);
    NWConnectionGroup.start(queue:)();
    return swift_release();
  }
  else
  {
    v57 = a4;
    swift_retain_n();
    swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc();
      v41 = swift_slowAlloc();
      v52 = a6;
      v42 = v41;
      v63 = v41;
      *(_DWORD *)v40 = 136315394;
      v50 = v16;
      v51 = a1;
      v43 = *(_BYTE *)(a5 + 48);
      v44 = *(_OWORD *)(a5 + 32);
      v60 = *(_OWORD *)(a5 + 16);
      v61 = v44;
      v62 = v43;
      v45 = DatagramEndpoint.description.getter();
      *(_QWORD *)&v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, (unint64_t)a3, &v63);
      a1 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v38, v39, "Failed to create NWConnectionGroup for datagram-channel to %s, topic=%s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      v47 = v42;
      a6 = v52;
      MEMORY[0x1AF44981C](v47, -1, -1);
      MEMORY[0x1AF44981C](v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    v48 = (uint64_t)v54;
    v49 = type metadata accessor for NWError();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 2, v49);
    specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v48, a1, v59, v58, v57, a5, a6, a7);
    return outlined destroy of ActivitySession.DomainAssertionWrapper(v48, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
  }
}

void specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  unint64_t v88;
  os_log_type_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 aBlock;
  __int128 v170;
  uint64_t (*v171)();
  _QWORD *v172;
  uint64_t v173;

  v163 = a4;
  v164 = a5;
  v167 = a3;
  v168 = a1;
  v148 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1E0C80A78](v148);
  v149 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for NWError();
  v146 = *(_QWORD *)(v147 - 8);
  MEMORY[0x1E0C80A78](v147);
  v134 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v158 = *(_QWORD *)(v14 - 8);
  v159 = v14;
  MEMORY[0x1E0C80A78](v14);
  v157 = (char *)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v155 = *(_QWORD *)(v16 - 8);
  v156 = v16;
  MEMORY[0x1E0C80A78](v16);
  v154 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for DispatchTime();
  v151 = *(_QWORD *)(v153 - 8);
  v18 = MEMORY[0x1E0C80A78](v153);
  v150 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v152 = (char *)&v133 - v20;
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
  MEMORY[0x1E0C80A78](v141);
  v142 = (uint64_t)&v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v135 = (uint64_t)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v138 = (uint64_t)&v133 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v136 = (uint64_t)&v133 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v139 = (uint64_t)&v133 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v133 - v32;
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v133 - v34;
  v36 = type metadata accessor for DatagramChannelConnectError();
  v161 = *(_QWORD *)(v36 - 8);
  v162 = v36;
  v37 = MEMORY[0x1E0C80A78](v36);
  v140 = (uint64_t)&v133 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v143 = (uint64_t)&v133 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v144 = (uint64_t)&v133 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v133 - v44;
  v46 = MEMORY[0x1E0C80A78](v43);
  v137 = (uint64_t *)((char *)&v133 - v47);
  MEMORY[0x1E0C80A78](v46);
  v160 = (uint64_t)&v133 - v48;
  v49 = type metadata accessor for DispatchPredicate();
  v50 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v52 = (uint64_t *)((char *)&v133 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  v166 = a6;
  v53 = *(void **)(a6 + 80);
  *v52 = v53;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v50 + 104))(v52, *MEMORY[0x1E0DEF740], v49);
  v145 = v53;
  v54 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v52, v49);
  if ((v54 & 1) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  v165 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  v54 = v55;
  v56 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 16))(a7, a8);
  v52 = a2;
  if (v56 < 2u)
  {
    v138 = a8;
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      v57 = type metadata accessor for Logger();
      v58 = __swift_project_value_buffer(v57, (uint64_t)log);
      outlined init with copy of DatagramChannelConnectError(v168, (uint64_t)v45);
      swift_bridgeObjectRetain_n();
      v160 = v58;
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v135 = v54;
        v137 = v52;
        v61 = swift_slowAlloc();
        v62 = swift_slowAlloc();
        *(_QWORD *)&aBlock = v62;
        *(_DWORD *)v61 = 134218498;
        v173 = v167;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v61 + 12) = 2080;
        outlined init with copy of DatagramChannelConnectError((uint64_t)v45, (uint64_t)v35);
        v63 = v161;
        v64 = v162;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v35, 0, 1, v162);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v35, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v33, 1, v64) == 1)
        {
          v65 = 7104878;
          v66 = 0xE300000000000000;
        }
        else
        {
          v100 = v144;
          outlined init with take of DatagramChannelConnectError((uint64_t)v33, v144);
          outlined init with copy of DatagramChannelConnectError(v100, v143);
          v65 = String.init<A>(reflecting:)();
          v66 = v101;
          outlined destroy of ActivitySession.DomainAssertionWrapper(v100, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
        }
        outlined destroy of UUID?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
        v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
        *(_WORD *)(v61 + 22) = 2080;
        v102 = v135;
        swift_bridgeObjectRetain();
        v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v102, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v59, v60, "Establishing channel attempt #%ld failed: %s, topic=%s", (uint8_t *)v61, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v62, -1, -1);
        v103 = v61;
        v54 = v102;
        MEMORY[0x1AF44981C](v103, -1, -1);

        v52 = v137;
      }
      else
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);

        swift_bridgeObjectRelease_n();
      }
      v104 = v166;
      if (*(_QWORD *)(v166 + 64) == v167)
      {
        swift_bridgeObjectRelease();
        v105 = v142;
        outlined init with copy of DatagramChannelConnectError(v168, v142);
        swift_storeEnumTagMultiPayload();
        v163(v105);
        outlined destroy of UUID?(v105, &demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        v106 = Logger.logObject.getter();
        v107 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v106, v107))
        {
          v108 = swift_slowAlloc();
          v109 = v54;
          v110 = swift_slowAlloc();
          *(_QWORD *)&aBlock = v110;
          *(_DWORD *)v108 = 134218242;
          v173 = *(_QWORD *)(v104 + 72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          *(_WORD *)(v108 + 12) = 2080;
          swift_bridgeObjectRetain();
          v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v109, (uint64_t *)&aBlock);
          v104 = v166;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v106, v107, "Will retry establishing channel in %f seconds, topic=%s", (uint8_t *)v108, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v110, -1, -1);
          MEMORY[0x1AF44981C](v108, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        v111 = v150;
        static DispatchTime.now()();
        v112 = v152;
        MEMORY[0x1AF447E84](v111, *(double *)(v104 + 72));
        v113 = *(void (**)(char *, uint64_t))(v151 + 8);
        v114 = v153;
        v113(v111, v153);
        v115 = (_QWORD *)swift_allocObject();
        v115[2] = v104;
        v115[3] = v52;
        v116 = v167;
        v115[4] = v138;
        v115[5] = v116;
        v117 = v164;
        v115[6] = v163;
        v115[7] = v117;
        v171 = partial apply for closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:);
        v172 = v115;
        *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v170 = thunk for @escaping @callee_guaranteed () -> ();
        *((_QWORD *)&v170 + 1) = &block_descriptor_3;
        v118 = _Block_copy(&aBlock);
        swift_retain();
        swift_unknownObjectRetain();
        swift_retain();
        v119 = v154;
        static DispatchQoS.unspecified.getter();
        v173 = MEMORY[0x1E0DEE9D8];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        v120 = v157;
        v121 = v159;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1AF4485D4](v112, v119, v120, v118);
        _Block_release(v118);
        (*(void (**)(char *, uint64_t))(v158 + 8))(v120, v121);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v119, v156);
        v113(v112, v114);
        swift_release();
      }
      return;
    }
LABEL_37:
    swift_once();
    goto LABEL_4;
  }
  if (v56 == 2)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)log);
    v68 = v160;
    outlined init with copy of DatagramChannelConnectError(v168, v160);
    v69 = v166;
    swift_retain_n();
    swift_bridgeObjectRetain();
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v167 = a7;
      v135 = v54;
      v138 = a8;
      v137 = v52;
      v72 = swift_slowAlloc();
      v73 = v69;
      v74 = swift_slowAlloc();
      v173 = v74;
      *(_DWORD *)v72 = 136315650;
      v75 = *(_BYTE *)(v73 + 48);
      v76 = *(_OWORD *)(v73 + 32);
      aBlock = *(_OWORD *)(v73 + 16);
      v170 = v76;
      LOBYTE(v171) = v75;
      v77 = DatagramEndpoint.description.getter();
      *(_QWORD *)&aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2080;
      v79 = v139;
      outlined init with copy of DatagramChannelConnectError(v68, v139);
      v81 = v161;
      v80 = v162;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(v79, 0, 1, v162);
      v82 = v136;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v79, v136, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v80) == 1)
      {
        v83 = 7104878;
        v84 = 0xE300000000000000;
      }
      else
      {
        v122 = v144;
        outlined init with take of DatagramChannelConnectError(v82, v144);
        outlined init with copy of DatagramChannelConnectError(v122, v143);
        v83 = String.init<A>(reflecting:)();
        v84 = v123;
        outlined destroy of ActivitySession.DomainAssertionWrapper(v122, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
      }
      outlined destroy of UUID?(v139, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      *(_QWORD *)&aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v160, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
      *(_WORD *)(v72 + 22) = 2080;
      v124 = v135;
      swift_bridgeObjectRetain();
      *(_QWORD *)&aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v124, &v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v70, v71, "DatagramClient %s disconnected due to network failure: %s, topic=%s", (uint8_t *)v72, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v74, -1, -1);
      MEMORY[0x1AF44981C](v72, -1, -1);

      a8 = v138;
      a7 = v167;
    }
    else
    {
      swift_release_n();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v68, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);

      swift_bridgeObjectRelease_n();
    }
    v125 = v147;
    v126 = v140;
    outlined init with copy of DatagramChannelConnectError(v168, v140);
    v127 = v146;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v126, 2, v125))
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v126, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
      v128 = (uint64_t)v149;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 64))(v128, a7, a8);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v128, type metadata accessor for DatagramChannelError);
    }
    else
    {
      v129 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v134, v126, v125);
      v130 = (uint64_t)v149;
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v149, v129, v125);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 64))(v130, a7, a8);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v130, type metadata accessor for DatagramChannelError);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v125);
    }
  }
  else
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)log);
    v86 = (uint64_t)v137;
    outlined init with copy of DatagramChannelConnectError(v168, (uint64_t)v137);
    swift_bridgeObjectRetain();
    v87 = Logger.logObject.getter();
    v88 = v54;
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v89))
    {
      v90 = v88;
      v91 = swift_slowAlloc();
      v92 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v92;
      *(_DWORD *)v91 = 136315394;
      v93 = v138;
      outlined init with copy of DatagramChannelConnectError(v86, v138);
      v94 = v161;
      v95 = v162;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(v93, 0, 1, v162);
      v96 = v93;
      v97 = v135;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v96, v135, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v97, 1, v95) == 1)
      {
        v98 = 7104878;
        v99 = 0xE300000000000000;
      }
      else
      {
        v131 = v144;
        outlined init with take of DatagramChannelConnectError(v97, v144);
        outlined init with copy of DatagramChannelConnectError(v131, v143);
        v98 = String.init<A>(reflecting:)();
        v99 = v132;
        outlined destroy of ActivitySession.DomainAssertionWrapper(v131, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
      }
      outlined destroy of UUID?(v138, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v86, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
      *(_WORD *)(v91 + 12) = 2080;
      swift_bridgeObjectRetain();
      v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v90, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v87, v89, "DatagramClient channel is in closed state, but channel-group got an unexpected failure: %s, topic=%s", (uint8_t *)v91, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v92, -1, -1);
      MEMORY[0x1AF44981C](v91, -1, -1);

    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v86, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t specialized static DatagramChannelConnectError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for NWError();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DatagramChannelConnectError, DatagramChannelConnectError));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of DatagramChannelConnectError(a1, (uint64_t)v14);
  outlined init with copy of DatagramChannelConnectError(a2, v15);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v17 = v16(v14, 2, v4);
  if (!v17)
  {
    outlined init with copy of DatagramChannelConnectError((uint64_t)v14, (uint64_t)v10);
    if (!v16((char *)v15, 2, v4))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      v18 = MEMORY[0x1AF447DE8](v10, v7);
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v7, v4);
      v19(v10, v4);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
      return v18 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_9;
  }
  if (v17 == 1)
  {
    if (v16((char *)v15, 2, v4) != 1)
      goto LABEL_9;
  }
  else if (v16((char *)v15, 2, v4) != 2)
  {
LABEL_9:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (DatagramChannelConnectError, DatagramChannelConnectError));
    v18 = 0;
    return v18 & 1;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
  v18 = 1;
  return v18 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for DatagramChannelConnectError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for NWError();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for DatagramChannelConnectError(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for NWError();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for DatagramChannelConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for DatagramChannelConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for DatagramChannelConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for DatagramChannelConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatagramChannelConnectError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD405E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for NWError();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DatagramChannelConnectError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD40640(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for NWError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for DatagramChannelConnectError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for DatagramChannelConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata accessor for DatagramChannelConnectError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DatagramChannelConnectError;
  if (!type metadata singleton initialization cache for DatagramChannelConnectError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for DatagramChannelConnectError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1ACD4079C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACD407C0()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(uint64_t))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_1ACD40838()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t ObjectType;

  v9 = *(_QWORD *)(v4 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a3, a4, ObjectType, v9);
}

uint64_t outlined init with copy of DatagramChannelConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatagramChannelConnectError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DatagramChannelConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatagramChannelConnectError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACD40954()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)()
{
  uint64_t *v0;

  return closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t (*a1)(void))
{
  return a1();
}

void static NSUserDefaults.classProtectedStorage(suiteName:)(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;

  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v18 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Enabling file protection class for conversation persistence storage %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v11 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  _CFPreferencesSetFileProtectionClass();
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v12 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
      _CFPreferencesSetBackupDisabled();
  }
  v15 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  swift_bridgeObjectRetain();
  v16 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v15, sel_initWithSuiteName_, v16);

  a3[3] = type metadata accessor for NSUserDefaults();
  a3[4] = &protocol witness table for NSUserDefaults;
  if (!v17)
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99EA0]), sel_init);

  *a3 = v17;
}

uint64_t NSUserDefaults.setCodable<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t result;
  Class isa;
  void *v8;
  uint64_t v9;
  unint64_t v10;

  result = specialized tryLog<A>(_:_:function:line:)((uint64_t (*)(void))partial apply for implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:));
  if (v10 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    v8 = (void *)MEMORY[0x1AF4480F4](a2, a3);
    objc_msgSend(v3, sel_setObject_forKey_, isa, v8);

    return outlined consume of Data?(v9, v10);
  }
  return result;
}

uint64_t implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v5 = v4;
  result = swift_release();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v5;
  }
  return result;
}

uint64_t NSUserDefaults.get<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v44;
  char *v45;
  uint64_t MetatypeMetadata;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  char v58[32];
  _OWORD v59[2];
  __int128 v60;
  uint64_t v61;
  _QWORD v62[4];
  uint64_t v63;
  _OWORD v64[2];
  __int128 v65;

  v7 = v6;
  v52 = a5;
  v55 = a1;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v54 = (char *)&v49 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v49 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v49 - v22;
  v24 = (void *)MEMORY[0x1AF4480F4](a2, a3);
  v25 = objc_msgSend(v7, sel_valueForKey_, v24);

  if (!v25)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a6, 1, 1, a4);
  v53 = a6;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v64, &v65);
  outlined init with copy of Any((uint64_t)&v65, (uint64_t)v64);
  v26 = swift_dynamicCast();
  v27 = *(_QWORD *)(a4 - 8);
  v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v57(v23, v26 ^ 1u, 1, a4);
  v28 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v28(v21, v23, v12);
  v50 = v27;
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v27) = v29(v21, 1, a4);
  v56 = *(void (**)(char *, uint64_t))(v13 + 8);
  v56(v21, v12);
  if ((_DWORD)v27 == 1)
  {
    outlined init with copy of Any((uint64_t)&v65, (uint64_t)v64);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v51 = v12;
      v31 = v62[0];
      v30 = v62[1];
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data._Representation(v31, v30);
      swift_release();
      v32 = v54;
      v57(v54, 0, 1, a4);
      v12 = v51;
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v23, v32, v51);
    }
  }
  v28(v16, v23, v12);
  if (v29(v16, 1, a4) == 1)
  {
    v54 = v23;
    v51 = v12;
    v33 = v12;
    v34 = (uint64_t (*)(char *, uint64_t))v56;
    v56(v16, v33);
    if (one-time initialization token for default != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Log.default);
    outlined init with copy of Any((uint64_t)&v65, (uint64_t)v64);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v63 = v39;
      *(_DWORD *)v38 = 136315394;
      outlined init with copy of Any((uint64_t)v64, (uint64_t)v62);
      outlined init with copy of Any?((uint64_t)v62, (uint64_t)&v60);
      if (v61)
      {
        outlined init with take of Any(&v60, v59);
        outlined init with copy of Any((uint64_t)v59, (uint64_t)v58);
        v40 = String.init<A>(reflecting:)();
        v42 = v41;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
      }
      else
      {
        v42 = 0xE300000000000000;
        v40 = 7104878;
      }
      outlined destroy of Any?((uint64_t)v62);
      v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
      *(_WORD *)(v38 + 12) = 2080;
      v62[0] = v55;
      MetatypeMetadata = swift_getMetatypeMetadata();
      v47 = >> prefix<A>(_:)((uint64_t)v62, MetatypeMetadata);
      v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v36, v37, "Failed to cast value: %s to type: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v39, -1, -1);
      MEMORY[0x1AF44981C](v38, -1, -1);

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v65);
      v45 = v54;
      v34 = (uint64_t (*)(char *, uint64_t))v56;
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v65);
      v45 = v54;
    }
    v57(v53, 1, 1, a4);
    return v34(v45, v51);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v65);
    v44 = v53;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v53, v16, a4);
    v57(v44, 0, 1, a4);
    return ((uint64_t (*)(char *, uint64_t))v56)(v23, v12);
  }
}

uint64_t NSUserDefaults.getGenericType<A>(_:forKey:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  int v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _OWORD v21[2];
  _OWORD v22[2];

  v5 = v4;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v21 - v12;
  v14 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  v15 = objc_msgSend(v5, sel_valueForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v21, v22);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  v16 = swift_dynamicCast();
  v17 = *(_QWORD *)(a3 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v16)
  {
    v18(v13, 0, 1, a3);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a4, v13, a3);
    v19 = 0;
  }
  else
  {
    v19 = 1;
    v18(v13, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(a4, v19, 1, a3);
}

uint64_t NSUserDefaults.getAll<A>(of:)()
{
  void *v0;
  id v1;
  uint64_t v2;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  v1 = objc_msgSend(v0, sel_dictionaryRepresentation);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v2 = Dictionary.compactMapValues<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in NSUserDefaults.getAll<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  int v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t result;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE v46[32];
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);

  v40 = a3;
  v41 = a5;
  v37 = a2;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v39 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v34 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v34 - v16;
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 - 8);
  v18 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v47 + 7);
  v18(a6, 1, 1, a4);
  v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v19(a6, v9);
  v42 = a1;
  outlined init with copy of Any(a1, (uint64_t)v46);
  v38 = MEMORY[0x1E0DEE9B8] + 8;
  v20 = swift_dynamicCast();
  v18((uint64_t)v17, v20 ^ 1u, 1, a4);
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v21(a6, v17, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, a6, v9);
  LODWORD(v17) = (*((uint64_t (**)(char *, uint64_t, uint64_t))v47 + 6))(v15, 1, a4);
  result = ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
  if ((_DWORD)v17 == 1)
  {
    v35 = v9;
    v36 = (uint64_t (*)(uint64_t, char *, uint64_t))v21;
    v23 = a6;
    v47 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18;
    v24 = v39;
    outlined init with copy of Any(v42, (uint64_t)v46);
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      v25 = v19;
      v26 = v44;
      v27 = v45;
      v28 = v43;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (v28)
      {
        outlined consume of Data._Representation(v26, v27);

        v29 = v23;
        v30 = v23;
        v31 = v35;
        v25(v30, v35);
        v32 = 1;
      }
      else
      {
        v29 = v23;
        v33 = v23;
        v31 = v35;
        v25(v33, v35);
        outlined consume of Data._Representation(v26, v27);
        v32 = 0;
      }
      v47(v24, v32, 1, a4);
      return v36(v29, v24, v31);
    }
  }
  return result;
}

uint64_t NSUserDefaults.getAllOfGenericType<A>(of:)()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_dictionaryRepresentation);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v2 = Dictionary.compactMapValues<A>(_:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in NSUserDefaults.getAllOfGenericType<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _BYTE v15[32];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v15[-v8];
  outlined init with copy of Any(a1, (uint64_t)v15);
  v10 = swift_dynamicCast();
  v11 = *(_QWORD *)(a2 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if ((v10 & 1) != 0)
  {
    v12((uint64_t)v9, 0, 1, a2);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a3, v9, a2);
    v13 = 0;
  }
  else
  {
    v13 = 1;
    v12((uint64_t)v9, 1, 1, a2);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v12(a3, v13, 1, a2);
}

Swift::Void __swiftcall NSUserDefaults.remove(key:)(Swift::String key)
{
  void *v1;
  id v2;

  v2 = (id)MEMORY[0x1AF4480F4](key._countAndFlagsBits, key._object);
  objc_msgSend(v1, sel_removeObjectForKey_, v2);

}

Swift::Void __swiftcall NSUserDefaults.commit()()
{
  void *v0;

  objc_msgSend(v0, sel_synchronize);
}

void protocol witness for ProtectedStorage.set(_:forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  @nonobjc NSUserDefaults.set(_:forKey:)(a1, a2, a3);
}

void @nonobjc NSUserDefaults.set(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[3];
  uint64_t v14;

  outlined init with copy of Any?(a1, (uint64_t)v13);
  v6 = v14;
  if (v14)
  {
    v7 = __swift_project_boxed_opaque_existential_1(v13, v14);
    v8 = *(_QWORD *)(v6 - 8);
    MEMORY[0x1E0C80A78](v7);
    v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  }
  else
  {
    v11 = 0;
  }
  v12 = (void *)MEMORY[0x1AF4480F4](a2, a3);
  objc_msgSend(v3, sel_setObject_forKey_, v11, v12);
  swift_unknownObjectRelease();

}

uint64_t protocol witness for ProtectedStorage.setCodable<A>(_:forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSUserDefaults.setCodable<A>(_:forKey:)(a1, a2, a3);
}

void protocol witness for ProtectedStorage.remove(key:) in conformance NSUserDefaults()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  v2 = (id)MEMORY[0x1AF4480F4]();
  objc_msgSend(v1, sel_removeObjectForKey_, v2);

}

uint64_t protocol witness for ProtectedStorage.get<A>(_:forKey:) in conformance NSUserDefaults@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return NSUserDefaults.get<A>(_:forKey:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for ProtectedStorage.getGenericType<A>(_:forKey:) in conformance NSUserDefaults@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return NSUserDefaults.getGenericType<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ProtectedStorage.getAll<A>(of:) in conformance NSUserDefaults()
{
  return NSUserDefaults.getAll<A>(of:)();
}

uint64_t protocol witness for ProtectedStorage.getAllOfGenericType<A>(of:) in conformance NSUserDefaults()
{
  return NSUserDefaults.getAllOfGenericType<A>(of:)();
}

id protocol witness for ProtectedStorage.commit() in conformance NSUserDefaults()
{
  id *v0;

  return objc_msgSend(*v0, sel_synchronize);
}

void protocol witness for static ProtectedStorage.classProtectedStorage(suiteName:) in conformance NSUserDefaults(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  static NSUserDefaults.classProtectedStorage(suiteName:)(a1, a2, a3);
}

unint64_t type metadata accessor for NSUserDefaults()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSUserDefaults;
  if (!lazy cache variable for type metadata for NSUserDefaults)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:)@<X0>(uint64_t *a1@<X8>)
{
  return implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:)(a1);
}

uint64_t partial apply for closure #1 in NSUserDefaults.getAll<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in NSUserDefaults.getAll<A>(of:)(a1, v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t partial apply for closure #1 in NSUserDefaults.getAllOfGenericType<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in NSUserDefaults.getAllOfGenericType<A>(of:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t dispatch thunk of ProtectedStorage.set(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ProtectedStorage.setCodable<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of ProtectedStorage.remove(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ProtectedStorage.get<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of ProtectedStorage.getGenericType<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of ProtectedStorage.getAll<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of ProtectedStorage.getAllOfGenericType<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ProtectedStorage.commit()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of static ProtectedStorage.classProtectedStorage(suiteName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t PresenceSessionCreationRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___CPPresenceSessionCreationRequest_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PresenceSessionCreationRequest.isCrossAccount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);
}

id PresenceSessionCreationRequest.__allocating_init(id:isCrossAccount:)(uint64_t a1, char a2)
{
  objc_class *v2;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  v5 = objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___CPPresenceSessionCreationRequest_id];
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  v5[OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount] = a2;
  v11.receiver = v5;
  v11.super_class = v2;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

id PresenceSessionCreationRequest.init(id:isCrossAccount:)(uint64_t a1, char a2)
{
  _BYTE *v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v5 = &v2[OBJC_IVAR___CPPresenceSessionCreationRequest_id];
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  v2[OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount] = a2;
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for PresenceSessionCreationRequest();
  v8 = objc_msgSendSuper2(&v10, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v8;
}

uint64_t type metadata accessor for PresenceSessionCreationRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PresenceSessionCreationRequest;
  if (!type metadata singleton initialization cache for PresenceSessionCreationRequest)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t PresenceSessionCreationRequest.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v6;
  _BYTE v7[24];
  uint64_t v8;

  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  type metadata accessor for PresenceSessionCreationRequest();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v4 = 0;
    return v4 & 1;
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {

    goto LABEL_7;
  }
  v2 = *(_BYTE *)(v1 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);
  v3 = *((_BYTE *)v6 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);

  v4 = v2 ^ v3 ^ 1;
  return v4 & 1;
}

uint64_t static PresenceSessionCreationRequest.supportsSecureCoding.getter()
{
  return 1;
}

id PresenceSessionCreationRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PresenceSessionCreationRequest.init(coder:)(a1);
}

id PresenceSessionCreationRequest.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  void *v20;
  unsigned __int8 v21;
  objc_class *v22;
  id v23;
  objc_super v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v25 - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSUUID();
  v13 = v1;
  v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v14)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    goto LABEL_6;
  }
  v15 = (void *)v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v6, 1, 1, v9);
  v17 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09E8]);
  MEMORY[0x1AF448AA8](v15, v6, v9, v17);

  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v6, 1, v9) == 1)
  {
LABEL_6:
    v16(v8, 1, 1, v9);
    goto LABEL_7;
  }
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v6, v9);
  v16(v8, 0, 1, v9);
  if (v18(v8, 1, v9) == 1)
  {
LABEL_7:

    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    type metadata accessor for PresenceSessionCreationRequest();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v19(v12, v8, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))((uint64_t)v13 + OBJC_IVAR___CPPresenceSessionCreationRequest_id, v12, v9);
  v20 = (void *)MEMORY[0x1AF4480F4](0x4173736F72437369, 0xEE00746E756F6363);
  v21 = objc_msgSend(a1, sel_decodeBoolForKey_, v20);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *((_BYTE *)v13 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount) = v21;

  v22 = (objc_class *)type metadata accessor for PresenceSessionCreationRequest();
  v25.receiver = v13;
  v25.super_class = v22;
  v23 = objc_msgSendSuper2(&v25, sel_init);

  return v23;
}

unint64_t type metadata accessor for NSUUID()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSUUID;
  if (!lazy cache variable for type metadata for NSUUID)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  }
  return result;
}

Swift::Void __swiftcall PresenceSessionCreationRequest.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = v1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x1AF4480F4](25705, 0xE200000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);

  v6 = *(unsigned __int8 *)(v2 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);
  v7 = (id)MEMORY[0x1AF4480F4](0x4173736F72437369, 0xEE00746E756F6363);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v6, v7);

}

uint64_t PresenceSessionCreationRequest.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  swift_getObjectType();
  v0._countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x203A666C657320;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 1029990688;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0xD000000000000010;
  v6._object = (void *)0x80000001ACF7F000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID();
    result = MEMORY[0x1AF44972C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id PresenceSessionCreationRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PresenceSessionCreationRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PresenceSessionCreationRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceSessionCreationRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for PresenceSessionCreationRequest()
{
  return type metadata accessor for PresenceSessionCreationRequest();
}

uint64_t type metadata completion function for PresenceSessionCreationRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PresenceSessionCreationRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PresenceSessionCreationRequest.__allocating_init(id:isCrossAccount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PresenceSessionCreationRequest.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of PresenceSessionCreationRequest.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t specialized BinaryInteger.bit(at:)(uint64_t a1, unsigned int a2)
{
  int v3;

  if (a1 < -32)
    return 0;
  if (a1 > 32)
    return 0;
  if (a1 < 0)
  {
    v3 = a2 << -(char)a1;
    if ((unint64_t)a1 <= 0xFFFFFFFFFFFFFFE0)
      LOBYTE(v3) = 0;
    return v3 & 1;
  }
  else
  {
    if ((unint64_t)a1 >= 0x20)
      return 0;
    return (a2 >> a1) & 1;
  }
}

Swift::Bool __swiftcall BinaryInteger.bit(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  char v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t AssociatedConformanceWitness;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  Swift::Int v54;

  v3 = v2;
  v4 = v1;
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v45 - v9;
  v11 = *(_QWORD *)(v4 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v47 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v45 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v45 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v45 - v20;
  v54 = at;
  v48 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1AF448CB8](&unk_1ACF5C518, 512, AssociatedTypeWitness);
  v50 = v10;
  v51 = v6;
  MEMORY[0x1AF448C10](v10, v4, v6);
  MEMORY[0x1AF448748](v19, v16, v4, v3);
  v46 = v11;
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v16, v4);
  v52 = v19;
  v53 = v22;
  v22(v19, v4);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v25 = AssociatedConformanceWitness;
    v26 = v50;
    v27 = v51;
    v28 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v45 = v21;
    v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v28 & 1) != 0)
    {
      if (v29 <= 64)
      {
        MEMORY[0x1AF448CB8](&unk_1ACF5B928, 256, AssociatedTypeWitness, v25);
        v30 = v52;
        MEMORY[0x1AF448C10](v26, v4, v27);
        v31 = v45;
        v32 = dispatch thunk of static Comparable.>= infix(_:_:)();
        v33 = v53;
        v53(v30, v4);
        v34 = v47;
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v47, v31, v4);
        v35 = (v32 & 1) != 0 && dispatch thunk of BinaryInteger._lowWord.getter() == 1;
        v33(v34, v4);
        v33(v31, v4);
        return v35 & 1;
      }
    }
    else if (v29 < 64)
    {
      v39 = v45;
      v23 = dispatch thunk of BinaryInteger._lowWord.getter();
      v24 = v39;
      goto LABEL_11;
    }
    v54 = 1;
    v40 = v52;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v41 = v45;
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v42 = v40;
    v43 = v53;
    v53(v42, v4);
    v43(v41, v4);
    return v35 & 1;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
    v23 = dispatch thunk of BinaryInteger._lowWord.getter();
    v24 = v21;
LABEL_11:
    v53(v24, v4);
    v35 = v23 == 1;
    return v35 & 1;
  }
  v54 = 1;
  v36 = v52;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37 = v36;
  v38 = v53;
  v53(v37, v4);
  v38(v21, v4);
  return v35 & 1;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

Swift::Void __swiftcall BinaryInteger.setBit(at:to:)(Swift::Int at, Swift::Bool to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t AssociatedConformanceWitness;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  Swift::Int v27;

  v25 = at;
  v4 = v3;
  v5 = v2;
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v24 - v10;
  v12 = *(_QWORD *)(v5 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v24 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1AF448CB8](&unk_1ACF5C518, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (to)
  {
    MEMORY[0x1AF448C10](v11, v5, v7);
    v27 = v25;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    v22 = *(void (**)(char *, uint64_t))(v12 + 8);
    v22(v18, v5);
    dispatch thunk of static BinaryInteger.|= infix(_:_:)();
    v22(v20, v5);
  }
  else
  {
    MEMORY[0x1AF448C10](v11, v5, v7);
    v27 = v25;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    v23 = *(void (**)(char *, uint64_t))(v12 + 8);
    v23(v15, v5);
    dispatch thunk of static BinaryInteger.~ prefix(_:)();
    v23(v18, v5);
    MEMORY[0x1AF448760](v26, v20, v5, v4);
    v23(v20, v5);
  }
}

Swift::Bool __swiftcall Bool.init(exactly:)(Swift::UInt64 exactly)
{
  return exactly == 1;
}

uint64_t FixedBitArray.words.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FixedBitArray.words.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t FixedBitArray.init(bitCapacity:)(uint64_t result)
{
  double v1;

  v1 = ceil((double)result * 0.03125);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
    return specialized Array.init(repeating:count:)(0, (uint64_t)v1);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t FixedBitArray.subscript.getter(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  int64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = (unint64_t)(2 * v2 - 0x1000000000000000) >> 61;
  if (v3 != 7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v2 = (16 * v2) & 0xFFFFFFFFFFFFFFE0;
  if (v2 <= a1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v2 = a1 + 31;
  if (a1 >= 0)
    v2 = a1;
  if (a1 < -31)
    goto LABEL_13;
  v3 = v2 >> 5;
  v2 = *(_QWORD *)(a2 + 16);
  if (v3 >= v2)
  {
LABEL_14:
    __break(1u);
    return ((_DWORD)v3 << -(char)v2) & 1;
  }
  LOBYTE(v2) = a1 - 32 * v3;
  v4 = a1 - 32 * v3 < 0;
  LODWORD(v3) = *(_DWORD *)(a2 + 4 * v3 + 32);
  if (!v4)
    return (v3 >> v2) & 1;
  return ((_DWORD)v3 << -(char)v2) & 1;
}

uint64_t key path getter for FixedBitArray.subscript(_:) : FixedBitArray@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 24);
  if (v5 >> 62)
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((2 * v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v6 = *a2;
  if (*a2 >= (uint64_t)(32 * (v5 >> 1)))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = v6 + 31;
  if (v6 >= 0)
    v7 = *a2;
  if (v6 < -31)
    goto LABEL_12;
  v8 = v7 >> 5;
  if (v8 < *(_QWORD *)(v4 + 16))
  {
    result = specialized BinaryInteger.bit(at:)(v6 - 32 * v8, *(_DWORD *)(v4 + 4 * v8 + 32));
    *a3 = result & 1;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t FixedBitArray.subscript.setter(char a1, uint64_t a2)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 24);
  if (v7 >> 62)
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v4 = a2;
  if ((uint64_t)((16 * v7) & 0xFFFFFFFFFFFFFFE0) <= a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v3 = a1;
  if (a2 >= 0)
    v5 = a2;
  else
    v5 = a2 + 31;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v4 >= -31)
      goto LABEL_9;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_23:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v6 = result;
  if (v4 < -31)
    goto LABEL_24;
LABEL_9:
  v9 = v5 >> 5;
  if (v5 >> 5 >= *(_QWORD *)(v6 + 16))
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v10 = v4 - 32 * v9;
  v11 = v6 + 32;
  if ((v3 & 1) != 0)
  {
    if (v10 >= 0x20)
      v12 = 0;
    else
      v12 = 1 << v10;
    v13 = *(_DWORD *)(v11 + 4 * v9) | v12;
  }
  else
  {
    if (v10 < 0x20)
      v14 = ~(1 << v10);
    else
      v14 = -1;
    v13 = *(_DWORD *)(v11 + 4 * v9) & v14;
  }
  *(_DWORD *)(v11 + 4 * v9) = v13;
  *v2 = v6;
  return result;
}

Swift::tuple_word_Int_bit_Int __swiftcall FixedBitArray.index(for:)(Swift::Int a1)
{
  Swift::Int v1;
  unint64_t v2;
  Swift::Int v3;
  Swift::tuple_word_Int_bit_Int result;

  v2 = *(_QWORD *)(v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v2 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)((16 * v2) & 0xFFFFFFFFFFFFFFE0) <= a1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = a1 + 31;
  v1 = a1 - (v3 & 0xFFFFFFFFFFFFFFE0);
  a1 = v3 >> 5;
LABEL_11:
  result.bit = v1;
  result.word = a1;
  return result;
}

uint64_t (*FixedBitArray.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t *v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = FixedBitArray.subscript.getter(a2, *v2) & 1;
  return FixedBitArray.subscript.modify;
}

uint64_t FixedBitArray.subscript.modify(uint64_t a1)
{
  return FixedBitArray.subscript.setter(*(_BYTE *)(a1 + 16), *(_QWORD *)a1);
}

unint64_t FixedBitArray.endIndex.getter(unint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (16 * v1) & 0xFFFFFFFFFFFFFFE0;
  }
  __break(1u);
  return result;
}

uint64_t FixedBitArray.startIndex.getter()
{
  return 0;
}

unint64_t FixedBitArray.capacity.getter(unint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (16 * v1) & 0xFFFFFFFFFFFFFFE0;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance FixedBitArray(char *a1, uint64_t *a2)
{
  return FixedBitArray.subscript.setter(*a1, *a2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray(uint64_t a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = FixedBitArray.subscript.getter(v4, *v2) & 1;
  return protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray;
}

uint64_t protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray(uint64_t a1)
{
  return FixedBitArray.subscript.setter(*(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance FixedBitArray(uint64_t *a1, int64_t *a2)
{
  uint64_t v2;

  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], *a1, a1[1], a1[2]);
  return swift_bridgeObjectRelease();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray(_QWORD *a1, uint64_t *a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

void (*specialized MutableCollection<>.subscript.modify(_QWORD *a1, uint64_t a2, int64_t a3))(uint64_t **a1, char a2)
{
  void (**v3)(uint64_t **, char);
  _QWORD *v7;
  void (*result)(uint64_t **, char);
  unint64_t v9;
  int64_t v10;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  result = *v3;
  v9 = *((_QWORD *)*v3 + 3);
  if (v9 >> 62)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v10 = (16 * v9) & 0xFFFFFFFFFFFFFFE0;
  if (v10 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a2 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v10 >= a3)
  {
    *v7 = a2;
    v7[1] = a3;
    v7[2] = result;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
LABEL_11:
  __break(1u);
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v8 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v6, v8, v5, v3, v4, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)((*a1)[5], v8, v5, v3, v4, v7);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance FixedBitArray@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t *protocol witness for MutableCollection.swapAt(_:_:) in conformance FixedBitArray(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *result;
  v4 = *a2;
  if (*result != *a2)
  {
    v5 = *v2;
    v6 = FixedBitArray.subscript.getter(*result, *v2);
    v7 = FixedBitArray.subscript.getter(v4, v5);
    FixedBitArray.subscript.setter(v7 & 1, v3);
    return (uint64_t *)FixedBitArray.subscript.setter(v6 & 1, v4);
  }
  return result;
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance FixedBitArray()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance FixedBitArray()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

int64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(int64_t result, uint64_t a2, int64_t a3, uint64_t a4)
{
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(a4 + 24);
  if (v4 >> 62)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((2 * v4 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v5 = (16 * v4) & 0xFFFFFFFFFFFFFFE0;
  if (v5 < a3 || (a3 | result) < 0 || v5 < result)
    goto LABEL_19;
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result)
    goto LABEL_21;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance FixedBitArray(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v2 - 0x1000000000000000) >> 61 == 7)
  {
    *a1 = (16 * v2) & 0xFFFFFFFFFFFFFFE0;
    return;
  }
  __break(1u);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance FixedBitArray(_BYTE *a1, uint64_t *a2))()
{
  uint64_t *v2;

  *a1 = FixedBitArray.subscript.getter(*a2, *v2) & 1;
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Collection.subscript.getter in conformance FixedBitArray@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;

  result = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  if (v5 >> 62)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((2 * v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = 16 * v5;
  v7 = v6 & 0xFFFFFFFFFFFFFFE0;
  if (v6 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = *a1;
  if (*a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = a1[1];
  if (v7 >= v9)
  {
    *a2 = v8;
    a2[1] = v9;
    a2[2] = result;
    return swift_bridgeObjectRetain();
  }
LABEL_11:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance FixedBitArray(_QWORD *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((2 * v2 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = (16 * v2) & 0xFFFFFFFFFFFFFFE0;
  if ((v3 & 0x8000000000000000) == 0)
  {
    *a1 = 0;
    a1[1] = v3;
    return;
  }
LABEL_7:
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance FixedBitArray()
{
  uint64_t v0;
  unint64_t v1;
  _BOOL8 result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (v1 & 0xFFFFFFFFFFFFFFELL) == 0;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance FixedBitArray(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance FixedBitArray(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance FixedBitArray(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

int64_t *protocol witness for Collection.index(after:) in conformance FixedBitArray@<X0>(int64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (v3 >> 62)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((2 * v3 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = *result;
  if ((*result & 0x8000000000000000) == 0 && v4 < (uint64_t)((16 * v3) & 0xFFFFFFFFFFFFFFE0))
  {
    *a2 = v4 + 1;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

int64_t *protocol witness for Collection.formIndex(after:) in conformance FixedBitArray(int64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  int64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((2 * v2 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v3 = *result;
  if ((*result & 0x8000000000000000) == 0 && v3 < (uint64_t)((16 * v2) & 0xFFFFFFFFFFFFFFE0))
  {
    *result = v3 + 1;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance FixedBitArray@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (v4 >> 62)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v4 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x8000000000000000) == 0 && v3 < (uint64_t)((16 * v4) & 0xFFFFFFFFFFFFFFE0))
  {
    *a2 = v3;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance FixedBitArray(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (v3 >> 62)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v3 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)((16 * v3) & 0xFFFFFFFFFFFFFFE0))
  {
    *result = v2;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance FixedBitArray@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  uint64_t v3;
  int64_t v4;
  unint64_t v5;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v5 >> 62)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v4 & 0x8000000000000000) == 0 && (uint64_t)((16 * v5) & 0xFFFFFFFFFFFFFFE0) >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

int64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance FixedBitArray@<X0>(int64_t *a1@<X0>, uint64_t a2@<X1>, int64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  int64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

int64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance FixedBitArray(int64_t *result, int64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (v3 >> 62)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((2 * v3 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = *a2;
  v5 = (16 * v3) & 0xFFFFFFFFFFFFFFE0;
  if (v5 >= *a2)
  {
    v6 = *result;
    if (((v4 | *result) & 0x8000000000000000) == 0 && v5 >= v6)
      return (int64_t *)(v4 - v6);
  }
LABEL_9:
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance FixedBitArray(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

unint64_t protocol witness for Collection.count.getter in conformance FixedBitArray()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  if (v1 >> 62)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((2 * v1 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v2 = 16 * v1;
  result = v2 & 0xFFFFFFFFFFFFFFE0;
  if (v2 < 0)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance FixedBitArray()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance FixedBitArray()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance FixedBitArray(uint64_t a1, _BYTE *a2, int64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance FixedBitArray()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t SeqNumReceivedBuffer.parityFlag.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SeqNumReceivedBuffer.parityFlag.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SeqNumReceivedBuffer.parityFlag.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t SeqNumReceivedBuffer.processedFlag.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SeqNumReceivedBuffer.processedFlag.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SeqNumReceivedBuffer.processedFlag.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t SeqNumReceivedBuffer.largestSeqNum.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SeqNumReceivedBuffer.largestSeqNum.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*SeqNumReceivedBuffer.largestSeqNum.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t SeqNumReceivedBuffer.init(seqNumCapacity:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  unint64_t v4;
  uint64_t v5;

  v3 = ceil((double)result * 0.03125);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 9.22337204e18)
  {
    v4 = (uint64_t)v3;
    v5 = specialized Array.init(repeating:count:)(0, (uint64_t)v3);
    result = specialized Array.init(repeating:count:)(0, v4);
    *a2 = v5;
    a2[1] = result;
    a2[2] = 0;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t SeqNumReceivedBuffer.capacity.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (16 * v1) & 0xFFFFFFFFFFFFFFE0;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall SeqNumReceivedBuffer.process(seqNum:)(Swift::UInt64 seqNum)
{
  char *v1;
  char **v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  Swift::Bool result;

  v8 = v2[1];
  v7 = (Swift::UInt64)v2[2];
  if (v7 <= seqNum)
    v7 = seqNum;
  v2[2] = (char *)v7;
  v9 = *((_QWORD *)v8 + 3);
  if (v9 >> 62)
  {
    __break(1u);
    goto LABEL_32;
  }
  if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v10 = (16 * v9) & 0xFFFFFFFFFFFFFFE0;
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_48;
  if (!v10)
    goto LABEL_33;
  v1 = *v2;
  v11 = *((_QWORD *)*v2 + 3);
  if (v11 >> 62)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((2 * v11 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v5 = seqNum / v10;
  v6 = seqNum % v10;
  if ((uint64_t)(seqNum % v10) >= (uint64_t)(32 * (v11 >> 1)))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v3 = v6 >> 5;
  if (v6 >> 5 >= *((_QWORD *)v1 + 2))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v4 = 1 << v6;
  if (((v5 ^ ((*(_DWORD *)&v1[4 * v3 + 32] & (1 << v6)) != 0)) & 1) != 0)
  {
    if ((v5 & 1) != (((v7 / v10) & 1) == 0))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_14;
      goto LABEL_39;
    }
    return 0;
  }
  if (v3 >= *((_QWORD *)v8 + 2))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
LABEL_14:
    if (v3 >= *((_QWORD *)v8 + 2))
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)&v8[4 * v3 + 32] |= v4;
      v2[1] = v8;
      v12 = *((_QWORD *)v1 + 3);
      if (!(v12 >> 62))
      {
        if ((2 * v12 - 0x1000000000000000) >> 61 == 7)
        {
          if ((uint64_t)v6 < (uint64_t)(32 * (v12 >> 1)))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_19:
              if (v3 < *((_QWORD *)v1 + 2))
              {
                v13 = v1 + 32;
                if ((v5 & 1) != 0)
                  v14 = *(_DWORD *)&v13[4 * v3] | v4;
                else
                  v14 = *(_DWORD *)&v13[4 * v3] & ~v4;
                *(_DWORD *)&v13[4 * v3] = v14;
                *v2 = v1;
                return 1;
              }
              __break(1u);
              goto LABEL_46;
            }
LABEL_44:
            v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
            goto LABEL_19;
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
  if ((*(_DWORD *)&v8[4 * v3 + 32] & v4) != 0)
    return 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_46:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  if (v3 < *((_QWORD *)v8 + 2))
  {
    *(_DWORD *)&v8[4 * v3 + 32] |= v4;
    v2[1] = v8;
    return 1;
  }
  __break(1u);
LABEL_48:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)(*(_QWORD *)result + 24);
  if (v7 >> 62)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (((16 * v7) & 0x8000000000000000) != 0)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a2 < 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if ((uint64_t)((16 * v7) & 0xFFFFFFFFFFFFFFE0) < a3)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v9 = a4;
  if (a2 != a3)
  {
    v31 = a4 - a5;
    if (a4 == a5)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (a2 >= a3)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    v10 = *(_QWORD *)(a6 + 24);
    if (v10 >> 62)
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if ((2 * v10 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_71:
      __break(1u);
      return result;
    }
    v11 = 0;
    v32 = a6 + 32;
    v12 = (16 * v10) & 0xFFFFFFFFFFFFFFE0;
    v33 = *(_QWORD *)(a6 + 16);
    v29 = a4 + a3 - a2;
    v30 = (_QWORD *)result;
    if (a4 > v12)
      v12 = a4;
    v13 = -(int)a4;
    v34 = a4 - v12;
    v14 = a2 - a3 + 1;
    while (1)
    {
      v15 = v9 + v11;
      if (v9 + v11 >= a5)
        break;
      if (!(v34 + v11))
        goto LABEL_52;
      if (v15 >= 0)
        v16 = v9 + v11;
      else
        v16 = v15 + 31;
      if (v9 < -31)
        goto LABEL_53;
      v17 = v16 >> 5;
      if (v16 >> 5 >= v33)
        goto LABEL_54;
      v18 = v9 + v11 - (v16 & 0xFFFFFFFFFFFFFFE0);
      v19 = *(_DWORD *)(v32 + 4 * v17);
      if ((v18 & 0x8000000000000000) != 0)
        v20 = v19 << (v13 + 32 * v17);
      else
        v20 = v19 >> (v9 + v11 - 32 * v17);
      if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_55;
      v21 = a2 + v11;
      if (a2 + v11 >= (uint64_t)(32 * (v7 >> 1)))
        goto LABEL_56;
      if (v21 >= 0)
        v22 = a2 + v11;
      else
        v22 = v21 + 31;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
        v6 = result;
      }
      v23 = v22 >> 5;
      if ((unint64_t)(v22 >> 5) >= *(_QWORD *)(v6 + 16))
        goto LABEL_57;
      v24 = a2 + v11 - (v22 & 0xFFFFFFFFFFFFFFE0);
      v25 = v6 + 32;
      if ((v20 & 1) != 0)
      {
        if (v24 >= 0)
          v28 = 1 << (a2 + v11 - 32 * v23);
        else
          v28 = 0;
        v27 = *(_DWORD *)(v25 + 4 * v23) | v28;
      }
      else
      {
        if (v24 >= 0)
          v26 = ~(1 << (a2 + v11 - 32 * v23));
        else
          v26 = -1;
        v27 = *(_DWORD *)(v25 + 4 * v23) & v26;
      }
      *(_DWORD *)(v25 + 4 * v23) = v27;
      v7 = *(_QWORD *)(v6 + 24);
      if (v7 >> 62)
        goto LABEL_58;
      if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_59;
      if ((v21 | v15) < 0 || v21 >= (uint64_t)((16 * v7) & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_60;
      if (!(v14 + v11))
      {
        v9 = v29;
        *v30 = v6;
        goto LABEL_49;
      }
      ++v11;
      LOBYTE(v13) = v13 - 1;
      if (!(v31 + v11))
        goto LABEL_61;
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
LABEL_49:
  if (v9 != a5)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for FixedBitArray, &type metadata for FixedBitArray);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for FixedBitArray, &type metadata for FixedBitArray);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for FixedBitArray, &type metadata for FixedBitArray);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for FixedBitArray, &type metadata for FixedBitArray);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for FixedBitArray, &type metadata for FixedBitArray);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray, MEMORY[0x1E0DEDE30]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray, MEMORY[0x1E0DEDE40]);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in FixedBitArray()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in FixedBitArray()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<FixedBitArray>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB890]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x1AF44972C](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<FixedBitArray>);
    v8 = a2();
    result = MEMORY[0x1AF44972C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in FixedBitArray()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<FixedBitArray> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<FixedBitArray>, MEMORY[0x1E0DEC908]);
}

uint64_t sub_1ACD44F28(char *a1, uint64_t a2, uint64_t *a3)
{
  return FixedBitArray.subscript.setter(*a1, *a3);
}

uint64_t sub_1ACD44F50()
{
  return 0;
}

ValueMetadata *type metadata accessor for FixedBitArray()
{
  return &type metadata for FixedBitArray;
}

uint64_t destroy for SeqNumReceivedBuffer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for SeqNumReceivedBuffer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SeqNumReceivedBuffer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for SeqNumReceivedBuffer(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for SeqNumReceivedBuffer()
{
  return &type metadata for SeqNumReceivedBuffer;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1AF448910);
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t (*v6)(char *);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  char v15;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 24);
  if (v4 >> 62)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if ((2 * v4 - 0x1000000000000000) >> 61 != 7)
    goto LABEL_48;
  v5 = (16 * v4) & 0xFFFFFFFFFFFFFFE0;
  if (v5 < 1)
    return 0;
  v6 = (uint64_t (*)(char *))result;
  v7 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(v3 + 24);
    if (v8 >> 62)
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if ((2 * v8 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_44;
    if (v7 >= (uint64_t)(32 * (v8 >> 1)))
      goto LABEL_45;
    if ((unint64_t)v7 >> 5 >= *(_QWORD *)(v3 + 16))
      goto LABEL_46;
    v15 = (*(_DWORD *)(v3 + 32 + 4 * ((unint64_t)v7 >> 5)) >> v7) & 1;
    result = v6(&v15);
    if (v2)
      return v7;
    if ((result & 1) != 0)
      break;
    v10 = *(_QWORD *)(v3 + 24);
    if (v10 >> 62)
      goto LABEL_52;
    if ((2 * v10 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_53;
    if (v7 >= (uint64_t)(32 * (v10 >> 1)))
      goto LABEL_54;
LABEL_33:
    if (++v7 >= v5)
      return v7;
  }
  v9 = *(_QWORD *)(v3 + 24);
  if (v9 >> 62)
    goto LABEL_49;
  if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
    goto LABEL_50;
  if (v5 >= 1 && v5 <= (uint64_t)((16 * v9) & 0xFFFFFFFFFFFFFFE0))
  {
    while (v7 < --v5)
    {
      if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if (v5 >= (uint64_t)(32 * (v9 >> 1)))
        goto LABEL_38;
      if ((unint64_t)v5 >> 5 >= *(_QWORD *)(v3 + 16))
        goto LABEL_39;
      v14 = (*(_DWORD *)(v3 + 32 + 4 * ((unint64_t)v5 >> 5)) >> v5) & 1;
      result = v6(&v14);
      if ((result & 1) == 0)
      {
        v11 = FixedBitArray.subscript.getter(v7, v3);
        v12 = FixedBitArray.subscript.getter(v5, v3);
        FixedBitArray.subscript.setter(v12 & 1, v7);
        result = FixedBitArray.subscript.setter(v11 & 1, v5);
        v3 = *v1;
        v13 = *(_QWORD *)(*v1 + 24);
        if (v13 >> 62)
          goto LABEL_55;
        if ((2 * v13 - 0x1000000000000000) >> 61 != 7)
          goto LABEL_56;
        if (v7 >= (uint64_t)(32 * (v13 >> 1)))
          goto LABEL_57;
        goto LABEL_33;
      }
      v9 = *(_QWORD *)(v3 + 24);
      if (v9 >> 62)
        goto LABEL_40;
      if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_41;
      if (!v5 || v5 > (uint64_t)((16 * v9) & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_42;
    }
    return v7;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSay10Foundation4UUIDVG_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t ApplicationLauncher.behaviors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ApplicationLauncher.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ApplicationLauncher.pegasusLaunchBehavior.getter()
{
  return swift_retain();
}

uint64_t ApplicationLauncher.placementSceneIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ApplicationLauncher.placementSceneIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD v21[3];

  v21[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation.YieldResult);
  v5 = *(_QWORD *)(v21[0] - 8);
  MEMORY[0x1E0C80A78](v21[0]);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)((char *)v2 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier);
  swift_beginAccess();
  *v15 = a1;
  v15[1] = a2;
  result = swift_bridgeObjectRelease();
  v17 = v15[1];
  if (v17)
  {
    v18 = *v15;
    v19 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x90);
    v20 = swift_bridgeObjectRetain();
    v19(v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      swift_bridgeObjectRelease();
      return outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
      v21[1] = v18;
      v21[2] = v17;
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, _QWORD))(v5 + 8))(v7, v21[0]);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
  return result;
}

void (*ApplicationLauncher.placementSceneIdentifier.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation.YieldResult);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = malloc(*(_QWORD *)(v5 + 64));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  v3[9] = malloc(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
  v3[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[11] = v8;
  v9 = malloc(*(_QWORD *)(v8 + 64));
  v10 = OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier;
  v3[12] = v9;
  v3[13] = v10;
  swift_beginAccess();
  return ApplicationLauncher.placementSceneIdentifier.modify;
}

void ApplicationLauncher.placementSceneIdentifier.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD **)(v3 + 40);
    v5 = (_QWORD *)((char *)v4 + *(_QWORD *)(v3 + 104));
    v6 = v5[1];
    if (v6)
    {
      v7 = *v5;
      v8 = *(_QWORD *)(v3 + 80);
      v9 = *(_QWORD *)(v3 + 88);
      v10 = *(_QWORD *)(v3 + 72);
      v11 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x90);
      v12 = swift_bridgeObjectRetain();
      v11(v12);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
      {
        v13 = *(_QWORD *)(v3 + 72);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v13, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
      }
      else
      {
        v15 = *(_QWORD *)(v3 + 88);
        v14 = *(_QWORD *)(v3 + 96);
        v16 = *(_QWORD *)(v3 + 80);
        v18 = *(_QWORD *)(v3 + 56);
        v17 = *(_QWORD *)(v3 + 64);
        v19 = *(_QWORD *)(v3 + 48);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 32))(v14, *(_QWORD *)(v3 + 72), v16);
        *(_QWORD *)(v3 + 24) = v7;
        *(_QWORD *)(v3 + 32) = v6;
        AsyncStream.Continuation.yield(_:)();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      }
    }
  }
  v21 = *(void **)(v3 + 64);
  v20 = *(void **)(v3 + 72);
  free(*(void **)(v3 + 96));
  free(v20);
  free(v21);
  free((void *)v3);
}

uint64_t key path setter for ApplicationLauncher.placementSceneIdentifierContinuation : ApplicationLauncher(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x98))(v6);
}

uint64_t ApplicationLauncher.placementSceneIdentifierContinuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifierContinuation;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
}

uint64_t ApplicationLauncher.placementSceneIdentifierContinuation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifierContinuation;
  swift_beginAccess();
  outlined assign with take of AsyncStream<String>.Continuation?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of AsyncStream<String>.Continuation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ApplicationLauncher.placementSceneIdentifierContinuation.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

id ApplicationLauncher.__allocating_init(behaviors:featureFlags:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return ApplicationLauncher.init(behaviors:featureFlags:)(a1, a2);
}

id ApplicationLauncher.init(behaviors:featureFlags:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  v5 = &v2[OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v2[OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifierContinuation];
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)&v2[OBJC_IVAR___CPApplicationLauncherSwift_behaviors] = a1;
  *(_QWORD *)&v2[OBJC_IVAR___CPApplicationLauncherSwift_featureFlags] = a2;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = a1 + 32;
    type metadata accessor for PegasusApplicationLaunchBehavior();
    while (1)
    {
      v10 = swift_dynamicCastClass();
      if (v10)
        break;
      v9 += 16;
      if (!--v8)
        goto LABEL_5;
    }
    v11 = v10;
    swift_unknownObjectRetain();
  }
  else
  {
LABEL_5:
    v11 = 0;
  }
  *(_QWORD *)&v2[OBJC_IVAR___CPApplicationLauncherSwift_pegasusLaunchBehavior] = v11;
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for ApplicationLauncher();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for ApplicationLauncher()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ApplicationLauncher;
  if (!type metadata singleton initialization cache for ApplicationLauncher)
    return swift_getSingletonMetadata();
  return result;
}

id ApplicationLauncher.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t ApplicationLauncher.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t ObjectType;
  uint64_t v20;

  type metadata accessor for PegasusApplicationLaunchBehavior();
  v1 = swift_allocObject();
  type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager();
  v2 = swift_allocObject();
  v3 = v0;
  swift_retain();
  swift_defaultActor_initialize();
  v4 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 112) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 24) = v2;
  swift_release();
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  v5 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v5 + 112) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[2 * v8];
  v9[4] = v1;
  v9[5] = &protocol witness table for BackgroundApplicationLaunchBehavior;
  type metadata accessor for BackgroundApplicationLaunchBehavior();
  v10 = swift_allocObject();
  v11 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v11 + 112) = v4;
  *(_QWORD *)(v10 + 16) = v11;
  v13 = v6[2];
  v12 = v6[3];
  v14 = v13 + 1;
  if (v13 >= v12 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v6);
  v6[2] = v14;
  v15 = &v6[2 * v13];
  v15[4] = v10;
  v15[5] = &protocol witness table for BackgroundApplicationLaunchBehavior;
  type metadata accessor for ForegroundApplicationLaunchBehavior();
  v16 = swift_allocObject();
  v17 = v6[3];
  if (v14 >= v17 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v13 + 2, 1, v6);
  v6[2] = v13 + 2;
  v18 = &v6[2 * v14];
  v18[4] = v16;
  v18[5] = &protocol witness table for ForegroundApplicationLaunchBehavior;
  ObjectType = swift_getObjectType();

  v20 = (*(uint64_t (**)(_QWORD *, id))(ObjectType + 168))(v6, objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init));
  swift_deallocPartialClassInstance();
  return v20;
}

uint64_t ApplicationLauncher.launchApplication(for:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v16;

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v4;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  v13[8] = a4;
  v14 = v4;
  swift_unknownObjectRetain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(a3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in ApplicationLauncher.launchApplication(for:options:completion:), (uint64_t)v13);
  return swift_release();
}

uint64_t closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v12;

  v8[2] = a7;
  v8[3] = a8;
  v12 = (_QWORD *)swift_task_alloc();
  v8[4] = v12;
  *v12 = v8;
  v12[1] = closure #1 in ApplicationLauncher.launchApplication(for:options:completion:);
  v12[3] = a6;
  v12[4] = a4;
  v12[2] = a5;
  v12[5] = swift_getObjectType();
  return swift_task_switch();
}

uint64_t closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD);

  v1 = *(void (**)(uint64_t, _QWORD))(v0 + 16);
  if (v1)
    v1(1, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(_QWORD, void *);
  void *v2;
  id v3;

  v1 = *(void (**)(_QWORD, void *))(v0 + 16);
  v2 = *(void **)(v0 + 40);
  if (v1)
  {
    v3 = v2;
    v1(0, v2);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = swift_getObjectType();
  return swift_task_switch();
}

uint64_t ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR___CPApplicationLauncherSwift_behaviors);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    v3 = (uint64_t *)(v1 + 40);
    while (1)
    {
      v5 = *(_QWORD *)(v0 + 16);
      v4 = *(_QWORD *)(v0 + 24);
      v6 = *(v3 - 1);
      *(_QWORD *)(v0 + 48) = v6;
      v7 = *v3;
      ObjectType = swift_getObjectType();
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8);
      swift_unknownObjectRetain();
      if ((v9(v5, v4, ObjectType, v7) & 1) != 0)
        break;
      swift_unknownObjectRelease();
      v3 += 2;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_6;
      }
    }
    v17 = *(_QWORD *)(v0 + 16);
    v16 = *(_QWORD *)(v0 + 24);
    v20 = *(_OWORD *)(v0 + 32);
    swift_bridgeObjectRelease_n();
    v18 = swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v18;
    *(_QWORD *)(v18 + 16) = v6;
    *(_QWORD *)(v18 + 24) = v7;
    *(_QWORD *)(v18 + 32) = v17;
    *(_QWORD *)(v18 + 40) = v16;
    *(_OWORD *)(v18 + 48) = v20;
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v19;
    *v19 = v0;
    v19[1] = ApplicationLauncher.launchApplication(for:options:);
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
LABEL_6:
    if (one-time initialization token for default != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1ACCCC000, v11, v12, "Unable to launch application due to missing launch behavior", v13, 2u);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }

    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *v14 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v8[3] = a3;
  v8[4] = a4;
  v8[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;

  v1 = v0[9];
  v14 = v0[8];
  v2 = v0[6];
  v3 = (void *)v0[7];
  v5 = v0[4];
  v4 = v0[5];
  v6 = v0[3];
  v7 = type metadata accessor for TaskPriority();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v1, 1, 1, v7);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v6;
  v9[5] = v5;
  v9[6] = v4;
  v9[7] = v2;
  v9[8] = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v10 = v3;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:), (uint64_t)v9);
  outlined destroy of UUID?(v1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8(v1, 1, 1, v7);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v4;
  v11[5] = v6;
  v11[6] = v5;
  v11[7] = v14;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:), (uint64_t)v11);
  outlined destroy of UUID?(v1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v12 = (_QWORD *)swift_task_alloc();
  v0[10] = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
  *v12 = v0;
  v12[1] = closure #2 in ApplicationLauncher.launchApplication(for:options:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(v0 + 16);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1AF448454](v1, MEMORY[0x1E0DEE9C0] + 8, v2, MEMORY[0x1E0DEDB38]);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[7] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t ObjectType;
  id v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD *, uint64_t, _QWORD);

  v1 = (void *)v0[11];
  v2 = v0[8];
  ObjectType = swift_getObjectType();
  v0[5] = type metadata accessor for ApplicationLauncher();
  v0[6] = &protocol witness table for ApplicationLauncher;
  v0[2] = v1;
  v7 = (uint64_t (*)(_QWORD, _QWORD, _QWORD *, uint64_t, _QWORD))(**(int **)(v2 + 16) + *(_QWORD *)(v2 + 16));
  v4 = v1;
  v5 = (_QWORD *)swift_task_alloc();
  v0[12] = v5;
  *v5 = v0;
  v5[1] = closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:);
  return v7(v0[9], v0[10], v0 + 2, ObjectType, v0[8]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  __swift_destroy_boxed_opaque_existential_1Tm(v2 + 16);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  return swift_task_switch();
}

uint64_t closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;

  result = swift_beginAccess();
  if (is_mul_ok(static ApplicationLauncher._applicationLaunchTimeout, 0x3B9ACA00uLL))
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:);
    return static Task<>.sleep(nanoseconds:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BYTE *v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  v1 = v0[11];
  static Task<>.checkCancellation()();
  if (!v1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    swift_unknownObjectRetain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = v0[7];
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      *(_DWORD *)v7 = 136315138;
      v16 = v8;
      v0[5] = v6;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CPLaunchableActivitySession);
      v9 = String.init<A>(reflecting:)();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v3, v4, "Timed out launching app for activity session %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v8, -1, -1);
      MEMORY[0x1AF44981C](v7, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    v11 = v0[9];
    ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(ObjectType, v11) & 1) == 0)
    {
      v14 = (uint64_t (*)(void))v0[1];
      return v14();
    }
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *v13 = 4;
    swift_willThrow();
  }
  v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t static ApplicationLauncher.applicationLaunchTimeout.getter()
{
  swift_beginAccess();
  return static ApplicationLauncher._applicationLaunchTimeout;
}

Swift::Void __swiftcall ApplicationLauncher.revokeBackgroundAuthorization(for:)(Swift::String a1)
{
  void *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v1;
  v8[5] = countAndFlagsBits;
  v8[6] = object;
  v9 = v1;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:), (uint64_t)v8);
  swift_release();
}

uint64_t closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___CPApplicationLauncherSwift_behaviors);
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1[2];
  *(_QWORD *)(v0 + 48) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = v1[4];
  v3 = v1[5];
  swift_bridgeObjectRetain();
  ObjectType = swift_getObjectType();
  v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
  swift_unknownObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v5;
  *v5 = v0;
  v5[1] = closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:);
  return v7(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), ObjectType, v3);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  swift_unknownObjectRelease();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 56) + 1;
    *(_QWORD *)(v0 + 56) = v4;
    v5 = *(_QWORD *)(v0 + 40) + 16 * v4;
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v5 + 32);
    v6 = *(_QWORD *)(v5 + 40);
    ObjectType = swift_getObjectType();
    v9 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v6 + 24) + *(_QWORD *)(v6 + 24));
    swift_unknownObjectRetain();
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v8;
    *v8 = v0;
    v8[1] = closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:);
    return v9(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), ObjectType, v6);
  }
}

void ApplicationLauncher.revokeBackgroundAuthorization(for:)(void *a1)
{
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = objc_msgSend(a1, sel_activity);
  v3 = objc_msgSend(v2, sel_bundleIdentifier);

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xC0))(v4, v6);
    swift_bridgeObjectRelease();
  }
}

uint64_t ApplicationLauncher.authorizePiP(for:completion:)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + OBJC_IVAR___CPApplicationLauncherSwift_pegasusLaunchBehavior);
  if (!v10)
    return a2(0, 0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v10;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in ApplicationLauncher.authorizePiP(for:completion:), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in ApplicationLauncher.authorizePiP(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)a4 + 216) + *(_QWORD *)(*(_QWORD *)a4 + 216));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = closure #1 in ApplicationLauncher.authorizePiP(for:completion:);
  return v11(a5);
}

uint64_t closure #1 in ApplicationLauncher.authorizePiP(for:completion:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(uint64_t, _QWORD))(v0 + 16))(1, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(_QWORD, void *);
  id v3;

  v1 = *(void **)(v0 + 40);
  v2 = *(void (**)(_QWORD, void *))(v0 + 16);
  v3 = v1;
  v2(0, v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL static ApplicationLauncher.LaunchError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ApplicationLauncher.LaunchError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int ApplicationLauncher.LaunchError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t ApplicationLauncher.openApplicationOptions(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a2;
  return swift_task_switch();
}

void ApplicationLauncher.openApplicationOptions(for:options:)()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  id v10;
  uint64_t v11;

  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    *(_QWORD *)(v0 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v0 + 64) = v6;
    AnyHashable.init<A>(_:)();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)(v0 + 56) = 1;
    outlined init with take of Any((_OWORD *)(v0 + 56), (_OWORD *)(v0 + 88));
    v7 = MEMORY[0x1E0DEE9E0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = v7;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 88), v0 + 16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable(v0 + 16);
  }
  else
  {
    v1 = (id)TUUnlockDeviceWithPromptFrontBoardOptionsDictionary();
    v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x1E0DEE9E0];
    v5 = swift_isUniquelyReferenced_nonNull_native();
    v11 = v4;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v5, &v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend((id)objc_opt_self(), sel_optionsWithDictionary_, isa);

  if (v10)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(id))(v0 + 8))(v10);
  }
  else
  {
    __break(1u);
  }
}

void static ApplicationLauncher.applicationLaunchTimeout.setter(uint64_t a1)
{
  NSString *v2;
  Class v3;
  NSString *v4;
  Class v5;

  swift_beginAccess();
  v2 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v3 = NSClassFromString(v2);

  if (v3
    || (v4 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v5 = NSClassFromString(v4),
        v4,
        v5))
  {
    static ApplicationLauncher._applicationLaunchTimeout = a1;
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

void (*static ApplicationLauncher.applicationLaunchTimeout.modify(uint64_t a1))(uint64_t a1, char a2)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 24) = static ApplicationLauncher._applicationLaunchTimeout;
  return static ApplicationLauncher.applicationLaunchTimeout.modify;
}

void static ApplicationLauncher.applicationLaunchTimeout.modify(uint64_t a1, char a2)
{
  uint64_t v3;
  NSString *v4;
  NSString *v5;
  Class v6;
  NSString *v7;
  Class v8;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = (NSString *)NSClassFromString(v4);

  if ((a2 & 1) != 0)
  {
    if (v5)
      goto LABEL_7;
    v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v6 = NSClassFromString(v5);

    if (v6)
      goto LABEL_7;
    __break(1u);
  }
  if (v5
    || (v7 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v8 = NSClassFromString(v7),
        v7,
        v8))
  {
LABEL_7:
    static ApplicationLauncher._applicationLaunchTimeout = v3;
    swift_endAccess();
    return;
  }
  __break(1u);
}

id ApplicationLauncher.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationLauncher();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ApplicationLauncher.launchApp(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return swift_task_switch();
}

uint64_t ApplicationLauncher.launchApp(for:options:)()
{
  uint64_t v0;
  id v1;
  id v2;
  int *v3;
  _QWORD *v4;
  _BYTE *v6;
  int *v7;

  v1 = objc_msgSend(*(id *)(v0 + 128), sel_activity);
  v2 = objc_msgSend(v1, sel_representativeBundleIdentifier);
  *(_QWORD *)(v0 + 152) = v2;

  if (v2)
  {
    v3 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 144)) + 0xD8);
    v7 = (int *)((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = ApplicationLauncher.launchApp(for:options:);
    return ((uint64_t (*)(_QWORD, _QWORD))v7)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  }
  else
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *v6 = 3;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;

  v1 = objc_msgSend((id)objc_opt_self(), sel_serviceWithDefaultShellEndpoint);
  *(_QWORD *)(v0 + 176) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = *(void **)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = ApplicationLauncher.launchApp(for:options:);
    v5 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v6 = (_QWORD *)(v0 + 80);
    v6[1] = 0x40000000;
    v6[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned BSProcessHandle?, @unowned NSError?) -> () with result type BSProcessHandle;
    v6[3] = &block_descriptor_4;
    v6[4] = v5;
    objc_msgSend(v2, sel_openApplication_withOptions_completion_, v4, v3, v6);
    return swift_continuation_await();
  }
  else
  {
    v8 = *(void **)(v0 + 168);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 168);
  v2 = *(void **)(v0 + 176);
  v3 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 176);
  v2 = *(void **)(v0 + 168);
  v3 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ApplicationLauncher.launchApp(for:options:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned BSProcessHandle?, @unowned NSError?) -> () with result type BSProcessHandle(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ApplicationLaunchProviding.launchApp(for:options:) in conformance ApplicationLauncher(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v7[17] = a2;
  v7[18] = v6;
  v7[16] = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ApplicationLauncher.authorizePiP(for:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v4 + 16) = v5;
  v8 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v2 + 216) + *(_QWORD *)(*(_QWORD *)v2 + 216));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v6;
  *v6 = v4;
  v6[1] = closure #1 in ApplicationLauncher.authorizePiP(for:completion:);
  return v8(v3);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 40;
  v3 = a2 + 40;
  outlined init with copy of AnyHashable(a1, a2);
  return outlined init with copy of Any(v2, v3);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  _OWORD v30[2];
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v39 = a1;
  v40 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v41 = v8;
  v42 = 0;
  v43 = v11 & v9;
  v44 = a2;
  v45 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
  if (!*((_QWORD *)&v36 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : ()].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v32 = v35;
    v33 = v36;
    v34 = v37;
    outlined init with take of Any(&v38, v31);
    v13 = *a5;
    v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
    v16 = *(_QWORD *)(v13 + 16);
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      break;
    v19 = v14;
    if (*(_QWORD *)(v13 + 24) >= v18)
    {
      if ((a4 & 1) != 0)
      {
        if ((v14 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v19 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
      v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v19 & 1) != (v21 & 1))
        goto LABEL_22;
      v15 = v20;
      if ((v19 & 1) != 0)
      {
LABEL_6:
        outlined init with copy of Any((uint64_t)v31, (uint64_t)v30);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        outlined destroy of AnyHashable((uint64_t)&v32);
        v12 = (_OWORD *)(*(_QWORD *)(*a5 + 56) + 32 * v15);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
        outlined init with take of Any(v30, v12);
        goto LABEL_7;
      }
    }
    v22 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v23 = v22[6] + 40 * v15;
    v24 = v32;
    v25 = v33;
    *(_QWORD *)(v23 + 32) = v34;
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    outlined init with take of Any(v31, (_OWORD *)(v22[7] + 32 * v15));
    v26 = v22[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_21;
    v22[2] = v28;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
    a4 = 1;
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError;
  if (!lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ApplicationLauncher.LaunchError, &type metadata for ApplicationLauncher.LaunchError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError;
  if (!lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ApplicationLauncher.LaunchError, &type metadata for ApplicationLauncher.LaunchError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError);
  }
  return result;
}

uint64_t sub_1ACD48A3C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x78))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACD48A7C(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x80);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1ACD48AD0(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x90))();
}

uint64_t ObjC metadata update function for ApplicationLauncher()
{
  return type metadata accessor for ApplicationLauncher();
}

void type metadata completion function for ApplicationLauncher()
{
  unint64_t v0;

  type metadata accessor for AsyncStream<String>.Continuation?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ApplicationLauncher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifierContinuation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifierContinuation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifierContinuation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ApplicationLauncher.__allocating_init(behaviors:featureFlags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of ApplicationLauncher.launchApplication(for:options:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ApplicationLauncher.revokeBackgroundAuthorization(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ApplicationLauncher.authorizePiP(for:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xD8);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:);
  return v9(a1, a2);
}

uint64_t dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void type metadata accessor for AsyncStream<String>.Continuation?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AsyncStream<String>.Continuation?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<String>.Continuation?);
  }
}

uint64_t getEnumTagSinglePayload for ApplicationLauncher.LaunchError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationLauncher.LaunchError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1ACD48EDC + 4 * byte_1ACF5C7E5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1ACD48F10 + 4 * asc_1ACF5C7E0[v4]))();
}

uint64_t sub_1ACD48F10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD48F18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD48F20);
  return result;
}

uint64_t sub_1ACD48F2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD48F34);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1ACD48F38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD48F40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationLauncher.LaunchError()
{
  return &type metadata for ApplicationLauncher.LaunchError;
}

uint64_t partial apply for closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #2 in ApplicationLauncher.launchApplication(for:options:)(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1ACD48FF0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v3 + 88) = v2;
  *(_OWORD *)(v3 + 72) = v6;
  *(_OWORD *)(v3 + 56) = v4;
  return swift_task_switch();
}

uint64_t sub_1ACD490AC()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v3 + 72) = v2;
  *(_OWORD *)(v3 + 56) = v4;
  return swift_task_switch();
}

uint64_t sub_1ACD49148()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t objectdestroy_7Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t specialized XPCClient.withHost(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized XPCClient.withHost(body:errorHandler:)(a1, a2, a3, a4, specialized XPCClient.connection.getter, (uint64_t)&block_descriptor_78, &demangling cache variable for type metadata for ConversationManagerXPCHost);
}

uint64_t specialized XPCClient.withHost(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t *a7)
{
  void *v12;
  void *v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  _QWORD aBlock[6];
  uint64_t v18;

  v12 = (void *)a5();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ();
  aBlock[3] = a6;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v14 = objc_msgSend(v12, sel_remoteObjectProxyWithErrorHandler_, v13);
  _Block_release(v13);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(a7);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v18 = v16;
    a1(&v18);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t BackgroundSessionManagerClient.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t BackgroundSessionManagerClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*BackgroundSessionManagerClient.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for BackgroundSessionManagerClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return BackgroundSessionManagerClient.delegate.modify;
}

uint64_t BackgroundSessionManagerClient.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for BackgroundSessionManagerClient.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id BackgroundSessionManagerClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

char *BackgroundSessionManagerClient.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[direct field offset for BackgroundSessionManagerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  UUID.init()();
  v6.receiver = v0;
  v6.super_class = ObjectType;
  v2 = (char *)objc_msgSendSuper2(&v6, sel_init);
  v3 = (uint64_t *)&v2[direct field offset for XPCClient.connectionClosure];
  swift_beginAccess();
  v4 = *v3;
  *v3 = (uint64_t)closure #1 in BackgroundSessionManagerClient.init();
  v3[1] = 0;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
  return v2;
}

id closure #1 in BackgroundSessionManagerClient.init()()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB3B38]);
  v1 = (void *)MEMORY[0x1AF4480F4](0xD000000000000027, 0x80000001ACF7C110);
  v2 = objc_msgSend(v0, sel_initWithServiceName_, v1);

  return v2;
}

char *@objc BackgroundSessionManagerClient.init()(char *a1)
{
  objc_class *ObjectType;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&a1[direct field offset for BackgroundSessionManagerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  UUID.init()();
  v7.receiver = a1;
  v7.super_class = ObjectType;
  v3 = (char *)objc_msgSendSuper2(&v7, sel_init);
  v4 = (uint64_t *)&v3[direct field offset for XPCClient.connectionClosure];
  swift_beginAccess();
  v5 = *v4;
  *v4 = (uint64_t)closure #1 in BackgroundSessionManagerClient.init();
  v4[1] = 0;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v5);
  return v3;
}

Swift::Void __swiftcall BackgroundSessionManagerClient.handleServerDisconnect()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + direct field offset for XPCClient.queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for client == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1ACCCC000, v9, v10, "Server disconnected", v11, 2u);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }

  v12 = v1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1AF449918](v12))
  {
    v13 = *(_QWORD *)(v12 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v13 + 8))(v1, &protocol witness table for BackgroundSessionManagerClient, ObjectType, v13);
    swift_unknownObjectRelease();
  }
}

uint64_t BackgroundSessionManagerClient.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + direct field offset for BackgroundSessionManagerClient.delegate);
  v1 = v0 + direct field offset for BackgroundSessionManagerClient.id;
  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id BackgroundSessionManagerClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc BackgroundSessionManagerClient.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined destroy of weak ActivitySessionManagerProtocol?(a1 + direct field offset for BackgroundSessionManagerClient.delegate);
  v2 = a1 + direct field offset for BackgroundSessionManagerClient.id;
  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t protocol witness for Identifiable.id.getter in conformance BackgroundSessionManagerClient@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + direct field offset for BackgroundSessionManagerClient.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BackgroundSessionManagerClient.begin(request:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return BackgroundSessionManagerClient.begin(request:completion:)(a1, a2, a3, (uint64_t)&unk_1E5C83D90, (uint64_t)partial apply for closure #1 in BackgroundSessionManagerClient.begin(request:completion:), (uint64_t)&block_descriptor_5);
}

uint64_t closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:), (uint64_t)v8, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:), v6, specialized XPCClient.connection.getter, (uint64_t)&block_descriptor_66, &demangling cache variable for type metadata for BackgroundSessionManagerXPCClient);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  _QWORD v7[6];

  v7[5] = a4;
  v5 = *a1;
  v7[4] = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  v7[3] = &block_descriptor_75;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_beginWithRequest_completion_, a2, v6);
  _Block_release(v6);
}

uint64_t BackgroundSessionManagerClient.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v24 = a2;
  v25 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)&v3[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  v18 = (_QWORD *)(v17 + v16);
  v19 = v25;
  *v18 = v24;
  v18[1] = v19;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6_2;
  v20 = _Block_copy(aBlock);
  v21 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v15 = a2;
  v16 = a3;
  v17 = a4;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(&v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v8 + 32))(v11 + v10, &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v7);
  v12 = (_QWORD *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v12 = a3;
  v12[1] = a4;
  swift_retain();
  specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:), (uint64_t)v14, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:), v11, specialized XPCClient.connection.getter, (uint64_t)&block_descriptor_66, &demangling cache variable for type metadata for BackgroundSessionManagerXPCClient);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  Class isa;
  void *v8;
  _QWORD v9[6];

  v6 = *a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v9[4] = a3;
  v9[5] = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  v9[3] = &block_descriptor_69_0;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_leaveWithIdentifier_completion_, isa, v8);
  _Block_release(v8);

}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v13 = a1;
  v14 = a1;
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v26 = a4;
    v18 = v17;
    v19 = swift_slowAlloc();
    v29 = v19;
    *(_DWORD *)v18 = 136315394;
    v27 = a3;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_WORD *)(v18 + 12) = 2080;
    v28 = (uint64_t)a1;
    v22 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v23 = String.init<A>(reflecting:)();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
    a3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v15, v16, "Error leaving identifier %s: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v19, -1, -1);
    MEMORY[0x1AF44981C](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  }
  return a3(a1);
}

uint64_t BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v27 = a3;
  v28 = a4;
  v26 = a2;
  v30 = type metadata accessor for DispatchWorkItemFlags();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)&v4[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  v18 = v27;
  *(_QWORD *)(v17 + v16) = v26;
  v19 = (_QWORD *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8));
  v20 = v28;
  *v19 = v18;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12_1;
  v21 = _Block_copy(aBlock);
  v22 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v34 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v23 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v7, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v23);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[2];
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v18[1] = a1;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v13, v12, v9);
  *(_QWORD *)(v15 + v14) = a3;
  v16 = (_QWORD *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v16 = a4;
  v16[1] = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:), (uint64_t)v19, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:), v15);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  Class isa;
  Class v9;
  void *v10;
  _QWORD v11[6];

  v7 = *a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  v9 = Set._bridgeToObjectiveC()().super.isa;
  v11[4] = a4;
  v11[5] = a5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  v11[3] = &block_descriptor_60;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_updateMembersWithIdentifier_members_completion_, isa, v9, v10);
  _Block_release(v10);

}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;

  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  swift_bridgeObjectRetain();
  v14 = a1;
  swift_bridgeObjectRetain();
  v15 = a1;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc();
    v33 = a5;
    v20 = v19;
    v32 = swift_slowAlloc();
    v36 = v32;
    *(_DWORD *)v20 = 136315650;
    v34 = a4;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    HIDWORD(v31) = v18;
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_WORD *)(v20 + 12) = 2080;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    v23 = Set.description.getter();
    v25 = v24;
    swift_bridgeObjectRelease();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2080;
    v35 = (uint64_t)a1;
    v26 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v27 = String.init<A>(reflecting:)();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v36);
    a4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v16, BYTE4(v31), "Error updating members identifier %s: with members: %s error: %s", (uint8_t *)v20, 0x20u);
    v29 = v32;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease_n();

  }
  return a4(a1);
}

uint64_t BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v26 = a3;
  v27 = a4;
  v29 = type metadata accessor for DispatchWorkItemFlags();
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)&v4[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v4;
  *(_QWORD *)(v18 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  v19 = (_QWORD *)(v18 + v17);
  v20 = v27;
  *v19 = v26;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_18_1;
  v21 = _Block_copy(aBlock);
  v22 = v4;
  v23 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v33 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v24 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD v9[8];

  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = a5;
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:), (uint64_t)v9, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:), v7);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  Class isa;
  void *v10;
  _QWORD v11[6];

  v8 = *a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v11[4] = a4;
  v11[5] = a5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  v11[3] = &block_descriptor_54;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_updateShare_activityID_completion_, a2, isa, v10);
  _Block_release(v10);

}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void *a1, uint64_t (*a2)(void *), uint64_t a3, const char *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  if (one-time initialization token for client != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  v8 = a1;
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v18 = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v10, v11, a4, v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v13, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);
  }
  else
  {

  }
  return a2(a1);
}

uint64_t protocol witness for BackgroundSessionManagerClientProtocol.delegate.getter in conformance BackgroundSessionManagerClient()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t protocol witness for BackgroundSessionManagerClientProtocol.delegate.setter in conformance BackgroundSessionManagerClient(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for BackgroundSessionManagerClientProtocol.delegate.modify in conformance BackgroundSessionManagerClient(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for BackgroundSessionManagerClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return BackgroundSessionManagerClient.delegate.modify;
}

uint64_t BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return BackgroundSessionManagerClient.begin(request:completion:)(a1, a2, a3, (uint64_t)&unk_1E5C83E30, (uint64_t)partial apply for closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:), (uint64_t)&block_descriptor_24);
}

uint64_t BackgroundSessionManagerClient.begin(request:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  char *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v23 = a6;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v26 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)&v6[direct field offset for XPCClient.queue];
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v6;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  aBlock[4] = a5;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v23;
  v18 = _Block_copy(aBlock);
  v19 = v6;
  v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v27 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v25);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:), (uint64_t)v8, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:), v6);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  _QWORD v7[6];

  v7[5] = a4;
  v5 = *a1;
  v7[4] = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed PresenceSessionConnectionInfo?, @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_48;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_createPresenceSessionWith_completion_, a2, v6);
  _Block_release(v6);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void *a1, uint64_t (*a2)(_QWORD, void *))
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v7, v8, "Error creating presence session: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  return a2(0, a1);
}

uint64_t @objc BackgroundSessionManagerClient.begin(request:completion:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  void *v11;
  uint64_t v12;
  id v13;
  id v14;

  v11 = _Block_copy(aBlock);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  v13 = a3;
  v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

Swift::Void __swiftcall BackgroundSessionManagerClient.update(activitySessions:)(Swift::OpaquePointer activitySessions)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v3 = v1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1AF449918](v3))
  {
    v4 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, void *, uint64_t, uint64_t))(v4 + 16))(v1, &protocol witness table for BackgroundSessionManagerClient, activitySessions._rawValue, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

uint64_t BackgroundSessionManagerClient.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t ObjectType;

  v3 = v1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3);
  if (result)
  {
    v5 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t BackgroundSessionManagerClient.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t ObjectType;

  v5 = v2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v5);
  if (result)
  {
    v7 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.begin(request:completion:)()
{
  uint64_t *v0;

  return closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1ACD4C038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_1ACD4C114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1ACD4C20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *v3, v3[1]);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)()
{
  uint64_t *v0;

  return closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1ACD4C334@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1ACD4C38C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.didDisconnect(client:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.didUpdateContainers(client:containers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t type metadata accessor for BackgroundSessionManagerClient()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BackgroundSessionManagerClient;
  if (!type metadata singleton initialization cache for BackgroundSessionManagerClient)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for BackgroundSessionManagerClient()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for BackgroundSessionManagerClient()
{
  return type metadata accessor for BackgroundSessionManagerClient();
}

unint64_t lazy protocol witness table accessor for type TUHandle and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TUHandle and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUHandle and conformance NSObject)
  {
    v1 = type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
  }
  return result;
}

uint64_t sub_1ACD4C538()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PresenceSessionConnectionInfo?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned PresenceSessionConnectionInfo?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1ACD4C588()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(a1, *(uint64_t (**)(_QWORD, void *))(v1 + 16));
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(a1, *(uint64_t (**)(void *))(v1 + 16), *(_QWORD *)(v1 + 24), "Error updating host share: %s");
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1ACD4C60C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(uint64_t (**)(_QWORD))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1ACD4C718()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(a1, v1 + v4, *(uint64_t (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(a1, *(uint64_t (**)(void *))(v1 + 16), *(_QWORD *)(v1 + 24), "Error beginning activity: %s");
}

uint64_t static PresenceStatus<A>.present.getter()
{
  return 0;
}

uint64_t type metadata completion function for PresenceStatus()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PresenceStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for PresenceStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for PresenceStatus(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for PresenceStatus(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for PresenceStatus(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for PresenceStatus(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceStatus(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for PresenceStatus(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1ACD4D000()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1ACD4D008()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t getEnumTag for PresenceStatus(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for PresenceStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t type metadata accessor for PresenceStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PresenceStatus);
}

uint64_t FastSyncAnalyticsReporter.maxPartcipantsInSession.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FastSyncAnalyticsReporter.maxPartcipantsInSession.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.getter in conformance FastSyncAnalyticsReporter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.setter in conformance FastSyncAnalyticsReporter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.modify in conformance FastSyncAnalyticsReporter())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void specialized FastSyncAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t aBlock[6];

  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    aBlock[0] = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
    v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Logged coreanalytics event %s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v13 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.logDurationMetric(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_6;
  v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v15);

}

uint64_t specialized FastSyncAnalyticsReporter.collectPresentParticipants(_:_:_:maxAllowedParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  uint64_t inited;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  id v24;
  unint64_t v25;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E30;
  *(_QWORD *)(inited + 32) = 0x5F6E6F6973736573;
  *(_QWORD *)(inited + 40) = 0xEA00000000006469;
  v13 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v14 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithString_, v14);

  *(_QWORD *)(inited + 48) = v15;
  *(_QWORD *)(inited + 56) = 0x695F656C646E7562;
  *(_QWORD *)(inited + 64) = 0xE900000000000064;
  v16 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v17 = (void *)MEMORY[0x1AF4480F4](a3, a4);
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v16, sel_initWithString_, v17);

  *(_QWORD *)(inited + 72) = v18;
  *(_QWORD *)(inited + 80) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 88) = 0x80000001ACF7F2A0;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a5);
  *(_QWORD *)(inited + 104) = 0xD000000000000019;
  *(_QWORD *)(inited + 112) = 0x80000001ACF7F2C0;
  v19 = (a6 & 1) == 0;
  if ((a6 & 1) != 0)
    v20 = 7562585;
  else
    v20 = 28494;
  if (v19)
    v21 = 0xE200000000000000;
  else
    v21 = 0xE300000000000000;
  v22 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v23 = (void *)MEMORY[0x1AF4480F4](v20, v21);
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(v22, sel_initWithString_, v23);

  *(_QWORD *)(inited + 120) = v24;
  v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized FastSyncAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(a3, a4, v25);
  return swift_bridgeObjectRelease();
}

uint64_t specialized FastSyncAnalyticsReporter.collectInvitedMembers(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t inited;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  unint64_t v17;

  if ((a5 & 0xC000000000000001) != 0)
    v9 = __CocoaSet.count.getter();
  else
    v9 = *(_QWORD *)(a5 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF5B430;
  *(_QWORD *)(inited + 32) = 0x5F6E6F6973736573;
  *(_QWORD *)(inited + 40) = 0xEA00000000006469;
  v11 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v12 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_initWithString_, v12);

  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = 0x695F656C646E7562;
  *(_QWORD *)(inited + 64) = 0xE900000000000064;
  v14 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x1AF4480F4](a3, a4);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v14, sel_initWithString_, v15);

  *(_QWORD *)(inited + 72) = v16;
  *(_QWORD *)(inited + 80) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 88) = 0x80000001ACF7F280;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v9);
  v17 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized FastSyncAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(a3, a4, v17);
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.collectPresentParticipants(_:_:_:maxAllowedParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.collectInvitedMembers(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

ValueMetadata *type metadata accessor for FastSyncAnalyticsReporter()
{
  return &type metadata for FastSyncAnalyticsReporter;
}

uint64_t sub_1ACD4D790()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

BOOL static PluginAttachmentLedgerTopic.State.< infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v2 = a1[5];
  v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      v4 = 4;
      v5 = v3 >> 62;
      if (!(v3 >> 62))
        goto LABEL_24;
    }
    else
    {
      v6 = *a1;
      v7 = a1[3];
      v8 = a1[4] | a1[6];
      v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9)
          v15 = 0;
        else
          v15 = v6 == 1;
        v16 = v15 && v2 == 0x8000000000000000;
        v4 = 2;
        if (!v16)
          v4 = 3;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          v10 = 1;
          return v4 < v10;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    v5 = v3 >> 62;
    if (!(v3 >> 62))
      goto LABEL_24;
  }
  if ((_DWORD)v5 == 1)
  {
    v10 = 4;
  }
  else
  {
    v11 = *a2;
    v12 = a2[3];
    v13 = a2[2] | a2[1];
    v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14)
        v17 = 0;
      else
        v17 = v11 == 1;
      v18 = v17 && v3 == 0x8000000000000000;
      v10 = 2;
      if (!v18)
        v10 = 3;
    }
    else
    {
      v10 = 0;
    }
  }
  return v4 < v10;
}

uint64_t PluginAttachmentLedgerTopic.Configuration.init(proto:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  double v5;
  unsigned int v6;
  unsigned int v7;
  double v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v3 = a1[1];
  v5 = 1.0;
  if (v3)
    v5 = (double)v3 / 1000.0;
  v7 = a1[2];
  v6 = a1[3];
  if (v6)
    v8 = (double)v6;
  else
    v8 = 1.0;
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  if (v7)
    v10 = v7;
  else
    v10 = 3;
  if (v4)
    v11 = v4;
  else
    v11 = 2;
  *(_QWORD *)a2 = v11;
  *(double *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v10;
  *(double *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = 0x4024000000000000;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v22 = 0;
  v23 = 0xE000000000000000;
  v1._object = (void *)0x80000001ACF7F2E0;
  v1._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v1);
  v16 = v0;
  v2._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3D6574617473202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  (*(void (**)(_QWORD **__return_ptr))(*v0 + 288))(&v16);
  v4 = (uint64_t)v16;
  v5 = v17;
  v6 = v18;
  v7 = v19;
  v8 = v20;
  v9 = v21;
  v10._countAndFlagsBits = PluginAttachmentLedgerTopic.State.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  outlined consume of PluginAttachmentLedgerTopic.State(v4, v5, v6, v7, v8, v9);
  v11._countAndFlagsBits = 0x3D656D616E202CLL;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  v13 = v0[14];
  v12 = (void *)v0[15];
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v13;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v22;
}

void __swiftcall PluginAttachmentLedgerTopic.Configuration.init(maxSubscribeRetries:subscribeRetryInterval:maxDataCryptorRetries:dataCryptorRetryInterval:gracefulShutdownWindowInterval:)(CopresenceCore::PluginAttachmentLedgerTopic::Configuration *__return_ptr retstr, Swift::Int maxSubscribeRetries, Swift::Double subscribeRetryInterval, Swift::Int maxDataCryptorRetries, Swift::Double dataCryptorRetryInterval, Swift::Double gracefulShutdownWindowInterval)
{
  retstr->maxSubscribeRetries = maxSubscribeRetries;
  retstr->subscribeRetryInterval = subscribeRetryInterval;
  retstr->maxDataCryptorRetries = maxDataCryptorRetries;
  retstr->dataCryptorRetryInterval = dataCryptorRetryInterval;
  retstr->gracefulShutdownWindowInterval = gracefulShutdownWindowInterval;
}

uint64_t PluginAttachmentLedgerTopic.__allocating_init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, void *a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t specialized Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a2;
  v13[7] = a3;
  v14 = type metadata accessor for TaskPriority();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v16 = 0;
    v17 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    if (v13[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v16 = dispatch thunk of Actor.unownedExecutor.getter();
      v17 = v18;
      swift_unknownObjectRelease();
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
  if (v17 | v16)
  {
    v21[0] = 0;
    v21[1] = 0;
    v21[2] = v16;
    v21[3] = v17;
  }
  v19 = swift_task_create();
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  return v19;
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v5[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  v6 = type metadata accessor for TaskPriority();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSay10Foundation4UUIDVG_s5Error_pTg5(v1, (uint64_t)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TATu, (uint64_t)v8);
  outlined destroy of UUID?(v1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v4;
  v9[5] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSay10Foundation4UUIDVG_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), (uint64_t)v9);
  outlined destroy of UUID?(v1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v10 = (_QWORD *)swift_task_alloc();
  v0[9] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<[UUID], Error>);
  *v10 = v0;
  v10[1] = specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = **(_QWORD **)(v0 + 24);
    v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1AF448454](v2, v3, v4, MEMORY[0x1E0DEDB38]);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore23IDSGroupSessionProviderC11ParticipantV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC7Combine14AnyCancellableC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore11UploadTokenV_Tgm5Tm(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0C95E00]);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore11UploadTokenV_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  a4(0);
  return swift_task_create();
}

uint64_t UploadToken.token.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UploadToken.expirationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return UploadToken.expirationDate.getter(type metadata accessor for UploadToken, a1);
}

uint64_t UploadToken.storageLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UploadToken(0) + 24);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UploadToken.accountID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for UploadToken(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UploadToken.init(token:expirationDate:storageLocation:accountID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;

  *a7 = a1;
  a7[1] = a2;
  v12 = (int *)type metadata accessor for UploadToken(0);
  v13 = (char *)a7 + v12[5];
  v14 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a3, v14);
  v15 = (char *)a7 + v12[6];
  v16 = type metadata accessor for URL();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a4, v16);
  v18 = (_QWORD *)((char *)a7 + v12[7]);
  *v18 = a5;
  v18[1] = a6;
  return result;
}

uint64_t protocol witness for Token.token.getter in conformance UploadToken()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for Token.accountID.getter in conformance UploadToken(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DownloadToken.expirationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return UploadToken.expirationDate.getter(type metadata accessor for DownloadToken, a1);
}

uint64_t UploadToken.expirationDate.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t DownloadToken.accountID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for DownloadToken(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DownloadToken.init(token:expirationDate:accountID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;

  *a6 = a1;
  a6[1] = a2;
  v10 = type metadata accessor for DownloadToken(0);
  v11 = (char *)a6 + *(int *)(v10 + 20);
  v12 = type metadata accessor for Date();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a3, v12);
  v14 = (_QWORD *)((char *)a6 + *(int *)(v10 + 24));
  *v14 = a4;
  v14[1] = a5;
  return result;
}

uint64_t protocol witness for Token.expirationDate.getter in conformance UploadToken@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Token.accountID.getter in conformance DownloadToken(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t UploadToken.init(from:requestTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  _BYTE *v29;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  _QWORD *v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v53 = a2;
  v51 = a3;
  v5 = type metadata accessor for Date();
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v50 = (char *)&v46 - v8;
  v52 = type metadata accessor for URL.DirectoryHint();
  v9 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v46 - v16;
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v48 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v21(v15, 1, v18) == 1)
  {
    outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_4:
    outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v29 = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    return outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  v46 = v3;
  v22 = (uint64_t *)a1;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 24);
  v56 = v23;
  v57 = v24;
  v25 = *MEMORY[0x1E0CAFD78];
  v47 = v21;
  v26 = v9;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v28 = v52;
  v27(v11, v25, v52);
  lazy protocol witness table accessor for type String and conformance String();
  a1 = (uint64_t)v22;
  swift_bridgeObjectRetain();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v28);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  if (v47(v17, 1, v18) == 1)
    goto LABEL_4;
  v31 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v32 = v48;
  v31(v48, v17, v18);
  v33 = v31;
  v34 = (unsigned int (*)(char *, uint64_t, uint64_t))v22[1];
  v52 = *v22;
  v47 = v34;
  v35 = v53;
  v36 = v54;
  v37 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v49, v53, v55);
  swift_bridgeObjectRetain();
  v38 = v50;
  Date.init(timeInterval:since:)();
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  v39 = (int *)type metadata accessor for UploadToken(0);
  v40 = v51;
  v33((char *)v51 + v39[6], v32, v18);
  v41 = a1;
  v42 = *(_QWORD *)(a1 + 16);
  v43 = *(_QWORD *)(a1 + 24);
  v44 = v47;
  *v40 = v52;
  v40[1] = (uint64_t)v44;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v40 + v39[5], v38, v37);
  v45 = (uint64_t *)((char *)v40 + v39[7]);
  *v45 = v42;
  v45[1] = v43;
  swift_bridgeObjectRetain();
  return outlined destroy of ActivitySession.DomainAssertionWrapper(v41, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t DownloadToken.init(from:requestTime:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char *v19;
  uint64_t v20;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v14 = a1[2];
  v13 = a1[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  swift_bridgeObjectRetain();
  Date.init(timeInterval:since:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  v16 = a1[4];
  v15 = a1[5];
  swift_bridgeObjectRetain();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
  *(_QWORD *)a3 = v14;
  *((_QWORD *)a3 + 1) = v13;
  v17 = type metadata accessor for DownloadToken(0);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(&a3[*(int *)(v17 + 20)], v12, v6);
  v19 = &a3[*(int *)(v17 + 24)];
  *(_QWORD *)v19 = v16;
  *((_QWORD *)v19 + 1) = v15;
  return result;
}

uint64_t Attachment.attachment.getter()
{
  return Attachment.attachment.getter(type metadata accessor for AttachmentLedger_AttachmentMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t closure #1 in Attachment.attachment.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  v3 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v27 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v28 = UUID.uuid.getter();
  WORD4(v28) = v9;
  BYTE10(v28) = v10;
  BYTE11(v28) = v11;
  BYTE12(v28) = v12;
  BYTE13(v28) = v13;
  BYTE14(v28) = v14;
  HIBYTE(v28) = v15;
  v16 = specialized Data.init<A>(_:)((uint64_t)&v28, (uint64_t)v29);
  v18 = v17;
  outlined consume of Data._Representation(*a1, a1[1]);
  *a1 = v16;
  a1[1] = v18;
  result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v1)
  {
    MEMORY[0x1E0C80A78](result);
    *(&v26 - 2) = v20;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
    static Message.with(_:)();
    v21 = (uint64_t)a1 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) + 36);
    outlined destroy of UUID?(v21, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    outlined init with take of ActivitySession.DomainAssertionWrapper(v27, v21, type metadata accessor for AttachmentLedger_MMCSMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v21, 0, 1, v3);
    v28 = *(_OWORD *)&v8[*(int *)(v6 + 20)];
    v22 = Attachment.Metadata.sealedMetadata(with:)((uint64_t)v8);
    v24 = v23;
    outlined consume of Data._Representation(a1[5], a1[6]);
    a1[5] = (uint64_t)v22;
    a1[6] = v24;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v25 = v28;
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for UnencryptedAttachment);
    result = swift_bridgeObjectRelease();
    a1[2] = v25;
  }
  return result;
}

uint64_t Attachment.MMCSMetadata.metadata.getter()
{
  type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
  return static Message.with(_:)();
}

os_log_t Attachment.Metadata.sealedMetadata(with:)(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(NSObject *, char *, uint64_t);
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(NSObject *, uint64_t);
  char *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  int v53;
  NSObject *v54;
  char *v55;
  NSObject *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63[4];

  v61 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.SealedBox?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v59 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v58 = (char *)&v50 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  MEMORY[0x1E0C80A78](v7);
  v60 = (unint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for AES.GCM.SealedBox();
  v9 = *(_QWORD *)(v57 - 8);
  v10 = MEMORY[0x1E0C80A78](v57);
  v12 = ((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v50 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (os_log_t)((char *)&v50 - v17);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v50 - v19;
  v21 = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = *v1;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, v24, (uint64_t)&protocol conformance descriptor for AttachmentLedgerMetadata_AttachmentMetadata);
  static Message.with(_:)();
  v25 = Message.serializedData(partial:)();
  v27 = v26;
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  if (!v2)
  {
    v54 = v12;
    v55 = v15;
    v29 = (uint64_t)v58;
    v28 = (uint64_t)v59;
    v56 = v18;
    v30 = v57;
    v63[0] = v25;
    v63[1] = v27;
    v31 = type metadata accessor for AES.GCM.Nonce();
    v32 = v60;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v60, 1, 1, v31);
    lazy protocol witness table accessor for type Data and conformance Data();
    static AES.GCM.seal<A>(_:using:nonce:)();
    outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AES.GCM.Nonce?);
    v61 = v25;
    v33 = AES.GCM.SealedBox.combined.getter();
    if (v34 >> 60 == 15)
    {
      v60 = v27;
      v35 = v30;
      if (one-time initialization token for attachmentLedgerTopic != -1)
        swift_once();
      v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Log.attachmentLedgerTopic);
      v37 = v9;
      v38 = *(void (**)(NSObject *, char *, uint64_t))(v9 + 16);
      v18 = v56;
      v38(v56, v20, v35);
      v39 = Logger.logObject.getter();
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, (os_log_type_t)v53))
      {
        v52 = v39;
        v40 = (uint8_t *)swift_slowAlloc();
        v51 = swift_slowAlloc();
        v63[0] = v51;
        *(_DWORD *)v40 = 136315138;
        v38(v29, (char *)v18, v35);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v29, 0, 1, v35);
        v41 = v28;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29, v28, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v28, 1, v35) == 1)
        {
          v42 = 0xE300000000000000;
          v43 = 7104878;
        }
        else
        {
          v45 = v55;
          (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v55, v41, v35);
          v38(v54, v45, v35);
          v43 = String.init<A>(reflecting:)();
          v42 = v46;
          (*(void (**)(char *, uint64_t))(v37 + 8))(v45, v35);
        }
        outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
        v63[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v44 = *(void (**)(NSObject *, uint64_t))(v37 + 8);
        v44(v56, v35);
        v18 = v52;
        _os_log_impl(&dword_1ACCCC000, v52, (os_log_type_t)v53, "Failed to get combined data from serializedMetadata SealedBox %s", v40, 0xCu);
        v47 = v51;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v47, -1, -1);
        MEMORY[0x1AF44981C](v40, -1, -1);

      }
      else
      {
        v44 = *(void (**)(NSObject *, uint64_t))(v37 + 8);
        v44(v18, v35);

      }
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      *v48 = 3;
      swift_willThrow();
      outlined consume of Data._Representation(v61, v60);
      v44(v20, v35);
    }
    else
    {
      v18 = (os_log_t)v33;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v20, v30);
      outlined consume of Data._Representation(v61, v27);
    }
  }
  return v18;
}

uint64_t closure #1 in Attachment.MMCSMetadata.metadata.getter(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t result;
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, uint64_t, uint64_t);

  v5 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v39 - v10;
  v43 = a2;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, v12, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
  result = static Message.with(_:)();
  if (!v2)
  {
    v42 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v14 = (uint64_t)a1 + *(int *)(v42 + 36);
    outlined destroy of UUID?(v14, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, v14, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    v44 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56);
    v44(v14, 0, 1, v5);
    v15 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
    v16 = (uint64_t *)(a2 + v15[6]);
    v17 = v16[2];
    if (v17 >> 60 != 15 && (v17 & 0xF000000000000000) != 0xB000000000000000)
    {
      v39 = (uint64_t)&v39;
      v19 = v16[1];
      v41 = *v16;
      v20 = MEMORY[0x1E0C80A78](v19);
      *(&v39 - 4) = v21;
      *(&v39 - 3) = v20;
      v40 = v20;
      *(&v39 - 2) = v17;
      outlined copy of Data._Representation(v20, v17);
      static Message.with(_:)();
      v22 = (uint64_t)a1 + *(int *)(v42 + 40);
      outlined destroy of UUID?(v22, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v9, v22, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      v44(v22, 0, 1, v5);
      outlined consume of Attachment.MMCSMetadata.UploadStatus(v41, v40, v17);
    }
    v23 = (uint64_t *)(a2 + v15[7]);
    v25 = *v23;
    v24 = v23[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a1 = v25;
    a1[1] = v24;
    v26 = URL.absoluteString.getter();
    v28 = v27;
    swift_bridgeObjectRelease();
    a1[2] = v26;
    a1[3] = v28;
    v29 = (uint64_t *)(a2 + v15[9]);
    v30 = *v29;
    v31 = v29[1];
    v32 = a1[4];
    v33 = a1[5];
    outlined copy of Data._Representation(*v29, v31);
    outlined consume of Data._Representation(v32, v33);
    a1[4] = v30;
    a1[5] = v31;
    v34 = (uint64_t *)(a2 + v15[10]);
    v35 = *v34;
    v36 = v34[1];
    v37 = a1[6];
    v38 = a1[7];
    outlined copy of Data._Representation(*v34, v36);
    result = outlined consume of Data._Representation(v37, v38);
    a1[6] = v35;
    a1[7] = v36;
  }
  return result;
}

uint64_t closure #1 in closure #1 in Attachment.MMCSMetadata.metadata.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _BYTE *v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  void (*v31)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE v37[4];
  int v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for AES.GCM.SealedBox();
  v42 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v40 = &v37[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v41 = &v37[-v7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.SealedBox?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v37[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v37[-v12];
  v14 = type metadata accessor for Attachment.MMCSMetadata(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = AES.GCM.SealedBox.combined.getter();
  if (v18 >> 60 == 15)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, (uint64_t)v16, type metadata accessor for Attachment.MMCSMetadata);
    v20 = Logger.logObject.getter();
    LODWORD(v21) = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v20, (os_log_type_t)v21);
    v23 = v42;
    if (v22)
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v44 = v39;
      *(_DWORD *)v24 = 136315138;
      v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16);
      v25(v13, v16, v4);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v13, 0, 1, v4);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v4) == 1)
      {
        v26 = 0xE300000000000000;
        v27 = 7104878;
      }
      else
      {
        v31 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 32);
        v38 = (int)v21;
        v21 = v41;
        v31(v41, v11, v4);
        v25(v40, v21, v4);
        v27 = String.init<A>(reflecting:)();
        v32 = v23;
        v26 = v33;
        v34 = v21;
        LOBYTE(v21) = v38;
        (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v34, v4);
      }
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for Attachment.MMCSMetadata);
      _os_log_impl(&dword_1ACCCC000, v20, (os_log_type_t)v21, "Failed to get combined data from encryptedAssetSkeleton SealedBox %s", v24, 0xCu);
      v35 = v39;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v35, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for Attachment.MMCSMetadata);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v36 = 3;
    return swift_willThrow();
  }
  else
  {
    v28 = v17;
    v29 = v18;
    result = outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 8) = v28;
    *(_QWORD *)(a1 + 16) = v29;
  }
  return result;
}

uint64_t Attachment.MMCSMetadata.UploadStatus.status.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 2;
  if (*(_QWORD *)(v0 + 16) >> 60 == 11)
    v1 = 3;
  if (*(_QWORD *)(v0 + 16) >> 60 == 15)
    return 1;
  else
    return v1;
}

BOOL static PluginAttachmentLedgerTopic.RetryErrors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PluginAttachmentLedgerTopic.RetryErrors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int PluginAttachmentLedgerTopic.RetryErrors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t PluginAttachmentLedgerTopic.ServerError.reason.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t PluginAttachmentLedgerTopic.ServerError.reason.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.ServerError.reason.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t PluginAttachmentLedgerTopic.ServerError.description.getter(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000014;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginAttachmentLedgerTopic.ServerError()
{
  uint64_t v0;

  return PluginAttachmentLedgerTopic.ServerError.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PluginAttachmentLedgerTopic.Configuration.subscribeRetryInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void PluginAttachmentLedgerTopic.Configuration.subscribeRetryInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.subscribeRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxDataCryptorRetries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxDataCryptorRetries.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.maxDataCryptorRetries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PluginAttachmentLedgerTopic.Configuration.dataCryptorRetryInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void PluginAttachmentLedgerTopic.Configuration.dataCryptorRetryInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.dataCryptorRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PluginAttachmentLedgerTopic.Configuration.gracefulShutdownWindowInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void PluginAttachmentLedgerTopic.Configuration.gracefulShutdownWindowInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.gracefulShutdownWindowInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

__n128 PluginAttachmentLedgerTopic.State.ShutdownInfo.config.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void PluginAttachmentLedgerTopic.State.ShutdownInfo.reason.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t PluginAttachmentLedgerTopic.State.ShutdownInfo.pendingAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall PluginAttachmentLedgerTopic.State.ShutdownInfo.init(reason:pendingAttachments:config:)(CopresenceCore::PluginAttachmentLedgerTopic::State::ShutdownInfo *__return_ptr retstr, CopresenceCore::PluginAttachmentLedgerTopic::State::ShutdownInfo::Reason reason, Swift::OpaquePointer pendingAttachments, CopresenceCore::PluginAttachmentLedgerTopic::Configuration *config)
{
  CopresenceCore::PluginAttachmentLedgerTopic::State::ShutdownInfo::Reason v4;
  Swift::Double subscribeRetryInterval;
  Swift::Int maxDataCryptorRetries;

  v4 = *(_BYTE *)reason;
  subscribeRetryInterval = config->subscribeRetryInterval;
  maxDataCryptorRetries = config->maxDataCryptorRetries;
  retstr->config.maxSubscribeRetries = config->maxSubscribeRetries;
  retstr->config.subscribeRetryInterval = subscribeRetryInterval;
  retstr->config.maxDataCryptorRetries = maxDataCryptorRetries;
  *(_OWORD *)&retstr->config.dataCryptorRetryInterval = *(_OWORD *)&config->dataCryptorRetryInterval;
  retstr->reason = v4;
  retstr->pendingAttachments = pendingAttachments;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.attempt.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.attempt.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.State.RetryInfo.attempt.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.retryTask.getter()
{
  return swift_retain();
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.retryTask.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.State.RetryInfo.retryTask.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void PluginAttachmentLedgerTopic.State.RetryInfo.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t default argument 0 of PluginAttachmentLedgerTopic.State.RetryInfo.init(attempt:retryTask:)()
{
  return 0;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.init(attempt:retryTask:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.State.comparativeResult.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v7;

  v1 = v0[5];
  if (!(v1 >> 62))
    return 1;
  if (v1 >> 62 == 1)
    return 4;
  v3 = v0[3];
  v4 = v0[4] | v0[6];
  v5 = v0[2] | v0[1];
  if (v1 == 0x8000000000000000 && (v4 | *v0 | v3 | v5) == 0)
    return 0;
  if (v4 | v3 | v5)
    v7 = 0;
  else
    v7 = *v0 == 1;
  if (v7 && v1 == 0x8000000000000000)
    return 2;
  else
    return 3;
}

BOOL static PluginAttachmentLedgerTopic.State.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v2 = a1[5];
  v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      v4 = 4;
      v5 = v3 >> 62;
      if (!(v3 >> 62))
        goto LABEL_24;
    }
    else
    {
      v6 = *a1;
      v7 = a1[3];
      v8 = a1[4] | a1[6];
      v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9)
          v15 = 0;
        else
          v15 = v6 == 1;
        v16 = v15 && v2 == 0x8000000000000000;
        v4 = 2;
        if (!v16)
          v4 = 3;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          v10 = 1;
          return v4 == v10;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    v5 = v3 >> 62;
    if (!(v3 >> 62))
      goto LABEL_24;
  }
  if ((_DWORD)v5 == 1)
  {
    v10 = 4;
  }
  else
  {
    v11 = *a2;
    v12 = a2[3];
    v13 = a2[2] | a2[1];
    v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14)
        v17 = 0;
      else
        v17 = v11 == 1;
      v18 = v17 && v3 == 0x8000000000000000;
      v10 = 2;
      if (!v18)
        v10 = 3;
    }
    else
    {
      v10 = 0;
    }
  }
  return v4 == v10;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v2 = a1[5];
  v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      v4 = 4;
      v5 = v3 >> 62;
      if (!(v3 >> 62))
        goto LABEL_24;
    }
    else
    {
      v6 = *a1;
      v7 = a1[3];
      v8 = a1[4] | a1[6];
      v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9)
          v15 = 0;
        else
          v15 = v6 == 1;
        v16 = v15 && v2 == 0x8000000000000000;
        v4 = 2;
        if (!v16)
          v4 = 3;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          v10 = 1;
          return v4 < v10;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    v5 = v3 >> 62;
    if (!(v3 >> 62))
      goto LABEL_24;
  }
  if ((_DWORD)v5 == 1)
  {
    v10 = 4;
  }
  else
  {
    v11 = *a2;
    v12 = a2[3];
    v13 = a2[2] | a2[1];
    v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14)
        v17 = 0;
      else
        v17 = v11 == 1;
      v18 = v17 && v3 == 0x8000000000000000;
      v10 = 2;
      if (!v18)
        v10 = 3;
    }
    else
    {
      v10 = 0;
    }
  }
  return v4 < v10;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v2 = a1[5];
  v3 = a2[5];
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      v4 = 4;
      v5 = v2 >> 62;
      if (!(v2 >> 62))
        goto LABEL_24;
    }
    else
    {
      v6 = *a2;
      v7 = a2[3];
      v8 = a2[4] | a2[6];
      v9 = a2[2] | a2[1];
      if (v3 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9)
          v15 = 0;
        else
          v15 = v6 == 1;
        v16 = v15 && v3 == 0x8000000000000000;
        v4 = 2;
        if (!v16)
          v4 = 3;
        v5 = v2 >> 62;
        if (!(v2 >> 62))
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v5 = v2 >> 62;
        if (!(v2 >> 62))
        {
LABEL_24:
          v10 = 1;
          return v4 >= v10;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    v5 = v2 >> 62;
    if (!(v2 >> 62))
      goto LABEL_24;
  }
  if ((_DWORD)v5 == 1)
  {
    v10 = 4;
  }
  else
  {
    v11 = *a1;
    v12 = a1[3];
    v13 = a1[2] | a1[1];
    v14 = a1[4] | a1[6];
    if (v2 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14)
        v17 = 0;
      else
        v17 = v11 == 1;
      v18 = v17 && v2 == 0x8000000000000000;
      v10 = 2;
      if (!v18)
        v10 = 3;
    }
    else
    {
      v10 = 0;
    }
  }
  return v4 >= v10;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v2 = a1[5];
  v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      v4 = 4;
      v5 = v3 >> 62;
      if (!(v3 >> 62))
        goto LABEL_24;
    }
    else
    {
      v6 = *a1;
      v7 = a1[3];
      v8 = a1[4] | a1[6];
      v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9)
          v15 = 0;
        else
          v15 = v6 == 1;
        v16 = v15 && v2 == 0x8000000000000000;
        v4 = 2;
        if (!v16)
          v4 = 3;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          v10 = 1;
          return v4 >= v10;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    v5 = v3 >> 62;
    if (!(v3 >> 62))
      goto LABEL_24;
  }
  if ((_DWORD)v5 == 1)
  {
    v10 = 4;
  }
  else
  {
    v11 = *a2;
    v12 = a2[3];
    v13 = a2[2] | a2[1];
    v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14)
        v17 = 0;
      else
        v17 = v11 == 1;
      v18 = v17 && v3 == 0x8000000000000000;
      v10 = 2;
      if (!v18)
        v10 = 3;
    }
    else
    {
      v10 = 0;
    }
  }
  return v4 >= v10;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v2 = a1[5];
  v3 = a2[5];
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      v4 = 4;
      v5 = v2 >> 62;
      if (!(v2 >> 62))
        goto LABEL_24;
    }
    else
    {
      v6 = *a2;
      v7 = a2[3];
      v8 = a2[4] | a2[6];
      v9 = a2[2] | a2[1];
      if (v3 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9)
          v15 = 0;
        else
          v15 = v6 == 1;
        v16 = v15 && v3 == 0x8000000000000000;
        v4 = 2;
        if (!v16)
          v4 = 3;
        v5 = v2 >> 62;
        if (!(v2 >> 62))
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v5 = v2 >> 62;
        if (!(v2 >> 62))
        {
LABEL_24:
          v10 = 1;
          return v4 < v10;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    v5 = v2 >> 62;
    if (!(v2 >> 62))
      goto LABEL_24;
  }
  if ((_DWORD)v5 == 1)
  {
    v10 = 4;
  }
  else
  {
    v11 = *a1;
    v12 = a1[3];
    v13 = a1[2] | a1[1];
    v14 = a1[4] | a1[6];
    if (v2 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14)
        v17 = 0;
      else
        v17 = v11 == 1;
      v18 = v17 && v2 == 0x8000000000000000;
      v10 = 2;
      if (!v18)
        v10 = 3;
    }
    else
    {
      v10 = 0;
    }
  }
  return v4 < v10;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v2 = a1[5];
  v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      v4 = 4;
      v5 = v3 >> 62;
      if (!(v3 >> 62))
        goto LABEL_24;
    }
    else
    {
      v6 = *a1;
      v7 = a1[3];
      v8 = a1[4] | a1[6];
      v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9)
          v15 = 0;
        else
          v15 = v6 == 1;
        v16 = v15 && v2 == 0x8000000000000000;
        v4 = 2;
        if (!v16)
          v4 = 3;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          v10 = 1;
          return v4 == v10;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    v5 = v3 >> 62;
    if (!(v3 >> 62))
      goto LABEL_24;
  }
  if ((_DWORD)v5 == 1)
  {
    v10 = 4;
  }
  else
  {
    v11 = *a2;
    v12 = a2[3];
    v13 = a2[2] | a2[1];
    v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14)
        v17 = 0;
      else
        v17 = v11 == 1;
      v18 = v17 && v3 == 0x8000000000000000;
      v10 = 2;
      if (!v18)
        v10 = 3;
    }
    else
    {
      v10 = 0;
    }
  }
  return v4 == v10;
}

uint64_t PluginAttachmentLedgerTopic.participants.getter()
{
  uint64_t v1;

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PluginAttachmentLedgerTopic.participants.setter()
{
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginAttachmentLedgerTopic.participants.modify(uint64_t a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 16);
  swift_retain();
  CurrentValueSubject.value.getter();
  return PersonalPresenceDataSource.presentDevices.modify;
}

uint64_t PluginAttachmentLedgerTopic.$participants.getter()
{
  return swift_retain();
}

uint64_t key path setter for PluginAttachmentLedgerTopic.state : PluginAttachmentLedgerTopic(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t *);
  uint64_t v11[7];

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = *a2;
  v11[0] = *a1;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v5;
  v11[5] = v6;
  v11[6] = v7;
  v9 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v8 + 296);
  outlined copy of PluginAttachmentLedgerTopic.State(v11[0], v2, v3, v4, v5, v6);
  return v9(v11);
}

uint64_t PluginAttachmentLedgerTopic.state.getter()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  return swift_release();
}

uint64_t PluginAttachmentLedgerTopic.state.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  swift_retain();
  CurrentValueSubject.send(_:)();
  outlined consume of PluginAttachmentLedgerTopic.State(v1, v2, v3, v4, v5, v6);
  return swift_release();
}

void (*PluginAttachmentLedgerTopic.state.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[14] = *(_QWORD *)(v1 + 24);
  swift_retain();
  CurrentValueSubject.value.getter();
  return PluginAttachmentLedgerTopic.state.modify;
}

void PluginAttachmentLedgerTopic.state.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v2[7] = v3;
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v2[8] = v4;
  v2[9] = v5;
  v2[10] = v6;
  v2[11] = v7;
  v2[12] = v8;
  v2[13] = v9;
  if ((a2 & 1) != 0)
  {
    outlined copy of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
    CurrentValueSubject.send(_:)();
    outlined consume of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
    swift_release();
    outlined consume of PluginAttachmentLedgerTopic.State(*v2, v2[1], v2[2], v2[3], v2[4], v2[5]);
  }
  else
  {
    CurrentValueSubject.send(_:)();
    outlined consume of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
    swift_release();
  }
  free(v2);
}

uint64_t PluginAttachmentLedgerTopic.$state.getter()
{
  return swift_retain();
}

void *PluginAttachmentLedgerTopic.shutdownReason.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

void PluginAttachmentLedgerTopic.shutdownReason.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

}

uint64_t (*PluginAttachmentLedgerTopic.shutdownReason.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path setter for PluginAttachmentLedgerTopic.internalState : PluginAttachmentLedgerTopic(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t *);
  uint64_t v11[7];

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = *a2;
  v11[0] = *a1;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v5;
  v11[5] = v6;
  v11[6] = v7;
  v9 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v8 + 352);
  outlined copy of PluginAttachmentLedgerTopic.State(v11[0], v2, v3, v4, v5, v6);
  return v9(v11);
}

uint64_t PluginAttachmentLedgerTopic.internalState.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(__int128 *);
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33[3];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v33[0] = v12;
    *(_DWORD *)v11 = 136315394;
    swift_retain();
    v13 = PluginAttachmentLedgerTopic.description.getter();
    v15 = v14;
    swift_release();
    *(_QWORD *)&v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    swift_beginAccess();
    v16 = *(_QWORD *)(v1 + 88);
    v17 = *(_OWORD *)(v1 + 56);
    v29 = *(_OWORD *)(v1 + 40);
    v30 = v17;
    v31 = *(_OWORD *)(v1 + 72);
    v32 = v16;
    v18 = PluginAttachmentLedgerTopic.State.description.getter();
    *(_QWORD *)&v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "%s updated state new-state=%s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  v20 = *(_QWORD *)(v1 + 80);
  if (v20 >> 62 == 1)
  {
    PluginAttachmentLedgerTopic.handleShutdown()();
    v20 = *(_QWORD *)(v1 + 80);
  }
  v21 = *(_QWORD *)(v1 + 48);
  v22 = *(_QWORD *)(v1 + 56);
  v23 = *(_QWORD *)(v1 + 64);
  v24 = *(_QWORD *)(v1 + 72);
  v25 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)&v29 = *(_QWORD *)(v1 + 40);
  *((_QWORD *)&v29 + 1) = v21;
  *(_QWORD *)&v30 = v22;
  *((_QWORD *)&v30 + 1) = v23;
  *(_QWORD *)&v31 = v24;
  *((_QWORD *)&v31 + 1) = v20;
  v32 = v25;
  v26 = *(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 296);
  outlined copy of PluginAttachmentLedgerTopic.State(v29, v21, v22, v23, v24, v20);
  return v26(&v29);
}

void PluginAttachmentLedgerTopic.handleShutdown()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v21[0] = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = PluginAttachmentLedgerTopic.description.getter();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "%s handling shutdown", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  LOBYTE(v21[0]) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  *(_QWORD *)((char *)v1
            + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = 0;
  v15 = swift_release();
  v16 = (*(uint64_t (**)(uint64_t))(*v1 + 368))(v15);
  if (v16)
  {
    v17 = v16;
    v18 = type metadata accessor for UploadToken(0);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1AF448418](v17, v18, v19, MEMORY[0x1E0DEDB38]);
    swift_release();
  }
  swift_beginAccess();
  v1[12] = 0;
  swift_release();
  PluginAttachmentLedgerTopic.uploadToken.didset();
}

uint64_t PluginAttachmentLedgerTopic.internalState.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  swift_beginAccess();
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = v1[10];
  v9 = v1[11];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return outlined copy of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
}

uint64_t PluginAttachmentLedgerTopic.internalState.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;

  v2 = *a1;
  v3 = a1[3];
  v12 = *((_OWORD *)a1 + 2);
  v13 = *(_OWORD *)(a1 + 1);
  v4 = a1[6];
  swift_beginAccess();
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  v10 = v1[10];
  v1[5] = v2;
  *((_OWORD *)v1 + 3) = v13;
  v1[8] = v3;
  *(_OWORD *)(v1 + 9) = v12;
  v1[11] = v4;
  outlined consume of PluginAttachmentLedgerTopic.State(v5, v6, v7, v8, v9, v10);
  return PluginAttachmentLedgerTopic.internalState.didset();
}

uint64_t (*PluginAttachmentLedgerTopic.internalState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PluginAttachmentLedgerTopic.internalState.modify;
}

uint64_t PluginAttachmentLedgerTopic.internalState.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return PluginAttachmentLedgerTopic.internalState.didset();
  return result;
}

uint64_t key path setter for PluginAttachmentLedgerTopic.uploadToken : PluginAttachmentLedgerTopic(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 96) = v2;
  swift_retain_n();
  swift_release();
  PluginAttachmentLedgerTopic.uploadToken.didset();
  return swift_release();
}

void PluginAttachmentLedgerTopic.uploadToken.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v17 = v1;
    v18 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = String.init<A>(reflecting:)();
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    v15 = *(_QWORD *)(v1 + 112);
    v16 = *(_QWORD *)(v1 + 120);
    swift_bridgeObjectRetain();
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "Topic %s name==%s updated its uploadToken task", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t PluginAttachmentLedgerTopic.uploadToken.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PluginAttachmentLedgerTopic.localParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t PluginAttachmentLedgerTopic.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 PluginAttachmentLedgerTopic.config.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 152);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.config.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  result = swift_beginAccess();
  v1[16] = v2;
  v1[17] = v3;
  v1[18] = v4;
  v1[19] = v5;
  v1[20] = v6;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.config.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginAttachmentLedgerTopic.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + 168, a1);
}

uint64_t PluginAttachmentLedgerTopic.dataCryptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + 208, a1);
}

void PluginAttachmentLedgerTopic.subscribeStreamInput.willset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput) == a1)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v22 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_retain();
      v18 = PluginAttachmentLedgerTopic.description.getter();
      v20 = v19;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v14, v15, "%s trying to update the same value twice.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v17, -1, -1);
      MEMORY[0x1AF44981C](v16, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v22 = v21;
      *(_DWORD *)v5 = 136315650;
      swift_retain();
      v6 = PluginAttachmentLedgerTopic.description.getter();
      v8 = v7;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      v9 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 22) = 2080;
      v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v3, v4, "%s updating subscribeStream input from %s to %s", (uint8_t *)v5, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v21, -1, -1);
      MEMORY[0x1AF44981C](v5, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    LOBYTE(v22) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
  }
}

uint64_t PluginAttachmentLedgerTopic.pendingAttachments.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t PluginAttachmentLedgerTopic.pendingAttachments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_pendingAttachments);
  swift_beginAccess();
  *v7 = a1;
  swift_bridgeObjectRelease();
  v8 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v6 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) == 0)
    __break(1u);
  return result;
}

void (*PluginAttachmentLedgerTopic.pendingAttachments.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v3[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[5] = v5;
  v3[6] = malloc(*(_QWORD *)(v5 + 64));
  swift_beginAccess();
  return PluginAttachmentLedgerTopic.pendingAttachments.modify;
}

void PluginAttachmentLedgerTopic.pendingAttachments.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *a1;
  swift_endAccess();
  v4 = (_QWORD *)v3[6];
  if ((a2 & 1) != 0)
    goto LABEL_4;
  v5 = v3[4];
  v6 = *(void **)(v3[3] + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  v7 = v3[5];
  *v4 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v4, *MEMORY[0x1E0DEF740], v5);
  v8 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v5);
  if ((v6 & 1) != 0)
  {
    v4 = (_QWORD *)v3[6];
LABEL_4:
    free(v4);
    free(v3);
    return;
  }
  __break(1u);
}

uint64_t PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentStatusACKHandlers);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginAttachmentLedgerTopic.attachments.getter()
{
  uint64_t v1;

  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PluginAttachmentLedgerTopic.attachments.setter()
{
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

void (*PluginAttachmentLedgerTopic.attachments.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic__attachments);
  swift_beginAccess();
  v3[5] = *v4;
  swift_retain();
  CurrentValueSubject.value.getter();
  return PluginAttachmentLedgerTopic.attachments.modify;
}

void PluginAttachmentLedgerTopic.attachments.modify(uint64_t a1, char a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 32) = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v2);
}

uint64_t PluginAttachmentLedgerTopic.$attachments.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, void *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  NSObject *v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  __int128 aBlock;
  __int128 v89;
  uint64_t (*v90)();
  __int128 v91;

  v8 = v7;
  v83 = a7;
  v76 = a6;
  v84 = a4;
  v85 = a3;
  v74 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v11);
  v61 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v62 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>);
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v65 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation.BufferingPolicy);
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v77 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  v81 = *(_QWORD *)(v16 - 8);
  v82 = v16;
  MEMORY[0x1E0C80A78](v16);
  v78 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v75 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v70 = (char *)&v60 - v21;
  v73 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v71 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v23);
  v69 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v25);
  v26 = *a5;
  v27 = a5[1];
  v28 = a5[2];
  v29 = a5[3];
  v30 = a5[4];
  v31 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never>);
  swift_allocObject();
  *(_QWORD *)(v8 + 16) = CurrentValueSubject.init(_:)();
  v90 = 0;
  aBlock = 0u;
  v89 = 0u;
  v91 = xmmword_1ACF5CB10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>);
  swift_allocObject();
  *(_QWORD *)(v8 + 24) = CurrentValueSubject.init(_:)();
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 80) = 0x8000000000000000;
  v32 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>);
  swift_allocObject();
  *(_QWORD *)(v8 + v32) = PassthroughSubject.init()();
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = 0;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamRetryAttempts) = 0;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo) = 0;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentListeners) = v31;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_cancellables) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_pendingAttachments) = v31;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentStatusACKHandlers) = v31;
  v33 = (uint64_t *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic__attachments);
  v68 = (uint64_t *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic__attachments);
  v34 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  swift_allocObject();
  *v33 = CurrentValueSubject.init(_:)();
  *(_QWORD *)(v8 + 120) = a2;
  *(_QWORD *)(v8 + 128) = v26;
  *(_QWORD *)(v8 + 136) = v27;
  *(_QWORD *)(v8 + 144) = v28;
  *(_QWORD *)(v8 + 152) = v29;
  *(_QWORD *)(v8 + 160) = v30;
  v35 = v74;
  *(_QWORD *)(v8 + 104) = v76;
  *(_QWORD *)(v8 + 112) = v35;
  outlined init with copy of UserNotificationCenter(v85, v8 + 168);
  v60 = (_QWORD *)(v8 + 208);
  outlined init with copy of UserNotificationCenter(v84, v8 + 208);
  v76 = type metadata accessor for OS_dispatch_queue();
  *(_QWORD *)&aBlock = 0;
  *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  *(_QWORD *)&aBlock = 0xD00000000000001CLL;
  *((_QWORD *)&aBlock + 1) = 0x80000001ACF7F330;
  v36._countAndFlagsBits = v35;
  v36._object = a2;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)&aBlock = v34;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  v37 = (uint64_t)v70;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, *MEMORY[0x1E0DEF8D0], v73);
  v38 = (uint64_t)v75;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v39 = v68;
  swift_beginAccess();
  swift_release();
  v87 = v83;
  swift_allocObject();
  *v39 = CurrentValueSubject.init(_:)();
  swift_endAccess();
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  v41 = *(_QWORD *)(v40 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v37, 1, 1, v40);
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v77, *MEMORY[0x1E0DF07B8], v80);
  v86 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
  v42 = v78;
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationStream, v42, v82);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v37, v38, &demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationListener, v38, v40);
    v44 = *(_QWORD *)(v8 + 232);
    v45 = *(_QWORD *)(v8 + 240);
    __swift_project_boxed_opaque_existential_1(v60, v44);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 16))(v44, v45);
    v47 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
    v87 = *(id *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
    v48 = v87;
    *(_QWORD *)&aBlock = v46;
    v49 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    v50 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v61, 1, 1, v49);
    v51 = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
    v52 = v62;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v50, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
    v53 = v65;
    v54 = v64;
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v54);
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>, MEMORY[0x1E0C95988]);
    v55 = v67;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v55);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    v56 = *(void **)(v8 + v47);
    v57 = swift_allocObject();
    *(_QWORD *)(v57 + 16) = partial apply for closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:);
    *(_QWORD *)(v57 + 24) = v8;
    v90 = partial apply for thunk for @callee_guaranteed () -> ();
    *(_QWORD *)&v91 = v57;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v89 = thunk for @escaping @callee_guaranteed () -> ();
    *((_QWORD *)&v89 + 1) = &block_descriptor_7;
    v58 = _Block_copy(&aBlock);
    v59 = v56;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v59, v58);
    _Block_release(v58);

    __swift_destroy_boxed_opaque_existential_1Tm(v84);
    __swift_destroy_boxed_opaque_existential_1Tm(v85);
    LOBYTE(v58) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v58 & 1) == 0)
    {
      outlined destroy of UUID?(v37, &demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
      swift_release();
      return v8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  swift_retain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v36 = v33;
    *(_DWORD *)v20 = 136315394;
    v32 = v8;
    swift_retain();
    v21 = PluginAttachmentLedgerTopic.description.getter();
    v23 = v22;
    swift_release();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v36);
    v34 = v6;
    v35 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v20 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v36);
    v6 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v7);
    _os_log_impl(&dword_1ACCCC000, v18, v19, "[Cryptor] %s notified of local encryptionID update. encryptionID=%s", (uint8_t *)v20, 0x16u);
    v27 = v33;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v27, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  v28 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v6, 1, 1, v28);
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = 0;
  v29[3] = 0;
  v29[4] = v2;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:), (uint64_t)v29);
  return swift_release();
}

void closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v13 = v7;
    *(_DWORD *)v5 = 136315394;
    swift_retain();
    v8 = PluginAttachmentLedgerTopic.description.getter();
    v10 = v9;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2112;
    v12 = *(void **)(a1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
    v11 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v12;
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "%s initialized on queue=%@", (uint8_t *)v5, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  PluginAttachmentLedgerTopic.bootstrap()();
}

void PluginAttachmentLedgerTopic.bootstrap()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136315394;
    swift_retain();
    v13 = PluginAttachmentLedgerTopic.description.getter();
    v15 = v14;
    swift_release();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16 = swift_release_n();
    *(_WORD *)(v11 + 12) = 2080;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 632))(v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Attachment]);
    v17 = String.init<A>(reflecting:)();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "Bootstrapping %s with initialAttachments: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  PluginAttachmentLedgerTopic.subscribe()();
}

uint64_t PluginAttachmentLedgerTopic.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v15 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_retain();
    v7 = PluginAttachmentLedgerTopic.description.getter();
    v9 = v8;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Deinit %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  LOBYTE(v15) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = 0;
  swift_release();
  swift_release();
  swift_release();

  outlined consume of PluginAttachmentLedgerTopic.State(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 168);
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 208);
  v10 = v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationListener;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationStream;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PluginAttachmentLedgerTopic.__deallocating_deinit()
{
  PluginAttachmentLedgerTopic.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PluginAttachmentLedgerTopic.unsubscribe()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t aBlock[8];

  v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    v6 = aBlock[0];
    *(_DWORD *)v5 = 136315138;
    swift_retain();
    v7 = PluginAttachmentLedgerTopic.description.getter();
    v9 = v8;
    swift_release();
    aBlock[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Received request to unsubscribe on %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v10 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in PluginAttachmentLedgerTopic.unsubscribe();
  *(_QWORD *)(v11 + 24) = v1;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_14_0;
  v12 = _Block_copy(aBlock);
  swift_retain();
  v13 = v10;
  swift_retain();
  swift_release();
  dispatch_sync(v13, v12);

  _Block_release(v12);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v12 & 1) != 0)
    __break(1u);
}

void closure #1 in PluginAttachmentLedgerTopic.unsubscribe()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 344))(&v15);
  v1 = v15;
  v2 = v18;
  v3 = v20;
  if (!(v20 >> 62))
    goto LABEL_16;
  if (v20 >> 62 != 1)
  {
    v12 = v17 | v16;
    v13 = v19 | v21;
    if (v20 != 0x8000000000000000 || (v17 | v16 | v15 | v18 | v19 | v21) != 0)
    {
      outlined consume of PluginAttachmentLedgerTopic.State(v15, v16, v17, v18, v19, v20);
      if (v3 != 0x8000000000000000 || v1 != 1 || v12 | v2 | v13)
        goto LABEL_4;
LABEL_17:
      PluginAttachmentLedgerTopic.shutdown(reason:)(0);
      return;
    }
LABEL_16:
    outlined consume of PluginAttachmentLedgerTopic.State(v15, v16, v17, v18, v19, v20);
    goto LABEL_17;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v15, v16, v17, v18, v19, v20);
LABEL_4:
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_retain();
    v9 = PluginAttachmentLedgerTopic.description.getter();
    v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v5, v6, "Already shutting down, ignoring request on %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t PluginAttachmentLedgerTopic.shutdown(reason:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *);
  uint64_t (*v30)(void *);
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  __int128 v39;
  __int128 v40;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
LABEL_22:
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain();
  v11 = a1;
  swift_retain();
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v38[0] = v16;
    *(_DWORD *)v15 = 136315394;
    v17 = PluginAttachmentLedgerTopic.description.getter();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    if (a1)
    {
      v37 = (uint64_t)a1;
      v19 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v20 = String.init<A>(reflecting:)();
      v22 = v21;
    }
    else
    {
      v22 = 0xE300000000000000;
      v20 = 7104878;
    }
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v13, v14, "%s Processing request to shutdown, reason: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 288))(v38);
  v23 = v38[0];
  v24 = v39;
  v25 = v40;
  if (!((unint64_t)v40 >> 62))
    goto LABEL_14;
  if ((unint64_t)v40 >> 62 == 1)
    return outlined consume of PluginAttachmentLedgerTopic.State(v38[0], v38[1], v38[2], v39, *((uint64_t *)&v39 + 1), v40);
  v27 = v38[2] | v38[1];
  v28 = *((_QWORD *)&v39 + 1) | *((_QWORD *)&v40 + 1);
  if ((_QWORD)v40 == 0x8000000000000000 && !(v27 | v38[0] | (unint64_t)v39 | v28))
  {
LABEL_14:
    outlined consume of PluginAttachmentLedgerTopic.State(v38[0], v38[1], v38[2], v39, *((uint64_t *)&v39 + 1), v40);
LABEL_15:
    v38[0] = 2;
    *(_OWORD *)&v38[1] = 0u;
    v39 = 0u;
    v40 = xmmword_1ACF5CB10;
    v29 = *(void (**)(uint64_t *))(*(_QWORD *)v2 + 352);
    v29(v38);
    v30 = *(uint64_t (**)(void *))(*(_QWORD *)v2 + 328);
    v31 = a1;
    v32 = v30(a1);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 584))(v32);
    v34 = specialized _copyCollectionToContiguousArray<A>(_:)(v33);
    v35 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 392))(v38, v35);
    *(_QWORD *)&v40 = 0x4000000000000005;
    *((_QWORD *)&v40 + 1) = v34;
    return ((uint64_t (*)(uint64_t *))v29)(v38);
  }
  result = outlined consume of PluginAttachmentLedgerTopic.State(v38[0], v38[1], v38[2], v39, *((uint64_t *)&v39 + 1), v40);
  if (v25 == 0x8000000000000000 && v23 == 1 && !(v27 | v24 | v28))
    goto LABEL_15;
  return result;
}

Swift::Void __swiftcall PluginAttachmentLedgerTopic.subscribe()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 288))(&v23, v8);
  v9 = v23;
  v10 = v26;
  v11 = v28;
  if (!(v28 >> 62))
    goto LABEL_10;
  if (v28 >> 62 == 1)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v23, v24, v25, v26, v27, v28);
    goto LABEL_5;
  }
  v20 = v25 | v24;
  v21 = v27 | v29;
  if (v28 == 0x8000000000000000 && !(v20 | v23 | v26 | v21))
  {
LABEL_10:
    outlined consume of PluginAttachmentLedgerTopic.State(v23, v24, v25, v26, v27, v28);
LABEL_11:
    PluginAttachmentLedgerTopic.setupSubscribeStream()();
    PluginAttachmentLedgerTopic.sendSubscribeRequest()();
    return;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v23, v24, v25, v26, v27, v28);
  if (v11 == 0x8000000000000000 && v9 == 1 && !(v20 | v10 | v21))
    goto LABEL_11;
LABEL_5:
  if (one-time initialization token for attachmentLedgerTopic != -1)
LABEL_19:
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v23 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_retain();
    v17 = PluginAttachmentLedgerTopic.description.getter();
    v19 = v18;
    swift_release();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "Skipping subscribe handling for %s since we're in a terminal state", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    swift_release_n();
  }

}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation.YieldResult);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v7[*(int *)(v5 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a3, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, a1, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)(v9 + 304) = v15;
  *(_QWORD *)(v9 + 312) = v8;
  *(_OWORD *)(v9 + 288) = v14;
  *(_QWORD *)(v9 + 272) = a7;
  *(_QWORD *)(v9 + 280) = a8;
  *(_QWORD *)(v9 + 256) = a5;
  *(_QWORD *)(v9 + 264) = a6;
  *(_QWORD *)(v9 + 240) = a3;
  *(_QWORD *)(v9 + 248) = a4;
  *(_QWORD *)(v9 + 224) = a1;
  *(_QWORD *)(v9 + 232) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  *(_QWORD *)(v9 + 320) = swift_task_alloc();
  *(_QWORD *)(v9 + 328) = swift_task_alloc();
  *(_QWORD *)(v9 + 336) = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  *(_QWORD *)(v9 + 344) = swift_task_alloc();
  *(_QWORD *)(v9 + 352) = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  *(_QWORD *)(v9 + 360) = swift_task_alloc();
  v10 = type metadata accessor for SymmetricKey();
  *(_QWORD *)(v9 + 368) = v10;
  *(_QWORD *)(v9 + 376) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 384) = swift_task_alloc();
  *(_QWORD *)(v9 + 392) = swift_task_alloc();
  *(_QWORD *)(v9 + 400) = swift_task_alloc();
  *(_QWORD *)(v9 + 408) = swift_task_alloc();
  v11 = type metadata accessor for UUID();
  *(_QWORD *)(v9 + 416) = v11;
  *(_QWORD *)(v9 + 424) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 432) = swift_task_alloc();
  *(_QWORD *)(v9 + 440) = swift_task_alloc();
  *(_QWORD *)(v9 + 448) = type metadata accessor for Attachment.MMCSMetadata(0);
  *(_QWORD *)(v9 + 456) = swift_task_alloc();
  *(_QWORD *)(v9 + 464) = swift_task_alloc();
  *(_QWORD *)(v9 + 472) = type metadata accessor for UploadToken(0);
  *(_QWORD *)(v9 + 480) = swift_task_alloc();
  *(_QWORD *)(v9 + 488) = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  *(_QWORD *)(v9 + 496) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  *(_QWORD *)(v9 + 504) = swift_task_alloc();
  v12 = type metadata accessor for AES.GCM.SealedBox();
  *(_QWORD *)(v9 + 512) = v12;
  *(_QWORD *)(v9 + 520) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 528) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t type;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v0 + 312) + 288))(&v78);
  v1 = v78;
  v2 = v81;
  v3 = v83;
  if ((v83 & 0x8000000000000000) == 0
    || ((v4 = v80 | v79, v5 = v82 | v84, v83 == 0x8000000000000000)
      ? (v6 = (v80 | v79 | v78 | v81 | v82 | v84) == 0)
      : (v6 = 0),
        v6))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v78, v79, v80, v81, v82, v83);
LABEL_11:
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v9 = *(_QWORD *)(v0 + 424);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 224);
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v12, v11);
    swift_retain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    v16 = os_log_type_enabled(v14, v15);
    v18 = *(_QWORD *)(v0 + 424);
    v17 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 416);
    if (v16)
    {
      v20 = swift_slowAlloc();
      v77 = swift_slowAlloc();
      v78 = v77;
      *(_DWORD *)v20 = 136315394;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v21 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      *(_WORD *)(v20 + 12) = 2080;
      swift_retain();
      v23 = PluginAttachmentLedgerTopic.description.getter();
      v25 = v24;
      swift_release();
      *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Dropping request to upload attachment %s because state of PluginAttachmentLedgerTopic is invalid %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v77, -1, -1);
      MEMORY[0x1AF44981C](v20, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v18 + 8))(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416));
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
    swift_allocError();
    *v26 = 3;
    swift_willThrow();
    goto LABEL_17;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v78, v79, v80, v81, v82, v83);
  if (v3 != 0x8000000000000000 || v1 != 1 || v4 | v2 | v5)
    goto LABEL_11;
  v7 = *(_QWORD *)(v0 + 504);
  *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 240);
  v8 = type metadata accessor for AES.GCM.Nonce();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  lazy protocol witness table accessor for type Data and conformance Data();
  static AES.GCM.seal<A>(_:using:nonce:)();
  outlined destroy of UUID?(*(_QWORD *)(v0 + 504), &demangling cache variable for type metadata for AES.GCM.Nonce?);
  v28 = AES.GCM.SealedBox.combined.getter();
  v30 = v29;
  outlined consume of Data?(v28, v29);
  if (v30 >> 60 == 15)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v31 = *(_QWORD *)(v0 + 400);
    v33 = *(_QWORD *)(v0 + 368);
    v32 = *(_QWORD *)(v0 + 376);
    v34 = *(_QWORD *)(v0 + 232);
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Log.attachmentLedgerTopic);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v36(v31, v34, v33);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    v39 = os_log_type_enabled(v37, v38);
    v40 = *(_QWORD *)(v0 + 400);
    v42 = *(_QWORD *)(v0 + 368);
    v41 = *(_QWORD *)(v0 + 376);
    if (v39)
    {
      v43 = *(_QWORD *)(v0 + 320);
      v44 = *(_QWORD *)(v0 + 328);
      v45 = (uint8_t *)swift_slowAlloc();
      type = swift_slowAlloc();
      v78 = type;
      *(_DWORD *)v45 = 136315138;
      v36(v44, v40, v42);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v42);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v44, v43, &demangling cache variable for type metadata for SymmetricKey?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v43, 1, v42) == 1)
      {
        v46 = 0xE300000000000000;
        v47 = 7104878;
      }
      else
      {
        v65 = *(_QWORD *)(v0 + 384);
        v64 = *(_QWORD *)(v0 + 392);
        v67 = *(_QWORD *)(v0 + 368);
        v66 = *(_QWORD *)(v0 + 376);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v66 + 32))(v64, *(_QWORD *)(v0 + 320), v67);
        v36(v65, v64, v67);
        v47 = String.init<A>(reflecting:)();
        v46 = v68;
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v67);
      }
      v69 = *(_QWORD *)(v0 + 400);
      v71 = *(_QWORD *)(v0 + 368);
      v70 = *(_QWORD *)(v0 + 376);
      outlined destroy of UUID?(*(_QWORD *)(v0 + 328), &demangling cache variable for type metadata for SymmetricKey?);
      *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      _os_log_impl(&dword_1ACCCC000, v37, v38, "Failed to fetch the combined representation of the assetSkeleton encrypted w/ SymmetricKey %s", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](type, -1, -1);
      MEMORY[0x1AF44981C](v45, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v41 + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 368));
    }

    v72 = *(_QWORD *)(v0 + 528);
    v73 = *(_QWORD *)(v0 + 520);
    v74 = *(_QWORD *)(v0 + 512);
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v75 = 3;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v48 = *(_QWORD *)(v0 + 312);
  v49 = *(_QWORD *)(v0 + 256);
  v50 = *(_QWORD *)(v0 + 264);
  v51 = swift_task_alloc();
  *(_QWORD *)(v51 + 16) = v49;
  *(_QWORD *)(v51 + 24) = v50;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (uint64_t (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedgerMetadata_AttachmentMetadata);
  static Message.with(_:)();
  v52 = swift_task_dealloc();
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 368))(v52);
  *(_QWORD *)(v0 + 536) = v53;
  if (!v53)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Log.attachmentLedgerTopic);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_1ACCCC000, v56, v57, "UploadToken task was never started", v58, 2u);
      MEMORY[0x1AF44981C](v58, -1, -1);
    }
    v59 = *(_QWORD *)(v0 + 528);
    v60 = *(_QWORD *)(v0 + 520);
    v61 = *(_QWORD *)(v0 + 512);
    v62 = *(_QWORD *)(v0 + 496);

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v63 = 1;
    swift_willThrow();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v62, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    goto LABEL_17;
  }
  v54 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 544) = v54;
  *(_QWORD *)(v0 + 552) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v54 = v0;
  v54[1] = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 560) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  void (*v19)(_QWORD *__return_ptr, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[2];
  _QWORD v62[3];
  __int128 v63;
  unint64_t v64[3];
  __int128 v65;

  v58 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 472);
  v1 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 464);
  v4 = *(int **)(v0 + 448);
  v49 = *(_QWORD *)(v0 + 424);
  v50 = *(_QWORD *)(v0 + 416);
  v59 = *(_QWORD *)(v0 + 408);
  v60 = *(_QWORD *)(v0 + 440);
  v51 = *(_QWORD *)(v0 + 376);
  v52 = *(_QWORD *)(v0 + 368);
  v56 = *(_QWORD **)(v0 + 312);
  v57 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 288);
  v46 = *(_QWORD *)(v0 + 296);
  v47 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v44 = v6;
  v8 = *(_QWORD *)(v0 + 248);
  v54 = *(_QWORD *)(v0 + 256);
  v55 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 240);
  v48 = *(_QWORD *)(v0 + 232);
  v45 = *(_QWORD *)(v0 + 224);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 16))(v3, *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 512));
  v10 = (uint64_t *)(v1 + *(int *)(v2 + 28));
  v11 = v10[1];
  v43 = *v10;
  v12 = v3 + v4[8];
  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v7, v13);
  v14 = (uint64_t *)(v3 + v4[5]);
  *v14 = v9;
  v14[1] = v8;
  v15 = (_QWORD *)(v3 + v4[6]);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0xF000000000000000;
  v16 = (_QWORD *)(v3 + v4[7]);
  *v16 = v43;
  v16[1] = v11;
  v17 = (uint64_t *)(v3 + v4[9]);
  *v17 = v6;
  v17[1] = v5;
  v18 = (uint64_t *)(v3 + v4[10]);
  *v18 = v46;
  v18[1] = v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v60, v45, v50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v59, v48, v52);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v3, v57, type metadata accessor for Attachment.MMCSMetadata);
  v61[0] = v54;
  v61[1] = v55;
  outlined init with copy of UserNotificationCenter((uint64_t)(v56 + 26), v0 + 112);
  v53 = v56[13];
  v19 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*v56 + 392);
  outlined copy of Data._Representation(v9, v8);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v44, v5);
  outlined copy of Data._Representation(v46, v47);
  v20 = outlined copy of Data?(v54, v55);
  v19(v62, v20);
  v64[0] = v62[0];
  v64[1] = v62[1];
  v64[2] = v62[2];
  v65 = v63;
  type metadata accessor for Attachment(0);
  swift_allocObject();
  v21 = Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(v60, v59, v57, v61, (_QWORD *)(v0 + 112), v53, v64);
  *(_QWORD *)(v0 + 568) = v21;
  if (v58)
  {
    v22 = *(_QWORD *)(v0 + 528);
    v23 = *(_QWORD *)(v0 + 520);
    v24 = *(_QWORD *)(v0 + 512);
    v25 = *(_QWORD *)(v0 + 496);
    v26 = *(_QWORD *)(v0 + 480);
    v27 = *(_QWORD *)(v0 + 464);
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v27, type metadata accessor for Attachment.MMCSMetadata);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v26, type metadata accessor for UploadToken);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v25, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v28 = v21;
    v29 = *(_QWORD *)(v0 + 312);
    v30 = swift_task_alloc();
    *(_QWORD *)(v30 + 16) = v29;
    *(_QWORD *)(v30 + 24) = v28;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
    static Message.with(_:)();
    v32 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc();
    v33 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
    *(_QWORD *)(v0 + 576) = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
    v34 = *(void **)(v32 + v33);
    v35 = swift_allocObject();
    *(_QWORD *)(v0 + 584) = v35;
    *(_QWORD *)(v35 + 16) = v32;
    *(_QWORD *)(v35 + 24) = v28;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = partial apply for closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
    *(_QWORD *)(v36 + 24) = v35;
    *(_QWORD *)(v0 + 48) = thunk for @callee_guaranteed () -> ()partial apply;
    *(_QWORD *)(v0 + 56) = v36;
    *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> ();
    *(_QWORD *)(v0 + 40) = &block_descriptor_25;
    v37 = _Block_copy((const void *)(v0 + 16));
    v38 = v34;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v38, v37);

    _Block_release(v37);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v28 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v39 = *(_QWORD *)(v0 + 360);
      v40 = *(_QWORD *)(v0 + 312);
      v41 = swift_task_alloc();
      *(_QWORD *)(v0 + 592) = v41;
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = v39;
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 600) = v42;
      *v42 = v0;
      v42[1] = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
      return withCheckedThrowingContinuation<A>(isolation:function:_:)();
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 608) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(_QWORD *)(v2 + 344);
    swift_task_dealloc();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v3, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 496);
  v5 = *(_QWORD *)(v0 + 480);
  v6 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 360);
  swift_release();
  swift_release();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v6, type metadata accessor for Attachment.MMCSMetadata);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v5, type metadata accessor for UploadToken);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v4, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 496);
  swift_release();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v4, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v1 = v0[72];
  v2 = v0[71];
  v3 = v0[39];
  swift_task_dealloc();
  v4 = *(void **)(v3 + v1);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  v6 = swift_allocObject();
  v0[8] = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v6 + 16) = partial apply for closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  *(_QWORD *)(v6 + 24) = v5;
  v0[12] = thunk for @callee_guaranteed () -> ()partial apply;
  v0[13] = v6;
  v0[9] = 1107296256;
  v0[10] = thunk for @escaping @callee_guaranteed () -> ();
  v0[11] = &block_descriptor_36;
  v7 = _Block_copy(v0 + 8);
  swift_retain();
  swift_retain();
  v8 = v4;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v7);

  _Block_release(v7);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else if (one-time initialization token for attachmentLedgerTopic == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v9 = (void *)v0[76];
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain();
  swift_retain();
  v11 = v9;
  swift_retain();
  swift_retain();
  v12 = v9;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = (void *)v0[76];
  if (v15)
  {
    v17 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v34[0] = v33;
    *(_DWORD *)v17 = 136315650;
    v18 = PluginAttachmentLedgerTopic.description.getter();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v17 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v17 + 22) = 2080;
    v0[26] = v16;
    v22 = v16;
    v23 = String.init<A>(reflecting:)();
    v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v13, v14, "%s Failed to upload attachment %s, reason: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();

  }
  v32 = v0[66];
  v25 = v0[65];
  v26 = v0[64];
  v27 = v0[62];
  v28 = v0[60];
  v29 = v0[58];
  v30 = v0[45];
  swift_willThrow();
  swift_release();
  swift_release();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v30, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v29, type metadata accessor for Attachment.MMCSMetadata);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v28, type metadata accessor for UploadToken);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v27, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v32, v26);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t closure #1 in Attachment.Metadata.sealedMetadata(with:)(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, unint64_t))
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  if (a3 >> 60 != 15)
  {
    v7 = (uint64_t *)(result + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20));
    v8 = *v7;
    v9 = v7[1];
    a4(a2, a3);
    result = outlined consume of Data?(v8, v9);
    *v7 = a2;
    v7[1] = a3;
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t updated;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  v13 = a2;
  v14 = a3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  result = static Message.with(_:)();
  if (!v3)
  {
    updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(v9, 0, 1, updated);
    return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v9, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  return result;
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v10;
  a1[1] = v9;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  result = static Message.with(_:)();
  if (!v2)
  {
    v12 = (uint64_t)a1
        + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0) + 24);
    outlined destroy of UUID?(v12, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, v12, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v5);
  }
  return result;
}

uint64_t closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(_BYTE *);
  uint64_t (*v5)(_BYTE *, _QWORD);
  uint64_t *v6;
  uint64_t *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _BYTE v11[32];

  v3 = a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v4 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 600);
  swift_retain();
  v5 = (uint64_t (*)(_BYTE *, _QWORD))v4(v11);
  v7 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v7;
  *v7 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v3, isUniquelyReferenced_nonNull_native);
  *v7 = v10;
  swift_bridgeObjectRelease();
  return v5(v11, 0);
}

uint64_t closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 600))(v5);
  specialized Dictionary._Variant.removeValue(forKey:)(v2);
  swift_release();
  return v3(v5, 0);
}

uint64_t PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  *(_QWORD *)(v3 + 40) = swift_task_alloc();
  *(_QWORD *)(v3 + 48) = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  *(_QWORD *)(v3 + 64) = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  *(_QWORD *)(v3 + 72) = swift_task_alloc();
  *(_QWORD *)(v3 + 80) = swift_task_alloc();
  *(_OWORD *)(v3 + 88) = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 104) = *(_QWORD *)(a2 + 16);
  return swift_task_switch();
}

uint64_t PluginAttachmentLedgerTopic.updateStatus(id:status:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[11];
  v5 = v0[2];
  v4 = v0[3];
  v6 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  v7 = (_QWORD *)swift_task_alloc();
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v3;
  v7[5] = v2;
  v7[6] = v1;
  v8 = v6;
  OS_dispatch_queue.sync<A>(execute:)();

  swift_task_dealloc();
  v9 = v0[9];
  v10 = v0[5];
  v11 = v0[3];
  outlined init with take of ActivitySession.DomainAssertionWrapper(v0[10], v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  *(_QWORD *)(swift_task_alloc() + 16) = v9;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
  static Message.with(_:)();
  swift_task_dealloc();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  v12 = swift_task_alloc();
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = (_QWORD *)swift_task_alloc();
  v0[15] = v13;
  *v13 = v0;
  v13[1] = PluginAttachmentLedgerTopic.updateStatus(id:status:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(_QWORD *)(v2 + 56);
    v4 = *(_QWORD *)(v2 + 40);
    swift_task_dealloc();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v3, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t updated;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  os_log_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t (*v86)(_QWORD *);
  void (*v87)(_QWORD *, _QWORD);
  uint64_t *v88;
  uint64_t *v89;
  char isUniquelyReferenced_nonNull_native;
  _BYTE *v91;
  _QWORD v92[2];
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t *v96;
  char *v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  char *v100;
  os_log_t v101;
  uint64_t (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[4];
  uint64_t v108;

  v104 = a4;
  v103 = a3;
  v99 = a6;
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  MEMORY[0x1E0C80A78](v95);
  v96 = (_QWORD *)((char *)v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = type metadata accessor for UUID();
  v10 = *(_QWORD **)(v106 - 8);
  v11 = (void (*)(char *, uint64_t))v10[8];
  v12 = MEMORY[0x1E0C80A78](v106);
  v100 = (char *)v92 - (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v101 = (os_log_t)((char *)v92 - v14);
  v15 = MEMORY[0x1E0C80A78](v13);
  v97 = (char *)v92 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v92 - v18;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 584))(v17);
  if (*(_QWORD *)(v20 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v22 & 1) != 0))
  {
    v23 = *(char **)(*(_QWORD *)(v20 + 56) + 8 * v21);
    swift_retain();
    swift_bridgeObjectRelease();
    v102 = (uint64_t (*)(char *, uint64_t, uint64_t))v10[2];
    v24 = v102(v19, a2, v106);
    if (v23)
    {
      v25 = (void (*)(char *, uint64_t))v10[1];
      v25(v19, v106);
      goto LABEL_8;
    }
    v98 = v11;
    v27 = a2;
    v26 = a5;
  }
  else
  {
    v98 = v11;
    v26 = a5;
    swift_bridgeObjectRelease();
    v27 = a2;
    v102 = (uint64_t (*)(char *, uint64_t, uint64_t))v10[2];
    v24 = v102(v19, a2, v106);
  }
  v28 = v10;
  v29 = a1;
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(v24);
  MEMORY[0x1E0C80A78](v30);
  v92[-2] = v19;
  v31 = v105;
  v32 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), (uint64_t)&v92[-4], v30);
  v105 = v31;
  swift_bridgeObjectRelease();
  v33 = v28;
  v25 = (void (*)(char *, uint64_t))v28[1];
  v25(v19, v106);
  if (v32)
  {
    a5 = v26;
    a2 = v27;
    v23 = (char *)v32;
    v10 = v33;
    a1 = v29;
    v11 = v98;
LABEL_8:
    if (a5 >> 60 == 15)
    {
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      *v34 = 1;
      swift_willThrow();
      return swift_release();
    }
    else
    {
      v94 = v10;
      v98 = v25;
      updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
      v97 = v23;
      MEMORY[0x1E0C80A78](updated);
      if (a5 >> 60 == 11)
      {
        v92[-2] = a1;
        v92[-1] = v23;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
        v37 = (void *)v105;
        v38 = static Message.with(_:)();
        v39 = v37;
      }
      else
      {
        v92[-6] = a1;
        v92[-5] = v23;
        v58 = v103;
        v92[1] = v92;
        v59 = v104;
        v92[-4] = v103;
        v92[-3] = v59;
        v92[-2] = a5;
        outlined copy of Data._Representation(v59, a5);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
        v60 = (void *)v105;
        static Message.with(_:)();
        v39 = v60;
        v38 = outlined consume of Attachment.MMCSMetadata.UploadStatus(v58, v59, a5);
      }
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 608))(v38);
      v62 = *(_QWORD *)(v61 + 16);
      v93 = a5;
      if (v62 && (v63 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v64 & 1) != 0))
      {
        v65 = *(void (**)(uint64_t))(*(_QWORD *)(v61 + 56) + 16 * v63);
        swift_retain();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
        v66 = swift_allocError();
        *v67 = 5;
        v68 = (uint64_t)v96;
        *v96 = v66;
        swift_storeEnumTagMultiPayload();
        v65(v68);
        if (v39)
        {
          v69 = a2;
          swift_release();

          outlined destroy of UUID?(v68, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
          v105 = 0;
        }
        else
        {
          v105 = 0;
          v69 = a2;
          outlined destroy of UUID?(v68, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
          swift_release();
        }
      }
      else
      {
        v105 = (uint64_t)v39;
        v69 = a2;
        swift_bridgeObjectRelease();
      }
      v71 = v101;
      v70 = (void (*)(char *, uint64_t, uint64_t))v102;
      v72 = v69;
      v73 = v69;
      v74 = v106;
      v102((char *)v101, v73, v106);
      v75 = swift_allocObject();
      swift_weakInit();
      v76 = v100;
      v70(v100, v72, v74);
      v77 = a1;
      v78 = v94;
      v79 = (*((unsigned __int8 *)v94 + 80) + 24) & ~(unint64_t)*((unsigned __int8 *)v94 + 80);
      v80 = ((unint64_t)v11 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      v81 = swift_allocObject();
      *(_QWORD *)(v81 + 16) = v75;
      ((void (*)(unint64_t, char *, uint64_t))v78[4])(v81 + v79, v76, v74);
      v82 = (_QWORD *)(v81 + v80);
      v83 = v103;
      v84 = v104;
      *v82 = v103;
      v82[1] = v84;
      v85 = v93;
      v82[2] = v93;
      v86 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v77 + 624);
      outlined copy of Attachment.MMCSMetadata.UploadStatus(v83, v84, v85);
      swift_retain();
      v87 = (void (*)(_QWORD *, _QWORD))v86(v107);
      v89 = v88;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v108 = *v89;
      *v89 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), v81, (uint64_t)v71, isUniquelyReferenced_nonNull_native);
      *v89 = v108;
      swift_bridgeObjectRelease();
      v98((char *)v71, v74);
      v87(v107, 0);
      swift_release();
      return swift_release();
    }
  }
  v98 = v25;
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Log.attachmentLedgerTopic);
  v41 = v97;
  v102(v97, v27, v106);
  swift_retain();
  v42 = v103;
  v43 = v104;
  outlined copy of Attachment.MMCSMetadata.UploadStatus(v103, v104, v26);
  swift_retain();
  outlined copy of Attachment.MMCSMetadata.UploadStatus(v42, v43, v26);
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.error.getter();
  v46 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    v47 = swift_slowAlloc();
    LODWORD(v102) = v46;
    v48 = v47;
    v105 = swift_slowAlloc();
    v108 = v105;
    *(_DWORD *)v48 = 136315650;
    v101 = v44;
    v49 = PluginAttachmentLedgerTopic.description.getter();
    v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v48 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v51 = v106;
    v52 = dispatch thunk of CustomStringConvertible.description.getter();
    v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v98(v41, v51);
    *(_WORD *)(v48 + 22) = 2080;
    v107[0] = v42;
    v107[1] = v43;
    v107[2] = v26;
    outlined copy of Attachment.MMCSMetadata.UploadStatus(v42, v43, v26);
    v54 = String.init<A>(reflecting:)();
    v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v42, v43, v26);
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v42, v43, v26);
    v56 = v101;
    _os_log_impl(&dword_1ACCCC000, v101, (os_log_type_t)v102, "%s Couldn't find attachment %s when trying to update its status to %s", (uint8_t *)v48, 0x20u);
    v57 = v105;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v57, -1, -1);
    MEMORY[0x1AF44981C](v48, -1, -1);

  }
  else
  {
    swift_release_n();
    v98(v41, v106);
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v42, v43, v26);
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v42, v43, v26);

  }
  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
  swift_allocError();
  *v91 = 4;
  return swift_willThrow();
}

uint64_t closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t updated;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a6;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v12 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v15;
  a1[1] = v16;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = v20;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  static Message.with(_:)();
  v17 = (uint64_t)a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0) + 24);
  outlined destroy of UUID?(v17, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v14, v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, updated);
}

uint64_t closure #1 in closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v22 = UUID.uuid.getter();
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  v29 = v14;
  v30 = v15;
  v16 = specialized Data.init<A>(_:)((uint64_t)&v22, (uint64_t)&v31);
  v18 = v17;
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 24) = 1;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  outlined copy of Data._Representation(a4, a5);
  result = outlined consume of Data._Representation(v19, v20);
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  return result;
}

uint64_t closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(_QWORD *a1, uint64_t a2)
{
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v5 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v9;
  a1[1] = v8;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  static Message.with(_:)();
  v10 = (uint64_t)a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0) + 24);
  outlined destroy of UUID?(v10, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v10, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, updated);
}

uint64_t closure #1 in closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = UUID.uuid.getter();
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v10 = specialized Data.init<A>(_:)((uint64_t)&v14, (uint64_t)&v23);
  v12 = v11;
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t Strong;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint8_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  unint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;

  v88 = a6;
  v82 = a4;
  v83 = a5;
  v90 = a3;
  v87 = type metadata accessor for UUID();
  v89 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v86 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (void **)((char *)v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v81 - v12;
  v84 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  v14 = MEMORY[0x1E0C80A78](v84);
  v85 = (uint64_t)v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v81 - v17;
  MEMORY[0x1E0C80A78](v16);
  v92 = (uint64_t)v81 - v19;
  v20 = type metadata accessor for DispatchPredicate();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (_QWORD *)((char *)v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return;
  v91 = Strong;
  v25 = *(void **)(Strong + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v23 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x1E0DEF740], v20);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_46:
    swift_once();
LABEL_10:
    v38 = type metadata accessor for Logger();
    v39 = __swift_project_value_buffer(v38, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v20, (uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.default.getter();
    v42 = os_log_type_enabled(v40, v41);
    v81[1] = v39;
    if (v42)
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v44 = swift_slowAlloc();
      *(_DWORD *)v43 = 136315138;
      v96 = v44;
      v45 = v18[24];
      v93 = *((_QWORD *)v18 + 2);
      LOBYTE(v94) = v45;
      v46 = String.init<A>(reflecting:)();
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v20 = v92;
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      _os_log_impl(&dword_1ACCCC000, v40, v41, "Received message ACK. Updating status to %s", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v44, -1, -1);
      MEMORY[0x1AF44981C](v43, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    }

    v48 = v90;
    v49 = *(uint64_t (**)(void))(*(_QWORD *)v91 + 632);
    v50 = v49();
    MEMORY[0x1E0C80A78](v50);
    v81[-2] = v48;
    v51 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), (uint64_t)&v81[-4], v50);
    v53 = v52;
    swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
    {
      v56 = v89;
      v57 = v86;
      v58 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v86, v48, v87);
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        v62 = swift_slowAlloc();
        v93 = v62;
        *(_DWORD *)v61 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v63 = dispatch thunk of CustomStringConvertible.description.getter();
        v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v93);
        v20 = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v57, v58);
        _os_log_impl(&dword_1ACCCC000, v59, v60, "Can't find attachment with id: %s", v61, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v62, -1, -1);
        MEMORY[0x1AF44981C](v61, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
      }

      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      v67 = 4;
      goto LABEL_30;
    }
    v54 = *(_QWORD *)(v20 + 16);
    v55 = v88;
    if (*(_BYTE *)(v20 + 24) == 1 && v54 == 1)
    {
      if (v88 >> 60 == 15)
        goto LABEL_31;
      goto LABEL_35;
    }
    v65 = v88 & 0xF000000000000000;
    if (v88 >> 60 == 15)
    {
      if (v54 == 1)
      {
LABEL_25:
        while (2)
        {
          if (*(_BYTE *)(v20 + 24))
          {
            switch(v54)
            {
              case 0:
                break;
              case 1:
                goto LABEL_31;
              case 2:
                if (v88 >> 60 == 15 || v65 == 0xB000000000000000)
                  goto LABEL_31;
                v75 = *(_QWORD *)(v20 + 32);
                v76 = v83;
                outlined copy of Data._Representation(v83, v88);
                v77 = outlined copy of Data._Representation(v76, v55);
                v78 = ((uint64_t (*)(uint64_t))v49)(v77);
                if ((v78 & 0xC000000000000001) == 0)
                {
                  if ((v51 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
                  }
                  else if (v51 < *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
                    swift_retain();
LABEL_44:
                    swift_bridgeObjectRelease();
                    v93 = v75;
                    v79 = v83;
                    v94 = v83;
                    v95 = v55;
                    Attachment.update(_:)();
                    swift_release();
                    swift_release();
                    v80 = v82;
                    outlined consume of Attachment.MMCSMetadata.UploadStatus(v82, v79, v55);
                    outlined consume of Attachment.MMCSMetadata.UploadStatus(v80, v79, v55);
                    goto LABEL_32;
                  }
                  __break(1u);
                  JUMPOUT(0x1ACD58344);
                }
                MEMORY[0x1AF448904](v51, v78);
                goto LABEL_44;
              default:
                continue;
            }
          }
          break;
        }
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
        swift_allocError();
        v67 = 1;
LABEL_30:
        *v66 = v67;
        swift_willThrow();
        goto LABEL_31;
      }
    }
    else if (v65 != 0xB000000000000000 && v54 == 2)
    {
      goto LABEL_25;
    }
LABEL_35:
    v68 = v85;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v20, v85, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v69, v70))
    {
      swift_release();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v68, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);

      goto LABEL_32;
    }
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = swift_slowAlloc();
    v93 = v72;
    *(_DWORD *)v71 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    v73 = Message.debugDescription.getter();
    v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20 = v92;
    outlined destroy of ActivitySession.DomainAssertionWrapper(v68, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    _os_log_impl(&dword_1ACCCC000, v69, v70, "Dropping ack response %s", v71, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v72, -1, -1);
    MEMORY[0x1AF44981C](v71, -1, -1);

LABEL_31:
    swift_release();
LABEL_32:
    outlined destroy of ActivitySession.DomainAssertionWrapper(v20, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    return;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v13, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v20 = v92;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v13, v92, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_10;
    goto LABEL_46;
  }
  outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v11, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = *v11;
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.attachmentLedgerTopic);
    v29 = v27;
    v30 = v27;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v93 = v34;
      *(_DWORD *)v33 = 136315138;
      v96 = (uint64_t)v27;
      v35 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v36 = String.init<A>(reflecting:)();
      v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v31, v32, "ACK message wasn't received for reason: %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v34, -1, -1);
      MEMORY[0x1AF44981C](v33, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();

    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
    swift_release();
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  if (a3 >> 62)
    goto LABEL_14;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v7 = 0;
  if (v6)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v8 = MEMORY[0x1AF448904](v7, a3);
      }
      else
      {
        v8 = *(_QWORD *)(a3 + 8 * v7 + 32);
        swift_retain();
      }
      v12 = v8;
      v9 = a1(&v12);
      swift_release();
      if (v3 || (v9 & 1) != 0)
        break;
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v7 = 0;
        if (!v6)
          return v7;
      }
      else
      {
        ++v7;
        if (v10 == v6)
          return 0;
      }
    }
  }
  return v7;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(a1, 0, 1, updated);
}

uint64_t PluginAttachmentLedgerTopic.remove(id:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for UUID();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v2[10] = swift_task_alloc();
  v2[11] = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PluginAttachmentLedgerTopic.remove(id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v0 + 40) + 288))(&v34);
  v1 = v34;
  v2 = v37;
  v3 = v39;
  if ((v39 & 0x8000000000000000) == 0
    || ((v4 = v36 | v35, v5 = v38 | v40, v39 == 0x8000000000000000)
      ? (v6 = (v36 | v35 | v34 | v37 | v38 | v40) == 0)
      : (v6 = 0),
        v6))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v34, v35, v36, v37, v38, v39);
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v34, v35, v36, v37, v38, v39);
    if (v3 == 0x8000000000000000 && v1 == 1 && !(v4 | v2 | v5))
    {
      v7 = *(_QWORD *)(v0 + 96);
      v8 = *(_QWORD *)(v0 + 32);
      v9 = *(_QWORD *)(v0 + 40);
      v10 = swift_task_alloc();
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = v8;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
      static Message.with(_:)();
      swift_task_dealloc();
      v11 = swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v11;
      *(_QWORD *)(v11 + 16) = v9;
      *(_QWORD *)(v11 + 24) = v7;
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v12;
      *v12 = v0;
      v12[1] = PluginAttachmentLedgerTopic.remove(id:);
      return withCheckedThrowingContinuation<A>(isolation:function:_:)();
    }
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v14 = *(_QWORD *)(v0 + 32);
  v16 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 48);
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
  swift_retain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(_QWORD *)(v0 + 56);
  v23 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 48);
  if (v21)
  {
    type = v20;
    v25 = swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v25 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v26 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    *(_WORD *)(v25 + 12) = 2080;
    swift_retain();
    v28 = PluginAttachmentLedgerTopic.description.getter();
    v30 = v29;
    swift_release();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v19, type, "Dropping request to remove attachment %s because state of PluginAttachmentLedgerTopic is invalid %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v32, -1, -1);
    MEMORY[0x1AF44981C](v25, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    swift_release_n();
  }

  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
  swift_allocError();
  *v31 = 3;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(_QWORD *)(v2 + 80);
    swift_task_dealloc();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v3, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 96), type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.remove(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t updated;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  v12 = a2;
  v13 = a3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  static Message.with(_:)();
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(v8, 0, 1, updated);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.remove(id:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 112);
  v3 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  v17 = UUID.uuid.getter();
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v11;
  v25 = v12;
  v13 = specialized Data.init<A>(_:)((uint64_t)&v17, (uint64_t)&v26);
  v15 = v14;
  result = outlined consume of Data._Representation(a1[2], a1[3]);
  a1[2] = v13;
  a1[3] = v15;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.setupSubscribeStream()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v2);
  v52 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  MEMORY[0x1E0C80A78](v4);
  v53 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Publishers.PrefetchStrategy();
  v7 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>>);
  v10 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
  v18 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v16 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E0DEF740], v13);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v18 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>);
    swift_allocObject();
    v21 = PassthroughSubject.init()();
    PluginAttachmentLedgerTopic.subscribeStreamInput.willset(v21);
    v22 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput;
    *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput) = v21;
    swift_release();
    v57 = *(_QWORD *)((char *)v1 + v22);
    v23 = *MEMORY[0x1E0C958B8];
    v45 = v1;
    v24 = v7;
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
    v26 = v47;
    v25(v9, v23, v47);
    v27 = *MEMORY[0x1E0C958E8];
    v46 = v17;
    v44 = v10;
    v28 = v48;
    v29 = v49;
    v30 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 104))(v48, v27, v51);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<AttachmentLedger_SubscribeRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>, MEMORY[0x1E0C95F48]);
    swift_retain();
    Publisher.buffer(size:prefetch:whenFull:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v26);
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>>, MEMORY[0x1E0C95AB8]);
    v31 = v50;
    v32 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v31);
    v33 = v45;
    v34 = v45[24];
    v35 = v45[25];
    __swift_project_boxed_opaque_existential_1(v45 + 21, v34);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v32, v34, v35);
    v56 = *(id *)((char *)v33 + v46);
    v37 = v56;
    v57 = v36;
    v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    v39 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v52, 1, 1, v38);
    v40 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>);
    type metadata accessor for OS_dispatch_queue();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
    v41 = v53;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_allocObject();
    swift_weakInit();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
    v42 = v55;
    v43 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v41, v42);
    *(_QWORD *)((char *)v33
              + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = v43;
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    a3(a1);
    return swift_release();
  }
  return result;
}

uint64_t PluginAttachmentLedgerTopic.handleSubscribeStreamClosed(completedWith:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[5];
  unint64_t v51;
  _QWORD *v52;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v47 = (uint64_t)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v43 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v45 = (uint64_t)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v46 = (uint64_t)v43 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v43 - v15;
  v17 = type metadata accessor for DispatchPredicate();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (_QWORD *)((char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DEF740], v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.attachmentLedgerTopic);
  v48 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  swift_retain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v50[0] = v44;
    *(_DWORD *)v26 = 136315394;
    v27 = PluginAttachmentLedgerTopic.description.getter();
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v50);
    v43[1] = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v16, (uint64_t)v8, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    v29 = v47;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, v47, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v29, 1, v9) == 1)
    {
      v30 = 0xE300000000000000;
      v31 = 7104878;
    }
    else
    {
      v32 = v29;
      v33 = v46;
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v32, v46, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, v45, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
      v31 = String.init<A>(reflecting:)();
      v30 = v34;
      outlined destroy of UUID?(v33, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    }
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>?);
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    _os_log_impl(&dword_1ACCCC000, v24, v25, "%s Subscribe stream closed for reason: %s", (uint8_t *)v26, 0x16u);
    v35 = v44;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v35, -1, -1);
    MEMORY[0x1AF44981C](v26, -1, -1);
  }
  else
  {
    swift_release_n();
    outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  }

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 288))(v50);
  v36 = v51;
  result = outlined consume of PluginAttachmentLedgerTopic.State(v50[0], v50[1], v50[2], v50[3], v50[4], v51);
  if (v36 >> 62 != 1)
  {
    v38 = Subscribers.Completion<>.pluginShutdownReason.getter((char *)&v49);
    v39 = v49;
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 584))(v38);
    v41 = specialized _copyCollectionToContiguousArray<A>(_:)(v40);
    v42 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 392))(v50, v42);
    v51 = v39 | 0x4000000000000000;
    v52 = v41;
    return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 352))(v50);
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t aBlock;
  uint64_t v66;

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v56 = *(_QWORD *)(v2 - 8);
  v57 = v2;
  MEMORY[0x1E0C80A78](v2);
  v55 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for DispatchQoS();
  v53[4] = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v53[3] = (char *)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for DispatchTime();
  v53[2] = *(_QWORD *)(v59 - 8);
  v5 = MEMORY[0x1E0C80A78](v59);
  v53[1] = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v58 = (char *)v53 - v7;
  v61 = type metadata accessor for AttachmentLedger_SubscribeResponse(0);
  MEMORY[0x1E0C80A78](v61);
  v63 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  v9 = MEMORY[0x1E0C80A78](v60);
  v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v53 - v12;
  v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v14);
  v64 = (uint64_t)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v53 - v24;
  v62 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    return outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  v28 = (uint64_t)v25;
  if (!Strong)
  {
    v32 = (uint64_t)v25;
    return outlined destroy of ActivitySession.DomainAssertionWrapper(v32, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  v29 = Strong;
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, (uint64_t)v23, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t)v13, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
      PluginAttachmentLedgerTopic.processAttachmentUpdate(_:)((uint64_t)v13);
      v33 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo;
      v34 = *(_QWORD *)(v29 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo);
      if (!v34)
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper(v28, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
        v35 = v60;
LABEL_22:
        v52 = *(_QWORD *)&v13[*(int *)(v35 + 20)];
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
        *(_QWORD *)(v29 + v33) = v52;
        return swift_release();
      }
      v35 = v60;
      v36 = *(_QWORD *)&v13[*(int *)(v60 + 20)];
      v37 = v36 >= v34;
      v38 = v36 - v34;
      if (v37)
      {
        if (v38 == 1)
          goto LABEL_20;
        if (one-time initialization token for attachmentLedgerTopic == -1)
        {
LABEL_14:
          v39 = type metadata accessor for Logger();
          __swift_project_value_buffer(v39, (uint64_t)static Log.attachmentLedgerTopic);
          outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, (uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
          swift_retain_n();
          v40 = Logger.logObject.getter();
          v41 = static os_log_type_t.default.getter();
          v42 = v41;
          if (os_log_type_enabled(v40, v41))
          {
            v43 = swift_slowAlloc();
            v64 = swift_slowAlloc();
            aBlock = v64;
            *(_DWORD *)v43 = 136315394;
            v53[0] = v28;
            v62 = v43 + 4;
            swift_retain();
            LODWORD(v63) = v42;
            v44 = PluginAttachmentLedgerTopic.description.getter();
            v45 = v29;
            v47 = v46;
            swift_release();
            v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v47, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_release_n();
            *(_WORD *)(v43 + 12) = 2080;
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
            v48 = Message.debugDescription.getter();
            v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v29 = v45;
            outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
            _os_log_impl(&dword_1ACCCC000, v40, (os_log_type_t)v63, "Detected an out of order sequence number for topic %s on attachment update %s", (uint8_t *)v43, 0x16u);
            v50 = v64;
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v50, -1, -1);
            MEMORY[0x1AF44981C](v43, -1, -1);

            v51 = v53[0];
LABEL_21:
            outlined destroy of ActivitySession.DomainAssertionWrapper(v51, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
            goto LABEL_22;
          }

          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
          swift_release_n();
LABEL_20:
          v51 = v28;
          goto LABEL_21;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once();
      goto LABEL_14;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    swift_release();
    v32 = (uint64_t)v23;
    return outlined destroy of ActivitySession.DomainAssertionWrapper(v32, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  v31 = v64;
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v23, v64, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  PluginAttachmentLedgerTopic.processInitializeAck(_:)(v31);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v31, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  *(_QWORD *)(v29 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo) = 0;
  return swift_release();
}

