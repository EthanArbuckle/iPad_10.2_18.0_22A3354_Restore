uint64_t initializeWithTake for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  _OWORD *v44;
  unsigned int (*v45)(_QWORD *, uint64_t);
  uint64_t v46;
  _QWORD *__dst;
  uint64_t v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[7];
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v24 = *((_QWORD *)v20 + 3);
    *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
    *((_QWORD *)v19 + 3) = v24;
    *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
    *(_OWORD *)((char *)v19 + 40) = *(_OWORD *)((char *)v20 + 40);
    v10((uint64_t)v19 + *(int *)(v21 + 32), (uint64_t)v20 + *(int *)(v21 + 32), v9);
    v25 = *(int *)(v21 + 36);
    v26 = (_OWORD *)((char *)v19 + v25);
    v27 = (_OWORD *)((char *)v20 + v25);
    v28 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v29 = *((_QWORD *)v28 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v46 = v29;
      v31 = v27[1];
      *v26 = *v27;
      v26[1] = v31;
      v32 = v27[3];
      v26[2] = v27[2];
      v26[3] = v32;
      v10((uint64_t)v26 + v28[8], (uint64_t)v27 + v28[8], v9);
      v33 = v28[9];
      v44 = v26;
      __dst = (_QWORD *)((char *)v26 + v33);
      v34 = (_QWORD *)((char *)v27 + v33);
      v35 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v36 = *(_QWORD *)(v35 - 8);
      v45 = *(unsigned int (**)(_QWORD *, uint64_t))(v36 + 48);
      v48 = v35;
      v43 = v36;
      if (v45(v34, 1))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        *__dst = *v34;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v34 + 1);
        v10((uint64_t)__dst + *(int *)(v48 + 24), (uint64_t)v34 + *(int *)(v48 + 24), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v48);
      }
      v38 = v28[10];
      v39 = (_QWORD *)((char *)v44 + v38);
      v40 = (_QWORD *)((char *)v27 + v38);
      if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v45)(v40, 1, v48))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        *v39 = *v40;
        *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
        v10((uint64_t)v39 + *(int *)(v48 + 24), (uint64_t)v40 + *(int *)(v48 + 24), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v48);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v46 + 56))(v44, 0, 1, v28);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, int *);
  int v26;
  int v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  int *v33;
  unsigned int (**v34)(_OWORD *, uint64_t, int *);
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD, uint64_t, int *);
  size_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, int *);
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v89;
  void (*v90)(uint64_t, char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  unsigned int (*v105)(char *, uint64_t);
  uint64_t v106;
  void *__src;
  void (*__dst)(uint64_t, uint64_t, uint64_t);
  _QWORD *__dsta;
  _QWORD *__dstb;
  uint64_t v111;
  unsigned int (*v112)(char *, uint64_t, uint64_t);
  uint64_t v113;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v111 = *(_QWORD *)(v9 - 8);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 40);
  __dst(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v40 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v40;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  __dst((uint64_t)&v11[*(int *)(v13 + 28)], (uint64_t)&v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = (char *)(a2 + v20);
  v23 = (int *)type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v24 = *((_QWORD *)v23 - 1);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25((uint64_t)v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      v28 = *((_QWORD *)v22 + 3);
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
      *(_QWORD *)(v21 + 24) = v28;
      *(_BYTE *)(v21 + 32) = v22[32];
      *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
      v29 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
      v29(v21 + v23[8], &v22[v23[8]], v9);
      v30 = v23[9];
      v31 = (_OWORD *)(v21 + v30);
      v32 = &v22[v30];
      v33 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v34 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v33 - 1);
      if (((unsigned int (**)(char *, uint64_t, int *))v34)[6](v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        v36 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v24 + 56);
      }
      else
      {
        __src = v34;
        v59 = *((_OWORD *)v32 + 1);
        *v31 = *(_OWORD *)v32;
        v31[1] = v59;
        v60 = *((_OWORD *)v32 + 3);
        v31[2] = *((_OWORD *)v32 + 2);
        v31[3] = v60;
        v29((uint64_t)v31 + v33[8], &v32[v33[8]], v9);
        v61 = v33[9];
        __dstb = (_QWORD *)((char *)v31 + v61);
        v104 = (void (*)(char *, char *, uint64_t))v29;
        v62 = &v32[v61];
        v63 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v64 = *(_QWORD *)(v63 - 8);
        v113 = v63;
        v105 = *(unsigned int (**)(char *, uint64_t))(v64 + 48);
        if (v105(v62, 1))
        {
          v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dstb, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          v66 = v64;
        }
        else
        {
          *__dstb = *(_QWORD *)v62;
          *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v62 + 8);
          v104((char *)__dstb + *(int *)(v113 + 24), &v62[*(int *)(v113 + 24)], v9);
          v66 = v64;
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dstb, 0, 1, v113);
        }
        v67 = v33[10];
        v68 = (_QWORD *)((char *)v31 + v67);
        v69 = &v32[v67];
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v105)(v69, 1, v113))
        {
          v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          *v68 = *(_QWORD *)v69;
          *(_OWORD *)(v68 + 1) = *(_OWORD *)(v69 + 8);
          v104((char *)v68 + *(int *)(v113 + 24), &v69[*(int *)(v113 + 24)], v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v68, 0, 1, v113);
        }
        (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__src + 7))(v31, 0, 1, v33);
        v36 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v24 + 56);
      }
LABEL_38:
      v36(v21, 0, 1, v23);
      return a1;
    }
    goto LABEL_13;
  }
  if (!v27)
  {
    v41 = *(_QWORD *)v21;
    v42 = *(_QWORD *)(v21 + 8);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    outlined consume of Data._Representation(v41, v42);
    *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v21 + 24) = *((_QWORD *)v22 + 3);
    *(_BYTE *)(v21 + 32) = v22[32];
    v43 = *(_QWORD *)(v21 + 40);
    v44 = *(_QWORD *)(v21 + 48);
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    outlined consume of Data._Representation(v43, v44);
    __dst(v21 + v23[8], (uint64_t)&v22[v23[8]], v9);
    v45 = v23[9];
    v21 += v45;
    v46 = &v22[v45];
    v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v47 = *((_QWORD *)v23 - 1);
    v48 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v47 + 48);
    v49 = v48(v21, 1, v23);
    v50 = v48((uint64_t)v46, 1, v23);
    if (v49)
    {
      if (!v50)
      {
        v51 = *((_OWORD *)v46 + 1);
        *(_OWORD *)v21 = *(_OWORD *)v46;
        *(_OWORD *)(v21 + 16) = v51;
        v52 = *((_OWORD *)v46 + 3);
        *(_OWORD *)(v21 + 32) = *((_OWORD *)v46 + 2);
        *(_OWORD *)(v21 + 48) = v52;
        v53 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
        v53(v21 + v23[8], &v46[v23[8]], v9);
        v54 = v23[9];
        __dsta = (_QWORD *)(v21 + v54);
        v55 = &v46[v54];
        v56 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v57 = *(_QWORD *)(v56 - 8);
        v112 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
        if (v112(v55, 1, v56))
        {
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dsta, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          *__dsta = *(_QWORD *)v55;
          *(_OWORD *)(__dsta + 1) = *(_OWORD *)(v55 + 8);
          v53((uint64_t)__dsta + *(int *)(v56 + 24), &v55[*(int *)(v56 + 24)], v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dsta, 0, 1, v56);
        }
        v84 = v23[10];
        v85 = (_QWORD *)(v21 + v84);
        v86 = &v46[v84];
        if (v112(v86, 1, v56))
        {
          v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          *v85 = *(_QWORD *)v86;
          *(_OWORD *)(v85 + 1) = *(_OWORD *)(v86 + 8);
          v53((uint64_t)v85 + *(int *)(v56 + 24), &v86[*(int *)(v56 + 24)], v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v85, 0, 1, v56);
        }
        v36 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v47 + 56);
        goto LABEL_38;
      }
      goto LABEL_24;
    }
    if (v50)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v21, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_24:
      v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      v38 = (void *)v21;
      v39 = v46;
      goto LABEL_14;
    }
    v71 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v46;
    *(_QWORD *)(v21 + 8) = v71;
    swift_bridgeObjectRelease();
    v72 = *((_QWORD *)v46 + 3);
    *(_QWORD *)(v21 + 16) = *((_QWORD *)v46 + 2);
    *(_QWORD *)(v21 + 24) = v72;
    swift_bridgeObjectRelease();
    v73 = *(_QWORD *)(v21 + 32);
    v74 = *(_QWORD *)(v21 + 40);
    *(_OWORD *)(v21 + 32) = *((_OWORD *)v46 + 2);
    outlined consume of Data._Representation(v73, v74);
    v75 = *(_QWORD *)(v21 + 48);
    v76 = *(_QWORD *)(v21 + 56);
    *(_OWORD *)(v21 + 48) = *((_OWORD *)v46 + 3);
    outlined consume of Data._Representation(v75, v76);
    __dst(v21 + v23[8], (uint64_t)&v46[v23[8]], v9);
    v77 = v23[9];
    v78 = (_QWORD *)(v21 + v77);
    v79 = &v46[v77];
    v80 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v106 = *(_QWORD *)(v80 - 8);
    v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48);
    v82 = v81((char *)v78, 1, v80);
    v83 = v81(v79, 1, v80);
    if (v82)
    {
      if (!v83)
      {
        *v78 = *(_QWORD *)v79;
        *(_OWORD *)(v78 + 1) = *(_OWORD *)(v79 + 8);
        (*(void (**)(char *, char *, uint64_t))(v111 + 32))((char *)v78 + *(int *)(v80 + 24), &v79[*(int *)(v80 + 24)], v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v78, 0, 1, v80);
LABEL_43:
        v90 = (void (*)(uint64_t, char *, uint64_t))__dst;
LABEL_44:
        v91 = v23[10];
        v92 = v21 + v91;
        v93 = &v46[v91];
        v94 = v81((char *)v92, 1, v80);
        v95 = v81(v93, 1, v80);
        if (v94)
        {
          if (!v95)
          {
            *(_QWORD *)v92 = *(_QWORD *)v93;
            *(_OWORD *)(v92 + 8) = *(_OWORD *)(v93 + 8);
            (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v92 + *(int *)(v80 + 24), &v93[*(int *)(v80 + 24)], v9);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v106 + 56))(v92, 0, 1, v80);
            return a1;
          }
        }
        else
        {
          if (!v95)
          {
            v101 = *((_QWORD *)v93 + 2);
            v102 = *(_QWORD *)(v92 + 8);
            v103 = *(_QWORD *)(v92 + 16);
            *(_OWORD *)v92 = *(_OWORD *)v93;
            *(_QWORD *)(v92 + 16) = v101;
            outlined consume of Data._Representation(v102, v103);
            v90(v92 + *(int *)(v80 + 24), &v93[*(int *)(v80 + 24)], v9);
            return a1;
          }
          outlined destroy of ActivitySession.DomainAssertionWrapper(v92, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        }
        v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                    - 8)
                        + 64);
        v38 = (void *)v92;
        v39 = v93;
        goto LABEL_14;
      }
    }
    else
    {
      if (!v83)
      {
        v96 = *((_QWORD *)v79 + 2);
        v97 = v78[1];
        v98 = v78[2];
        *(_OWORD *)v78 = *(_OWORD *)v79;
        v78[2] = v96;
        outlined consume of Data._Representation(v97, v98);
        v99 = *(int *)(v80 + 24);
        v100 = (char *)v78 + v99;
        v90 = (void (*)(uint64_t, char *, uint64_t))__dst;
        __dst((uint64_t)v100, (uint64_t)&v79[v99], v9);
        goto LABEL_44;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v78, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_43;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v21, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_13:
  v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                              - 8)
                  + 64);
  v38 = (void *)v21;
  v39 = v22;
LABEL_14:
  memcpy(v38, v39, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF8A80(uint64_t a1, uint64_t a2, int *a3)
{
  return __swift_get_extra_inhabitant_index_103Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t __swift_get_extra_inhabitant_index_103Tm(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = a3[5];
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v12;
      v11 = a3[6];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a3[7];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF8B34(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  return __swift_store_extra_inhabitant_index_104Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t __swift_store_extra_inhabitant_index_104Tm(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = a4[5];
  }
  else
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    v11 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v14;
      v13 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = a4[7];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1 + v13, a2, a2, v12);
}

void type metadata completion function for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_CreateTopicResponse(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

void type metadata completion function for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_ErrorResponse?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
    if (v8 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, a4, a5);
      if (v9 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t Testable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  result = static Testable.isMutable.getter();
  if ((result & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
  __break(1u);
  return result;
}

uint64_t Testable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

BOOL static Testable.isMutable.getter()
{
  NSString *v0;
  Class v1;
  NSString *v3;
  Class v4;

  v0 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v1 = NSClassFromString(v0);

  if (v1)
    return 1;
  v3 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
  v4 = NSClassFromString(v3);

  return v4 != 0;
}

uint64_t Testable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t key path getter for Testable.wrappedValue : <A>Testable<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 + a2 - 8);
  v8 = type metadata accessor for Testable(0, v7, a3, a4);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, v10, v7);
}

uint64_t key path setter for Testable.wrappedValue : <A>Testable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v12 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)&v12 - v5);
  v10 = type metadata accessor for Testable(0, v4, v8, v9);
  return Testable.wrappedValue.setter((uint64_t)v6, v10);
}

void (*Testable.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  void (*v10)(void);

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *v5 = v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[3] = malloc(v8);
  v9 = malloc(v8);
  v10 = *(void (**)(void))(v7 + 16);
  v5[4] = v9;
  v5[5] = v10;
  v10();
  return Testable.wrappedValue.modify;
}

void Testable.wrappedValue.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    ((void (*)(_QWORD, _QWORD, _QWORD))v2[5])(v2[3], v2[4], v2[1]);
    if (static Testable.isMutable.getter())
    {
      v4 = (void *)v2[3];
      v3 = (void *)v2[4];
      v5 = v2[1];
      v6 = v2[2];
      (*(void (**)(_QWORD, void *, uint64_t))(v6 + 40))(*v2, v4, v5);
      (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
LABEL_6:
      free(v3);
      free(v4);
      free(v2);
      return;
    }
    __break(1u);
  }
  else if (static Testable.isMutable.getter())
  {
    v4 = (void *)v2[3];
    v3 = (void *)v2[4];
    (*(void (**)(_QWORD, void *, _QWORD))(v2[2] + 40))(*v2, v3, v2[1]);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_1ACDF9244()
{
  return 8;
}

_QWORD *sub_1ACDF9250(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata instantiation function for Testable()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Testable()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Testable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for Testable(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for Testable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1ACDF94C0 + 4 * byte_1ACF62CD0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Testable(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for Testable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Testable);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1ACDF97A8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ACDF9850()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1ACDF996C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t MachServiceName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1ACDF9A04 + 4 * byte_1ACF62D0C[*v0]))(0xD00000000000002CLL, 0x80000001ACF7C0A0);
}

uint64_t sub_1ACDF9A04(uint64_t a1)
{
  return a1 + 6;
}

CopresenceCore::MachServiceName_optional __swiftcall MachServiceName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  CopresenceCore::MachServiceName_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MachServiceName.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance MachServiceName(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance MachServiceName()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MachServiceName(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance MachServiceName(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

CopresenceCore::MachServiceName_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MachServiceName(Swift::String *a1)
{
  return MachServiceName.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MachServiceName@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MachServiceName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

NSXPCListener __swiftcall NSXPCListener.init(machServiceName:)(CopresenceCore::MachServiceName machServiceName)
{
  NSXPCListener result;

  __asm { BR              X10 }
  return result;
}

id sub_1ACDF9B28()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v2 = (void *)MEMORY[0x1AF4480F4](v0 + 6, 0x80000001ACF7C0D0);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithMachServiceName_, v2);

  return v3;
}

NSXPCConnection __swiftcall NSXPCConnection.init(machServiceName:)(CopresenceCore::MachServiceName machServiceName)
{
  NSXPCConnection result;

  __asm { BR              X10 }
  return result;
}

id sub_1ACDF9BF4()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v2 = (void *)MEMORY[0x1AF4480F4](v0 + 6, 0x80000001ACF7C0D0);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithMachServiceName_options_, v2, 0);

  return v3;
}

unint64_t lazy protocol witness table accessor for type MachServiceName and conformance MachServiceName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachServiceName and conformance MachServiceName;
  if (!lazy protocol witness table cache variable for type MachServiceName and conformance MachServiceName)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for MachServiceName, &type metadata for MachServiceName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachServiceName and conformance MachServiceName);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MachServiceName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACDF9D14 + 4 * byte_1ACF62D1D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACDF9D48 + 4 * byte_1ACF62D18[v4]))();
}

uint64_t sub_1ACDF9D48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACDF9D50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACDF9D58);
  return result;
}

uint64_t sub_1ACDF9D64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACDF9D6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACDF9D70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACDF9D78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MachServiceName()
{
  return &type metadata for MachServiceName;
}

id AddressableMember.handle.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
}

id AddressableMember.__allocating_init(handle:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id AddressableMember.init(handle:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for AddressableMember();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for AddressableMember()
{
  return objc_opt_self();
}

uint64_t AddressableMember.isEqual(_:)(uint64_t a1)
{
  id v1;
  char v2;
  char *v4;
  _BYTE v5[24];
  uint64_t v6;

  outlined init with copy of Any?(a1, (uint64_t)v5);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v5);
    goto LABEL_5;
  }
  type metadata accessor for AddressableMember();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v2 = 0;
    return v2 & 1;
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  v1 = *(id *)&v4[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
  v2 = static NSObject.== infix(_:_:)();

  return v2 & 1;
}

uint64_t static AddressableMember.supportsSecureCoding.getter()
{
  return 1;
}

id AddressableMember.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  v5 = (char *)v4;
  v6 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v6)
  {
    *(_QWORD *)&v5[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v6;

    v9.receiver = v5;
    v9.super_class = v2;
    v7 = objc_msgSendSuper2(&v9, sel_init);

  }
  else
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v7;
}

id AddressableMember.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  id v5;
  objc_super v7;

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    *(_QWORD *)&v3[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v4;

    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for AddressableMember();
    v5 = objc_msgSendSuper2(&v7, sel_init);

  }
  else
  {

    type metadata accessor for AddressableMember();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

Swift::Void __swiftcall AddressableMember.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
  v4 = (id)MEMORY[0x1AF4480F4](0x656C646E6168, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

}

void AddressableMember.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AddressableMember.__deallocating_deinit()
{
  return AddressableMember.__deallocating_deinit(type metadata accessor for AddressableMember);
}

uint64_t AddressableMember.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  swift_getObjectType();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
  v3 = objc_msgSend(v2, sel_description);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3D656C646E616820;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 60;
}

uint64_t AccountMember.isLocalAccount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount);
}

id AccountMember.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AccountMember.init()()
{
  _BYTE *v0;
  objc_super v2;

  v0[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount] = 1;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountMember();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for AccountMember()
{
  return objc_opt_self();
}

uint64_t AccountMember.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _BYTE *v6;
  _BYTE v7[24];
  uint64_t v8;

  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_5;
  }
  type metadata accessor for AccountMember();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v4 = 0;
    return v4 & 1;
  }
  v2 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount);
  v3 = v6[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount];

  v4 = v2 ^ v3 ^ 1;
  return v4 & 1;
}

uint64_t @objc AddressableMember.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

uint64_t static AccountMember.supportsSecureCoding.getter()
{
  return 1;
}

id AccountMember.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  _BYTE *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  objc_super v8;

  v3 = objc_allocWithZone(v1);
  v4 = (void *)MEMORY[0x1AF4480F4](0x416C61636F4C7369, 0xEE00746E756F6363);
  v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id AccountMember.init(coder:)(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  objc_super v8;

  v3 = v1;
  v4 = (void *)MEMORY[0x1AF4480F4](0x416C61636F4C7369, 0xEE00746E756F6363);
  v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount] = v5;
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for AccountMember();
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

Swift::Void __swiftcall AccountMember.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount);
  v4 = (id)MEMORY[0x1AF4480F4](0x416C61636F4C7369, 0xEE00746E756F6363);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v3, v4);

}

id AccountMember.__deallocating_deinit()
{
  return AddressableMember.__deallocating_deinit(type metadata accessor for AccountMember);
}

id AddressableMember.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t instantiation function for generic protocol witness table for AddressableMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AddressableMember(a1, a2, a3, &lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, type metadata accessor for AddressableMember, &lazy protocol witness table cache variable for type AddressableMember and conformance NSObject);
}

uint64_t instantiation function for generic protocol witness table for AccountMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AddressableMember(a1, a2, a3, &lazy protocol witness table cache variable for type AccountMember and conformance NSObject, type metadata accessor for AccountMember, &lazy protocol witness table cache variable for type AccountMember and conformance NSObject);
}

uint64_t instantiation function for generic protocol witness table for AddressableMember(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void), unint64_t *a6)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AddressableMember and conformance NSObject(a4, a5, MEMORY[0x1E0CB2120]);
  result = lazy protocol witness table accessor for type AddressableMember and conformance NSObject(a6, a5, MEMORY[0x1E0DEFCF8]);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type AddressableMember and conformance NSObject(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = MEMORY[0x1AF44972C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for AddressableMember()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AddressableMember.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AddressableMember.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t method lookup function for AccountMember()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AccountMember.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AccountMember.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t specialized NSUserDefaults.get<A>(_:forKey:)()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE v16[32];
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20[4];
  uint64_t v21;
  unsigned __int8 v22;
  _OWORD v23[2];
  _OWORD v24[2];

  v1 = (void *)MEMORY[0x1AF4480F4]();
  v2 = objc_msgSend(v0, sel_valueForKey_, v1);

  if (!v2)
    return 2;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v23, v24);
  outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
  v3 = MEMORY[0x1E0DEAFA0];
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = v22;
    if (v22 != 2)
      goto LABEL_16;
  }
  else
  {
    v22 = 2;
  }
  outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
  if ((swift_dynamicCast() & 1) != 0)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v20[0], v20[1]);
    swift_release();
    v4 = LOBYTE(v23[0]);
    v22 = v23[0];
    if (LOBYTE(v23[0]) != 2)
      goto LABEL_16;
    goto LABEL_9;
  }
  v4 = v22;
  if (v22 == 2)
  {
LABEL_9:
    if (one-time initialization token for default != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v21 = v9;
      *(_DWORD *)v8 = 136315394;
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v20);
      outlined init with copy of Any?((uint64_t)v20, (uint64_t)&v18);
      if (v19)
      {
        outlined init with take of Any(&v18, v17);
        outlined init with copy of Any((uint64_t)v17, (uint64_t)v16);
        v10 = String.init<A>(reflecting:)();
        v12 = v11;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      }
      else
      {
        v12 = 0xE300000000000000;
        v10 = 7104878;
      }
      outlined destroy of Any?((uint64_t)v20);
      v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      *(_WORD *)(v8 + 12) = 2080;
      v20[0] = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool.Type);
      v13 = String.init<A>(reflecting:)();
      v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v6, v7, "Failed to cast value: %s to type: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v9, -1, -1);
      MEMORY[0x1AF44981C](v8, -1, -1);

    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    return 2;
  }
LABEL_16:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  return v4;
}

void *Signposts.defaultsSuiteName.unsafeMutableAddressor()
{
  return &static Signposts.defaultsSuiteName;
}

unint64_t static Signposts.defaultsSuiteName.getter()
{
  return 0xD000000000000019;
}

void one-time initialization function for userDefaults()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1AF4480F4](0xD000000000000019, 0x80000001ACF80A90);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99EA0]), sel_init);
  static Signposts.userDefaults = (uint64_t)v2;
}

uint64_t *Signposts.userDefaults.unsafeMutableAddressor()
{
  if (one-time initialization token for userDefaults != -1)
    swift_once();
  return &static Signposts.userDefaults;
}

id static Signposts.userDefaults.getter()
{
  if (one-time initialization token for userDefaults != -1)
    swift_once();
  return (id)static Signposts.userDefaults;
}

BOOL Signposts.UserDefaultsKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Signposts.UserDefaultsKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t Signposts.UserDefaultsKeys.rawValue.getter()
{
  return 0xD000000000000018;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Signposts.UserDefaultsKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Signposts.UserDefaultsKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Signposts.UserDefaultsKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Signposts.UserDefaultsKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Signposts.UserDefaultsKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Signposts.UserDefaultsKeys(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000001ACF7C170;
}

const char *static Signposts.MessengerEvents.transportMessageSent.getter()
{
  return "transport-message-sent";
}

const char *static Signposts.MessengerEvents.transportMessageRecv.getter()
{
  return "transport-message-received";
}

const char *static Signposts.MessengerEvents.pluginAckRecv.getter()
{
  return "plugin-ack-received";
}

uint64_t one-time initialization function for messenger()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Signposts.messenger);
  __swift_project_value_buffer(v0, (uint64_t)static Signposts.messenger);
  return closure #1 in variable initialization expression of static Signposts.messenger();
}

uint64_t closure #1 in variable initialization expression of static Signposts.messenger()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (one-time initialization token for userDefaults != -1)
    swift_once();
  if ((specialized NSUserDefaults.get<A>(_:forKey:)() & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1ACCCC000, v6, v7, "[Signposts] Messenger enabled", v8, 2u);
      MEMORY[0x1AF44981C](v8, -1, -1);
    }

    return OSSignposter.init(subsystem:category:)();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v0 = type metadata accessor for Logger();
    __swift_project_value_buffer(v0, (uint64_t)static Log.default);
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1ACCCC000, v1, v2, "[Signposts] Messenger disabled", v3, 2u);
      MEMORY[0x1AF44981C](v3, -1, -1);
    }

    return static OSSignposter.disabled.getter();
  }
}

uint64_t static Signposts.messenger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for messenger != -1)
    swift_once();
  v2 = type metadata accessor for OSSignposter();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Signposts.messenger);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void static Signposts.messengerSignpostIdentifier(forPayload:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  if (one-time initialization token for messenger != -1)
    swift_once();
  v4 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v4, (uint64_t)static Signposts.messenger);
  if ((OSSignposter.isEnabled.getter() & 1) != 0)
  {
    outlined copy of Data._Representation(a1, a2);
    specialized OSSignpostID.init<A, B>(hash:using:)(a1, a2);
  }
  else
  {
    OSSignpostID.init(_:)();
  }
}

void specialized OSSignpostID.init<A, B>(hash:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  v3 = type metadata accessor for Insecure.MD5();
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for Insecure.MD5Digest();
  MEMORY[0x1E0C80A78](v4);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Insecure.MD5Digest and conformance Insecure.MD5Digest, v5, MEMORY[0x1E0CA9A40]);
  v6 = dispatch thunk of static Digest.byteCount.getter();
  if ((unint64_t)(v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (v6 >= 8)
    {
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9A18], MEMORY[0x1E0CA9A10]);
      dispatch thunk of HashFunction.init()();
      __asm { BR              X10 }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x1ACDFB8D8);
}

uint64_t OSSignpostID.init<A, B>(hash:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v12[0] = a3;
  v12[3] = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)v12 - v7;
  swift_getAssociatedConformanceWitness();
  v9 = dispatch thunk of static Digest.byteCount.getter();
  if ((unint64_t)(v9 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v9 < 8)
    goto LABEL_5;
  static HashFunction.hash<A>(data:)();
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)closure #1 in OSSignpostID.init<A, B>(hash:using:), 0, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE190], MEMORY[0x1E0DEDD18], v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  OSSignpostID.init(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t *closure #1 in OSSignpostID.init<A, B>(hash:using:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  v3 = -1;
  if (result && (unint64_t)(a2 - (_QWORD)result + 7) >= 0xF)
    v3 = *result;
  *a3 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys;
  if (!lazy protocol witness table cache variable for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Signposts.UserDefaultsKeys, &type metadata for Signposts.UserDefaultsKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys);
  }
  return result;
}

ValueMetadata *type metadata accessor for Signposts()
{
  return &type metadata for Signposts;
}

uint64_t storeEnumTagSinglePayload for Signposts.UserDefaultsKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACDFBB5C + 4 * byte_1ACF62E90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACDFBB7C + 4 * byte_1ACF62E95[v4]))();
}

_BYTE *sub_1ACDFBB5C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACDFBB7C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACDFBB84(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACDFBB8C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACDFBB94(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACDFBB9C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Signposts.UserDefaultsKeys()
{
  return &type metadata for Signposts.UserDefaultsKeys;
}

ValueMetadata *type metadata accessor for Signposts.MessengerEvents()
{
  return &type metadata for Signposts.MessengerEvents;
}

BOOL static BackgroundSessionManagerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BackgroundSessionManagerError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int BackgroundSessionManagerError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t BackgroundSessionManager.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t BackgroundSessionManager.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*BackgroundSessionManager.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t BackgroundSessionManager.sessions.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSessionManager.sessions.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessions);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1E5C85938, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_146);
}

uint64_t (*BackgroundSessionManager.sessions.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundSessionManager.sessions.modify;
}

uint64_t BackgroundSessionManager.sessions.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1E5C85938, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_146);
  return result;
}

uint64_t BackgroundSessionManager.presenceSessions.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSessionManager.presenceSessions.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceSessions);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*BackgroundSessionManager.presenceSessions.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t BackgroundSessionManager.mockIDSGroupSessionProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_mockIDSGroupSessionProvider;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
}

uint64_t BackgroundSessionManager.mockIDSGroupSessionProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_mockIDSGroupSessionProvider;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v3, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_endAccess();
}

uint64_t (*BackgroundSessionManager.mockIDSGroupSessionProvider.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

id BackgroundSessionManager.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue);
}

uint64_t BackgroundSessionManager.serviceProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
  swift_retain();
  return v1;
}

uint64_t BackgroundSessionManager.personalPresenceControllerProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_personalPresenceControllerProvider);
  swift_retain();
  return v1;
}

uint64_t BackgroundSessionManager.presenceControllerProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceControllerProvider);
  swift_retain();
  return v1;
}

uint64_t BackgroundSessionManager.sessionSuspensionControllerProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider);
  swift_retain();
  return v1;
}

id BackgroundSessionManager.__allocating_init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_class *v10;
  id v18;

  v18 = objc_allocWithZone(v10);
  return BackgroundSessionManager.init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id BackgroundSessionManager.init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  objc_super v26;

  *(_QWORD *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v18 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessions] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceSessions] = v18;
  v19 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_mockIDSGroupSessionProvider];
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((_QWORD *)v19 + 4) = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue] = a1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_featureFlags] = a2;
  v20 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider];
  *(_QWORD *)v20 = a3;
  *((_QWORD *)v20 + 1) = a4;
  v21 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_personalPresenceControllerProvider];
  *(_QWORD *)v21 = a5;
  *((_QWORD *)v21 + 1) = a6;
  v22 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceControllerProvider];
  *(_QWORD *)v22 = a7;
  *((_QWORD *)v22 + 1) = a8;
  v23 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider];
  *(_QWORD *)v23 = a9;
  *((_QWORD *)v23 + 1) = a10;
  v26.receiver = v10;
  v26.super_class = (Class)type metadata accessor for BackgroundSessionManager();
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t type metadata accessor for BackgroundSessionManager()
{
  return objc_opt_self();
}

uint64_t BackgroundSessionManager.__allocating_init(clientIdentifier:queue:)(unint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::String v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char **v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(id, id, void (*)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>), uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, _QWORD *(*)(uint64_t, void *), uint64_t, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t *@<X8>), _QWORD);
  uint64_t v30;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = 0;
  v36 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v33 = a3;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = a1;
  v36 = a2;
  v16._countAndFlagsBits = 0x43654D6F54654D2ELL;
  v16._object = (void *)0xEE006C656E6E6168;
  String.append(_:)(v16);
  v17 = v35;
  v18 = v36;
  LOBYTE(v35) = 1;
  v36 = v17;
  v37 = v18;
  v38 = a1;
  v39 = a2;
  v19 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SKPresenceDataSource<ActivityListPresenceContext>));
  v20 = specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)((uint64_t)&v35, a3);
  type metadata accessor for PersonalPresenceController(0);
  v21 = swift_allocObject();
  v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DF07B8], v6);
  v23 = v20;
  AsyncSerialQueue.init(priority:bufferingPolicy:)((uint64_t)v12, (uint64_t)v9, (uint64_t)v15);
  outlined init with take of AsyncSerialQueue((uint64_t)v15, v21 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  v24 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type SKPresenceDataSource<ActivityListPresenceContext> and conformance SKPresenceDataSource<A>, (uint64_t *)&demangling cache variable for type metadata for SKPresenceDataSource<ActivityListPresenceContext>, (uint64_t)&protocol conformance descriptor for SKPresenceDataSource<A>);
  v25 = (char **)(v21 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource);
  *v25 = v23;
  v25[1] = (char *)v24;
  *(_QWORD *)(v21 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs) = MEMORY[0x1E0DEE9E8];
  v26 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_QWORD *)(v27 + 48) = 0;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = a1;
  *(_QWORD *)(v28 + 24) = a2;
  v29 = *(uint64_t (**)(id, id, void (*)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>), uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, _QWORD *(*)(uint64_t, void *), uint64_t, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t *@<X8>), _QWORD))(v34 + 256);
  swift_retain();
  swift_retain();
  v30 = v29(v33, v26, partial apply for closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:), v27, partial apply for closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:), v21, partial apply for closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:), v28, closure #4 in BackgroundSessionManager.init(clientIdentifier:queue:), 0);
  swift_release();
  swift_release();

  return v30;
}

uint64_t sub_1ACDFC6D8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return swift_deallocObject();
}

void closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  _BYTE v11[40];
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;

  v7 = a3 + 16;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v7, (uint64_t)&v12, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  if (v13)
    goto LABEL_4;
  outlined destroy of UUID?((uint64_t)&v12, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  v8 = objc_allocWithZone(MEMORY[0x1E0D34358]);
  swift_bridgeObjectRetain();
  v9 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_initWithService_, v9);

  if (v10)
  {
    v13 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSService);
    v14 = &protocol witness table for IDSService;
    *(_QWORD *)&v12 = v10;
    outlined init with copy of UserNotificationCenter((uint64_t)&v12, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v11, v7, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
LABEL_4:
    outlined init with take of BackgroundSessionManagerDataSource(&v12, a4);
    return;
  }
  __break(1u);
}

void partial apply for closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:)(a1, a2, v3, a3);
}

uint64_t closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PresenceController();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain();
  v9 = specialized PresenceController.__allocating_init(activityID:personalPresenceController:)(v8, a3);
  swift_release();
  return v9;
}

uint64_t partial apply for closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:)(a1, a2, v2);
}

_QWORD *closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  id v9;
  char *v10;
  _QWORD *v11;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13[0] = 0;
  v14 = UUID.uuidString.getter();
  v15 = v7;
  v16 = a3;
  v17 = a4;
  v8 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>));
  swift_bridgeObjectRetain();
  v9 = a2;
  v10 = specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)((uint64_t)v13, a2);
  type metadata accessor for PresenceController();
  v11 = (_QWORD *)swift_allocObject();
  return specialized PresenceController.init<A>(dataSource:)(v10, v11);
}

uint64_t sub_1ACDFC998()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  return closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t closure #4 in BackgroundSessionManager.init(clientIdentifier:queue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = objc_allocWithZone(MEMORY[0x1E0D87D90]);
  swift_unknownObjectRetain();
  v9 = objc_msgSend(v8, sel_init);
  v10 = type metadata accessor for SessionSuspensionController();
  v11 = swift_allocObject();
  result = specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, a2, a3, (uint64_t)v9, v11);
  a4[3] = v10;
  a4[4] = (uint64_t)&protocol witness table for SessionSuspensionController;
  *a4 = result;
  return result;
}

uint64_t BackgroundSessionManager.createPresenceController(for:queue:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x110))(a1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_id, *(unsigned __int8 *)(a1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount), a2);
}

uint64_t BackgroundSessionManager.createPresenceController(for:isCrossAccount:queue:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;

  v4 = &OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceControllerProvider;
  if ((a2 & 1) == 0)
    v4 = &OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_personalPresenceControllerProvider;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + *v4))(a1, a3);
}

void BackgroundSessionManager.createService(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(unint64_t, unint64_t);
  unint64_t v11;
  const char *v12;
  char v13;
  BOOL v14;
  char v15;
  char v16;
  BOOL v17;
  char v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Swift::Bool v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  if (a1 == 0xD000000000000022 && a2 == 0x80000001ACF80B40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v8 = *(void (**)(uint64_t))(v4 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8(v9);
    swift_bridgeObjectRelease();
    return;
  }
  if (a1 == 0x6C7070612E6D6F63 && a2 == 0xEF7365746F4E2E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000015 && a2 == 0x80000001ACF7BFC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = *(void (**)(unint64_t, unint64_t))(v4
                                                                    + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    v11 = 0xD00000000000001DLL;
    v12 = "com.apple.private.alloy.notes";
LABEL_12:
    v10(v11, (unint64_t)(v12 - 32) | 0x8000000000000000);
    return;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001ACF80B70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000012 && a2 == 0x80000001ACF80B90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    (*(void (**)(unint64_t, unint64_t))(v4
                                                               + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider))(0xD000000000000022, 0x80000001ACF80E30);
    return;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001ACF80BB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000016 && a2 == 0x80000001ACF80BD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000021 && a2 == 0x80000001ACF80BF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD00000000000001BLL && a2 == 0x80000001ACF80C20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000017 && a2 == 0x80000001ACF80C40
    || ((v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000022)
      ? (v14 = a2 == 0x80000001ACF80C60)
      : (v14 = 0),
        !v14 ? (v15 = 0) : (v15 = 1),
        (v13 & 1) != 0
     || (v15 & 1) != 0
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || a1 == 0xD00000000000001CLL && a2 == 0x80000001ACF80C90
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || a1 == 0xD00000000000002DLL && a2 == 0x80000001ACF80CB0
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || a1 == 0xD000000000000027 && a2 == 0x80000001ACF80CE0
     || ((v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD00000000000001BLL)
       ? (v17 = a2 == 0x80000001ACF80D10)
       : (v17 = 0),
         !v17 ? (v18 = 0) : (v18 = 1),
         (v16 & 1) != 0
      || (v18 & 1) != 0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || a1 == 0xD000000000000018 && a2 == 0x80000001ACF80D30
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    v10 = *(void (**)(unint64_t, unint64_t))(v4
                                                                    + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    v11 = 0xD00000000000002ELL;
    v12 = "com.apple.private.alloy.safari.groupactivities";
    goto LABEL_12;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001ACF80D50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = *(void (**)(unint64_t, unint64_t))(v4
                                                                    + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    v11 = 0xD000000000000032;
    v12 = "com.apple.private.alloy.groupRemoteControl.session";
    goto LABEL_12;
  }
  if (objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_featureFlags), sel_gameCenterFastSyncTransport))
  {
    objc_allocWithZone(MEMORY[0x1E0CA5870]);
    swift_bridgeObjectRetain();
    v31 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
    if (v31)
    {
      v28 = objc_msgSend(v31, sel_entitlements);
      v29 = LSPropertyList.containsAnyGameCenterEntitlements()();

      if (v29)
      {
        (*(void (**)(unint64_t, unint64_t))(v4
                                                                   + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider))(0xD000000000000027, 0x80000001ACF80D90);

        return;
      }

    }
  }
  if (_TUIsInternalInstall())
  {
    v19 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v20 = objc_msgSend(v19, sel_bundleIdentifier);

    if (v20)
    {
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

      static NSUserDefaults.classProtectedStorage(suiteName:)(v21, v23, v34);
      swift_bridgeObjectRelease();
      v24 = v35;
      v25 = v36;
      __swift_project_boxed_opaque_existential_1(v34, v35);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v25 + 32))(&v32, MEMORY[0x1E0DEA968], 0xD000000000000013, 0x80000001ACF80D70, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA970], v24, v25);
      v26 = v33;
      if (v33)
      {
        v27 = v32;
      }
      else
      {
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v26 = v30;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
      (*(void (**)(uint64_t, uint64_t))(v4
                                               + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider))(v27, v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

uint64_t BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[6];

  v39 = a2;
  v40 = a5;
  v41 = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v44 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v43 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.service);
  v16 = a1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v36 = a3;
    v19 = swift_slowAlloc();
    v37 = v10;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v38 = v9;
    v34 = (_QWORD *)v21;
    *(_DWORD *)v20 = 138412290;
    aBlock[0] = v16;
    v22 = v16;
    v35 = a6;
    v23 = v22;
    a3 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24 = v34;
    *v34 = v16;

    a6 = v35;
    _os_log_impl(&dword_1ACCCC000, v17, v18, "Request to create presenceSession with request: %@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v25 = v24;
    v9 = v38;
    MEMORY[0x1AF44981C](v25, -1, -1);
    v26 = v20;
    v10 = v37;
    MEMORY[0x1AF44981C](v26, -1, -1);
  }
  else
  {

  }
  v27 = v42;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = v16;
  *(_QWORD *)(v28 + 32) = v40;
  *(_QWORD *)(v28 + 40) = a6;
  *(_QWORD *)(v28 + 48) = v39;
  *(_QWORD *)(v28 + 56) = a3;
  *(_DWORD *)(v28 + 64) = v41;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12;
  v29 = _Block_copy(aBlock);
  v30 = v16;
  v31 = v27;
  swift_retain();
  swift_bridgeObjectRetain();
  v32 = v43;
  static DispatchQoS.unspecified.getter();
  v45 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v32, v12, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v13);
  return swift_release();
}

void closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(_QWORD *a1, void *a2, void (*a3)(_QWORD, void *), uint64_t a4, char *a5, uint64_t *a6, unsigned int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t (*v30)(void);
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  id v54;
  char *v55;
  uint64_t (*v56)(__int128 *);
  char *v57;
  uint64_t (*v58)(__int128 *, _QWORD);
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(__int128 *__return_ptr, _QWORD, char *, _UNKNOWN **);
  char *v74;
  uint64_t v75;
  id v76;
  void *v77;
  objc_class *v78;
  char *v79;
  id v80;
  id v81;
  void *v82;
  _BYTE *v83;
  void (*v84)(_QWORD, void *);
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unint64_t v89;
  unsigned __int8 *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void (*v96)(_QWORD, void *);
  uint64_t v97;
  void *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(_QWORD, void *);
  objc_super v113;
  id v114[5];
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[2];

  v105 = a7;
  v109 = a5;
  v111 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v108 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>);
  v106 = *(_QWORD *)(v107 - 8);
  v13 = *(_QWORD *)(v106 + 64);
  v14 = MEMORY[0x1E0C80A78](v107);
  v104 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v100 - v15;
  v103 = type metadata accessor for UUID();
  v102 = *(_QWORD *)(v103 - 8);
  v17 = MEMORY[0x1E0C80A78](v103);
  v19 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v21 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xD0))(v17);
  v22 = a2;
  specialized Sequence.first(where:)(v21);
  v24 = v23;

  swift_bridgeObjectRelease();
  v112 = (void (*)(_QWORD, void *))a3;
  v110 = (uint64_t)v16;
  if (v24)
  {
    v101 = a6;
    if (one-time initialization token for service != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.service);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1ACCCC000, v26, v27, "Found existing presence session.", v28, 2u);
      MEMORY[0x1AF44981C](v28, -1, -1);
    }

    v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v30 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v24) + 0xB8);
    if (v30() < 3u)
    {
      v31 = v24;
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        v35 = swift_slowAlloc();
        v118[0] = v35;
        *(_DWORD *)v34 = 136315138;
        LOBYTE(v115) = v30();
        v36 = String.init<A>(reflecting:)();
        *(_QWORD *)&v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, v32, v33, "Found existing presence session. Failing for duplicate session creation request. existingSessionState: %s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v35, -1, -1);
        MEMORY[0x1AF44981C](v34, -1, -1);
      }
      else
      {

      }
      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      v82 = (void *)swift_allocError();
      *v83 = 4;
      v112(0, v82);

      return;
    }
    v20 = v29;
    v38 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*v29 & *a1) + 0xE0))(v118);

    v38(v118, 0);
    v16 = (char *)v110;
    a6 = v101;
  }
  (*(void (**)(__int128 *__return_ptr, char *, uint64_t *))((*v20 & *a1) + 0x118))(&v115, v109, a6);
  if (v116)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v115, (uint64_t)v118);
    v39 = v22[OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount];
    outlined init with copy of UserNotificationCenter((uint64_t)v118, (uint64_t)&v115);
    if ((_DWORD)v39 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
    }
    else
    {
      v101 = a6;
      v48 = v116;
      v49 = v117;
      __swift_project_boxed_opaque_existential_1(&v115, v116);
      v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(v48, v49);
      if (!v50)
      {
        __break(1u);
        return;
      }
      if (v50 >> 62)
        v51 = _CocoaArrayWrapper.endIndex.getter();
      else
        v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v16 = (char *)v110;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
      if (v51 < 1)
      {
        if (one-time initialization token for service != -1)
          swift_once();
        v87 = type metadata accessor for Logger();
        __swift_project_value_buffer(v87, (uint64_t)static Log.service);
        v88 = v22;
        v89 = (unint64_t)v101;
        swift_bridgeObjectRetain_n();
        v90 = v88;
        v91 = Logger.logObject.getter();
        v92 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v91, v92))
        {
          v93 = swift_slowAlloc();
          v94 = (_QWORD *)swift_slowAlloc();
          v110 = swift_slowAlloc();
          *(_QWORD *)&v115 = v110;
          *(_DWORD *)v93 = 136315394;
          swift_bridgeObjectRetain();
          v114[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v109, v89, (uint64_t *)&v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v93 + 12) = 2112;
          v114[0] = v90;
          v95 = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v94 = v90;

          v96 = v112;
          _os_log_impl(&dword_1ACCCC000, v91, v92, "Ignoring uninhabited session for bundle identifier: %s due to the request not having any collaborators: %@", (uint8_t *)v93, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v94, -1, -1);
          v97 = v110;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v97, -1, -1);
          MEMORY[0x1AF44981C](v93, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease_n();

          v96 = v112;
        }
        lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
        v98 = (void *)swift_allocError();
        *v99 = 7;
        v96(0, v98);

        goto LABEL_22;
      }
    }
    v52 = &v22[OBJC_IVAR___CPPresenceSessionCreationRequest_id];
    v53 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))((*v20 & *a1) + 0x110))(&v22[OBJC_IVAR___CPPresenceSessionCreationRequest_id], v39, *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue));
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v102 + 16))(v19, v52, v103);
    v54 = objc_allocWithZone((Class)type metadata accessor for PresenceHostSession(0));
    swift_retain();
    v103 = v53;
    v55 = PresenceHostSession.init(id:presenceController:)(v19, v53);
    v56 = *(uint64_t (**)(__int128 *))((*v20 & *a1) + 0xE0);
    v57 = v55;
    v58 = (uint64_t (*)(__int128 *, _QWORD))v56(&v115);
    specialized Set._Variant.insert(_:)(v114, v57);

    v59 = v58(&v115, 0);
    v60 = *(uint64_t (**)(uint64_t))((*v20 & *(_QWORD *)v57) + 0xD0);
    v109 = v57;
    *(_QWORD *)&v115 = v60(v59);
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceHostSession.State, Never>);
    v62 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PresenceHostSession.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PresenceHostSession.State, Never>, MEMORY[0x1E0C95FB8]);
    MEMORY[0x1AF447980](v61, v62);
    swift_release();
    v63 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v108, 1, 1, v63);
    v64 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v65 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v66 = v106;
    v67 = v104;
    v68 = v107;
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v104, v16, v107);
    v69 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    v70 = (v13 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
    v71 = swift_allocObject();
    *(_QWORD *)(v71 + 16) = 0;
    *(_QWORD *)(v71 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v66 + 32))(v71 + v69, v67, v68);
    *(_QWORD *)(v71 + v70) = v64;
    *(_QWORD *)(v71 + ((v70 + 15) & 0xFFFFFFFFFFFFFFF8)) = v65;
    v72 = v108;
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v108, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:), v71);
    swift_release();
    outlined destroy of UUID?(v72, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v73 = *(void (**)(__int128 *__return_ptr, _QWORD, char *, _UNKNOWN **))((char *)a1
                                                                                     + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider);
    v74 = v109;
    v73(&v115, v105, v74, &protocol witness table for PresenceHostSession);

    v75 = (uint64_t)&v74[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_sessionSuspensionController];
    swift_beginAccess();
    a6 = &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v75, (uint64_t)v114, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    v76 = v114[3];
    outlined destroy of UUID?((uint64_t)v114, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    if (!v76)
    {
      outlined init with copy of UserNotificationCenter((uint64_t)&v115, (uint64_t)v114);
      swift_beginAccess();
      outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v114, v75, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
      v77 = *(void **)&v74[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint];
      v78 = (objc_class *)type metadata accessor for PresenceSessionConnectionInfo();
      v79 = (char *)objc_allocWithZone(v78);
      *(_QWORD *)&v79[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v77;
      v113.receiver = v79;
      v113.super_class = v78;
      v80 = v77;
      v81 = objc_msgSendSuper2(&v113, sel_init);
      v112(v81, 0);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v110, v68);
LABEL_22:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v118);
      return;
    }
    __break(1u);
    goto LABEL_34;
  }
  outlined destroy of UUID?((uint64_t)&v115, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  if (one-time initialization token for service != -1)
LABEL_34:
    swift_once();
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    v44 = (uint64_t)a6;
    v45 = swift_slowAlloc();
    *(_QWORD *)&v115 = v45;
    *(_DWORD *)v43 = 136315138;
    v118[0] = (uint64_t)v109;
    v118[1] = v44;
    swift_bridgeObjectRetain();
    v46 = String.init<A>(reflecting:)();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v41, v42, "Unknown service for bundle identifier: %s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v45, -1, -1);
    MEMORY[0x1AF44981C](v43, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v84 = v112;
  lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
  v85 = (void *)swift_allocError();
  *v86 = 2;
  v84(0, v85);

}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[19] = v7;
  v6[20] = *(_QWORD *)(v7 - 8);
  v6[21] = swift_task_alloc();
  v8 = type metadata accessor for DispatchQoS();
  v6[22] = v8;
  v6[23] = *(_QWORD *)(v8 - 8);
  v6[24] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator);
  v6[25] = v9;
  v6[26] = *(_QWORD *)(v9 - 8);
  v6[27] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>);
  AsyncPublisher.makeAsyncIterator()();
  swift_beginAccess();
  swift_beginAccess();
  *(_QWORD *)(v0 + 224) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v1;
  *v1 = v0;
  v1[1] = closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 240) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_BYTE *)(v0 + 257) = *(_BYTE *)(v0 + 256);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  _QWORD *v17;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)(v0 + 257) != 5)
  {
    v1 = (void *)MEMORY[0x1AF449918](*(_QWORD *)(v0 + 136) + 16);
    if (v1)
    {
      v2 = v1;
      if (*(_BYTE *)(v0 + 257) != 4)
      {

        goto LABEL_11;
      }
      if (one-time initialization token for service != -1)
        swift_once();
      v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Log.service);
      v4 = Logger.logObject.getter();
      v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_1ACCCC000, v4, v5, "PresenceSession invalidated. Removing from list.", v6, 2u);
        MEMORY[0x1AF44981C](v6, -1, -1);
      }
      v7 = *(_QWORD *)(v0 + 144);

      v8 = MEMORY[0x1AF449918](v7 + 16);
      if (v8)
      {
        v9 = (void *)v8;
        v10 = *(_QWORD *)(v0 + 192);
        v11 = *(_QWORD *)(v0 + 168);
        v23 = *(_QWORD *)(v0 + 184);
        v24 = *(_QWORD *)(v0 + 176);
        v12 = *(_QWORD *)(v0 + 152);
        v22 = *(_QWORD *)(v0 + 160);
        v13 = swift_allocObject();
        *(_QWORD *)(v13 + 16) = v9;
        *(_QWORD *)(v13 + 24) = v2;
        *(_QWORD *)(v0 + 48) = partial apply for closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
        *(_QWORD *)(v0 + 56) = v13;
        *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
        *(_QWORD *)(v0 + 24) = 1107296256;
        *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> ();
        *(_QWORD *)(v0 + 40) = &block_descriptor_137;
        v14 = _Block_copy((const void *)(v0 + 16));
        v15 = v9;
        v16 = v2;
        static DispatchQoS.unspecified.getter();
        *(_QWORD *)(v0 + 120) = MEMORY[0x1E0DEE9D8];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1AF448634](0, v10, v11, v14);
        _Block_release(v14);

        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v11, v12);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v10, v24);

        swift_release();
LABEL_11:
        v17 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 248) = v17;
        *v17 = v0;
        v17[1] = closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
        return dispatch thunk of AsyncIteratorProtocol.next()();
      }
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_1ACCCC000, v19, v20, "Lost reference to presenceSession in state observer.", v21, 2u);
        MEMORY[0x1AF44981C](v21, -1, -1);
      }

    }
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 240);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 240) = v0;
  return swift_task_switch();
}

void closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(void *a1, _QWORD *a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void (*v14)(uint64_t *, _QWORD);
  void *v15;
  id v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30[4];

  if (one-time initialization token for service != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v30[0] = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for PresenceHostSession(0);
    v10 = v5;
    v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v6, v7, "Removing presenceSession %s from presenceSessions.", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

  }
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v14 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *a2)
                                                                                     + 0xE0))(v30);
  v15 = (void *)specialized Set._Variant.remove(_:)(v5);
  v14(v30, 0);

  if (!v15)
  {
    v16 = v5;
    v17 = a2;
    v18 = v16;
    v19 = v17;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v30[0] = v23;
      *(_DWORD *)v22 = 136315394;
      type metadata accessor for PresenceHostSession(0);
      v24 = v18;
      v25 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v27 = swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      (*(void (**)(uint64_t))((*v13 & *v19) + 0xD0))(v27);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PresenceHostSession>);
      v28 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v20, v21, "Failed to remove presenceSession %s, session was, somehow, already removed. sessions: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v23, -1, -1);
      MEMORY[0x1AF44981C](v22, -1, -1);

    }
    else
    {

    }
  }
}

void BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(void *a1, uint64_t a2, unint64_t a3, int a4, void (*a5)(void), uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t *v40;
  __objc2_ivar_list **p_ivars;
  __int128 v42;
  char v43;
  int64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  objc_class *v53;
  char *v54;
  void (*v55)(__int128 *, _QWORD);
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(void);
  void *v70;
  _BYTE *v71;
  void *v72;
  uint64_t (*v73)();
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  _BYTE *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  _BYTE *v95;
  uint64_t v96;
  int v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unint64_t v106;
  void (*v107)(void);
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 aBlock;
  uint64_t (*v113)();
  void *v114;
  uint64_t (*v115)();
  uint64_t v116;
  __int128 v117;
  char v118;
  objc_super v119;
  unint64_t v120;
  uint64_t v121[2];

  v7 = v6;
  v108 = a6;
  v107 = a5;
  v97 = a4;
  v103 = type metadata accessor for DispatchWorkItemFlags();
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v101 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for DispatchQoS();
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v98 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  v14 = __swift_project_value_buffer(v13, (uint64_t)static Log.service);
  v15 = a1;
  v105 = v14;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v109 = v7;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    *(_QWORD *)&aBlock = v20;
    *(_DWORD *)v19 = 136315138;
    v121[0] = (uint64_t)v15;
    type metadata accessor for BackgroundSessionCreationRequest();
    v21 = v15;
    v106 = a3;
    v22 = v21;
    v23 = String.init<A>(reflecting:)();
    v121[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&aBlock);
    v7 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    a3 = v106;
    _os_log_impl(&dword_1ACCCC000, v16, v17, "Request to begin: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {

  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x118))(&aBlock, a2, a3);
  if (v114)
  {
    v96 = a2;
    outlined init with take of BackgroundSessionManagerDataSource(&aBlock, (uint64_t)v121);
    v104 = v15;
    v111 = *(_QWORD *)&v15[OBJC_IVAR___CPBackgroundSessionCreationRequest_members];
    v25 = (void *)(v111 & 0xC000000000000001);
    if ((v111 & 0xC000000000000001) != 0)
    {
      v26 = v111 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v27 = __CocoaSet.count.getter();
      if (v27)
      {
        v28 = v27;
        v120 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        *(_QWORD *)&v117 = __CocoaSet.startIndex.getter();
        *((_QWORD *)&v117 + 1) = v29;
        v118 = 1;
        if ((v28 & 0x8000000000000000) == 0)
        {
          v106 = a3;
          goto LABEL_15;
        }
        __break(1u);
        goto LABEL_51;
      }
    }
    else
    {
      v28 = *(_QWORD *)(v111 + 16);
      swift_bridgeObjectRetain();
      if (v28)
      {
        v106 = a3;
        v120 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        v36 = v111;
        *(_QWORD *)&v117 = specialized _NativeSet.startIndex.getter(v111);
        *((_QWORD *)&v117 + 1) = v37;
        v118 = v38 & 1;
        v26 = v36 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
        v39 = v111;
        v40 = (unint64_t *)&lazy cache variable for type metadata for TUHandle;
        if (v111 >= 0)
          v39 = v26;
        v110 = v39;
        p_ivars = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
        while (1)
        {
          while (1)
          {
            specialized Set.subscript.getter(v117, *((uint64_t *)&v117 + 1), v118, v111, v40);
            v52 = v51;
            v53 = (objc_class *)type metadata accessor for AddressableMember();
            v54 = (char *)objc_allocWithZone(v53);
            *(_QWORD *)&v54[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v52;
            v119.receiver = v54;
            v119.super_class = v53;
            objc_msgSendSuper2(&v119, (SEL)p_ivars[435]);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (v25)
              break;
            v42 = v117;
            v43 = v118;
            v44 = specialized _NativeSet.index(after:)(v117, SDWORD2(v117), v118, v111);
            v45 = v40;
            v47 = v46;
            v49 = v48;
            outlined consume of Set<AddressableMember>.Index._Variant(v42, *((uint64_t *)&v42 + 1), v43);
            *(_QWORD *)&v117 = v44;
            *((_QWORD *)&v117 + 1) = v47;
            v40 = v45;
            v50 = v49 & 1;
            v25 = 0;
            p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
            v118 = v50;
            if (!--v28)
              goto LABEL_24;
          }
          if ((v118 & 1) == 0)
            break;
          if (__CocoaSet.Index.handleBitPattern.getter())
            swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<TUHandle>.Index);
          v55 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v55(&aBlock, 0);
          if (!--v28)
          {
LABEL_24:
            outlined consume of Set<AddressableMember>.Index._Variant(v117, *((uint64_t *)&v117 + 1), v118);
            v56 = v120;
            swift_bridgeObjectRelease();
            a3 = v106;
            goto LABEL_26;
          }
        }
        __break(1u);
        goto LABEL_53;
      }
    }
    swift_bridgeObjectRelease();
    v56 = MEMORY[0x1E0DEE9D8];
LABEL_26:
    v28 = specialized Set.init<A>(_:)(v56);
    swift_bridgeObjectRelease();
    if ((v28 & 0xC000000000000001) != 0)
    {
      v57 = __CocoaSet.count.getter();
      if (v25)
      {
LABEL_28:
        v58 = __CocoaSet.count.getter();
        goto LABEL_31;
      }
    }
    else
    {
      v57 = *(_QWORD *)(v28 + 16);
      if (v25)
        goto LABEL_28;
    }
    v58 = *(_QWORD *)(v111 + 16);
LABEL_31:
    v25 = v109;
    if (v57 != v58)
    {
      v60 = v104;
      swift_bridgeObjectRetain();
      v61 = Logger.logObject.getter();
      v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = swift_slowAlloc();
        v64 = swift_slowAlloc();
        *(_QWORD *)&aBlock = v64;
        *(_DWORD *)v63 = 136315394;
        *(_QWORD *)&v117 = v111;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>);
        v65 = String.init<A>(reflecting:)();
        *(_QWORD *)&v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v63 + 12) = 2080;
        *(_QWORD *)&v117 = v28;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
        v67 = String.init<A>(reflecting:)();
        *(_QWORD *)&v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v61, v62, "Error converting members: %s to %s", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v64, -1, -1);
        MEMORY[0x1AF44981C](v63, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }

      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      v85 = (void *)swift_allocError();
      *v86 = 6;
      goto LABEL_45;
    }
    v59 = v104[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount];
    outlined init with copy of UserNotificationCenter((uint64_t)v121, (uint64_t)&aBlock);
    if (v59 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);
      a2 = v96;
LABEL_42:
      outlined init with copy of UserNotificationCenter((uint64_t)v121, (uint64_t)&v117);
      v76 = swift_allocObject();
      v77 = v104;
      *(_QWORD *)(v76 + 16) = v25;
      *(_QWORD *)(v76 + 24) = v77;
      *(_QWORD *)(v76 + 32) = a2;
      *(_QWORD *)(v76 + 40) = a3;
      *(_QWORD *)(v76 + 48) = v28;
      outlined init with take of BackgroundSessionManagerDataSource(&v117, v76 + 56);
      v78 = v108;
      *(_QWORD *)(v76 + 96) = v107;
      *(_QWORD *)(v76 + 104) = v78;
      *(_DWORD *)(v76 + 112) = v97;
      v115 = partial apply for closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
      v116 = v76;
      *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v113 = thunk for @escaping @callee_guaranteed () -> ();
      v114 = &block_descriptor_12_2;
      v79 = _Block_copy(&aBlock);
      v80 = v77;
      v81 = v25;
      swift_bridgeObjectRetain();
      swift_retain();
      v82 = v98;
      static DispatchQoS.unspecified.getter();
      v120 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v83 = v101;
      v84 = v103;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1AF448634](0, v82, v83, v79);
      _Block_release(v79);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v83, v84);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v82, v100);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v121);
      swift_release();
      return;
    }
    v72 = v114;
    v73 = v115;
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v114);
    v74 = (*((uint64_t (**)(void *, uint64_t (*)()))v73 + 2))(v72, v73);
    a2 = v96;
    if (!v74)
    {
LABEL_53:
      __break(1u);
      return;
    }
    if (!(v74 >> 62))
    {
      v75 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_41:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);
      if (v75 >= 1)
        goto LABEL_42;
      swift_bridgeObjectRelease();
      v87 = v104;
      swift_bridgeObjectRetain_n();
      v88 = v87;
      v89 = Logger.logObject.getter();
      v90 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v89, v90))
      {
        v91 = swift_slowAlloc();
        v92 = (_QWORD *)swift_slowAlloc();
        v93 = swift_slowAlloc();
        *(_QWORD *)&aBlock = v93;
        *(_DWORD *)v91 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v91 + 12) = 2112;
        *(_QWORD *)&v117 = v88;
        v94 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v92 = v88;

        _os_log_impl(&dword_1ACCCC000, v89, v90, "Ignoring uninhabited session for bundle identifier: %s due to the request not having any collaborators: %@", (uint8_t *)v91, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v92, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v93, -1, -1);
        MEMORY[0x1AF44981C](v91, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();

      }
      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      v85 = (void *)swift_allocError();
      *v95 = 7;
LABEL_45:
      v107();

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v121);
      return;
    }
LABEL_51:
    v75 = _CocoaArrayWrapper.endIndex.getter();
    goto LABEL_41;
  }
  outlined destroy of UUID?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v121[0] = v33;
    *(_DWORD *)v32 = 136315138;
    *(_QWORD *)&aBlock = a2;
    *((_QWORD *)&aBlock + 1) = a3;
    swift_bridgeObjectRetain();
    v34 = String.init<A>(reflecting:)();
    *(_QWORD *)&aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v30, v31, "Unknown service for bundle identifier: %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v32, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v69 = v107;
  lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
  v70 = (void *)swift_allocError();
  *v71 = 2;
  v69();

}

uint64_t closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, void *a5, _QWORD *a6, void (*a7)(void *), uint64_t a8, int a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t);
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  dispatch_semaphore_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  NSObject *v58;
  uint64_t result;
  unint64_t v60;
  __int128 v61;
  void *v62;
  _BYTE *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  void (*v72)(uint64_t *, _QWORD);
  uint64_t (*v73)(uint64_t *);
  void (*v74)(uint64_t *, _QWORD);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(void *);
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  void (*v85)(void *);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  void *v90;
  char *v91;
  unint64_t v92;
  _QWORD v93[5];
  uint64_t v94[6];

  v85 = a7;
  v86 = a8;
  v89 = a6;
  v90 = a5;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v91 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v18;
  v19 = (*(uint64_t (**)(char *, _QWORD))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x108))(a2, *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue));
  v20 = *(void **)&a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest];
  v21 = objc_allocWithZone(MEMORY[0x1E0DBD248]);
  v22 = v20;
  swift_bridgeObjectRetain();
  v23 = (void *)MEMORY[0x1AF4480F4](a3, a4);
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(v21, sel_initWithCreationRequest_bundleIdentifier_systemActivity_, v22, v23, 0);

  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, &a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_id], v15);
  v25 = *(_QWORD *)&a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  v87 = *(_QWORD *)&a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember + 8];
  outlined init with copy of UserNotificationCenter((uint64_t)v89, (uint64_t)v94);
  v26 = *(void (**)(_QWORD *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8);
  swift_unknownObjectRetain();
  v27 = v24;
  v28 = v90;
  swift_bridgeObjectRetain();
  v29 = swift_retain();
  v26(v93, v29);
  v30 = objc_msgSend(objc_allocWithZone((Class)CPSharedConversationServerBag), sel_init);
  v31 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  type metadata accessor for BackgroundSession(0);
  v32 = swift_allocObject();
  v33 = a1;
  v81 = v31;
  v82 = v32;
  v34 = v27;
  v35 = v19;
  v36 = v25;
  v37 = v33;
  v38 = v30;
  v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v40 = specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)((uint64_t)v88, v27, v28, v36, v87, (uint64_t)v94, v38, v19, v33, (uint64_t)v93, v81, v82);
  v41 = (*(uint64_t (**)(void))((*v39 & *v37) + 0xB8))();
  v42 = a2;
  v43 = specialized Sequence.first(where:)(v41);

  swift_bridgeObjectRelease();
  if (!v43)
    goto LABEL_16;
  if (one-time initialization token for service != -1)
    swift_once();
  v44 = type metadata accessor for Logger();
  v45 = __swift_project_value_buffer(v44, (uint64_t)static Log.service);
  swift_retain_n();
  v88 = (char *)v45;
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.default.getter();
  v48 = os_log_type_enabled(v46, v47);
  v89 = v37;
  v90 = (void *)v40;
  if (v48)
  {
    v49 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v94[0] = v50;
    *(_DWORD *)v49 = 136315138;
    v93[0] = v43;
    swift_retain();
    v51 = String.init<A>(reflecting:)();
    v93[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v46, v47, "Found existing session: %s", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v50, -1, -1);
    MEMORY[0x1AF44981C](v49, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v53 = dispatch_semaphore_create(0);
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = 0xF000000000000007;
  v55 = type metadata accessor for TaskPriority();
  v56 = (uint64_t)v91;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v91, 1, 1, v55);
  v57 = (_QWORD *)swift_allocObject();
  v57[2] = 0;
  v57[3] = 0;
  v57[4] = v53;
  v57[5] = partial apply for closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  v57[6] = v54;
  v57[7] = v43;
  swift_retain();
  swift_retain_n();
  v58 = v53;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v56, (uint64_t)&async function pointer to partial apply for closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), (uint64_t)v57);
  swift_release();
  OS_dispatch_semaphore.wait()();
  result = swift_beginAccess();
  v60 = *(_QWORD *)(v54 + 16);
  if ((~v60 & 0xF000000000000007) != 0)
  {
    if ((v60 >> 62) < 2
      || v60 >> 62 == 3
      && (*((_QWORD *)&v61 + 1) = *(_QWORD *)(v54 + 16),
          *(_QWORD *)&v61 = v60 + 0x4000000000000000,
          (unint64_t)(v61 >> 3) < 5))
    {
      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      v62 = (void *)swift_allocError();
      *v63 = 4;
      outlined copy of BackgroundSession.State(v60);
      v85(v62);

      outlined consume of BackgroundSession.State?(v60);
      swift_release_n();

      swift_release();
      swift_release();

      return swift_release();
    }
    outlined copy of BackgroundSession.State?(v60);
    outlined copy of BackgroundSession.State(v60);
    outlined copy of BackgroundSession.State(v60);
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v88 = (char *)v35;
      v66 = (uint8_t *)swift_slowAlloc();
      v87 = swift_slowAlloc();
      v94[0] = v87;
      v84 = v66;
      *(_DWORD *)v66 = 136315138;
      v92 = v60;
      outlined copy of BackgroundSession.State(v60);
      v67 = String.init<A>(reflecting:)();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of BackgroundSession.State?(v60);
      outlined consume of BackgroundSession.State?(v60);
      v69 = v65;
      v70 = v84;
      _os_log_impl(&dword_1ACCCC000, v64, v69, "Found session is in the %s state. Forcefully removing.", v84, 0xCu);
      v71 = v87;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v71, -1, -1);
      MEMORY[0x1AF44981C](v70, -1, -1);
    }
    else
    {
      outlined consume of BackgroundSession.State?(v60);
      outlined consume of BackgroundSession.State?(v60);
    }

    v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v37 = v89;
    v72 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *v89)
                                                                                       + 0xC8))(v94);
    specialized Set._Variant.remove(_:)(v43);
    swift_release();
    v72(v94, 0);

    swift_release();
    outlined consume of BackgroundSession.State?(v60);
    swift_release();
    swift_release();
    v40 = (uint64_t)v90;
LABEL_16:
    v73 = *(uint64_t (**)(uint64_t *))((*v39 & *v37) + 0xC8);
    swift_retain();
    v74 = (void (*)(uint64_t *, _QWORD))v73(v94);
    specialized Set._Variant.insert(_:)((uint64_t *)&v92, v40);
    swift_release();
    v74(v94, 0);
    v75 = type metadata accessor for TaskPriority();
    v76 = (uint64_t)v91;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v91, 1, 1, v75);
    v77 = swift_allocObject();
    *(_QWORD *)(v77 + 16) = 0;
    *(_QWORD *)(v77 + 24) = 0;
    *(_QWORD *)(v77 + 32) = v40;
    *(_QWORD *)(v77 + 40) = v37;
    *(_DWORD *)(v77 + 48) = a9;
    v78 = v85;
    v79 = v86;
    *(_QWORD *)(v77 + 56) = v34;
    *(_QWORD *)(v77 + 64) = v78;
    *(_QWORD *)(v77 + 72) = v79;
    v80 = v37;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v76, (uint64_t)&async function pointer to partial apply for closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), v77);
    swift_release();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

unint64_t closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(unint64_t a1, uint64_t a2)
{
  unint64_t v4;

  swift_beginAccess();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  outlined consume of BackgroundSession.State?(v4);
  return outlined copy of BackgroundSession.State(a1);
}

uint64_t closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch();
}

uint64_t closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  (*(void (**)(unint64_t))(v0 + 32))(v1);
  outlined consume of BackgroundSession.State(v1);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)(v8 + 160) = a8;
  *(_QWORD *)(v8 + 168) = v10;
  *(_QWORD *)(v8 + 144) = a5;
  *(_QWORD *)(v8 + 152) = a7;
  *(_DWORD *)(v8 + 192) = a6;
  *(_QWORD *)(v8 + 136) = a4;
  return swift_task_switch();
}

uint64_t closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _UNKNOWN **))(*(_QWORD *)(v0 + 144)
                                                      + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider))(*(unsigned int *)(v0 + 192), *(_QWORD *)(v0 + 136), &protocol witness table for BackgroundSession);
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  BackgroundSession.updateSuspensionController(_:)(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  return BackgroundSession.join()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = *(void **)(v0 + 152);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 152);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 120) = v7;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
    v10 = v7;
    v11 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v4, v5, "Activity successfully begun: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {

  }
  (*(void (**)(_QWORD))(v0 + 160))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  const void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t result;
  void *v24;
  void (*v25)(void *);
  id v26;
  uint64_t v27;

  v1 = (const void *)(v0 + 16);
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = *(void **)(v0 + 184);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  v4 = v2;
  v5 = v2;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(void **)(v0 + 184);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v11 = v27;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)(v0 + 104) = v9;
    v12 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v6, v7, "Activity failed to begin: %s", v10, 0xCu);
    swift_arrayDestroy();
    v15 = v11;
    v1 = (const void *)(v0 + 16);
    MEMORY[0x1AF44981C](v15, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);
  }
  else
  {

  }
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(char **)(v0 + 144);
  v18 = *(NSObject **)&v17[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue];
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = v16;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = partial apply for closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v0 + 48) = partial apply for thunk for @callee_guaranteed () -> ();
  *(_QWORD *)(v0 + 56) = v20;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> ();
  *(_QWORD *)(v0 + 40) = &block_descriptor_108;
  v21 = _Block_copy(v1);
  v22 = v17;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v16 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v24 = *(void **)(v0 + 184);
    v25 = *(void (**)(void *))(v0 + 160);
    v26 = v24;
    v25(v24);

    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *a1)
                                                                                   + 0xC8))(v5);
  specialized Set._Variant.remove(_:)(a2);
  swift_release();
  return v3(v5, 0);
}

uint64_t BackgroundSessionManager.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  NSObject *v25;
  int v26;
  _BOOL4 v27;
  uint8_t *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  id v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t aBlock[7];

  v53 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  MEMORY[0x1E0C80A78](v5);
  v58 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  MEMORY[0x1E0C80A78](v7);
  v55 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v46 - v13;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x1E0C80A78](v15);
  v50 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v61 = (char *)&v46 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v46 - v21;
  if (one-time initialization token for service != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.service);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v52 = a1;
  v24(v22, a1, v15);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, (os_log_type_t)v26);
  v51 = v24;
  if (v27)
  {
    v48 = v26;
    v28 = (uint8_t *)swift_slowAlloc();
    v47 = swift_slowAlloc();
    aBlock[0] = v47;
    *(_DWORD *)v28 = 136315138;
    v24(v14, (uint64_t)v22, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
    v49 = a3;
    if (v29 == 1)
    {
      v30 = 0xE300000000000000;
      v31 = 7104878;
    }
    else
    {
      v32 = v61;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v61, v12, v15);
      v24(v50, (uint64_t)v32, v15);
      v31 = String.init<A>(reflecting:)();
      v30 = v33;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v15);
    }
    outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
    _os_log_impl(&dword_1ACCCC000, v25, (os_log_type_t)v48, "Request to leave identifier: %s", v28, 0xCu);
    v34 = v47;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v34, -1, -1);
    MEMORY[0x1AF44981C](v28, -1, -1);

    a3 = v49;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);

  }
  v35 = v54;
  v36 = v61;
  v51(v61, v52, v15);
  v37 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v35;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v38 + v37, v36, v15);
  v39 = (_QWORD *)(v38 + ((v17 + v37 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v39 = v53;
  v39[1] = a3;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.leave(identifier:completion:);
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_18_2;
  v40 = _Block_copy(aBlock);
  v41 = v35;
  swift_retain();
  v42 = v55;
  static DispatchQoS.unspecified.getter();
  v62 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v43 = v58;
  v44 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v42, v43, v40);
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v57);
  return swift_release();
}

void closure #1 in BackgroundSessionManager.leave(identifier:completion:)(_QWORD *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(uint64_t *, _QWORD);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  _BYTE *v29;
  _QWORD v30[2];
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xB8))(v13);
  v32 = a2;
  v17 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManager.leave(identifier:completion:), (uint64_t)v31, v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v17;
    v19[5] = a3;
    v19[6] = a4;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:), (uint64_t)v19);
    swift_release();
    v20 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *a1)
                                                                                       + 0xC8))(v33);
    specialized Set._Variant.remove(_:)(v17);
    swift_release();
    v20(v33, 0);
    swift_release();
  }
  else
  {
    v30[1] = a4;
    if (one-time initialization token for service != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.service);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v33[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v30[0] = v24 + 4;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v26 = dispatch thunk of CustomStringConvertible.description.getter();
      v33[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      _os_log_impl(&dword_1ACCCC000, v22, v23, "Couldn't find session with identifier: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v25, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }

    lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
    v28 = (void *)swift_allocError();
    *v29 = 5;
    a3();

  }
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[8];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[6] = v5;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v8 = String.init<A>(reflecting:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Ending session %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = (_QWORD *)swift_task_alloc();
  v0[12] = v10;
  *v10 = v0;
  v10[1] = closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:);
  return BackgroundSession.leave(endState:)(0xC000000000000028);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 64);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v9 = v5;
    *(_QWORD *)(v0 + 32) = v3;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v6 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Ended session %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v5, -1, -1);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(_QWORD))(v0 + 72))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void (*v9)(void *);
  id v10;
  uint64_t v12;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 64);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v12 = v5;
    *(_QWORD *)(v0 + 16) = v3;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v6 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Error ending session: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v5, -1, -1);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v8 = *(void **)(v0 + 104);
  v9 = *(void (**)(void *))(v0 + 72);
  v10 = v8;
  v9(v8);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSessionManager.updateMembers(identifier:members:completion:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  NSObject *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  id v47;
  char *v48;
  char *v49;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t aBlock[7];

  v60 = a4;
  v58 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v65 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v64 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  MEMORY[0x1E0C80A78](v8);
  v61 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v51 - v14;
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x1E0C80A78](v16);
  v55 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v66 = (char *)&v51 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v51 - v22;
  if (one-time initialization token for service != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.service);
  v25 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v57 = a1;
  v26 = a1;
  v27 = v25;
  v25(v23, v26, v16);
  swift_bridgeObjectRetain_n();
  v28 = Logger.logObject.getter();
  LODWORD(v56) = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, (os_log_type_t)v56))
  {
    v53 = a2;
    v29 = swift_slowAlloc();
    v51 = swift_slowAlloc();
    aBlock[0] = v51;
    *(_DWORD *)v29 = 136315394;
    v27(v15, v23, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
    v54 = v6;
    v52 = v27;
    if (v30 == 1)
    {
      v31 = 0xE300000000000000;
      v32 = 7104878;
    }
    else
    {
      v34 = v66;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v66, v13, v16);
      v27(v55, v34, v16);
      v32 = String.init<A>(reflecting:)();
      v31 = v35;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v34, v16);
    }
    outlined destroy of UUID?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
    *(_WORD *)(v29 + 12) = 2080;
    v33 = v53;
    v67 = v53;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    v36 = String.init<A>(reflecting:)();
    v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v28, (os_log_type_t)v56, "Request to update members on identifier: %s with members: %s", (uint8_t *)v29, 0x16u);
    v38 = v51;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v38, -1, -1);
    MEMORY[0x1AF44981C](v29, -1, -1);

    v6 = v54;
    v27 = v52;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
    swift_bridgeObjectRelease_n();

    v33 = a2;
  }
  v39 = v59;
  v56 = *(_QWORD *)&v59[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue];
  v40 = v66;
  v27(v66, v57, v16);
  v41 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v42 = (v18 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v39;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v43 + v41, v40, v16);
  v44 = (_QWORD *)(v43 + v42);
  v45 = v60;
  *v44 = v58;
  v44[1] = v45;
  *(_QWORD *)(v43 + ((v42 + 23) & 0xFFFFFFFFFFFFFFF8)) = v33;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:);
  aBlock[5] = v43;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_24_0;
  v46 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v47 = v39;
  swift_retain();
  v48 = v61;
  static DispatchQoS.unspecified.getter();
  v67 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v49 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v48, v49, v46);
  _Block_release(v46);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v6);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v63);
  return swift_release();
}

void closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)(_QWORD *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  _BYTE *v32;
  _QWORD v33[3];
  void (*v34)(void);
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v34 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xB8))(v14);
  v36 = a2;
  v18 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:), (uint64_t)v35, v17);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a5;
    v20[6] = v34;
    v20[7] = a4;
    swift_bridgeObjectRetain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:), (uint64_t)v20);
    swift_release();
  }
  else
  {
    v21 = v12;
    v33[2] = a4;
    v22 = v34;
    if (one-time initialization token for service != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.service);
    v24 = v21;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v21);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v38 = v28;
      *(_DWORD *)v27 = 136315138;
      v33[1] = v27 + 4;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v24);
      _os_log_impl(&dword_1ACCCC000, v25, v26, "Couldn't find session with identifier: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v28, -1, -1);
      MEMORY[0x1AF44981C](v27, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v24);
    }

    lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
    v31 = (void *)swift_allocError();
    *v32 = 5;
    v22();

  }
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  uint64_t v0;

  BackgroundSession.updateMembers(_:)(*(_QWORD *)(v0 + 24));
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 32))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall BackgroundSessionManager.sessionsDidUpdate()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v0[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v10 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v3, 1, 1, v10);
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = v0;
    v12 = v0;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManager.sessionsDidUpdate(), (uint64_t)v11);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[10] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v6 = type metadata accessor for DispatchQoS();
  v4[14] = v6;
  v4[15] = *(_QWORD *)(v6 - 8);
  v4[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[10];
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUConversationActivitySessionContainer]);
  v2 = swift_task_alloc();
  v0[17] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[18] = v3;
  *v3 = v0;
  v3[1] = closure #1 in BackgroundSessionManager.sessionsDidUpdate();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[16];
  v2 = v0[13];
  v11 = v0[15];
  v12 = v0[14];
  v3 = v0[11];
  v10 = v0[12];
  v4 = (void *)v0[10];
  v5 = v0[8];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  v0[6] = partial apply for closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
  v0[7] = v6;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_68;
  v7 = _Block_copy(v0 + 2);
  v8 = v4;
  static DispatchQoS.unspecified.getter();
  v0[9] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v1, v2, v7);
  _Block_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v12);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<TUConversationActivitySessionContainer>.Iterator);
  v3[23] = v4;
  v3[24] = *(_QWORD *)(v4 - 8);
  v3[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 160)) + 0xB8))();
  v2 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
    result = Set.Iterator.init(_cocoa:)();
    v2 = *(_QWORD *)(v0 + 16);
    v33 = *(_QWORD *)(v0 + 24);
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v4 = 0;
    v6 = -1 << *(_BYTE *)(result + 32);
    v33 = result + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(result + 56);
  }
  v32 = (unint64_t)(v3 + 64) >> 6;
  v34 = v2;
  while (v2 < 0)
  {
    v13 = __CocoaSet.Iterator.next()();
    if (!v13)
      goto LABEL_37;
    *(_QWORD *)(v0 + 136) = v13;
    type metadata accessor for BackgroundSession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = *(_QWORD *)(v0 + 128);
    swift_unknownObjectRelease();
    v12 = v4;
    v10 = v5;
    if (!v14)
      goto LABEL_37;
LABEL_30:
    v35 = v10;
    v19 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 176);
    v20 = type metadata accessor for TaskPriority();
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v18, 1, 1, v20);
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = 0;
    v23 = v22 + 2;
    v22[3] = 0;
    v22[4] = v14;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v18, v19, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
    swift_retain();
    v24 = *(_QWORD *)(v0 + 168);
    if ((_DWORD)v19 == 1)
    {
      outlined destroy of UUID?(*(_QWORD *)(v0 + 168), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
      if (*v23)
        goto LABEL_32;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v24, v20);
      if (*v23)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v25 = dispatch thunk of Actor.unownedExecutor.getter();
        v27 = v26;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    v25 = 0;
    v27 = 0;
LABEL_35:
    v28 = **(_QWORD **)(v0 + 152);
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
    *(_QWORD *)(v29 + 24) = v22;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    v30 = v27 | v25;
    if (v27 | v25)
    {
      v30 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v25;
      *(_QWORD *)(v0 + 80) = v27;
    }
    v9 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 88) = 1;
    *(_QWORD *)(v0 + 96) = v30;
    *(_QWORD *)(v0 + 104) = v28;
    swift_task_create();
    swift_release();
    swift_release();
    result = outlined destroy of UUID?(v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v4 = v12;
    v5 = v35;
    v2 = v34;
  }
  if (v5)
  {
    v10 = (v5 - 1) & v5;
    v11 = __clz(__rbit64(v5)) | (v4 << 6);
    v12 = v4;
LABEL_29:
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    swift_retain();
    if (!v14)
      goto LABEL_37;
    goto LABEL_30;
  }
  v15 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v15 >= v32)
      goto LABEL_37;
    v16 = *(_QWORD *)(v33 + 8 * v15);
    v12 = v4 + 1;
    if (!v16)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v32)
        goto LABEL_37;
      v16 = *(_QWORD *)(v33 + 8 * v12);
      if (!v16)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v32)
          goto LABEL_37;
        v16 = *(_QWORD *)(v33 + 8 * v12);
        if (!v16)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v32)
            goto LABEL_37;
          v16 = *(_QWORD *)(v33 + 8 * v12);
          if (!v16)
          {
            v17 = v4 + 5;
            while (v32 != v17)
            {
              v16 = *(_QWORD *)(v33 + 8 * v17++);
              if (v16)
              {
                v12 = v17 - 1;
                goto LABEL_28;
              }
            }
LABEL_37:
            outlined consume of [String : ()].Iterator._Variant();
            *(_QWORD *)(v0 + 120) = MEMORY[0x1E0DEE9D8];
            type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
            TaskGroup.makeAsyncIterator()();
            *(_QWORD *)(v0 + 208) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type TaskGroup<TUConversationActivitySessionContainer>.Iterator and conformance TaskGroup<A>.Iterator, &demangling cache variable for type metadata for TaskGroup<TUConversationActivitySessionContainer>.Iterator, MEMORY[0x1E0DF0660]);
            v31 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 216) = v31;
            *v31 = v0;
            v31[1] = closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
            return dispatch thunk of AsyncIteratorProtocol.next()();
          }
        }
      }
    }
LABEL_28:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v4 = v2[24];
    v3 = v2[25];
    v5 = v2[23];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;

  if (*(_QWORD *)(v0 + 112))
  {
    MEMORY[0x1AF448268]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 120) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v1;
    *v1 = v0;
    v1[1] = closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    v3 = *(_QWORD **)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));

    *v3 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v4 = v2[24];
    v3 = v2[25];
    v5 = v2[23];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = BackgroundSession.container.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xA0))();
  if (result)
  {
    v6 = v5;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t BackgroundSessionManager.updateShare(_:activityID:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;

  lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
  swift_allocError();
  *v1 = 0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id BackgroundSessionManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void BackgroundSessionManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id BackgroundSessionManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundSessionManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.delegate.getter in conformance BackgroundSessionManager()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0xA0))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.delegate.setter in conformance BackgroundSessionManager()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0xA8))();
}

void (*protocol witness for BackgroundSessionManagerDataSource.delegate.modify in conformance BackgroundSessionManager(_QWORD *a1))(_QWORD *a1)
{
  _QWORD **v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v1) + 0xB0))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.begin(request:bundleIdentifier:processIdentifier:completion:) in conformance BackgroundSessionManager()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x128))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.leave(identifier:completion:) in conformance BackgroundSessionManager()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x130))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.updateMembers(identifier:members:completion:) in conformance BackgroundSessionManager()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x138))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.updateShare(_:activityID:) in conformance BackgroundSessionManager(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & **v2) + 0x148);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(a1, a2);
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:) in conformance BackgroundSessionManager()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x120))();
}

uint64_t BackgroundSessionManager.backgroundSessionDidUpdate(_:)()
{
  return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1E5C85618, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_61);
}

uint64_t BackgroundSessionManager.backgroundSession(_:stateChanged:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.service);
  outlined copy of BackgroundSession.State(a2);
  swift_retain();
  outlined copy of BackgroundSession.State(a2);
  swift_retain();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v31 = a2;
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136315394;
    outlined copy of BackgroundSession.State(a2);
    v17 = String.init<A>(reflecting:)();
    v26 = v3;
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of BackgroundSession.State(a2);
    outlined consume of BackgroundSession.State(a2);
    *(_WORD *)(v15 + 12) = 2080;
    v31 = a1;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v19 = String.init<A>(reflecting:)();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    v3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "BackgroundSessionManager learned that state changed to %s on session: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    outlined consume of BackgroundSession.State(a2);
    outlined consume of BackgroundSession.State(a2);
    swift_release_n();
  }

  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v3;
  v21[3] = a2;
  v21[4] = a1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:);
  aBlock[5] = (uint64_t)v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_34;
  v22 = _Block_copy(aBlock);
  outlined copy of BackgroundSession.State(a2);
  swift_retain();
  v23 = v3;
  static DispatchQoS.unspecified.getter();
  v31 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v24 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v11, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:)(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t *, _QWORD);
  uint64_t v17[4];

  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x140))();
  if (a2 >> 62 == 3)
  {
    *((_QWORD *)&v8 + 1) = a2;
    *(_QWORD *)&v8 = a2 + 0x4000000000000000;
    if ((unint64_t)(v8 >> 3) >= 5)
    {
      if (one-time initialization token for service != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.service);
      swift_retain_n();
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v13 = swift_slowAlloc();
        v17[0] = v13;
        *(_DWORD *)v12 = 136315138;
        type metadata accessor for BackgroundSession(0);
        swift_retain();
        v14 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v10, v11, "Found that session: %s is invalid, removing session.", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v13, -1, -1);
        MEMORY[0x1AF44981C](v12, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v16 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*v6 & *a1) + 0xC8))(v17);
      specialized Set._Variant.remove(_:)(a3);
      swift_release();
      return v16(v17, 0);
    }
  }
  return result;
}

uint64_t BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  uint8_t *v23;
  uint64_t v24;
  void *v25;
  id v26;
  char *v27;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v35 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v34 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.service);
  v13 = a2;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v31 = a1;
    v16 = swift_slowAlloc();
    v32 = v7;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v33 = v6;
    v29 = (_QWORD *)v18;
    *(_DWORD *)v17 = 138412290;
    aBlock[0] = v13;
    v19 = v13;
    v30 = v3;
    v20 = v19;
    a1 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v21 = v29;
    *v29 = v13;

    v3 = v30;
    _os_log_impl(&dword_1ACCCC000, v14, v15, "BackgroundSessionManager didRejectKeyRecoveryRequest from: %@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v22 = v21;
    v6 = v33;
    MEMORY[0x1AF44981C](v22, -1, -1);
    v23 = v17;
    v7 = v32;
    MEMORY[0x1AF44981C](v23, -1, -1);
  }
  else
  {

  }
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v3;
  *(_QWORD *)(v24 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:);
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_40;
  v25 = _Block_copy(aBlock);
  v26 = v3;
  swift_retain();
  v27 = v34;
  static DispatchQoS.unspecified.getter();
  v36 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v27, v9, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v10);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xA0))();
  if (result)
  {
    v6 = v5;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  _QWORD *v23;
  void *v24;
  id v25;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v29 = a1;
    v15 = swift_slowAlloc();
    v28 = v3;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v27 = v16 + 4;
    type metadata accessor for AddressableMember();
    v30 = v6;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
    swift_bridgeObjectRetain();
    v18 = Set.description.getter();
    v20 = v19;
    swift_bridgeObjectRelease();
    v21 = v18;
    a1 = v29;
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v6 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "BackgroundSessionManager didReceiveUpdatedUnknownParticipantList: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    v22 = v16;
    v3 = v28;
    MEMORY[0x1AF44981C](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v3;
  v23[3] = a1;
  v23[4] = a2;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:);
  aBlock[5] = (uint64_t)v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_46;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v25 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v34 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v11, v8, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xA0))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for BackgroundSessionDelegate.backgroundSessionDidUpdate(_:) in conformance BackgroundSessionManager()
{
  return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1E5C85618, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_61);
}

uint64_t specialized closure #1 in PresenceController.init<A>(dataSource:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *boxed_opaque_existential_1;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[5];
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v21;
    do
    {
      outlined init with copy of UserNotificationCenter(v4, (uint64_t)v17);
      v5 = v18;
      v6 = v19;
      v7 = __swift_project_boxed_opaque_existential_1(v17, v18);
      v20[3] = v5;
      v20[4] = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
      v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
      v9(boxed_opaque_existential_1, v7, v5);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v21;
      }
      v12 = *(_QWORD *)(v2 + 16);
      v11 = *(_QWORD *)(v2 + 24);
      if (v12 >= v11 >> 1)
        isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
      v14 = (char *)&v17[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      v9((uint64_t *)v14, boxed_opaque_existential_1, v5);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, (uint64_t)v14, &v21, v5, v6);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      v2 = v21;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1ACE04868()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;

  closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24), *(void (**)(_QWORD, void *))(v0 + 32), *(_QWORD *)(v0 + 40), *(char **)(v0 + 48), *(uint64_t **)(v0 + 56), *(_DWORD *)(v0 + 64));
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for BackgroundSessionManagerError, &type metadata for BackgroundSessionManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for BackgroundSessionManagerError, &type metadata for BackgroundSessionManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError);
  }
  return result;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  specialized Set.subscript.getter(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for AddressableMember);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for ActivitySession);
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  unint64_t *v17;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for TUConversationActivity(0, a5);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        a5 = v17;
        swift_unknownObjectRelease();
        v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v12 = static NSObject.== infix(_:_:)();

          if ((v12 & 1) == 0)
          {
            v13 = ~v10;
            do
            {
              v7 = (v7 + 1) & v13;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v14 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v15 = static NSObject.== infix(_:_:)();

            }
            while ((v15 & 1) == 0);
          }

LABEL_20:
          v16 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1AF448844](a1, a2, v8);
  type metadata accessor for TUConversationActivity(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(_QWORD))
{
  void *v5;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  id v17;
  void *v18;

  v8 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        a5(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v5 = v18;
        swift_unknownObjectRelease();
        v10 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v11 = -1 << *(_BYTE *)(a4 + 32);
        v8 = v10 & ~v11;
        if (((*(_QWORD *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
        {
          v12 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v8);
          v13 = static NSObject.== infix(_:_:)();

          if ((v13 & 1) == 0)
          {
            v14 = ~v11;
            do
            {
              v8 = (v8 + 1) & v14;
              if (((*(_QWORD *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
                goto LABEL_24;
              v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v8);
              v16 = static NSObject.== infix(_:_:)();

            }
            while ((v16 & 1) == 0);
          }

LABEL_20:
          v17 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v8);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v9 = a4;
  else
    v9 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1AF448844](a1, a2, v9);
  a5(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized closure #1 in PresenceController.init<A>(dataSource:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized closure #1 in PresenceController.init<A>(dataSource:)(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of BackgroundSessionManagerDataSource(&v12, v10 + 40 * a1 + 32);
}

_QWORD *specialized PresenceController.init<A>(dataSource:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, [PresentDevice]>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type SKPresenceDataSource<EmptyPresenceContext> and conformance SKPresenceDataSource<A>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>, (uint64_t)&protocol conformance descriptor for SKPresenceDataSource<A>);
  v15 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  swift_allocObject();
  v9 = CurrentValueSubject.init(_:)();
  v10 = MEMORY[0x1E0DEE9E8];
  a2[3] = v8;
  a2[4] = v9;
  a2[5] = v10;
  a2[2] = a1;
  v11 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xC0);
  v12 = a1;
  v15 = v11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PresentDevice]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, MEMORY[0x1E0C95D90]);
  Publisher.map<A>(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, [PresentDevice]> and conformance Publishers.Map<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, [PresentDevice]>, MEMORY[0x1E0C95950]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  return a2;
}

uint64_t specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  Swift::String v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  id v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;

  v65 = a8;
  v69 = a7;
  v70 = a5;
  v72 = a10;
  v73 = a9;
  v74 = a6;
  v67 = a11;
  v68 = a2;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v15);
  v66 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v63 = *(_QWORD *)(v17 - 8);
  v64 = v17;
  MEMORY[0x1E0C80A78](v17);
  v62 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v59);
  v58 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v20);
  v56 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID();
  v57 = *(_QWORD **)(v22 - 8);
  v23 = v57;
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v26 = (_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter);
  v26[3] = &type metadata for FastSyncAnalyticsReporter;
  v26[4] = &protocol witness table for FastSyncAnalyticsReporter;
  *v26 = 0;
  v27 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  type metadata accessor for ABCReporter();
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init);
  v28[3] = 0x636E795374736146;
  v28[4] = 0xE800000000000000;
  v28[5] = 0x6E6F6973736553;
  v28[6] = 0xE700000000000000;
  *(_QWORD *)(a12 + v27) = v28;
  v29 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter;
  type metadata accessor for PowerLogReporter();
  swift_allocObject();
  *(_QWORD *)(a12 + v29) = PowerLogReporter.init(subsystem:category:)(0x697274654D435058, 0xEA00000000007363, 0x74634170756F7247, 0xEF73656974697669);
  v30 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  *(_QWORD *)(v30 + 8) = 0;
  swift_unknownObjectWeakInit();
  v31 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  *(_QWORD *)(v31 + 32) = 0;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  v32 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  v77 = 0xC000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>);
  swift_allocObject();
  *(_QWORD *)(a12 + v32) = CurrentValueSubject.init(_:)();
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session) = 0;
  v33 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables) = v33;
  v34 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  *(_QWORD *)(v34 + 32) = 0;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  v35 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController;
  *(_QWORD *)(v35 + 32) = 0;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)(v35 + 16) = 0u;
  v36 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
  *(_QWORD *)(a12 + v36) = objc_msgSend(objc_allocWithZone((Class)CPApplicationLauncher), sel_init);
  v37 = (void (*)(uint64_t, uint64_t, uint64_t))v23[2];
  v71 = a1;
  v37(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, a1, v22);
  v38 = v68;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity) = v68;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members) = a3;
  v39 = (_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember);
  v40 = v70;
  *v39 = a4;
  v39[1] = v40;
  outlined init with copy of UserNotificationCenter(v74, a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service);
  v41 = v69;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag) = v69;
  swift_beginAccess();
  *(_QWORD *)(v30 + 8) = &protocol witness table for BackgroundSessionManager;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  v70 = a4;
  swift_unknownObjectRetain();
  v60 = v41;
  v42 = v38;
  v68 = a3;
  swift_bridgeObjectRetain();
  outlined assign with copy of IDSGroupSessionProviderProtocol?(v72, v34);
  swift_endAccess();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v75 = 0xD000000000000012;
  v76 = 0x80000001ACF80FC0;
  v61 = v42;
  v43 = objc_msgSend(v42, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45 = (_QWORD *)v57[1];
  v69 = (void *)v22;
  v57 = v45;
  ((void (*)(char *, uint64_t))v45)(v25, v22);
  static DispatchQoS.unspecified.getter();
  v75 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  v46 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, *MEMORY[0x1E0DEF8D0], v64);
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v47 = v67;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags) = v67;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController) = v46;
  v48 = type metadata accessor for TaskPriority();
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
  v50 = (uint64_t)v66;
  v49(v66, 1, 1, v48);
  v51 = (_QWORD *)swift_allocObject();
  v51[2] = 0;
  v51[3] = 0;
  v51[4] = a12;
  v52 = v47;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5(v50, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v51);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  AnyCancellable.init(_:)();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (objc_msgSend(v52, sel_fastSyncPresenceSeparationEnabled))
  {

    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void *))(*(_QWORD *)v46 + 112))(v68);
    v49((char *)v50, 1, 1, v48);
    v53 = swift_allocObject();
    swift_weakInit();
    v54 = (_QWORD *)swift_allocObject();
    v54[2] = 0;
    v54[3] = 0;
    v54[4] = v46;
    v54[5] = v53;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v50, (uint64_t)&async function pointer to partial apply for closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v54);
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();

    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
  }
  outlined destroy of UUID?(v72, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v74);
  ((void (*)(uint64_t, void *))v57)(v71, v69);
  return a12;
}

uint64_t sub_1ACE05B5C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;

  return closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(*(_QWORD **)(v0 + 16), *(char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), (_QWORD *)(v0 + 56), *(void (**)(void *))(v0 + 96), *(_QWORD *)(v0 + 104), *(_DWORD *)(v0 + 112));
}

uint64_t sub_1ACE05BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  closure #1 in BackgroundSessionManager.leave(identifier:completion:)(*(_QWORD **)(v0 + 16), v0 + v2, *(void (**)(void))v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_1ACE05CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)(*(_QWORD **)(v0 + 16), v0 + v2, *(void (**)(void))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1ACE05DB4()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in BackgroundSessionManager.sessionsDidUpdate()(a1, v4, v5, v6);
}

void specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for PresenceHostSession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession and conformance NSObject, type metadata accessor for PresenceHostSession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v17;
    v16 = v18;
    v2 = v19;
    v3 = v20;
    v4 = v21;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v16 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v15 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
LABEL_8:
  if (v4)
  {
    v8 = (v4 - 1) & v4;
    v9 = __clz(__rbit64(v4)) | (v3 << 6);
    v10 = v3;
    goto LABEL_29;
  }
  v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 < v15)
    {
      v13 = *(_QWORD *)(v16 + 8 * v12);
      v10 = v3 + 1;
      if (v13)
        goto LABEL_28;
      v10 = v3 + 2;
      if (v3 + 2 >= v15)
        goto LABEL_33;
      v13 = *(_QWORD *)(v16 + 8 * v10);
      if (v13)
        goto LABEL_28;
      v10 = v3 + 3;
      if (v3 + 3 >= v15)
        goto LABEL_33;
      v13 = *(_QWORD *)(v16 + 8 * v10);
      if (v13)
        goto LABEL_28;
      v10 = v3 + 4;
      if (v3 + 4 >= v15)
        goto LABEL_33;
      v13 = *(_QWORD *)(v16 + 8 * v10);
      if (v13)
      {
LABEL_28:
        v8 = (v13 - 1) & v13;
        v9 = __clz(__rbit64(v13)) + (v10 << 6);
LABEL_29:
        v11 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v9);
        if (v11)
        {
          do
          {
            if ((static UUID.== infix(_:_:)() & 1) != 0)
              break;

            v3 = v10;
            v4 = v8;
            if ((v1 & 0x8000000000000000) == 0)
              goto LABEL_8;
LABEL_10:
            if (!__CocoaSet.Iterator.next()())
              break;
            type metadata accessor for PresenceHostSession(0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v11 = v22;
            swift_unknownObjectRelease();
            v10 = v3;
            v8 = v4;
          }
          while (v22);
        }
        goto LABEL_33;
      }
      v10 = v3 + 5;
      if (v3 + 5 < v15)
      {
        v13 = *(_QWORD *)(v16 + 8 * v10);
        if (!v13)
        {
          v14 = v3 + 6;
          while (v15 != v14)
          {
            v13 = *(_QWORD *)(v16 + 8 * v14++);
            if (v13)
            {
              v10 = v14 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of [String : ()].Iterator._Variant();
    return;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v20;
    v19 = v21;
    v2 = v22;
    v3 = v23;
    v4 = v24;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v19 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v18 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
LABEL_8:
  if (v4)
  {
    v8 = (v4 - 1) & v4;
    v9 = __clz(__rbit64(v4)) | (v3 << 6);
    v10 = v3;
    goto LABEL_29;
  }
  v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v18)
    {
      v14 = *(_QWORD *)(v19 + 8 * v13);
      v10 = v3 + 1;
      if (v14)
        goto LABEL_28;
      v10 = v3 + 2;
      if (v3 + 2 >= v18)
        goto LABEL_33;
      v14 = *(_QWORD *)(v19 + 8 * v10);
      if (v14)
        goto LABEL_28;
      v10 = v3 + 3;
      if (v3 + 3 >= v18)
        goto LABEL_33;
      v14 = *(_QWORD *)(v19 + 8 * v10);
      if (v14)
        goto LABEL_28;
      v10 = v3 + 4;
      if (v3 + 4 >= v18)
        goto LABEL_33;
      v14 = *(_QWORD *)(v19 + 8 * v10);
      if (v14)
      {
LABEL_28:
        v8 = (v14 - 1) & v14;
        v9 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_29:
        v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v9);
        v11 = v12;
        if (v12)
        {
          do
          {
            v16 = (void *)(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x2D0))(v12);
            v17 = objc_msgSend(v16, sel_isSystemActivity);

            if ((v17 & 1) == 0)
              break;

            v3 = v10;
            v4 = v8;
            if ((v1 & 0x8000000000000000) == 0)
              goto LABEL_8;
LABEL_10:
            if (!__CocoaSet.Iterator.next()())
              break;
            type metadata accessor for ActivitySession(0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v11 = v25;
            v12 = (_QWORD *)swift_unknownObjectRelease();
            v10 = v3;
            v8 = v4;
          }
          while (v25);
        }
        goto LABEL_33;
      }
      v10 = v3 + 5;
      if (v3 + 5 < v18)
      {
        v14 = *(_QWORD *)(v19 + 8 * v10);
        if (!v14)
        {
          v15 = v3 + 6;
          while (v18 != v15)
          {
            v14 = *(_QWORD *)(v19 + 8 * v15++);
            if (v14)
            {
              v10 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of [String : ()].Iterator._Variant();
    return;
  }
  __break(1u);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
    result = Set.Iterator.init(_cocoa:)();
    v1 = v18;
    v17 = v19;
    v3 = v20;
    v4 = v21;
    v5 = v22;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v17 = a1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v16 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
LABEL_8:
  if (v5)
  {
    v9 = (v5 - 1) & v5;
    v10 = __clz(__rbit64(v5)) | (v4 << 6);
    v11 = v4;
    goto LABEL_29;
  }
  v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 < v16)
    {
      v14 = *(_QWORD *)(v17 + 8 * v13);
      v11 = v4 + 1;
      if (v14)
        goto LABEL_28;
      v11 = v4 + 2;
      if (v4 + 2 < v16)
      {
        v14 = *(_QWORD *)(v17 + 8 * v11);
        if (v14)
          goto LABEL_28;
        v11 = v4 + 3;
        if (v4 + 3 < v16)
        {
          v14 = *(_QWORD *)(v17 + 8 * v11);
          if (v14)
            goto LABEL_28;
          v11 = v4 + 4;
          if (v4 + 4 < v16)
          {
            v14 = *(_QWORD *)(v17 + 8 * v11);
            if (v14)
              goto LABEL_28;
            v11 = v4 + 5;
            if (v4 + 5 < v16)
            {
              v14 = *(_QWORD *)(v17 + 8 * v11);
              if (!v14)
              {
                v15 = v4 + 6;
                while (v16 != v15)
                {
                  v14 = *(_QWORD *)(v17 + 8 * v15++);
                  if (v14)
                  {
                    v11 = v15 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              v9 = (v14 - 1) & v14;
              v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
              v12 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v10);
              swift_retain();
              if (v12)
              {
                do
                {
                  if ((static UUID.== infix(_:_:)() & 1) != 0)
                    break;
                  result = swift_release();
                  v4 = v11;
                  v5 = v9;
                  if ((v1 & 0x8000000000000000) == 0)
                    goto LABEL_8;
LABEL_10:
                  if (!__CocoaSet.Iterator.next()())
                    goto LABEL_33;
                  type metadata accessor for BackgroundSession(0);
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  v12 = v23;
                  swift_unknownObjectRelease();
                  v11 = v4;
                  v9 = v5;
                }
                while (v23);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    v12 = 0;
LABEL_34:
    outlined consume of [String : ()].Iterator._Variant();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t BackgroundSessionManager.sessions.didset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  static DispatchQoS.unspecified.getter();
  v20 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

unint64_t outlined copy of BackgroundSession.State(unint64_t result)
{
  unint64_t v1;

  v1 = result >> 62;
  if (!(result >> 62) || (_DWORD)v1 == 2 || (_DWORD)v1 == 1)
    return swift_retain();
  return result;
}

unint64_t outlined consume of BackgroundSession.State(unint64_t result)
{
  unint64_t v1;

  v1 = result >> 62;
  if (!(result >> 62) || (_DWORD)v1 == 2 || (_DWORD)v1 == 1)
    return swift_release();
  return result;
}

uint64_t sub_1ACE066AC()
{
  uint64_t v0;

  outlined consume of BackgroundSession.State(*(_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:)()
{
  uint64_t v0;

  return closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACE066EC()
{
  return objectdestroy_84Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)()
{
  uint64_t v0;

  return closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1ACE06700()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)()
{
  uint64_t v0;

  return closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACE06788@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xA0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACE067C8(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xA8);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1ACE06818@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE06858(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xC0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACE06898@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE068D8(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xD8);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACE06918(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xE8))();
}

uint64_t sub_1ACE06950(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xF0))(v4);
}

uint64_t dispatch thunk of BackGroundSessionManagerDelegate.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of BackGroundSessionManagerDelegate.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackGroundSessionManagerDelegate.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t storeEnumTagSinglePayload for BackgroundSessionManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1ACE06A0C + 4 * byte_1ACF62F95[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1ACE06A40 + 4 * asc_1ACF62F90[v4]))();
}

uint64_t sub_1ACE06A40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE06A48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE06A50);
  return result;
}

uint64_t sub_1ACE06A5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE06A64);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1ACE06A68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE06A70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSessionManagerError()
{
  return &type metadata for BackgroundSessionManagerError;
}

uint64_t method lookup function for BackgroundSessionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackgroundSessionManager.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.presenceSessions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.presenceSessions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.presenceSessions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.mockIDSGroupSessionProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.mockIDSGroupSessionProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.mockIDSGroupSessionProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.__allocating_init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createPresenceController(for:queue:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createPresenceController(for:isCrossAccount:queue:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createService(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of BackgroundSessionManager.leave(identifier:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessionsDidUpdate()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of BackgroundSessionManager.updateShare(_:activityID:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x148);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(a1, a2);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(a1, a2, v6);
}

uint64_t sub_1ACE06DC4()
{
  return objectdestroy_84Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  uint64_t v0;

  return closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_1ACE06E40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSo38TUConversationActivitySessionContainerC_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSo38TUConversationActivitySessionContainerC_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSo38TUConversationActivitySessionContainerC_TG5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1ACE06F14()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch();
}

uint64_t sub_1ACE06FB0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 64) = v4;
  return swift_task_switch();
}

uint64_t sub_1ACE0704C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_DWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 32);
  v6 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v4 + 168) = v3;
  *(_OWORD *)(v4 + 152) = v6;
  *(_DWORD *)(v4 + 192) = v2;
  *(_OWORD *)(v4 + 136) = v5;
  return swift_task_switch();
}

uint64_t sub_1ACE07110()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0)
    outlined consume of BackgroundSession.State(v1);
  return swift_deallocObject();
}

unint64_t partial apply for closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(unint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(a1, v1);
}

uint64_t sub_1ACE07148()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  *(_OWORD *)(v4 + 24) = v5;
  return swift_task_switch();
}

unint64_t outlined consume of BackgroundSession.State?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return outlined consume of BackgroundSession.State(result);
  return result;
}

unint64_t outlined copy of BackgroundSession.State?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return outlined copy of BackgroundSession.State(result);
  return result;
}

uint64_t sub_1ACE0721C()
{
  return objectdestroy_84Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;

  return closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1ACE07230()
{
  return swift_deallocObject();
}

uint64_t outlined assign with copy of IDSGroupSessionProviderProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, v4, v5, v6);
}

void partial apply for closure #2 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  closure #2 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)();
}

uint64_t sub_1ACE07300()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACE07324()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, v4, v5, v7, v6);
}

void partial apply for closure #4 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  closure #4 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)();
}

uint64_t sub_1ACE073D8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACE073FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + v6);
  v11 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1ACE07558()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v0;

  closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t partial apply for closure #2 in PresenceController.init<A>(dataSource:)()
{
  return closure #2 in PresenceController.init<A>(dataSource:)();
}

uint64_t sub_1ACE07594()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x140))();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  return partial apply for closure #1 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)() & 1;
}

uint64_t protocol witness for static XPCInterface.isConnectionEntitled(_:) in conformance ActivitySessionInterface()
{
  return specialized static XPCInterface.isConnectionEntitled(_:)() & 1;
}

uint64_t specialized static XPCInterface.isConnectionEntitled(_:)()
{
  char v0;
  char v1;
  char v2;
  _BYTE *v3;
  char v5;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2)
    v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v1 = v0;
  v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v1 & 1) != 0 || (v2 & 1) != 0)
    return 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v3 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  if ((*v3 & 1) != 0)
    return 1;
  v5 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v5 == 2)
    return v3[1];
  else
    return v5 & 1;
}

uint64_t static XPCInterface.isConnectionEntitled(_:)()
{
  char v0;
  char v1;
  char v2;
  _BYTE *v3;
  char v5;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2)
    v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v1 = v0;
  v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v1 & 1) != 0 || (v2 & 1) != 0)
    return 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v3 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  if ((*v3 & 1) != 0)
    return 1;
  v5 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v5 == 2)
    return v3[1];
  else
    return v5 & 1;
}

{
  return static XPCInterface.isConnectionEntitled(_:)() & 1;
}

uint64_t specialized NSXPCConnection.value<A>(_:forEntitlement:)(char a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  __int128 v6;
  _OWORD v7[2];

  LOBYTE(v7[0]) = a1;
  v2 = Entitlement.rawValue.getter();
  v3 = (void *)MEMORY[0x1AF4480F4](v2);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
    return v6;
  else
    return 2;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  __int128 v6;
  _OWORD v7[2];

  LOBYTE(v7[0]) = a1;
  v2 = Entitlement.rawValue.getter();
  v3 = (void *)MEMORY[0x1AF4480F4](v2);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (swift_dynamicCast())
    return v6;
  else
    return 0;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  __int128 v6;
  _OWORD v7[2];

  LOBYTE(v7[0]) = a1;
  v2 = Entitlement.rawValue.getter();
  v3 = (void *)MEMORY[0x1AF4480F4](v2);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  if (swift_dynamicCast())
    return v6;
  else
    return 0;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  __int128 v6;
  _OWORD v7[2];

  LOBYTE(v7[0]) = a1;
  v2 = Entitlement.rawValue.getter();
  v3 = (void *)MEMORY[0x1AF4480F4](v2);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
    return v6;
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for XPCIdentity(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1ACE07BF0 + 4 * byte_1ACF63110[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for XPCIdentity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1ACE07C9C + 4 * byte_1ACF6311A[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1ACE07CD0 + 4 * byte_1ACF63115[v5]))();
}

uint64_t sub_1ACE07CD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE07CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE07CE0);
  return result;
}

uint64_t sub_1ACE07CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE07CF4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1ACE07CF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE07D00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for XPCIdentity(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for XPCIdentity(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for XPCIdentity()
{
  return &type metadata for XPCIdentity;
}

uint64_t dispatch thunk of static XPCInterface.identity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static XPCInterface.hostObjectInterface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static XPCInterface.clientObjectInterface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static XPCInterface.isConnectionEntitled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t XPCHostConnection.clientObject.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  int v9;
  uint64_t v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _BYTE v13[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v13[-v6];
  v8 = objc_msgSend(*(id *)(v1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v9 = swift_dynamicCast();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v9)
  {
    v11(v7, 0, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(a1, v7, AssociatedTypeWitness);
  }
  else
  {
    v11(v7, 1, 1, AssociatedTypeWitness);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    __break(1u);
  }
  return result;
}

uint64_t XPCHostConnection.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for XPCHostConnection.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id XPCHostConnection.connection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + direct field offset for XPCHostConnection.connection);
}

id XPCHostConnection.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + direct field offset for XPCHostConnection.queue);
}

uint64_t XPCHostConnection.bundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCHostConnection.isEntitledToUsePublicAPI.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI);
}

uint64_t XPCHostConnection.isEntitledToUsePrivateAPI.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI);
}

uint64_t XPCHostConnection.isEntitledToAccessAllSessions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToAccessAllSessions);
}

uint64_t XPCHostConnection.isEntitledToForWebFallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToForWebFallback);
}

uint64_t XPCHostConnection.isEntitledToBypassSharePlayRestriction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction);
}

uint64_t XPCHostConnection.definedSystemActivityIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers);
}

uint64_t XPCHostConnection.isEntitledToUseGameCenter.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToUseGameCenter);
}

uint64_t XPCHostConnection.isEntitledToProvideCustomEndpoint.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint);
}

uint64_t XPCHostConnection.hasScheduledInvalidation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.hasScheduledInvalidation);
}

uint64_t XPCHostConnection.hasScheduledInvalidation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for XPCHostConnection.hasScheduledInvalidation) = result;
  return result;
}

id @objc XPCHostConnection.description.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  v2 = XPCHostConnection.description.getter();
  v4 = v3;

  v5 = (void *)MEMORY[0x1AF4480F4](v2, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t XPCHostConnection.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;

  swift_getObjectType();
  _StringGuts.grow(_:)(84);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._object = (void *)0x80000001ACF80FE0;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier);
  v6 = *(void **)(v0 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  v8._object = (void *)0x80000001ACF81000;
  String.append(_:)(v8);
  if (*(_BYTE *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI))
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (*(_BYTE *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI))
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0xD00000000000001BLL;
  v12._object = (void *)0x80000001ACF81020;
  String.append(_:)(v12);
  if (*(_BYTE *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI))
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if (*(_BYTE *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI))
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

char *XPCHostConnection.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return XPCHostConnection.init(connection:queue:)(a1, a2);
}

char *XPCHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  char *v26;
  uint8_t *v27;
  uint64_t v28;
  char *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  char *v33;
  char v34;
  char *v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  id v61;
  void *v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  id v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  id v75;
  uint64_t v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  _QWORD *v81;
  char *v82;
  char *v83;
  char *v85;
  char *v86;
  void *v87;
  void *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  char *aBlock;
  uint64_t v95;
  uint64_t (*v96)();
  void *v97;
  void (*v98)();
  _QWORD *v99;
  objc_super v100;

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v6 = (char *)v2 + direct field offset for XPCHostConnection.id;
  v7 = v2;
  UUID.init()();
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.hasScheduledInvalidation) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)((char *)v7
            + direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier) = MEMORY[0x1E0DEE9E0];
  v90 = direct field offset for XPCHostConnection.connection;
  *(_QWORD *)((char *)v7 + direct field offset for XPCHostConnection.connection) = a1;
  v91 = direct field offset for XPCHostConnection.queue;
  *(_QWORD *)((char *)v7 + direct field offset for XPCHostConnection.queue) = a2;
  v8 = a1;
  v9 = a2;
  v10 = NSXPCConnection.bundleIdentifier.getter();
  v92 = v5;
  if (!v11)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.host);
    v21 = (char *)v8;
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v86 = v6;
      v24 = (uint8_t *)swift_slowAlloc();
      v87 = v9;
      v25 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v24 = 138412290;
      aBlock = v21;
      v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v25 = v21;

      _os_log_impl(&dword_1ACCCC000, v22, v23, "Denying connection %@ because it does not have a valid bundle identifier.", v24, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v25, -1, -1);
      v27 = v24;
      v6 = v86;
      MEMORY[0x1AF44981C](v27, -1, -1);

    }
    else
    {

    }
    goto LABEL_27;
  }
  v12 = v10;
  v13 = v11;
  v85 = v6;
  v14 = *(_QWORD *)(v5 + 80);
  v15 = *(_QWORD *)(v5 + 88);
  if (((*(uint64_t (**)(id, uint64_t, uint64_t))(v15 + 48))(v8, v14, v15) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for host != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.host);
    v29 = (char *)v8;
    v22 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v88 = v9;
      v32 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v31 = 138412290;
      aBlock = v29;
      v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v32 = v29;

      _os_log_impl(&dword_1ACCCC000, v22, v30, "Denying connection %@ because it does not have valid entitlements.", v31, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v32, -1, -1);
      MEMORY[0x1AF44981C](v31, -1, -1);

    }
    else
    {

    }
    v6 = v85;
LABEL_27:

    v40 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v6, v40);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for XPCHostConnection(0, *(_QWORD *)(v92 + 80), *(_QWORD *)(v92 + 88), v41);
    swift_deallocPartialClassInstance();
    return 0;
  }
  v16 = (_QWORD *)((char *)v7 + direct field offset for XPCHostConnection.bundleIdentifier);
  *v16 = v12;
  v16[1] = v13;
  v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v17 == 2)
  {
    v18 = NSXPCConnection.isEntitledToUseGameCenter.getter();
    v19 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
    if ((v18 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v34 = v17;
    v19 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
    if ((v34 & 1) != 0)
      goto LABEL_20;
  }
  if ((v19 & 1) == 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v35 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v36 = *v35;
    goto LABEL_21;
  }
LABEL_20:
  v36 = 1;
LABEL_21:
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI) = v36;
  v37 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v37 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v38 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v39 = *(_BYTE *)(v38 + 1);
  }
  else
  {
    v39 = v37 & 1;
  }
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI) = v39;
  v43 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v43 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v44 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v45 = *(_BYTE *)(v44 + 24);
  }
  else
  {
    v45 = v43 & 1;
  }
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToAccessAllSessions) = v45;
  v46 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v46 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v47 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v48 = *(_BYTE *)(v47 + 25);
  }
  else
  {
    v48 = v46 & 1;
  }
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToForWebFallback) = v48;
  v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v49)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    swift_beginAccess();
    v49 = swift_bridgeObjectRetain();
  }
  *(_QWORD *)((char *)v7 + direct field offset for XPCHostConnection.definedSystemActivityIdentifiers) = v49;
  v50 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v50 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v51 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v52 = *(_BYTE *)(v51 + 40);
  }
  else
  {
    v52 = v50 & 1;
  }
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers) = v52;
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToUseGameCenter) = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  v53 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  v89 = (char *)v9;
  if (v53 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v54 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v55 = *(_BYTE *)(v54 + 42);
  }
  else
  {
    v55 = v53 & 1;
  }
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) = v55;
  v93 = v8;
  *((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction) = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v100.receiver = v7;
  v100.super_class = (Class)type metadata accessor for XPCHostConnection(0, v14, v15, v56);
  v42 = (char *)objc_msgSendSuper2(&v100, sel_init);
  v57 = direct field offset for XPCHostConnection.connection;
  v58 = *(void **)&v42[direct field offset for XPCHostConnection.connection];
  v59 = v42;
  objc_msgSend(v58, sel_setExportedObject_, v59);
  v60 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 32);
  v61 = v58;
  v62 = (void *)v60(v14, v15);
  objc_msgSend(v61, sel_setExportedInterface_, v62);

  v63 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 40);
  v64 = *(id *)&v42[v57];
  v65 = (void *)v63(v14, v15);
  objc_msgSend(v64, sel_setRemoteObjectInterface_, v65);

  v66 = *(void **)&v42[v57];
  objc_msgSend(v66, sel__setQueue_, *(_QWORD *)&v59[direct field offset for XPCHostConnection.queue]);
  v67 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v68 = (_QWORD *)swift_allocObject();
  v68[2] = v14;
  v68[3] = v15;
  v68[4] = v67;
  v98 = partial apply for closure #1 in XPCHostConnection.init(connection:queue:);
  v99 = v68;
  aBlock = (char *)MEMORY[0x1E0C809B0];
  v95 = 1107296256;
  v96 = thunk for @escaping @callee_guaranteed () -> ();
  v97 = &block_descriptor_13;
  v69 = _Block_copy(&aBlock);
  v70 = v66;
  swift_release();
  objc_msgSend(v70, sel_setInterruptionHandler_, v69);
  _Block_release(v69);

  v71 = *(void **)&v42[v57];
  v72 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v73 = (_QWORD *)swift_allocObject();
  v73[2] = v14;
  v73[3] = v15;
  v73[4] = v72;
  v98 = partial apply for closure #2 in XPCHostConnection.init(connection:queue:);
  v99 = v73;
  aBlock = (char *)MEMORY[0x1E0C809B0];
  v95 = 1107296256;
  v96 = thunk for @escaping @callee_guaranteed () -> ();
  v97 = &block_descriptor_10_1;
  v74 = _Block_copy(&aBlock);
  v75 = v71;
  swift_release();
  objc_msgSend(v75, sel_setInvalidationHandler_, v74);
  _Block_release(v74);

  objc_msgSend(*(id *)&v42[v57], sel_resume);
  if (one-time initialization token for host != -1)
    swift_once();
  v76 = type metadata accessor for Logger();
  __swift_project_value_buffer(v76, (uint64_t)static Log.host);
  v77 = v59;
  v78 = Logger.logObject.getter();
  v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc();
    v81 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v80 = 138412290;
    aBlock = v77;
    v82 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v81 = v42;

    _os_log_impl(&dword_1ACCCC000, v78, v79, "Created %@", v80, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v81, -1, -1);
    MEMORY[0x1AF44981C](v80, -1, -1);
    v83 = v89;
  }
  else
  {

    v83 = v77;
  }

  return v42;
}

void closure #1 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  NSObject *v10;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1AF449918](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (one-time initialization token for host != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    v5 = v3;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v3;

      _os_log_impl(&dword_1ACCCC000, v6, v7, "Connection interrupted for host connection: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v9, -1, -1);
      MEMORY[0x1AF44981C](v8, -1, -1);
    }
    else
    {

      v6 = v5;
    }

    objc_msgSend(*(id *)((char *)&v5->isa + direct field offset for XPCHostConnection.connection), sel_invalidate);
  }
}

void closure #2 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  void *v13;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1AF449918](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (one-time initialization token for host != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    v5 = v3;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412546;
      v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v3;

      *(_WORD *)(v8 + 12) = 2112;
      v13 = *(Class *)((char *)&v10->isa + direct field offset for XPCHostConnection.queue);
      v11 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v9[1] = v13;

      _os_log_impl(&dword_1ACCCC000, v6, v7, "Connection invalidated for host connection: %@ on queue = %@", (uint8_t *)v8, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v9, -1, -1);
      MEMORY[0x1AF44981C](v8, -1, -1);
    }
    else
    {

      v6 = v5;
    }

    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v5->isa) + 0x138))(v12);
  }
}

Swift::Void __swiftcall XPCHostConnection.destroyConnection()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + direct field offset for XPCHostConnection.connection);
  objc_msgSend(v1, sel_setExportedObject_, 0);
  objc_msgSend(v1, sel_setInvalidationHandler_, 0);
  objc_msgSend(v1, sel_setInterruptionHandler_, 0);
  objc_msgSend(v1, sel_invalidate);
}

void XPCHostConnection.withMessageCoalescing(byIdentifier:block:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  Swift::Int *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  _QWORD aBlock[6];
  Swift::Int v22;

  v5 = v4;
  v10 = (uint64_t *)&v4[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks];
  swift_beginAccess();
  v11 = *v10;
  swift_bridgeObjectRetain();
  v12 = specialized Set.contains(_:)(a1, a2, v11);
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a3;
    *(_QWORD *)(v13 + 24) = a4;
    v14 = (Swift::Int *)&v5[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v14;
    *v14 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)_sIg_Ieg_TRTA_0, v13, a1, a2, isUniquelyReferenced_nonNull_native);
    *v14 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v22, a1, a2);
    swift_endAccess();
    v16 = swift_bridgeObjectRelease();
    a3(v16);
    v17 = *(void **)&v5[direct field offset for XPCHostConnection.connection];
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = v5;
    v18[3] = a1;
    v18[4] = a2;
    aBlock[4] = partial apply for closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_16;
    v19 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    v20 = v5;
    swift_release();
    objc_msgSend(v17, sel_scheduleSendBarrierBlock_, v19);
    _Block_release(v19);
  }
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for ActivitySession(0);
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a2, a3);
  swift_endAccess();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)((char *)a1
                + direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier);
  result = swift_beginAccess();
  v8 = *v6;
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
    {
      v13 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = v13;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v12 = specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      swift_endAccess();
      swift_bridgeObjectRelease();
      _sxRi_zRi0_zlyytIseghHr_SgWOe(v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x140))(a2, a3, partial apply for thunk for @callee_guaranteed () -> (), v11);
      return swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void XPCHostConnection.scheduleInvalidation(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  void *v5;
  _QWORD *v6;
  void *v7;
  _BYTE *v8;
  _QWORD v9[6];

  if ((v2[direct field offset for XPCHostConnection.hasScheduledInvalidation] & 1) == 0)
  {
    v2[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 1;
    v5 = *(void **)&v2[direct field offset for XPCHostConnection.connection];
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = v2;
    v6[3] = a1;
    v6[4] = a2;
    v9[4] = partial apply for closure #1 in XPCHostConnection.scheduleInvalidation(_:);
    v9[5] = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed () -> ();
    v9[3] = &block_descriptor_25_0;
    v7 = _Block_copy(v9);
    v8 = v2;
    swift_retain();
    swift_release();
    objc_msgSend(v5, sel_scheduleSendBarrierBlock_, v7);
    _Block_release(v7);
  }
}

void closure #1 in XPCHostConnection.scheduleInvalidation(_:)(_BYTE *a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  _BYTE *v8;
  _BYTE *v9;

  a1[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  if ((a2() & 1) != 0)
  {
    objc_msgSend(*(id *)&a1[direct field offset for XPCHostConnection.connection], sel_invalidate);
  }
  else
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.host);
    v9 = a1;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138412290;
      v8 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v7 = v9;

      _os_log_impl(&dword_1ACCCC000, v4, v5, "No longer invalidating scheduled invalidation for client %@", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v7, -1, -1);
      MEMORY[0x1AF44981C](v6, -1, -1);

    }
    else
    {

    }
  }
}

id XPCHostConnection.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void XPCHostConnection.init()()
{
  specialized XPCHostConnection.init()();
}

void @objc XPCHostConnection.init()()
{
  specialized XPCHostConnection.init()();
}

id XPCHostConnection.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for XPCHostConnection(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc XPCHostConnection.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + direct field offset for XPCHostConnection.id;
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Identifiable.id.getter in conformance XPCHostConnection<A>@<X0>(uint64_t a1@<X8>)
{
  return XPCHostConnection.id.getter(a1);
}

uint64_t XPCHostConnection.isInCallUI.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v2;
  v3 = (id)TUPreferredFaceTimeBundleIdentifier();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v6;
  v7 = specialized Sequence<>.contains(_:)(*(_QWORD *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier), *(_QWORD *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier + 8), (_QWORD *)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v7 & 1;
}

uint64_t type metadata accessor for XPCHostConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCHostConnection);
}

uint64_t sub_1ACE09E84()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACE09EA8()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in XPCHostConnection.init(connection:queue:)()
{
  uint64_t v0;

  closure #1 in XPCHostConnection.init(connection:queue:)(*(_QWORD *)(v0 + 32));
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

void partial apply for closure #2 in XPCHostConnection.init(connection:queue:)()
{
  uint64_t v0;

  closure #2 in XPCHostConnection.init(connection:queue:)(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACE09EEC()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:)()
{
  uint64_t v0;

  return closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACE09F04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1ACE09F28()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void partial apply for closure #1 in XPCHostConnection.scheduleInvalidation(_:)()
{
  uint64_t v0;

  closure #1 in XPCHostConnection.scheduleInvalidation(_:)(*(_BYTE **)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

void specialized XPCHostConnection.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata completion function for XPCHostConnection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t method lookup function for XPCHostConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCHostConnection.__allocating_init(connection:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of XPCHostConnection.destroyConnection()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of XPCHostConnection.handleHostConnectionInvalidated()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of XPCHostConnection.withMessageCoalescing(byIdentifier:block:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of XPCHostConnection.scheduleInvalidation(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

BOOL static ActivityAuthorizationError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ActivityAuthorizationError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int ActivityAuthorizationError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

id ActivityAuthorizationManager.neighborhoodActivityConduit.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit;
  v2 = *(void **)(v0 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v5 = objc_msgSend(v4, sel_neighborhoodActivityConduit);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id ActivityAuthorizationManager.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPActivityAuthorizationManager_queue);
}

id ActivityAuthorizationManager.appPolicyManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager);
}

uint64_t ActivityAuthorizationManager.audioRoutePolicyManager.getter()
{
  return swift_unknownObjectRetain();
}

id ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  id v17;
  uint64_t v19;

  v13 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  ObjectType = swift_getObjectType();
  v16 = swift_getObjectType();
  v17 = specialized ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, v14, a3, a4, a5, a6, v19, ObjectType, v13, v16, v12);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v17;
}

id ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  id v20;
  char *v22[2];

  v13 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  ObjectType = swift_getObjectType();
  v19 = swift_getObjectType();
  v20 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v16, a3, a4, a5, a6, v22[1], ObjectType, v13, v19, v12);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v20;
}

id ActivityAuthorizationManager.__allocating_init(dataSource:queue:appPolicyManager:)(void *a1, void *a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v4 = v3;
  v8 = objc_allocWithZone(v4);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9 = one-time initialization token for shared;
  v10 = (id)static IMUserNotificationCenter.shared;
  if (v9 != -1)
    swift_once();
  v11 = (void *)static CPAudioRoutePolicyManager.shared;
  v12 = objc_allocWithZone((Class)CPFeatureFlags);
  v13 = v11;
  v14 = objc_msgSend(v12, sel_init);
  v15 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v10, a2, a3, v13, v14, (char *)objc_allocWithZone(v4));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v15;
}

id ActivityAuthorizationManager.init(dataSource:queue:appPolicyManager:)(void *a1, void *a2, void *a3)
{
  objc_class *ObjectType;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7 = one-time initialization token for shared;
  v8 = (id)static IMUserNotificationCenter.shared;
  if (v7 != -1)
    swift_once();
  v9 = (void *)static CPAudioRoutePolicyManager.shared;
  v10 = objc_allocWithZone((Class)CPFeatureFlags);
  v11 = v9;
  v12 = objc_msgSend(v10, sel_init);
  v13 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v8, a2, a3, v11, v12, (char *)objc_allocWithZone(ObjectType));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v13;
}

id ActivityAuthorizationManager.__allocating_init(dataSource:queue:)(void *a1, void *a2)
{
  objc_class *v2;
  objc_class *v3;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7 = one-time initialization token for shared;
  v8 = (id)static IMUserNotificationCenter.shared;
  if (v7 != -1)
    swift_once();
  v9 = one-time initialization token for shared;
  v10 = (id)static CPApplicationPolicyManager.shared;
  if (v9 != -1)
    swift_once();
  v11 = (void *)static CPAudioRoutePolicyManager.shared;
  v12 = objc_allocWithZone((Class)CPFeatureFlags);
  v13 = v11;
  v14 = objc_msgSend(v12, sel_init);
  v15 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v8, a2, v10, v13, v14, (char *)objc_allocWithZone(v3));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v15;
}

id ActivityAuthorizationManager.init(dataSource:queue:)(void *a1, void *a2)
{
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5 = one-time initialization token for shared;
  v6 = (id)static IMUserNotificationCenter.shared;
  if (v5 != -1)
    swift_once();
  v7 = one-time initialization token for shared;
  v8 = (id)static CPApplicationPolicyManager.shared;
  if (v7 != -1)
    swift_once();
  v9 = (void *)static CPAudioRoutePolicyManager.shared;
  v10 = objc_allocWithZone((Class)CPFeatureFlags);
  v11 = v9;
  v12 = objc_msgSend(v10, sel_init);
  v13 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v6, a2, v8, v11, v12, (char *)objc_allocWithZone(ObjectType));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v13;
}

void ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(uint64_t a1, void *a2, char a3, _QWORD *a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  _BYTE *v7;
  _BYTE *v8;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  unsigned __int8 v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _BYTE *v61;
  id v62;
  void *v63;
  _BYTE *v64;
  uint64_t v65;
  _QWORD *v66;
  _BYTE *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  id v76;
  uint64_t v77;
  unsigned __int8 v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  _QWORD *v83;
  uint64_t v85[3];
  uint64_t v86;

  v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF5B430;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 56) = v17;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 72) = v18;
  v19 = MEMORY[0x1AF449918](&v8[OBJC_IVAR___CPActivityAuthorizationManager_dataSource]);
  if (!v19)
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    a6(0, 0);
    return;
  }
  v20 = (void *)v19;
  v83 = a4;
  swift_getObjectType();
  if (!objc_msgSend(v20, sel_allActiveConversationParticipantsSupportSharePlay))
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    if (one-time initialization token for host != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.host);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1ACCCC000, v30, v31, "At least one of the active participants is on an older SharePlay protocol version. Not allowing SharePlay", v32, 2u);
      MEMORY[0x1AF44981C](v32, -1, -1);
    }

    a6(0, 0);
    objc_msgSend(v20, sel_displaySharePlayUnableToStartAlert);
    goto LABEL_30;
  }
  v82 = a6;
  v21 = specialized Sequence<>.contains(_:)(a1, (uint64_t)a2, (_QWORD *)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if ((v21 & 1) != 0)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v86 = v26;
      *(_DWORD *)v25 = 136315138;
      v85[1] = (uint64_t)a2;
      swift_bridgeObjectRetain();
      v27 = String.init<A>(reflecting:)();
      v85[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v23, v24, "Bypassing user authorization for activity started from %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v26, -1, -1);
      MEMORY[0x1AF44981C](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v82(1, 0);
LABEL_30:
    swift_unknownObjectRelease();
    return;
  }
  CPConversationManagerDataSource.activeConversation.getter();
  v34 = v82;
  if (!v33)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      v85[0] = v42;
      *(_DWORD *)v41 = 136315138;
      swift_bridgeObjectRetain();
      v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v39, v40, "Not allowing activation from %s because there is no active conversation.", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v42, -1, -1);
      MEMORY[0x1AF44981C](v41, -1, -1);

      v82(0, 0);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v82(0, 0);
    }
    goto LABEL_30;
  }
  v81 = v33;
  v35 = *(_QWORD *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 16));
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a1, (uint64_t)a2);
  v37 = v36;
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v35 + 16));
  if (v37 && (a3 & 1) == 0)
  {
    v82(1, 0);
LABEL_44:
    swift_unknownObjectRelease();

    return;
  }
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 16));
  v43 = v8[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest];
  v8[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 1;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v35 + 16));
  if ((v43 & 1) != 0)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = swift_slowAlloc();
      v85[0] = v48;
      *(_DWORD *)v47 = 136315138;
      swift_bridgeObjectRetain();
      v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
      v34 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v45, v46, "Not allowing activation from %s because an authorization prompt is already being displayed", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v48, -1, -1);
      MEMORY[0x1AF44981C](v47, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    v63 = (void *)swift_allocError();
    *v64 = 3;
    v34(0, (uint64_t)v63);

    goto LABEL_44;
  }
  v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v50 = (_QWORD *)swift_allocObject();
  v50[2] = v49;
  v50[3] = v82;
  v79 = v50;
  v50[4] = a7;
  swift_retain_n();
  v80 = v49;
  swift_retain();
  v51 = v81;
  v52 = TUConversation.hasLocalActivitySession(forBundleIdentifier:)(a1, (uint64_t)a2);
  if (v83
    && *((_BYTE *)v83 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition)
    && (*((_BYTE *)v83 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) == 1 || (v52 & 1) == 0))
  {
    v78 = v52;
    if (one-time initialization token for host != -1)
      swift_once();
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Log.host);
    v66 = v83;
    swift_bridgeObjectRetain_n();
    v67 = v66;
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = swift_slowAlloc();
      v77 = swift_slowAlloc();
      v85[0] = v77;
      *(_DWORD *)v70 = 136315650;
      LOBYTE(v86) = v67[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition];
      v71 = String.init<A>(reflecting:)();
      v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v70 + 12) = 2080;
      swift_bridgeObjectRetain();
      v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v70 + 22) = 1024;
      LODWORD(v86) = v78 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v68, v69, "Prompting to start activity due to override %s; bundleID %s has existing session? %{BOOL}d",
        (uint8_t *)v70,
        0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v77, -1, -1);
      MEMORY[0x1AF44981C](v70, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v73 = swift_allocObject();
    *(_QWORD *)(v73 + 16) = partial apply for closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:);
    *(_QWORD *)(v73 + 24) = v79;
    *(_QWORD *)(v73 + 32) = v8;
    *(_QWORD *)(v73 + 40) = a1;
    *(_QWORD *)(v73 + 48) = a2;
    *(_QWORD *)(v73 + 56) = v81;
    *(_BYTE *)(v73 + 64) = a3 & 1;
    *(_QWORD *)(v73 + 72) = a5;
    *(_QWORD *)(v73 + 80) = v83;
    swift_unknownObjectRetain();
    v74 = v67;
    swift_bridgeObjectRetain();
    swift_retain();
    v75 = v8;
    v76 = v81;
    ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(a1, a2, v76, a3 & 1, v83, (uint64_t)partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:), v73);
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
    goto LABEL_51;
  }
  if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v8[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager])
                                                   + 0x150))(a1, a2) & 1) == 0|| !objc_msgSend(*(id *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager], sel_sharePlaySupported))
  {
    v59 = swift_allocObject();
    *(_QWORD *)(v59 + 16) = partial apply for closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:);
    *(_QWORD *)(v59 + 24) = v79;
    *(_QWORD *)(v59 + 32) = v8;
    *(_QWORD *)(v59 + 40) = a1;
    *(_QWORD *)(v59 + 48) = a2;
    *(_QWORD *)(v59 + 56) = v81;
    *(_BYTE *)(v59 + 64) = a3 & 1;
    *(_QWORD *)(v59 + 72) = a5;
    *(_QWORD *)(v59 + 80) = v83;
    swift_unknownObjectRetain();
    v60 = v83;
    swift_bridgeObjectRetain();
    swift_retain();
    v61 = v8;
    v62 = v81;
    ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(a1, a2, v62, a3 & 1, v83, (uint64_t)partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:), v59);
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
LABEL_51:
    swift_release();
    swift_release();
    return;
  }
  if (one-time initialization token for host != -1)
    swift_once();
  v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    v57 = swift_slowAlloc();
    v85[0] = v57;
    *(_DWORD *)v56 = 136315138;
    swift_bridgeObjectRetain();
    v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
    v34 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v54, v55, "Skipping confirmation prompt as sharing is enabled for: %s", v56, 0xCu);
    swift_arrayDestroy();
    v58 = v57;
    v51 = v81;
    MEMORY[0x1AF44981C](v58, -1, -1);
    MEMORY[0x1AF44981C](v56, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_retain();
  swift_retain();
  specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(a1, a2, v51, a3 & 1, (uint64_t)v83, v8, v80, v34, a7);
  swift_unknownObjectRelease();

  swift_release();
  swift_release_n();
  swift_release_n();
}

void CPConversationManagerDataSource.activeConversation.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;

  v1 = objc_msgSend(v0, sel_conversationsByUUID);
  type metadata accessor for UUID();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * i);
    if (objc_msgSend(v14, sel_state) == (id)3)
    {
LABEL_26:
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v7)
      goto LABEL_26;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_26;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_26;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_26;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
          {
            v8 = v11 + 4;
            if (v11 + 4 >= v7)
              goto LABEL_26;
            v12 = *(_QWORD *)(v3 + 8 * v8);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_22:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 5;
  if (v13 >= v7)
    goto LABEL_26;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_26;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_29:
  __break(1u);
}

uint64_t closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;

  v7 = a3 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x1AF449918](v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = *(_QWORD *)(v8 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
    swift_retain();

    os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 16));
    swift_beginAccess();
    v11 = (_BYTE *)MEMORY[0x1AF449918](v7);
    if (v11)
    {
      v11[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;

    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 16));
    swift_release();
  }
  return a4(a1 & 1, a2);
}

uint64_t ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, char a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, void *, unint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  char *v51;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v8 = v7;
  v63 = a7;
  v59 = a5;
  v60 = a6;
  v13 = type metadata accessor for UUID();
  v62 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v61 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v16 = a3;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  v19 = os_log_type_enabled(v17, v18);
  v58 = a1;
  if (v19)
  {
    v20 = v16;
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v57 = (unint64_t)v8;
    v54 = (_QWORD *)v22;
    v55 = swift_slowAlloc();
    v65 = v55;
    *(_DWORD *)v21 = 136315394;
    v56 = v13;
    swift_bridgeObjectRetain();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2112;
    v64 = (uint64_t)v20;
    v23 = a4;
    v24 = v20;
    v13 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25 = v20;
    v26 = v54;
    *v54 = v20;

    a4 = v23;
    _os_log_impl(&dword_1ACCCC000, v17, v18, "Deferring activity authorization request to user for bundleIdentifier: %s on conversation: %@.", (uint8_t *)v21, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v8 = (char *)v57;
    MEMORY[0x1AF44981C](v26, -1, -1);
    v27 = v55;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v27, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);

  }
  else
  {

    v25 = v16;
    swift_bridgeObjectRelease_n();
  }
  v28 = *(void **)&v8[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager];
  if ((objc_msgSend(v28, sel_sharePlaySupported) & 1) != 0
    || (v29 = objc_msgSend(v28, sel_pickedRoute)) == 0)
  {
    v38 = a4 & 1;
    v37 = v58;
    v57 = specialized ActivityAuthorizationManager.authorizationRequestDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:overrides:)(v58, (uint64_t)a2, 0, v38, (uint64_t)v59);
  }
  else
  {
    v30 = v29;
    v31 = objc_msgSend(v29, sel_name);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v13;
    v35 = v34;

    v36 = a4 & 1;
    v37 = v58;
    v57 = specialized ActivityAuthorizationManager.unsupportedAudioRouteDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:routeName:)(v58, (uint64_t)a2, v36, v32, v35);
    v13 = v33;
    swift_bridgeObjectRelease();

  }
  v39 = *(_QWORD *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  v40 = *(_QWORD *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  v59 = __swift_project_boxed_opaque_existential_1(&v8[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v39);
  v41 = objc_msgSend(v25, sel_groupUUID);
  v42 = v61;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
  v65 = dispatch thunk of CustomStringConvertible.description.getter();
  v66 = v43;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v42, v13);
  v44._countAndFlagsBits = 46;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = v37;
  v45._object = a2;
  String.append(_:)(v45);
  v46 = v65;
  v47 = v66;
  v48 = (_QWORD *)swift_allocObject();
  v48[2] = v8;
  v48[3] = v37;
  v49 = v60;
  v48[4] = a2;
  v48[5] = v49;
  v48[6] = v63;
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, unint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v40 + 8);
  swift_bridgeObjectRetain();
  v51 = v8;
  swift_retain();
  v50(v46, v47, v37, a2, v57, 1, partial apply for closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:), v48, v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

id TUConversation.hasLocalActivitySession(forBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  id v16;

  v3 = v2;
  v6 = objc_msgSend(v3, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = specialized Sequence.max(by:)(v7);
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = objc_msgSend(v8, sel_activity);
    v10 = objc_msgSend(v9, sel_bundleIdentifier);

    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;

      if (v11 == a1 && v13 == a2)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v16 = 0;
        if ((v15 & 1) == 0)
          goto LABEL_13;
      }
      v16 = objc_msgSend(v8, sel_isLocallyInitiated);
    }
    else
    {
      v16 = 0;
    }
LABEL_13:

    return v16;
  }
  return 0;
}

void ActivityAuthorizationManager.requestAuthorizationForApplicationLaunch(withActivity:completionHandler:)(void *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  void (*v22)(_QWORD, _QWORD);
  uint8_t *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v8)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.host);
    v19 = a1;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = a2;
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v23 = 138412290;
      v32 = (uint64_t)v19;
      v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v24 = v19;

      _os_log_impl(&dword_1ACCCC000, v20, v21, "Invalid bundleIdentifier for activity %@", v23, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v24, -1, -1);
      MEMORY[0x1AF44981C](v23, -1, -1);

      v22(0, 0);
      return;
    }

    goto LABEL_17;
  }
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (!MEMORY[0x1AF449918](v4 + OBJC_IVAR___CPActivityAuthorizationManager_dataSource))
  {
    swift_bridgeObjectRelease();
LABEL_17:
    a2(0, 0);
    return;
  }
  swift_getObjectType();
  CPConversationManagerDataSource.activeConversation.getter();
  if (v13)
  {
    v31 = v13;
    if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v4
                                                                                           + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager))
                                                     + 0x150))(v10, v12) & 1) != 0&& objc_msgSend(*(id *)(v4 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_sharePlaySupported))
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for host != -1)
        swift_once();
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Log.host);
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_1ACCCC000, v15, v16, "Bypassing authorization since application is already authorized.", v17, 2u);
        MEMORY[0x1AF44981C](v17, -1, -1);
      }

      a2(1, 0);
    }
    else
    {
      ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(v10, v12, v31, a1, (uint64_t)a2, a3);
      swift_bridgeObjectRelease();
    }
    swift_unknownObjectRelease();

  }
  else
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    swift_bridgeObjectRetain();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v32 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, (unint64_t)v12, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v27, v28, "Not allowing activation from %s because there is no active conversation.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v30, -1, -1);
      MEMORY[0x1AF44981C](v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a2(0, 0);
    swift_unknownObjectRelease();
  }
}

uint64_t ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, void *, unint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  char *v27;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = v6;
  v32 = a5;
  v29 = a4;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)&v7[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  v30 = *(_QWORD *)&v7[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  v31 = __swift_project_boxed_opaque_existential_1(&v7[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v30);
  v17 = objc_msgSend(a3, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
  v33 = dispatch thunk of CustomStringConvertible.description.getter();
  v34 = v18;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v19._countAndFlagsBits = 46;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.append(_:)(v20);
  v21 = v33;
  v22 = v34;
  v23 = specialized static ActivityAuthorizationManager.notificationDisplayInformation(audioRoutePolicyManager:activity:conversation:)(*(void **)&v7[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager], v29, a3);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v7;
  v24[3] = a1;
  v25 = v32;
  v24[4] = a2;
  v24[5] = v25;
  v24[6] = a6;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, unint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v16 + 8);
  v27 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  v26(v21, v22, a1, a2, v23, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:), v24, v30, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  Swift::String v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;

  if (a1 == 2)
  {
    v9 = 0;
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_switchToSpeakerRouteIfNecessary);
    v8._countAndFlagsBits = a3;
    v8._object = a4;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v8);
    v9 = 1;
LABEL_5:
    a5(v9, 0);
    return;
  }
  lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
  v10 = (void *)swift_allocError();
  *v11 = 0;
  a5(0, v10);

}

Swift::Void __swiftcall ActivityAuthorizationManager.setAuthorization(_:for:)(Swift::Bool _, Swift::String a2)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  if (one-time initialization token for host != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v12 = v11;
    *(_DWORD *)v10 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v8, v9, "Setting authorization: %{BOOL}d for identifier: %s", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v11, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(Swift::Bool, uint64_t, void *))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v3
                                                                                             + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager))
                                                       + 0x178))(_, countAndFlagsBits, object);
}

void closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, uint64_t a2, Swift::String a3, char a4, void (*a5)(uint64_t, void *))
{
  void *v6;
  _BYTE *v7;
  void *object;
  Swift::Int countAndFlagsBits;
  uint64_t v12;
  Swift::Int v13;

  if (a1)
  {
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    v6 = (void *)swift_allocError();
    *v7 = 1;
    a5(0, v6);

  }
  else
  {
    object = a3._object;
    countAndFlagsBits = a3._countAndFlagsBits;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, a3);
    if ((a4 & 1) != 0)
    {
      v12 = *(_QWORD *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v13, countAndFlagsBits, (Swift::Int)object);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
    }
    a5(1, 0);
  }
}

void closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  void *v6;
  _BYTE *v7;
  Swift::String v10;

  if (a1)
  {
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    v6 = (void *)swift_allocError();
    *v7 = 0;
    a5(0, v6);

  }
  else
  {
    objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_switchToSpeakerRouteIfNecessary);
    v10._countAndFlagsBits = a3;
    v10._object = a4;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v10);
    a5(1, 0);
  }
}

id ActivityAuthorizationManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ActivityAuthorizationManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ActivityAuthorizationManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void ActivityAuthorizationManager.conversationManager(_:conversationChanged:)(uint64_t a1, void *a2)
{
  specialized ActivityAuthorizationManager.conversationManager(_:conversationChanged:)(a2);
}

id specialized Sequence.max(by:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v47 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v40 - v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    a1 = v51;
    v10 = v52;
    v12 = v53;
    v11 = v54;
    v13 = v55;
    if (v51 < 0)
    {
      v35 = v54;
      v44 = v52;
      v46 = v51;
      v36 = __CocoaSet.Iterator.next()();
      if (v36)
      {
        v41 = v2;
        v42 = v12;
        v50 = v36;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v37 = v56;
        swift_unknownObjectRelease();
        v48 = 0;
        v16 = v35;
        v14 = v13;
        a1 = v46;
        v49 = v37;
        if (v37)
          goto LABEL_6;
      }
      goto LABEL_59;
    }
    if (v55)
    {
LABEL_4:
      v41 = v2;
      v42 = v12;
      v44 = v10;
      v14 = (v13 - 1) & v13;
      v15 = __clz(__rbit64(v13)) | (v11 << 6);
      v16 = v11;
      goto LABEL_5;
    }
  }
  else
  {
    v29 = -1 << *(_BYTE *)(a1 + 32);
    v10 = a1 + 56;
    v12 = ~v29;
    v30 = -v29;
    if (v30 < 64)
      v31 = ~(-1 << v30);
    else
      v31 = -1;
    v13 = v31 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v11 = 0;
    if (v13)
      goto LABEL_4;
  }
  v32 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_61:
    __break(1u);
    goto LABEL_59;
  }
  v33 = (unint64_t)(v12 + 64) >> 6;
  if (v32 >= v33)
  {
LABEL_59:
    outlined consume of [String : ()].Iterator._Variant();
    return 0;
  }
  v34 = *(_QWORD *)(v10 + 8 * v32);
  v16 = v11 + 1;
  if (!v34)
  {
    v16 = v11 + 2;
    if (v11 + 2 < v33)
    {
      v34 = *(_QWORD *)(v10 + 8 * v16);
      if (v34)
        goto LABEL_41;
      v16 = v11 + 3;
      if (v11 + 3 < v33)
      {
        v34 = *(_QWORD *)(v10 + 8 * v16);
        if (v34)
          goto LABEL_41;
        v16 = v11 + 4;
        if (v11 + 4 < v33)
        {
          v34 = *(_QWORD *)(v10 + 8 * v16);
          if (v34)
            goto LABEL_41;
          v16 = v11 + 5;
          if (v11 + 5 < v33)
          {
            v34 = *(_QWORD *)(v10 + 8 * v16);
            if (!v34)
            {
              v39 = v11 + 6;
              while (v33 != v39)
              {
                v34 = *(_QWORD *)(v10 + 8 * v39++);
                if (v34)
                {
                  v16 = v39 - 1;
                  goto LABEL_41;
                }
              }
              goto LABEL_59;
            }
            goto LABEL_41;
          }
        }
      }
    }
    goto LABEL_59;
  }
LABEL_41:
  v41 = v2;
  v42 = v12;
  v44 = v10;
  v14 = (v34 - 1) & v34;
  v15 = __clz(__rbit64(v34)) + (v16 << 6);
LABEL_5:
  v17 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v15);
  v48 = 1;
  v49 = v17;
  if (!v17)
    goto LABEL_59;
LABEL_6:
  v46 = a1;
  v43 = (unint64_t)(v42 + 64) >> 6;
  v45 = MEMORY[0x1E0DEE9B0] + 8;
  if (v48)
    goto LABEL_10;
  while (1)
  {
    v18 = __CocoaSet.Iterator.next()();
    if (!v18)
      break;
    v50 = v18;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v19 = v56;
    swift_unknownObjectRelease();
    v20 = v16;
    v21 = v14;
    if (!v19)
      break;
    while (1)
    {
      v26 = objc_msgSend(v49, sel_timestamp);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v27 = objc_msgSend(v19, sel_timestamp);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v27) = static Date.< infix(_:_:)();
      v28 = *(void (**)(char *, uint64_t))(v47 + 8);
      v28(v7, v4);
      v28(v9, v4);
      if ((v27 & 1) != 0)
      {

        v49 = v19;
      }
      else
      {

      }
      v16 = v20;
      v14 = v21;
      if (!v48)
        break;
LABEL_10:
      if (v14)
      {
        v21 = (v14 - 1) & v14;
        v22 = __clz(__rbit64(v14)) | (v16 << 6);
        v20 = v16;
      }
      else
      {
        v23 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
          goto LABEL_61;
        }
        if (v23 >= v43)
          goto LABEL_46;
        v24 = *(_QWORD *)(v44 + 8 * v23);
        v20 = v16 + 1;
        if (!v24)
        {
          v20 = v16 + 2;
          if (v16 + 2 >= v43)
            goto LABEL_46;
          v24 = *(_QWORD *)(v44 + 8 * v20);
          if (!v24)
          {
            v20 = v16 + 3;
            if (v16 + 3 >= v43)
              goto LABEL_46;
            v24 = *(_QWORD *)(v44 + 8 * v20);
            if (!v24)
            {
              v20 = v16 + 4;
              if (v16 + 4 >= v43)
                goto LABEL_46;
              v24 = *(_QWORD *)(v44 + 8 * v20);
              if (!v24)
              {
                v20 = v16 + 5;
                if (v16 + 5 >= v43)
                  goto LABEL_46;
                v24 = *(_QWORD *)(v44 + 8 * v20);
                if (!v24)
                {
                  v25 = v16 + 6;
                  while (v43 != v25)
                  {
                    v24 = *(_QWORD *)(v44 + 8 * v25++);
                    if (v24)
                    {
                      v20 = v25 - 1;
                      goto LABEL_27;
                    }
                  }
                  goto LABEL_46;
                }
              }
            }
          }
        }
LABEL_27:
        v21 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v20 << 6);
      }
      v19 = *(id *)(*(_QWORD *)(v46 + 48) + 8 * v22);
      if (!v19)
        goto LABEL_46;
    }
  }
LABEL_46:
  outlined consume of [String : ()].Iterator._Variant();
  return v49;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  _OWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  _OWORD v46[2];
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v50 = a1;
  v51 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v52 = v8;
  v53 = 0;
  v54 = v11 & v9;
  v55 = a2;
  v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v48);
  v12 = *((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_27;
  v13 = v48;
  outlined init with take of Any(v49, v47);
  v14 = *(_QWORD **)a5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v20 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v24 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v25 = (uint64_t *)(v24[6] + 16 * v16);
    *v25 = v13;
    v25[1] = v12;
    outlined init with take of Any(v47, (_OWORD *)(v24[7] + 32 * v16));
    v26 = v24[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v48);
    for (i = *((_QWORD *)&v48 + 1); *((_QWORD *)&v48 + 1); i = *((_QWORD *)&v48 + 1))
    {
      v31 = v48;
      outlined init with take of Any(v49, v47);
      v32 = *(_QWORD **)a5;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_28;
      v38 = v33;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_30;
        v34 = v39;
      }
      if ((v38 & 1) != 0)
      {
        outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
        swift_bridgeObjectRelease();
        v30 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
        outlined init with take of Any(v46, v30);
      }
      else
      {
        v41 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v42 = (uint64_t *)(v41[6] + 16 * v34);
        *v42 = v31;
        v42[1] = i;
        outlined init with take of Any(v47, (_OWORD *)(v41[7] + 32 * v34));
        v43 = v41[2];
        v27 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v27)
          goto LABEL_29;
        v41[2] = v44;
      }
      specialized LazyMapSequence.Iterator.next()(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : ()].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    swift_bridgeObjectRelease();
    v23 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    outlined init with take of Any(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _DWORD *v22;
  id v23;
  id v24;
  id v25;
  objc_class *ObjectType;
  objc_super v28;
  uint64_t v29[5];

  ObjectType = (objc_class *)swift_getObjectType();
  v29[3] = a9;
  v29[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 32))(boxed_opaque_existential_1, a2, a9);
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a7[OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit] = 0;
  v19 = OBJC_IVAR___CPActivityAuthorizationManager_lock;
  type metadata accessor for Lock();
  v20 = swift_allocObject();
  v21 = a7;
  v22 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v20 + 16) = v22;
  *v22 = 0;
  *(_QWORD *)&a7[v19] = v20;
  *(_QWORD *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_preparedAuthorizedBundleIdentifiers] = MEMORY[0x1E0DEE9E8];
  v21[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;
  swift_unknownObjectWeakAssign();
  outlined init with copy of UserNotificationCenter((uint64_t)v29, (uint64_t)&v21[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter]);
  *(_QWORD *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_queue] = a3;
  *(_QWORD *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager] = a4;
  *(_QWORD *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager] = a5;
  *(_QWORD *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_featureFlags] = a6;
  v23 = a3;
  v24 = a4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  v28.receiver = v21;
  v28.super_class = ObjectType;
  v25 = objc_msgSendSuper2(&v28, sel_init);
  objc_msgSend(a1, sel_addObserver_queue_, v25, v23);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  return v25;
}

id specialized ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Class v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a6;
  v24 = a8;
  v22 = a5;
  v15 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (char *)objc_allocWithZone(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a9);
  return specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v17, a3, a4, v22, v23, v19, v24, a9, a10, a11);
}

id specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, char *a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  objc_class *ObjectType;
  objc_super v25;
  _QWORD v26[5];

  ObjectType = (objc_class *)swift_getObjectType();
  v26[3] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IMUserNotificationCenter);
  v26[4] = &protocol witness table for IMUserNotificationCenter;
  v26[0] = a2;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a7[OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit] = 0;
  v14 = OBJC_IVAR___CPActivityAuthorizationManager_lock;
  type metadata accessor for Lock();
  v15 = swift_allocObject();
  v16 = a7;
  v17 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v15 + 16) = v17;
  *v17 = 0;
  *(_QWORD *)&a7[v14] = v15;
  *(_QWORD *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_preparedAuthorizedBundleIdentifiers] = MEMORY[0x1E0DEE9E8];
  v16[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;
  swift_unknownObjectWeakAssign();
  outlined init with copy of UserNotificationCenter((uint64_t)v26, (uint64_t)&v16[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter]);
  *(_QWORD *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_queue] = a3;
  *(_QWORD *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager] = a4;
  *(_QWORD *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager] = a5;
  *(_QWORD *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_featureFlags] = a6;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;

  v25.receiver = v16;
  v25.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v25, sel_init);
  objc_msgSend(a1, sel_addObserver_queue_, v22, v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  return v22;
}

uint64_t sub_1ACE0E188()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1, uint64_t a2)
{
  uint64_t v2;

  return closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(_QWORD, uint64_t))(v2 + 24));
}

unint64_t specialized ActivityAuthorizationManager.unsupportedAudioRouteDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:routeName:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjCClassFromMetadata;
  void *v10;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  Swift::String_optional v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  Swift::String v46;
  Swift::String_optional v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  id v51;
  Swift::String v52;
  Swift::String_optional v53;
  Swift::String v54;
  Swift::String v55;
  unint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  Swift::String v62;
  Swift::String_optional v63;
  Swift::String v64;
  Swift::String v65;
  unint64_t v66;
  char v67;
  void *v69;
  uint64_t v71;
  unint64_t v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;

  type metadata accessor for ConversationManagerHost();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = (void *)objc_opt_self();
  v71 = ObjCClassFromMetadata;
  v11 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
  v12._countAndFlagsBits = 0xD000000000000025;
  v73._object = (void *)0xE000000000000000;
  v12._object = (void *)0x80000001ACF815F0;
  v13.value._countAndFlagsBits = 0x6E65736572706F43;
  v13.value._object = (void *)0xEE0065726F436563;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v73._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v73);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1ACF59E20;
  *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
  v16 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v15 + 64) = v16;
  *(_QWORD *)(v15 + 32) = a4;
  *(_QWORD *)(v15 + 40) = a5;
  swift_bridgeObjectRetain();
  v17 = String.init(format:_:)();
  v19 = v18;
  swift_bridgeObjectRelease();
  objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();
  v20 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  if (v20)
  {
    v69 = v20;
    v28 = objc_msgSend(v20, sel_localizedName);
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

    v32 = objc_msgSend(v10, sel_bundleForClass_, v71);
    v33._countAndFlagsBits = 0xD000000000000029;
    v75._object = (void *)0xE000000000000000;
    v33._object = (void *)0x80000001ACF81650;
    v34.value._countAndFlagsBits = 0x6E65736572706F43;
    v34.value._object = (void *)0xEE0065726F436563;
    v35._countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    v75._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, (NSBundle)v32, v35, v75);

    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v36 + 64) = v16;
    *(_QWORD *)(v36 + 32) = v29;
    *(_QWORD *)(v36 + 40) = v31;
    v25 = String.init(format:_:)();
    v27 = v37;
  }
  else
  {
    v21 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
    v22._countAndFlagsBits = 0xD000000000000026;
    v74._object = (void *)0xE000000000000000;
    v22._object = (void *)0x80000001ACF81620;
    v23.value._countAndFlagsBits = 0x6E65736572706F43;
    v23.value._object = (void *)0xEE0065726F436563;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v74._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v74);

    v25 = String.init(format:_:)();
    v27 = v26;
    v69 = 0;
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v39;
  v40 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v17;
  *(_QWORD *)(inited + 56) = v19;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v41;
  *(_QWORD *)(inited + 120) = v40;
  *(_QWORD *)(inited + 96) = v25;
  *(_QWORD *)(inited + 104) = v27;
  v42 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v43 = swift_initStackObject();
  *(_OWORD *)(v43 + 16) = xmmword_1ACF5B430;
  *(_QWORD *)(v43 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v43 + 40) = v44;
  v45 = objc_msgSend(v10, sel_bundleForClass_, v71);
  v76._object = (void *)0xE000000000000000;
  v46._countAndFlagsBits = 0x4C45434E4143;
  v46._object = (void *)0xE600000000000000;
  v47.value._countAndFlagsBits = 0x6E65736572706F43;
  v47.value._object = (void *)0xEE0065726F436563;
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  v76._countAndFlagsBits = 0;
  v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v45, v48, v76);

  *(_QWORD *)(v43 + 72) = v40;
  *(Swift::String *)(v43 + 48) = v49;
  *(_QWORD *)(v43 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v43 + 88) = v50;
  v51 = objc_msgSend(v10, sel_bundleForClass_, v71);
  v77._object = (void *)0xE000000000000000;
  v52._object = (void *)0x80000001ACF81540;
  v52._countAndFlagsBits = 0xD000000000000011;
  v53.value._countAndFlagsBits = 0x6E65736572706F43;
  v53.value._object = (void *)0xEE0065726F436563;
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  v77._countAndFlagsBits = 0;
  v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v52, v53, (NSBundle)v51, v54, v77);

  *(Swift::String *)(v43 + 96) = v55;
  *(_QWORD *)(v43 + 120) = v40;
  *(_QWORD *)(v43 + 128) = 0xD000000000000022;
  *(_QWORD *)(v43 + 168) = MEMORY[0x1E0DEBB98];
  *(_QWORD *)(v43 + 136) = 0x80000001ACF7CE20;
  *(_QWORD *)(v43 + 144) = 1;
  v56 = specialized Dictionary.init(dictionaryLiteral:)(v43);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72 = v42;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v56, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v72);
  v58 = v72;
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    v59 = swift_initStackObject();
    *(_OWORD *)(v59 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v59 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v59 + 40) = v60;
    v61 = objc_msgSend(v10, sel_bundleForClass_, v71);
    v78._object = (void *)0xE000000000000000;
    v62._countAndFlagsBits = 0x4F465F5452415453;
    v62._object = (void *)0xEC000000454D5F52;
    v63.value._countAndFlagsBits = 0x6E65736572706F43;
    v63.value._object = (void *)0xEE0065726F436563;
    v64._countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    v78._countAndFlagsBits = 0;
    v65 = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v61, v64, v78);

    *(_QWORD *)(v59 + 72) = MEMORY[0x1E0DEA968];
    *(Swift::String *)(v59 + 48) = v65;
    v66 = specialized Dictionary.init(dictionaryLiteral:)(v59);
    v67 = swift_isUniquelyReferenced_nonNull_native();
    v72 = v58;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v66, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v67, (uint64_t)&v72);
    v58 = v72;

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  return v58;
}

unint64_t specialized ActivityAuthorizationManager.authorizationRequestDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:overrides:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Swift::String v38;
  Swift::String_optional v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  Swift::String v49;
  Swift::String_optional v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Swift::String v56;
  Swift::String_optional v57;
  Swift::String v58;
  uint64_t v59;
  id v60;
  Swift::String v61;
  Swift::String_optional v62;
  Swift::String v63;
  uint64_t v64;
  void *v65;
  id v66;
  Swift::String v67;
  Swift::String_optional v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t countAndFlagsBits;
  void *object;
  void *v73;
  id v74;
  Swift::String v75;
  Swift::String_optional v76;
  Swift::String v77;
  Swift::String v78;
  void *v79;
  uint64_t *v80;
  void *v81;
  uint64_t inited;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  Swift::String v90;
  Swift::String_optional v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  unint64_t v95;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v107;
  unint64_t v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;

  objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();
  v9 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  v107 = v9;
  if (a5)
  {
    v10 = *(_QWORD *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_title);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  if (v9)
  {
    v12 = objc_msgSend(v9, sel_localizedName);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v17 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v18._countAndFlagsBits = 0xD00000000000001DLL;
    v109._object = (void *)0xE000000000000000;
    v18._object = (void *)0x80000001ACF81710;
    v19.value._countAndFlagsBits = 0x6E65736572706F43;
    v19.value._object = (void *)0xEE0065726F436563;
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v109._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v109);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v21 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v21 + 32) = v13;
    *(_QWORD *)(v21 + 40) = v15;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    v22 = swift_getObjCClassFromMetadata();
    v23 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v22);
    v24._countAndFlagsBits = 0xD00000000000001FLL;
    v110._object = (void *)0xE000000000000000;
    v24._object = (void *)0x80000001ACF81680;
    v25.value._countAndFlagsBits = 0x6E65736572706F43;
    v25.value._object = (void *)0xEE0065726F436563;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v110._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v110);

  }
  v11 = String.init(format:_:)();
  v10 = v27;
  swift_bridgeObjectRelease();
  if (a5)
  {
LABEL_8:
    v28 = *(_QWORD *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8);
    if (v28)
    {
      v104 = v11;
      v105 = v10;
      v29 = *(_QWORD *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_message);
      swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    v104 = v11;
    v105 = v10;
    if (a3)
      goto LABEL_11;
    goto LABEL_14;
  }
  v104 = v11;
  v105 = v10;
  if (a3)
  {
LABEL_11:
    v30 = a3;
    v31 = objc_msgSend(v30, sel_name);
    if (v31)
    {
      v32 = v31;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v35 = v34;

      type metadata accessor for ConversationManagerHost();
      v36 = swift_getObjCClassFromMetadata();
      v37 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v36);
      v38._countAndFlagsBits = 0xD00000000000001BLL;
      v111._object = (void *)0xE000000000000000;
      v38._object = (void *)0x80000001ACF816F0;
      v39.value._countAndFlagsBits = 0x6E65736572706F43;
      v39.value._object = (void *)0xEE0065726F436563;
      v40._countAndFlagsBits = 0;
      v40._object = (void *)0xE000000000000000;
      v111._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v38, v39, (NSBundle)v37, v40, v111);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_1ACF59E20;
      *(_QWORD *)(v41 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v41 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v41 + 32) = v33;
      *(_QWORD *)(v41 + 40) = v35;
    }
    else
    {
      type metadata accessor for ConversationManagerHost();
      v54 = swift_getObjCClassFromMetadata();
      v55 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v54);
      v56._countAndFlagsBits = 0xD000000000000025;
      v113._object = (void *)0xE000000000000000;
      v56._object = (void *)0x80000001ACF816C0;
      v57.value._countAndFlagsBits = 0x6E65736572706F43;
      v57.value._object = (void *)0xEE0065726F436563;
      v58._countAndFlagsBits = 0;
      v58._object = (void *)0xE000000000000000;
      v113._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v56, v57, (NSBundle)v55, v58, v113);

    }
    v29 = String.init(format:_:)();
    v28 = v42;
    swift_bridgeObjectRelease();

    goto LABEL_20;
  }
LABEL_14:
  if (v9)
  {
    v43 = objc_msgSend(v9, sel_localizedName);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v45;

    type metadata accessor for ConversationManagerHost();
    v47 = swift_getObjCClassFromMetadata();
    v48 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v47);
    v49._countAndFlagsBits = 0xD000000000000015;
    v112._object = (void *)0xE000000000000000;
    v49._object = (void *)0x80000001ACF81580;
    v50.value._countAndFlagsBits = 0x6E65736572706F43;
    v50.value._object = (void *)0xEE0065726F436563;
    v51._countAndFlagsBits = 0;
    v51._object = (void *)0xE000000000000000;
    v112._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, (NSBundle)v48, v51, v112);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v52 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v52 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v52 + 32) = v44;
    *(_QWORD *)(v52 + 40) = v46;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    v59 = swift_getObjCClassFromMetadata();
    v60 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v59);
    v114._object = (void *)0xE000000000000000;
    v61._object = (void *)0x80000001ACF81560;
    v61._countAndFlagsBits = 0xD000000000000012;
    v62.value._countAndFlagsBits = 0x6E65736572706F43;
    v62.value._object = (void *)0xEE0065726F436563;
    v63._countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    v114._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v61, v62, (NSBundle)v60, v63, v114);

  }
  v29 = String.init(format:_:)();
  v28 = v53;
  swift_bridgeObjectRelease();
LABEL_20:
  type metadata accessor for ConversationManagerHost();
  v64 = swift_getObjCClassFromMetadata();
  v65 = (void *)objc_opt_self();
  v66 = objc_msgSend(v65, sel_bundleForClass_, v64);
  v115._object = (void *)0xE000000000000000;
  v67._object = (void *)0x80000001ACF816A0;
  v67._countAndFlagsBits = 0xD000000000000012;
  v68.value._countAndFlagsBits = 0x6E65736572706F43;
  v68.value._object = (void *)0xEE0065726F436563;
  v69._countAndFlagsBits = 0;
  v69._object = (void *)0xE000000000000000;
  v115._countAndFlagsBits = 0;
  v70 = NSLocalizedString(_:tableName:bundle:value:comment:)(v67, v68, (NSBundle)v66, v69, v115);
  countAndFlagsBits = v70._countAndFlagsBits;
  object = v70._object;

  if (a5)
  {
    v73 = *(void **)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8);
    if (v73)
    {
      countAndFlagsBits = *(_QWORD *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      object = v73;
    }
  }
  v74 = objc_msgSend(v65, sel_bundleForClass_, v64);
  v116._object = (void *)0xE000000000000000;
  v75._countAndFlagsBits = 0x4F465F5452415453;
  v75._object = (void *)0xEC000000454D5F52;
  v76.value._countAndFlagsBits = 0x6E65736572706F43;
  v76.value._object = (void *)0xEE0065726F436563;
  v77._countAndFlagsBits = 0;
  v77._object = (void *)0xE000000000000000;
  v116._countAndFlagsBits = 0;
  v78 = NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v116);
  v103 = v78._countAndFlagsBits;
  v79 = v78._object;

  if (a5)
  {
    v80 = (uint64_t *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe);
    v81 = *(void **)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8);
    if (v81)
    {
      v103 = *v80;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v79 = v81;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v83;
  v84 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v104;
  *(_QWORD *)(inited + 56) = v105;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v85;
  *(_QWORD *)(inited + 120) = v84;
  *(_QWORD *)(inited + 96) = v29;
  *(_QWORD *)(inited + 104) = v28;
  v86 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v87 = swift_initStackObject();
  *(_OWORD *)(v87 + 16) = xmmword_1ACF5B430;
  *(_QWORD *)(v87 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v87 + 40) = v88;
  v89 = objc_msgSend(v65, sel_bundleForClass_, v64);
  v117._object = (void *)0xE000000000000000;
  v90._countAndFlagsBits = 0x4C45434E4143;
  v90._object = (void *)0xE600000000000000;
  v91.value._countAndFlagsBits = 0x6E65736572706F43;
  v91.value._object = (void *)0xEE0065726F436563;
  v92._countAndFlagsBits = 0;
  v92._object = (void *)0xE000000000000000;
  v117._countAndFlagsBits = 0;
  v93 = NSLocalizedString(_:tableName:bundle:value:comment:)(v90, v91, (NSBundle)v89, v92, v117);

  *(_QWORD *)(v87 + 72) = v84;
  *(Swift::String *)(v87 + 48) = v93;
  *(_QWORD *)(v87 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v87 + 88) = v94;
  *(_QWORD *)(v87 + 96) = countAndFlagsBits;
  *(_QWORD *)(v87 + 104) = object;
  *(_QWORD *)(v87 + 120) = v84;
  *(_QWORD *)(v87 + 128) = 0xD000000000000022;
  *(_QWORD *)(v87 + 168) = MEMORY[0x1E0DEBB98];
  *(_QWORD *)(v87 + 136) = 0x80000001ACF7CE20;
  *(_QWORD *)(v87 + 144) = 1;
  v95 = specialized Dictionary.init(dictionaryLiteral:)(v87);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v108 = v86;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v95, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v108);
  v97 = v108;
  swift_bridgeObjectRelease();
  if ((a4 & 1) != 0)
  {
    v98 = swift_initStackObject();
    *(_OWORD *)(v98 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v98 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v98 + 40) = v99;
    *(_QWORD *)(v98 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v98 + 48) = v103;
    *(_QWORD *)(v98 + 56) = v79;
    v100 = specialized Dictionary.init(dictionaryLiteral:)(v98);
    v101 = swift_isUniquelyReferenced_nonNull_native();
    v108 = v97;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v100, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v101, (uint64_t)&v108);
    v97 = v108;
  }
  swift_bridgeObjectRelease();

  return v97;
}

void specialized closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;

  v7 = a3 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x1AF449918](v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = *(_QWORD *)(v8 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
    swift_retain();

    os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 16));
    swift_beginAccess();
    v11 = (_BYTE *)MEMORY[0x1AF449918](v7);
    if (v11)
    {
      v11[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;

    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 16));
    swift_release();
  }
  if (a2)
    a2 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, _QWORD, void *))(a4 + 16))(a4, a1 & 1, a2);

}

void specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, char *a6, uint64_t a7, const void *a8)
{
  char *v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  char v23;
  uint8_t *v24;
  uint8_t *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint8_t *v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  char *v40;
  uint8_t *v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  BOOL v48;
  uint8_t *v49;
  uint8_t *v50;
  unint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ObjCClassFromMetadata;
  void *v60;
  id v61;
  Swift::String v62;
  Swift::String_optional v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  Swift::String v75;
  Swift::String_optional v76;
  Swift::String v77;
  uint64_t v78;
  void *v79;
  void *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  Swift::String v86;
  Swift::String_optional v87;
  Swift::String v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  Swift::String v98;
  Swift::String_optional v99;
  Swift::String v100;
  Swift::String v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  Swift::String v108;
  Swift::String_optional v109;
  Swift::String v110;
  Swift::String v111;
  char v112;
  void *v113;
  uint64_t v114;
  id v115;
  char *v116;
  uint64_t v117;
  void *v118;
  void (*v119)(char *, uint64_t);
  Swift::String v120;
  id v121;
  Swift::String v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  _QWORD *v127;
  void (*v128)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  char *v139;
  int v140;
  id v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD v146[2];
  Swift::String v147;
  uint64_t v148;
  Swift::String v149;
  Swift::String v150;
  Swift::String v151;
  Swift::String v152;
  Swift::String v153;

  LODWORD(v12) = a4;
  v143 = a3;
  v144 = a1;
  v14 = type metadata accessor for UUID();
  v142 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a8;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a7;
  v18[3] = thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()partial apply;
  v18[4] = v17;
  if (a5 && (*(_BYTE *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement) & 1) == 0)
  {
    _Block_copy(a8);
    _Block_copy(a8);
    _Block_copy(a8);
    v37 = one-time initialization token for default;
    swift_retain();
    swift_retain();
    if (v37 != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.default);
    v21 = Logger.logObject.getter();
    v39 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v39))
      goto LABEL_18;
    v23 = (char)v12;
    v40 = a6;
    v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v41 = 0;
    _os_log_impl(&dword_1ACCCC000, v21, v39, "Skipping prompt in confirmActivityAuthorizationIfNecessary, confirmReplacement override is set", v41, 2u);
    v25 = v41;
    a6 = v40;
    goto LABEL_17;
  }
  v19 = (void *)objc_opt_self();
  _Block_copy(a8);
  _Block_copy(a8);
  _Block_copy(a8);
  swift_retain();
  swift_retain();
  if (objc_msgSend(v19, sel_supportsMultipleActivitySessions))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.default);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v22))
      goto LABEL_18;
    v23 = (char)v12;
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1ACCCC000, v21, v22, "Skipping prompt in confirmActivityAuthorizationIfNecessary, multiple activities supported", v24, 2u);
    v25 = v24;
LABEL_17:
    LOBYTE(v12) = v23;
    MEMORY[0x1AF44981C](v25, -1, -1);
LABEL_18:

    v42 = v144;
LABEL_19:
    v43._countAndFlagsBits = v42;
    v43._object = a2;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v43);
    if ((v12 & 1) != 0)
    {
      v44 = *(_QWORD *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_lock];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v44 + 16));
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((Swift::Int *)v146, v42, (Swift::Int)a2);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v44 + 16));
    }
    _Block_copy(a8);
    specialized closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(1, 0, a7, (uint64_t)a8);
    _Block_release(a8);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_33;
  }
  v139 = v16;
  v140 = (int)v12;
  v26 = objc_msgSend(v143, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v28 = specialized Sequence.max(by:)(v27);
  swift_bridgeObjectRelease();
  if (!v28)
  {
    LOBYTE(v12) = v140;
    if (one-time initialization token for default != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Log.default);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.default.getter();
    v48 = os_log_type_enabled(v46, v47);
    v42 = v144;
    if (v48)
    {
      v12 = a6;
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_1ACCCC000, v46, v47, "Skipping prompt in confirmActivityAuthorizationIfNecessary, no representative activity session", v49, 2u);
      v50 = v49;
      a6 = v12;
      LOBYTE(v12) = v140;
      MEMORY[0x1AF44981C](v50, -1, -1);
    }

    goto LABEL_19;
  }
  v135 = a2;
  if (one-time initialization token for default != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  v30 = v28;
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.default.getter();
  v33 = os_log_type_enabled(v31, v32);
  v141 = v30;
  v137 = v18;
  v138 = a7;
  v136 = v17;
  v134 = a6;
  v133 = v14;
  if (v33)
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v34 = 138412290;
    v147._countAndFlagsBits = (uint64_t)v141;
    v36 = v141;
    v30 = v141;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v35 = v28;

    _os_log_impl(&dword_1ACCCC000, v31, v32, "Prompting user to replace activity: %@", v34, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v35, -1, -1);
    MEMORY[0x1AF44981C](v34, -1, -1);

  }
  else
  {

  }
  v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v52 = objc_msgSend(v30, sel_activity);
  v53 = objc_msgSend(v52, sel_metadata);

  v54 = MEMORY[0x1E0DEA968];
  if (v53 && (v55 = objc_msgSend(v53, sel_title), v53, v55))
  {
    v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v130 = v56;

    v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v57;
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v60 = (void *)objc_opt_self();
    v61 = objc_msgSend(v60, sel_bundleForClass_, ObjCClassFromMetadata);
    v62._countAndFlagsBits = 0xD000000000000015;
    v149._object = (void *)0xE000000000000000;
    v62._object = (void *)0x80000001ACF814A0;
    v63.value._countAndFlagsBits = 0x6E65736572706F43;
    v63.value._object = (void *)0xEE0065726F436563;
    v64._countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    v149._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v61, v64, v149);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v65 + 56) = v54;
    *(_QWORD *)(v65 + 64) = lazy protocol witness table accessor for type String and conformance String();
    v66 = v130;
    *(_QWORD *)(v65 + 32) = v131;
    *(_QWORD *)(v65 + 40) = v66;
    v67 = String.init(format:_:)();
    v69 = v68;
    swift_bridgeObjectRelease();
    v148 = v54;
    v147._countAndFlagsBits = v67;
    v147._object = v69;
    outlined init with take of Any(&v147, v146);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v145 = v51;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v146, v132, v58, isUniquelyReferenced_nonNull_native);
    v71 = v145;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v73 = v72;
    v74 = objc_msgSend(v60, sel_bundleForClass_, ObjCClassFromMetadata);
    v75._countAndFlagsBits = 0xD000000000000017;
    v150._object = (void *)0xE000000000000000;
    v75._object = (void *)0x80000001ACF814C0;
    v76.value._countAndFlagsBits = 0x6E65736572706F43;
    v76.value._object = (void *)0xEE0065726F436563;
    v77._countAndFlagsBits = 0;
    v77._object = (void *)0xE000000000000000;
    v150._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v150);

    v78 = String.init(format:_:)();
    v80 = v79;
    swift_bridgeObjectRelease();
    v148 = v54;
    v147._countAndFlagsBits = v78;
    v147._object = v80;
    outlined init with take of Any(&v147, v146);
    v81 = swift_isUniquelyReferenced_nonNull_native();
    v145 = v71;
    v82 = v132;
  }
  else
  {
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v73 = v84;
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v85 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v86._countAndFlagsBits = 0xD000000000000016;
    v151._object = (void *)0xE000000000000000;
    v86._object = (void *)0x80000001ACF81460;
    v87.value._countAndFlagsBits = 0x6E65736572706F43;
    v87.value._object = (void *)0xEE0065726F436563;
    v88._countAndFlagsBits = 0;
    v88._object = (void *)0xE000000000000000;
    v151._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v86, v87, (NSBundle)v85, v88, v151);

    v89 = String.init(format:_:)();
    v91 = v90;
    swift_bridgeObjectRelease();
    v148 = v54;
    v147._countAndFlagsBits = v89;
    v147._object = v91;
    outlined init with take of Any(&v147, v146);
    v81 = swift_isUniquelyReferenced_nonNull_native();
    v145 = v51;
    v82 = v83;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v146, v82, v73, v81);
  v92 = v145;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v95 = v94;
  type metadata accessor for ConversationManagerHost();
  v96 = (void *)objc_opt_self();
  v97 = objc_msgSend(v96, sel_bundleForClass_, ObjCClassFromMetadata);
  v152._object = (void *)0xE000000000000000;
  v98._object = (void *)0x80000001ACF81480;
  v98._countAndFlagsBits = 0xD000000000000010;
  v99.value._countAndFlagsBits = 0x6E65736572706F43;
  v99.value._object = (void *)0xEE0065726F436563;
  v100._countAndFlagsBits = 0;
  v100._object = (void *)0xE000000000000000;
  v152._countAndFlagsBits = 0;
  v101 = NSLocalizedString(_:tableName:bundle:value:comment:)(v98, v99, (NSBundle)v97, v100, v152);

  v148 = v54;
  v147 = v101;
  outlined init with take of Any(&v147, v146);
  v102 = swift_isUniquelyReferenced_nonNull_native();
  v145 = v92;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v146, v93, v95, v102);
  v103 = v145;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v106 = v105;
  v107 = objc_msgSend(v96, sel_bundleForClass_, ObjCClassFromMetadata);
  v153._object = (void *)0xE000000000000000;
  v108._countAndFlagsBits = 0x4C45434E4143;
  v108._object = (void *)0xE600000000000000;
  v109.value._countAndFlagsBits = 0x6E65736572706F43;
  v109.value._object = (void *)0xEE0065726F436563;
  v110._countAndFlagsBits = 0;
  v110._object = (void *)0xE000000000000000;
  v153._countAndFlagsBits = 0;
  v111 = NSLocalizedString(_:tableName:bundle:value:comment:)(v108, v109, (NSBundle)v107, v110, v153);

  v148 = v54;
  v147 = v111;
  outlined init with take of Any(&v147, v146);
  v112 = swift_isUniquelyReferenced_nonNull_native();
  v145 = v103;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v146, v104, v106, v112);
  v132 = v145;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v113 = v134;
  v114 = *(_QWORD *)&v134[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  v130 = *(_QWORD *)&v134[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  v131 = (uint64_t)__swift_project_boxed_opaque_existential_1(&v134[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v130);
  v115 = objc_msgSend(v143, sel_groupUUID);
  v116 = v139;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
  v117 = v133;
  v147._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v147._object = v118;
  v119 = *(void (**)(char *, uint64_t))(v142 + 8);
  v119(v116, v117);
  v120._countAndFlagsBits = 46;
  v120._object = (void *)0xE100000000000000;
  String.append(_:)(v120);
  v121 = objc_msgSend(v141, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v122._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  v119(v116, v117);
  v123 = v147;
  v124 = swift_allocObject();
  v125 = v144;
  *(_QWORD *)(v124 + 16) = v113;
  *(_QWORD *)(v124 + 24) = v125;
  v126 = v135;
  *(_QWORD *)(v124 + 32) = v135;
  *(_BYTE *)(v124 + 40) = v140 & 1;
  v127 = v137;
  *(_QWORD *)(v124 + 48) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
  *(_QWORD *)(v124 + 56) = v127;
  v128 = *(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v114 + 8);
  swift_bridgeObjectRetain();
  v129 = v113;
  swift_retain();
  v128(v123._countAndFlagsBits, v123._object, v125, v126, v132, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:), v124, v130, v114);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

LABEL_33:
  _Block_release(a8);
  _Block_release(a8);
}

void specialized ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, _BYTE *a6, void (**a7)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  void *v67;
  char v68;
  void *v69;
  _BYTE *v70;
  void *v71;
  uint64_t v72;
  id v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  NSObject *log;
  uint64_t v80;
  os_log_type_t type;
  unsigned __int8 v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  char v91;
  uint64_t v92[3];
  uint64_t v93;

  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF5B430;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v15;
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 56) = v16;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 72) = v17;
  v18 = MEMORY[0x1AF449918](&a6[OBJC_IVAR___CPActivityAuthorizationManager_dataSource]);
  if (!v18)
  {
    swift_setDeallocating();
    _Block_copy(a7);
    _Block_copy(a7);
    swift_arrayDestroy();
    a7[2](a7, 0, 0);
    swift_release();
    goto LABEL_21;
  }
  v19 = (void *)v18;
  v89 = a4;
  swift_getObjectType();
  _Block_copy(a7);
  _Block_copy(a7);
  if ((objc_msgSend(v19, sel_allActiveConversationParticipantsSupportSharePlay) & 1) == 0)
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    if (one-time initialization token for host != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.host);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1ACCCC000, v29, v30, "At least one of the active participants is on an older SharePlay protocol version. Not allowing SharePlay", v31, 2u);
      MEMORY[0x1AF44981C](v31, -1, -1);
    }

    a7[2](a7, 0, 0);
    objc_msgSend(v19, sel_displaySharePlayUnableToStartAlert);
    goto LABEL_20;
  }
  v88 = v13;
  v20 = specialized Sequence<>.contains(_:)(a1, (uint64_t)a2, (_QWORD *)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if ((v20 & 1) != 0)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v93 = v25;
      *(_DWORD *)v24 = 136315138;
      v92[1] = (uint64_t)a2;
      swift_bridgeObjectRetain();
      v26 = String.init<A>(reflecting:)();
      v92[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v22, v23, "Bypassing user authorization for activity started from %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v25, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a7[2](a7, 1, 0);
LABEL_20:
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  CPConversationManagerDataSource.activeConversation.getter();
  if (!v32)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      v42 = a1;
      v43 = swift_slowAlloc();
      v92[0] = v43;
      *(_DWORD *)v41 = 136315138;
      swift_bridgeObjectRetain();
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, (unint64_t)a2, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v39, v40, "Not allowing activation from %s because there is no active conversation.", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v43, -1, -1);
      MEMORY[0x1AF44981C](v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a7[2](a7, 0, 0);
    goto LABEL_20;
  }
  v87 = v32;
  v33 = a1;
  v34 = *(_QWORD *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v34 + 16));
  swift_beginAccess();
  v35 = v33;
  specialized Set._Variant.remove(_:)(v33, (uint64_t)a2);
  v37 = v36;
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v34 + 16));
  if (v37 && (a3 & 1) == 0)
  {
    a7[2](a7, 1, 0);
LABEL_46:
    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_21;
  }
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v34 + 16));
  v44 = a6[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest];
  a6[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 1;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v34 + 16));
  if (v44 == 1)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v92[0] = v49;
      *(_DWORD *)v48 = 136315138;
      swift_bridgeObjectRetain();
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)a2, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v46, v47, "Not allowing activation from %s because an authorization prompt is already being displayed", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v49, -1, -1);
      MEMORY[0x1AF44981C](v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    v69 = (void *)swift_allocError();
    *v70 = 3;
    v71 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(_QWORD, _QWORD, void *))a7)[2](a7, 0, v71);

    goto LABEL_46;
  }
  v50 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v51 = (_QWORD *)swift_allocObject();
  v51[2] = v50;
  v51[3] = thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()partial apply;
  v86 = v51;
  v51[4] = v88;
  swift_retain_n();
  v85 = v50;
  swift_retain();
  v52 = v33;
  v53 = TUConversation.hasLocalActivitySession(forBundleIdentifier:)(v33, (uint64_t)a2);
  if (v89
    && *((_BYTE *)v89 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition)
    && (*((_BYTE *)v89 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) == 1 || (v53 & 1) == 0))
  {
    v82 = v53;
    if (one-time initialization token for host != -1)
      swift_once();
    v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    v73 = v89;
    v74 = Logger.logObject.getter();
    type = static os_log_type_t.default.getter();
    v84 = v73;
    if (os_log_type_enabled(v74, type))
    {
      log = v74;
      v75 = swift_slowAlloc();
      v80 = swift_slowAlloc();
      v92[0] = v80;
      *(_DWORD *)v75 = 136315650;
      LOBYTE(v93) = *((_BYTE *)v73 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition);
      v76 = String.init<A>(reflecting:)();
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2080;
      swift_bridgeObjectRetain();
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)a2, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v75 + 22) = 1024;
      LODWORD(v93) = v82 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, log, type, "Prompting to start activity due to override %s; bundleID %s has existing session? %{BOOL}d",
        (uint8_t *)v75,
        0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v80, -1, -1);
      MEMORY[0x1AF44981C](v75, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v83 = v35;
    v60 = swift_allocObject();
    *(_QWORD *)(v60 + 16) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
    *(_QWORD *)(v60 + 24) = v86;
    *(_QWORD *)(v60 + 32) = a6;
    *(_QWORD *)(v60 + 40) = v35;
    *(_QWORD *)(v60 + 48) = a2;
    *(_QWORD *)(v60 + 56) = v87;
    *(_BYTE *)(v60 + 64) = a3 & 1;
    v62 = v89;
    *(_QWORD *)(v60 + 72) = a5;
    *(_QWORD *)(v60 + 80) = v89;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v78 = v84;
    swift_retain();
    a6;
    v64 = v87;
    v65 = v83;
    v66 = a2;
    v67 = v64;
    v68 = a3 & 1;
    goto LABEL_53;
  }
  if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&a6[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager])
                                                   + 0x150))(v33, a2) & 1) == 0|| !objc_msgSend(*(id *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager], sel_sharePlaySupported))
  {
    v60 = swift_allocObject();
    *(_QWORD *)(v60 + 16) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
    *(_QWORD *)(v60 + 24) = v86;
    v61 = v35;
    *(_QWORD *)(v60 + 32) = a6;
    *(_QWORD *)(v60 + 40) = v35;
    *(_QWORD *)(v60 + 48) = a2;
    *(_QWORD *)(v60 + 56) = v87;
    v91 = a3 & 1;
    *(_BYTE *)(v60 + 64) = v91;
    v62 = v89;
    *(_QWORD *)(v60 + 72) = a5;
    *(_QWORD *)(v60 + 80) = v89;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v63 = v89;
    swift_retain();
    a6;
    v64 = v87;
    v65 = v61;
    v66 = a2;
    v67 = v64;
    v68 = v91;
LABEL_53:
    ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(v65, v66, v67, v68, v62, (uint64_t)partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:), v60);
    swift_unknownObjectRelease();

    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if (one-time initialization token for host != -1)
    swift_once();
  v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    v58 = swift_slowAlloc();
    v92[0] = v58;
    *(_DWORD *)v57 = 136315138;
    swift_bridgeObjectRetain();
    v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)a2, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v55, v56, "Skipping confirmation prompt as sharing is enabled for: %s", v57, 0xCu);
    swift_arrayDestroy();
    v59 = v58;
    v52 = v35;
    MEMORY[0x1AF44981C](v59, -1, -1);
    MEMORY[0x1AF44981C](v57, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  _Block_copy(a7);
  swift_retain();
  swift_retain();
  specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(v52, a2, v87, a3 & 1, (uint64_t)v89, a6, v85, a7);
  _Block_release(a7);
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release_n();
LABEL_21:
  _Block_release(a7);
}

void specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, char *a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t), uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  const char *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint8_t *v33;
  _QWORD *v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  Swift::String v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  BOOL v46;
  uint8_t *v47;
  uint8_t *v48;
  Swift::String v49;
  unint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ObjCClassFromMetadata;
  void *v60;
  id v61;
  Swift::String v62;
  Swift::String_optional v63;
  Swift::String v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  Swift::String_optional v77;
  Swift::String v78;
  uint64_t v79;
  void *v80;
  void *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  Swift::String v88;
  Swift::String_optional v89;
  Swift::String v90;
  uint64_t v91;
  void *v92;
  void *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  Swift::String v100;
  Swift::String_optional v101;
  Swift::String v102;
  Swift::String v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  Swift::String v110;
  Swift::String_optional v111;
  Swift::String v112;
  Swift::String v113;
  char v114;
  void *v115;
  uint64_t v116;
  id v117;
  char *v118;
  uint64_t v119;
  void *v120;
  void (*v121)(char *, uint64_t);
  Swift::String v122;
  id v123;
  id v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  void *v130;
  void (*v131)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  id v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  void *v138;
  char *v139;
  id v140;
  int v141;
  uint64_t v142;
  id v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD v147[2];
  Swift::String v148;
  uint64_t v149;
  Swift::String v150;
  Swift::String v151;
  Swift::String v152;
  Swift::String v153;
  Swift::String v154;

  v143 = a3;
  v145 = a1;
  v15 = type metadata accessor for UUID();
  v142 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a7;
  v18[3] = a8;
  v144 = v18;
  v18[4] = a9;
  if (a5 && (*(_BYTE *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement) & 1) == 0)
  {
    v37 = one-time initialization token for default;
    swift_retain();
    swift_retain();
    if (v37 != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.default);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      v24 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, confirmReplacement override is set";
      goto LABEL_17;
    }
LABEL_18:

    v39 = v145;
    v40._countAndFlagsBits = v145;
    v40._object = a2;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v40);
    if ((a4 & 1) == 0)
    {
LABEL_20:
      closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(1, 0, a7, a8);
      swift_release();
      return;
    }
LABEL_19:
    v41 = *(_QWORD *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_lock];
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v41 + 16));
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((Swift::Int *)v147, v39, (Swift::Int)a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v41 + 16));
    goto LABEL_20;
  }
  v19 = (void *)objc_opt_self();
  swift_retain();
  swift_retain();
  if (objc_msgSend(v19, sel_supportsMultipleActivitySessions))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.default);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      v24 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, multiple activities supported";
LABEL_17:
      _os_log_impl(&dword_1ACCCC000, v21, v22, v24, v23, 2u);
      MEMORY[0x1AF44981C](v23, -1, -1);
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  v139 = v17;
  v141 = a4;
  v25 = objc_msgSend(v143, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v27 = specialized Sequence.max(by:)(v26);
  swift_bridgeObjectRelease();
  if (!v27)
  {
    v42 = v141;
    if (one-time initialization token for default != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Log.default);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.default.getter();
    v46 = os_log_type_enabled(v44, v45);
    v39 = v145;
    if (v46)
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1ACCCC000, v44, v45, "Skipping prompt in confirmActivityAuthorizationIfNecessary, no representative activity session", v47, 2u);
      v48 = v47;
      v42 = v141;
      MEMORY[0x1AF44981C](v48, -1, -1);
    }

    v49._countAndFlagsBits = v39;
    v49._object = a2;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v49);
    if ((v42 & 1) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.default);
  v29 = v27;
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, v31);
  v140 = v29;
  v137 = a6;
  v138 = a2;
  v136 = v15;
  if (v32)
  {
    v33 = (uint8_t *)swift_slowAlloc();
    v34 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v33 = 138412290;
    v148._countAndFlagsBits = (uint64_t)v140;
    v35 = v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v34 = v27;

    _os_log_impl(&dword_1ACCCC000, v30, v31, "Prompting user to replace activity: %@", v33, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v36 = v34;
    v29 = v140;
    MEMORY[0x1AF44981C](v36, -1, -1);
    MEMORY[0x1AF44981C](v33, -1, -1);

  }
  else
  {

  }
  v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v51 = objc_msgSend(v29, sel_activity);
  v52 = objc_msgSend(v51, sel_metadata);

  v53 = MEMORY[0x1E0DEA968];
  if (v52 && (v54 = objc_msgSend(v52, sel_title), v52, v54))
  {
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v134 = v56;

    v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v57;
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v60 = (void *)objc_opt_self();
    v61 = objc_msgSend(v60, (SEL)&selRef_multiplayerService + 1, ObjCClassFromMetadata);
    v62._countAndFlagsBits = 0xD000000000000015;
    v150._object = (void *)0xE000000000000000;
    v62._object = (void *)0x80000001ACF814A0;
    v63.value._countAndFlagsBits = 0x6E65736572706F43;
    v63.value._object = (void *)0xEE0065726F436563;
    v64._countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    v150._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v61, v64, v150);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v65 + 56) = v53;
    *(_QWORD *)(v65 + 64) = lazy protocol witness table accessor for type String and conformance String();
    v66 = v134;
    *(_QWORD *)(v65 + 32) = v55;
    *(_QWORD *)(v65 + 40) = v66;
    v67 = String.init(format:_:)();
    v69 = v68;
    swift_bridgeObjectRelease();
    v149 = v53;
    v148._countAndFlagsBits = v67;
    v148._object = v69;
    outlined init with take of Any(&v148, v147);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v146 = v50;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v135, v58, isUniquelyReferenced_nonNull_native);
    v71 = v146;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v74 = v73;
    v75 = objc_msgSend(v60, (SEL)&selRef_multiplayerService + 1, ObjCClassFromMetadata);
    v76._countAndFlagsBits = 0xD000000000000017;
    v151._object = (void *)0xE000000000000000;
    v76._object = (void *)0x80000001ACF814C0;
    v77.value._countAndFlagsBits = 0x6E65736572706F43;
    v77.value._object = (void *)0xEE0065726F436563;
    v78._countAndFlagsBits = 0;
    v78._object = (void *)0xE000000000000000;
    v151._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v76, v77, (NSBundle)v75, v78, v151);

    v79 = String.init(format:_:)();
    v81 = v80;
    swift_bridgeObjectRelease();
    v149 = v53;
    v148._countAndFlagsBits = v79;
    v148._object = v81;
    outlined init with take of Any(&v148, v147);
    v82 = swift_isUniquelyReferenced_nonNull_native();
    v146 = v71;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v72, v74, v82);
    v83 = v146;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v86 = v85;
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v87 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v88._countAndFlagsBits = 0xD000000000000016;
    v152._object = (void *)0xE000000000000000;
    v88._object = (void *)0x80000001ACF81460;
    v89.value._countAndFlagsBits = 0x6E65736572706F43;
    v89.value._object = (void *)0xEE0065726F436563;
    v90._countAndFlagsBits = 0;
    v90._object = (void *)0xE000000000000000;
    v152._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v88, v89, (NSBundle)v87, v90, v152);

    v91 = String.init(format:_:)();
    v93 = v92;
    swift_bridgeObjectRelease();
    v149 = v53;
    v148._countAndFlagsBits = v91;
    v148._object = v93;
    outlined init with take of Any(&v148, v147);
    v94 = swift_isUniquelyReferenced_nonNull_native();
    v146 = v50;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v84, v86, v94);
    v83 = v146;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v97 = v96;
  type metadata accessor for ConversationManagerHost();
  v98 = (void *)objc_opt_self();
  v99 = objc_msgSend(v98, (SEL)&selRef_multiplayerService + 1, ObjCClassFromMetadata);
  v153._object = (void *)0xE000000000000000;
  v100._object = (void *)0x80000001ACF81480;
  v100._countAndFlagsBits = 0xD000000000000010;
  v101.value._countAndFlagsBits = 0x6E65736572706F43;
  v101.value._object = (void *)0xEE0065726F436563;
  v102._countAndFlagsBits = 0;
  v102._object = (void *)0xE000000000000000;
  v153._countAndFlagsBits = 0;
  v103 = NSLocalizedString(_:tableName:bundle:value:comment:)(v100, v101, (NSBundle)v99, v102, v153);

  v149 = v53;
  v148 = v103;
  outlined init with take of Any(&v148, v147);
  v104 = swift_isUniquelyReferenced_nonNull_native();
  v146 = v83;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v95, v97, v104);
  v105 = v146;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v108 = v107;
  v109 = objc_msgSend(v98, (SEL)&selRef_multiplayerService + 1, ObjCClassFromMetadata);
  v154._object = (void *)0xE000000000000000;
  v110._countAndFlagsBits = 0x4C45434E4143;
  v110._object = (void *)0xE600000000000000;
  v111.value._countAndFlagsBits = 0x6E65736572706F43;
  v111.value._object = (void *)0xEE0065726F436563;
  v112._countAndFlagsBits = 0;
  v112._object = (void *)0xE000000000000000;
  v154._countAndFlagsBits = 0;
  v113 = NSLocalizedString(_:tableName:bundle:value:comment:)(v110, v111, (NSBundle)v109, v112, v154);

  v149 = v53;
  v148 = v113;
  outlined init with take of Any(&v148, v147);
  v114 = swift_isUniquelyReferenced_nonNull_native();
  v146 = v105;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v106, v108, v114);
  v135 = v146;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v115 = v137;
  v116 = *(_QWORD *)&v137[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  v133 = *(_QWORD *)&v137[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  v134 = __swift_project_boxed_opaque_existential_1(&v137[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v133);
  v117 = objc_msgSend(v143, sel_groupUUID);
  v118 = v139;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
  v119 = v136;
  v148._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v148._object = v120;
  v121 = *(void (**)(char *, uint64_t))(v142 + 8);
  v121(v118, v119);
  v122._countAndFlagsBits = 46;
  v122._object = (void *)0xE100000000000000;
  String.append(_:)(v122);
  v123 = v140;
  v124 = objc_msgSend(v140, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v125._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v125);
  swift_bridgeObjectRelease();
  v121(v118, v119);
  v126 = v148;
  v127 = swift_allocObject();
  v128 = v144;
  v129 = v145;
  *(_QWORD *)(v127 + 16) = v115;
  *(_QWORD *)(v127 + 24) = v129;
  v130 = v138;
  *(_QWORD *)(v127 + 32) = v138;
  *(_BYTE *)(v127 + 40) = v141 & 1;
  *(_QWORD *)(v127 + 48) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
  *(_QWORD *)(v127 + 56) = v128;
  v131 = *(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v116 + 8);
  swift_bridgeObjectRetain();
  v132 = v115;
  swift_retain();
  v131(v126._countAndFlagsBits, v126._object, v129, v130, v135, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:), v127, v133, v116);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

unint64_t lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError;
  if (!lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivityAuthorizationError, &type metadata for ActivityAuthorizationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError;
  if (!lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivityAuthorizationError, &type metadata for ActivityAuthorizationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError);
  }
  return result;
}

void specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, void (*a6)(uint64_t, _QWORD), uint64_t a7)
{
  char *v7;
  char *v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  const char *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  _QWORD *v33;
  id v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  id v42;
  __objc2_ivar_list **p_ivars;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjCClassFromMetadata;
  void *v51;
  id v52;
  Swift::String v53;
  Swift::String_optional v54;
  Swift::String v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  const char *v67;
  uint64_t v68;
  unint64_t v69;
  Swift::String_optional v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  Swift::String v83;
  Swift::String_optional v84;
  Swift::String v85;
  Swift::String v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  Swift::String v93;
  Swift::String_optional v94;
  Swift::String v95;
  Swift::String v96;
  char v97;
  void *v98;
  uint64_t v99;
  id v100;
  char *v101;
  uint64_t v102;
  void *v103;
  void (*v104)(char *, uint64_t);
  Swift::String v105;
  id v106;
  id v107;
  Swift::String v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void (*v114)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  id v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  int v122;
  char *v123;
  uint64_t v124;
  void *v125;
  void (*v126)(_QWORD, _QWORD);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  unint64_t v132;
  _OWORD v133[2];
  Swift::String v134;
  uint64_t v135;
  Swift::String v136;
  Swift::String v137;
  Swift::String v138;

  v8 = v7;
  v131 = a3;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5 && *(_BYTE *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement) != 1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Log.default);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v20, v21))
      goto LABEL_22;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, confirmReplacement override is set";
    goto LABEL_21;
  }
  if ((objc_msgSend((id)objc_opt_self(), sel_supportsMultipleActivitySessions) & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.default);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v20, v21))
      goto LABEL_22;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, multiple activities supported";
LABEL_21:
    _os_log_impl(&dword_1ACCCC000, v20, v21, v23, v22, 2u);
    MEMORY[0x1AF44981C](v22, -1, -1);
LABEL_22:

    v38._countAndFlagsBits = a1;
    v38._object = a2;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v38);
    if ((a4 & 1) != 0)
    {
      v39 = *(_QWORD *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_lock];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v39 + 16));
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((Swift::Int *)v133, a1, (Swift::Int)a2);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 16));
    }
    a6(1, 0);
    return;
  }
  v128 = v16;
  v129 = v15;
  v24 = objc_msgSend(v131, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v26 = specialized Sequence.max(by:)(v25);
  swift_bridgeObjectRelease();
  if (!v26)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.default);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v20, v21))
      goto LABEL_22;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, no representative activity session";
    goto LABEL_21;
  }
  v127 = a7;
  if (one-time initialization token for default != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Log.default);
  v28 = v26;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.default.getter();
  v31 = os_log_type_enabled(v29, v30);
  v130 = v28;
  v125 = a2;
  v126 = a6;
  v123 = v8;
  v124 = a1;
  v122 = a4;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v32 = 138412290;
    v134._countAndFlagsBits = (uint64_t)v130;
    v34 = v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v33 = v26;

    _os_log_impl(&dword_1ACCCC000, v29, v30, "Prompting user to replace activity: %@", v32, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    v35 = v32;
    v28 = v130;
    MEMORY[0x1AF44981C](v35, -1, -1);

  }
  else
  {

  }
  v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v41 = objc_msgSend(v28, sel_activity);
  v42 = objc_msgSend(v41, sel_metadata);

  p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
  v44 = MEMORY[0x1E0DEA968];
  v121 = v18;
  if (v42 && (v45 = objc_msgSend(v42, sel_title), v42, v45))
  {
    v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v119 = v46;

    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v49 = v48;
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v51 = (void *)objc_opt_self();
    v52 = objc_msgSend(v51, sel_bundleForClass_, ObjCClassFromMetadata);
    v53._countAndFlagsBits = 0xD000000000000015;
    v136._object = (void *)0xE000000000000000;
    v53._object = (void *)0x80000001ACF814A0;
    v54.value._countAndFlagsBits = 0x6E65736572706F43;
    v54.value._object = (void *)0xEE0065726F436563;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    v136._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, (NSBundle)v52, v55, v136);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v56 + 56) = v44;
    *(_QWORD *)(v56 + 64) = lazy protocol witness table accessor for type String and conformance String();
    v57 = v119;
    *(_QWORD *)(v56 + 32) = v120;
    *(_QWORD *)(v56 + 40) = v57;
    v58 = String.init(format:_:)();
    v60 = v59;
    swift_bridgeObjectRelease();
    v135 = v44;
    v134._countAndFlagsBits = v58;
    v134._object = v60;
    outlined init with take of Any(&v134, v133);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v132 = v40;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v133, v47, v49, isUniquelyReferenced_nonNull_native);
    v40 = v132;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v64 = v63;
    v65 = objc_msgSend(v51, sel_bundleForClass_, ObjCClassFromMetadata);
    v66 = 0xD000000000000017;
    v116 = 0xE000000000000000;
    p_ivars = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
    v67 = "REPLACE_CONTENT_MESSAGE";
  }
  else
  {
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v64 = v68;
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v65 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v66 = 0xD000000000000016;
    v116 = 0xE000000000000000;
    v67 = "REPLACE_ACTIVITY_TITLE";
  }
  v69 = (unint64_t)(v67 - 32) | 0x8000000000000000;
  v70.value._countAndFlagsBits = 0x6E65736572706F43;
  v70.value._object = (void *)0xEE0065726F436563;
  v71._countAndFlagsBits = 0;
  v71._object = (void *)0xE000000000000000;
  v72 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v66, v70, (NSBundle)v65, v71, *(Swift::String *)(&v116 - 1));

  v73 = String.init(format:_:)();
  v75 = v74;
  swift_bridgeObjectRelease();
  v135 = v44;
  v134._countAndFlagsBits = v73;
  v134._object = v75;
  outlined init with take of Any(&v134, v133);
  v76 = swift_isUniquelyReferenced_nonNull_native();
  v132 = v40;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v133, v62, v64, v76);
  v77 = v132;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v80 = v79;
  type metadata accessor for ConversationManagerHost();
  v81 = (void *)objc_opt_self();
  v82 = objc_msgSend(v81, (SEL)p_ivars[463], ObjCClassFromMetadata);
  v137._object = (void *)0xE000000000000000;
  v83._object = (void *)0x80000001ACF81480;
  v83._countAndFlagsBits = 0xD000000000000010;
  v84.value._countAndFlagsBits = 0x6E65736572706F43;
  v84.value._object = (void *)0xEE0065726F436563;
  v85._countAndFlagsBits = 0;
  v85._object = (void *)0xE000000000000000;
  v137._countAndFlagsBits = 0;
  v86 = NSLocalizedString(_:tableName:bundle:value:comment:)(v83, v84, (NSBundle)v82, v85, v137);

  v135 = v44;
  v134 = v86;
  outlined init with take of Any(&v134, v133);
  v87 = swift_isUniquelyReferenced_nonNull_native();
  v132 = v77;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v133, v78, v80, v87);
  v88 = v132;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v91 = v90;
  v92 = objc_msgSend(v81, (SEL)p_ivars + 1793, ObjCClassFromMetadata);
  v138._object = (void *)0xE000000000000000;
  v93._countAndFlagsBits = 0x4C45434E4143;
  v93._object = (void *)0xE600000000000000;
  v94.value._countAndFlagsBits = 0x6E65736572706F43;
  v94.value._object = (void *)0xEE0065726F436563;
  v95._countAndFlagsBits = 0;
  v95._object = (void *)0xE000000000000000;
  v138._countAndFlagsBits = 0;
  v96 = NSLocalizedString(_:tableName:bundle:value:comment:)(v93, v94, (NSBundle)v92, v95, v138);

  v135 = v44;
  v134 = v96;
  outlined init with take of Any(&v134, v133);
  v97 = swift_isUniquelyReferenced_nonNull_native();
  v132 = v88;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v133, v89, v91, v97);
  v120 = v132;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v98 = v123;
  v99 = *(_QWORD *)&v123[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  v118 = *(_QWORD *)&v123[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  v119 = __swift_project_boxed_opaque_existential_1(&v123[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v118);
  v100 = objc_msgSend(v131, sel_groupUUID);
  v101 = v121;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
  v102 = v129;
  v134._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v134._object = v103;
  v104 = *(void (**)(char *, uint64_t))(v128 + 8);
  v104(v101, v102);
  v105._countAndFlagsBits = 46;
  v105._object = (void *)0xE100000000000000;
  String.append(_:)(v105);
  v106 = v130;
  v107 = objc_msgSend(v130, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v108._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v108);
  swift_bridgeObjectRelease();
  v104(v101, v102);
  v109 = v134;
  v110 = swift_allocObject();
  v111 = v124;
  v112 = v125;
  *(_QWORD *)(v110 + 16) = v98;
  *(_QWORD *)(v110 + 24) = v111;
  *(_QWORD *)(v110 + 32) = v112;
  *(_BYTE *)(v110 + 40) = v122 & 1;
  v113 = v127;
  *(_QWORD *)(v110 + 48) = v126;
  *(_QWORD *)(v110 + 56) = v113;
  v114 = *(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v99 + 8);
  v115 = v98;
  swift_bridgeObjectRetain();
  swift_retain();
  v114(v109._countAndFlagsBits, v109._object, v111, v112, v120, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:), v110, v118, v99);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

unint64_t specialized static ActivityAuthorizationManager.notificationDisplayInformation(audioRoutePolicyManager:activity:conversation:)(void *a1, void *a2, void *a3)
{
  unint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t ObjCClassFromMetadata;
  id v45;
  Swift::String v46;
  Swift::String_optional v47;
  Swift::String v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  Swift::String v63;
  Swift::String_optional v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  Swift::String v75;
  Swift::String_optional v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  Swift::String v81;
  Swift::String_optional v82;
  Swift::String v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  id v88;
  Swift::String v89;
  Swift::String_optional v90;
  Swift::String v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  id v106;
  unint64_t v107;
  unint64_t v108;
  Swift::String_optional v109;
  Swift::String v110;
  uint64_t v111;
  Swift::String v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  Swift::String v118;
  Swift::String_optional v119;
  Swift::String v120;
  Swift::String v121;
  char v122;
  unint64_t v124;
  void *v125;
  unint64_t v126;
  id v127;
  _OWORD v128[2];
  Swift::String v129;
  uint64_t v130;
  Swift::String v131;
  Swift::String v132;
  Swift::String v133;
  Swift::String v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  Swift::String v138;

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7 = objc_msgSend(a1, sel_pickedRoute);
  v8 = MEMORY[0x1E0DEA968];
  v126 = v6;
  v127 = a1;
  if (v7)
  {
    v9 = v7;
    if ((objc_msgSend(a1, sel_sharePlaySupported) & 1) == 0)
    {
      type metadata accessor for ConversationManagerHost();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v45 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v133._object = (void *)0xE000000000000000;
      v46._object = (void *)0x80000001ACF815F0;
      v46._countAndFlagsBits = 0xD000000000000025;
      v47.value._countAndFlagsBits = 0x6E65736572706F43;
      v47.value._object = (void *)0xEE0065726F436563;
      v48._countAndFlagsBits = 0;
      v48._object = (void *)0xE000000000000000;
      v133._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v45, v48, v133);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_1ACF59E20;
      v50 = objc_msgSend(v9, sel_name);
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v52 = v8;
      v54 = v53;

      v28 = v52;
      *(_QWORD *)(v49 + 56) = v52;
      *(_QWORD *)(v49 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v49 + 32) = v51;
      *(_QWORD *)(v49 + 40) = v54;
      v29 = &selRef_releaseTransientSubscriptionAssertionWithCompletion_;
      v30 = v127;
      v31 = String.init(format:_:)();
      v125 = v55;
      swift_bridgeObjectRelease();

      goto LABEL_10;
    }

  }
  v10 = objc_msgSend(a2, sel_metadata);
  if (v10
    && (v11 = v10, v12 = objc_msgSend(v10, sel_title), v11, v12))
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    type metadata accessor for ConversationManagerHost();
    v16 = swift_getObjCClassFromMetadata();
    v17 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v16);
    v18._countAndFlagsBits = 0xD00000000000001ELL;
    v131._object = (void *)0xE000000000000000;
    v18._object = (void *)0x80000001ACF815D0;
    v19.value._countAndFlagsBits = 0x6E65736572706F43;
    v19.value._object = (void *)0xEE0065726F436563;
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v131._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v131);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1ACF59E10;
    *(_QWORD *)(v21 + 56) = v8;
    v22 = v8;
    v23 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v21 + 64) = v23;
    *(_QWORD *)(v21 + 32) = v13;
    *(_QWORD *)(v21 + 40) = v15;
    v24 = objc_msgSend(a3, sel_displayName);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    v28 = v22;
    *(_QWORD *)(v21 + 96) = v22;
    *(_QWORD *)(v21 + 104) = v23;
    *(_QWORD *)(v21 + 72) = v25;
    *(_QWORD *)(v21 + 80) = v27;
    v29 = &selRef_releaseTransientSubscriptionAssertionWithCompletion_;
    v30 = v127;
    v31 = String.init(format:_:)();
    v125 = v32;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    v33 = swift_getObjCClassFromMetadata();
    v34 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v33);
    v35._countAndFlagsBits = 0xD000000000000023;
    v132._object = (void *)0xE000000000000000;
    v35._object = (void *)0x80000001ACF814E0;
    v36.value._countAndFlagsBits = 0x6E65736572706F43;
    v36.value._object = (void *)0xEE0065726F436563;
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v132._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v132);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1ACF59E20;
    v39 = objc_msgSend(a3, sel_displayName);
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    v28 = v8;
    *(_QWORD *)(v38 + 56) = v8;
    *(_QWORD *)(v38 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v38 + 32) = v40;
    *(_QWORD *)(v38 + 40) = v42;
    v29 = &selRef_releaseTransientSubscriptionAssertionWithCompletion_;
    v30 = v127;
    v31 = String.init(format:_:)();
    v125 = v43;
  }
  swift_bridgeObjectRelease();
LABEL_10:
  if ((objc_msgSend(v30, v29[113]) & 1) != 0
    || (v56 = objc_msgSend(a2, sel_localizedApplicationName)) == 0)
  {
    if ((objc_msgSend(v30, v29[113]) & 1) == 0)
    {
      type metadata accessor for ConversationManagerHost();
      v79 = swift_getObjCClassFromMetadata();
      v80 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v79);
      v136._object = (void *)0xE000000000000000;
      v81._object = (void *)0x80000001ACF81510;
      v81._countAndFlagsBits = 0xD000000000000025;
      v82.value._countAndFlagsBits = 0x6E65736572706F43;
      v82.value._object = (void *)0xEE0065726F436563;
      v83._countAndFlagsBits = 0;
      v83._object = (void *)0xE000000000000000;
      v136._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v81, v82, (NSBundle)v80, v83, v136);

      v84 = String.init(format:_:)();
      v86 = v85;
      v67 = v28;
      goto LABEL_20;
    }
    v68 = objc_msgSend(a2, sel_localizedApplicationName);
    v67 = v28;
    if (v68)
    {
      v69 = v68;
      v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v72 = v71;

      type metadata accessor for ConversationManagerHost();
      v73 = swift_getObjCClassFromMetadata();
      v74 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v73);
      v75._countAndFlagsBits = 0xD000000000000015;
      v135._object = (void *)0xE000000000000000;
      v75._object = (void *)0x80000001ACF81580;
      v76.value._countAndFlagsBits = 0x6E65736572706F43;
      v76.value._object = (void *)0xEE0065726F436563;
      v77._countAndFlagsBits = 0;
      v77._object = (void *)0xE000000000000000;
      v135._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v135);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = xmmword_1ACF59E20;
      *(_QWORD *)(v78 + 56) = v28;
      *(_QWORD *)(v78 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v78 + 32) = v70;
      *(_QWORD *)(v78 + 40) = v72;
    }
    else
    {
      type metadata accessor for ConversationManagerHost();
      v87 = swift_getObjCClassFromMetadata();
      v88 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v87);
      v89._countAndFlagsBits = 0xD000000000000012;
      v137._object = (void *)0xE000000000000000;
      v89._object = (void *)0x80000001ACF81560;
      v90.value._countAndFlagsBits = 0x6E65736572706F43;
      v90.value._object = (void *)0xEE0065726F436563;
      v91._countAndFlagsBits = 0;
      v91._object = (void *)0xE000000000000000;
      v137._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v89, v90, (NSBundle)v88, v91, v137);

    }
  }
  else
  {
    v57 = v56;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v60 = v59;

    type metadata accessor for ConversationManagerHost();
    v61 = swift_getObjCClassFromMetadata();
    v62 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v61);
    v63._countAndFlagsBits = 0xD000000000000028;
    v134._object = (void *)0xE000000000000000;
    v63._object = (void *)0x80000001ACF815A0;
    v64.value._countAndFlagsBits = 0x6E65736572706F43;
    v64.value._object = (void *)0xEE0065726F436563;
    v65._countAndFlagsBits = 0;
    v65._object = (void *)0xE000000000000000;
    v134._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v63, v64, (NSBundle)v62, v65, v134);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_1ACF59E20;
    v67 = v28;
    *(_QWORD *)(v66 + 56) = v28;
    *(_QWORD *)(v66 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v66 + 32) = v58;
    *(_QWORD *)(v66 + 40) = v60;
  }
  v84 = String.init(format:_:)();
  v86 = v92;
LABEL_20:
  swift_bridgeObjectRelease();
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v95 = v94;
  v130 = v67;
  v129._countAndFlagsBits = v31;
  v129._object = v125;
  outlined init with take of Any(&v129, v128);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v93, v95, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v99 = v98;
  v130 = v67;
  v129._countAndFlagsBits = v84;
  v129._object = v86;
  outlined init with take of Any(&v129, v128);
  v100 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v97, v99, v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v103 = v102;
  v104 = objc_msgSend(v127, sel_sharePlaySupported);
  type metadata accessor for ConversationManagerHost();
  v105 = swift_getObjCClassFromMetadata();
  v106 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v105);
  if (v104)
  {
    v124 = 0xE000000000000000;
    v107 = 0x4148535F4E494F4ALL;
    v108 = 0xEE0059414C504552;
  }
  else
  {
    v107 = 0xD000000000000011;
    v124 = 0xE000000000000000;
    v108 = 0x80000001ACF81540;
  }
  v109.value._countAndFlagsBits = 0x6E65736572706F43;
  v109.value._object = (void *)0xEE0065726F436563;
  v110._countAndFlagsBits = 0;
  v110._object = (void *)0xE000000000000000;
  v111 = 0;
  v112 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v107, v109, (NSBundle)v106, v110, *(Swift::String *)(&v124 - 1));

  v130 = v67;
  v129 = v112;
  outlined init with take of Any(&v129, v128);
  v113 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v101, v103, v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v116 = v115;
  v117 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v105);
  v138._object = (void *)0xE000000000000000;
  v118._countAndFlagsBits = 0x574F4E5F544F4ELL;
  v118._object = (void *)0xE700000000000000;
  v119.value._countAndFlagsBits = 0x6E65736572706F43;
  v119.value._object = (void *)0xEE0065726F436563;
  v120._countAndFlagsBits = 0;
  v120._object = (void *)0xE000000000000000;
  v138._countAndFlagsBits = 0;
  v121 = NSLocalizedString(_:tableName:bundle:value:comment:)(v118, v119, (NSBundle)v117, v120, v138);

  v130 = v67;
  v129 = v121;
  outlined init with take of Any(&v129, v128);
  v122 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v114, v116, v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v126;
}

void specialized ActivityAuthorizationManager.requestAuthorizationForApplicationLaunch(withActivity:completionHandler:)(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  _Block_copy(a3);
  v7 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    if (MEMORY[0x1AF449918](a2 + OBJC_IVAR___CPActivityAuthorizationManager_dataSource))
    {
      swift_getObjectType();
      CPConversationManagerDataSource.activeConversation.getter();
      if (v12)
      {
        v29 = v12;
        if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a2
                                                                                               + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager))
                                                         + 0x150))(v9, v11) & 1) != 0&& objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_sharePlaySupported))
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1)
            swift_once();
          v13 = type metadata accessor for Logger();
          __swift_project_value_buffer(v13, (uint64_t)static Log.host);
          v14 = Logger.logObject.getter();
          v15 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v14, v15))
          {
            v16 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v16 = 0;
            _os_log_impl(&dword_1ACCCC000, v14, v15, "Bypassing authorization since application is already authorized.", v16, 2u);
            MEMORY[0x1AF44981C](v16, -1, -1);
          }

          a3[2](a3, 1, 0);
          swift_release();
        }
        else
        {
          ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(v9, v11, v29, a1, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> (), v6);
          swift_release();
          swift_bridgeObjectRelease();
        }
        swift_unknownObjectRelease();

      }
      else
      {
        if (one-time initialization token for host != -1)
          swift_once();
        v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Log.host);
        swift_bridgeObjectRetain();
        v25 = Logger.logObject.getter();
        v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc();
          v28 = swift_slowAlloc();
          v30 = v28;
          *(_DWORD *)v27 = 136315138;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, (unint64_t)v11, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v25, v26, "Not allowing activation from %s because there is no active conversation.", v27, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v28, -1, -1);
          MEMORY[0x1AF44981C](v27, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        a3[2](a3, 0, 0);
        swift_release();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      a3[2](a3, 0, 0);
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.host);
    v18 = a1;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v21 = 138412290;
      v30 = (uint64_t)v18;
      v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v22 = v18;

      _os_log_impl(&dword_1ACCCC000, v19, v20, "Invalid bundleIdentifier for activity %@", v21, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v22, -1, -1);
      MEMORY[0x1AF44981C](v21, -1, -1);

    }
    else
    {

    }
    a3[2](a3, 0, 0);
    swift_release();
  }
}

void specialized ActivityAuthorizationManager.conversationManager(_:conversationChanged:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (objc_msgSend(a1, sel_state) == (id)4)
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 16));
    v3 = (_QWORD *)(v1 + OBJC_IVAR___CPActivityAuthorizationManager_preparedAuthorizedBundleIdentifiers);
    swift_beginAccess();
    *v3 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 16));
  }
}

id sub_1ACE13C5C@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = ActivityAuthorizationManager.neighborhoodActivityConduit.getter();
  *a1 = result;
  return result;
}

void sub_1ACE13C84(void **a1, _QWORD *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*a2 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit);
  *(_QWORD *)(*a2 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit) = *a1;
  v3 = v2;

}

uint64_t storeEnumTagSinglePayload for ActivityAuthorizationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACE13D0C + 4 * byte_1ACF63235[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACE13D40 + 4 * byte_1ACF63230[v4]))();
}

uint64_t sub_1ACE13D40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE13D48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE13D50);
  return result;
}

uint64_t sub_1ACE13D5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE13D64);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACE13D68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE13D70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivityAuthorizationError()
{
  return &type metadata for ActivityAuthorizationError;
}

uint64_t type metadata accessor for ActivityAuthorizationManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for ActivityAuthorizationManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t sub_1ACE13DC0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t objectdestroy_5Tm_0()
{
  id *v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);

  v2 = *(void (**)(uint64_t, _QWORD))(v1 + 16);
  if ((a1 & 1) != 0)
    specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(*(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 80), v2, *(_QWORD *)(v1 + 24));
  else
    ((void (*)(_QWORD))v2)(0);
}

unint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject)
  {
    v1 = type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1)
{
  return partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:));
}

uint64_t objectdestroy_2Tm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_43Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(uint64_t a1)
{
  return partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:));
}

uint64_t partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t objectdestroy_40Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(a1, *(_QWORD *)(v1 + 16), *(Swift::String *)(v1 + 24), *(_BYTE *)(v1 + 40), *(void (**)(uint64_t, void *))(v1 + 48));
}

id BackgroundSessionManagerHost.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
}

uint64_t BackgroundSessionManagerHost.__allocating_init(listeners:featureFlags:)(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  Class v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;

  v17 = a2;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v9);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v18 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v8, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF8D0], v3);
  v10 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v11 = objc_allocWithZone(v16);
  v12 = v17;
  specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(a1, v10, v17);
  v14 = v13;
  swift_bridgeObjectRelease();

  return v14;
}

uint64_t BackgroundSessionManagerHost.__allocating_init(listeners:queue:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  objc_class *v3;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = objc_allocWithZone(v3);
  specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(a1, a2, a3);
  v9 = v8;
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;

  specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(a1, a2, a3);
  v6 = v5;
  swift_bridgeObjectRelease();

  return v6;
}

id BackgroundSessionManagerHost.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  unint64_t v2;
  uint64_t v3;
  id result;
  uint64_t i;
  id v6;
  void *v7;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_listeners];
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    v8.receiver = v0;
    v8.super_class = ObjectType;
    return objc_msgSendSuper2(&v8, sel_dealloc);
  }
  swift_bridgeObjectRetain();
  result = (id)_CocoaArrayWrapper.endIndex.getter();
  v3 = (uint64_t)result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1AF448904](i, v2);
      else
        v6 = *(id *)(v2 + 8 * i + 32);
      v7 = v6;
      objc_msgSend(v6, sel_invalidate);

    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall BackgroundSessionManagerHost.resume()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_listeners);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v4 = (id)MEMORY[0x1AF448904](i, v1);
      else
        v4 = *(id *)(v1 + 8 * i + 32);
      v5 = v4;
      objc_msgSend(v4, sel_resume);

    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t BackgroundSessionManagerHost.dataSource(for:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void (*v15)(uint64_t, _UNKNOWN **);
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = v3;
  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_clientIdentifierToDataSourceMap);
  swift_beginAccess();
  v9 = *v8;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v11 & 1) != 0)
    {
      outlined init with copy of UserNotificationCenter(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)&v20);
    }
    else
    {
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
    }
  }
  else
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    swift_bridgeObjectRetain();
  }
  outlined init with take of BackgroundSessionManagerDataSource?((uint64_t)&v20, (uint64_t)&v18);
  if (v19)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v18, (uint64_t)a3);
  }
  else
  {
    v12 = type metadata accessor for BackgroundSessionManager();
    v13 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
    swift_bridgeObjectRetain();
    v14 = (_QWORD *)BackgroundSessionManager.__allocating_init(clientIdentifier:queue:)(a1, a2, v13);
    v15 = *(void (**)(uint64_t, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *v14) + 0xA8);
    v16 = swift_unknownObjectRetain();
    v15(v16, &protocol witness table for BackgroundSessionManagerHost);
    a3[3] = v12;
    a3[4] = &protocol witness table for BackgroundSessionManager;
    *a3 = v14;
    outlined destroy of BackgroundSessionManagerDataSource?((uint64_t)&v18);
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of UserNotificationCenter((uint64_t)a3, (uint64_t)&v20);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v20, a1, a2);
  return swift_endAccess();
}

id BackgroundSessionManagerHost.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void BackgroundSessionManagerHost.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

Swift::Bool __swiftcall BackgroundSessionManagerHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized BackgroundSessionManagerHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1, uint64_t a2)
{
  return specialized BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(a2);
}

void closure #1 in BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1)
{
  id v1;
  Class isa;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerXPCHost);
  if (swift_dynamicCast())
  {
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_updateWithActivitySessions_, isa);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1, uint8_t *a2)
{
  return specialized BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(a2);
}

void closure #1 in BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1)
{
  id v1;
  Class isa;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerXPCHost);
  if (swift_dynamicCast())
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_sessionDidRejectKeyRecoveryRequestWithSessionID_, isa);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(a2, a3);
}

void closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v16;
  void *v17;
  id v18;
  void (*v19)(char *, _QWORD);
  Class isa;
  NSUUID v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  char v27[32];
  unint64_t v28;

  v4 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerXPCHost);
  if (swift_dynamicCast())
  {
    v22 = v23;
    v21.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    if ((a3 & 0xC000000000000001) != 0)
    {
      v5 = __CocoaSet.count.getter();
      v6 = MEMORY[0x1E0DEE9D8];
      if (!v5)
        goto LABEL_16;
      v7 = v5;
      v28 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v24 = __CocoaSet.startIndex.getter();
      v25 = v8;
      v26 = 1;
      if ((v7 & 0x8000000000000000) == 0)
        goto LABEL_10;
      __break(1u);
    }
    v7 = *(_QWORD *)(a3 + 16);
    v6 = MEMORY[0x1E0DEE9D8];
    if (v7)
    {
      v28 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v24 = specialized _NativeSet.startIndex.getter(a3);
      v25 = v9;
      v26 = v10 & 1;
      while (1)
      {
LABEL_10:
        while (1)
        {
          specialized Set.subscript.getter(v24, v25, v26, a3);
          v17 = v16;
          v18 = *(id *)&v16[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if ((a3 & 0xC000000000000001) != 0)
            break;
          v11 = specialized _NativeSet.index(after:)(v24, v25, v26, a3);
          v13 = v12;
          v15 = v14;
          outlined consume of Set<AddressableMember>.Index._Variant(v24, v25, v26);
          v24 = v11;
          v25 = v13;
          v26 = v15 & 1;
          if (!--v7)
            goto LABEL_15;
        }
        if ((v26 & 1) == 0)
          break;
        if (__CocoaSet.Index.handleBitPattern.getter())
          swift_isUniquelyReferenced_nonNull_native();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
        v19 = (void (*)(char *, _QWORD))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v19(v27, 0);
        if (!--v7)
        {
LABEL_15:
          outlined consume of Set<AddressableMember>.Index._Variant(v24, v25, v26);
          v6 = v28;
          goto LABEL_16;
        }
      }
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    specialized Set.init<A>(_:)(v6);
    swift_bridgeObjectRelease();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v22, sel_sessionDidReceiveUpdatedUnknownParticipantListWithSessionID_unknownParticipants_, v21.super.isa, isa);
    swift_unknownObjectRelease();

    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t protocol witness for BackGroundSessionManagerDelegate.didUpdateActivitySessions(backgroundSessionManager:activitySessions:) in conformance BackgroundSessionManagerHost(uint64_t a1, uint64_t a2)
{
  return specialized BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(a2);
}

uint64_t protocol witness for BackGroundSessionManagerDelegate.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:) in conformance BackgroundSessionManagerHost(uint64_t a1, uint8_t *a2)
{
  return specialized BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(a2);
}

uint64_t protocol witness for BackGroundSessionManagerDelegate.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:) in conformance BackgroundSessionManagerHost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(a2, a3);
}

void specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(id))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  void *v26;

  v3 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSessionManagerHostConnection();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundSessionManagerHostConnection, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v5 = v21;
    v20 = v22;
    v6 = v23;
    v7 = v24;
    v8 = v25;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v20 = a1 + 56;
    v6 = ~v9;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v8 = v11 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v7 = 0;
  }
  v19 = (unint64_t)(v6 + 64) >> 6;
  while (1)
  {
    v15 = v7;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_33;
    type metadata accessor for BackgroundSessionManagerHostConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = v26;
    swift_unknownObjectRelease();
    if (!v26)
      goto LABEL_33;
LABEL_10:
    a2(v14);

    if (v3)
      goto LABEL_33;
  }
  if (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v7 << 6);
LABEL_9:
    v14 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v13);
    if (!v14)
      goto LABEL_33;
    goto LABEL_10;
  }
  ++v7;
  if (!__OFADD__(v15, 1))
  {
    if (v7 >= v19)
      goto LABEL_33;
    v16 = *(_QWORD *)(v20 + 8 * v7);
    if (!v16)
    {
      v17 = v15 + 2;
      if (v15 + 2 >= v19)
        goto LABEL_33;
      v16 = *(_QWORD *)(v20 + 8 * v17);
      if (v16)
        goto LABEL_22;
      v17 = v15 + 3;
      if (v15 + 3 >= v19)
        goto LABEL_33;
      v16 = *(_QWORD *)(v20 + 8 * v17);
      if (v16)
        goto LABEL_22;
      v17 = v15 + 4;
      if (v15 + 4 >= v19)
        goto LABEL_33;
      v16 = *(_QWORD *)(v20 + 8 * v17);
      if (v16)
      {
LABEL_22:
        v7 = v17;
      }
      else
      {
        v7 = v15 + 5;
        if (v15 + 5 >= v19)
          goto LABEL_33;
        v16 = *(_QWORD *)(v20 + 8 * v7);
        if (!v16)
        {
          v18 = v15 + 6;
          while (v19 != v18)
          {
            v16 = *(_QWORD *)(v20 + 8 * v18++);
            if (v16)
            {
              v7 = v18 - 1;
              goto LABEL_23;
            }
          }
LABEL_33:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  void *v26;

  v3 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ConversationManagerHostConnection();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ConversationManagerHostConnection and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for ConversationManagerHostConnection, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v5 = v21;
    v20 = v22;
    v6 = v23;
    v7 = v24;
    v8 = v25;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v20 = a1 + 56;
    v6 = ~v9;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v8 = v11 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v7 = 0;
  }
  v19 = (unint64_t)(v6 + 64) >> 6;
  while (1)
  {
    v15 = v7;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_33;
    type metadata accessor for ConversationManagerHostConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = v26;
    swift_unknownObjectRelease();
    if (!v26)
      goto LABEL_33;
LABEL_10:
    a2(v14);

    if (v3)
      goto LABEL_33;
  }
  if (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v7 << 6);
LABEL_9:
    v14 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v13);
    if (!v14)
      goto LABEL_33;
    goto LABEL_10;
  }
  ++v7;
  if (!__OFADD__(v15, 1))
  {
    if (v7 >= v19)
      goto LABEL_33;
    v16 = *(_QWORD *)(v20 + 8 * v7);
    if (!v16)
    {
      v17 = v15 + 2;
      if (v15 + 2 >= v19)
        goto LABEL_33;
      v16 = *(_QWORD *)(v20 + 8 * v17);
      if (v16)
        goto LABEL_22;
      v17 = v15 + 3;
      if (v15 + 3 >= v19)
        goto LABEL_33;
      v16 = *(_QWORD *)(v20 + 8 * v17);
      if (v16)
        goto LABEL_22;
      v17 = v15 + 4;
      if (v15 + 4 >= v19)
        goto LABEL_33;
      v16 = *(_QWORD *)(v20 + 8 * v17);
      if (v16)
      {
LABEL_22:
        v7 = v17;
      }
      else
      {
        v7 = v15 + 5;
        if (v15 + 5 >= v19)
          goto LABEL_33;
        v16 = *(_QWORD *)(v20 + 8 * v7);
        if (!v16)
        {
          v18 = v15 + 6;
          while (v19 != v18)
          {
            v16 = *(_QWORD *)(v20 + 8 * v18++);
            if (v16)
            {
              v7 = v18 - 1;
              goto LABEL_23;
            }
          }
LABEL_33:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t specialized BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for host != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v24 = v2;
    v25 = a1;
    v13 = v12;
    v26[0] = v12;
    v23 = v4;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUConversationActivitySessionContainer]);
    v14 = String.init<A>(reflecting:)();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v26);
    v4 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "BackgroundSessionManagerHost received didUpdateActivitySessions %s", v11, 0xCu);
    swift_arrayDestroy();
    v16 = v13;
    v2 = v24;
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

    v17 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1E0C80A78](v17);
  v18 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
  *(&v22 - 2) = a1;
  *v7 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v18 & 1) != 0)
  {
    swift_beginAccess();
    v21 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v21, (void (*)(id))partial apply for closure #1 in BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:));
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint8_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint8_t *, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint8_t **)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  v12 = *(void (**)(char *, uint8_t *, uint64_t))(v8 + 16);
  v28 = a1;
  v12(v10, a1, v7);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v32[0] = v16;
    v27 = v1;
    *(_DWORD *)v15 = 136315138;
    v26 = v15 + 4;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v32);
    v2 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_1ACCCC000, v13, v14, "BackgroundSessionManagerHost received didRejectKeyRecoveryRequest on %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  MEMORY[0x1E0C80A78](v19);
  v20 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
  v21 = v29;
  *(&v26 - 2) = v28;
  *v6 = v20;
  v22 = v30;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v6, *MEMORY[0x1E0DEF740], v30);
  v23 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v6, v22);
  if ((v20 & 1) != 0)
  {
    swift_beginAccess();
    v25 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v25, (void (*)(id))partial apply for closure #1 in BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:));
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t result;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];

  v3 = v2;
  v33 = a2;
  v5 = type metadata accessor for DispatchPredicate();
  v34 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (_QWORD *)((char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v32 = a1;
  v13(v11, a1, v8);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v31 = v2;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v36[0] = v18;
    v30 = v5;
    *(_DWORD *)v17 = 136315138;
    v29[1] = v17 + 4;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v36);
    v5 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl(&dword_1ACCCC000, v14, v15, "BackgroundSessionManagerHost received didReceiveUpdatedUnknownParticipantList on %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    v21 = v17;
    v3 = v31;
    MEMORY[0x1AF44981C](v21, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  MEMORY[0x1E0C80A78](v22);
  v23 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
  v24 = v33;
  v25 = v34;
  v29[-2] = v32;
  v29[-1] = v24;
  *v7 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v25 + 104))(v7, *MEMORY[0x1E0DEF740], v5);
  v26 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v25 + 8))(v7, v5);
  if ((v23 & 1) != 0)
  {
    swift_beginAccess();
    v28 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v28, (void (*)(id))partial apply for closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:));
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  void *v3;
  void *v4;
  objc_class *ObjectType;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t i;
  id v19;
  void *v20;
  uint64_t v21;
  objc_super v22;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v9 = v4;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v10 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_connections] = v10;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21 >= 1)
      goto LABEL_5;
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
    goto LABEL_19;
LABEL_5:
  *(_QWORD *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_listeners] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue] = a2;
  swift_bridgeObjectRetain();
  v11 = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_clientIdentifierToDataSourceMap] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_featureFlags] = a3;
  v12 = a3;

  v22.receiver = v9;
  v22.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v22, sel_init);
  v14 = v13;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = v14;
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
    {
LABEL_15:

      return;
    }
  }
  else
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v13;
    if (!v15)
      goto LABEL_15;
  }
  if (v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v19 = (id)MEMORY[0x1AF448904](i, a1);
      else
        v19 = *(id *)(a1 + 8 * i + 32);
      v20 = v19;
      objc_msgSend(v19, sel_setDelegate_, v14);

    }
    goto LABEL_15;
  }
LABEL_20:
  __break(1u);
}

uint64_t specialized BackgroundSessionManagerHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  char *v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  const char *v34;
  uint8_t *v35;
  os_log_type_t v36;
  uint8_t *v37;
  char *v38;
  id v40;
  id v41;
  _QWORD v42[5];

  v2 = v1;
  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v42[0] = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_1ACCCC000, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

  }
  v11 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_featureFlags);
  if (objc_msgSend(v11, sel_sharePlayLiteEnabled))
  {
    v12 = NSXPCConnection.stableAppIdentifier.getter();
    if (v13 || (v12 = NSXPCConnection.bundleIdentifier.getter(), v13))
    {
      v14 = v12;
      v15 = v13;
      v16 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
      v17 = v5;
      v18 = v16;
      BackgroundSessionManagerHost.dataSource(for:)(v14, v15, v42);
      swift_bridgeObjectRelease();
      v19 = objc_allocWithZone((Class)type metadata accessor for BackgroundSessionManagerHostConnection());
      v20 = BackgroundSessionManagerHostConnection.init(connection:queue:dataSource:)(v17, v18, (uint64_t)v42);
      if (v20)
      {
        v21 = v20;
        if ((objc_msgSend(v11, sel_gameCenterFastSyncTransport) & 1) != 0)
        {
          if ((v21[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] & 1) == 0
            && !v21[direct field offset for XPCHostConnection.isEntitledToUseGameCenter])
          {
            goto LABEL_13;
          }
        }
        else if ((v21[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] & 1) == 0)
        {
LABEL_13:
          v22 = v17;
          v23 = Logger.logObject.getter();
          v24 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v23, v24))
          {
            v25 = (uint8_t *)swift_slowAlloc();
            v26 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v25 = 138412290;
            v42[0] = v22;
            v27 = v22;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v26 = v22;

            _os_log_impl(&dword_1ACCCC000, v23, v24, "BackgroundSessionManagerHost rejecting connection %@ because client is not entitled", v25, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v26, -1, -1);
            MEMORY[0x1AF44981C](v25, -1, -1);

          }
          else
          {

          }
          return 0;
        }
        swift_beginAccess();
        v38 = v21;
        specialized Set._Variant.insert(_:)(&v41, v38);
        swift_endAccess();

        return 1;
      }
      v28 = v17;
      v29 = Logger.logObject.getter();
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v37 = 67109120;
        LODWORD(v42[0]) = objc_msgSend(v28, sel_processIdentifier);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_1ACCCC000, v29, v36, "BackgroundSessionManagerHost could not be created; rejecting connection from PID %d.",
          v37,
          8u);
        v35 = v37;
        goto LABEL_20;
      }

LABEL_27:
      return 0;
    }
    v28 = v5;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v31 = 138412290;
      v42[0] = v28;
      v40 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v32 = v28;

      v34 = "BackgroundSessionManagerHost rejecting connection because a client identifier could not be derived: %@";
      goto LABEL_17;
    }
LABEL_26:

    goto LABEL_27;
  }
  v28 = v5;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v29, v30))
    goto LABEL_26;
  v31 = (uint8_t *)swift_slowAlloc();
  v32 = (_QWORD *)swift_slowAlloc();
  *(_DWORD *)v31 = 138412290;
  v42[0] = v28;
  v33 = v28;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *v32 = v28;

  v34 = "BackgroundSessionManagerHost rejecting connection because flag is not enabled: %@";
LABEL_17:
  _os_log_impl(&dword_1ACCCC000, v29, v30, v34, v31, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  MEMORY[0x1AF44981C](v32, -1, -1);
  v35 = v31;
LABEL_20:
  MEMORY[0x1AF44981C](v35, -1, -1);

  return 0;
}

uint64_t type metadata accessor for BackgroundSessionManagerHost()
{
  return objc_opt_self();
}

uint64_t method lookup function for BackgroundSessionManagerHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackgroundSessionManagerHost.__allocating_init(listeners:queue:featureFlags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void partial apply for closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1)
{
  closure #1 in BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(a1);
}

void partial apply for closure #1 in BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1)
{
  closure #1 in BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(a1);
}

uint64_t outlined init with take of BackgroundSessionManagerDataSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of BackgroundSessionManagerDataSource?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL ActivityListPresenceContext.isEmpty.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

uint64_t ActivityListPresenceContext.insert(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v14 = *v2;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v11 = v14;
  ActivityListPresenceContext.activityIDs.willset();
  result = swift_bridgeObjectRelease();
  *v2 = v11;
  return result;
}

uint64_t ActivityListPresenceContext.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  swift_bridgeObjectRetain();
  specialized Set._Variant.remove(_:)(a1, (uint64_t)v5);
  outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6 = v9;
  ActivityListPresenceContext.activityIDs.willset();
  result = swift_bridgeObjectRelease();
  *v1 = v6;
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v40 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x1E0C80A78](v11);
  v39 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v37 = -1 << *(_BYTE *)(a4 + 32);
  if (-v37 < 64)
    v16 = ~(-1 << -(char)v37);
  else
    v16 = -1;
  v17 = v16 & v14;
  v34 = a1;
  if (!a2)
  {
    v18 = 0;
    v19 = 0;
LABEL_33:
    v30 = ~v37;
    v31 = v34;
    *v34 = v41;
    v31[1] = v15;
    v31[2] = v30;
    v31[3] = v18;
    v31[4] = v17;
    return v19;
  }
  if (!a3)
  {
    v18 = 0;
    v19 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v18 = 0;
  v19 = 0;
  v35 = (unint64_t)(63 - v37) >> 6;
  v36 = a4 + 56;
  v33 = v35 - 1;
  v38 = a3;
  v20 = v39;
  v21 = v40;
  if (!v17)
    goto LABEL_9;
LABEL_8:
  v22 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v23 = v22 | (v18 << 6);
  while (1)
  {
    v28 = *(_QWORD *)(v21 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v10, *(_QWORD *)(v41 + 48) + v28 * v23, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, v11) == 1)
    {
      v15 = v36;
LABEL_32:
      outlined destroy of UUID?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_33;
    }
    ++v19;
    v29 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v29(v20, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(a2, v20, v11);
    if (v19 == v38)
    {
      v19 = v38;
      v15 = v36;
      goto LABEL_33;
    }
    a2 += v28;
    v21 = v40;
    if (v17)
      goto LABEL_8;
LABEL_9:
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    v15 = v36;
    if (v24 >= v35)
      goto LABEL_31;
    v25 = *(_QWORD *)(v36 + 8 * v24);
    if (!v25)
      break;
LABEL_21:
    v17 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v18 = v24;
  }
  v26 = v18 + 2;
  ++v18;
  if (v24 + 1 >= v35)
    goto LABEL_31;
  v25 = *(_QWORD *)(v36 + 8 * v26);
  if (v25)
  {
    ++v24;
    goto LABEL_21;
  }
  v27 = v24 + 2;
  v18 = v24 + 1;
  if (v24 + 2 >= v35)
  {
LABEL_31:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, 1, 1, v11);
    v17 = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v36 + 8 * v27);
  if (v25)
  {
    v24 += 2;
    goto LABEL_21;
  }
  while (1)
  {
    v24 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v24 >= v35)
    {
      v18 = v33;
      goto LABEL_31;
    }
    v25 = *(_QWORD *)(v36 + 8 * v24);
    ++v27;
    if (v25)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

CopresenceCore::EmptyPresenceContext_optional __swiftcall EmptyPresenceContext.init(dictionary:)(Swift::OpaquePointer dictionary)
{
  uint64_t v1;

  v1 = *((_QWORD *)dictionary._rawValue + 2);
  swift_bridgeObjectRelease();
  return (CopresenceCore::EmptyPresenceContext_optional)(v1 != 0);
}

unint64_t EmptyPresenceContext.dictionaryRepresentation.getter()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

uint64_t static EmptyPresenceContext.== infix(_:_:)()
{
  return 1;
}

Swift::Int EmptyPresenceContext.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance EmptyPresenceContext@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

unint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance EmptyPresenceContext()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmptyPresenceContext()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmptyPresenceContext()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

void one-time initialization function for defaultValue()
{
  static ActivityListPresenceContext.defaultValue = MEMORY[0x1E0DEE9E8];
}

uint64_t *ActivityListPresenceContext.defaultValue.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return &static ActivityListPresenceContext.defaultValue;
}

uint64_t static ActivityListPresenceContext.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for ActivityListPresenceContext.activityIDs : ActivityListPresenceContext(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  ActivityListPresenceContext.activityIDs.willset();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t ActivityListPresenceContext.activityIDs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  ActivityListPresenceContext.activityIDs.willset();
  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

void ActivityListPresenceContext.activityIDs.willset()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (one-time initialization token for service != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v5 = Set.description.getter();
    v7 = v6;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Updating activity list context to current activities: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v4, -1, -1);
    MEMORY[0x1AF44981C](v3, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t (*ActivityListPresenceContext.activityIDs.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return ActivityListPresenceContext.activityIDs.modify;
}

uint64_t ActivityListPresenceContext.activityIDs.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ActivityListPresenceContext.activityIDs.willset();
    swift_bridgeObjectRelease();
    *v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    ActivityListPresenceContext.activityIDs.willset();
    result = swift_bridgeObjectRelease();
    *v3 = v2;
  }
  return result;
}

uint64_t ActivityListPresenceContext.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *(_QWORD *)(a1 + 56);
  *a2 = a1;
  a2[1] = a1 + 56;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ActivityListPresenceContext@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  ActivityListPresenceContext.makeIterator()(*v1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ActivityListPresenceContext()
{
  return 0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ActivityListPresenceContext()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ActivityListPresenceContext(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

BOOL ActivityListPresenceContext.DictionaryKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ActivityListPresenceContext.DictionaryKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t ActivityListPresenceContext.DictionaryKeys.rawValue.getter()
{
  return 0x7974697669746361;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActivityListPresenceContext.DictionaryKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ActivityListPresenceContext.DictionaryKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActivityListPresenceContext.DictionaryKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ActivityListPresenceContext.DictionaryKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance ActivityListPresenceContext.DictionaryKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ActivityListPresenceContext.DictionaryKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x7974697669746361;
  a1[1] = 0xEB00000000734449;
}

unint64_t ActivityListPresenceContext.dictionaryRepresentation.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v34 - 8);
  v3 = MEMORY[0x1E0C80A78](v34);
  v33 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v32 = (char *)&v28 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  v7 = inited;
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E20;
  *(_QWORD *)(inited + 32) = 0x7974697669746361;
  *(_QWORD *)(inited + 40) = 0xEB00000000734449;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v29 = inited;
    v35 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    result = specialized Set.startIndex.getter(a1);
    v11 = result;
    v13 = v12;
    v15 = v14 & 1;
    v30 = a1;
    v31 = a1 + 56;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(v31 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_15;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
        goto LABEL_16;
      v16 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(v2 + 72) * v11;
      v17 = v32;
      v18 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v32, v16, v34);
      v19 = v33;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v33, v17, v18);
      v20 = UUID.uuidString.getter();
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v19, v18);
      v9 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v35;
      }
      v24 = *(_QWORD *)(v9 + 16);
      v23 = *(_QWORD *)(v9 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v9 = v35;
      }
      *(_QWORD *)(v9 + 16) = v24 + 1;
      v25 = v9 + 16 * v24;
      *(_QWORD *)(v25 + 32) = v20;
      *(_QWORD *)(v25 + 40) = v22;
      a1 = v30;
      result = specialized _NativeSet.index(after:)(v11, v13, v15 & 1, v30);
      v11 = result;
      v13 = v26;
      v15 = v27 & 1;
      if (!--v8)
      {
        outlined consume of Set<AddressableMember>.Index._Variant(result, v26, v27 & 1);
        swift_bridgeObjectRelease();
        v7 = v29;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_13:
    *(_QWORD *)(v7 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(_QWORD *)(v7 + 48) = v9;
    return specialized Dictionary.init(dictionaryLiteral:)(v7);
  }
  return result;
}

uint64_t ActivityListPresenceContext.hash(into:)(__int128 *a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, a2);
  return swift_bridgeObjectRelease();
}

Swift::Int ActivityListPresenceContext.hashValue.getter(uint64_t a1)
{
  __int128 v3[4];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static PresenceContext.defaultValue.getter in conformance ActivityListPresenceContext@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static ActivityListPresenceContext.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance ActivityListPresenceContext@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized ActivityListPresenceContext.init(dictionary:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance ActivityListPresenceContext()
{
  uint64_t *v0;

  return ActivityListPresenceContext.dictionaryRepresentation.getter(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActivityListPresenceContext()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ActivityListPresenceContext(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActivityListPresenceContext()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ActivityListPresenceContext(uint64_t *a1, uint64_t *a2)
{
  return specialized static Set.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant, 0x1E0DBD2B0, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationParticipant>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for PresenceHostSession, &demangling cache variable for type metadata for _SetStorage<PresenceHostSession>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for AddressableMember, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for BackgroundSessionManagerHostConnection, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<BackgroundSessionManagerHostConnection>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E0DBD2F8, &demangling cache variable for type metadata for _SetStorage<TUHandle>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for ConversationManagerHostConnection, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for ActivitySession, &demangling cache variable for type metadata for _SetStorage<ActivitySession>);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v20 = v16;
    if (*(_QWORD *)(v16 + 24) <= *(_QWORD *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v17 = v20;
    }
    else
    {
      v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  swift_bridgeObjectRetain();
  v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v11 = -1 << *(_BYTE *)(v6 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v2;
    *v2 = 0x8000000000000000;
    v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v13 = ~v11;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E20]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  id v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  Swift::Int v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for BackgroundSession(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v24;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v25 = v18;
    if (*(_QWORD *)(v18 + 24) <= *(_QWORD *)(v18 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v19 = v25;
    }
    else
    {
      v19 = v18;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *v3 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    v22 = v2;
    Hasher.init(_seed:)();
    v10 = *(void **)(a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
    swift_bridgeObjectRetain();
    v11 = v10;
    NSObject.hash(into:)();

    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
      swift_retain();
      v15 = static NSObject.== infix(_:_:)();
      swift_release();
      if ((v15 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v22 + 48) + 8 * v14);
        swift_retain();
        return 0;
      }
      v16 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        swift_retain();
        v17 = static NSObject.== infix(_:_:)();
        swift_release();
        if ((v17 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = *v22;
    *v22 = 0x8000000000000000;
    v21 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v21, v14, isUniquelyReferenced_nonNull_native);
    *v22 = v26;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  void *v25;
  id v26;
  Swift::Int v27;
  unint64_t v28;
  _QWORD *v29;
  id v30;
  char isUniquelyReferenced_nonNull_native;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v8 = v5;
  v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0)
      v12 = *v5;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v13 = a2;
    v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for TUConversationActivity(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v27 = specialized _NativeSet.init(_:capacity:)(v12, result + 1, a5, a3);
    v38 = (_QWORD *)v27;
    v28 = *(_QWORD *)(v27 + 16);
    if (*(_QWORD *)(v27 + 24) <= v28)
    {
      v33 = v28 + 1;
      v34 = v13;
      specialized _NativeSet.resize(capacity:)(v33, a5);
      v29 = v38;
    }
    else
    {
      v29 = (_QWORD *)v27;
      v30 = v13;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v13, v29);
    *v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 40);
    swift_bridgeObjectRetain();
    v17 = NSObject._rawHashValue(seed:)(v16);
    v18 = -1 << *(_BYTE *)(v11 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
    {
      type metadata accessor for TUConversationActivity(0, a3);
      v20 = *(id *)(*(_QWORD *)(v11 + 48) + 8 * v19);
      v21 = static NSObject.== infix(_:_:)();

      if ((v21 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v25 = *(void **)(*(_QWORD *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        v26 = v25;
        return 0;
      }
      v22 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v22;
        if (((*(_QWORD *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          break;
        v23 = *(id *)(*(_QWORD *)(v11 + 48) + 8 * v19);
        v24 = static NSObject.== infix(_:_:)();

        if ((v24 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39 = *v8;
    *v8 = 0x8000000000000000;
    v32 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    *v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  uint64_t *v4;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v9 + 48);
    while (1)
    {
      v15 = (_QWORD *)(v14 + 24 * v12);
      if (*v15 == a2)
      {
        v16 = v15[1] == a3 && v15[2] == a4;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
      }
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(*v4 + 48) + 24 * v12;
    v18 = *(_QWORD *)(v17 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v17;
    *(_QWORD *)(a1 + 16) = v18;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v4;
    *v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *v4 = v21;
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = a3;
    result = 1;
    *(_QWORD *)(a1 + 16) = a4;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2, void (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t result;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  void *v24;
  id v25;
  Swift::Int v26;
  unint64_t v27;
  _QWORD *v28;
  id v29;
  char isUniquelyReferenced_nonNull_native;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v7 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = a2;
    v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease();

      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v36;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v26 = specialized _NativeSet.init(_:capacity:)(v11, result + 1, a4, a3);
    v37 = (_QWORD *)v26;
    v27 = *(_QWORD *)(v26 + 16);
    if (*(_QWORD *)(v26 + 24) <= v27)
    {
      v32 = v27 + 1;
      v33 = v12;
      specialized _NativeSet.resize(capacity:)(v32, a4);
      v28 = v37;
    }
    else
    {
      v28 = (_QWORD *)v26;
      v29 = v12;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v12, v28);
    *v7 = (uint64_t)v28;
    swift_bridgeObjectRelease();
    *a1 = v12;
  }
  else
  {
    v15 = *(_QWORD *)(v10 + 40);
    swift_bridgeObjectRetain();
    v16 = NSObject._rawHashValue(seed:)(v15);
    v17 = -1 << *(_BYTE *)(v10 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
    {
      a3(0);
      v19 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
      v20 = static NSObject.== infix(_:_:)();

      if ((v20 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v24 = *(void **)(*(_QWORD *)(*v7 + 48) + 8 * v18);
        *a1 = v24;
        v25 = v24;
        return 0;
      }
      v21 = ~v17;
      while (1)
      {
        v18 = (v18 + 1) & v21;
        if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
        v23 = static NSObject.== infix(_:_:)();

        if ((v23 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v38 = *v7;
    *v7 = 0x8000000000000000;
    v31 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v31, v18, isUniquelyReferenced_nonNull_native, a4, a3);
    *v7 = v38;
    swift_bridgeObjectRelease();
    *a1 = v31;
  }
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v6 = static _SetStorage.convert(_:capacity:)();
    v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for TUConversationActivity(0, a4);
      do
      {
        swift_dynamicCast();
        v6 = v19;
        v13 = *(_QWORD *)(v19 + 16);
        if (*(_QWORD *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          v6 = v19;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
        v8 = v6 + 56;
        v9 = -1 << *(_BYTE *)(v6 + 32);
        v10 = result & ~v9;
        v11 = v10 >> 6;
        if (((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v14 = 0;
          v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v16 = v11 == v15;
            if (v11 == v15)
              v11 = 0;
            v14 |= v16;
            v17 = *(_QWORD *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(_QWORD *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
        ++*(_QWORD *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v6;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<ActivitySession>, (void (*)(_QWORD))type metadata accessor for ActivitySession);
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>, (void (*)(_QWORD))type metadata accessor for AddressableMember);
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<PresenceHostSession>, (void (*)(_QWORD))type metadata accessor for PresenceHostSession);
}

{
  uint64_t v2;
  id v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for BackgroundSession(0);
      do
      {
        swift_dynamicCast();
        v2 = v15;
        if (*(_QWORD *)(v15 + 24) <= *(_QWORD *)(v15 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v15;
        }
        Hasher.init(_seed:)();
        v3 = *(id *)(v14 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
        NSObject.hash(into:)();

        result = Hasher._finalize()();
        v5 = v2 + 56;
        v6 = -1 << *(_BYTE *)(v2 + 32);
        v7 = result & ~v6;
        v8 = v7 >> 6;
        if (((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          v9 = __clz(__rbit64((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v10 = 0;
          v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v12 = v8 == v11;
            if (v8 == v11)
              v8 = 0;
            v10 |= v12;
            v13 = *(_QWORD *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(_QWORD *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9) = v14;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>, (void (*)(_QWORD))type metadata accessor for ConversationManagerHostConnection);
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(_QWORD))
{
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v6 = static _SetStorage.convert(_:capacity:)();
    v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        v6 = v19;
        v13 = *(_QWORD *)(v19 + 16);
        if (*(_QWORD *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          v6 = v19;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
        v8 = v6 + 56;
        v9 = -1 << *(_BYTE *)(v6 + 32);
        v10 = result & ~v9;
        v11 = v10 >> 6;
        if (((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v14 = 0;
          v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v16 = v11 == v15;
            if (v11 == v15)
              v11 = 0;
            v14 |= v16;
            v17 = *(_QWORD *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(_QWORD *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
        ++*(_QWORD *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v6;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      v3 = MEMORY[0x1E0C95E18];
      do
      {
        swift_dynamicCast();
        v2 = v15;
        if (*(_QWORD *)(v15 + 24) <= *(_QWORD *)(v15 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v15;
        }
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], v3);
        result = dispatch thunk of Hashable._rawHashValue(seed:)();
        v5 = v2 + 56;
        v6 = -1 << *(_BYTE *)(v2 + 32);
        v7 = result & ~v6;
        v8 = v7 >> 6;
        if (((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          v9 = __clz(__rbit64((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v10 = 0;
          v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v12 = v8 == v11;
            if (v8 == v11)
              v8 = 0;
            v10 |= v12;
            v13 = *(_QWORD *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(_QWORD *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9) = v14;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ActivitySession>);
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v26 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v25 = (unint64_t)(v4 + 63) >> 6;
    v7 = v2 + 56;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v12 = v11 | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25)
          goto LABEL_33;
        v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          v9 = v13 + 1;
          if (v13 + 1 >= v25)
            goto LABEL_33;
          v14 = v26[v9];
          if (!v14)
          {
            v9 = v13 + 2;
            if (v13 + 2 >= v25)
              goto LABEL_33;
            v14 = v26[v9];
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                v24 = 1 << *(_BYTE *)(v1 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v9 >= v25)
                    goto LABEL_33;
                  v14 = v26[v9];
                  ++v15;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v9 = v15;
            }
          }
        }
LABEL_23:
        v6 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      type metadata accessor for AnyCancellable();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v17 = -1 << *(_BYTE *)(v3 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v29 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v29;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      v20 = *(id *)(v19 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      NSObject.hash(into:)();

      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  Swift::UInt64 *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::UInt64 *v19;
  Swift::UInt64 v20;
  Swift::UInt64 v21;
  Swift::UInt64 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSGroupSessionProvider.Participant>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v32 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v31 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v31)
          goto LABEL_33;
        v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v31)
            goto LABEL_33;
          v16 = v32[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v31)
              goto LABEL_33;
            v16 = v32[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v30 = 1 << *(_BYTE *)(v2 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v31)
                    goto LABEL_33;
                  v16 = v32[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = v2;
      v19 = (Swift::UInt64 *)(*(_QWORD *)(v2 + 48) + 24 * v14);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v4 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (Swift::UInt64 *)(*(_QWORD *)(v4 + 48) + 24 * v11);
      *v12 = v20;
      v12[1] = v21;
      v12[2] = v22;
      ++*(_QWORD *)(v4 + 16);
      v2 = v18;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v8 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_33;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_33;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_33;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                v3 = v30;
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v11)
                    goto LABEL_33;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

{
  id v4;
  unint64_t result;

  Hasher.init(_seed:)();
  v4 = *(id *)(a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11, a4);
  }
  v12 = *v5;
  v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v5 + 40));
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for TUConversationActivity(0, a5);
    v15 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
    v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * a2) = a1;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v23;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E20]);
    do
    {
      result = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v11 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * a2) = v5;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    *(_QWORD *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(_QWORD))
{
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11, a4);
  }
  v12 = *v5;
  v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v5 + 40));
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    a5(0);
    v15 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
    v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * a2) = a1;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v23;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  v9 = *(id *)(v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for BackgroundSession(0);
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
    swift_retain();
    v11 = static NSObject.== infix(_:_:)();
    result = swift_release();
    if ((v11 & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        swift_retain();
        v13 = static NSObject.== infix(_:_:)();
        result = swift_release();
        if ((v13 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v18;
  *(_QWORD *)(*v18 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt64 a2, Swift::UInt64 a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  Swift::UInt64 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::UInt64 *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v6 = v5;
  v10 = result;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0)
    goto LABEL_18;
  if ((a5 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_18;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v13 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v13 + 32);
  a4 = result & ~v14;
  v15 = v13 + 56;
  if (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v13 + 48);
    while (1)
    {
      v18 = (_QWORD *)(v17 + 24 * a4);
      if (*v18 == v10)
      {
        if (v18[1] == a2 && v18[2] == a3)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          break;
      }
      a4 = (a4 + 1) & v16;
      if (((*(_QWORD *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
        goto LABEL_18;
    }
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_18:
  v20 = *v6;
  *(_QWORD *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v21 = (Swift::UInt64 *)(*(_QWORD *)(v20 + 48) + 24 * a4);
  *v21 = v10;
  v21[1] = a2;
  v21[2] = a3;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ActivitySession>);
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<PresenceHostSession>);
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>);
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSGroupSessionProvider.Participant>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v19 = *(_OWORD *)v17;
    *(_QWORD *)(v19 + 16) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = (void *)swift_retain();
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v24 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v25)
        goto LABEL_33;
      v14 = *(_QWORD *)(v24 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v25)
          goto LABEL_33;
        v14 = *(_QWORD *)(v24 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
    swift_retain();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v17 = -1 << *(_BYTE *)(v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
    ++*(_QWORD *)(v3 + 16);
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v29 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    v20 = *(void **)(v19 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
    swift_retain();
    v21 = v20;
    NSObject.hash(into:)();

    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v29;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  Swift::UInt64 *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::UInt64 *v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSGroupSessionProvider.Participant>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v28 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v29 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v14);
    ++v9;
    if (!v15)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_33;
      v15 = *(_QWORD *)(v28 + 8 * v9);
      if (!v15)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_33;
        v15 = *(_QWORD *)(v28 + 8 * v9);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    v17 = (Swift::UInt64 *)(*(_QWORD *)(v1 + 48) + 24 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = (Swift::UInt64 *)(*(_QWORD *)(v3 + 48) + 24 * v10);
    *v11 = v18;
    v11[1] = v19;
    v11[2] = v20;
    ++*(_QWORD *)(v3 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
  {
    v9 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = v4 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_33;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_33;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    result = swift_release_n();
    v3 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t);
  _QWORD *v26;
  BOOL v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 56);
  v49 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v50 = (v12 + 32) & ~v12;
  v14 = MEMORY[0x1E0DEE9D8] + v50;
  v47 = v12 | 7;
  v48 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v16 = v13;
  v17 = 0;
  v18 = 0;
  v51 = v4;
  v46 = a1;
  v53 = v16;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    v24 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, *(_QWORD *)(a1 + 48) + v24 * i, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      goto LABEL_43;
    v25 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    result = v25(v52, v4, v5);
    if (v17)
    {
      v26 = v53;
      v27 = __OFSUB__(v17--, 1);
      if (v27)
        goto LABEL_47;
      goto LABEL_40;
    }
    v28 = v53[3];
    if ((uint64_t)((v28 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_49;
    v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
    if (v29 <= 1)
      v30 = 1;
    else
      v30 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
    v31 = v50;
    v26 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v26);
    if (!v24)
      goto LABEL_50;
    v32 = result - v31;
    if (result - v31 == 0x8000000000000000 && v24 == -1)
      goto LABEL_52;
    v34 = v32 / v24;
    v26[2] = v30;
    v26[3] = 2 * (v32 / v24);
    v35 = (char *)v26 + v31;
    v36 = v53;
    v37 = v53[3] >> 1;
    v38 = v37 * v24;
    if (v53[2])
    {
      if (v26 < v53 || v35 >= (char *)v53 + v50 + v38)
      {
        v45 = v37 * v24;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v26 == v53)
        {
LABEL_38:
          v36[2] = 0;
          goto LABEL_39;
        }
        v45 = v37 * v24;
        swift_arrayInitWithTakeBackToFront();
      }
      v38 = v45;
      v36 = v53;
      goto LABEL_38;
    }
LABEL_39:
    v14 = (uint64_t)&v35[v38];
    v39 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - v37;
    result = swift_release();
    a1 = v46;
    v27 = __OFSUB__(v39, 1);
    v17 = v39 - 1;
    if (v27)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_40:
    result = v25((char *)v14, v52, v5);
    v14 += v24;
    v40 = v26;
    v4 = v51;
    v53 = v40;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_48;
    if (v21 >= v48)
      break;
    v22 = *(_QWORD *)(v49 + 8 * v21);
    ++v18;
    if (v22)
      goto LABEL_16;
    v18 = v21 + 1;
    if (v21 + 1 >= v48)
      break;
    v22 = *(_QWORD *)(v49 + 8 * v18);
    if (v22)
      goto LABEL_16;
    v23 = v21 + 2;
    if (v23 >= v48)
      break;
    v22 = *(_QWORD *)(v49 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        v18 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_51;
        if (v18 >= v48)
          goto LABEL_42;
        v22 = *(_QWORD *)(v49 + 8 * v18);
        ++v23;
        if (v22)
          goto LABEL_16;
      }
    }
    v18 = v23;
LABEL_16:
    v11 = (v22 - 1) & v22;
  }
LABEL_42:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
LABEL_43:
  swift_release();
  outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  result = (uint64_t)v53;
  v41 = v53[3];
  if (v41 < 2)
    return result;
  v42 = v41 >> 1;
  v27 = __OFSUB__(v42, v17);
  v43 = v42 - v17;
  if (!v27)
  {
    v53[2] = v43;
    return result;
  }
LABEL_53:
  __break(1u);
  return result;
}

void specialized Set.hash(into:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  int64_t v21;
  unint64_t v22;
  unint64_t i;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)a1 + 8);
  v12 = a1[1];
  v30 = *a1;
  v31 = v12;
  v13 = a1[2];
  v14 = a1[3];
  v28[1] = a1;
  v32 = v13;
  v33 = v14;
  v34 = v11;
  v28[2] = Hasher._finalize()();
  v29 = a2;
  v15 = a2 + 56;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a2 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = 0;
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v22 | (v21 << 6); ; i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(v29 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 ^= v27;
    if (v18)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v21++, 1))
      goto LABEL_21;
    if (v21 >= v19)
      goto LABEL_18;
    v25 = *(_QWORD *)(v15 + 8 * v21);
    if (!v25)
      break;
LABEL_14:
    v18 = (v25 - 1) & v25;
  }
  v26 = v21 + 1;
  if (v21 + 1 >= v19)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v20);
    return;
  }
  v25 = *(_QWORD *)(v15 + 8 * v26);
  if (v25)
  {
    ++v21;
    goto LABEL_14;
  }
  while (1)
  {
    v21 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v21 >= v19)
      goto LABEL_18;
    v25 = *(_QWORD *)(v15 + 8 * v21);
    ++v26;
    if (v25)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized ActivityListPresenceContext.init(dictionary:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v24 - v10;
  if (!*(_QWORD *)(a1 + 16)
    || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x7974697669746361, 0xEB00000000734449), (v13 & 1) == 0))
  {
    v27 = 0u;
    v28 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v27);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v28 + 1))
  {
LABEL_16:
    outlined destroy of UUID?((uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v14 = v26;
  v15 = *(_QWORD *)(v26 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    v24[1] = v14;
    v16 = v14 + 40;
    v17 = MEMORY[0x1E0DEE9D8];
    v25 = v9;
    do
    {
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      else
      {
        v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v18(v11, v4, v5);
        v18(v9, v11, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
        v20 = *(_QWORD *)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 24);
        if (v20 >= v19 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
        *(_QWORD *)(v17 + 16) = v20 + 1;
        v21 = v17
            + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
            + *(_QWORD *)(v6 + 72) * v20;
        v9 = v25;
        v18((char *)v21, v25, v5);
      }
      v16 += 16;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v22 = specialized Set.init<A>(_:)(v17);
  swift_bridgeObjectRelease();
  return v22;
}

unint64_t instantiation function for generic protocol witness table for EmptyPresenceContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EmptyPresenceContext and conformance EmptyPresenceContext();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ActivityListPresenceContext()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys;
  if (!lazy protocol witness table cache variable for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivityListPresenceContext.DictionaryKeys, &type metadata for ActivityListPresenceContext.DictionaryKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ActivityListPresenceContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ActivityListPresenceContext and conformance ActivityListPresenceContext();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ActivityListPresenceContext and conformance ActivityListPresenceContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext;
  if (!lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivityListPresenceContext, &type metadata for ActivityListPresenceContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext;
  if (!lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for ActivityListPresenceContext, &type metadata for ActivityListPresenceContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext);
  }
  return result;
}

uint64_t sub_1ACE1DCB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of static PresenceContext.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for EmptyPresenceContext()
{
  return &type metadata for EmptyPresenceContext;
}

ValueMetadata *type metadata accessor for ActivityListPresenceContext()
{
  return &type metadata for ActivityListPresenceContext;
}

uint64_t storeEnumTagSinglePayload for ActivityListPresenceContext.DictionaryKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACE1DD30 + 4 * byte_1ACF633E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACE1DD50 + 4 * byte_1ACF633E5[v4]))();
}

_BYTE *sub_1ACE1DD30(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACE1DD50(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACE1DD58(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACE1DD60(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACE1DD68(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACE1DD70(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ActivityListPresenceContext.DictionaryKeys()
{
  return &type metadata for ActivityListPresenceContext.DictionaryKeys;
}

unint64_t lazy protocol witness table accessor for type Set<UUID>.Iterator and conformance Set<A>.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Set<UUID>.Iterator and conformance Set<A>.Iterator;
  if (!lazy protocol witness table cache variable for type Set<UUID>.Iterator and conformance Set<A>.Iterator)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<UUID>.Iterator);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEB328], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<UUID>.Iterator and conformance Set<A>.Iterator);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t DatagramEndpoint.participantEndpoint(topic:participantId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  Class isa;
  id v20;
  uint64_t v22;

  if ((v4[4] & 1) != 0)
  {
    v9 = v4[2];
    v10 = v4[3];
    v13 = v4;
    v11 = *v4;
    v12 = v13[1];
    outlined copy of Data?(v9, v10);
    v14 = (void *)MEMORY[0x1AF4480F4](v11, v12);
    v15 = (void *)MEMORY[0x1AF4480F4](a1, a2);
    if (v10 >> 60 == 15)
      v16 = 0;
    else
      v16 = v9;
    if (v10 >> 60 == 15)
      v17 = 0xC000000000000000;
    else
      v17 = v10;
    v18 = (void *)objc_opt_self();
    outlined copy of Data?(v9, v10);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v16, v17);
    v20 = objc_msgSend(v18, sel_createEndpointForSessionIDAlias_topic_participantIDAlias_salt_, v14, v15, a3, isa);

    NWEndpoint.init(_:)();
    return outlined consume of Data?(v9, v10);
  }
  else
  {
    v22 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a4, 1, 1, v22);
  }
}

uint64_t PluginClient.doCreateQuicConnection()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t quic_stream;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  Class isa;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for NWEndpoint();
  v4 = *(_QWORD *)(v40 - 8);
  v5 = MEMORY[0x1E0C80A78](v40);
  v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v37 - v8;
  MEMORY[0x1E0C80A78](v7);
  v39 = (char *)&v37 - v10;
  v11 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (uint64_t (*)(uint64_t))destructiveProjectEnumData for ActivitySession.Errors;
  v46 = 0;
  v17 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v42 = 1107296256;
  v43 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
  v44 = &block_descriptor_14;
  v18 = _Block_copy(&aBlock);
  v45 = partial apply for closure #2 in PluginClient.doCreateQuicConnection();
  v46 = v0;
  aBlock = v17;
  v42 = 1107296256;
  v43 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
  v44 = &block_descriptor_16_0;
  v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  quic_stream = nw_parameters_create_quic_stream();
  _Block_release(v19);
  _Block_release(v18);
  if (!quic_stream)
    return 0;
  (*(void (**)(void))(*(_QWORD *)v0 + 136))();
  outlined init with copy of PluginEndpoint((uint64_t)v16, (uint64_t)v13);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for PluginClient.Configuration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = *v13;
    v21 = v13[1];
    v23 = v13[2];
    v24 = v13[3];
    v25 = v13[4];
    v26 = (void *)objc_opt_self();
    if (v25 >> 60 == 15)
    {
      isa = (Class)MEMORY[0x1AF4480F4](v22, v21);
      swift_bridgeObjectRelease();
      v28 = objc_msgSend(v26, sel_augmentNetworkParametersForSession_participantID_parameters_, isa, v23, quic_stream);
    }
    else
    {
      outlined copy of Data._Representation(v24, v25);
      v32 = (void *)MEMORY[0x1AF4480F4](v22, v21);
      swift_bridgeObjectRelease();
      isa = Data._bridgeToObjectiveC()().super.isa;
      v33 = objc_msgSend(v26, sel_augmentNetworkParametersForSessionAlias_participantIDAlias_salt_parameters_, v32, v23, isa, quic_stream);
      outlined consume of Data?(v24, v25);

    }
    swift_unknownObjectRetain();
    NWEndpoint.init(_:)();
    v34 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, v40) != 1)
    {
      v35 = v38;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v38, v3, v34);
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v39, v35, v34);
      type metadata accessor for NWParameters();
      swift_unknownObjectRetain();
      NWParameters.__allocating_init(_:)();
      type metadata accessor for NWConnection();
      swift_allocObject();
      v31 = NWConnection.init(to:using:)();
      swift_unknownObjectRelease();
      outlined consume of Data?(v24, v25);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v35, v34);
      return v31;
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    outlined consume of Data?(v24, v25);
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for NWEndpoint?);
    return 0;
  }
  v30 = v39;
  v29 = v40;
  (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 32))(v39, v13, v40);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v30, v29);
  type metadata accessor for NWParameters();
  swift_unknownObjectRetain();
  NWParameters.__allocating_init(_:)();
  type metadata accessor for NWConnection();
  swift_allocObject();
  v31 = NWConnection.init(to:using:)();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v29);
  return v31;
}

uint64_t closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[6];

  nw_quic_connection_set_initial_max_streams_bidirectional();
  nw_quic_connection_set_initial_max_streams_unidirectional();
  v3 = nw_quic_connection_copy_sec_protocol_options();
  sec_protocol_options_add_tls_application_protocol(v3, "qrp-01");
  v4 = swift_allocObject();
  swift_weakInit();
  v7[4] = partial apply for closure #1 in closure #2 in PluginClient.doCreateQuicConnection();
  v7[5] = v4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed OS_sec_protocol_metadata, @guaranteed OS_sec_trust, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
  v7[3] = &block_descriptor_22;
  v5 = _Block_copy(v7);
  swift_release();
  sec_protocol_options_set_verify_block(v3, v5, *(dispatch_queue_t *)(a2 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue));
  _Block_release(v5);
  return swift_unknownObjectRelease();
}

void closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, NSObject *a2, void (*a3)(_QWORD), uint64_t a4)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  void (*v15)(void);
  char v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *AppleSSLPinned;
  __SecTrust *v28;
  void *v29;
  _QWORD *v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  SecTrustRef v51;
  _QWORD v52[2];
  uint64_t v53;
  SecTrustRef v54;
  uint64_t v55;
  void (*v56)(_QWORD);
  uint64_t aBlock[6];
  uint64_t v58;

  v7 = (int *)type metadata accessor for PluginClient.Configuration(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v52 - v11;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v14 = Strong;
    v15 = *(void (**)(void))(*(_QWORD *)Strong + 136);
    v15();
    v16 = v12[v7[7]];
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
    if ((v16 & 1) != 0)
    {
      v55 = a4;
      v56 = a3;
      v54 = sec_trust_copy_ref(a2);
      v17 = (void *)MEMORY[0x1AF4480F4](0x2065736E61707845, 0xEE006E6967756C50);
      v15();
      v18 = &v12[v7[8]];
      v19 = *(_QWORD *)v18;
      v20 = *((_QWORD *)v18 + 1);
      swift_bridgeObjectRetain();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
      v21 = (void *)MEMORY[0x1AF4480F4](v19, v20);
      v22 = swift_bridgeObjectRelease();
      ((void (*)(uint64_t))v15)(v22);
      v23 = &v10[v7[9]];
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      swift_bridgeObjectRetain();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for PluginClient.Configuration);
      v26 = (void *)MEMORY[0x1AF4480F4](v24, v25);
      swift_bridgeObjectRelease();
      AppleSSLPinned = (void *)SecPolicyCreateAppleSSLPinned();

      if (AppleSSLPinned)
      {
        v28 = v54;
        SecTrustSetPolicies(v54, AppleSSLPinned);
        v29 = *(void **)(v14 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
        v30 = (_QWORD *)swift_allocObject();
        v32 = v55;
        v31 = v56;
        v30[2] = v14;
        v30[3] = v31;
        v30[4] = v32;
        aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection();
        aBlock[5] = (uint64_t)v30;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed SecTrustRef, @unowned Bool, @guaranteed CFErrorRef?) -> ();
        aBlock[3] = (uint64_t)&block_descriptor_31;
        v33 = _Block_copy(aBlock);
        swift_retain();
        v34 = v29;
        swift_retain();
        swift_release();
        SecTrustEvaluateAsyncWithError(v28, v34, v33);
        _Block_release(v33);
        swift_release();

      }
      else
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)log);
        swift_retain();
        v40 = Logger.logObject.getter();
        v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = swift_slowAlloc();
          v53 = swift_slowAlloc();
          aBlock[0] = v53;
          *(_DWORD *)v42 = 136315394;
          v52[1] = v42 + 4;
          v15();
          v43 = (uint64_t *)&v12[v7[8]];
          v44 = *v43;
          v45 = v43[1];
          swift_bridgeObjectRetain();
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
          v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v46 = swift_bridgeObjectRelease();
          *(_WORD *)(v42 + 12) = 2080;
          ((void (*)(uint64_t))v15)(v46);
          v47 = (uint64_t *)&v12[v7[9]];
          v48 = *v47;
          v49 = v47[1];
          swift_bridgeObjectRetain();
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
          v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1ACCCC000, v40, v41, "Cannot create pinning policy, hostname=%s, leafMarkerOID=%s", (uint8_t *)v42, 0x16u);
          v50 = v53;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v50, -1, -1);
          MEMORY[0x1AF44981C](v42, -1, -1);

        }
        else
        {

          swift_release();
        }
        v51 = v54;
        v56(0);
        swift_release();

      }
    }
    else
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)log);
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_1ACCCC000, v36, v37, "Server cert validation disabled", v38, 2u);
        MEMORY[0x1AF44981C](v38, -1, -1);
      }

      a3(1);
      swift_release();
    }
  }
  else
  {
    ((void (*)(void))a3)();
  }
}

void closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, char a2, void *a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;

  v11 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v14 = one-time initialization token for log;
    v15 = a3;
    if (v14 != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)log);
    v17 = v15;
    swift_retain();
    v18 = v17;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      v22 = swift_slowAlloc();
      v43 = a5;
      v23 = v22;
      v41 = swift_slowAlloc();
      v45 = v41;
      *(_DWORD *)v23 = 136315650;
      v40 = v21;
      v24 = *(void (**)(void))(*(_QWORD *)a4 + 136);
      v39 = v19;
      v24();
      v25 = (uint64_t *)&v13[*(int *)(v11 + 32)];
      v26 = *v25;
      v27 = v25[1];
      swift_bridgeObjectRetain();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for PluginClient.Configuration);
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v45);
      v42 = a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v28 = swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      ((void (*)(uint64_t))v24)(v28);
      v29 = (uint64_t *)&v13[*(int *)(v11 + 36)];
      v30 = *v29;
      v31 = v29[1];
      swift_bridgeObjectRetain();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for PluginClient.Configuration);
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      v44 = (uint64_t)v18;
      type metadata accessor for CFErrorRef(0);
      v32 = v18;
      v33 = String.init<A>(reflecting:)();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v35 = v39;
      _os_log_impl(&dword_1ACCCC000, v39, (os_log_type_t)v40, "Failed to validate trust, hostname=%s, leafMarkerOID=%s: %s", (uint8_t *)v23, 0x20u);
      v36 = v41;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v36, -1, -1);
      v37 = v23;
      a5 = v43;
      MEMORY[0x1AF44981C](v37, -1, -1);

    }
    else
    {

      swift_release();
    }
    a5(0);

  }
  else
  {
    a5(a2 & 1);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed SecTrustRef, @unowned Bool, @guaranteed CFErrorRef?) -> ()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  swift_retain();
  v9 = a2;
  v8 = a4;
  v7(v9, a3, a4);
  swift_release();

}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_sec_protocol_metadata, @guaranteed OS_sec_trust, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  void (*v6)(uint64_t, uint64_t, uint64_t (*)(char), uint64_t);
  void *v7;
  uint64_t v8;

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(char), uint64_t))(a1 + 32);
  v7 = _Block_copy(aBlock);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6(a2, a3, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> (), v8);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t PluginClient.createQuicConnection()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)log);
  swift_retain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v17 = v11;
    *(_DWORD *)v10 = 136315138;
    (*(void (**)(void))(*(_QWORD *)v0 + 136))();
    outlined init with copy of PluginEndpoint((uint64_t)v3, (uint64_t)v6);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for PluginClient.Configuration);
    v12 = PluginEndpoint.description.getter();
    v14 = v13;
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v8, v9, "Creating QUIC connection to %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v11, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
  swift_allocObject();
  swift_retain();
  return Future.init(_:)();
}

uint64_t closure #1 in PluginClient.createQuicConnection()(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (PluginClient.doCreateQuicConnection()())
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v42 = a1;
    v43 = a2;
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)log);
    swift_retain_n();
    swift_retain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v41 = swift_slowAlloc();
      v45 = v41;
      *(_DWORD *)v18 = 134218242;
      v44 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v19 = swift_release();
      *(_WORD *)(v18 + 12) = 2080;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 136))(v19);
      outlined init with copy of PluginEndpoint((uint64_t)v11, (uint64_t)v14);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for PluginClient.Configuration);
      v20 = PluginEndpoint.description.getter();
      v22 = v21;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v16, v17, "QUIC connection C%llu created for endpoint: %s", (uint8_t *)v18, 0x16u);
      v23 = v41;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v23, -1, -1);
      MEMORY[0x1AF44981C](v18, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_release();
    }
    v34 = swift_allocObject();
    swift_weakInit();
    v35 = (_QWORD *)swift_allocObject();
    v35[2] = v34;
    v35[3] = a3;
    v36 = v43;
    v35[4] = v42;
    v35[5] = v36;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in closure #1 in PluginClient.createQuicConnection());
    NWConnection.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    if (*(_QWORD *)(a3 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter))
    {
      v37 = NWConnection.startDataTransferReport()();
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 216))(v37);
    }
    NWConnection.start(queue:)();
    return swift_release();
  }
  else
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)log);
    swift_retain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v43 = a2;
      v28 = (uint8_t *)v27;
      v29 = swift_slowAlloc();
      v41 = v29;
      v45 = v29;
      v42 = a1;
      *(_DWORD *)v28 = 136315138;
      v40 = v28 + 4;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 136))(v29);
      outlined init with copy of PluginEndpoint((uint64_t)v11, (uint64_t)v14);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for PluginClient.Configuration);
      v30 = PluginEndpoint.description.getter();
      v32 = v31;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v45);
      a1 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v25, v26, "Failed to create NWConnection for QUIC connection to %s", v28, 0xCu);
      v33 = v41;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v33, -1, -1);
      MEMORY[0x1AF44981C](v28, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v39 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v8, 1, 3, v39);
    swift_storeEnumTagMultiPayload();
    a1(v8);
    return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
}

void closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t Strong;
  uint64_t v41;
  int v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  NSObject *v47;
  int v48;
  uint64_t v49;
  void (*v50)(uint64_t *, char *, uint64_t);
  uint64_t v51;
  void (*v52)(os_log_t, char *, uint64_t);
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  void (*v67)(os_log_t, char *, uint64_t);
  os_log_t v68;
  NSObject *v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  const char *v87;
  char *v88;
  unint64_t v89;
  os_log_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(os_log_t, uint64_t);
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  os_log_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  _QWORD *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  os_log_t v121;
  void (*v122)(char *, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  os_log_t v130;
  void (*v131)(os_log_t, char *, uint64_t);
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  void (*v136)(uint64_t);
  uint64_t v137;
  uint64_t v138;
  char *v139;

  v132 = a3;
  v133 = a5;
  v136 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v128 = (uint64_t)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v131 = (void (*)(os_log_t, char *, uint64_t))((char *)&v120 - v10);
  v11 = MEMORY[0x1E0C80A78](v9);
  v124 = (uint64_t *)((char *)&v120 - v12);
  MEMORY[0x1E0C80A78](v11);
  v125 = (char *)&v120 - v13;
  v14 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for NWError();
  v20 = *(_QWORD *)(v137 - 8);
  v21 = MEMORY[0x1E0C80A78](v137);
  v23 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v120 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v126 = (char *)&v120 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v127 = (char *)&v120 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v130 = (os_log_t)((char *)&v120 - v32);
  MEMORY[0x1E0C80A78](v31);
  v129 = (char *)&v120 - v33;
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v134);
  v135 = (uint64_t *)((char *)&v120 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v123 = type metadata accessor for NWProtocolQUIC.Metadata.KeepAliveBehavior();
  v121 = *(os_log_t *)(v123 - 8);
  MEMORY[0x1E0C80A78](v123);
  v122 = (void (*)(char *, uint64_t, uint64_t))((char *)&v120 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = type metadata accessor for NWConnection.State();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v120 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v41 = Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v39, a1, v36);
    v42 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v39, v36);
    if (v42 == *MEMORY[0x1E0CCE5C8])
    {
      (*(void (**)(char *, uint64_t))(v37 + 96))(v39, v36);
      v43 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v44 = v137;
      v43(v26, v39, v137);
      if (one-time initialization token for log != -1)
        swift_once();
      v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)log);
      v46 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
      v46(v23, v26, v44);
      swift_retain();
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, (os_log_type_t)v48))
      {
        LODWORD(v129) = v48;
        v130 = v47;
        v49 = swift_slowAlloc();
        v125 = (char *)swift_slowAlloc();
        v139 = v125;
        *(_DWORD *)v49 = 134218242;
        v138 = NWConnection.identifier.getter();
        v124 = (uint64_t *)&v139;
        v50 = (void (*)(uint64_t *, char *, uint64_t))v46;
        v51 = v137;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v123 = v41;
        swift_release();
        *(_WORD *)(v49 + 12) = 2080;
        v52 = (void (*)(_QWORD, _QWORD, _QWORD))v131;
        v50((uint64_t *)v131, v23, v51);
        (*(void (**)(void (*)(os_log_t, char *, uint64_t), _QWORD, uint64_t, uint64_t))(v20 + 56))((void (*)(os_log_t, char *, uint64_t))v52, 0, 1, v51);
        v53 = v128;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v52, v128, &demangling cache variable for type metadata for NWError?);
        v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v53, 1, v51);
        v132 = (char *)v50;
        if (v54 == 1)
        {
          v55 = 7104878;
          v56 = 0xE300000000000000;
        }
        else
        {
          v88 = v127;
          v43(v127, (char *)v53, v51);
          v50((uint64_t *)v126, v88, v51);
          v55 = String.init<A>(reflecting:)();
          v56 = v89;
          (*(void (**)(char *, uint64_t))(v20 + 8))(v88, v51);
        }
        outlined destroy of UUID?((uint64_t)v131, &demangling cache variable for type metadata for NWError?);
        v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)&v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v81 = *(void (**)(char *, uint64_t))(v20 + 8);
        v81(v23, v51);
        v90 = v130;
        _os_log_impl(&dword_1ACCCC000, v130, (os_log_type_t)v129, "QUIC connection (C%llu)  in waiting state, error: %s", (uint8_t *)v49, 0x16u);
        v91 = v125;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v91, -1, -1);
        MEMORY[0x1AF44981C](v49, -1, -1);

        v44 = v51;
        v46 = (void (*)(char *, char *, uint64_t))v132;
      }
      else
      {
        swift_release();
        v81 = *(void (**)(char *, uint64_t))(v20 + 8);
        v81(v23, v44);

      }
      v92 = (uint64_t)v135;
      v46((char *)v135, v26, v44);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v92, 0, 3, v44);
      swift_storeEnumTagMultiPayload();
      v136(v92);
      outlined destroy of UUID?(v92, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
      NWConnection.cancel()();
      swift_release();
      v81(v26, v44);
      return;
    }
    if (v42 == *MEMORY[0x1E0CCE5C0])
    {
      (*(void (**)(char *, uint64_t))(v37 + 96))(v39, v36);
      v61 = v20;
      v62 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
      v63 = v129;
      v64 = v137;
      v122 = v62;
      v62(v129, (uint64_t)v39, v137);
      v65 = (void (*)(_QWORD, _QWORD, _QWORD))v132;
      if (one-time initialization token for log != -1)
        swift_once();
      v66 = type metadata accessor for Logger();
      __swift_project_value_buffer(v66, (uint64_t)log);
      v67 = *(void (**)(os_log_t, char *, uint64_t))(v61 + 16);
      v68 = v130;
      v67(v130, v63, v64);
      swift_retain_n();
      swift_retain();
      v69 = Logger.logObject.getter();
      LODWORD(v128) = static os_log_type_t.error.getter();
      v70 = os_log_type_enabled(v69, (os_log_type_t)v128);
      v131 = v67;
      if (v70)
      {
        v121 = v69;
        v71 = swift_slowAlloc();
        v120 = swift_slowAlloc();
        v139 = (char *)v120;
        *(_DWORD *)v71 = 134218498;
        v138 = NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v123 = v41;
        v72 = swift_release();
        *(_WORD *)(v71 + 12) = 2080;
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 136))(v72);
        outlined init with copy of PluginEndpoint((uint64_t)v16, (uint64_t)v19);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for PluginClient.Configuration);
        v73 = PluginEndpoint.description.getter();
        v75 = v74;
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
        v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, (uint64_t *)&v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v76 = v130;
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v71 + 22) = 2080;
        v77 = (uint64_t)v125;
        v67((os_log_t)v125, (char *)v76, v64);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v77, 0, 1, v64);
        v78 = (uint64_t)v124;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v77, (uint64_t)v124, &demangling cache variable for type metadata for NWError?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v78, 1, v64) == 1)
        {
          v79 = 7104878;
          v80 = 0xE300000000000000;
        }
        else
        {
          v95 = v127;
          v122(v127, v78, v64);
          v67((os_log_t)v126, v95, v64);
          v79 = String.init<A>(reflecting:)();
          v80 = v96;
          v97 = v95;
          v76 = v130;
          (*(void (**)(char *, uint64_t))(v61 + 8))(v97, v64);
        }
        outlined destroy of UUID?(v77, &demangling cache variable for type metadata for NWError?);
        v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, (uint64_t *)&v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v93 = *(void (**)(os_log_t, uint64_t))(v61 + 8);
        v93(v76, v64);
        v98 = v121;
        _os_log_impl(&dword_1ACCCC000, v121, (os_log_type_t)v128, "QUIC connection to (C%llu) %s failed, error: %s", (uint8_t *)v71, 0x20u);
        v99 = v120;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v99, -1, -1);
        MEMORY[0x1AF44981C](v71, -1, -1);

        v63 = v129;
      }
      else
      {
        swift_release_n();
        swift_release();
        v93 = *(void (**)(os_log_t, uint64_t))(v61 + 8);
        v93(v68, v64);

      }
      v100 = (uint64_t)v135;
      v131((os_log_t)v135, v63, v64);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v100, 0, 3, v64);
      swift_storeEnumTagMultiPayload();
      v136(v100);
      outlined destroy of UUID?(v100, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
      NWConnection.cancel()();
      swift_release();
      v93((os_log_t)v63, v64);
      return;
    }
    v82 = v132;
    if (v42 == *MEMORY[0x1E0CCE5B8])
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v83 = type metadata accessor for Logger();
      __swift_project_value_buffer(v83, (uint64_t)log);
      swift_retain();
      v84 = Logger.logObject.getter();
      v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v86 = 134217984;
        v139 = (char *)NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        v87 = "QUIC connection (C%llu) in setup state";
LABEL_47:
        _os_log_impl(&dword_1ACCCC000, v84, v85, v87, v86, 0xCu);
        MEMORY[0x1AF44981C](v86, -1, -1);
        swift_release();

        return;
      }
      goto LABEL_48;
    }
    if (v42 == *MEMORY[0x1E0CCE5D8])
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v94 = type metadata accessor for Logger();
      __swift_project_value_buffer(v94, (uint64_t)log);
      swift_retain();
      v84 = Logger.logObject.getter();
      v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v86 = 134217984;
        v139 = (char *)NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        v87 = "QUIC connection (C%llu) in preparing state";
        goto LABEL_47;
      }
LABEL_48:

      swift_release_n();
      return;
    }
    if (v42 == *MEMORY[0x1E0CCE5B0])
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v101 = type metadata accessor for Logger();
      __swift_project_value_buffer(v101, (uint64_t)log);
      swift_retain();
      v102 = Logger.logObject.getter();
      v103 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v102, v103))
      {
        v104 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v104 = 134217984;
        v139 = (char *)NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1ACCCC000, v102, v103, "QUIC connection (C%llu) in ready state", v104, 0xCu);
        MEMORY[0x1AF44981C](v104, -1, -1);

      }
      else
      {

        swift_release();
      }
      v106 = *(_QWORD *)&v82[OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter];
      if (v106)
      {
        v108 = *(_QWORD *)&v82[OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag];
        v107 = *(_QWORD *)&v82[OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag + 8];
        v109 = *(void **)(v106 + 16);
        v110 = (_QWORD *)swift_allocObject();
        v110[2] = v106;
        v110[3] = v108;
        v110[4] = v107;
        swift_retain_n();
        swift_bridgeObjectRetain();
        v111 = v109;
        NWConnection.requestEstablishmentReport(queue:completion:)();
        swift_release();

        swift_release();
      }
      type metadata accessor for NWProtocolQUIC();
      static NWProtocolQUIC.definition.getter();
      v112 = NWConnection.metadata(definition:)();
      swift_release();
      if (v112)
      {
        type metadata accessor for NWProtocolQUIC.Metadata();
        if (swift_dynamicCastClass())
        {
          v114 = v122;
          v113 = v123;
          *(_QWORD *)v122 = 10;
          ((void (*)(_QWORD, _QWORD, uint64_t))v121[13].isa)(v114, *MEMORY[0x1E0CCE7E8], v113);
          swift_retain();
          dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.setter();
        }
        swift_release();
      }
      v119 = (uint64_t)v135;
      *v135 = v41;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v136(v119);
      swift_release();
      swift_release();
      outlined destroy of UUID?(v119, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    }
    else
    {
      if (v42 == *MEMORY[0x1E0CCE5D0])
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v105 = type metadata accessor for Logger();
        __swift_project_value_buffer(v105, (uint64_t)log);
        swift_retain();
        v84 = Logger.logObject.getter();
        v85 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v84, v85))
        {
          v86 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v86 = 134217984;
          v139 = (char *)NWConnection.identifier.getter();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          v87 = "QUIC connection (C%llu) in cancelled state";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (one-time initialization token for log != -1)
        swift_once();
      v115 = type metadata accessor for Logger();
      __swift_project_value_buffer(v115, (uint64_t)log);
      swift_retain();
      v116 = Logger.logObject.getter();
      v117 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v116, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v118 = 134217984;
        v139 = (char *)NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1ACCCC000, v116, v117, "QUIC connection (C%llu) in unknown state", v118, 0xCu);
        MEMORY[0x1AF44981C](v118, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
    }
  }
  else
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)log);
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_1ACCCC000, v58, v59, "QUIC connection deallocated when getting state update callback", v60, 2u);
      MEMORY[0x1AF44981C](v60, -1, -1);
    }

  }
}

uint64_t closure #1 in closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWConnection.EstablishmentReport();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return outlined destroy of UUID?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(v14, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t PluginClient.createQuicStream(quicConnection:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)log);
  swift_retain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v23 = a1;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v25 = v15;
    *(_DWORD *)v14 = 136315138;
    (*(void (**)(void))(*(_QWORD *)v1 + 136))();
    outlined init with copy of PluginEndpoint((uint64_t)v6, (uint64_t)v9);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for PluginClient.Configuration);
    v16 = PluginEndpoint.description.getter();
    v18 = v17;
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v11, v12, "Creating QUIC stream to %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v15, -1, -1);
    v19 = v14;
    a1 = v23;
    MEMORY[0x1AF44981C](v19, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  return Future.init(_:)();
}

uint64_t closure #1 in PluginClient.createQuicStream(quicConnection:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a4;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v36);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  NWConnection.parameters.getter();
  if (one-time initialization token for definition != -1)
    swift_once();
  type metadata accessor for NWProtocolFramer.Options();
  swift_allocObject();
  swift_retain();
  v14 = NWProtocolFramer.Options.init(definition:)();
  NWParameters.defaultProtocolStack.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1ACF59E40;
  *(_QWORD *)(v15 + 32) = v14;
  v39 = v15;
  specialized Array._endMutation()();
  swift_retain();
  dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.setter();
  swift_release();
  type metadata accessor for NWConnection();
  swift_retain();
  swift_retain();
  if (NWConnection.__allocating_init(connection:parameters:)())
  {
    v16 = swift_allocObject();
    swift_weakInit();
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = v16;
    v17[3] = a1;
    v17[4] = a2;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:));
    NWConnection.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    NWConnection.start(queue:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    v35 = a1;
    if (one-time initialization token for log != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    v20 = v37;
    swift_retain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v34 = a2;
      v24 = (uint8_t *)v23;
      v33 = swift_slowAlloc();
      v39 = v33;
      *(_DWORD *)v24 = 136315138;
      v31[1] = v24 + 4;
      v32 = v24;
      (*(void (**)(void))(*(_QWORD *)v20 + 136))();
      outlined init with copy of PluginEndpoint((uint64_t)v10, (uint64_t)v13);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for PluginClient.Configuration);
      v25 = PluginEndpoint.description.getter();
      v27 = v26;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v28 = v32;
      _os_log_impl(&dword_1ACCCC000, v21, v22, "Failed to create NWConnection for QUIC stream to %s", v32, 0xCu);
      v29 = v33;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v29, -1, -1);
      MEMORY[0x1AF44981C](v28, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v30 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v7, 2, 3, v30);
    swift_storeEnumTagMultiPayload();
    v35(v7);
    swift_release();
    swift_release();
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
}

void closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t Strong;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  NSObject *v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  NSObject *v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  const char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  void (*v100)(uint64_t *, char *, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void (*v105)(uint64_t);
  uint64_t v106;
  uint64_t v107;

  v104 = a4;
  v105 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v101 = (char *)&v92 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v95 = (uint64_t)&v92 - v12;
  MEMORY[0x1E0C80A78](v11);
  v98 = (char *)&v92 - v13;
  v14 = type metadata accessor for NWError();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v92 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v96 = (char *)&v92 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v97 = (char *)&v92 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v99 = (void (*)(char *, char *, uint64_t))((char *)&v92 - v27);
  MEMORY[0x1E0C80A78](v26);
  v100 = (void (*)(uint64_t *, char *, uint64_t))((char *)&v92 - v28);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v102);
  v103 = (uint64_t *)((char *)&v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = type metadata accessor for NWConnection.State();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v92 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return;
  v35 = Strong;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, a1, v30);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v33, v30);
  if (v36 == *MEMORY[0x1E0CCE5C8])
  {
    (*(void (**)(char *, uint64_t))(v31 + 96))(v33, v30);
    v37 = v15;
    v99 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v99(v21, v33, v14);
    if (one-time initialization token for log != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)log);
    v39 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v39(v18, v21, v14);
    swift_retain();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.default.getter();
    v42 = os_log_type_enabled(v40, (os_log_type_t)v41);
    v100 = (void (*)(uint64_t *, char *, uint64_t))v39;
    if (v42)
    {
      LODWORD(v98) = v41;
      v43 = swift_slowAlloc();
      v95 = swift_slowAlloc();
      v107 = v95;
      *(_DWORD *)v43 = 134218242;
      v106 = NWConnection.identifier.getter();
      v93 = &v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v94 = v35;
      swift_release();
      *(_WORD *)(v43 + 12) = 2080;
      v44 = (uint64_t)v101;
      v39(v101, v18, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v44, 0, 1, v14);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v44, (uint64_t)v8, &demangling cache variable for type metadata for NWError?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v8, 1, v14) == 1)
      {
        v45 = 7104878;
        v46 = 0xE300000000000000;
      }
      else
      {
        v68 = v97;
        v99(v97, v8, v14);
        v39(v96, v68, v14);
        v45 = String.init<A>(reflecting:)();
        v46 = v69;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v68, v14);
      }
      outlined destroy of UUID?((uint64_t)v101, &demangling cache variable for type metadata for NWError?);
      v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v62 = *(void (**)(char *, uint64_t))(v37 + 8);
      v62(v18, v14);
      _os_log_impl(&dword_1ACCCC000, v40, (os_log_type_t)v98, "QUIC stream (C%llu) in waiting state, error: %s", (uint8_t *)v43, 0x16u);
      v70 = v95;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v70, -1, -1);
      MEMORY[0x1AF44981C](v43, -1, -1);

    }
    else
    {
      swift_release();
      v62 = *(void (**)(char *, uint64_t))(v37 + 8);
      v62(v18, v14);

    }
    v71 = (uint64_t)v103;
    v100(v103, v21, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v71, 0, 3, v14);
    swift_storeEnumTagMultiPayload();
    v105(v71);
    outlined destroy of UUID?(v71, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    NWConnection.cancel()();
    swift_release();
    v62(v21, v14);
    return;
  }
  if (v36 == *MEMORY[0x1E0CCE5C0])
  {
    (*(void (**)(char *, uint64_t))(v31 + 96))(v33, v30);
    v47 = v15;
    v48 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v49 = (char *)v100;
    v48((char *)v100, v33, v14);
    if (one-time initialization token for log != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)log);
    v51 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v52 = (char *)v99;
    v51((char *)v99, v49, v14);
    swift_retain();
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, (os_log_type_t)v54))
    {
      v92 = (void (*)(char *, uint64_t, uint64_t))v48;
      LODWORD(v101) = v54;
      v55 = v52;
      v56 = swift_slowAlloc();
      v93 = (uint64_t *)swift_slowAlloc();
      v107 = (uint64_t)v93;
      *(_DWORD *)v56 = 134218242;
      v57 = v47;
      v106 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v94 = v35;
      swift_release();
      *(_WORD *)(v56 + 12) = 2080;
      v58 = (uint64_t)v98;
      v51(v98, v55, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v58, 0, 1, v14);
      v59 = v95;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v58, v95, &demangling cache variable for type metadata for NWError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v59, 1, v14) == 1)
      {
        v60 = 7104878;
        v61 = 0xE300000000000000;
      }
      else
      {
        v74 = v97;
        v92(v97, v59, v14);
        v51(v96, v74, v14);
        v60 = String.init<A>(reflecting:)();
        v61 = v75;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v74, v14);
      }
      outlined destroy of UUID?((uint64_t)v98, &demangling cache variable for type metadata for NWError?);
      v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v72 = *(void (**)(char *, uint64_t))(v57 + 8);
      v72((char *)v99, v14);
      _os_log_impl(&dword_1ACCCC000, v53, (os_log_type_t)v101, "QUIC stream (C%llu) failed, error: %s", (uint8_t *)v56, 0x16u);
      v76 = v93;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v76, -1, -1);
      MEMORY[0x1AF44981C](v56, -1, -1);

      v47 = v57;
      v49 = (char *)v100;
    }
    else
    {
      swift_release();
      v72 = *(void (**)(char *, uint64_t))(v47 + 8);
      v72(v52, v14);

    }
    v77 = (uint64_t)v103;
    v51((char *)v103, v49, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v77, 0, 3, v14);
    swift_storeEnumTagMultiPayload();
    v105(v77);
    outlined destroy of UUID?(v77, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    NWConnection.cancel()();
    swift_release();
    v72(v49, v14);
    return;
  }
  if (v36 == *MEMORY[0x1E0CCE5B8])
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)log);
    swift_retain();
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v66 = 134217984;
      v107 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      v67 = "QUIC stream (C%llu) in setup state";
LABEL_42:
      _os_log_impl(&dword_1ACCCC000, v64, v65, v67, v66, 0xCu);
      MEMORY[0x1AF44981C](v66, -1, -1);
      swift_release();

      return;
    }
    goto LABEL_43;
  }
  if (v36 == *MEMORY[0x1E0CCE5D8])
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)log);
    swift_retain();
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v66 = 134217984;
      v107 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      v67 = "QUIC stream (C%llu) in preparing state";
      goto LABEL_42;
    }
LABEL_43:

    swift_release_n();
    return;
  }
  if (v36 == *MEMORY[0x1E0CCE5B0])
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v78 = type metadata accessor for Logger();
    __swift_project_value_buffer(v78, (uint64_t)log);
    swift_retain();
    v79 = Logger.logObject.getter();
    v80 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v81 = 134217984;
      v107 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1ACCCC000, v79, v80, "QUIC stream (C%llu) in ready state", v81, 0xCu);
      MEMORY[0x1AF44981C](v81, -1, -1);

    }
    else
    {

      swift_release();
    }
    type metadata accessor for NWProtocolQUIC();
    static NWProtocolQUIC.definition.getter();
    v83 = NWConnection.metadata(definition:)();
    swift_release();
    if (v83)
    {
      type metadata accessor for NWProtocolQUIC.Metadata();
      if (swift_dynamicCastClass())
      {
        swift_retain();
        v84 = Logger.logObject.getter();
        v85 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v84, v85))
        {
          v86 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v86 = 134217984;
          v107 = dispatch thunk of NWProtocolQUIC.Metadata.streamIdentifier.getter();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_1ACCCC000, v84, v85, "QUIC stream identifier is %llu", v86, 0xCu);
          MEMORY[0x1AF44981C](v86, -1, -1);
          swift_release();

        }
        else
        {

          swift_release_n();
        }
      }
      else
      {
        swift_release();
      }
    }
    v91 = (uint64_t)v103;
    *v103 = v35;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v105(v91);
    swift_release();
    outlined destroy of UUID?(v91, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
  else
  {
    if (v36 == *MEMORY[0x1E0CCE5D0])
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v82 = type metadata accessor for Logger();
      __swift_project_value_buffer(v82, (uint64_t)log);
      swift_retain();
      v64 = Logger.logObject.getter();
      v65 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v66 = 134217984;
        v107 = NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        v67 = "QUIC stream (C%llu) in cancelled state";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (one-time initialization token for log != -1)
      swift_once();
    v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)log);
    swift_retain();
    v88 = Logger.logObject.getter();
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v90 = 134217984;
      v107 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1ACCCC000, v88, v89, "QUIC stream (C%llu) in unknown state", v90, 0xCu);
      MEMORY[0x1AF44981C](v90, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  }
}

uint64_t partial apply for closure #1 in PluginClient.createQuicConnection()(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  return closure #1 in PluginClient.createQuicConnection()(a1, a2, v2);
}

uint64_t sub_1ACE22318()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginClient.createQuicStream(quicConnection:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t v2;

  return closure #1 in PluginClient.createQuicStream(quicConnection:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for PluginConnectError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for NWError();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t destroy for PluginConnectError(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for NWError();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 3, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for PluginConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *assignWithCopy for PluginConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

void *initializeWithTake for PluginConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *assignWithTake for PluginConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginConnectError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE227B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for NWError();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4)
    return v5 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PluginConnectError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE22808(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 3);
  else
    v5 = 0;
  v6 = type metadata accessor for NWError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for PluginConnectError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
}

uint64_t destructiveInjectEnumTag for PluginConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 3, v4);
}

uint64_t type metadata accessor for PluginConnectError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PluginConnectError;
  if (!type metadata singleton initialization cache for PluginConnectError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PluginConnectError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1ACE22964()
{
  return objectdestroy_5Tm_1((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void partial apply for closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1ACE2297C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in PluginClient.createQuicConnection()(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1ACE229BC()
{
  return objectdestroy_5Tm_1((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in closure #1 in PluginClient.createQuicConnection()(a1, v1[2], v1[3], v1[4]);
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PluginClient.doCreateQuicConnection()(a1, v1);
}

uint64_t sub_1ACE229E4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, NSObject *a2, void (*a3)(_QWORD), uint64_t a4)
{
  closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(a1, a2, a3, a4);
}

uint64_t sub_1ACE22A10()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_1ACE22A48()
{
  return objectdestroy_5Tm_1((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_5Tm_1(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;

  closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(_QWORD))(v3 + 24), *(_QWORD *)(v3 + 32));
}

id CPApplicationMonitor.appPolicyManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPApplicationMonitor_appPolicyManager);
}

uint64_t CPApplicationMonitor.applicationController.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR___CPApplicationMonitor_applicationController, a1);
}

uint64_t key path setter for CPApplicationMonitor.appVisibilityMonitor : CPApplicationMonitor(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor);
  swift_beginAccess();
  *v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t CPApplicationMonitor.appVisibilityMonitor.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t CPApplicationMonitor.__allocating_init(applicationController:queue:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  id v6;
  uint64_t ObjectType;
  void *v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  ObjectType = swift_getObjectType();
  if (one-time initialization token for shared != -1)
    swift_once();
  v8 = (void *)static CPApplicationPolicyManager.shared;
  v11[3] = type metadata accessor for CPApplicationController();
  v11[4] = &protocol witness table for CPApplicationController;
  v11[0] = a1;
  v9 = (*(uint64_t (**)(void *, _QWORD *, uint64_t))(ObjectType + 136))(v8, v11, a2);
  swift_deallocPartialClassInstance();
  return v9;
}

uint64_t CPApplicationMonitor.init(applicationController:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  void *v5;
  uint64_t v6;
  _QWORD v8[5];

  ObjectType = swift_getObjectType();
  if (one-time initialization token for shared != -1)
    swift_once();
  v5 = (void *)static CPApplicationPolicyManager.shared;
  v8[3] = type metadata accessor for CPApplicationController();
  v8[4] = &protocol witness table for CPApplicationController;
  v8[0] = a1;
  v6 = (*(uint64_t (**)(void *, _QWORD *, uint64_t))(ObjectType + 136))(v5, v8, a2);
  swift_deallocPartialClassInstance();
  return v6;
}

id CPApplicationMonitor.__allocating_init(applicationPolicyManager:applicationController:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  id v9;
  objc_super v11;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *(_QWORD *)&v7[OBJC_IVAR___CPApplicationMonitor_appPolicyManager] = a1;
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)&v7[OBJC_IVAR___CPApplicationMonitor_applicationController]);
  *(_QWORD *)&v7[OBJC_IVAR___CPApplicationMonitor_queue] = a3;
  v11.receiver = v7;
  v11.super_class = v3;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v9;
}

id CPApplicationMonitor.init(applicationPolicyManager:applicationController:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v6;
  id v7;
  objc_super v9;

  v6 = &v3[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)&v3[OBJC_IVAR___CPApplicationMonitor_appPolicyManager] = a1;
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)&v3[OBJC_IVAR___CPApplicationMonitor_applicationController]);
  *(_QWORD *)&v3[OBJC_IVAR___CPApplicationMonitor_queue] = a3;
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for CPApplicationMonitor();
  v7 = objc_msgSendSuper2(&v9, sel_init);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v7;
}

id CPApplicationMonitor.__deallocating_deinit()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t ObjectType;
  void (*v4)(uint64_t, uint64_t);
  objc_super v6;

  v1 = &v0[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  swift_beginAccess();
  if (*(_QWORD *)v1)
  {
    v2 = *((_QWORD *)v1 + 1);
    ObjectType = swift_getObjectType();
    v4 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
    swift_unknownObjectRetain();
    v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CPApplicationMonitor();
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

Swift::Void __swiftcall CPApplicationMonitor.createAppVisibilityMonitorIfNecessary()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)((char *)v1 + OBJC_IVAR___CPApplicationMonitor_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  v3 = MEMORY[0x1E0DEEDD8];
  v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(v8);
  swift_unknownObjectRelease();
  if (v9)
    return;
  if (one-time initialization token for default != -1)
    goto LABEL_9;
LABEL_4:
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1ACCCC000, v11, v12, "Creating process monitor since conversation was joined", v13, 2u);
    MEMORY[0x1AF44981C](v13, -1, -1);
  }

  v14 = (*(uint64_t (**)(void))((*(_QWORD *)v3 & *v1) + 0xA8))();
  v16 = v15;
  v17 = (_QWORD *)((char *)v1 + OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor);
  swift_beginAccess();
  *v17 = v14;
  v17[1] = v16;
  swift_unknownObjectRelease();
}

uint64_t CPApplicationMonitor.createAppVisibilityMonitor()()
{
  uint64_t v0;
  void *v1;
  _BYTE v3[40];

  v1 = *(void **)(v0 + OBJC_IVAR___CPApplicationMonitor_appPolicyManager);
  outlined init with copy of UserNotificationCenter(v0 + OBJC_IVAR___CPApplicationMonitor_applicationController, (uint64_t)v3);
  type metadata accessor for RunningBoardAppVisibilityMonitor();
  swift_allocObject();
  return RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(v1, (uint64_t)v3);
}

id CPApplicationMonitor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CPApplicationMonitor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t AppVisibilityMonitor.applicationType(forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  id v15;
  unsigned __int8 v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 16))(v18, a3, a4);
  v8 = v19;
  v9 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a2, v8, v9);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  if ((v10 & 1) == 0)
    return 2;
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v12 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x98))();

  if (*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v14 & 1) != 0)
    {
      v15 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = objc_msgSend(v15, sel_BOOLValue);

      return (v16 & 1) != 0;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for CPApplicationMonitor()
{
  return objc_opt_self();
}

uint64_t specialized CPApplicationMonitor.conversationManager(_:conversationChanged:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD v61[3];
  char *v62;
  uint64_t v63;
  int64_t v64;
  void *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
  v3 = MEMORY[0x1E0C80A78](v68);
  v67 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v61 - v6;
  MEMORY[0x1E0C80A78](v5);
  v66 = (char *)v61 - v8;
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (_QWORD *)((char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = v1;
  v13 = *(void **)&v1[OBJC_IVAR___CPApplicationMonitor_queue];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    v15 = objc_msgSend(a1, sel_conversationsByUUID);
    v16 = type metadata accessor for UUID();
    v17 = type metadata accessor for TUConversation();
    v61[1] = lazy protocol witness table accessor for type UUID and conformance UUID();
    v61[2] = v17;
    v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = *(_QWORD *)(v18 + 64);
    v63 = v18 + 64;
    v20 = 1 << *(_BYTE *)(v18 + 32);
    v21 = -1;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    v10 = v21 & v19;
    v64 = (unint64_t)(v20 + 63) >> 6;
    v69 = v18;
    swift_bridgeObjectRetain();
    v22 = 0;
    v65 = a1;
    while (1)
    {
      if (v10)
      {
        v23 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v24 = v23 | (v22 << 6);
      }
      else
      {
        v37 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
          break;
        }
        if (v37 >= v64)
        {
LABEL_28:
          swift_release();
          v51 = swift_bridgeObjectRelease();
          v7 = v62;
          v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v62) + 0x70);
          v52 = ((uint64_t (*)(uint64_t))v10)(v51);
          result = swift_unknownObjectRelease();
          if (!v52)
            return result;
          if (one-time initialization token for default == -1)
            goto LABEL_30;
          goto LABEL_40;
        }
        v38 = *(_QWORD *)(v63 + 8 * v37);
        ++v22;
        if (!v38)
        {
          v22 = v37 + 1;
          if (v37 + 1 >= v64)
            goto LABEL_28;
          v38 = *(_QWORD *)(v63 + 8 * v22);
          if (!v38)
          {
            v22 = v37 + 2;
            if (v37 + 2 >= v64)
              goto LABEL_28;
            v38 = *(_QWORD *)(v63 + 8 * v22);
            if (!v38)
            {
              v22 = v37 + 3;
              if (v37 + 3 >= v64)
                goto LABEL_28;
              v38 = *(_QWORD *)(v63 + 8 * v22);
              if (!v38)
              {
                v22 = v37 + 4;
                if (v37 + 4 >= v64)
                  goto LABEL_28;
                v38 = *(_QWORD *)(v63 + 8 * v22);
                if (!v38)
                {
                  v39 = v37 + 5;
                  if (v39 >= v64)
                    goto LABEL_28;
                  v38 = *(_QWORD *)(v63 + 8 * v39);
                  if (!v38)
                  {
                    while (1)
                    {
                      v22 = v39 + 1;
                      if (__OFADD__(v39, 1))
                        goto LABEL_39;
                      if (v22 >= v64)
                        goto LABEL_28;
                      v38 = *(_QWORD *)(v63 + 8 * v22);
                      ++v39;
                      if (v38)
                        goto LABEL_25;
                    }
                  }
                  v22 = v39;
                }
              }
            }
          }
        }
LABEL_25:
        v10 = (v38 - 1) & v38;
        v24 = __clz(__rbit64(v38)) + (v22 << 6);
      }
      v25 = v69;
      v26 = *(_QWORD *)(v16 - 8);
      v27 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
      v28 = (uint64_t)v66;
      v27(v66, *(_QWORD *)(v69 + 48) + *(_QWORD *)(v26 + 72) * v24, v16);
      v29 = *(void **)(*(_QWORD *)(v25 + 56) + 8 * v24);
      v30 = v68;
      *(_QWORD *)(v28 + *(int *)(v68 + 48)) = v29;
      outlined init with take of (key: UUID, value: TUConversation)(v28, (uint64_t)v7);
      v31 = *(int *)(v30 + 48);
      v32 = v67;
      v27(v67, (unint64_t)v7, v16);
      v33 = *(void **)&v7[v31];
      *(_QWORD *)&v32[v31] = v33;
      v34 = v29;
      v35 = objc_msgSend(v33, sel_state);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v32, v16);
      outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
      v36 = v65;
      if (v35 == (id)3)
      {
        swift_release();
        v40 = swift_bridgeObjectRelease();
        v41 = v62;
        v42 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v43 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v62) + 0x90))(v40);
        result = (*(uint64_t (**)(uint64_t))((*v42 & *(_QWORD *)v41) + 0x70))(v43);
        if (!result)
          return result;
        v46 = v45;
        ObjectType = swift_getObjectType();
        v48 = objc_msgSend(v36, sel_conversationsByUUID);
        v49 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        v50 = specialized _copyCollectionToContiguousArray<A>(_:)(v49);
        swift_bridgeObjectRelease();
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v46 + 56))(v50, ObjectType, v46);
        swift_release();
        return swift_unknownObjectRelease();
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  swift_once();
LABEL_30:
  v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Log.default);
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v56 = 0;
    _os_log_impl(&dword_1ACCCC000, v54, v55, "Invalidating process monitor since no longer in active conversation", v56, 2u);
    MEMORY[0x1AF44981C](v56, -1, -1);
  }

  if (((uint64_t (*)(void))v10)())
  {
    v58 = v57;
    v59 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v58 + 24))(v59, v58);
    swift_unknownObjectRelease();
  }
  v60 = &v7[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  swift_beginAccess();
  *(_QWORD *)v60 = 0;
  *((_QWORD *)v60 + 1) = 0;
  return swift_unknownObjectRelease();
}

uint64_t specialized AppVisibilityMonitor.shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(uint64_t a1, unint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  char v13;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();
  v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  v7 = v5;
  if (v5)
  {
    v11 = -[NSObject appTags](v5, sel_appTags);
    v12 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v11) = specialized Sequence<>.contains(_:)(0x6E6564646968, 0xE600000000000000, v12);
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_9;
    v15 = -[NSObject compatibilityObject](v7, sel_compatibilityObject);
    v16 = objc_msgSend(v15, sel_bundleType);

    if (v16)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v19)
      {
        if (v17 == v20 && v19 == v21)
          v22 = 1;
        else
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    v22 = 0;
LABEL_21:
    swift_bridgeObjectRelease();

    v13 = v22 ^ 1;
    return v13 & 1;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v23 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "AppVisibilityMonitor: Unable to get application record for bundle identifier: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
LABEL_9:

    goto LABEL_10;
  }

  swift_bridgeObjectRelease_n();
LABEL_10:
  v13 = 0;
  return v13 & 1;
}

{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  char v13;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();
  v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  v7 = v5;
  if (v5)
  {
    v11 = -[NSObject appTags](v5, sel_appTags);
    v12 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v11) = specialized Sequence<>.contains(_:)(0x6E6564646968, 0xE600000000000000, v12);
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_9;
    v15 = -[NSObject compatibilityObject](v7, sel_compatibilityObject);
    v16 = objc_msgSend(v15, sel_bundleType);

    if (v16)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v19)
      {
        if (v17 == v20 && v19 == v21)
          v22 = 1;
        else
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    v22 = 0;
LABEL_21:
    swift_bridgeObjectRelease();

    v13 = v22 ^ 1;
    return v13 & 1;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v23 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "AppVisibilityMonitor: Unable to get application record for bundle identifier: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
LABEL_9:

    goto LABEL_10;
  }

  swift_bridgeObjectRelease_n();
LABEL_10:
  v13 = 0;
  return v13 & 1;
}

void specialized AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  id v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);
  id v20;
  uint64_t inited;
  uint64_t v22;
  Class isa;
  id v24;
  NSURL *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE v36[80];
  uint64_t v37;
  uint64_t v38;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v36[-v14];
  v16 = (void *)objc_opt_self();
  v17 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  v18 = objc_msgSend(v16, sel_faceTimeUpdateForegroundAppURLForBundleIdentifier_applicationType_, v17, a3);

  if (v18)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
    v19(v8, v13, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v19(v15, v8, v9);
      v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA5938]), sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1ACF59E20;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 40) = v22;
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(inited + 48) = 1;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_setFrontBoardOptions_, isa);

      v24 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
      if (v24)
      {
        v26 = v24;
        URL._bridgeToObjectiveC()(v25);
        v28 = v27;
        objc_msgSend(v26, sel_openURL_configuration_completionHandler_, v27, v20, 0);

        (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for default != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v38 = v33;
    *(_DWORD *)v32 = 136315394;
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    v37 = a3;
    type metadata accessor for CPApplicationType(0);
    v34 = String.init<A>(reflecting:)();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v30, v31, "AppVisibilityMonitor: Unable to create update foreground app URL for bundle identifier: %s with type: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  id v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);
  id v20;
  uint64_t inited;
  uint64_t v22;
  Class isa;
  id v24;
  NSURL *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE v36[80];
  uint64_t v37;
  uint64_t v38;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v36[-v14];
  v16 = (void *)objc_opt_self();
  v17 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  v18 = objc_msgSend(v16, sel_faceTimeUpdateForegroundAppURLForBundleIdentifier_applicationType_, v17, a3);

  if (v18)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
    v19(v8, v13, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v19(v15, v8, v9);
      v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA5938]), sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1ACF59E20;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 40) = v22;
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(inited + 48) = 1;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_setFrontBoardOptions_, isa);

      v24 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
      if (v24)
      {
        v26 = v24;
        URL._bridgeToObjectiveC()(v25);
        v28 = v27;
        objc_msgSend(v26, sel_openURL_configuration_completionHandler_, v27, v20, 0);

        (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for default != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v38 = v33;
    *(_DWORD *)v32 = 136315394;
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    v37 = a3;
    type metadata accessor for CPApplicationType(0);
    v34 = String.init<A>(reflecting:)();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v30, v31, "AppVisibilityMonitor: Unable to create update foreground app URL for bundle identifier: %s with type: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1ACE24300@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t method lookup function for CPApplicationMonitor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CPApplicationMonitor.appVisibilityMonitor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPApplicationMonitor.__allocating_init(applicationPolicyManager:applicationController:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of CPApplicationMonitor.createAppVisibilityMonitorIfNecessary()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CPApplicationMonitor.conversationManager(_:conversationChanged:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CPApplicationMonitor.conversationManager(_:activityAuthorizationChangedForBundleIdentifier:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CPApplicationMonitor.createAppVisibilityMonitor()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.appPolicyManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.applicationController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.applicationType(forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.handleUpdatedConversations(conversations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

unint64_t type metadata accessor for TUConversation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUConversation;
  if (!lazy cache variable for type metadata for TUConversation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  }
  return result;
}

uint64_t outlined init with take of (key: UUID, value: TUConversation)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_BYTE *PluginRpcStatus.init(code:cause:errorMessage:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = *result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  return result;
}

uint64_t PluginRpcStatus.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  v5 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = v2;
  type metadata accessor for PluginRpcError();
  swift_storeEnumTagMultiPayload();
  v3 = (id)v5;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PluginRpcError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PluginRpcError;
  if (!type metadata singleton initialization cache for PluginRpcError)
    return swift_getSingletonMetadata();
  return result;
}

CopresenceCore::PluginRpcStatusCode_optional __swiftcall PluginRpcStatusCode.init(rawValue:)(Swift::UInt16 rawValue)
{
  char *v1;
  char v2;

  v2 = rawValue;
  if (rawValue >= 0x11u)
    v2 = 17;
  *v1 = v2;
  return (CopresenceCore::PluginRpcStatusCode_optional)rawValue;
}

uint64_t PluginRpcStatusCode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PluginRpcStatusCode()
{
  unsigned __int8 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PluginRpcStatusCode()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PluginRpcStatusCode()
{
  unsigned __int8 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CopresenceCore::PluginRpcStatusCode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PluginRpcStatusCode(Swift::UInt16 *a1)
{
  return PluginRpcStatusCode.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PluginRpcStatusCode(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void PluginRpcStatus.code.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void *PluginRpcStatus.cause.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

uint64_t PluginRpcStatus.errorMessage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginRpcStatus.description.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (void *)v0[1];
  v2 = v0[2];
  v3 = (void *)v0[3];
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  if (v3)
    v6 = v2;
  else
    v6 = 0xD000000000000010;
  if (v3)
    v7 = v3;
  else
    v7 = (void *)0x80000001ACF81920;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A6573756163202CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  if (v1)
  {
    v10 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v11 = String.init<A>(reflecting:)();
    v13 = v12;
  }
  else
  {
    v13 = 0xE400000000000000;
    v11 = 1701736302;
  }
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  return 0x7461745320435052;
}

uint64_t PluginRpcDefinition.path.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginRpcDefinition.init(path:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginRpcStatusCode and conformance PluginRpcStatusCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginRpcStatusCode and conformance PluginRpcStatusCode;
  if (!lazy protocol witness table cache variable for type PluginRpcStatusCode and conformance PluginRpcStatusCode)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginRpcStatusCode, &type metadata for PluginRpcStatusCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginRpcStatusCode and conformance PluginRpcStatusCode);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PluginRpcStatusCode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginRpcStatusCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1ACE2496C + 4 * byte_1ACF63755[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1ACE249A0 + 4 * asc_1ACF63750[v4]))();
}

uint64_t sub_1ACE249A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE249A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE249B0);
  return result;
}

uint64_t sub_1ACE249BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE249C4);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1ACE249C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE249D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PluginRpcStatusCode()
{
  return &type metadata for PluginRpcStatusCode;
}

uint64_t destroy for PluginRpcStatus(uint64_t a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PluginRpcStatus(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PluginRpcStatus(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  v6 = v5;
  *(_QWORD *)(a1 + 8) = v5;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PluginRpcStatus(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginRpcStatus(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginRpcStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginRpcStatus()
{
  return &type metadata for PluginRpcStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for PluginRpcError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v6 = (void *)a2[1];
      v7 = v6;
      v9 = a2[2];
      v8 = a2[3];
      a1[1] = (uint64_t)v6;
      a1[2] = v9;
      a1[3] = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = type metadata accessor for NWError();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 3, v11))
      {
        v13 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 3, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PluginRpcError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {

    return swift_bridgeObjectRelease();
  }
  else
  {
    v3 = type metadata accessor for NWError();
    v4 = *(_QWORD *)(v3 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 3, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for PluginRpcError(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v4 = (void *)a2[1];
    v5 = v4;
    v7 = a2[2];
    v6 = a2[3];
    a1[1] = v4;
    a1[2] = v7;
    a1[3] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = type metadata accessor for NWError();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(a2, 3, v8))
    {
      v10 = type metadata accessor for PluginConnectError();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 3, v8);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for PluginRpcError(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PluginRpcError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v4 = (void *)a2[1];
      v5 = v4;
      a1[1] = v4;
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
    }
    else
    {
      v6 = type metadata accessor for NWError();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
      {
        v8 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of PluginRpcError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PluginRpcError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for PluginRpcError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for NWError();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
    {
      v8 = type metadata accessor for PluginConnectError();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PluginRpcError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PluginRpcError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for NWError();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
      {
        v8 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PluginRpcError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PluginConnectError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for PluginRpcDefinition()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for PluginRpcDefinition()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t static TransparentTopicCryptorProvider.encryptionID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  __break(1u);
  return result;
}

uint64_t TransparentTopicCryptorProvider.encryptionIDPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = type metadata accessor for UUID();
  v2 = MEMORY[0x1E0C80A78](v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 80))(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UUID, Never>);
  swift_allocObject();
  v5 = CurrentValueSubject.init(_:)();
  lazy protocol witness table accessor for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<UUID, Never>);
  v3 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v3;
}

uint64_t TransparentTopicCryptorProvider.decryptionIDSet.getter()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1ACF59E20;
  (*(void (**)(void))(*(_QWORD *)v0 + 80))();
  return v1;
}

uint64_t TransparentTopicCryptorProvider.decryptionIDSetPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(*(_QWORD *)v0 + 96))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID], Never>);
  swift_allocObject();
  CurrentValueSubject.init(_:)();
  lazy protocol witness table accessor for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<[UUID], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[UUID], Never>);
  v1 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v1;
}

uint64_t lazy protocol witness table accessor for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0C95FB8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TransparentTopicCryptorProvider.encrypt(data:seqNum:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t TransparentTopicCryptorProvider.decrypt(data:encryptionID:seqNum:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t TransparentTopicCryptorProvider.validEncryptionID(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v19 - v13;
  outlined copy of Data._Representation(a1, a2);
  UUID.init(data:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7);
    v15 = 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v16);
    v15 = static UUID.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v12, v8);
    v17(v14, v8);
  }
  return v15 & 1;
}

uint64_t TransparentTopicCryptorProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TransparentTopicCryptorProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t TransparentTopicCryptorProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t TransparentTopicCryptorProvider.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for TopicCryptorProvider.encryptionID.getter in conformance TransparentTopicCryptorProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t protocol witness for TopicCryptorProvider.encryptionIDPublisher.getter in conformance TransparentTopicCryptorProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t protocol witness for TopicCryptorProvider.decryptionIDSet.getter in conformance TransparentTopicCryptorProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t protocol witness for TopicCryptorProvider.decryptionIDSetPublisher.getter in conformance TransparentTopicCryptorProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t protocol witness for TopicCryptorProvider.validEncryptionID(data:) in conformance TransparentTopicCryptorProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))() & 1;
}

uint64_t protocol witness for TopicCryptorProvider.decrypt(data:encryptionID:seqNum:) in conformance TransparentTopicCryptorProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t protocol witness for TopicCryptorProvider.refreshEncryptionIDSet(participantIDs:) in conformance TransparentTopicCryptorProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t type metadata accessor for TransparentTopicCryptorProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for TransparentTopicCryptorProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.encryptionID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.encryptionIDPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.decryptionIDSet.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.decryptionIDSetPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.encrypt(data:seqNum:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.decrypt(data:encryptionID:seqNum:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.validEncryptionID(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.refreshEncryptionIDSet(participantIDs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

_QWORD *ABCReporter.__allocating_init(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init);
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  v8[6] = a4;
  return v8;
}

id ABCReporter.reporter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t ABCReporter.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ABCReporter.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *ABCReporter.init(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init);
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  v4[6] = a4;
  return v4;
}

Swift::OpaquePointer_optional __swiftcall ABCReporter.signature(subType:context:process:)(Swift::String subType, Swift::String context, Swift::String process)
{
  _QWORD *v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  Swift::Bool v17;
  void *v18;
  Swift::OpaquePointer_optional result;

  object = process._object;
  countAndFlagsBits = process._countAndFlagsBits;
  v6 = context._object;
  v7 = context._countAndFlagsBits;
  v8 = subType._object;
  v9 = subType._countAndFlagsBits;
  v10 = (void *)v3[2];
  v11 = (void *)MEMORY[0x1AF4480F4](v3[3], v3[4]);
  v12 = (void *)MEMORY[0x1AF4480F4](v3[5], v3[6]);
  v13 = (void *)MEMORY[0x1AF4480F4](v9, v8);
  v14 = (void *)MEMORY[0x1AF4480F4](v7, v6);
  v15 = (void *)MEMORY[0x1AF4480F4](countAndFlagsBits, object);
  v16 = objc_msgSend(v10, sel_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_, v11, v12, v13, v14, v15, 0);

  if (v16)
  {
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  v18 = 0;
  result.value._rawValue = v18;
  result.is_nil = v17;
  return result;
}

uint64_t ABCReporter.report(with:duration:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 40) = v2;
  *(double *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  return swift_task_switch();
}

uint64_t ABCReporter.report(with:duration:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[5];
  v2 = v0[4];
  v3 = v0[3];
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  *v5 = v0;
  v5[1] = ABCReporter.report(with:duration:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

void closure #1 in ABCReporter.report(with:duration:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Class isa;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AnyHashable : Any], Never>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = *(void **)(a2 + 16);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in ABCReporter.report(with:duration:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
  aBlock[3] = &block_descriptor_15;
  v13 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v9, sel_snapshotWithSignature_duration_event_payload_reply_, isa, 0, 0, v13, a3);
  _Block_release(v13);

}

uint64_t closure #1 in closure #1 in ABCReporter.report(with:duration:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AnyHashable : Any], Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ABCReporter.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ABCReporter.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ABCReporterProtocol.init(domain:type:) in conformance ABCReporter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 104))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ABCReporterProtocol.report(with:duration:) in conformance ABCReporter(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, double);

  v8 = (uint64_t (*)(uint64_t, double))(**(int **)(**(_QWORD **)v2 + 120)
                                               + *(_QWORD *)(**(_QWORD **)v2 + 120));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of ABCReporterProtocol.report(with:duration:);
  return v8(a1, a2);
}

uint64_t Task<>.reportFailure(on:function:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  __int128 v21[2];

  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v21);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a7;
  v18[5] = a6;
  v18[6] = a2;
  v18[7] = a3;
  v18[8] = a4;
  v18[9] = a5;
  outlined init with take of BackgroundSessionManagerDataSource(v21, (uint64_t)(v18 + 10));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v18);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v16);
  return swift_retain();
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v8[17] = v11;
  v8[18] = v12;
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  v8[19] = *(_QWORD *)(v12 - 8);
  v8[20] = swift_task_alloc();
  v9 = type metadata accessor for Date();
  v8[21] = v9;
  v8[22] = *(_QWORD *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)()
{
  uint64_t v0;
  _QWORD *v1;

  Date.init()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = closure #1 in Task<>.reportFailure(on:function:process:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[19] + 8))(v2[20], v2[18]);
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  swift_bridgeObjectRetain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 240);
    v4 = *(void **)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    v14 = *(_QWORD *)(v0 + 168);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v17 = v6;
    *(_QWORD *)(v0 + 64) = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    v7 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Received reporting response: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

    v16(v15, v14);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    v10 = *(void **)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 168);

    swift_bridgeObjectRelease_n();
    v9(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  void (*v44)(uint64_t, uint64_t);
  _QWORD *v45;
  NSObject *v46;
  os_log_type_t v47;
  BOOL v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v62;

  if (one-time initialization token for abcReporter != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 248) = __swift_project_value_buffer(v1, (uint64_t)static Log.abcReporter);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 112);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v62 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Detected failure on function %s. Reporting!", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);

    v9 = *(_QWORD *)(v0 + 128);
    if (v9)
    {
LABEL_5:
      v58 = *(_QWORD *)(v0 + 120);
      v59 = v9;
      goto LABEL_9;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v9 = *(_QWORD *)(v0 + 128);
    if (v9)
      goto LABEL_5;
  }
  v10 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v11 = objc_msgSend(v10, sel_bundleIdentifier);

  if (!v11)
  {
    swift_bridgeObjectRetain_n();
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    v48 = os_log_type_enabled(v46, v47);
    v49 = *(void **)(v0 + 208);
    v50 = *(_QWORD *)(v0 + 192);
    v51 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 176);
    v53 = *(_QWORD *)(v0 + 112);
    if (v48)
    {
      v60 = *(_QWORD *)(v0 + 192);
      v54 = *(_QWORD *)(v0 + 104);
      v55 = swift_slowAlloc();
      v56 = swift_slowAlloc();
      v62 = v56;
      *(_DWORD *)v55 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v53, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v55 + 12) = 2080;
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v46, v47, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v56, -1, -1);
      MEMORY[0x1AF44981C](v55, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v60, v51);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
    }
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v59 = v12;

LABEL_9:
  v13 = *(_QWORD **)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  v16 = v13[3];
  v17 = v13[4];
  v57 = v13;
  __swift_project_boxed_opaque_existential_1(v13, v16);
  swift_getErrorValue();
  swift_bridgeObjectRetain();
  v18 = Error.localizedDescription.getter();
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v14, v18, v19, v58, v59, v16, v17);
  *(_QWORD *)(v0 + 216) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v20)
  {
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    v30 = os_log_type_enabled(v28, v29);
    v31 = *(void **)(v0 + 208);
    v32 = *(_QWORD *)(v0 + 192);
    v33 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 176);
    if (v30)
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1ACCCC000, v28, v29, "Failed to convert signature payload", v35, 2u);
      MEMORY[0x1AF44981C](v35, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain_n();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v62 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain();
    v25 = Dictionary.description.getter();
    v27 = v26;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v21, v22, "Reporting signature %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v37 = *(_QWORD *)(v0 + 184);
  v38 = *(_QWORD *)(v0 + 168);
  v39 = *(_QWORD *)(v0 + 176);
  v40 = v57[3];
  v41 = v57[4];
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 136), v40);
  Date.init()();
  Date.timeIntervalSince(_:)();
  v43 = v42;
  v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  *(_QWORD *)(v0 + 224) = v44;
  v44(v37, v38);
  v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v41 + 24) + *(_QWORD *)(v41 + 24));
  v45 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v45;
  *v45 = v0;
  v45[1] = closure #1 in Task<>.reportFailure(on:function:process:);
  return v61(v20, v40, v41, v43);
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1ACE26CA0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in Task<>.reportFailure(on:function:process:)(a1, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t dispatch thunk of ABCReporterProtocol.init(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of ABCReporterProtocol.signature(subType:context:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of ABCReporterProtocol.report(with:duration:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, double);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of ABCReporterProtocol.report(with:duration:);
  return v11(a1, a2, a3, a4);
}

uint64_t type metadata accessor for ABCReporter()
{
  return objc_opt_self();
}

uint64_t method lookup function for ABCReporter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ABCReporter.__allocating_init(domain:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ABCReporter.signature(subType:context:process:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ABCReporter.report(with:duration:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, double);

  v8 = (uint64_t (*)(uint64_t, double))(**(int **)(*(_QWORD *)v2 + 120) + *(_QWORD *)(*(_QWORD *)v2 + 120));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:);
  return v8(a1, a2);
}

uint64_t sub_1ACE26EC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AnyHashable : Any], Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ABCReporter.report(with:duration:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AnyHashable : Any], Never>);
  return closure #1 in closure #1 in ABCReporter.report(with:duration:)();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t PegasusApplicationLaunchBehavior.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager();
  v1 = swift_allocObject();
  swift_defaultActor_initialize();
  v2 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 112) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 24) = v1;
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v3 + 112) = v2;
  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9E0];
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.authorizationManager.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PegasusApplicationLaunchBehavior.authorizationManager.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*PegasusApplicationLaunchBehavior.authorizationManager.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PegasusApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)(void *a1, char a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  id v13;

  if ((a2 & 1) != 0
    && (v2 = objc_msgSend(a1, sel_activity),
        v3 = objc_msgSend(v2, sel_metadata),
        v2,
        v3))
  {
    v4 = objc_msgSend(v3, sel_context);

    v5 = objc_msgSend(v4, sel_typedIdentifier);
    v6 = (void *)*MEMORY[0x1E0DBD5C0];
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
      v12 = 1;
    else
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v13 = v6;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Iterator);
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>?);
  v4[12] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 - 8);
  v4[15] = swift_task_alloc();
  v7 = type metadata accessor for UUID();
  v4[16] = v7;
  v4[17] = *(_QWORD *)(v7 - 8);
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v15;

  v1 = objc_msgSend(*(id *)(v0 + 40), sel_activity);
  v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 64);
    v7 = *(void **)(v0 + 40);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    *(_QWORD *)(v0 + 152) = v8;
    *(_QWORD *)(v0 + 160) = v10;
    v11 = objc_msgSend(v7, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)(v0 + 168) = UUID.uuidString.getter();
    *(_QWORD *)(v0 + 176) = v12;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    *(_QWORD *)(v0 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 184))(v13);
    return swift_task_switch();
  }
  else
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *v15 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;

  PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(v0[21], v0[22], v0[19], v0[20], v0[12]);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AsyncStream<PGBackgroundPIPAuthorizationState>?(v3);
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *v4 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 120), v3, v1);
    AsyncStream.makeAsyncIterator()();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v6;
    *v6 = v0;
    v6[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25[2];

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    goto LABEL_2;
  if (one-time initialization token for default != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 176);
  if (v12)
  {
    v14 = *(_QWORD *)(v0 + 168);
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v25[0] = v16;
    *(_DWORD *)v15 = 136315394;
    *(_QWORD *)(v0 + 32) = v1;
    type metadata accessor for PGBackgroundPIPAuthorizationState(0);
    v17 = String.init<A>(reflecting:)();
    *(_QWORD *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v25);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v15 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v25);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v10, v11, "Got PGBackgroundPIPAuthorization authorization transitioned to state %s for session id %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if ((unint64_t)(v1 - 4) < 2)
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    v21 = swift_allocError();
    *v22 = 1;
    swift_willThrow();
    *(_QWORD *)(v0 + 208) = v21;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  else
  {
    if (v1 == 3)
    {
LABEL_2:
      v3 = *(_QWORD *)(v0 + 112);
      v2 = *(_QWORD *)(v0 + 120);
      v4 = *(_QWORD *)(v0 + 104);
      v6 = *(_QWORD *)(v0 + 80);
      v5 = *(_QWORD *)(v0 + 88);
      v7 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    if (v1 == 2)
    {
      v19 = *(int **)(**(_QWORD **)(v0 + 64) + 144);
      v24 = (int *)((char *)v19 + *v19);
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 200) = v20;
      *v20 = v0;
      v20[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
      return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v24)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    }
    else
    {
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v23;
      *v23 = v0;
      v23[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
      return AsyncStream.Iterator.next(isolation:)();
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 208) = v0;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v2 + 192) = v5;
    *v5 = v3;
    v5[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 32) + 88))();
  return swift_task_switch();
}

{
  Swift::String *v0;

  BackgroundApplicationLaunchBehavior.AssertionStore.revokeBackgroundAuthorization(for:)(v0[1]);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 32) + 184))();
  return swift_task_switch();
}

{
  uint64_t v0;

  PegasusApplicationLaunchBehavior.AuthorizationManager.revokeAuthorization(for:)(*(Swift::String *)(v0 + 16));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PegasusApplicationLaunchBehavior.authorizePiP(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Iterator);
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>?);
  v2[10] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v2[14] = v5;
  v2[15] = *(_QWORD *)(v5 - 8);
  v2[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PegasusApplicationLaunchBehavior.authorizePiP(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(void **)(v0 + 40);
  v5 = objc_msgSend(v4, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)(v0 + 136) = UUID.uuidString.getter();
  *(_QWORD *)(v0 + 144) = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = objc_msgSend(v4, sel_activity);
  v8 = objc_msgSend(v7, sel_metadata);

  if (!v8)
    goto LABEL_11;
  v9 = objc_msgSend(v8, sel_context);

  v10 = objc_msgSend(v9, sel_typedIdentifier);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
    swift_bridgeObjectRelease_n();

  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v16 & 1) == 0)
      goto LABEL_11;
  }
  v17 = objc_msgSend(*(id *)(v0 + 40), sel_activity);
  v18 = objc_msgSend(v17, sel_bundleIdentifier);

  if (v18)
  {
    v19 = *(_QWORD *)(v0 + 48);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    *(_QWORD *)(v0 + 152) = v20;
    *(_QWORD *)(v0 + 160) = v22;
    *(_QWORD *)(v0 + 168) = (*(uint64_t (**)(void))(*(_QWORD *)v19 + 184))();
    return swift_task_switch();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
  swift_allocError();
  *v24 = 3;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;

  PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(v0[17], v0[18], v0[19], v0[20], v0[10]);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AsyncStream<PGBackgroundPIPAuthorizationState>?(v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 104), v3, v1);
    AsyncStream.makeAsyncIterator()();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v5;
    *v5 = v0;
    v5[1] = PegasusApplicationLaunchBehavior.authorizePiP(for:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28[2];

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    goto LABEL_10;
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 144);
  if (v5)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v28[0] = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v0 + 32) = v1;
    type metadata accessor for PGBackgroundPIPAuthorizationState(0);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v28);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v28);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Got PGBackgroundPIPAuthorization authorization transitioned to state %s for session id %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if ((unint64_t)(v1 - 4) < 2)
  {
    v13 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *v18 = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  if (v1 == 2)
  {
LABEL_10:
    v21 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 64);
    v23 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v27;
  *v27 = v0;
  v27[1] = PegasusApplicationLaunchBehavior.authorizePiP(for:);
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t PegasusApplicationLaunchBehavior.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager();
  v1 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  v2 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 112) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 24) = v1;
  swift_release();
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v3 + 112) = v2;
  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

uint64_t type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager()
{
  return objc_opt_self();
}

uint64_t PegasusApplicationLaunchBehavior.__ivar_destroyer()
{
  return swift_release();
}

uint64_t PegasusApplicationLaunchBehavior.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t key path setter for PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations : PegasusApplicationLaunchBehavior.AuthorizationManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 112) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v6 = v5;
  v25 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation.BufferingPolicy);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_beginAccess();
  v16 = *(_QWORD *)(v5 + 112);
  if (*(_QWORD *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v18 & 1) != 0)
    {
      v19 = *(id *)(*(_QWORD *)(v16 + 56) + 8 * v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (objc_msgSend(v19, sel_state) == (id)1 || objc_msgSend(v19, sel_state) == (id)2)
      {

LABEL_6:
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a5, 1, 1, v20);
      }
      v24 = objc_msgSend(v19, sel_state);

      if (v24 == (id)3)
        goto LABEL_6;
    }
    else
    {
      swift_bridgeObjectRelease();
      v15 = swift_bridgeObjectRelease();
    }
  }
  MEMORY[0x1E0C80A78](v15);
  *(&v25 - 6) = a1;
  *(&v25 - 5) = a2;
  v22 = v25;
  *(&v25 - 4) = a3;
  *(&v25 - 3) = v22;
  *(&v25 - 2) = v6;
  type metadata accessor for PGBackgroundPIPAuthorizationState(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DF07B8], v11);
  AsyncStream.init(_:bufferingPolicy:_:)();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a5, 0, 1, v23);
}

void closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v24 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = objc_allocWithZone(MEMORY[0x1E0D6C9B0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = a2;
  v18 = (void *)MEMORY[0x1AF4480F4](a2, a3);
  swift_bridgeObjectRelease();
  v19 = (void *)MEMORY[0x1AF4480F4](v24, a5);
  swift_bridgeObjectRelease();
  aBlock[4] = partial apply for closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed PGBackgroundPIPAuthorization, @unowned PGBackgroundPIPAuthorizationState) -> ();
  aBlock[3] = &block_descriptor_16;
  v20 = _Block_copy(aBlock);
  v21 = objc_msgSend(v16, sel_initWithActivitySessionIdentifier_appBundleIdentifier_stateTransitionHandler_, v18, v19, v20);

  _Block_release(v20);
  swift_release();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v22 = v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *(_QWORD *)(a6 + 112);
  *(_QWORD *)(a6 + 112) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v22, v17, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a6 + 112) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

}

void closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v7[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation.YieldResult);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 4)
    AsyncStream.Continuation.finish()();
}

Swift::Void __swiftcall PegasusApplicationLaunchBehavior.AuthorizationManager.revokeAuthorization(for:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  id object;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  char v28;
  unint64_t v29;
  char v30;
  char v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int64_t v36;
  id v37;
  uint64_t countAndFlagsBits;
  uint64_t v39;
  uint64_t v40[3];

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for default == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v40[0] = v8;
      *(_DWORD *)v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v5, v6, "Request to remove PiP authorizations for %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v8, -1, -1);
      MEMORY[0x1AF44981C](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v9 = (uint64_t *)(v2 + 112);
    swift_beginAccess();
    v2 = *(_QWORD *)(v2 + 112);
    v35 = v2 + 64;
    v10 = 1 << *(_BYTE *)(v2 + 32);
    v11 = -1;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    v12 = v11 & *(_QWORD *)(v2 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    swift_bridgeObjectRetain();
    v13 = 0;
    v37 = object;
    if (v12)
    {
      while (1)
      {
        v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v15 = v14 | (v13 << 6);
LABEL_25:
        v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
        v20 = *v19;
        v21 = v19[1];
        v22 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
        swift_bridgeObjectRetain();
        v23 = v22;
        object = objc_msgSend(v23, sel_appBundleIdentifier);
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v26 = v25;

        if (v24 == countAndFlagsBits && v26 == v37)
          break;
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
        {
LABEL_33:
          objc_msgSend(v23, sel_revoke);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          v29 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          v31 = v30;
          swift_bridgeObjectRelease();
          if ((v31 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v33 = *v9;
            v39 = *v9;
            *v9 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v33 = v39;
            }
            swift_bridgeObjectRelease();
            v34 = *(void **)(*(_QWORD *)(v33 + 56) + 8 * v29);
            specialized _NativeDictionary._delete(at:)(v29, v33);
            *v9 = v33;

            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_endAccess();

          if (!v12)
            goto LABEL_11;
        }
        else
        {
          swift_bridgeObjectRelease();

          if (!v12)
            goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
LABEL_11:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v36)
      break;
    v17 = *(_QWORD *)(v35 + 8 * v16);
    ++v13;
    if (v17)
      goto LABEL_24;
    v13 = v16 + 1;
    if (v16 + 1 >= v36)
      break;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (v17)
      goto LABEL_24;
    v13 = v16 + 2;
    if (v16 + 2 >= v36)
      break;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (v17)
      goto LABEL_24;
    v18 = v16 + 3;
    if (v18 >= v36)
      break;
    v17 = *(_QWORD *)(v35 + 8 * v18);
    if (v17)
    {
      v13 = v18;
LABEL_24:
      v12 = (v17 - 1) & v17;
      v15 = __clz(__rbit64(v17)) + (v13 << 6);
      goto LABEL_25;
    }
    while (1)
    {
      v13 = v18 + 1;
      if (__OFADD__(v18, 1))
        break;
      if (v13 >= v36)
        goto LABEL_37;
      v17 = *(_QWORD *)(v35 + 8 * v13);
      ++v18;
      if (v17)
        goto LABEL_24;
    }
LABEL_39:
    __break(1u);
  }
LABEL_37:
  swift_release();
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9E0];
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance PegasusApplicationLaunchBehavior.AuthorizationManager()
{
  uint64_t v0;

  return v0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed PGBackgroundPIPAuthorization, @unowned PGBackgroundPIPAuthorizationState) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t outlined destroy of AsyncStream<PGBackgroundPIPAuthorizationState>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = v16 + 24 * v3;
            v18 = (__int128 *)(v16 + 24 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 24))
            {
              v9 = *v18;
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
              *(_OWORD *)v17 = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (16 * v3 != 16 * v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for UUID();
  v31 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v32 = a2 + 64;
    result = _HashTable.previousHole(before:)();
    v11 = v32;
    if ((*(_QWORD *)(v32 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v31 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
      do
      {
        v14 = v13 * v9;
        v30(v7, *(_QWORD *)(a2 + 48) + v13 * v9, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID();
        v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v4);
        v16 = v15 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v16 >= v12 && a1 >= (uint64_t)v16)
          {
LABEL_17:
            v19 = *(_QWORD *)(a2 + 48);
            result = v19 + v13 * a1;
            if (v13 * a1 < v14 || result >= v19 + v14 + v13)
            {
              result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v13 * a1 != v14)
            {
              result = swift_arrayInitWithTakeBackToFront();
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = (_QWORD *)(v20 + 8 * a1);
            v22 = (_QWORD *)(v20 + 8 * v9);
            v11 = v32;
            if (a1 != v9 || (a1 = v9, v21 >= v22 + 1))
            {
              *v21 = *v22;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v16 >= v12 || a1 >= (uint64_t)v16)
        {
          goto LABEL_17;
        }
        v11 = v32;
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v11 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v23 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for UUID();
  v31 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v32 = a2 + 64;
    result = _HashTable.previousHole(before:)();
    v11 = v32;
    if ((*(_QWORD *)(v32 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v31 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
      do
      {
        v14 = v13 * v9;
        v30(v7, *(_QWORD *)(a2 + 48) + v13 * v9, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID();
        v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v4);
        v16 = v15 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v16 >= v12 && a1 >= (uint64_t)v16)
          {
LABEL_17:
            v19 = *(_QWORD *)(a2 + 48);
            result = v19 + v13 * a1;
            if (v13 * a1 < v14 || result >= v19 + v14 + v13)
            {
              result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v13 * a1 != v14)
            {
              result = swift_arrayInitWithTakeBackToFront();
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = (_OWORD *)(v20 + 16 * a1);
            v22 = (_OWORD *)(v20 + 16 * v9);
            v11 = v32;
            if (a1 != v9 || (a1 = v9, v21 >= v22 + 1))
            {
              *v21 = *v22;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v16 >= v12 || a1 >= (uint64_t)v16)
        {
          goto LABEL_17;
        }
        v11 = v32;
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v11 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v23 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  return specialized _NativeDictionary._delete(at:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CCE2A0]);
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v7);
        result = static Hasher._hash(seed:_:)();
        v13 = result & v9;
        if (v4 >= (uint64_t)v10)
        {
          if (v13 < v10 || v4 < (uint64_t)v13)
            goto LABEL_6;
        }
        else if (v13 < v10 && v4 < (uint64_t)v13)
        {
          goto LABEL_6;
        }
        v16 = (_QWORD *)(v11 + 8 * v4);
        if (v4 != v7 || v16 >= v12 + 1)
          *v16 = *v12;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(a3(0) - 8) + 72);
        v19 = v18 * v4;
        result = v17 + v18 * v4;
        v20 = v18 * v7;
        v21 = v17 + v18 * v7 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    v23 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v24 = *v23;
    v25 = (-1 << v4) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v5 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1ACE2A67C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE2A6AC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ACE2A6DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PegasusApplicationLaunchBehavior()
{
  return objc_opt_self();
}

uint64_t method lookup function for PegasusApplicationLaunchBehavior()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizationManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizationManager.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizationManager.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizePiP(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 216) + *(_QWORD *)(*(_QWORD *)v1 + 216));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v6(a1);
}

uint64_t method lookup function for PegasusApplicationLaunchBehavior.AuthorizationManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.revokeAuthorization(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1ACE2A82C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(a1, a2);
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t ActivitySessionClientConnection.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for ActivitySessionClientConnection.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path getter for ActivitySessionClientConnection.serverDisconnectedCallback : ActivitySessionClientConnection@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.serverDisconnectedCallback : ActivitySessionClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback, (uint64_t (*)(uint64_t, uint64_t))_sxRi_zRi0_zlyytIseghHr_SgWOe);
}

uint64_t (*ActivitySessionClientConnection.serverDisconnectedCallback.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.setStateCallback : ActivitySessionClientConnection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *);

  v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.setStateCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.setStateCallback : ActivitySessionClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CPActivitySessionState, @in_guaranteed Error?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.setStateCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.setStateCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.setStateCallback, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.setStateCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.setStateCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t (*ActivitySessionClientConnection.setStateCallback.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.setAssociatedSceneCallback : ActivitySessionClientConnection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String?) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.setAssociatedSceneCallback : ActivitySessionClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.setAssociatedSceneCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.setAssociatedSceneCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t (*ActivitySessionClientConnection.setAssociatedSceneCallback.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.setDataCryptorCallback : ActivitySessionClientConnection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.setDataCryptorCallback : ActivitySessionClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.setDataCryptorCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.setDataCryptorCallback, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.setDataCryptorCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.setDataCryptorCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t (*ActivitySessionClientConnection.setDataCryptorCallback.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySessionClientConnection.setActivityPublisher.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ActivitySessionClientConnection.setActivityPublisher.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for ActivitySessionClientConnection.setActivityPublisher);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*ActivitySessionClientConnection.setActivityPublisher.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.receivedResourceCallback : ActivitySessionClientConnection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *, _QWORD *);

  v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUSandboxExtendedURL, @guaranteed Data, @unowned UInt64) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.receivedResourceCallback : ActivitySessionClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUSandboxExtendedURL, @in_guaranteed Data, @in_guaranteed UInt64) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.receivedResourceCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.receivedResourceCallback, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.getter(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(v2 + *a1);
  swift_beginAccess();
  v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t ActivitySessionClientConnection.receivedResourceCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.receivedResourceCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  v9 = *v8;
  v10 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*ActivitySessionClientConnection.receivedResourceCallback.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  char v3;

  v1 = direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs;
  v2 = v0[direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs];
  if (v2 == 2)
  {
    v3 = closure #1 in ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter(v0);
    v0[v1] = v3 & 1;
  }
  else
  {
    v3 = v2 & 1;
  }
  return v3 & 1;
}

uint64_t ActivitySessionClientConnection.shouldTranslateParticipantIDs.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs) = result;
  return result;
}

uint64_t closure #1 in ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter(void *a1)
{
  void *v2;
  id v3;
  char v4;
  id v5;
  char v6;
  int v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;

  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_processInfo);
  v4 = specialized NSProcessInfo.getEntitlementBoolValue(_:)(0xD00000000000001CLL, 0x80000001ACF7C490);

  v5 = objc_msgSend(v2, sel_processInfo);
  v6 = specialized NSProcessInfo.getEntitlementBoolValue(_:)(0xD00000000000001FLL, 0x80000001ACF7C590);

  if (v6 == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = v6 & 1;
    if ((v4 & 1) != 0)
    {
      v8 = 1;
      goto LABEL_6;
    }
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  v10 = objc_msgSend(v9, sel_gameCenterFastSyncTransport);

  v8 = v10 & v7;
LABEL_6:
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v29 = v16;
    *(_DWORD *)v15 = 67110146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 8) = 2080;
    v17 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v18 = objc_msgSend(v17, sel_bundleIdentifier);

    if (v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v19 = String.init<A>(reflecting:)();
      v21 = v20;
    }
    else
    {
      v21 = 0xE300000000000000;
      v19 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 18) = 2080;
    v22 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 28) = 2080;
    v24 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 38) = 2080;
    v26 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "[Translation] Translating=%{BOOL}d, bundleID=%s entitledToUsePrivateAPI=%s entitledToUseGameCenter=%s self=%s", (uint8_t *)v15, 0x30u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);

    return v8;
  }
  else
  {

  }
  return v8;
}

uint64_t (*ActivitySessionClientConnection.shouldTranslateParticipantIDs.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter() & 1;
  return ActivitySessionClientConnection.shouldTranslateParticipantIDs.modify;
}

uint64_t ActivitySessionClientConnection.shouldTranslateParticipantIDs.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result
           + direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs) = *(_BYTE *)(result + 8);
  return result;
}

Swift::Void __swiftcall ActivitySessionClientConnection.handleServerDisconnect()()
{
  uint64_t v0;
  void (**v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = swift_retain();
    v2(v3);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v2);
  }
}

uint64_t ActivitySessionClientConnection.requestParticipants(for:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t result;
  id v12;
  _QWORD aBlock[6];
  dispatch_queue_t v14;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  v4 = (id *)(v3 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = MEMORY[0x1E0DEE9E8];
  v14 = *(dispatch_queue_t *)&v1[direct field offset for XPCClient.queue];
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v1;
  v6[3] = a1;
  v6[4] = v5;
  v6[5] = v3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in ActivitySessionClientConnection.requestParticipants(for:);
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_17;
  v8 = _Block_copy(aBlock);
  v9 = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v8);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    if (*v4)
    {
      v12 = *v4;
      swift_willThrow();
    }
    else
    {
      swift_beginAccess();
      isEscapingClosureAtFileLocation = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_release();
    swift_release();
    return isEscapingClosureAtFileLocation;
  }
  return result;
}

uint64_t sub_1ACE2BAB4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1ACE2BAD8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  id v7;
  _QWORD v9[6];

  v9[2] = a2;
  v9[3] = a3;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a4;
  v7 = a1;
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:), (uint64_t)v9, (uint64_t)partial apply for closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:), v6);
  return swift_release();
}

uint64_t sub_1ACE2BB84()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySessionClientConnection.requestParticipants(for:)()
{
  uint64_t v0;

  return closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1ACE2BBCC()
{
  return swift_deallocObject();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

void closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void **a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  Class isa;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v5 = *a1;
  isa = Set._bridgeToObjectiveC()().super.isa;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v9[4] = partial apply for closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:);
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed Set<TUConversationParticipant>) -> ();
  v9[3] = &block_descriptor_59;
  v8 = _Block_copy(v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_requestParticipantsFor_completion_, isa, v8);
  _Block_release(v8);

}

uint64_t closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17[3];

  if (one-time initialization token for default != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17[0] = v16;
    *(_DWORD *)v8 = 136315394;
    type metadata accessor for TUConversationParticipant();
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
    swift_bridgeObjectRetain();
    v9 = Set.description.getter();
    v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    v12 = Set.description.getter();
    v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v6, v7, "[Translation] Received participants %s for participantIDs: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  *(_QWORD *)(a3 + 16) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Set<TUConversationParticipant>) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for TUConversationParticipant();
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
  v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

id closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  v7 = a2;
  v8 = a1;
  v9 = v7;
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v23[0] = v21;
    *(_DWORD *)v13 = 138412546;
    v22 = a3;
    v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v9;

    *(_WORD *)(v13 + 12) = 2080;
    v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v17 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v23);
    a3 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v11, v12, "[Translation] %@ connection error %s while requesting participant info", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);
  }
  else
  {

  }
  swift_beginAccess();
  v19 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a1;

  return a1;
}

uint64_t ActivitySessionClientConnection.setState(state:error:)(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.setState(state:error:)(a1, a2, &direct field offset for ActivitySessionClientConnection.setStateCallback, (uint64_t (*)(_QWORD, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

void @objc ActivitySessionClientConnection.setState(state:error:)(char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v7;
  void (*v8)(uint64_t, void *);
  char *v9;
  id v10;

  v7 = &a1[direct field offset for ActivitySessionClientConnection.setStateCallback];
  swift_beginAccess();
  v8 = *(void (**)(uint64_t, void *))v7;
  if (*(_QWORD *)v7)
  {
    v9 = a1;
    v10 = a4;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v8);
    v8(a3, a4);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v8);

  }
}

uint64_t ActivitySessionClientConnection.setDataCryptor(_:)(uint64_t a1)
{
  uint64_t v1;
  void (**v3)(uint64_t);
  uint64_t result;
  void (*v5)(uint64_t);

  v3 = (void (**)(uint64_t))(v1
                                     + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback);
  result = swift_beginAccess();
  v5 = *v3;
  if (*v3)
  {
    swift_retain();
    v5(a1);
    return _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v5);
  }
  return result;
}

void @objc ActivitySessionClientConnection.setDataCryptor(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  void (*v6)(uint64_t);
  char *v7;

  v5 = &a1[direct field offset for ActivitySessionClientConnection.setDataCryptorCallback];
  swift_beginAccess();
  v6 = *(void (**)(uint64_t))v5;
  if (*(_QWORD *)v5)
  {
    swift_unknownObjectRetain();
    v7 = a1;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v6);
    v6(a3);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v6);
    swift_unknownObjectRelease();

  }
}

uint64_t ActivitySessionClientConnection.setActivity(activity:)()
{
  swift_beginAccess();
  swift_retain();
  PassthroughSubject.send(_:)();
  return swift_release();
}

uint64_t @objc ActivitySessionClientConnection.setActivity(activity:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  swift_beginAccess();
  v5 = a3;
  v6 = a1;
  swift_retain();
  PassthroughSubject.send(_:)();

  return swift_release();
}

Swift::Void __swiftcall ActivitySessionClientConnection.setAssociatedScene(sceneSessionIdentifier:)(Swift::String_optional sceneSessionIdentifier)
{
  ActivitySessionClientConnection.setState(state:error:)(sceneSessionIdentifier.value._countAndFlagsBits, (uint64_t)sceneSessionIdentifier.value._object, &direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback, (uint64_t (*)(_QWORD, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.setState(state:error:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v8 = v4 + *a3;
  result = swift_beginAccess();
  v10 = *(void (**)(uint64_t, uint64_t))v8;
  if (*(_QWORD *)v8)
  {
    v11 = *(_QWORD *)(v8 + 8);
    swift_retain();
    v10(a1, a2);
    return a4(v10, v11);
  }
  return result;
}

uint64_t @objc ActivitySessionClientConnection.setAssociatedScene(sceneSessionIdentifier:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t);
  char *v9;

  if (a3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = &a1[direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback];
  swift_beginAccess();
  v8 = *(void (**)(uint64_t, uint64_t))v7;
  if (*(_QWORD *)v7)
  {
    v9 = a1;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v8);
    v8(v4, v6);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v8);

  }
  return swift_bridgeObjectRelease();
}

uint64_t ActivitySessionClientConnection.receivedResource(atURL:withMetadata:fromParticipantWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (**v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4
                                                                + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  result = swift_beginAccess();
  v11 = *v9;
  if (*v9)
  {
    swift_retain();
    v11(a1, a2, a3, a4);
    return _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v11);
  }
  return result;
}

void @objc ActivitySessionClientConnection.receivedResource(atURL:withMetadata:fromParticipantWithIdentifier:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  void (*v15)(id, uint64_t, unint64_t, uint64_t);

  v8 = a3;
  v9 = a4;
  v10 = a1;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  v14 = &v10[direct field offset for ActivitySessionClientConnection.receivedResourceCallback];
  swift_beginAccess();
  v15 = *(void (**)(id, uint64_t, unint64_t, uint64_t))v14;
  if (*(_QWORD *)v14)
  {
    swift_retain();
    v15(v8, v11, v13, a5);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v15);
  }
  outlined consume of Data._Representation(v11, v13);

}

id ActivitySessionClientConnection.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ActivitySessionClientConnection.init()()
{
  void *v0;
  objc_class *ObjectType;
  _BYTE *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = v0;
  UUID.init()();
  v3 = &v2[direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback];
  *v3 = 0;
  v3[1] = 0;
  v4 = &v2[direct field offset for ActivitySessionClientConnection.setStateCallback];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v2[direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[direct field offset for ActivitySessionClientConnection.setDataCryptorCallback];
  *v6 = 0;
  v6[1] = 0;
  v7 = direct field offset for ActivitySessionClientConnection.setActivityPublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  swift_allocObject();
  *(_QWORD *)&v2[v7] = PassthroughSubject.init()();
  v8 = &v2[direct field offset for ActivitySessionClientConnection.receivedResourceCallback];
  *v8 = 0;
  v8[1] = 0;
  v2[direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs] = 2;

  v10.receiver = v2;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

id @objc ActivitySessionClientConnection.init()()
{
  return ActivitySessionClientConnection.init()();
}

uint64_t ActivitySessionClientConnection.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + direct field offset for ActivitySessionClientConnection.id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0
                                          + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0 + direct field offset for ActivitySessionClientConnection.setStateCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0
                                          + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0
                                          + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback));
  swift_release();
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0
                                                 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback));
}

id ActivitySessionClientConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1ACE2CA44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter();
  *a1 = result & 1;
  return result;
}

_BYTE *sub_1ACE2CA70(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2
           + direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs) = *result;
  return result;
}

uint64_t @objc ActivitySessionClientConnection.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + direct field offset for ActivitySessionClientConnection.id;
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1
                                          + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1 + direct field offset for ActivitySessionClientConnection.setStateCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1
                                          + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1
                                          + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback));
  swift_release();
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1
                                                 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback));
}

uint64_t type metadata accessor for ActivitySessionClientConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ActivitySessionClientConnection;
  if (!type metadata singleton initialization cache for ActivitySessionClientConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ActivitySessionClientConnection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for ActivitySessionClientConnection()
{
  return type metadata accessor for ActivitySessionClientConnection();
}

uint64_t sub_1ACE2CC14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUSandboxExtendedURL, @in_guaranteed Data, @in_guaranteed UInt64) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, _QWORD *, uint64_t *);
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;

  v5 = *(uint64_t (**)(uint64_t *, _QWORD *, uint64_t *))(v4 + 16);
  v8[1] = a3;
  v9 = a1;
  v7 = a4;
  v8[0] = a2;
  return v5(&v9, v8, &v7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUSandboxExtendedURL, @guaranteed Data, @unowned UInt64) -> ()(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v3 + 16))(*a1, *a2, a2[1], *a3);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String?) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD v5[2];

  v3 = *(uint64_t (**)(_QWORD *))(v2 + 16);
  v5[0] = a1;
  v5[1] = a2;
  return v3(v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String?) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CPActivitySessionState, @in_guaranteed Error?) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v5 = a2;
  v6 = a1;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

void partial apply for closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1ACE2CD74()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

id partial apply for closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1ACE2CDA8()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t type metadata accessor for TUConversationParticipant()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUConversationParticipant;
  if (!lazy cache variable for type metadata for TUConversationParticipant)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject)
  {
    v1 = type metadata accessor for TUConversationParticipant();
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject);
  }
  return result;
}

uint64_t RTCReportingKeys.Keys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACE2CED0 + 4 * byte_1ACF63B30[a1]))(0x617275642D707271, 0xEC0000006E6F6974);
}

unint64_t sub_1ACE2CED0()
{
  return 0xD000000000000012;
}

uint64_t *Histogram.defaultPubSubInitializeAckLatencyBuckets.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultPubSubInitializeAckLatencyBuckets != -1)
    swift_once();
  return &static Histogram.defaultPubSubInitializeAckLatencyBuckets;
}

uint64_t *Histogram.defaultAVCLatencyBuckets.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultAVCLatencyBuckets != -1)
    swift_once();
  return &static Histogram.defaultAVCLatencyBuckets;
}

uint64_t Histogram.rtcRepresentation.getter()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v11;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 128);
  v2 = v1();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v7 = *(_QWORD *)(v2 + 8 * i + 32);
      v8 = *(_QWORD *)(v1() + 16);
      swift_bridgeObjectRelease();
      if (i < v8 - 1)
      {
        if (v7)
        {
          v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          v11._object = v5;
          v6._countAndFlagsBits = 44;
          v6._object = (void *)0xE100000000000000;
          String.append(_:)(v6);
          String.append(_:)(v11);
          swift_bridgeObjectRelease();
        }
        else
        {
          v9._countAndFlagsBits = 44;
          v9._object = (void *)0xE100000000000000;
          String.append(_:)(v9);
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RTCReportingKeys.Keys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = RTCReportingKeys.Keys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == RTCReportingKeys.Keys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RTCReportingKeys.Keys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  RTCReportingKeys.Keys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RTCReportingKeys.Keys()
{
  unsigned __int8 *v0;

  RTCReportingKeys.Keys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RTCReportingKeys.Keys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  RTCReportingKeys.Keys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RTCReportingKeys.Keys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized RTCReportingKeys.Keys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RTCReportingKeys.Keys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = RTCReportingKeys.Keys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void one-time initialization function for defaultAVCLatencyBuckets()
{
  static Histogram.defaultAVCLatencyBuckets = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultAVCLatencyBuckets;
}

uint64_t static Histogram.defaultAVCLatencyBuckets.getter()
{
  return static Histogram.defaultAVCLatencyBuckets.getter(&one-time initialization token for defaultAVCLatencyBuckets);
}

void one-time initialization function for defaultPubSubInitializeAckLatencyBuckets()
{
  static Histogram.defaultPubSubInitializeAckLatencyBuckets = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultPubSubInitializeAckLatencyBuckets;
}

uint64_t static Histogram.defaultPubSubInitializeAckLatencyBuckets.getter()
{
  return static Histogram.defaultAVCLatencyBuckets.getter(&one-time initialization token for defaultPubSubInitializeAckLatencyBuckets);
}

uint64_t static Histogram.defaultAVCLatencyBuckets.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

unint64_t specialized RTCReportingKeys.Keys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RTCReportingKeys.Keys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys;
  if (!lazy protocol witness table cache variable for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for RTCReportingKeys.Keys, &type metadata for RTCReportingKeys.Keys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys);
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCReportingKeys()
{
  return &type metadata for RTCReportingKeys;
}

uint64_t getEnumTagSinglePayload for RTCReportingKeys.Keys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RTCReportingKeys.Keys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1ACE2D5D8 + 4 * byte_1ACF63B45[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1ACE2D60C + 4 * byte_1ACF63B40[v4]))();
}

uint64_t sub_1ACE2D60C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE2D614(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE2D61CLL);
  return result;
}

uint64_t sub_1ACE2D628(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE2D630);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1ACE2D634(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE2D63C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RTCReportingKeys.Keys()
{
  return &type metadata for RTCReportingKeys.Keys;
}

void one-time initialization function for ListenSystemEvents()
{
  static PluginPubSubServiceProvider.Rpc.ListenSystemEvents = 0xD00000000000001DLL;
  unk_1EECD0118 = 0x80000001ACF81C40;
}

uint64_t *PluginPubSubServiceProvider.Rpc.ListenSystemEvents.unsafeMutableAddressor()
{
  if (one-time initialization token for ListenSystemEvents != -1)
    swift_once();
  return &static PluginPubSubServiceProvider.Rpc.ListenSystemEvents;
}

void static PluginPubSubServiceProvider.Rpc.ListenSystemEvents.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x80000001ACF81C40;
}

void one-time initialization function for Subscribe()
{
  static PluginPubSubServiceProvider.Rpc.Subscribe = 0xD000000000000014;
  *(_QWORD *)algn_1EECD0130 = 0x80000001ACF81C60;
}

uint64_t *PluginPubSubServiceProvider.Rpc.Subscribe.unsafeMutableAddressor()
{
  if (one-time initialization token for Subscribe != -1)
    swift_once();
  return &static PluginPubSubServiceProvider.Rpc.Subscribe;
}

void static PluginPubSubServiceProvider.Rpc.Subscribe.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x80000001ACF81C60;
}

void one-time initialization function for Publish()
{
  static PluginPubSubServiceProvider.Rpc.Publish = 0xD000000000000012;
  unk_1EECD0148 = 0x80000001ACF81C80;
}

uint64_t *PluginPubSubServiceProvider.Rpc.Publish.unsafeMutableAddressor()
{
  if (one-time initialization token for Publish != -1)
    swift_once();
  return &static PluginPubSubServiceProvider.Rpc.Publish;
}

void static PluginPubSubServiceProvider.Rpc.Publish.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x80000001ACF81C80;
}

void one-time initialization function for CreateTopic()
{
  static PluginPubSubServiceProvider.Rpc.CreateTopic = 0xD000000000000016;
  unk_1EECD0160 = 0x80000001ACF81CA0;
}

{
  static PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic = 0xD00000000000002ELL;
  unk_1EECD06E0 = 0x80000001ACF83910;
}

uint64_t *PluginPubSubServiceProvider.Rpc.CreateTopic.unsafeMutableAddressor()
{
  if (one-time initialization token for CreateTopic != -1)
    swift_once();
  return &static PluginPubSubServiceProvider.Rpc.CreateTopic;
}

void static PluginPubSubServiceProvider.Rpc.CreateTopic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001ACF81CA0;
}

void one-time initialization function for UpsertTopicMetadata()
{
  static PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata = 0xD00000000000001ELL;
  unk_1EECD0178 = 0x80000001ACF81CC0;
}

uint64_t *PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata.unsafeMutableAddressor()
{
  if (one-time initialization token for UpsertTopicMetadata != -1)
    swift_once();
  return &static PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata;
}

void static PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x80000001ACF81CC0;
}

void one-time initialization function for FetchTopics()
{
  static PluginPubSubServiceProvider.Rpc.FetchTopics = 0xD000000000000016;
  *(_QWORD *)algn_1EECD0190 = 0x80000001ACF81CE0;
}

uint64_t *PluginPubSubServiceProvider.Rpc.FetchTopics.unsafeMutableAddressor()
{
  if (one-time initialization token for FetchTopics != -1)
    swift_once();
  return &static PluginPubSubServiceProvider.Rpc.FetchTopics;
}

void static PluginPubSubServiceProvider.Rpc.FetchTopics.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001ACF81CE0;
}

void one-time initialization function for ListenTopicSubscribers()
{
  static PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers = 0xD000000000000021;
  unk_1EECD01A8 = 0x80000001ACF81D00;
}

uint64_t *PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers.unsafeMutableAddressor()
{
  if (one-time initialization token for ListenTopicSubscribers != -1)
    swift_once();
  return &static PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers;
}

void static PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000021;
  a1[1] = 0x80000001ACF81D00;
}

uint64_t PluginPubSubServiceProvider.__allocating_init(client:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t PluginPubSubServiceProvider.init(client:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

id PluginPubSubServiceProvider.queue.getter()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
}

Swift::Void __swiftcall PluginPubSubServiceProvider.close()()
{
  uint64_t v0;

  (*(void (**)(void))(**(_QWORD **)(v0 + 16) + 280))();
}

Swift::Void __swiftcall PluginPubSubServiceProvider.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
  uint64_t v2;

  (*(void (**)(Swift::UInt64, Swift::UInt64))(**(_QWORD **)(v2 + 16) + 248))(_, localParticipantID);
}

uint64_t PluginPubSubServiceProvider.localParticipantID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 232))();
}

uint64_t PluginPubSubServiceProvider.listen()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Google_Protobuf_Empty();
  MEMORY[0x1E0C80A78](v49);
  v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<Google_Protobuf_Empty>);
  v48 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v47 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v39 - v13;
  UUID.init()();
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.pubsub);
  v45 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v45(v12, v14, v8);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v42 = v14;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v43 = v4;
    v21 = v20;
    v51[0] = v20;
    v40 = v9;
    v41 = v8;
    *(_DWORD *)v19 = 136315138;
    v22 = UUID.uuidString.getter();
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v51);
    v8 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v24 = v40;
    v44 = *(void (**)(char *, uint64_t))(v40 + 8);
    v44(v12, v8);
    _os_log_impl(&dword_1ACCCC000, v16, v17, "Creating Listen RPC stream traceId=%s", v19, 0xCu);
    swift_arrayDestroy();
    v25 = v21;
    v4 = v43;
    MEMORY[0x1AF44981C](v25, -1, -1);
    v26 = v19;
    v14 = v42;
    MEMORY[0x1AF44981C](v26, -1, -1);

    v27 = v24;
  }
  else
  {
    v44 = *(void (**)(char *, uint64_t))(v9 + 8);
    v44(v12, v8);

    v27 = v9;
  }
  Google_Protobuf_Empty.init()();
  v28 = v47;
  v29 = v49;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<Google_Protobuf_Empty> and conformance Just<A>, &demangling cache variable for type metadata for Just<Google_Protobuf_Empty>);
  v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v6);
  v31 = *(_QWORD *)(v1 + 16);
  v51[0] = 0xD00000000000001DLL;
  v51[1] = 0x80000001ACF81C40;
  v45(v4, v14, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v4, 0, 1, v8);
  v32 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 272);
  v33 = v14;
  v34 = type metadata accessor for CP_SystemEvent(0);
  v35 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E858], MEMORY[0x1E0D3E848]);
  v36 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
  v37 = v32(v51, v30, v4, v29, v34, v35, v36);
  swift_release();
  outlined destroy of UUID?((uint64_t)v4);
  swift_bridgeObjectRelease();
  v44(v33, v8);
  return v37;
}

uint64_t PluginPubSubServiceProvider.subscribe(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v2 = v1;
  v38 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  UUID.init()();
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.pubsub);
  v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v13(v9, v11, v5);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v34 = v13;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v36 = v1;
    v19 = v18;
    v40[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v35 = v6;
    v20 = UUID.uuidString.getter();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v40);
    v6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
    _os_log_impl(&dword_1ACCCC000, v14, v15, "Creating Subscribe RPC stream traceId=%s", v17, 0xCu);
    swift_arrayDestroy();
    v23 = v19;
    v2 = v36;
    MEMORY[0x1AF44981C](v23, -1, -1);
    v24 = v17;
    v13 = v34;
    MEMORY[0x1AF44981C](v24, -1, -1);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
  }

  v25 = *(_QWORD *)(v2 + 16);
  v40[0] = 0xD000000000000014;
  v40[1] = 0x80000001ACF81C60;
  v26 = (uint64_t)v37;
  v13(v37, v11, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v26, 0, 1, v5);
  v27 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25
                                                                                                  + 272);
  v28 = type metadata accessor for CP_SubscribeRequest(0);
  v29 = type metadata accessor for CP_SubscribeResponse(0);
  v30 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
  v31 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
  v32 = v27(v40, v38, v26, v28, v29, v30, v31);
  outlined destroy of UUID?(v26);
  swift_bridgeObjectRelease();
  v22(v11, v5);
  return v32;
}

uint64_t PluginPubSubServiceProvider.publish(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v2 = v1;
  v38 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  UUID.init()();
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.pubsub);
  v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v13(v9, v11, v5);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v34 = v13;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v36 = v1;
    v19 = v18;
    v40[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v35 = v6;
    v20 = UUID.uuidString.getter();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v40);
    v6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
    _os_log_impl(&dword_1ACCCC000, v14, v15, "Creating Publish RPC stream traceId=%s", v17, 0xCu);
    swift_arrayDestroy();
    v23 = v19;
    v2 = v36;
    MEMORY[0x1AF44981C](v23, -1, -1);
    v24 = v17;
    v13 = v34;
    MEMORY[0x1AF44981C](v24, -1, -1);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
  }

  v25 = *(_QWORD *)(v2 + 16);
  v40[0] = 0xD000000000000012;
  v40[1] = 0x80000001ACF81C80;
  v26 = (uint64_t)v37;
  v13(v37, v11, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v26, 0, 1, v5);
  v27 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25
                                                                                                  + 272);
  v28 = type metadata accessor for CP_PublishRequest(0);
  v29 = type metadata accessor for CP_PublishResponse(0);
  v30 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
  v31 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
  v32 = v27(v40, v38, v26, v28, v29, v30, v31);
  outlined destroy of UUID?(v26);
  swift_bridgeObjectRelease();
  v22(v11, v5);
  return v32;
}

uint64_t PluginPubSubServiceProvider.createTopic(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t TopicResponse;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t TopicRequest;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicRequest = type metadata accessor for CP_CreateTopicRequest(0);
  MEMORY[0x1E0C80A78](TopicRequest);
  v46 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<CP_CreateTopicRequest>);
  v48 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v47 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v40 - v15;
  UUID.init()();
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.pubsub);
  v45 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v45(v14, v16, v10);
  v18 = Logger.logObject.getter();
  v50 = v11;
  v19 = v18;
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v42 = v16;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc();
    v43 = v6;
    v24 = v23;
    v52[0] = v23;
    v40 = v10;
    v41 = a1;
    *(_DWORD *)v22 = 136315138;
    v25 = UUID.uuidString.getter();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v52);
    v10 = v40;
    a1 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v44 = *(void (**)(char *, uint64_t))(v50 + 8);
    v44(v14, v10);
    _os_log_impl(&dword_1ACCCC000, v19, v20, "Creating CreateTopic RPC request traceId=%s", v22, 0xCu);
    swift_arrayDestroy();
    v27 = v24;
    v6 = v43;
    MEMORY[0x1AF44981C](v27, -1, -1);
    v28 = v22;
    v16 = v42;
    MEMORY[0x1AF44981C](v28, -1, -1);
  }
  else
  {
    v44 = *(void (**)(char *, uint64_t))(v50 + 8);
    v44(v14, v10);
  }

  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v46, type metadata accessor for CP_CreateTopicRequest);
  v29 = v47;
  v30 = TopicRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<CP_CreateTopicRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<CP_CreateTopicRequest>);
  v31 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v8);
  v32 = *(_QWORD *)(v2 + 16);
  v52[0] = 0xD000000000000016;
  v52[1] = 0x80000001ACF81CA0;
  v45(v6, v16, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v6, 0, 1, v10);
  v33 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 272);
  v34 = v16;
  TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  v36 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
  v37 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
  v38 = v33(v52, v31, v6, v30, TopicResponse, v36, v37);
  swift_release();
  outlined destroy of UUID?((uint64_t)v6);
  swift_bridgeObjectRelease();
  v44(v34, v10);
  return v38;
}

uint64_t PluginPubSubServiceProvider.upsertTopicMetadata(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for CP_UpsertTopicMetadataRequest(0);
  MEMORY[0x1E0C80A78](v49);
  v46 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<CP_UpsertTopicMetadataRequest>);
  v48 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v47 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v40 - v15;
  UUID.init()();
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.pubsub);
  v45 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v45(v14, v16, v10);
  v18 = Logger.logObject.getter();
  v50 = v11;
  v19 = v18;
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v42 = v16;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc();
    v43 = v6;
    v24 = v23;
    v52[0] = v23;
    v40 = v10;
    v41 = a1;
    *(_DWORD *)v22 = 136315138;
    v25 = UUID.uuidString.getter();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v52);
    v10 = v40;
    a1 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v44 = *(void (**)(char *, uint64_t))(v50 + 8);
    v44(v14, v10);
    _os_log_impl(&dword_1ACCCC000, v19, v20, "Creating UpsertTopicMetadata RPC request traceId=%s", v22, 0xCu);
    swift_arrayDestroy();
    v27 = v24;
    v6 = v43;
    MEMORY[0x1AF44981C](v27, -1, -1);
    v28 = v22;
    v16 = v42;
    MEMORY[0x1AF44981C](v28, -1, -1);
  }
  else
  {
    v44 = *(void (**)(char *, uint64_t))(v50 + 8);
    v44(v14, v10);
  }

  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v46, type metadata accessor for CP_UpsertTopicMetadataRequest);
  v29 = v47;
  v30 = v49;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<CP_UpsertTopicMetadataRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<CP_UpsertTopicMetadataRequest>);
  v31 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v8);
  v32 = *(_QWORD *)(v2 + 16);
  v52[0] = 0xD00000000000001ELL;
  v52[1] = 0x80000001ACF81CC0;
  v45(v6, v16, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v6, 0, 1, v10);
  v33 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 272);
  v34 = v16;
  v35 = type metadata accessor for CP_UpsertTopicMetadataResponse(0);
  v36 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
  v37 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
  v38 = v33(v52, v31, v6, v30, v35, v36, v37);
  swift_release();
  outlined destroy of UUID?((uint64_t)v6);
  swift_bridgeObjectRelease();
  v44(v34, v10);
  return v38;
}

uint64_t PluginPubSubServiceProvider.fetchTopics()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t TopicsResponse;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t TopicsRequest;
  uint64_t v50;
  uint64_t v51[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicsRequest = type metadata accessor for CP_FetchTopicsRequest(0);
  MEMORY[0x1E0C80A78](TopicsRequest);
  v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<CP_FetchTopicsRequest>);
  v48 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v47 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v39 - v13;
  UUID.init()();
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.pubsub);
  v45 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v45(v12, v14, v8);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v42 = v14;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v43 = v4;
    v21 = v20;
    v51[0] = v20;
    v40 = v9;
    v41 = v8;
    *(_DWORD *)v19 = 136315138;
    v22 = UUID.uuidString.getter();
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v51);
    v8 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v24 = v40;
    v44 = *(void (**)(char *, uint64_t))(v40 + 8);
    v44(v12, v8);
    _os_log_impl(&dword_1ACCCC000, v16, v17, "Creating FetchTopics RPC request traceId=%s", v19, 0xCu);
    swift_arrayDestroy();
    v25 = v21;
    v4 = v43;
    MEMORY[0x1AF44981C](v25, -1, -1);
    v26 = v19;
    v14 = v42;
    MEMORY[0x1AF44981C](v26, -1, -1);

    v27 = v24;
  }
  else
  {
    v44 = *(void (**)(char *, uint64_t))(v9 + 8);
    v44(v12, v8);

    v27 = v9;
  }
  UnknownStorage.init()();
  v28 = v47;
  v29 = TopicsRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<CP_FetchTopicsRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<CP_FetchTopicsRequest>);
  v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v6);
  v31 = *(_QWORD *)(v1 + 16);
  v51[0] = 0xD000000000000016;
  v51[1] = 0x80000001ACF81CE0;
  v45(v4, v14, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v4, 0, 1, v8);
  v32 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 272);
  v33 = v14;
  TopicsResponse = type metadata accessor for CP_FetchTopicsResponse(0);
  v35 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
  v36 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
  v37 = v32(v51, v30, v4, v29, TopicsResponse, v35, v36);
  swift_release();
  outlined destroy of UUID?((uint64_t)v4);
  swift_bridgeObjectRelease();
  v44(v33, v8);
  return v37;
}

uint64_t PluginPubSubServiceProvider.listenTopicSubscribers(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v2 = v1;
  v38 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  UUID.init()();
  if (one-time initialization token for pubsub != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.pubsub);
  v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v13(v9, v11, v5);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v34 = v13;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v36 = v1;
    v19 = v18;
    v40[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v35 = v6;
    v20 = UUID.uuidString.getter();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v40);
    v6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
    _os_log_impl(&dword_1ACCCC000, v14, v15, "Creating ListenTopicSubscribers RPC stream traceId=%s", v17, 0xCu);
    swift_arrayDestroy();
    v23 = v19;
    v2 = v36;
    MEMORY[0x1AF44981C](v23, -1, -1);
    v24 = v17;
    v13 = v34;
    MEMORY[0x1AF44981C](v24, -1, -1);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
  }

  v25 = *(_QWORD *)(v2 + 16);
  v40[0] = 0xD000000000000021;
  v40[1] = 0x80000001ACF81D00;
  v26 = (uint64_t)v37;
  v13(v37, v11, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v26, 0, 1, v5);
  v27 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25
                                                                                                  + 272);
  v28 = type metadata accessor for CP_TopicSubscribersRequest(0);
  v29 = type metadata accessor for CP_TopicSubscribers(0);
  v30 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
  v31 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
  v32 = v27(v40, v38, v26, v28, v29, v30, v31);
  outlined destroy of UUID?(v26);
  swift_bridgeObjectRelease();
  v22(v11, v5);
  return v32;
}

uint64_t PluginPubSubServiceProvider.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PluginPubSubServiceProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PubSubServiceProvider.listen() in conformance PluginPubSubServiceProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t protocol witness for PubSubServiceProvider.listenTopicSubscribers(input:) in conformance PluginPubSubServiceProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0C960B0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of PubSubServiceProvider.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PubSubServiceProvider.localParticipantID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PubSubServiceProvider.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PubSubServiceProvider.updateVirtualParticipant(_:localParticipantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PubSubServiceProvider.listen()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PubSubServiceProvider.subscribe(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PubSubServiceProvider.publish(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PubSubServiceProvider.createTopic(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of PubSubServiceProvider.upsertTopicMetadata(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PubSubServiceProvider.fetchTopics()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PubSubServiceProvider.listenTopicSubscribers(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t type metadata accessor for PluginPubSubServiceProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for PluginPubSubServiceProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.__allocating_init(client:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.queue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.updateVirtualParticipant(_:localParticipantID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.localParticipantID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.listen()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.subscribe(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.publish(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.createTopic(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.upsertTopicMetadata(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.fetchTopics()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.listenTopicSubscribers(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

ValueMetadata *type metadata accessor for PluginPubSubServiceProvider.Rpc()
{
  return &type metadata for PluginPubSubServiceProvider.Rpc;
}

uint64_t DelegatesManager.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  DelegatesManager.init()(v0, v1, v2, v3);
  return v0;
}

uint64_t key path getter for Delegate.delegate : <A>Delegate<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[16];

  v7 = type metadata accessor for Delegate(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v9 = MEMORY[0x1AF449918](v11);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  *a5 = v9;
  return result;
}

void Delegate.delegate.getter()
{
  JUMPOUT(0x1AF449918);
}

uint64_t Delegate.delegate.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*Delegate.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = MEMORY[0x1AF449918](v1);
  return Delegate.delegate.modify;
}

uint64_t Delegate.delegate.modify()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

id Delegate.delegateQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

BOOL Delegate.isValid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = MEMORY[0x1AF449918](v0);
  if (v1)
    swift_unknownObjectRelease();
  return v1 != 0;
}

uint64_t Delegate.perform(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[6];

  v4 = v3;
  result = MEMORY[0x1AF449918](v3);
  if (result)
  {
    v9 = result;
    v10 = *(NSObject **)(v4 + 8);
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = *(_QWORD *)(a3 + 16);
    v11[3] = a1;
    v11[4] = a2;
    v11[5] = v9;
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = partial apply for closure #1 in Delegate.perform(_:);
    *(_QWORD *)(v12 + 24) = v11;
    v14[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v14[5] = v12;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    v14[3] = &block_descriptor_18;
    v13 = _Block_copy(v14);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v10, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
    LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v9 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t Delegate.performAsync(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v19[0] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1AF449918](v4);
  if (result)
  {
    v16 = result;
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = *(_QWORD *)(a3 + 16);
    v17[3] = a1;
    v17[4] = a2;
    v17[5] = v16;
    aBlock[4] = partial apply for closure #1 in Delegate.perform(_:);
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_9_0;
    v18 = _Block_copy(aBlock);
    swift_retain();
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    v19[1] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v14, v10, v18);
    _Block_release(v18);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v19[0] + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return swift_release();
  }
  return result;
}

uint64_t Delegate.init(_:queue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(a2 + 8) = a1;
  return result;
}

uint64_t DelegatesManager.delegates.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DelegatesManager.delegates.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DelegatesManager.delegates.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t DelegatesManager.lock.getter()
{
  return swift_retain();
}

Swift::Void __swiftcall DelegatesManager.prune()()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[3];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in DelegatesManager.prune()(v0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t closure #1 in DelegatesManager.prune()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  (*(void (**)(void))(*a1 + 104))();
  type metadata accessor for Delegate(255, *(_QWORD *)(v2 + 80), v3, v4);
  v5 = type metadata accessor for Array();
  MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF60], v5);
  v6 = _ArrayProtocol.filter(_:)();
  return (*(uint64_t (**)(uint64_t))(*a1 + 112))(v6);
}

_QWORD *DelegatesManager.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  type metadata accessor for Delegate(0, *(_QWORD *)(*v4 + 80), a3, a4);
  v4[2] = Array.init()();
  type metadata accessor for Lock();
  v5 = swift_allocObject();
  v6 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v5 + 16) = v6;
  *v6 = 0;
  v4[3] = v5;
  return v4;
}

uint64_t sub_1ACE2FF7C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1ACE2FFA4()
{
  return swift_deallocObject();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t sub_1ACE2FFBC()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Delegate.perform(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 24))(*(_QWORD *)(v0 + 40));
}

uint64_t type metadata accessor for Delegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Delegate);
}

uint64_t DelegatesManager.perform(_:)()
{
  return DelegatesManager.perform(_:)();
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[3];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in DelegatesManager.perform(_:)(v0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  return (*(uint64_t (**)(void))(*v0 + 128))();
}

uint64_t DelegatesManager.performAsync(_:)()
{
  return DelegatesManager.perform(_:)();
}

uint64_t closure #1 in DelegatesManager.perform(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  (*(void (**)(void))(*a1 + 104))();
  type metadata accessor for Delegate(255, *(_QWORD *)(v1 + 80), v2, v3);
  v4 = type metadata accessor for Array();
  MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF38], v4);
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

void DelegatesManager.addDelegate(delegate:queue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
  closure #1 in DelegatesManager.addDelegate(delegate:queue:)(v2, a1, a2);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 16));
}

uint64_t closure #1 in DelegatesManager.addDelegate(delegate:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t (*v7)(_QWORD *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  swift_unknownObjectRetain();
  v6 = a3;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  v11[5] = v6;
  v7 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 120))(v11);
  type metadata accessor for Delegate(255, v5, v8, v9);
  type metadata accessor for Array();
  Array.append(_:)();
  return v7(v11, 0);
}

void DelegatesManager.removeDelegate(delegate:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in DelegatesManager.removeDelegate(delegate:)(v0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t closure #1 in DelegatesManager.removeDelegate(delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[32];

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v2 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 120))(v7);
  type metadata accessor for Delegate(255, v1, v3, v4);
  v5 = type metadata accessor for Array();
  MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF28], v5);
  MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF58], v5);
  RangeReplaceableCollection<>.removeAll(where:)();
  return v2(v7, 0);
}

uint64_t DelegatesManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DelegatesManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1ACE303E0()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1ACE303F0()
{
  return 8;
}

_QWORD *sub_1ACE303FC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1ACE30408@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE30438(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 112);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACE30468()
{
  return 8;
}

void destroy for Delegate(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

}

uint64_t initializeWithCopy for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v4 = swift_unknownObjectWeakCopyAssign();
  v5 = *(void **)(a2 + 8);
  v6 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v5;
  v7 = v5;

  return a1;
}

uint64_t initializeWithTake for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = swift_unknownObjectWeakTakeAssign();
  v5 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t type metadata completion function for DelegatesManager()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DelegatesManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelegatesManager);
}

uint64_t method lookup function for DelegatesManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DelegatesManager.delegates.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of DelegatesManager.delegates.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of DelegatesManager.delegates.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DelegatesManager.prune()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DelegatesManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of DelegatesManager.perform(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of DelegatesManager.performAsync(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of DelegatesManager.addDelegate(delegate:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of DelegatesManager.removeDelegate(delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.removeDelegate(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  result = MEMORY[0x1AF449918]();
  if (result)
  {
    v3 = result;
    swift_unknownObjectRelease();
    return v3 == v1;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(a1, Delegate.performAsync(_:), a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.perform(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(a1, Delegate.perform(_:), a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = v4[2];
  v7 = v4[3];
  v8 = v4[4];
  v9 = type metadata accessor for Delegate(0, v6, a3, a4);
  return a2(v7, v8, v9);
}

BOOL partial apply for closure #1 in closure #1 in DelegatesManager.prune()()
{
  uint64_t v0;

  v0 = MEMORY[0x1AF449918]();
  if (v0)
    swift_unknownObjectRelease();
  return v0 != 0;
}

uint64_t DatagramClient.Configuration.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return outlined copy of DatagramEndpoint(v2, v3, v4, v5, v6);
}

uint64_t DatagramClient.Configuration.egressMessagePayloadMaxSizeBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t DatagramClient.Configuration.establishChannelMaxAttempts.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

double DatagramClient.Configuration.establishChannelRetryInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t DatagramClient.Configuration.init(endpoint:establishChannelMaxAttempts:establishChannelRetryInterval:egressMessagePayloadMaxSizeBytes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  char v5;
  __int128 v6;

  v5 = *(_BYTE *)(result + 32);
  v6 = *(_OWORD *)(result + 16);
  *(_OWORD *)a4 = *(_OWORD *)result;
  *(_OWORD *)(a4 + 16) = v6;
  *(_BYTE *)(a4 + 32) = v5;
  *(_QWORD *)(a4 + 40) = a3;
  *(_QWORD *)(a4 + 48) = a2;
  *(double *)(a4 + 56) = a5;
  return result;
}

uint64_t EgressMessage.datagram.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t EgressMessage.participantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EgressMessage.completion.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v2);
  return v2;
}

uint64_t EgressMessage.init(datagram:participantIDs:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  result = type metadata accessor for EgressMessage(0, a5, a6, v13);
  *(_QWORD *)(a7 + *(int *)(result + 36)) = a2;
  v15 = (_QWORD *)(a7 + *(int *)(result + 40));
  *v15 = a3;
  v15[1] = a4;
  return result;
}

void EgressMessageError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static EgressMessageError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int EgressMessageError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t DatagramClient.State.description.getter(char a1)
{
  if (!a1)
    return 0x7964616552;
  if (a1 == 1)
    return 0x676E69736F6C43;
  return 0x6465736F6C43;
}

BOOL static DatagramClient.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DatagramClient.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static DatagramClient.State.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

Swift::Int DatagramClient.State.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DatagramClient.State()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E69736F6C43;
  if (*v0 != 1)
    v1 = 0x6465736F6C43;
  if (*v0)
    return v1;
  else
    return 0x7964616552;
}

uint64_t DatagramClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  return outlined copy of DatagramEndpoint(v2, v3, v4, v5, v6);
}

id DatagramClient.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 80);
}

uint64_t DatagramClient.state.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t DatagramClient.state.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 88) = a1;
  return result;
}

uint64_t (*DatagramClient.state.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t DatagramClient.startDatagramChannelStream.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void DatagramClient.startDatagramChannelStream.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = (_QWORD *)(v1 + 96);
  swift_beginAccess();
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *v3 = a1;
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void (*DatagramClient.startDatagramChannelStream.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = *(_QWORD *)(v1 + 96);
  swift_bridgeObjectRetain();
  return DatagramClient.startDatagramChannelStream.modify;
}

void DatagramClient.startDatagramChannelStream.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;
  uint64_t v8;
  NSString *v9;
  Class v10;
  NSString *v11;
  Class v12;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v5 = NSClassFromString(v4);

    if (v5
      || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v7 = NSClassFromString(v6),
          v6,
          v7))
    {
      v8 = v2[4];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v8 + 96) = v3;
      swift_bridgeObjectRelease();
      swift_endAccess();
LABEL_8:
      free(v2);
      return;
    }
    __break(1u);
  }
  else
  {
    v9 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v10 = NSClassFromString(v9);

    if (v10
      || (v11 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v12 = NSClassFromString(v11),
          v11,
          v12))
    {
      *(_QWORD *)(v2[4] + 96) = v3;
      swift_endAccess();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  __break(1u);
}

uint64_t key path getter for DatagramClient.datagramChannelStreams : DatagramClient@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for DatagramClient.datagramChannelStreams : DatagramClient(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t DatagramClient.datagramChannelStreams.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DatagramClient.datagramChannelStreams.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*DatagramClient.datagramChannelStreams.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t key path setter for DatagramClient.$datagramChannelStreams : DatagramClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>.Publisher);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 200))(v6);
}

uint64_t DatagramClient.$datagramChannelStreams.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t DatagramClient.$datagramChannelStreams.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*DatagramClient.$datagramChannelStreams.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

uint64_t DatagramClient.__allocating_init(config:queue:)(__int128 *a1, void *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  DatagramClient.init(config:queue:)(a1, a2);
  return v4;
}

uint64_t DatagramClient.init(config:queue:)(__int128 *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v3 = v2;
  v46 = a2;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v40);
  v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8);
  v39 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *a1;
  v14 = *((_QWORD *)a1 + 2);
  v15 = *((_QWORD *)a1 + 3);
  v16 = *((_BYTE *)a1 + 32);
  v17 = *((_QWORD *)a1 + 5);
  v18 = *((_QWORD *)a1 + 6);
  v19 = MEMORY[0x1E0DEE9E0];
  v20 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v3 + 96) = MEMORY[0x1E0DEE9E0];
  v21 = v3 + OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  v47 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyDatagramChannelStream]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21, v13, v10);
  v22 = v46;
  *(_OWORD *)(v3 + 16) = v45;
  *(_QWORD *)(v3 + 32) = v14;
  *(_QWORD *)(v3 + 40) = v15;
  *(_BYTE *)(v3 + 48) = v16;
  *(_QWORD *)(v3 + 56) = v17;
  *(_QWORD *)(v3 + 64) = v18;
  *(_QWORD *)(v3 + 72) = v20;
  if (v22)
  {
    v23 = (uint64_t)v22;
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.unspecified.getter();
    v47 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v44, *MEMORY[0x1E0DEF8D0], v43);
    v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    v22 = 0;
  }
  *(_QWORD *)(v3 + 80) = v23;
  *(_BYTE *)(v3 + 88) = 0;
  v24 = one-time initialization token for log;
  v25 = v22;
  if (v24 != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)log);
  swift_retain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v54 = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = *(_QWORD *)(v3 + 24);
    v32 = *(_QWORD *)(v3 + 32);
    v33 = *(_QWORD *)(v3 + 40);
    v34 = *(_BYTE *)(v3 + 48);
    v35 = *(_QWORD *)(v3 + 72);
    v47 = *(_QWORD *)(v3 + 16);
    v48 = v31;
    v49 = v32;
    v50 = v33;
    v51 = v34;
    v52 = *(_OWORD *)(v3 + 56);
    v53 = v35;
    outlined copy of DatagramEndpoint(v47, v31, v32, v33, v34);
    v36 = String.init<A>(describing:)();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v27, v28, "DatagramClient init, config=%s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v30, -1, -1);
    MEMORY[0x1AF44981C](v29, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return v3;
}

uint64_t DatagramClient.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*(_QWORD *)v0 + 240))(v3);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for DatagramChannelError);
  outlined consume of DatagramEndpoint(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

  swift_bridgeObjectRelease();
  v4 = v0 + OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t DatagramClient.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*(_QWORD *)v0 + 240))(v3);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for DatagramChannelError);
  outlined consume of DatagramEndpoint(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

  swift_bridgeObjectRelease();
  v4 = v0 + OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocClassInstance();
}

void DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v16[1] = a2;
  v16[2] = a5;
  v16[0] = a4;
  v17 = type metadata accessor for DispatchWorkItemFlags();
  v20 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v16[4] = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v18 = *(_QWORD *)(v13 - 8);
  v19 = v13;
  MEMORY[0x1E0C80A78](v13);
  v16[3] = (char *)v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v15);
  v21 = a7;
  v22 = a8;
  v23 = a9;
  v24 = a10;
  type metadata accessor for DatagramChannelStream();
}

uint64_t sub_1ACE319F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v5 - 168) = a1;
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_BYTE *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v5 - 152) = v6;
  *(_QWORD *)(v5 - 144) = v7;
  *(_QWORD *)(v5 - 136) = v8;
  *(_QWORD *)(v5 - 128) = v9;
  *(_BYTE *)(v5 - 120) = v10;
  *(_OWORD *)(v5 - 112) = *(_OWORD *)(v3 + 56);
  *(_QWORD *)(v5 - 96) = v11;
  v12 = *(void **)(v3 + 80);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v13 = v4;
  swift_bridgeObjectRetain();
  v14 = *(_QWORD *)(v5 - 240);
  swift_retain();
  outlined copy of DatagramEndpoint(v6, v7, v8, v9, v10);
  v15 = v12;
  v16 = *(_QWORD *)(v5 - 232);
  v17 = DatagramChannelStream.__allocating_init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)((uint64_t)v15, v16, v13, v14, (__int128 *)(v5 - 152), *(_QWORD *)(v5 - 224), v15, v1);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v3;
  v18[3] = v17;
  v18[4] = v16;
  v18[5] = v13;
  *(_QWORD *)(v5 - 120) = partial apply for closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:);
  *(_QWORD *)(v5 - 112) = v18;
  *(_QWORD *)(v5 - 152) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v5 - 144) = 1107296256;
  *(_QWORD *)(v5 - 136) = thunk for @escaping @callee_guaranteed () -> ();
  *(_QWORD *)(v5 - 128) = &block_descriptor_19;
  v19 = _Block_copy((const void *)(v5 - 152));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v20 = *(_QWORD *)(v5 - 216);
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)(v5 - 160) = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v22 = *(_QWORD *)(v5 - 208);
  v21 = *(_QWORD *)(v5 - 200);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v20, v22, v19);
  _Block_release(v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 8))(v22, v21);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 192) + 8))(v20, *(_QWORD *)(v5 - 184));
  swift_release();
  *(_QWORD *)(v5 - 152) = v17;
  MEMORY[0x1AF44972C](&protocol conformance descriptor for DatagramChannelStream<A, B>, *(_QWORD *)(v5 - 168));
  v23 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v23;
}

uint64_t closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;
  void (*v42)(uint64_t *);
  uint64_t *v43;
  uint64_t *v44;
  __int128 v45;
  _QWORD v46[10];
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54[5];

  v49 = a2;
  v50 = a3;
  v48 = *a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MapError<Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue>, DatagramChannelError>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DatagramChannelError(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v47 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(v18))
  {
    v46[8] = v13;
    v46[9] = v17;
    v46[2] = v8;
    v46[3] = v9;
    v46[4] = v12;
    v46[5] = v10;
    v46[6] = v16;
    v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168);
    v27 = swift_bridgeObjectRetain();
    v28 = v26(v27);
    v29 = *(_QWORD *)(v28 + 16);
    v30 = a4;
    v31 = a1;
    v46[7] = v14;
    if (v29 && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(v50, a4), (v33 & 1) != 0))
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 16 * v32 + 8);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for log != -1)
        swift_once();
      v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)log);
      swift_bridgeObjectRetain_n();
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        v54[0] = v39;
        *(_DWORD *)v38 = 136315138;
        v46[1] = v38 + 4;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v30, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v36, v37, "Replacing existing channelStream for topic=%s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v39, -1, -1);
        MEMORY[0x1AF44981C](v38, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      ObjectType = swift_getObjectType();
      v41 = (uint64_t)v47;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 64))(v41, ObjectType, v34);
      swift_unknownObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v41, type metadata accessor for DatagramChannelError);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v42 = *(void (**)(uint64_t *))(*(_QWORD *)v31 + 184);
    swift_bridgeObjectRetain();
    swift_retain();
    v42(v54);
    v44 = v43;
    swift_isUniquelyReferenced_nonNull_native();
    v53 = *v44;
    *v44 = 0x8000000000000000;
    v45 = *(_OWORD *)(v48 + 96);
    v51 = *(_OWORD *)(v48 + 80);
    v52 = v45;
    type metadata accessor for DatagramChannelStream();
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)log);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1ACCCC000, v21, v22, "DatagramClient already closed", v23, 2u);
    MEMORY[0x1AF44981C](v23, -1, -1);
  }

  v24 = (uint64_t)v47;
  default argument 0 of DatagramChannelStream.close(error:)();
  (*(void (**)(uint64_t))(*v49 + 480))(v24);
  return outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for DatagramChannelError);
}

void closure #1 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)()
{
  type metadata accessor for DatagramChannelStream();
}

uint64_t sub_1ACE32420(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  return specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(v1, 1, v4, v3, v2, a1, (uint64_t)&protocol witness table for DatagramChannelStream<A, B>);
}

uint64_t closure #2 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
  type metadata accessor for DatagramChannelError(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #3 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  v5 = type metadata accessor for DatagramChannelError(0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  result = outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  if (v6 != 1)
    return PassthroughSubject.send(completion:)();
  return result;
}

uint64_t closure #4 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  v10 = type metadata accessor for DatagramChannelError(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a3 + 120))(v11) == 1)
  {
    NWConnectionGroup.cancel()();
    default argument 0 of DatagramChannelStream.close(error:)();
    (*(void (**)(char *))(*(_QWORD *)a2 + 480))(v13);
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for DatagramChannelError);
  }
  v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 144);
  v17 = swift_bridgeObjectRetain();
  v18 = v16(v17);
  if (!*(_QWORD *)(v18 + 16) || (v19 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 472))(v14);
  }
  v21 = *(_BYTE *)(*(_QWORD *)(v18 + 56) + v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 472))(v14);
  return result;
}

Swift::Void __swiftcall DatagramClient.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v13 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = *(_QWORD *)(v1 + 80);
  v10 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in DatagramClient.close();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8_0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  swift_release();
}

uint64_t closure #1 in DatagramClient.close()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(_QWORD *)v4 + 240))(v2);
    swift_release();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v2, type metadata accessor for DatagramChannelError);
  }
  return result;
}

uint64_t DatagramClient._close(error:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  char *v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_t v77;
  uint64_t v78;
  uint64_t v79;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v67 - v7;
  v9 = type metadata accessor for DatagramChannelError(0);
  ObjectType = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v67 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v67 - v18;
  v20 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  result = ((uint64_t (*)(uint64_t))v20)(v17);
  if (!(_BYTE)result)
  {
    v72 = v16;
    v73 = (char *)v9;
    v69 = v1;
    if (one-time initialization token for log != -1)
LABEL_42:
      swift_once();
    v22 = type metadata accessor for Logger();
    v23 = __swift_project_value_buffer(v22, (uint64_t)log);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v19, type metadata accessor for DatagramChannelError);
    v24 = v69;
    swift_retain_n();
    v76 = v23;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = MEMORY[0x1E0DEE9B8];
    if (v27)
    {
      v29 = v26;
      v77 = v25;
      v30 = swift_slowAlloc();
      v75 = swift_slowAlloc();
      v79 = v75;
      *(_DWORD *)v30 = 136315650;
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v8, type metadata accessor for DatagramChannelError);
      v31 = v73;
      (*(void (**)(char *, _QWORD, uint64_t, char *))(ObjectType + 56))(v8, 0, 1, v73);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for DatagramChannelError?);
      if ((*(unsigned int (**)(char *, uint64_t, char *))(ObjectType + 48))(v6, 1, v31) == 1)
      {
        v32 = 0xE300000000000000;
        v33 = 7104878;
      }
      else
      {
        v35 = (uint64_t)v6;
        v36 = (uint64_t)v72;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v35, (uint64_t)v72, type metadata accessor for DatagramChannelError);
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v36, v13, type metadata accessor for DatagramChannelError);
        v33 = String.init<A>(reflecting:)();
        v32 = v37;
        outlined destroy of ActivitySession.DomainAssertionWrapper(v36, type metadata accessor for DatagramChannelError);
      }
      outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for DatagramChannelError?);
      v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v38 = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for DatagramChannelError);
      *(_WORD *)(v30 + 12) = 2048;
      v6 = v69;
      v39 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 168))(v38) + 16);
      swift_release();
      swift_bridgeObjectRelease();
      v78 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v40 = swift_release();
      *(_WORD *)(v30 + 22) = 2080;
      v41 = ((unsigned __int8 (*)(uint64_t))v20)(v40);
      if (v41)
      {
        v19 = v72;
        v8 = v73;
        if (v41 == 1)
        {
          v42 = 0xE700000000000000;
          v43 = 0x676E69736F6C43;
        }
        else
        {
          v42 = 0xE600000000000000;
          v43 = 0x6465736F6C43;
        }
        v34 = v69;
      }
      else
      {
        v42 = 0xE500000000000000;
        v43 = 0x7964616552;
        v34 = v69;
        v19 = v72;
        v8 = v73;
      }
      v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v44 = v77;
      _os_log_impl(&dword_1ACCCC000, v77, v29, "Closing, error=%s topic-count=%ld state=%s", (uint8_t *)v30, 0x20u);
      v28 = MEMORY[0x1E0DEE9B8];
      ObjectType = v75;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](ObjectType, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);

    }
    else
    {
      swift_release();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for DatagramChannelError);

      swift_release_n();
      v34 = v24;
      v19 = v72;
      v8 = v73;
    }
    a1 = 1;
    v68 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 128);
    v45 = v68(1);
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 168))(v45);
    v20 = 0;
    v48 = *(_QWORD *)(v46 + 64);
    v74 = v46 + 64;
    v77 = (os_log_t)v46;
    v49 = 1 << *(_BYTE *)(v46 + 32);
    v50 = -1;
    if (v49 < 64)
      v50 = ~(-1 << v49);
    v13 = v50 & v48;
    v75 = (unint64_t)(v49 + 63) >> 6;
    *(_QWORD *)&v47 = 136315138;
    v71 = v47;
    v70 = v28 + 8;
    while (1)
    {
      if (v13)
      {
        v51 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v52 = v51 | (v20 << 6);
      }
      else
      {
        v53 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v53 >= v75)
          goto LABEL_38;
        v54 = *(_QWORD *)(v74 + 8 * v53);
        ++v20;
        if (!v54)
        {
          v20 = v53 + 1;
          if (v53 + 1 >= v75)
            goto LABEL_38;
          v54 = *(_QWORD *)(v74 + 8 * v20);
          if (!v54)
          {
            v20 = v53 + 2;
            if (v53 + 2 >= v75)
              goto LABEL_38;
            v54 = *(_QWORD *)(v74 + 8 * v20);
            if (!v54)
            {
              v55 = v53 + 3;
              if (v55 >= v75)
              {
LABEL_38:
                swift_release();
                return v68(2);
              }
              v54 = *(_QWORD *)(v74 + 8 * v55);
              if (!v54)
              {
                while (1)
                {
                  v20 = v55 + 1;
                  if (__OFADD__(v55, 1))
                    goto LABEL_41;
                  if (v20 >= v75)
                    goto LABEL_38;
                  v54 = *(_QWORD *)(v74 + 8 * v20);
                  ++v55;
                  if (v54)
                    goto LABEL_35;
                }
              }
              v20 = v55;
            }
          }
        }
LABEL_35:
        v13 = (v54 - 1) & v54;
        v52 = __clz(__rbit64(v54)) + (v20 << 6);
      }
      v56 = 16 * v52;
      v57 = (uint64_t *)((char *)v77[6].isa + v56);
      v58 = *v57;
      v6 = (char *)v57[1];
      v59 = (uint64_t *)((char *)v77[7].isa + v56);
      a1 = *v59;
      v60 = v59[1];
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain();
      v61 = Logger.logObject.getter();
      v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = swift_slowAlloc();
        v64 = swift_slowAlloc();
        v79 = v64;
        *(_DWORD *)v63 = v71;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v63 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, (unint64_t)v6, &v79);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v61, v62, "Closing datagram-channel stream, topic=%s", (uint8_t *)v63, 0xCu);
        swift_arrayDestroy();
        v65 = v64;
        v8 = v73;
        MEMORY[0x1AF44981C](v65, -1, -1);
        v66 = v63;
        v19 = v72;
        MEMORY[0x1AF44981C](v66, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      ObjectType = swift_getObjectType();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 64))(v19, ObjectType, v60);
      swift_unknownObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for DatagramChannelError);
    }
  }
  return result;
}

id protocol witness for UnreliableMessengerServiceProvider.queue.getter in conformance DatagramClient()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 80);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v13 = (_QWORD *)*a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v21 = (_QWORD *)*a5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (_QWORD *)(v21[7] + 16 * v15);
      result = swift_unknownObjectRelease();
      *v22 = a1;
      v22[1] = a7;
      return result;
    }
LABEL_11:
    v21[(v15 >> 6) + 8] |= 1 << v15;
    v26 = (uint64_t *)(v21[6] + 16 * v15);
    *v26 = a2;
    v26[1] = a3;
    v27 = (_QWORD *)(v21[7] + 16 * v15);
    *v27 = a1;
    v27[1] = a7;
    v28 = v21[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v21[2] = v30;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v19 & 1) == (v25 & 1))
  {
    v15 = v24;
    v21 = (_QWORD *)*a5;
    if ((v19 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized static DatagramChannelError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD v13[2];

  v4 = type metadata accessor for NWError();
  v13[0] = *(_QWORD *)(v4 - 8);
  v13[1] = v4;
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for DatagramChannelError(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DatagramChannelError, DatagramChannelError));
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v13 + *(int *)(v9 + 48) - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DatagramChannelError);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, (uint64_t)v11, type metadata accessor for DatagramChannelError);
  v12 = (char *)sub_1ACE333F0 + 4 * byte_1ACF63D10[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1ACE333F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  outlined init with copy of ActivitySession.DomainAssertionWrapper(v0, v2, type metadata accessor for DatagramChannelError);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v2, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
    outlined destroy of UUID?(v0, &demangling cache variable for type metadata for (DatagramChannelError, DatagramChannelError));
    v4 = 0;
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(v3, v1, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
    v4 = specialized static DatagramChannelConnectError.== infix(_:_:)(v2, v1);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v1, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v2, (uint64_t (*)(_QWORD))type metadata accessor for DatagramChannelConnectError);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v0, type metadata accessor for DatagramChannelError);
  }
  return v4 & 1;
}

uint64_t type metadata accessor for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EgressMessage);
}

uint64_t sub_1ACE3359C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE335CC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for DatagramChannelError(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DatagramChannelError);
}

uint64_t partial apply for closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)()
{
  uint64_t v0;

  return closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t sub_1ACE33628()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DatagramClient.close()()
{
  return closure #1 in DatagramClient.close()();
}

unint64_t lazy protocol witness table accessor for type DatagramClient.State and conformance DatagramClient.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatagramClient.State and conformance DatagramClient.State;
  if (!lazy protocol witness table cache variable for type DatagramClient.State and conformance DatagramClient.State)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for DatagramClient.State, &type metadata for DatagramClient.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatagramClient.State and conformance DatagramClient.State);
  }
  return result;
}

uint64_t sub_1ACE336E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE33714(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 128))(*a1);
}

uint64_t sub_1ACE33740@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE33770(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 152);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACE337A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
}

uint64_t *initializeBufferWithCopyOfBuffer for DatagramChannelError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for NWError();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = type metadata accessor for NWError();
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v8))
      {
        v10 = type metadata accessor for DatagramChannelConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
      }
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for DatagramChannelError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v5 = type metadata accessor for NWError();
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v7 = a1;
    return v6(v7, v5);
  }
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for NWError();
    v4 = *(_QWORD *)(v3 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
    if (!(_DWORD)result)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
      v7 = a1;
      v5 = v3;
      return v6(v7, v5);
    }
  }
  return result;
}

void *initializeWithCopy for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v10 = type metadata accessor for NWError();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for NWError();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      v9 = type metadata accessor for DatagramChannelConnectError();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for DatagramChannelError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for NWError();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for NWError();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
      {
        v9 = type metadata accessor for DatagramChannelConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *initializeWithTake for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v10 = type metadata accessor for NWError();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for NWError();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      v9 = type metadata accessor for DatagramChannelConnectError();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *assignWithTake for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for DatagramChannelError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for NWError();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for NWError();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
      {
        v9 = type metadata accessor for DatagramChannelConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for DatagramChannelError()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for DatagramChannelConnectError();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NWError();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for DatagramClient.Configuration(uint64_t a1)
{
  return outlined consume of DatagramEndpoint(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for DatagramClient.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for DatagramClient.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of DatagramEndpoint(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for DatagramClient.Configuration(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of DatagramEndpoint(v5, v6, v7, v8, v9);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatagramClient.Configuration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DatagramClient.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatagramClient.Configuration()
{
  return &type metadata for DatagramClient.Configuration;
}

uint64_t type metadata completion function for EgressMessage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EgressMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v11 = *v10;
    v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = (unint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    swift_bridgeObjectRetain();
    if (v14 < 0xFFFFFFFF)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      return v4;
    }
    v15 = v13[1];
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for EgressMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = ((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (unint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  swift_bridgeObjectRetain();
  if (v11 < 0xFFFFFFFF)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  else
  {
    v12 = v10[1];
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if (*v10 < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      v14 = *(_QWORD *)(v11 + 8);
      *v10 = v12;
      v10[1] = v14;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)v10 = *(_OWORD *)v11;
    return a1;
  }
  if (v12 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v13 = *(_QWORD *)(v11 + 8);
  *v10 = v12;
  v10[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  else
  {
    v12 = v10[1];
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
  }
  return a1;
}

uint64_t assignWithTake for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  if (*v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v13 = v10[1];
      *v9 = v11;
      v9[1] = v13;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    return a1;
  }
  if (v11 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v12 = v10[1];
  *v9 = v11;
  v9[1] = v12;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EgressMessage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1ACE345FC + 4 * byte_1ACF63D15[v10]))();
  }
}

void storeEnumTagSinglePayload for EgressMessage(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1ACE34784()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1ACE34808);
}

void sub_1ACE3478C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1ACE34794);
  JUMPOUT(0x1ACE34808);
}

void sub_1ACE347DC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1ACE34808);
}

void sub_1ACE347E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1ACE34808);
}

uint64_t sub_1ACE347EC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x1ACE347F8);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x1ACE34808);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t storeEnumTagSinglePayload for EgressMessageError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACE3486C + 4 * byte_1ACF63D29[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACE348A0 + 4 * byte_1ACF63D24[v4]))();
}

uint64_t sub_1ACE348A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE348A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE348B0);
  return result;
}

uint64_t sub_1ACE348BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE348C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACE348C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE348D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EgressMessageError()
{
  return &type metadata for EgressMessageError;
}

void type metadata accessor for DatagramChannelDefinition()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t ObjC metadata update function for DatagramClient()
{
  return type metadata accessor for DatagramClient(0);
}

uint64_t type metadata accessor for DatagramClient(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DatagramClient);
}

void type metadata completion function for DatagramClient()
{
  unint64_t v0;

  type metadata accessor for Published<[String : AnyDatagramChannelStream]>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for DatagramClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatagramClient.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DatagramClient.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DatagramClient.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of DatagramClient.startDatagramChannelStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of DatagramClient.startDatagramChannelStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of DatagramClient.startDatagramChannelStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of DatagramClient.datagramChannelStreams.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of DatagramClient.datagramChannelStreams.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of DatagramClient.datagramChannelStreams.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of DatagramClient.$datagramChannelStreams.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of DatagramClient.$datagramChannelStreams.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of DatagramClient.$datagramChannelStreams.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of DatagramClient.__allocating_init(config:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of DatagramClient.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of DatagramClient._close(error:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t storeEnumTagSinglePayload for DatagramClient.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1ACE34B24 + 4 * byte_1ACF63D33[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1ACE34B58 + 4 * byte_1ACF63D2E[v4]))();
}

uint64_t sub_1ACE34B58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE34B60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE34B68);
  return result;
}

uint64_t sub_1ACE34B74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE34B7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1ACE34B80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE34B88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DatagramClient.State()
{
  return &type metadata for DatagramClient.State;
}

uint64_t sub_1ACE34BA4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)()
{
  closure #1 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)();
}

uint64_t partial apply for closure #3 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1)
{
  return closure #3 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(a1);
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #4 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t CP_ResponseStatus.init()()
{
  return 0;
}

uint64_t CP_ResponseStatus.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized CP_ResponseStatus.init(rawValue:));
}

uint64_t CP_ResponseStatus.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return qword_1ACF67630[result];
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CP_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus((uint64_t (*)(void))specialized CP_ResponseStatus.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CP_ResponseStatus()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_1ACF67630[result];
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CP_ResponseStatus@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, specialized CP_ResponseStatus.init(rawValue:), a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CP_ResponseStatus(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
    v2 = qword_1ACF67630[v2];
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_ResponseStatus()
{
  lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CP_ResponseStatus(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t *CP_ResponseStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static CP_ResponseStatus.allCases;
}

uint64_t static CP_ResponseStatus.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_ResponseStatus.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_ResponseStatus.allCases);
}

uint64_t (*static CP_ResponseStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_ResponseStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_ResponseStatus.allCases, a1);
}

uint64_t (*CP_Record.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_Record.data.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.seqNum.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v7 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SequenceNumber);
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path getter for CP_Record.seqNum : CP_Record@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v8 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SequenceNumber);
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path setter for CP_Record.seqNum : CP_Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for CP_SequenceNumber(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  v8 = a2 + *(int *)(type metadata accessor for CP_Record(0) + 36);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v8, type metadata accessor for CP_SequenceNumber);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t CP_Record.seqNum.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_Record(0) + 36);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v3, type metadata accessor for CP_SequenceNumber);
  v4 = type metadata accessor for CP_SequenceNumber(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t CP_SequenceNumber.init()@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for CP_SequenceNumber(0);
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

void (*CP_Record.seqNum.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_SequenceNumber(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_Record(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_SequenceNumber);
  }
  return CP_Record.seqNum.modify;
}

void CP_Record.seqNum.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for CP_SequenceNumber?, type metadata accessor for CP_SequenceNumber);
}

BOOL CP_Record.hasSeqNum.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v5 = type metadata accessor for CP_SequenceNumber(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  return v6;
}

Swift::Void __swiftcall CP_Record.clearSeqNum()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CP_Record(0) + 36);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v2 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*CP_Record.destinationParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_Record.encryptionID.getter(type metadata accessor for CP_Record, a1);
}

uint64_t CP_Record.encryptionID.setter(uint64_t a1)
{
  return CP_Record.encryptionID.setter(a1, type metadata accessor for CP_Record);
}

uint64_t CP_EncryptionID.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1ACF5CB20;
  type metadata accessor for CP_EncryptionID(0);
  return UnknownStorage.init()();
}

void (*CP_Record.encryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_Record(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

void CP_Record.encryptionID.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for CP_EncryptionID?, type metadata accessor for CP_EncryptionID);
}

BOOL CP_Record.hasEncryptionID.getter()
{
  return CP_Record.hasEncryptionID.getter(type metadata accessor for CP_Record);
}

Swift::Void __swiftcall CP_Record.clearEncryptionID()()
{
  CP_Record.clearEncryptionID()(type metadata accessor for CP_Record);
}

uint64_t (*CP_Record.sentEpochMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for CP_Record, a1);
}

uint64_t CP_Record.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for CP_Record);
}

uint64_t (*CP_Record.unknownFields.modify())()
{
  type metadata accessor for CP_Record(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = 0;
  v2 = type metadata accessor for CP_Record(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 36);
  v4 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 40);
  v6 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t CP_KeyValue.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CP_KeyValue.key.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CP_KeyValue.key.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_KeyValue.dataValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t CP_KeyValue.dataValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CP_KeyValue.dataValue.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_KeyValue.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_KeyValue, a1);
}

uint64_t CP_KeyValue.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_KeyValue);
}

uint64_t (*CP_KeyValue.unknownFields.modify())()
{
  type metadata accessor for CP_KeyValue(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_KeyValue.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1ACF5CB20;
  type metadata accessor for CP_KeyValue(0);
  return UnknownStorage.init()();
}

uint64_t CP_SequenceNumber.publisherParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CP_SequenceNumber.publisherParticipantID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CP_SequenceNumber.publisherParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SequenceNumber.seqNum.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CP_SequenceNumber.seqNum.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*CP_SequenceNumber.seqNum.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SequenceNumber.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_SequenceNumber, a1);
}

uint64_t CP_SequenceNumber.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_SequenceNumber);
}

uint64_t (*CP_SequenceNumber.unknownFields.modify())()
{
  type metadata accessor for CP_SequenceNumber(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_EncryptionID.uuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t CP_EncryptionID.uuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*CP_EncryptionID.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_EncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_EncryptionID, a1);
}

uint64_t CP_EncryptionID.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_EncryptionID);
}

uint64_t (*CP_EncryptionID.unknownFields.modify())()
{
  type metadata accessor for CP_EncryptionID(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

uint64_t CP_TopicSubscribersRequest.operation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

uint64_t (*CP_TopicSubscribersRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.topicTerminationAck.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t key path getter for CP_TopicSubscribersRequest.topicTerminationAck : CP_TopicSubscribersRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_5:
    *a2 = 0;
    a2[1] = 0xE000000000000000;
    type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t CP_TopicSubscribersRequest.topicTerminationAck.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.init()@<X0>(_QWORD *a1@<X8>)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.init()((void (*)(_QWORD))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, a1);
}

void (*CP_TopicSubscribersRequest.topicTerminationAck.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      return CP_TopicSubscribersRequest.topicTerminationAck.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  }
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  UnknownStorage.init()();
  return CP_TopicSubscribersRequest.topicTerminationAck.modify;
}

void CP_TopicSubscribersRequest.topicTerminationAck.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t CP_TopicSubscribersRequest.topicTerminationRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  return UnknownStorage.init()();
}

uint64_t CP_TopicSubscribersRequest.topicTerminationRequest.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  return UnknownStorage.init()();
}

void (*CP_TopicSubscribersRequest.topicTerminationRequest.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    v7[2] = 0;
    *((_BYTE *)v7 + 24) = 1;
    UnknownStorage.init()();
    return CP_TopicSubscribersRequest.topicTerminationRequest.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return CP_TopicSubscribersRequest.topicTerminationRequest.modify;
}

void CP_TopicSubscribersRequest.topicTerminationRequest.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t CP_TopicSubscribersRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_TopicSubscribersRequest, a1);
}

uint64_t CP_TopicSubscribersRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t (*CP_TopicSubscribersRequest.unknownFields.modify())()
{
  type metadata accessor for CP_TopicSubscribersRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck) & 1;
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminatedAck.topicName.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminatedAck.unknownFields.modify())()
{
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminationRequest.topicName.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.reason.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.reason.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminationRequest.reason.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminationRequest.unknownFields.modify())()
{
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.init()()
{
  return 0;
}

BOOL CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.rawValue.getter(_BOOL8 result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason()
{
  lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason();
  return Enum.hash(into:)();
}

uint64_t CP_TopicSubscribersRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation, (void (*)(_QWORD))type metadata accessor for CP_TopicSubscribersRequest, a1);
}

uint64_t *CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases);
}

uint64_t (*static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases, a1);
}

uint64_t (*CP_TopicSubscribers.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.terminateTopic.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_TopicSubscribers.terminateTopic.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CP_TopicSubscribers.terminateTopic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_TopicSubscribers, a1);
}

uint64_t CP_TopicSubscribers.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribers);
}

uint64_t (*CP_TopicSubscribers.unknownFields.modify())()
{
  type metadata accessor for CP_TopicSubscribers(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_TopicSubscribers.TopicSubscribersInfo.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_TopicSubscribers.TopicSubscribersInfo.subscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, a1);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t (*CP_TopicSubscribers.TopicSubscribersInfo.unknownFields.modify())()
{
  type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.init()@<X0>(_QWORD *a1@<X8>)
{
  return CP_TopicSubscribers.TopicSubscribersInfo.init()((void (*)(_QWORD))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, a1);
}

uint64_t (*CP_TopicSubscribers.TerminateTopic.topicName.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TerminateTopic.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_TopicSubscribers.TerminateTopic, a1);
}

uint64_t CP_TopicSubscribers.TerminateTopic.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t (*CP_TopicSubscribers.TerminateTopic.unknownFields.modify())()
{
  type metadata accessor for CP_TopicSubscribers.TerminateTopic(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TerminateTopic.init()@<X0>(_QWORD *a1@<X8>)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.init()((void (*)(_QWORD))type metadata accessor for CP_TopicSubscribers.TerminateTopic, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.init()@<X0>(void (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t CP_TopicSubscribers.init()@<X0>(_QWORD *a1@<X8>)
{
  return CP_TopicSubscribers.init()(MEMORY[0x1E0DEE9D8], (void (*)(_QWORD))type metadata accessor for CP_TopicSubscribers, a1);
}

uint64_t CP_SystemEvent.event.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of CP_SystemEvent.OneOf_Event?(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

uint64_t CP_SystemEvent.event.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = outlined consume of CP_SystemEvent.OneOf_Event?(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = a3;
  return result;
}

uint64_t (*CP_SystemEvent.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SystemEvent.topicCreated.getter()
{
  uint64_t *v0;
  uint64_t v1;

  if ((v0[2] & 1) != 0)
    return 0;
  v1 = *v0;
  outlined copy of CP_SystemEvent.OneOf_Event();
  return v1;
}

uint64_t CP_SystemEvent.topicCreated.setter(uint64_t a1, uint64_t a2)
{
  return CP_SystemEvent.topicCreated.setter(a1, a2, 0);
}

uint64_t (*CP_SystemEvent.topicCreated.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;

  a1[2] = v1;
  if ((v1[2] & 1) != 0)
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v3 = *v1;
    v4 = v1[1];
    outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a1 = v3;
  a1[1] = v4;
  return CP_SystemEvent.topicCreated.modify;
}

uint64_t CP_SystemEvent.topicCreated.modify(uint64_t *a1, char a2)
{
  return CP_SystemEvent.topicCreated.modify(a1, a2, 0);
}

uint64_t CP_SystemEvent.topicDestroyed.getter()
{
  uint64_t *v0;
  int v1;
  uint64_t v3;

  v1 = *((unsigned __int8 *)v0 + 16);
  if (v1 == 255 || (v1 & 1) == 0)
    return 0;
  v3 = *v0;
  outlined copy of CP_SystemEvent.OneOf_Event();
  return v3;
}

uint64_t CP_SystemEvent.topicDestroyed.setter(uint64_t a1, uint64_t a2)
{
  return CP_SystemEvent.topicCreated.setter(a1, a2, 1);
}

uint64_t CP_SystemEvent.topicCreated.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = outlined consume of CP_SystemEvent.OneOf_Event?(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = a3;
  return result;
}

uint64_t (*CP_SystemEvent.topicDestroyed.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  int v3;
  uint64_t v5;
  unint64_t v6;

  a1[2] = v1;
  v3 = *((unsigned __int8 *)v1 + 16);
  if (v3 == 255 || (v3 & 1) == 0)
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  else
  {
    v5 = *v1;
    v6 = v1[1];
    outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a1 = v5;
  a1[1] = v6;
  return CP_SystemEvent.topicDestroyed.modify;
}

uint64_t CP_SystemEvent.topicDestroyed.modify(uint64_t *a1, char a2)
{
  return CP_SystemEvent.topicCreated.modify(a1, a2, 1);
}

uint64_t CP_SystemEvent.topicCreated.modify(uint64_t *a1, char a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *a1;
  v7 = *(_QWORD *)v5;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_BYTE *)(v5 + 16);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    outlined consume of CP_SystemEvent.OneOf_Event?(v7, v8, v9);
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v5 + 8) = v4;
    *(_BYTE *)(v5 + 16) = a3;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = outlined consume of CP_SystemEvent.OneOf_Event?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v5 + 8) = v4;
    *(_BYTE *)(v5 + 16) = a3;
  }
  return result;
}

uint64_t CP_SystemEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_SystemEvent, a1);
}

uint64_t CP_SystemEvent.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SystemEvent);
}

uint64_t (*CP_SystemEvent.unknownFields.modify())()
{
  type metadata accessor for CP_SystemEvent(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static CP_SystemEvent.OneOf_Event.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return specialized static CP_SystemEvent.OneOf_Event.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t a2)
{
  return specialized static CP_SystemEvent.OneOf_Event.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t CP_SystemEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
  type metadata accessor for CP_SystemEvent(0);
  return UnknownStorage.init()();
}

uint64_t CP_SubscribeRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

uint64_t CP_SubscribeRequest.operation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

uint64_t (*CP_SubscribeRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.initialize.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    v8 = MEMORY[0x1E0DEE9D8];
    a1[2] = MEMORY[0x1E0DEE9D8];
    a1[3] = v8;
    v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    a1[4] = 0;
    a1[5] = 0;
    UnknownStorage.init()();
    v10 = (char *)a1 + *(int *)(v9 + 40);
    v11 = type metadata accessor for CP_EncryptionID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t CP_SubscribeRequest.initialize.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t CP_SubscribeRequest.Initialize.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = MEMORY[0x1E0DEE9D8];
  a1[2] = MEMORY[0x1E0DEE9D8];
  a1[3] = v2;
  v3 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  a1[4] = 0;
  a1[5] = 0;
  UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v3 + 40);
  v5 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

void (*CP_SubscribeRequest.initialize.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v10 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_SubscribeRequest.Initialize);
      return CP_SubscribeRequest.initialize.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  }
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  v12 = MEMORY[0x1E0DEE9D8];
  v9[2] = MEMORY[0x1E0DEE9D8];
  v9[3] = v12;
  v9[4] = 0;
  v9[5] = 0;
  UnknownStorage.init()();
  v13 = (char *)v9 + *(int *)(v7 + 40);
  v14 = type metadata accessor for CP_EncryptionID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return CP_SubscribeRequest.initialize.modify;
}

void CP_SubscribeRequest.initialize.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t CP_SubscribeRequest.recordAck.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  }
  *a1 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for CP_SubscribeRequest.recordAck : CP_SubscribeRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SubscribeRequest.RecordAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  }
  *a2 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  return UnknownStorage.init()();
}

uint64_t CP_SubscribeRequest.recordAck.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t CP_SubscribeRequest.RecordAck.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  return UnknownStorage.init()();
}

void (*CP_SubscribeRequest.recordAck.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
LABEL_6:
    *v7 = MEMORY[0x1E0DEE9D8];
    UnknownStorage.init()();
    return CP_SubscribeRequest.recordAck.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for CP_SubscribeRequest.RecordAck);
  return CP_SubscribeRequest.recordAck.modify;
}

void CP_SubscribeRequest.recordAck.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t CP_SubscribeRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeRequest, a1);
}

uint64_t CP_SubscribeRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeRequest);
}

uint64_t (*CP_SubscribeRequest.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeRequest.Initialize.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.knownSeqNums.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeRequest.Initialize.knownSeqNums.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.knownSeqNums.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.localEncryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_Record.encryptionID.getter(type metadata accessor for CP_SubscribeRequest.Initialize, a1);
}

uint64_t CP_Record.encryptionID.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2 + *(int *)(v8 + 40), (uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
  v9 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)a2, type metadata accessor for CP_EncryptionID);
  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path getter for CP_Record.encryptionID : CP_Record@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v9 + 40), (uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
  v10 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, (uint64_t)a3, type metadata accessor for CP_EncryptionID);
  *a3 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path setter for CP_Record.encryptionID : CP_Record(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for CP_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v11, type metadata accessor for CP_EncryptionID);
  v12 = a2 + *(int *)(a5(0) + 40);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, v12, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t CP_SubscribeRequest.Initialize.localEncryptionID.setter(uint64_t a1)
{
  return CP_Record.encryptionID.setter(a1, type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t CP_Record.encryptionID.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 40);
  outlined destroy of UUID?(v4, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v4, type metadata accessor for CP_EncryptionID);
  v5 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
}

void (*CP_SubscribeRequest.Initialize.localEncryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

BOOL CP_SubscribeRequest.Initialize.hasLocalEncryptionID.getter()
{
  return CP_Record.hasEncryptionID.getter(type metadata accessor for CP_SubscribeRequest.Initialize);
}

BOOL CP_Record.hasEncryptionID.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  v7 = type metadata accessor for CP_EncryptionID(0);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  return v8;
}

Swift::Void __swiftcall CP_SubscribeRequest.Initialize.clearLocalEncryptionID()()
{
  CP_Record.clearEncryptionID()(type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t CP_Record.clearEncryptionID()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 40);
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for CP_EncryptionID?);
  v3 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t CP_SubscribeRequest.Initialize.knownEncryptionIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeRequest.Initialize.knownEncryptionIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.knownEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.subscriberParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CP_SubscribeRequest.Initialize.subscriberParticipantID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.subscriberParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t CP_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 36);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CP_SubscribeRequest.Initialize.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 36);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CP_SubscribeRequest.Initialize.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeRequest.Initialize(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.RecordAck.seqNumsAck.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeRequest.RecordAck.seqNumsAck.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CP_SubscribeRequest.RecordAck.seqNumsAck.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.RecordAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeRequest.RecordAck, a1);
}

uint64_t CP_SubscribeRequest.RecordAck.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t (*CP_SubscribeRequest.RecordAck.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for CP_SubscribeRequest.OneOf_Operation, (void (*)(_QWORD))type metadata accessor for CP_SubscribeRequest, a1);
}

uint64_t CP_SubscribeResponse.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

uint64_t CP_SubscribeResponse.operation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

uint64_t (*CP_SubscribeResponse.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.initializeAck.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_5:
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0xE000000000000000;
    v8 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    v9 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    UnknownStorage.init()();
    v10 = a1 + *(int *)(v9 + 44);
    v11 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = a1 + *(int *)(v9 + 48);
    v13 = type metadata accessor for CP_SequenceNumber(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t CP_SubscribeResponse.initializeAck.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t CP_SubscribeResponse.InitializeAck.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v2;
  v3 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  UnknownStorage.init()();
  v4 = a1 + *(int *)(v3 + 44);
  v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + *(int *)(v3 + 48);
  v7 = type metadata accessor for CP_SequenceNumber(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

void (*CP_SubscribeResponse.initializeAck.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v10 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      return CP_SubscribeResponse.initializeAck.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = 0xE000000000000000;
  v12 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v9 + 4) = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v9 + 5) = v12;
  *((_QWORD *)v9 + 6) = v12;
  *((_QWORD *)v9 + 7) = v12;
  UnknownStorage.init()();
  v13 = &v9[*(int *)(v7 + 44)];
  v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = &v9[*(int *)(v7 + 48)];
  v16 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return CP_SubscribeResponse.initializeAck.modify;
}

void CP_SubscribeResponse.initializeAck.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t CP_SubscribeResponse.record.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for CP_Record);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = 0;
  v9 = type metadata accessor for CP_Record(0);
  UnknownStorage.init()();
  v10 = a1 + *(int *)(v9 + 36);
  v11 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + *(int *)(v9 + 40);
  v13 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t CP_SubscribeResponse.record.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_Record, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

void (*CP_SubscribeResponse.record.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for CP_Record(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v10 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    *((_OWORD *)v9 + 1) = xmmword_1ACF5CB20;
    v9[4] = MEMORY[0x1E0DEE9D8];
    v9[5] = 0;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(v7 + 36);
    v13 = type metadata accessor for CP_SequenceNumber(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = (char *)v9 + *(int *)(v7 + 40);
    v15 = type metadata accessor for CP_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return CP_SubscribeResponse.record.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_Record);
  return CP_SubscribeResponse.record.modify;
}

void CP_SubscribeResponse.record.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_Record);
}

uint64_t CP_SubscribeResponse.topicUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  return UnknownStorage.init()();
}

uint64_t CP_SubscribeResponse.topicUpdate.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t CP_SubscribeResponse.TopicUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  return UnknownStorage.init()();
}

void (*CP_SubscribeResponse.topicUpdate.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    *(_QWORD *)v7 = 0;
    v10 = MEMORY[0x1E0DEE9D8];
    v7[8] = 1;
    *((_QWORD *)v7 + 2) = v10;
    *((_QWORD *)v7 + 3) = 0;
    v7[32] = 0;
    UnknownStorage.init()();
    return CP_SubscribeResponse.topicUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  return CP_SubscribeResponse.topicUpdate.modify;
}

void CP_SubscribeResponse.topicUpdate.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t CP_SubscribeResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeResponse, a1);
}

uint64_t CP_SubscribeResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse);
}

uint64_t (*CP_SubscribeResponse.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.topicCatchupSummary.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 44), (uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  v8 = MEMORY[0x1E0DEE9D8];
  *a1 = 0;
  a1[1] = v8;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
}

uint64_t key path getter for CP_SubscribeResponse.InitializeAck.topicCatchupSummary : CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 44), (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  v8 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  v9 = MEMORY[0x1E0DEE9D8];
  *a2 = 0;
  a2[1] = v9;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
}

uint64_t key path setter for CP_SubscribeResponse.InitializeAck.topicCatchupSummary : CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v7, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  v8 = a2 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v8, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.topicCatchupSummary.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v3, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.init()@<X0>(_QWORD *a1@<X8>)
{
  return CP_TopicSubscribers.init()(0, (void (*)(_QWORD))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, a1);
}

uint64_t CP_TopicSubscribers.init()@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9D8];
  *a3 = a1;
  a3[1] = v4;
  a2(0);
  return UnknownStorage.init()();
}

void (*CP_SubscribeResponse.InitializeAck.topicCatchupSummary.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    *v9 = 0;
    v9[1] = v11;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  }
  return CP_SubscribeResponse.InitializeAck.topicCatchupSummary.modify;
}

void CP_SubscribeResponse.InitializeAck.topicCatchupSummary.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

BOOL CP_SubscribeResponse.InitializeAck.hasTopicCatchupSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 44), (uint64_t)v3, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  return v6;
}

Swift::Void __swiftcall CP_SubscribeResponse.InitializeAck.clearTopicCatchupSummary()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  v2 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CP_SubscribeResponse.InitializeAck.missingEncryptionIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.missingEncryptionIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.missingEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.subscriberSeqNum.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 48), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v7 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SequenceNumber);
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path getter for CP_SubscribeResponse.InitializeAck.subscriberSeqNum : CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 48), (uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v8 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SequenceNumber);
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path setter for CP_SubscribeResponse.InitializeAck.subscriberSeqNum : CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for CP_SequenceNumber(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  v8 = a2 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v8, type metadata accessor for CP_SequenceNumber);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.subscriberSeqNum.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v3, type metadata accessor for CP_SequenceNumber);
  v4 = type metadata accessor for CP_SequenceNumber(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CP_SubscribeResponse.InitializeAck.subscriberSeqNum.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_SequenceNumber(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_SequenceNumber);
  }
  return CP_Record.seqNum.modify;
}

BOOL CP_SubscribeResponse.InitializeAck.hasSubscriberSeqNum.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 48), (uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v5 = type metadata accessor for CP_SequenceNumber(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  return v6;
}

Swift::Void __swiftcall CP_SubscribeResponse.InitializeAck.clearSubscriberSeqNum()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v2 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSaltVerifiedSubscriberParticipantIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSaltVerifiedSubscriberParticipantIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.otherSaltVerifiedSubscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CP_SubscribeResponse.InitializeAck.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.participantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.participantID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.seqNums.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t (*CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(uint64_t a1)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

void (*CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

BOOL CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter()
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

Swift::Void __swiftcall CP_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()()
{
  CP_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t (*CP_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = 0;
  v2 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.participantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t CP_SubscribeResponse.TopicUpdate.participantID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.isSaltVerifiedID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t CP_SubscribeResponse.TopicUpdate.isSaltVerifiedID.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.isSaltVerifiedID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for CP_SubscribeResponse.TopicUpdate, a1);
}

uint64_t CP_SubscribeResponse.TopicUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.unknownFields.modify())()
{
  type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.UpdateEvent.init()()
{
  return 0;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 3uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent();
  return Enum.hash(into:)();
}

uint64_t CP_SubscribeResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for CP_SubscribeResponse.OneOf_Operation, (void (*)(_QWORD))type metadata accessor for CP_SubscribeResponse, a1);
}

uint64_t *CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases;
}

uint64_t static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases);
}

uint64_t (*static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases, a1);
}

uint64_t CP_PublishRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

uint64_t CP_PublishRequest.operation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

uint64_t (*CP_PublishRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishRequest.record.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
LABEL_5:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0xE000000000000000;
    *(_OWORD *)(a1 + 16) = xmmword_1ACF5CB20;
    *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 40) = 0;
    v8 = type metadata accessor for CP_Record(0);
    UnknownStorage.init()();
    v9 = a1 + *(int *)(v8 + 36);
    v10 = type metadata accessor for CP_SequenceNumber(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = a1 + *(int *)(v8 + 40);
    v12 = type metadata accessor for CP_EncryptionID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for CP_Record);
}

uint64_t CP_PublishRequest.record.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_Record, type metadata accessor for CP_PublishRequest.OneOf_Operation);
}

void (*CP_PublishRequest.record.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for CP_Record(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v10 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_Record);
      return CP_PublishRequest.record.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  }
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  *((_OWORD *)v9 + 1) = xmmword_1ACF5CB20;
  v9[4] = MEMORY[0x1E0DEE9D8];
  v9[5] = 0;
  UnknownStorage.init()();
  v12 = (char *)v9 + *(int *)(v7 + 36);
  v13 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (char *)v9 + *(int *)(v7 + 40);
  v15 = type metadata accessor for CP_EncryptionID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return CP_PublishRequest.record.modify;
}

void CP_PublishRequest.record.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_Record);
}

uint64_t CP_PublishRequest.updatedEncryptionID.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v9 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  UnknownStorage.init()();
  v10 = (char *)a1 + *(int *)(v9 + 24);
  v11 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t CP_PublishRequest.updatedEncryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.OneOf_Operation);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

void (*CP_PublishRequest.updatedEncryptionID.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v10 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
LABEL_6:
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(v7 + 24);
    v13 = type metadata accessor for CP_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return CP_PublishRequest.updatedEncryptionID.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  return CP_PublishRequest.updatedEncryptionID.modify;
}

void CP_PublishRequest.updatedEncryptionID.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t CP_PublishRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_PublishRequest, a1);
}

uint64_t CP_PublishRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_PublishRequest);
}

uint64_t (*CP_PublishRequest.unknownFields.modify())()
{
  type metadata accessor for CP_PublishRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_PublishRequest.UpdatedEncryptionID.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
  v9 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)a2, type metadata accessor for CP_EncryptionID);
  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path getter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v9 + 24), (uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
  v10 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, (uint64_t)a3, type metadata accessor for CP_EncryptionID);
  *a3 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path setter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for CP_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v11, type metadata accessor for CP_EncryptionID);
  v12 = a2 + *(int *)(a5(0) + 24);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, v12, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.encryptionID.setter(uint64_t a1)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  outlined destroy of UUID?(v4, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v4, type metadata accessor for CP_EncryptionID);
  v5 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
}

void (*CP_PublishRequest.UpdatedEncryptionID.encryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

BOOL CP_PublishRequest.UpdatedEncryptionID.hasEncryptionID.getter()
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

BOOL CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  v7 = type metadata accessor for CP_EncryptionID(0);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  return v8;
}

Swift::Void __swiftcall CP_PublishRequest.UpdatedEncryptionID.clearEncryptionID()()
{
  CP_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 24);
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for CP_EncryptionID?);
  v3 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, a1);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t (*CP_PublishRequest.UpdatedEncryptionID.unknownFields.modify())()
{
  type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for CP_PublishRequest.OneOf_Operation, (void (*)(_QWORD))type metadata accessor for CP_PublishRequest, a1);
}

uint64_t CP_PublishResponse.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CP_PublishResponse.status.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*CP_PublishResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishResponse.error.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CP_PublishResponse.error.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CP_PublishResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishResponse.seqNumAck.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CP_PublishResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v7 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SequenceNumber);
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path getter for CP_PublishResponse.seqNumAck : CP_PublishResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CP_PublishResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v8 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SequenceNumber);
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t CP_PublishResponse.seqNumAck.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for CP_PublishResponse, &demangling cache variable for type metadata for CP_SequenceNumber?, type metadata accessor for CP_SequenceNumber);
}

void (*CP_PublishResponse.seqNumAck.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CP_SequenceNumber(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_PublishResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_SequenceNumber);
  }
  return CP_Record.seqNum.modify;
}

BOOL CP_PublishResponse.hasSeqNumAck.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for CP_SequenceNumber?, type metadata accessor for CP_PublishResponse, type metadata accessor for CP_SequenceNumber);
}

Swift::Void __swiftcall CP_PublishResponse.clearSeqNumAck()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for CP_PublishResponse, &demangling cache variable for type metadata for CP_SequenceNumber?, type metadata accessor for CP_SequenceNumber);
}

uint64_t CP_PublishResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_PublishResponse, a1);
}

uint64_t CP_PublishResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_PublishResponse);
}

uint64_t (*CP_PublishResponse.unknownFields.modify())()
{
  type metadata accessor for CP_PublishResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_PublishResponse.init()(type metadata accessor for CP_PublishResponse, type metadata accessor for CP_SequenceNumber, a1);
}

uint64_t (*CP_UpsertTopicMetadataRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_UpsertTopicMetadataRequest.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_UpsertTopicMetadataRequest, a1);
}

uint64_t CP_UpsertTopicMetadataRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_UpsertTopicMetadataRequest);
}

uint64_t (*CP_UpsertTopicMetadataRequest.unknownFields.modify())()
{
  type metadata accessor for CP_UpsertTopicMetadataRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  return CP_TopicSubscribers.TopicSubscribersInfo.init()((void (*)(_QWORD))type metadata accessor for CP_UpsertTopicMetadataRequest, a1);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.init()@<X0>(void (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = MEMORY[0x1E0DEE9D8];
  a1(0);
  return UnknownStorage.init()();
}

uint64_t (*CP_UpsertTopicMetadataResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_UpsertTopicMetadataResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_UpsertTopicMetadataResponse, a1);
}

uint64_t CP_UpsertTopicMetadataResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_UpsertTopicMetadataResponse);
}

uint64_t (*CP_UpsertTopicMetadataResponse.unknownFields.modify())()
{
  type metadata accessor for CP_UpsertTopicMetadataResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  type metadata accessor for CP_UpsertTopicMetadataResponse(0);
  return UnknownStorage.init()();
}

uint64_t (*CP_CreateTopicRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_CreateTopicRequest.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.participantIdsalt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CP_CreateTopicRequest.participantIdsalt.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*CP_CreateTopicRequest.participantIdsalt.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.topicCategory.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t CP_CreateTopicRequest.topicCategory.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*CP_CreateTopicRequest.topicCategory.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for CP_CreateTopicRequest, a1);
}

uint64_t CP_CreateTopicRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for CP_CreateTopicRequest);
}

uint64_t (*CP_CreateTopicRequest.unknownFields.modify())()
{
  type metadata accessor for CP_CreateTopicRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.TopicCategory.init()()
{
  return 0;
}

uint64_t CP_CreateTopicRequest.TopicCategory.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized CP_CreateTopicRequest.TopicCategory.init(rawValue:));
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CP_CreateTopicRequest.TopicCategory@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus((uint64_t (*)(void))specialized CP_CreateTopicRequest.TopicCategory.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CP_CreateTopicRequest.TopicCategory@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, (uint64_t (*)(_QWORD))specialized CP_CreateTopicRequest.TopicCategory.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicRequest.TopicCategory()
{
  lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory();
  return Enum.hash(into:)();
}

uint64_t CP_CreateTopicRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  type metadata accessor for CP_CreateTopicRequest(0);
  return UnknownStorage.init()();
}

uint64_t *CP_CreateTopicRequest.TopicCategory.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static CP_CreateTopicRequest.TopicCategory.allCases;
}

uint64_t static CP_CreateTopicRequest.TopicCategory.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_CreateTopicRequest.TopicCategory.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_CreateTopicRequest.TopicCategory.allCases);
}

uint64_t (*static CP_CreateTopicRequest.TopicCategory.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_CreateTopicRequest.TopicCategory@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_CreateTopicRequest.TopicCategory.allCases, a1);
}

uint64_t (*CP_CreateTopicResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_CreateTopicResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.topicConfig.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t TopicResponse;
  uint64_t Topic;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(TopicResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(Topic - 8) + 48))(v5, 1, Topic) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t key path getter for CP_CreateTopicResponse.topicConfig : CP_CreateTopicResponse@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t TopicResponse;
  uint64_t Topic;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(Topic - 8) + 48))(v6, 1, Topic) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  *(_OWORD *)((char *)a2 + 28) = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t CP_CreateTopicResponse.topicConfig.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for CP_CreateTopicResponse, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.init()@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  return UnknownStorage.init()();
}

void (*CP_CreateTopicResponse.topicConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t Topic;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v3[2] = Topic;
  v7 = *(_QWORD *)(Topic - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CP_CreateTopicResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, Topic) == 1)
  {
    *(_OWORD *)((char *)v9 + 28) = 0u;
    *v9 = 0u;
    v9[1] = 0u;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  }
  return CP_CreateTopicResponse.topicConfig.modify;
}

void CP_CreateTopicResponse.topicConfig.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

BOOL CP_CreateTopicResponse.hasTopicConfig.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

Swift::Void __swiftcall CP_CreateTopicResponse.clearTopicConfig()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for CP_CreateTopicResponse, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t CP_CreateTopicResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for CP_CreateTopicResponse, a1);
}

uint64_t CP_CreateTopicResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for CP_CreateTopicResponse);
}

uint64_t (*CP_CreateTopicResponse.unknownFields.modify())()
{
  type metadata accessor for CP_CreateTopicResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRecordDataSizeBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRecordDataSizeBytes.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxRecordDataSizeBytes.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxPublishQueueSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxDecryptionQueueSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxDecryptionQueueSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxDecryptionQueueSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxPrimaryRpcStreamTries.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxPrimaryRpcStreamTries.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxPrimaryRpcStreamTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.retryPrimaryRpcStreamIntervalMillis.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.retryPrimaryRpcStreamIntervalMillis.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.retryPrimaryRpcStreamIntervalMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0) + 48);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0) + 48);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.unknownFields.modify())()
{
  type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_PublishResponse.init()(type metadata accessor for CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, a1);
}

uint64_t CP_PublishResponse.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0xE000000000000000;
  v5 = a1(0);
  UnknownStorage.init()();
  v6 = a3 + *(int *)(v5 + 28);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t CP_FetchTopicsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CP_FetchTopicsRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*CP_FetchTopicsRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_FetchTopicsResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_FetchTopicsResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_FetchTopicsResponse.topics.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_FetchTopicsResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_FetchTopicsResponse(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CP_FetchTopicsResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CP_FetchTopicsResponse(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CP_FetchTopicsResponse.unknownFields.modify())()
{
  type metadata accessor for CP_FetchTopicsResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_FetchTopicsResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  type metadata accessor for CP_FetchTopicsResponse(0);
  return UnknownStorage.init()();
}

uint64_t CP_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_ResponseStatus._protobuf_nameMap);
}

uint64_t static CP_ResponseStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_ResponseStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_ResponseStatus._protobuf_nameMap, a1);
}

const char *CP_Record.protoMessageName.unsafeMutableAddressor()
{
  return "cp.Record";
}

uint64_t static CP_Record.protoMessageName.getter()
{
  return 0x726F6365522E7063;
}

uint64_t CP_Record._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_Record._protobuf_nameMap);
}

uint64_t static CP_Record._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_Record._protobuf_nameMap, a1);
}

uint64_t CP_Record.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          closure #3 in CP_Record.decodeMessage<A>(decoder:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
          break;
        case 5:
          closure #5 in CP_Record.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_Record);
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in CP_Record.decodeMessage<A>(decoder:)()
{
  type metadata accessor for CP_Record(0);
  type metadata accessor for CP_SequenceNumber(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_Record.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t closure #1 in CP_Record.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CP_SequenceNumber(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for CP_SequenceNumber);
}

Swift::Int CP_Record.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_Record, &lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
}

uint64_t protocol witness for Message.init() in conformance CP_Record@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_OWORD *)(a2 + 16) = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 40) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 40);
  v7 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_Record()
{
  return 0x726F6365522E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_Record(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_Record.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_Record()
{
  return CP_Record.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_Record()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_Record@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_Record._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_Record()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_Record()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
  return Message.hash(into:)();
}

const char *CP_KeyValue.protoMessageName.unsafeMutableAddressor()
{
  return "cp.KeyValue";
}

uint64_t static CP_KeyValue.protoMessageName.getter()
{
  return 0x615679654B2E7063;
}

uint64_t CP_KeyValue._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_KeyValue._protobuf_nameMap);
}

uint64_t static CP_KeyValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_KeyValue._protobuf_nameMap, a1);
}

uint64_t CP_KeyValue.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_KeyValue.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

Swift::Int CP_KeyValue.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_KeyValue, &lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_KeyValue()
{
  return 0x615679654B2E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_KeyValue()
{
  return CP_KeyValue.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_KeyValue()
{
  return CP_KeyValue.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_KeyValue()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_KeyValue@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_KeyValue._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_KeyValue()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_KeyValue()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
  return Message.hash(into:)();
}

void *CP_SequenceNumber.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_SequenceNumber.protoMessageName;
}

unint64_t static CP_SequenceNumber.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t CP_SequenceNumber._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SequenceNumber._protobuf_nameMap);
}

uint64_t static CP_SequenceNumber._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t CP_SequenceNumber.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SequenceNumber.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_SequenceNumber(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_SequenceNumber.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SequenceNumber, &lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
}

uint64_t protocol witness for Message.init() in conformance CP_SequenceNumber@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SequenceNumber()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SequenceNumber()
{
  return CP_SequenceNumber.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SequenceNumber()
{
  return CP_SequenceNumber.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SequenceNumber()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SequenceNumber@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SequenceNumber()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SequenceNumber()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  return Message.hash(into:)();
}

void *CP_EncryptionID.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_EncryptionID.protoMessageName;
}

uint64_t static CP_EncryptionID.protoMessageName.getter()
{
  return 0x7972636E452E7063;
}

uint64_t CP_EncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_EncryptionID._protobuf_nameMap);
}

uint64_t static CP_EncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_EncryptionID._protobuf_nameMap, a1);
}

uint64_t CP_EncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB18]);
}

void CP_EncryptionID.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACE3C9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    type metadata accessor for CP_EncryptionID(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CP_EncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_EncryptionID, &lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_EncryptionID()
{
  return 0x7972636E452E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance CP_EncryptionID()
{
  CP_EncryptionID.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_EncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_EncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  return Message.hash(into:)();
}

void *CP_TopicSubscribersRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_TopicSubscribersRequest.protoMessageName;
}

unint64_t static CP_TopicSubscribersRequest.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t CP_TopicSubscribersRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t CP_TopicSubscribersRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v5 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(v0);
  else
    closure #1 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(v0);
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for CP_TopicSubscribersRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_TopicSubscribersRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_TopicSubscribersRequest, &lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribersRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribersRequest()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribersRequest()
{
  return CP_TopicSubscribersRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribersRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribersRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
  return Message.hash(into:)();
}

uint64_t *CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB90]);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

Swift::Int CP_TopicSubscribersRequest.TopicTerminatedAck.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, &lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribers.TerminateTopic.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest.TopicTerminatedAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(_QWORD *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck) & 1;
}

uint64_t *CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2]
      || (lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_TopicSubscribersRequest.TopicTerminationRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, &lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribersRequest.TopicTerminationRequest@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return CP_TopicSubscribersRequest.TopicTerminationRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return CP_TopicSubscribersRequest.TopicTerminationRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return Message.hash(into:)();
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap, a1);
}

void *CP_TopicSubscribers.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_TopicSubscribers.protoMessageName;
}

unint64_t static CP_TopicSubscribers.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t CP_TopicSubscribers._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribers._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribers.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CP_TopicSubscribers.TerminateTopic(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CP_TopicSubscribers.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0),
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for CP_TopicSubscribers.TerminateTopic(0),
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_TopicSubscribers(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_TopicSubscribers.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_TopicSubscribers, &lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribers@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribers()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribers()
{
  return CP_TopicSubscribers.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribers()
{
  return CP_TopicSubscribers.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribers()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribers@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribers()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribers()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
  return Message.hash(into:)();
}

uint64_t *CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName;
}

uint64_t static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (result = dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static CP_TopicSubscribers.TopicSubscribersInfo.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo) & 1;
}

Swift::Int CP_TopicSubscribers.TopicSubscribersInfo.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, &lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  return CP_TopicSubscribers.TopicSubscribersInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  return CP_TopicSubscribers.TopicSubscribersInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribers.TopicSubscribersInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_TopicSubscribers.TopicSubscribersInfo(_QWORD *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo) & 1;
}

uint64_t *CP_TopicSubscribers.TerminateTopic.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_TopicSubscribers.TerminateTopic.protoMessageName;
}

uint64_t static CP_TopicSubscribers.TerminateTopic.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TerminateTopic.protoMessageName);
}

uint64_t CP_TopicSubscribers.TerminateTopic._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribers.TerminateTopic.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB90]);
}

uint64_t CP_EncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v10 & 1) != 0)
      break;
    if (result == 1)
      a4(v4, a2, a3);
  }
  return result;
}

uint64_t CP_TopicSubscribers.TerminateTopic.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CP_TopicSubscribers.TerminateTopic.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribers.TerminateTopic) & 1;
}

Swift::Int CP_TopicSubscribers.TerminateTopic.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_TopicSubscribers.TerminateTopic, &lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribers.TerminateTopic@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TerminateTopic.protoMessageName);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribers.TerminateTopic.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribers.TerminateTopic()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribers.TerminateTopic@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribers.TerminateTopic()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribers.TerminateTopic()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_TopicSubscribers.TerminateTopic(_QWORD *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribers.TerminateTopic) & 1;
}

const char *CP_SystemEvent.protoMessageName.unsafeMutableAddressor()
{
  return "cp.SystemEvent";
}

uint64_t static CP_SystemEvent.protoMessageName.getter()
{
  return 0x65747379532E7063;
}

uint64_t CP_SystemEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SystemEvent._protobuf_nameMap);
}

uint64_t static CP_SystemEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SystemEvent._protobuf_nameMap, a1);
}

uint64_t CP_SystemEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #1 in CP_SystemEvent.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in CP_SystemEvent.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in CP_SystemEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;

  result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t CP_SystemEvent.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(v0 + 16);
  if (v2 != 255)
  {
    if ((v2 & 1) != 0)
    {
      result = closure #2 in CP_SystemEvent.traverse<A>(visitor:)(v0);
      if (v1)
        return result;
    }
    else
    {
      result = closure #1 in CP_SystemEvent.traverse<A>(visitor:)(v0);
      if (v1)
        return result;
    }
  }
  type metadata accessor for CP_SystemEvent(0);
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in CP_SystemEvent.traverse<A>(visitor:)(uint64_t result)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_SystemEvent.traverse<A>(visitor:)(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 != 255 && (v1 & 1) != 0)
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  __break(1u);
  return result;
}

Swift::Int CP_SystemEvent.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SystemEvent, &lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
}

uint64_t protocol witness for Message.init() in conformance CP_SystemEvent@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SystemEvent()
{
  return 0x65747379532E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SystemEvent()
{
  return CP_SystemEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SystemEvent()
{
  return CP_SystemEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SystemEvent()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SystemEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SystemEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SystemEvent()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SystemEvent()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
  return Message.hash(into:)();
}

void *CP_SubscribeRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_SubscribeRequest.protoMessageName;
}

unint64_t static CP_SubscribeRequest.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t CP_SubscribeRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap);
}

uint64_t static CP_SubscribeRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in CP_SubscribeRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CP_SubscribeRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in CP_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_SubscribeRequest.Initialize);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_SubscribeRequest.Initialize);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_SubscribeRequest.Initialize);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_SubscribeRequest.Initialize);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in CP_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_SubscribeRequest.RecordAck);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_SubscribeRequest.RecordAck);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_SubscribeRequest.RecordAck);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_SubscribeRequest.RecordAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t CP_SubscribeRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v5 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in CP_SubscribeRequest.traverse<A>(visitor:)(v0);
  else
    closure #1 in CP_SubscribeRequest.traverse<A>(visitor:)(v0);
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for CP_SubscribeRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeRequest.Initialize);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_SubscribeRequest.Initialize);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeRequest.RecordAck);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_SubscribeRequest.RecordAck);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_SubscribeRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeRequest, &lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for CP_SubscribeRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeRequest()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeRequest()
{
  return CP_SubscribeRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
  return Message.hash(into:)();
}

uint64_t *CP_SubscribeRequest.Initialize.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_SubscribeRequest.Initialize.protoMessageName;
}

uint64_t static CP_SubscribeRequest.Initialize.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t CP_SubscribeRequest.Initialize._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap);
}

uint64_t static CP_SubscribeRequest.Initialize._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_6;
        case 2:
          type metadata accessor for CP_SequenceNumber(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #5 in CP_Record.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_SubscribeRequest.Initialize);
          goto LABEL_6;
        case 4:
          type metadata accessor for CP_EncryptionID(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
LABEL_5:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 5:
        case 6:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
LABEL_6:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in CP_Record.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for CP_EncryptionID(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_SubscribeRequest.Initialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;

  v5 = v3;
  v9 = v5[1];
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *v5 & 0xFFFFFFFFFFFFLL;
  if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(v5[2] + 16)
      || (type metadata accessor for CP_SequenceNumber(0),
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
    {
      result = closure #2 in CP_Record.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3, type metadata accessor for CP_SubscribeRequest.Initialize, 3);
      if (!v4)
      {
        if (*(_QWORD *)(v5[3] + 16))
        {
          type metadata accessor for CP_EncryptionID(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (v5[4])
          dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
        if (v5[5])
          dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
        type metadata accessor for CP_SubscribeRequest.Initialize(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #2 in CP_Record.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[4];

  v17[0] = a6;
  v17[1] = a3;
  v17[3] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CP_EncryptionID(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a5(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v15 + 40), (uint64_t)v10, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v10, (uint64_t)v14, type metadata accessor for CP_EncryptionID);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_EncryptionID);
}

Swift::Int CP_SubscribeRequest.Initialize.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeRequest.Initialize, &lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  a2[2] = MEMORY[0x1E0DEE9D8];
  a2[3] = v4;
  a2[4] = 0;
  a2[5] = 0;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 40);
  v6 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeRequest.Initialize.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
  return Message.hash(into:)();
}

uint64_t *CP_SubscribeRequest.RecordAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_SubscribeRequest.RecordAck.protoMessageName;
}

uint64_t static CP_SubscribeRequest.RecordAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeRequest.RecordAck.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1ACF59E20;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x1E0D3EF08];
  v14 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CP_SubscribeRequest.RecordAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.RecordAck._protobuf_nameMap);
}

uint64_t static CP_SubscribeRequest.RecordAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.RecordAck._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeRequest.RecordAck.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for CP_SequenceNumber(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SubscribeRequest.RecordAck.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for CP_SequenceNumber(0),
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for CP_SubscribeRequest.RecordAck(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CP_SubscribeRequest.RecordAck.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeRequest.RecordAck, &lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeRequest.RecordAck@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeRequest.RecordAck.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeRequest.RecordAck()
{
  return CP_SubscribeRequest.RecordAck.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeRequest.RecordAck()
{
  return CP_SubscribeRequest.RecordAck.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeRequest.RecordAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeRequest.RecordAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.RecordAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeRequest.RecordAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeRequest.RecordAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
  return Message.hash(into:)();
}

void *CP_SubscribeResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_SubscribeResponse.protoMessageName;
}

unint64_t static CP_SubscribeResponse.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t CP_SubscribeResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        closure #1 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_Record(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_Record?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_Record);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_Record);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_Record?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_Record?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_Record);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_Record);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #3 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t CP_SubscribeResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v5 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_8;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      closure #2 in CP_SubscribeResponse.traverse<A>(visitor:)(v0);
    else
      closure #3 in CP_SubscribeResponse.traverse<A>(visitor:)(v0);
  }
  else
  {
    closure #1 in CP_SubscribeResponse.traverse<A>(visitor:)(v0);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for CP_SubscribeResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_Record(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_Record);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_Record);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in CP_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_SubscribeResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeResponse, &lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for CP_SubscribeResponse.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse()
{
  return CP_SubscribeResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
  return Message.hash(into:)();
}

uint64_t *CP_SubscribeResponse.InitializeAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_SubscribeResponse.InitializeAck.protoMessageName;
}

uint64_t static CP_SubscribeResponse.InitializeAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t CP_SubscribeResponse.InitializeAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.InitializeAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_13;
        case 3:
        case 8:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
          goto LABEL_13;
        case 4:
          type metadata accessor for CP_KeyValue(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
          goto LABEL_10;
        case 5:
          v4 = v3;
          closure #5 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
          goto LABEL_13;
        case 6:
          type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
LABEL_10:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_13;
        case 7:
          v4 = v3;
          closure #7 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
LABEL_13:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #7 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  type metadata accessor for CP_SequenceNumber(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  v5 = v3;
  if (!*v5
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    v10 = v5[3];
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = v5[2] & 0xFFFFFFFFFFFFLL;
    if (!v11 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      if (!*(_QWORD *)(v5[4] + 16)
        || (result = dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)(), !v4))
      {
        if (!*(_QWORD *)(v5[5] + 16)
          || (type metadata accessor for CP_KeyValue(0),
              lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
        {
          result = closure #1 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
          if (!v4)
          {
            if (*(_QWORD *)(v5[6] + 16))
            {
              type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
              lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
              dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
            }
            closure #2 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
            if (*(_QWORD *)(v5[7] + 16))
              dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)();
            type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 44), (uint64_t)v7, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t closure #2 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CP_SequenceNumber(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 48), (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for CP_SequenceNumber);
}

Swift::Int CP_SubscribeResponse.InitializeAck.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck, &lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v4;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 44);
  v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a2 + *(int *)(a1 + 48);
  v8 = type metadata accessor for CP_SequenceNumber(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CP_SubscribeResponse.InitializeAck())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.InitializeAck()
{
  return CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
  return Message.hash(into:)();
}

void one-time initialization function for protoMessageName(uint64_t a1)
{
  one-time initialization function for protoMessageName(a1, (void *)0x80000001ACF82120, &static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName, &qword_1EECD0400);
}

{
  one-time initialization function for protoMessageName(a1, (void *)0x80000001ACF805F0, &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName, &qword_1EECD0428);
}

uint64_t *CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName;
}

uint64_t static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CP_SequenceNumber(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for CP_SequenceNumber(0),
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, &lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = 0;
  a1[1] = v1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return Message.hash(into:)();
}

void one-time initialization function for protoMessageName(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v8 = static CP_SubscribeResponse.InitializeAck.protoMessageName;
  v9 = *(_QWORD *)algn_1EECD03D8;
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 0xD000000000000014;
  v7._object = a2;
  String.append(_:)(v7);
  *a3 = v8;
  *a4 = v9;
}

uint64_t *CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName;
}

uint64_t static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    if (!v4)
    {
      type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, &lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return Message.hash(into:)();
}

uint64_t *CP_SubscribeResponse.TopicUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_SubscribeResponse.TopicUpdate.protoMessageName;
}

uint64_t static CP_SubscribeResponse.TopicUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t CP_SubscribeResponse.TopicUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CP_KeyValue(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for CP_KeyValue(0),
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0 + 24)
        || (result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 32) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int CP_SubscribeResponse.TopicUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_SubscribeResponse.TopicUpdate, &lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.TopicUpdate()
{
  return CP_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.TopicUpdate()
{
  return CP_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
  return Message.hash(into:)();
}

uint64_t CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

void *CP_PublishRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_PublishRequest.protoMessageName;
}

unint64_t static CP_PublishRequest.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t CP_PublishRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest._protobuf_nameMap);
}

uint64_t static CP_PublishRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest._protobuf_nameMap, a1);
}

uint64_t CP_PublishRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in CP_PublishRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CP_PublishRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in CP_PublishRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_Record(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_Record?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_Record);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_Record);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_Record?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_Record?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_Record);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_Record);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in CP_PublishRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t CP_PublishRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v5 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in CP_PublishRequest.traverse<A>(visitor:)(v0);
  else
    closure #1 in CP_PublishRequest.traverse<A>(visitor:)(v0);
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for CP_PublishRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_PublishRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_Record(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_Record);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_Record);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_PublishRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v8 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_PublishRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_PublishRequest, &lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for CP_PublishRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_PublishRequest()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_PublishRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_PublishRequest()
{
  return CP_PublishRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_PublishRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_PublishRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_PublishRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_PublishRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
  return Message.hash(into:)();
}

uint64_t *CP_PublishRequest.UpdatedEncryptionID.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_PublishRequest.UpdatedEncryptionID.protoMessageName;
}

uint64_t static CP_PublishRequest.UpdatedEncryptionID.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_PublishRequest.UpdatedEncryptionID.protoMessageName);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap);
}

uint64_t static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap, a1);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for CP_EncryptionID(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = v3[1];
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = *v3 & 0xFFFFFFFFFFFFLL;
  if (!v9 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    if (!v4)
    {
      type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[3] = a4;
  v16[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CP_EncryptionID(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v14 + 24), (uint64_t)v9, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v9, (uint64_t)v13, type metadata accessor for CP_EncryptionID);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for CP_EncryptionID);
}

Swift::Int CP_PublishRequest.UpdatedEncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, &lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishRequest.UpdatedEncryptionID@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_PublishRequest.UpdatedEncryptionID.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishRequest.UpdatedEncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishRequest.UpdatedEncryptionID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_PublishRequest.UpdatedEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_PublishRequest.UpdatedEncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_PublishRequest.UpdatedEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_PublishRequest.UpdatedEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
  return Message.hash(into:)();
}

void *CP_PublishResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_PublishResponse.protoMessageName;
}

unint64_t static CP_PublishResponse.protoMessageName.getter()
{
  return 0xD000000000000012;
}

uint64_t CP_PublishResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishResponse._protobuf_nameMap);
}

uint64_t static CP_PublishResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishResponse._protobuf_nameMap, a1);
}

uint64_t CP_PublishResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_PublishResponse, type metadata accessor for CP_SequenceNumber, &lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
}

uint64_t CP_PublishResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in CP_PublishResponse.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for CP_PublishResponse);
}

uint64_t closure #1 in CP_PublishResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CP_SequenceNumber(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CP_PublishResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for CP_SequenceNumber);
}

Swift::Int CP_PublishResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_PublishResponse, &lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CP_PublishResponse(a1, type metadata accessor for CP_SequenceNumber, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_PublishResponse()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_PublishResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_PublishResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_PublishResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_PublishResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
  return Message.hash(into:)();
}

void *CP_UpsertTopicMetadataRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_UpsertTopicMetadataRequest.protoMessageName;
}

unint64_t static CP_UpsertTopicMetadataRequest.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CP_UpsertTopicMetadataRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap);
}

uint64_t static CP_UpsertTopicMetadataRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap, a1);
}

uint64_t CP_UpsertTopicMetadataRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CP_KeyValue(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_UpsertTopicMetadataRequest.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (type metadata accessor for CP_KeyValue(0),
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_UpsertTopicMetadataRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static CP_UpsertTopicMetadataRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_UpsertTopicMetadataRequest) & 1;
}

Swift::Int CP_UpsertTopicMetadataRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_UpsertTopicMetadataRequest, &lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribers.TopicSubscribersInfo@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_UpsertTopicMetadataRequest()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_UpsertTopicMetadataRequest()
{
  return CP_UpsertTopicMetadataRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_UpsertTopicMetadataRequest()
{
  return CP_UpsertTopicMetadataRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_UpsertTopicMetadataRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_UpsertTopicMetadataRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_UpsertTopicMetadataRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_UpsertTopicMetadataRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_UpsertTopicMetadataRequest(_QWORD *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_UpsertTopicMetadataRequest) & 1;
}

void *CP_UpsertTopicMetadataResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_UpsertTopicMetadataResponse.protoMessageName;
}

unint64_t static CP_UpsertTopicMetadataResponse.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CP_UpsertTopicMetadataResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap);
}

uint64_t static CP_UpsertTopicMetadataResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap, a1);
}

uint64_t CP_UpsertTopicMetadataResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_UpsertTopicMetadataResponse.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*v0
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    v3 = v0[3];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_UpsertTopicMetadataResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_UpsertTopicMetadataResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_UpsertTopicMetadataResponse, &lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_UpsertTopicMetadataResponse@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_UpsertTopicMetadataResponse()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_UpsertTopicMetadataResponse()
{
  return CP_UpsertTopicMetadataResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_UpsertTopicMetadataResponse()
{
  return CP_UpsertTopicMetadataResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_UpsertTopicMetadataResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_UpsertTopicMetadataResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_UpsertTopicMetadataResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_UpsertTopicMetadataResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
  return Message.hash(into:)();
}

void *CP_CreateTopicRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_CreateTopicRequest.protoMessageName;
}

unint64_t static CP_CreateTopicRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t CP_CreateTopicRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap);
}

uint64_t static CP_CreateTopicRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t CP_CreateTopicRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CP_KeyValue(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_CreateTopicRequest.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (type metadata accessor for CP_KeyValue(0),
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      v5 = v0[4];
      v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v6 = v0[3] & 0xFFFFFFFFFFFFLL;
      if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!v0[5]
          || (lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory(),
              result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          type metadata accessor for CP_CreateTopicRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int CP_CreateTopicRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_CreateTopicRequest, &lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_CreateTopicRequest@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_CreateTopicRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_CreateTopicRequest()
{
  return CP_CreateTopicRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_CreateTopicRequest()
{
  return CP_CreateTopicRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_CreateTopicRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_CreateTopicRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
  return Message.hash(into:)();
}

uint64_t CP_CreateTopicRequest.TopicCategory._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap);
}

uint64_t static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicRequest.TopicCategory@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap, a1);
}

void *CP_CreateTopicResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_CreateTopicResponse.protoMessageName;
}

unint64_t static CP_CreateTopicResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t CP_CreateTopicResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap);
}

uint64_t static CP_CreateTopicResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t CP_CreateTopicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, &lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t CP_PublishResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v13 = v7;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v19 = v8;
  if (!v8)
  {
    while (1)
    {
      if ((v18 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v20 = v19;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
        v20 = v19;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v20 = v19;
    closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(a1, v13, a2, a3, a4, a5, a6, a7);
LABEL_5:
    v19 = v20;
    goto LABEL_6;
  }
  return result;
}

uint64_t CP_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in CP_CreateTopicResponse.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for CP_CreateTopicResponse);
}

uint64_t CP_PublishResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t), void (*a5)(_QWORD))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;

  if (!*v5
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v6))
  {
    v13 = v5[3];
    v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v14 = v5[2] & 0xFFFFFFFFFFFFLL;
    if (!v14 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v6))
    {
      result = a4(v5, a1, a2, a3);
      if (!v6)
      {
        a5(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in CP_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Topic;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t TopicResponse;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v9 = *(_QWORD *)(Topic - 8);
  MEMORY[0x1E0C80A78](Topic);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Topic) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

Swift::Int CP_CreateTopicResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_CreateTopicResponse, &lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CP_PublishResponse(a1, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, a2);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishResponse@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1 + 28);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_CreateTopicResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_CreateTopicResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_CreateTopicResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
  return Message.hash(into:)();
}

uint64_t *CP_CreateTopicResponse.ClientTopicConfig.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName;
}

uint64_t static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
}

uint64_t static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0 + 8)
      || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0 + 16)
        || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        if (!*(_DWORD *)(v0 + 24)
          || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(_DWORD *)(v0 + 28)
            || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
          {
            if (!*(_DWORD *)(v0 + 32)
              || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
            {
              if (!*(_DWORD *)(v0 + 36)
                || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
              {
                if (!*(_DWORD *)(v0 + 40)
                  || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int CP_CreateTopicResponse.ClientTopicConfig.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, &lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t protocol witness for Message.init() in conformance CP_CreateTopicResponse.ClientTopicConfig@<X0>(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CP_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CP_CreateTopicResponse.ClientTopicConfig())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  return CP_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  return CP_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
  return Message.hash(into:)();
}

void *CP_FetchTopicsRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_FetchTopicsRequest.protoMessageName;
}

unint64_t static CP_FetchTopicsRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t CP_FetchTopicsRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap);
}

uint64_t static CP_FetchTopicsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap, a1);
}

uint64_t CP_FetchTopicsRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t CP_FetchTopicsRequest.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static CP_FetchTopicsRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v5, MEMORY[0x1E0D3E9A8]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

Swift::Int CP_FetchTopicsRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_FetchTopicsRequest, &lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_FetchTopicsRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CP_FetchTopicsRequest@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CP_FetchTopicsRequest(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_FetchTopicsRequest()
{
  return CP_FetchTopicsRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_FetchTopicsRequest()
{
  return CP_FetchTopicsRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_FetchTopicsRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_FetchTopicsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_FetchTopicsRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_FetchTopicsRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v5, MEMORY[0x1E0D3E9A8]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

void *CP_FetchTopicsResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_FetchTopicsResponse.protoMessageName;
}

unint64_t static CP_FetchTopicsResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t CP_FetchTopicsResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap);
}

uint64_t static CP_FetchTopicsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap, a1);
}

uint64_t CP_FetchTopicsResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t CP_FetchTopicsResponse.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*v0
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    v3 = v0[3];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[4] + 16)
        || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for CP_FetchTopicsResponse(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int CP_FetchTopicsResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for CP_FetchTopicsResponse, &lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_FetchTopicsResponse@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_FetchTopicsResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_FetchTopicsResponse()
{
  return CP_FetchTopicsResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_FetchTopicsResponse()
{
  return CP_FetchTopicsResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_FetchTopicsResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_FetchTopicsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_FetchTopicsResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_FetchTopicsResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
  return Message.hash(into:)();
}

uint64_t specialized static CP_SystemEvent.OneOf_Event.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t specialized static CP_UpsertTopicMetadataResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v11 = qword_1ACF67630[v11];
  v12 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v11 == v12)
  {
    if (a1[2] == a2[2] && a1[3] == a2[3] || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v14 = type metadata accessor for CP_UpsertTopicMetadataResponse(0);
      v15 = (uint64_t)a1 + *(int *)(v14 + 24);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, (uint64_t)a2 + *(int *)(v14 + 24), v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation?, CP_TopicSubscribersRequest.OneOf_Operation?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      v25 = specialized static CP_TopicSubscribersRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation?, CP_TopicSubscribersRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_8:
  v26 = type metadata accessor for CP_TopicSubscribersRequest(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v25 - v13);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation, CP_TopicSubscribersRequest.OneOf_Operation));
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v26, v19, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v14, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      v23 = *v14 == *v8 && v14[1] == v8[1];
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
          v20 = 1;
          return v20 & 1;
        }
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
LABEL_16:
      v20 = 0;
      return v20 & 1;
    }
    v21 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck;
    v22 = (uint64_t)v14;
LABEL_7:
    outlined destroy of ActivitySession.DomainAssertionWrapper(v22, v21);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation, CP_TopicSubscribersRequest.OneOf_Operation));
    goto LABEL_16;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v12, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v21 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest;
    v22 = (uint64_t)v12;
    goto LABEL_7;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v5, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  v20 = specialized static CP_TopicSubscribersRequest.TopicTerminationRequest.== infix(_:_:)((uint64_t)v12, (uint64_t)v5);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  return v20 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.TopicTerminationRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(a1 + 24))
      v13 = v13 != 0;
    if (*(_BYTE *)(a2 + 24) == 1)
    {
      if (v14)
      {
        if (v13 != 1)
        {
LABEL_11:
          v12 = 0;
          return v12 & 1;
        }
      }
      else if (v13)
      {
        goto LABEL_11;
      }
    }
    else if (v13 != v14)
    {
      goto LABEL_11;
    }
    v15 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
    v16 = a1 + *(int *)(v15 + 24);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, a2 + *(int *)(v15 + 24), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static CP_FetchTopicsResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t TopicsResponse;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v11 = qword_1ACF67630[v11];
  v12 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v11 != v12)
    goto LABEL_11;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)((_QWORD *)a1[4], (_QWORD *)a2[4]) & 1) != 0)
    {
      TopicsResponse = type metadata accessor for CP_FetchTopicsResponse(0);
      v15 = (uint64_t)a1 + *(int *)(TopicsResponse + 28);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, (uint64_t)a2 + *(int *)(TopicsResponse + 28), v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v13 & 1;
    }
LABEL_11:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_CreateTopicResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Topic;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t TopicResponse;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v48 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v47 = (char *)&v42 - v7;
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v9 = *(_QWORD *)(Topic - 8);
  MEMORY[0x1E0C80A78](Topic);
  v46 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_CreateTopicResponse.ClientTopicConfig?, CP_CreateTopicResponse.ClientTopicConfig?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v42 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v42 - v21;
  v23 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v23 = qword_1ACF67630[v23];
  v24 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v23 != v24)
    goto LABEL_17;
  v45 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v44 = v17;
    TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(TopicResponse + 28), (uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    v43 = TopicResponse;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(TopicResponse + 28), (uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, Topic) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      if (v28(v27, 1, Topic) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
LABEL_16:
        v32 = v43;
        v33 = (uint64_t)a1 + *(int *)(v43 + 24);
        v34 = v49;
        v35 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
        v36 = v47;
        v37 = v45;
        v35(v47, v33, v45);
        v38 = (uint64_t)a2 + *(int *)(v32 + 24);
        v39 = v48;
        v35(v48, v38, v37);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        v40 = *(void (**)(char *, uint64_t))(v34 + 8);
        v40(v39, v37);
        v40(v36, v37);
        return v25 & 1;
      }
    }
    else
    {
      v29 = (uint64_t)v44;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v44, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      if (v28(v27, 1, Topic) != 1)
      {
        v30 = v46;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v27, v46, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
        v31 = specialized static CP_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(v29, v30);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v30, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v29, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        if ((v31 & 1) != 0)
          goto LABEL_16;
LABEL_17:
        v25 = 0;
        return v25 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v29, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (CP_CreateTopicResponse.ClientTopicConfig?, CP_CreateTopicResponse.ClientTopicConfig?));
    goto LABEL_17;
  }
  return v25 & 1;
}

uint64_t specialized static CP_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Topic;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
    && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
    && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40))
  {
    Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
    v12 = a1 + *(int *)(Topic + 48);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(Topic + 48), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static CP_CreateTopicRequest.== infix(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t TopicRequest;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], *(_QWORD *)(a2 + 16)) & 1) == 0)
    {
LABEL_12:
      v12 = 0;
      return v12 & 1;
    }
    if (a1[3] == *(_QWORD *)(a2 + 24) && a1[4] == *(_QWORD *)(a2 + 32)
      || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v13 = *(_QWORD *)(a2 + 40);
      if (*(_BYTE *)(a2 + 48) == 1)
        __asm { BR              X11 }
      if (a1[5] == v13)
      {
        TopicRequest = type metadata accessor for CP_CreateTopicRequest(0);
        v15 = (char *)a1 + *(int *)(TopicRequest + 32);
        v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v16(v10, v15, v4);
        v16(v8, (char *)(a2 + *(int *)(TopicRequest + 32)), v4);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        v17 = *(void (**)(char *, uint64_t))(v5 + 8);
        v17(v8, v4);
        v17(v10, v4);
        return v12 & 1;
      }
      goto LABEL_12;
    }
  }
  return v12 & 1;
}

uint64_t specialized static CP_SubscribeResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation?, CP_SubscribeResponse.OneOf_Operation?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      v25 = specialized static CP_SubscribeResponse.OneOf_Operation.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation?, CP_SubscribeResponse.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_8:
  v26 = type metadata accessor for CP_SubscribeResponse(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static CP_SubscribeResponse.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t (*v26)(uint64_t);
  char v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t (*v32)(uint64_t);
  uint64_t *v34;
  uint64_t v35;

  v35 = a2;
  v3 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1E0C80A78](v3);
  v34 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for CP_Record(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t **)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (uint64_t **)((char *)&v34 - v16);
  MEMORY[0x1E0C80A78](v15);
  v19 = (uint64_t *)((char *)&v34 - v18);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation, CP_SubscribeResponse.OneOf_Operation));
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v23, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v35, v24, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v26 = type metadata accessor for CP_Record;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)v7, type metadata accessor for CP_Record);
        v27 = specialized static CP_Record.== infix(_:_:)(v17, v7);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_Record);
        v28 = (uint64_t)v17;
LABEL_9:
        v32 = v26;
LABEL_14:
        outlined destroy of ActivitySession.DomainAssertionWrapper(v28, v32);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
        return v27 & 1;
      }
      v29 = type metadata accessor for CP_Record;
      v30 = (uint64_t)v17;
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t)v14, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v26 = type metadata accessor for CP_SubscribeResponse.TopicUpdate;
        v31 = v34;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)v34, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
        v27 = specialized static CP_SubscribeResponse.TopicUpdate.== infix(_:_:)(v14, v31);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v31, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
        v28 = (uint64_t)v14;
        goto LABEL_9;
      }
      v29 = type metadata accessor for CP_SubscribeResponse.TopicUpdate;
      v30 = (uint64_t)v14;
    }
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)v10, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      v27 = specialized static CP_SubscribeResponse.InitializeAck.== infix(_:_:)(v19, v10);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      v28 = (uint64_t)v19;
      v32 = type metadata accessor for CP_SubscribeResponse.InitializeAck;
      goto LABEL_14;
    }
    v29 = type metadata accessor for CP_SubscribeResponse.InitializeAck;
    v30 = (uint64_t)v19;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v30, v29);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation, CP_SubscribeResponse.OneOf_Operation));
  v27 = 0;
  return v27 & 1;
}

uint64_t specialized static CP_SubscribeResponse.InitializeAck.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t *v55;
  uint64_t v56;
  char v57;
  _QWORD *v58;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = type metadata accessor for UnknownStorage();
  v66 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v65 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v64 = (char *)&v62 - v7;
  v73 = type metadata accessor for CP_SequenceNumber(0);
  v70 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v67 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?));
  MEMORY[0x1E0C80A78](v69);
  v74 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v68 = (uint64_t *)((char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v71 = (uint64_t)&v62 - v14;
  MEMORY[0x1E0C80A78](v13);
  v72 = (uint64_t)&v62 - v15;
  v16 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?, CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?));
  MEMORY[0x1E0C80A78](v20);
  v75 = (uint64_t)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v62 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v62 - v29;
  v31 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v31 = qword_1ACF67630[v31];
  v32 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v31 != v32)
    goto LABEL_33;
  v63 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (!specialized static Array<A>.== infix(_:_:)((_QWORD *)a1[4], (_QWORD *)a2[4])
      || (specialized static Array<A>.== infix(_:_:)(a1[5], a2[5]) & 1) == 0)
    {
      goto LABEL_33;
    }
    v34 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v34 + 44), (uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    v62 = v34;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v34 + 44), (uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    v35 = v75;
    v36 = v75 + *(int *)(v20 + 48);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, v75, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v36, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    if (v37(v35, 1, v16) == 1)
    {
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      v35 = v75;
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      if (v37(v36, 1, v16) == 1)
      {
        outlined destroy of UUID?(v35, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        goto LABEL_14;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v35, (uint64_t)v25, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      if (v37(v36, 1, v16) != 1)
      {
        outlined init with take of ActivitySession.DomainAssertionWrapper(v36, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        if (*v25 != *v19 || (specialized static Array<A>.== infix(_:_:)(v25[1], v19[1]) & 1) == 0)
        {
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
          v39 = &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?;
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
          v56 = v35;
LABEL_28:
          v55 = v39;
          goto LABEL_32;
        }
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        outlined destroy of UUID?(v35, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        if ((v57 & 1) == 0)
          goto LABEL_33;
LABEL_14:
        if ((specialized static Array<A>.== infix(_:_:)(a1[6], a2[6]) & 1) == 0)
          goto LABEL_33;
        v38 = v62;
        v39 = &demangling cache variable for type metadata for CP_SequenceNumber?;
        v40 = v72;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v62 + 48), v72, &demangling cache variable for type metadata for CP_SequenceNumber?);
        v41 = v71;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v38 + 48), v71, &demangling cache variable for type metadata for CP_SequenceNumber?);
        v42 = v74;
        v43 = v74 + *(int *)(v69 + 48);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v40, v74, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, v43, &demangling cache variable for type metadata for CP_SequenceNumber?);
        v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
        v45 = v73;
        if (v44(v42, 1, v73) == 1)
        {
          outlined destroy of UUID?(v41, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SequenceNumber?);
          if (v44(v43, 1, v45) == 1)
          {
            outlined destroy of UUID?(v42, &demangling cache variable for type metadata for CP_SequenceNumber?);
LABEL_18:
            if (specialized static Array<A>.== infix(_:_:)((_QWORD *)a1[7], (_QWORD *)a2[7]))
            {
              v47 = v62;
              v46 = v63;
              v48 = (uint64_t)a1 + *(int *)(v62 + 40);
              v49 = v66;
              v50 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
              v51 = v64;
              v50(v64, v48, v63);
              v52 = (uint64_t)a2 + *(int *)(v47 + 40);
              v53 = v65;
              v50(v65, v52, v46);
              lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v33 = dispatch thunk of static Equatable.== infix(_:_:)();
              v54 = *(void (**)(char *, uint64_t))(v49 + 8);
              v54(v53, v46);
              v54(v51, v46);
              return v33 & 1;
            }
LABEL_33:
            v33 = 0;
            return v33 & 1;
          }
          goto LABEL_31;
        }
        v58 = v68;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, (uint64_t)v68, &demangling cache variable for type metadata for CP_SequenceNumber?);
        if (v44(v43, 1, v45) == 1)
        {
          outlined destroy of UUID?(v41, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v58, type metadata accessor for CP_SequenceNumber);
LABEL_31:
          v55 = &demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?);
          v56 = v42;
          goto LABEL_32;
        }
        v60 = v67;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v43, (uint64_t)v67, type metadata accessor for CP_SequenceNumber);
        if (*v58 == *v60 && v58[1] == v60[1])
        {
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v61 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v60, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?(v41, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v58, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?(v42, &demangling cache variable for type metadata for CP_SequenceNumber?);
          if ((v61 & 1) == 0)
            goto LABEL_33;
          goto LABEL_18;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v60, type metadata accessor for CP_SequenceNumber);
        outlined destroy of UUID?(v41, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v58, type metadata accessor for CP_SequenceNumber);
        v56 = v42;
        goto LABEL_28;
      }
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
    }
    v55 = &demangling cache variable for type metadata for (CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?, CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    v56 = v35;
LABEL_32:
    outlined destroy of UUID?(v56, v55);
    goto LABEL_33;
  }
  return v33 & 1;
}

uint64_t specialized static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *(_QWORD *)a2 && (specialized static Array<A>.== infix(_:_:)(a1[1], *((_QWORD *)a2 + 1)) & 1) != 0)
  {
    v11 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v4 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v49 - v8;
  v10 = type metadata accessor for CP_EncryptionID(0);
  v57 = *(char **)(v10 - 8);
  v58 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v49 - v19;
  MEMORY[0x1E0C80A78](v18);
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_13;
  v23 = a1;
  v51 = v12;
  v52 = v9;
  v53 = v7;
  v54 = (uint64_t *)v22;
  v24 = (char *)&v49 - v21;
  v25 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  v26 = v23;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v23[*(int *)(v25 + 24)], (uint64_t)v24, &demangling cache variable for type metadata for CP_EncryptionID?);
  v27 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&a2[*(int *)(v25 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
  v28 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v15, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v28, &demangling cache variable for type metadata for CP_EncryptionID?);
  v29 = v58;
  v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v57 + 6);
  if (v30((uint64_t)v15, 1, v58) != 1)
  {
    v57 = v24;
    v33 = v54;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v54, &demangling cache variable for type metadata for CP_EncryptionID?);
    if (v30(v28, 1, v29) != 1)
    {
      v36 = v28;
      v37 = (uint64_t)v51;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v36, (uint64_t)v51, type metadata accessor for CP_EncryptionID);
      specialized static Data.== infix(_:_:)(*v33, v33[1]);
      if ((v38 & 1) != 0)
      {
        v50 = v25;
        v31 = v27;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v39 = (uint64_t)v15;
        v32 = v56;
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v37, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v33, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_EncryptionID?);
        if ((v40 & 1) != 0)
          goto LABEL_10;
LABEL_13:
        v46 = 0;
        return v46 & 1;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v37, type metadata accessor for CP_EncryptionID);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v33, type metadata accessor for CP_EncryptionID);
      v35 = (uint64_t)v15;
      v34 = &demangling cache variable for type metadata for CP_EncryptionID?;
LABEL_12:
      outlined destroy of UUID?(v35, v34);
      goto LABEL_13;
    }
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v33, type metadata accessor for CP_EncryptionID);
LABEL_7:
    v34 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
    v35 = (uint64_t)v15;
    goto LABEL_12;
  }
  v50 = v25;
  outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_EncryptionID?);
  if (v30(v28, 1, v29) != 1)
    goto LABEL_7;
  v31 = a2;
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for CP_EncryptionID?);
  v32 = v56;
LABEL_10:
  v41 = v50;
  v42 = v55;
  v43 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v44 = v52;
  v43(v52, &v26[*(int *)(v50 + 20)], v32);
  v45 = v53;
  v43(v53, &v31[*(int *)(v41 + 20)], v32);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  v47 = *(void (**)(char *, uint64_t))(v42 + 8);
  v47(v45, v32);
  v47(v44, v32);
  return v46 & 1;
}

uint64_t specialized static CP_SubscribeResponse.TopicUpdate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1;
  v12 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
  {
    if (v12)
    {
      if (v12 == 1)
      {
        if (v11 != 1)
          goto LABEL_14;
      }
      else if (v11 != 2)
      {
        goto LABEL_14;
      }
    }
    else if (v11)
    {
      goto LABEL_14;
    }
  }
  else if (v11 != v12)
  {
    goto LABEL_14;
  }
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0
    && a1[3] == a2[3]
    && *((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    v15 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
    v16 = (uint64_t)a1 + *(int *)(v15 + 32);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, (uint64_t)a2 + *(int *)(v15 + 32), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
    return v13 & 1;
  }
LABEL_14:
  v13 = 0;
  return v13 & 1;
}

uint64_t specialized static CP_TopicSubscribers.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    v11 = type metadata accessor for CP_TopicSubscribers(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v15 || (v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((a3(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0)
    {
      v17 = a4(0);
      v18 = (char *)a1 + *(int *)(v17 + 24);
      v19 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v19(v14, v18, v8);
      v19(v12, &a2[*(int *)(v17 + 24)], v8);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      v20 = *(void (**)(char *, uint64_t))(v9 + 8);
      v20(v12, v8);
      v20(v14, v8);
    }
    else
    {
      v16 = 0;
    }
  }
  return v16 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v15 = a3(0);
    v16 = (char *)a1 + *(int *)(v15 + 20);
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v12, v16, v6);
    v17(v10, &a2[*(int *)(v15 + 20)], v6);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  return v14 & 1;
}

uint64_t specialized static CP_SubscribeRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation?, CP_SubscribeRequest.OneOf_Operation?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      v25 = specialized static CP_SubscribeRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation?, CP_SubscribeRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
LABEL_8:
  v26 = type metadata accessor for CP_SubscribeRequest(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static CP_SubscribeRequest.RecordAck.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v11 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static CP_SubscribeRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v3 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v24 - v13);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation, CP_SubscribeRequest.OneOf_Operation));
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v25, v19, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v14, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v8, type metadata accessor for CP_SubscribeRequest.Initialize);
      v20 = specialized static CP_SubscribeRequest.Initialize.== infix(_:_:)(v14, v8);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for CP_SubscribeRequest.Initialize);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_SubscribeRequest.Initialize);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      return v20 & 1;
    }
    v21 = type metadata accessor for CP_SubscribeRequest.Initialize;
    v22 = (uint64_t)v14;
    goto LABEL_9;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v12, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v21 = type metadata accessor for CP_SubscribeRequest.RecordAck;
    v22 = (uint64_t)v12;
LABEL_9:
    outlined destroy of ActivitySession.DomainAssertionWrapper(v22, v21);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation, CP_SubscribeRequest.OneOf_Operation));
LABEL_12:
    v20 = 0;
    return v20 & 1;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v5, type metadata accessor for CP_SubscribeRequest.RecordAck);
  if ((specialized static Array<A>.== infix(_:_:)(*v12, *v5) & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for CP_SubscribeRequest.RecordAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for CP_SubscribeRequest.RecordAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_12;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for CP_SubscribeRequest.RecordAck);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for CP_SubscribeRequest.RecordAck);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  v20 = 1;
  return v20 & 1;
}

uint64_t specialized static CP_SubscribeRequest.Initialize.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v43 - v7;
  v8 = type metadata accessor for CP_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v50 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  if (*a1 == *a2 && a1[1] == a2[1] || (v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) == 0)
      goto LABEL_16;
    v45 = v17;
    v24 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v24 + 40), (uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
    v44 = v24;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v24 + 40), (uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
    v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v25, &demangling cache variable for type metadata for CP_EncryptionID?);
    v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v26((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v26(v25, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
LABEL_8:
        if ((specialized static Array<A>.== infix(_:_:)(a1[3], a2[3]) & 1) != 0 && a1[4] == a2[4] && a1[5] == a2[5])
        {
          v27 = v44;
          v28 = (char *)a1 + *(int *)(v44 + 36);
          v30 = v48;
          v29 = v49;
          v31 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
          v32 = v46;
          v31(v46, v28, v49);
          v33 = (char *)a2 + *(int *)(v27 + 36);
          v34 = v47;
          v31(v47, v33, v29);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          v35 = *(void (**)(char *, uint64_t))(v30 + 8);
          v35(v34, v29);
          v35(v32, v29);
          return v23 & 1;
        }
LABEL_16:
        v23 = 0;
        return v23 & 1;
      }
    }
    else
    {
      v36 = v45;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v45, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v26(v25, 1, v8) != 1)
      {
        v40 = v50;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v25, v50, type metadata accessor for CP_EncryptionID);
        specialized static Data.== infix(_:_:)(*v36, v36[1]);
        if ((v41 & 1) != 0)
        {
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v42 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of ActivitySession.DomainAssertionWrapper(v40, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v36, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
          if ((v42 & 1) == 0)
            goto LABEL_16;
          goto LABEL_8;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper(v40, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v36, type metadata accessor for CP_EncryptionID);
        v38 = (uint64_t)v13;
        v37 = &demangling cache variable for type metadata for CP_EncryptionID?;
LABEL_15:
        outlined destroy of UUID?(v38, v37);
        goto LABEL_16;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v36, type metadata accessor for CP_EncryptionID);
    }
    v37 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
    v38 = (uint64_t)v13;
    goto LABEL_15;
  }
  return v23 & 1;
}

uint64_t specialized static CP_PublishResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v50 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v49 = (char *)&v44 - v7;
  v8 = type metadata accessor for CP_SequenceNumber(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v48 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v44 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v44 - v21;
  v23 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v23 = qword_1ACF67630[v23];
  v24 = *a2;
  if (*((_BYTE *)a2 + 8))
    __asm { BR              X11 }
  if (v23 != v24)
    goto LABEL_22;
  v47 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v46 = v17;
    v26 = type metadata accessor for CP_PublishResponse(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v26 + 28), (uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
    v45 = v26;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v26 + 28), (uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
    v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CP_SequenceNumber?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for CP_SequenceNumber?);
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v28(v27, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_SequenceNumber?);
LABEL_12:
        v29 = v45;
        v30 = (uint64_t)a1 + *(int *)(v45 + 24);
        v31 = v51;
        v32 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
        v33 = v49;
        v34 = v47;
        v32(v49, v30, v47);
        v35 = (uint64_t)a2 + *(int *)(v29 + 24);
        v36 = v50;
        v32(v50, v35, v34);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        v37 = *(void (**)(char *, uint64_t))(v31 + 8);
        v37(v36, v34);
        v37(v33, v34);
        return v25 & 1;
      }
    }
    else
    {
      v38 = v46;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v46, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v28(v27, 1, v8) != 1)
      {
        v41 = v48;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v27, (uint64_t)v48, type metadata accessor for CP_SequenceNumber);
        if (*v38 == *v41 && v38[1] == v41[1])
        {
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v42 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v41, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v38, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_SequenceNumber?);
          if ((v42 & 1) != 0)
            goto LABEL_12;
LABEL_22:
          v25 = 0;
          return v25 & 1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v41, type metadata accessor for CP_SequenceNumber);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v38, type metadata accessor for CP_SequenceNumber);
        v40 = (uint64_t)v13;
        v39 = &demangling cache variable for type metadata for CP_SequenceNumber?;
LABEL_21:
        outlined destroy of UUID?(v40, v39);
        goto LABEL_22;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v38, type metadata accessor for CP_SequenceNumber);
    }
    v39 = &demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?);
    v40 = (uint64_t)v13;
    goto LABEL_21;
  }
  return v25 & 1;
}

uint64_t specialized static CP_SequenceNumber.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1))
  {
    v11 = type metadata accessor for CP_SequenceNumber(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static CP_PublishRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation?, CP_PublishRequest.OneOf_Operation?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      v25 = specialized static CP_PublishRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for CP_PublishRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation?, CP_PublishRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
LABEL_8:
  v26 = type metadata accessor for CP_PublishRequest(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static CP_PublishRequest.UpdatedEncryptionID.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;

  v4 = type metadata accessor for UnknownStorage();
  v47 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v45 = (char *)&v43 - v7;
  v8 = type metadata accessor for CP_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v44 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)a2;
  v26 = *((_QWORD *)a2 + 1);
  v48 = a2;
  if (v23 == v25 && v24 == v26 || (v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v43 = v4;
    v28 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v48[*(int *)(v28 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
    v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v29, &demangling cache variable for type metadata for CP_EncryptionID?);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v30(v29, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
LABEL_12:
        v36 = v47;
        v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        v38 = v45;
        v39 = v43;
        v37(v45, (char *)a1 + *(int *)(v28 + 20), v43);
        v40 = v46;
        v37(v46, &v48[*(int *)(v28 + 20)], v39);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v41 = *(void (**)(char *, uint64_t))(v36 + 8);
        v41(v40, v39);
        v41(v38, v39);
        return v27 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v30(v29, 1, v8) != 1)
      {
        v33 = v44;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v29, v44, type metadata accessor for CP_EncryptionID);
        specialized static Data.== infix(_:_:)(*v17, v17[1]);
        if ((v34 & 1) != 0)
        {
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v35 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of ActivitySession.DomainAssertionWrapper(v33, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
          if ((v35 & 1) != 0)
            goto LABEL_12;
LABEL_15:
          v27 = 0;
          return v27 & 1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper(v33, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_EncryptionID);
        v32 = (uint64_t)v13;
        v31 = &demangling cache variable for type metadata for CP_EncryptionID?;
LABEL_14:
        outlined destroy of UUID?(v32, v31);
        goto LABEL_15;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_EncryptionID);
    }
    v31 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
    v32 = (uint64_t)v13;
    goto LABEL_14;
  }
  return v27 & 1;
}

uint64_t specialized static CP_Record.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  uint64_t *v56;
  uint64_t v58;
  char v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;

  v77 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v77 - 8);
  v4 = MEMORY[0x1E0C80A78](v77);
  v73 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v72 = (char *)&v69 - v6;
  v81 = type metadata accessor for CP_EncryptionID(0);
  v78 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v75 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1E0C80A78](v8);
  v82 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v76 = (uint64_t *)((char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v79 = (uint64_t)&v69 - v14;
  MEMORY[0x1E0C80A78](v13);
  v80 = (uint64_t)&v69 - v15;
  v16 = type metadata accessor for CP_SequenceNumber(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v83 = (uint64_t *)((char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v69 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v69 - v29;
  v31 = *a1;
  v32 = a1[1];
  v33 = *a2;
  v34 = a2[1];
  v84 = a2;
  if (v31 == v33 && v32 == v34 || (v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v36 = v84;
    specialized static Data.== infix(_:_:)(a1[2], a1[3]);
    if ((v37 & 1) == 0)
      goto LABEL_25;
    v69 = v8;
    v38 = type metadata accessor for CP_Record(0);
    v39 = *(int *)(v38 + 36);
    v71 = a1;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + v39, (uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
    v70 = v38;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v36 + *(int *)(v38 + 36), (uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
    v40 = (uint64_t)&v21[*(int *)(v19 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for CP_SequenceNumber?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v40, &demangling cache variable for type metadata for CP_SequenceNumber?);
    v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    if (v41((uint64_t)v21, 1, v16) == 1)
    {
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v41(v40, 1, v16) == 1)
      {
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SequenceNumber?);
        goto LABEL_8;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v41(v40, 1, v16) != 1)
      {
        v54 = v83;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v40, (uint64_t)v83, type metadata accessor for CP_SequenceNumber);
        if (*v25 != *v54 || v25[1] != v54[1])
        {
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v54, type metadata accessor for CP_SequenceNumber);
          v45 = &demangling cache variable for type metadata for CP_SequenceNumber?;
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for CP_SequenceNumber);
          v53 = (uint64_t)v21;
LABEL_20:
          v52 = v45;
          goto LABEL_24;
        }
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v55 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v54, type metadata accessor for CP_SequenceNumber);
        outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for CP_SequenceNumber);
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SequenceNumber?);
        if ((v55 & 1) == 0)
          goto LABEL_25;
LABEL_8:
        v42 = v71;
        v43 = v84;
        if (!specialized static Array<A>.== infix(_:_:)((_QWORD *)v71[4], (_QWORD *)v84[4]))
          goto LABEL_25;
        v44 = v70;
        v45 = &demangling cache variable for type metadata for CP_EncryptionID?;
        v46 = v80;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v42 + *(int *)(v70 + 40), v80, &demangling cache variable for type metadata for CP_EncryptionID?);
        v47 = v79;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v43 + *(int *)(v44 + 40), v79, &demangling cache variable for type metadata for CP_EncryptionID?);
        v48 = v82;
        v49 = v82 + *(int *)(v69 + 48);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, v82, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v47, v49, &demangling cache variable for type metadata for CP_EncryptionID?);
        v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
        v51 = v81;
        if (v50(v48, 1, v81) == 1)
        {
          outlined destroy of UUID?(v47, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?(v46, &demangling cache variable for type metadata for CP_EncryptionID?);
          if (v50(v49, 1, v51) == 1)
          {
            outlined destroy of UUID?(v48, &demangling cache variable for type metadata for CP_EncryptionID?);
            goto LABEL_29;
          }
          goto LABEL_23;
        }
        v56 = v76;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v48, (uint64_t)v76, &demangling cache variable for type metadata for CP_EncryptionID?);
        if (v50(v49, 1, v51) == 1)
        {
          outlined destroy of UUID?(v47, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?(v46, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for CP_EncryptionID);
LABEL_23:
          v52 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
          v53 = v48;
          goto LABEL_24;
        }
        v58 = v75;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v49, v75, type metadata accessor for CP_EncryptionID);
        specialized static Data.== infix(_:_:)(*v56, v56[1]);
        if ((v59 & 1) != 0)
        {
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v60 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of ActivitySession.DomainAssertionWrapper(v58, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?(v47, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?(v46, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?(v48, &demangling cache variable for type metadata for CP_EncryptionID?);
          if ((v60 & 1) != 0)
          {
LABEL_29:
            v61 = v84;
            if (v42[5] == v84[5])
            {
              v62 = (uint64_t)v42 + *(int *)(v44 + 32);
              v63 = v74;
              v64 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
              v65 = v72;
              v66 = v77;
              v64(v72, v62, v77);
              v67 = v73;
              v64(v73, (uint64_t)v61 + *(int *)(v44 + 32), v66);
              lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v35 = dispatch thunk of static Equatable.== infix(_:_:)();
              v68 = *(void (**)(char *, uint64_t))(v63 + 8);
              v68(v67, v66);
              v68(v65, v66);
              return v35 & 1;
            }
          }
LABEL_25:
          v35 = 0;
          return v35 & 1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper(v58, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?(v47, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?(v46, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for CP_EncryptionID);
        v53 = v48;
        goto LABEL_20;
      }
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for CP_SequenceNumber);
    }
    v52 = &demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?);
    v53 = (uint64_t)v21;
LABEL_24:
    outlined destroy of UUID?(v53, v52);
    goto LABEL_25;
  }
  return v35 & 1;
}

uint64_t specialized static CP_PublishRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CP_Record(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t *)((char *)&v27 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation, CP_PublishRequest.OneOf_Operation));
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, v20, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v13, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v20, (uint64_t)v6, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      v21 = specialized static CP_PublishRequest.UpdatedEncryptionID.== infix(_:_:)(v13, v6);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID;
LABEL_9:
      outlined destroy of ActivitySession.DomainAssertionWrapper(v22, v23);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      return v21 & 1;
    }
    v24 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID;
    v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v15, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v20, (uint64_t)v9, type metadata accessor for CP_Record);
      v21 = specialized static CP_Record.== infix(_:_:)(v15, v9);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for CP_Record);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for CP_Record;
      goto LABEL_9;
    }
    v24 = type metadata accessor for CP_Record;
    v25 = (uint64_t)v15;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v25, v24);
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation, CP_PublishRequest.OneOf_Operation));
  v21 = 0;
  return v21 & 1;
}

uint64_t specialized static CP_EncryptionID.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    v12 = type metadata accessor for CP_EncryptionID(0);
    v13 = (char *)a1 + *(int *)(v12 + 20);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 20)), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static CP_SystemEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(unsigned __int8 *)(a1 + 16);
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 255)
  {
    if (v12 == 255)
    {
LABEL_13:
      v14 = type metadata accessor for CP_SystemEvent(0);
      v15 = a1 + *(int *)(v14 + 20);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, a2 + *(int *)(v14 + 20), v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v13 & 1;
    }
    goto LABEL_5;
  }
  if (v12 == 255)
  {
LABEL_5:
    v13 = 0;
    return v13 & 1;
  }
  if ((v11 & 1) != 0)
  {
    if ((v12 & 1) == 0)
      goto LABEL_5;
  }
  else if ((v12 & 1) != 0)
  {
    goto LABEL_5;
  }
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    goto LABEL_13;
  v13 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_13;
  return v13 & 1;
}

uint64_t specialized static CP_KeyValue.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    specialized static Data.== infix(_:_:)(a1[2], a1[3]);
    if ((v13 & 1) != 0)
    {
      v14 = type metadata accessor for CP_KeyValue(0);
      v15 = (char *)a1 + *(int *)(v14 + 24);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, &a2[*(int *)(v14 + 24)], v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized CP_ResponseStatus.init(rawValue:)(uint64_t result)
{
  switch(result)
  {
    case 0:
    case 2:
      return result;
    case 1:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 4;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 6;
      break;
    case 8:
      result = 7;
      break;
    default:
      if (result == 1000)
        result = 8;
      break;
  }
  return result;
}

uint64_t type metadata accessor for CP_Record(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_Record);
}

uint64_t type metadata accessor for CP_SequenceNumber(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SequenceNumber);
}

uint64_t type metadata accessor for CP_EncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_EncryptionID);
}

uint64_t type metadata accessor for CP_KeyValue(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_KeyValue);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest);
}

uint64_t type metadata accessor for CP_TopicSubscribers(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribers);
}

uint64_t type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t type metadata accessor for CP_TopicSubscribers.TerminateTopic(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribers.TerminateTopic);
}

uint64_t outlined copy of CP_SystemEvent.OneOf_Event?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined copy of CP_SystemEvent.OneOf_Event();
  return result;
}

uint64_t outlined copy of CP_SystemEvent.OneOf_Event()
{
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of CP_SystemEvent.OneOf_Event?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined consume of CP_SystemEvent.OneOf_Event();
  return result;
}

uint64_t outlined consume of CP_SystemEvent.OneOf_Event()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CP_SystemEvent(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SystemEvent);
}

uint64_t type metadata accessor for CP_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t type metadata accessor for CP_SubscribeRequest.Initialize(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest.Initialize);
}

uint64_t type metadata accessor for CP_SubscribeRequest.RecordAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest.RecordAck);
}

uint64_t type metadata accessor for CP_SubscribeRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest);
}

uint64_t type metadata accessor for CP_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t type metadata accessor for CP_SubscribeResponse.InitializeAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.InitializeAck);
}

uint64_t type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t type metadata accessor for CP_SubscribeResponse.TopicUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.TopicUpdate);
}

uint64_t type metadata accessor for CP_SubscribeResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse);
}

uint64_t type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t type metadata accessor for CP_PublishRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishRequest.OneOf_Operation);
}

uint64_t type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t type metadata accessor for CP_PublishRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishRequest);
}

uint64_t type metadata accessor for CP_PublishResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishResponse);
}

uint64_t type metadata accessor for CP_UpsertTopicMetadataRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_UpsertTopicMetadataRequest);
}

uint64_t type metadata accessor for CP_UpsertTopicMetadataResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_UpsertTopicMetadataResponse);
}

uint64_t type metadata accessor for CP_CreateTopicRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_CreateTopicRequest);
}

uint64_t type metadata accessor for CP_CreateTopicResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_CreateTopicResponse);
}

uint64_t type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t type metadata accessor for CP_FetchTopicsResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_FetchTopicsResponse);
}

unint64_t lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason, &type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason, &type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason, &type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason, &type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_ResponseStatus, &type metadata for CP_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_ResponseStatus, &type metadata for CP_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_ResponseStatus, &type metadata for CP_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_ResponseStatus, &type metadata for CP_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for CP_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for CP_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for CP_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for CP_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_CreateTopicRequest.TopicCategory, &type metadata for CP_CreateTopicRequest.TopicCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_CreateTopicRequest.TopicCategory, &type metadata for CP_CreateTopicRequest.TopicCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_CreateTopicRequest.TopicCategory, &type metadata for CP_CreateTopicRequest.TopicCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CP_CreateTopicRequest.TopicCategory, &type metadata for CP_CreateTopicRequest.TopicCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

uint64_t type metadata accessor for CP_FetchTopicsRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_FetchTopicsRequest);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_ResponseStatus()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_ResponseStatus] and conformance [A], &demangling cache variable for type metadata for [CP_ResponseStatus]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_TopicSubscribersRequest.TopicTerminationRequest.Reason()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_TopicSubscribersRequest.TopicTerminationRequest.Reason] and conformance [A], &demangling cache variable for type metadata for [CP_TopicSubscribersRequest.TopicTerminationRequest.Reason]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_SubscribeResponse.TopicUpdate.UpdateEvent] and conformance [A], &demangling cache variable for type metadata for [CP_SubscribeResponse.TopicUpdate.UpdateEvent]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_CreateTopicRequest.TopicCategory()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_CreateTopicRequest.TopicCategory] and conformance [A], &demangling cache variable for type metadata for [CP_CreateTopicRequest.TopicCategory]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_Record()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
}

uint64_t base witness table accessor for Message in CP_Record()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
}

uint64_t base witness table accessor for Hashable in CP_Record()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
}

uint64_t base witness table accessor for Equatable in CP_Record()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, type metadata accessor for CP_Record, (uint64_t)&protocol conformance descriptor for CP_Record);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_KeyValue()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
}

uint64_t base witness table accessor for Message in CP_KeyValue()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
}

uint64_t base witness table accessor for Hashable in CP_KeyValue()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
}

uint64_t base witness table accessor for Equatable in CP_KeyValue()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
}

uint64_t base witness table accessor for Message in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
}

uint64_t base witness table accessor for Hashable in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
}

uint64_t base witness table accessor for Equatable in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
}

uint64_t base witness table accessor for Message in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
}

uint64_t base witness table accessor for Hashable in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
}

uint64_t base witness table accessor for Equatable in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, type metadata accessor for CP_TopicSubscribersRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, type metadata accessor for CP_TopicSubscribers, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, type metadata accessor for CP_TopicSubscribers.TerminateTopic, (uint64_t)&protocol conformance descriptor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
}

uint64_t base witness table accessor for Message in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
}

uint64_t base witness table accessor for Hashable in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
}

uint64_t base witness table accessor for Equatable in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, type metadata accessor for CP_SystemEvent, (uint64_t)&protocol conformance descriptor for CP_SystemEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for Message in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Message in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for Message in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, type metadata accessor for CP_SubscribeResponse, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
}

uint64_t base witness table accessor for Message in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
}

uint64_t base witness table accessor for Hashable in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
}

uint64_t base witness table accessor for Equatable in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for Message in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for Hashable in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for Equatable in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
}

uint64_t base witness table accessor for Message in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
}

uint64_t base witness table accessor for Hashable in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
}

uint64_t base witness table accessor for Equatable in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, type metadata accessor for CP_PublishResponse, (uint64_t)&protocol conformance descriptor for CP_PublishResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for Message in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for Hashable in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for Equatable in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for Message in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for Hashable in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for Equatable in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, type metadata accessor for CP_UpsertTopicMetadataResponse, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for Message in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for Hashable in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for Equatable in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, type metadata accessor for CP_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for Message in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for Hashable in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for Equatable in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Message in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Hashable in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Equatable in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for Message in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for Hashable in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for Equatable in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, type metadata accessor for CP_FetchTopicsRequest, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
}

uint64_t base witness table accessor for Message in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
}

uint64_t base witness table accessor for Hashable in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
}

uint64_t base witness table accessor for Equatable in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, type metadata accessor for CP_FetchTopicsResponse, (uint64_t)&protocol conformance descriptor for CP_FetchTopicsResponse);
}

uint64_t sub_1ACE5194C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_Record.encryptionID : CP_Record(a1, type metadata accessor for CP_Record, a2);
}

uint64_t sub_1ACE51968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_Record.encryptionID : CP_Record(a1, a2, a3, a4, type metadata accessor for CP_Record);
}

uint64_t sub_1ACE51988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t sub_1ACE519B8@<X0>(uint64_t a1@<X8>)
{
  return CP_TopicSubscribersRequest.topicTerminationRequest.getter(a1);
}

uint64_t sub_1ACE519D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t sub_1ACE51A08@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    v4 = 0;
    v3 = 0xE000000000000000;
  }
  else
  {
    v4 = *(_QWORD *)result;
    v3 = *(_QWORD *)(result + 8);
    result = outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACE51A58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, 0);
}

uint64_t sub_1ACE51A60@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  unint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(result + 16);
  if (v3 == 255 || (v3 & 1) == 0)
  {
    v6 = 0;
    v5 = 0xE000000000000000;
  }
  else
  {
    v6 = *(_QWORD *)result;
    v5 = *(_QWORD *)(result + 8);
    result = outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

uint64_t sub_1ACE51ABC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, 1);
}

uint64_t keypath_set_8Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t result;

  v8 = *a1;
  v7 = a1[1];
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  result = outlined consume of CP_SystemEvent.OneOf_Event?(v9, v10, v11);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = a5;
  return result;
}

uint64_t sub_1ACE51B28@<X0>(_QWORD *a1@<X8>)
{
  return CP_SubscribeRequest.initialize.getter(a1);
}

uint64_t sub_1ACE51B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_SubscribeRequest.Initialize, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t sub_1ACE51B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_SubscribeRequest.RecordAck, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t sub_1ACE51BAC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_Record.encryptionID : CP_Record(a1, type metadata accessor for CP_SubscribeRequest.Initialize, a2);
}

uint64_t sub_1ACE51BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_Record.encryptionID : CP_Record(a1, a2, a3, a4, type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t sub_1ACE51BE4@<X0>(uint64_t a1@<X8>)
{
  return CP_SubscribeResponse.initializeAck.getter(a1);
}

uint64_t sub_1ACE51C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t sub_1ACE51C34@<X0>(uint64_t a1@<X8>)
{
  return CP_SubscribeResponse.record.getter(a1);
}

uint64_t sub_1ACE51C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_Record, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t sub_1ACE51C84@<X0>(uint64_t a1@<X8>)
{
  return CP_SubscribeResponse.topicUpdate.getter(a1);
}

uint64_t sub_1ACE51CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_SubscribeResponse.TopicUpdate, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t sub_1ACE51CE4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, a2);
}

uint64_t sub_1ACE51D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, a4, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t sub_1ACE51D1C@<X0>(uint64_t a1@<X8>)
{
  return CP_PublishRequest.record.getter(a1);
}

uint64_t sub_1ACE51D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_Record, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_PublishRequest.OneOf_Operation);
}

uint64_t sub_1ACE51D6C@<X0>(_QWORD *a1@<X8>)
{
  return CP_PublishRequest.updatedEncryptionID.getter(a1);
}

uint64_t sub_1ACE51D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_PublishRequest.OneOf_Operation);
}

uint64_t sub_1ACE51DBC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, a2);
}

uint64_t sub_1ACE51DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, a4, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t sub_1ACE51DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for CP_SequenceNumber, type metadata accessor for CP_PublishResponse, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t sub_1ACE51E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

ValueMetadata *type metadata accessor for CP_ResponseStatus()
{
  return &type metadata for CP_ResponseStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_Record(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    v9 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    v11 = a3[8];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    v16 = a3[9];
    v17 = (_OWORD *)((char *)a1 + v16);
    v18 = (_OWORD *)((char *)a2 + v16);
    v19 = type metadata accessor for CP_SequenceNumber(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v14);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v23 = a3[10];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = type metadata accessor for CP_EncryptionID(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = *v25;
      v30 = v25[1];
      outlined copy of Data._Representation(*v25, v30);
      *v24 = v29;
      v24[1] = v30;
      v15((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t destroy for CP_Record(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for CP_SequenceNumber(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v11(v6 + *(int *)(v7 + 24), v5);
  v8 = a1 + a2[10];
  v9 = type metadata accessor for CP_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for CP_Record(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  v15 = a3[9];
  v16 = (_OWORD *)((char *)a1 + v15);
  v17 = (_OWORD *)((char *)a2 + v15);
  v18 = type metadata accessor for CP_SequenceNumber(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[10];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = type metadata accessor for CP_EncryptionID(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = *v23;
    v28 = v23[1];
    outlined copy of Data._Representation(*v23, v28);
    *v22 = v27;
    v22[1] = v28;
    v14((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

_QWORD *assignWithCopy for CP_Record(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v40 = *(_QWORD *)(v13 - 8);
  v39 = *(void (**)(char *, char *, uint64_t))(v40 + 24);
  v39(v11, v12, v13);
  v14 = a3[9];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for CP_SequenceNumber(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for CP_SequenceNumber);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  v39(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v13);
LABEL_7:
  v23 = a3[10];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v26 = type metadata accessor for CP_EncryptionID(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v35 = *v25;
      v36 = v25[1];
      outlined copy of Data._Representation(*v25, v36);
      v37 = *v24;
      v38 = v24[1];
      *v24 = v35;
      v24[1] = v36;
      outlined consume of Data._Representation(v37, v38);
      v39((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v13);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v24, type metadata accessor for CP_EncryptionID);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  v31 = *v25;
  v32 = v25[1];
  outlined copy of Data._Representation(*v25, v32);
  *v24 = v31;
  v24[1] = v32;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

_OWORD *initializeWithTake for CP_Record(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[8];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[9];
  v13 = (_OWORD *)((char *)a1 + v12);
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for CP_SequenceNumber(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[10];
  v19 = (_OWORD *)((char *)a1 + v18);
  v20 = (_OWORD *)((char *)a2 + v18);
  v21 = type metadata accessor for CP_EncryptionID(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v11((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

_QWORD *assignWithTake for CP_Record(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[2];
  v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v7, v8);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  a1[5] = *(_QWORD *)(a2 + 40);
  v9 = a3[8];
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v35 = *(_QWORD *)(v12 - 8);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 40);
  v34(v10, v11, v12);
  v13 = a3[9];
  v14 = (char *)a1 + v13;
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CP_SequenceNumber(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v14[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_SequenceNumber);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v34(&v14[*(int *)(v16 + 24)], (uint64_t)&v15[*(int *)(v16 + 24)], v12);
LABEL_7:
  v22 = a3[10];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = type metadata accessor for CP_EncryptionID(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      v32 = *v23;
      v33 = v23[1];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      outlined consume of Data._Representation(v32, v33);
      v34((char *)v23 + *(int *)(v25 + 20), (uint64_t)v24 + *(int *)(v25 + 20), v12);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, type metadata accessor for CP_EncryptionID);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v23 = *(_OWORD *)v24;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v12);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_Record()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE52A60(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_Record()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE52B38(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CP_Record()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for CP_SequenceNumber?, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for CP_EncryptionID?, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CP_KeyValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CP_KeyValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CP_KeyValue()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SequenceNumber(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_OWORD *initializeWithCopy for CP_SequenceNumber(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for CP_SequenceNumber(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for CP_SequenceNumber(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SequenceNumber()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE52ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CP_SequenceNumber()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE52F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for CP_SequenceNumber()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t getEnumTagSinglePayload for CP_EncryptionID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE52F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_EncryptionID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACE5301C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_EncryptionID()
{
  return type metadata completion function for CP_EncryptionID();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
      }
      else
      {
        v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
      }
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for UnknownStorage();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v18 = *(int *)(a3 + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
      v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    else
      v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    v7 = a1 + v6;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = a1 + *(int *)(a2 + 20);
  v10 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

_QWORD *initializeWithCopy for CP_TopicSubscribersRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v11 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      v11 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t assignWithCopy for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        v12 = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v12;
        v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
      }
      else
      {
        v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
      }
      v14 = a1 + v13;
      v15 = a2 + v13;
      v16 = type metadata accessor for UnknownStorage();
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    v19 = swift_getEnumCaseMultiPayload();
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    if (v19 == 1)
    {
      v20 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v20;
      v21 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      v21 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    v22 = a1 + v21;
    v23 = a2 + v21;
    v24 = type metadata accessor for UnknownStorage();
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    v25(v22, v23, v24);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v26 = *(int *)(a3 + 20);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

_OWORD *initializeWithTake for CP_TopicSubscribersRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v10 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      v10 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        v12 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
      }
      else
      {
        v12 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
      }
      v13 = a1 + v12;
      v14 = a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v18 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      v18 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v22 = *(int *)(a3 + 20);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribersRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE53B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribersRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE53BB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

void type metadata completion function for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      v8 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      v8 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
    v3 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
  else
    v3 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
  v4 = a1 + v3;
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
  }
  else
  {
    v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
  }
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    if (EnumCaseMultiPayload == 1)
    {
      v5 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    v7 = a1 + v6;
    v8 = a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
  }
  else
  {
    v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
  }
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    v6 = a1 + v5;
    v7 = a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return type metadata completion function for CP_EncryptionID();
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

ValueMetadata *type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason()
{
  return &type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribers(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CP_TopicSubscribers(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CP_TopicSubscribers(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for CP_TopicSubscribers(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for CP_TopicSubscribers(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribers()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE54740(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribers()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACE547C8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_TopicSubscribers()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribers.TopicSubscribersInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribers.TopicSubscribersInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CP_TopicSubscribers.TopicSubscribersInfo()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CP_TopicSubscribersRequest.TopicTerminatedAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for CP_TopicSubscribersRequest.TopicTerminatedAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for CP_TopicSubscribersRequest.TopicTerminatedAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribers.TerminateTopic()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_47Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribers.TerminateTopic()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_48Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SystemEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *((unsigned __int8 *)a2 + 16);
    if (v7 == 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    }
    else
    {
      v9 = v7 & 1;
      v10 = *a2;
      v11 = a2[1];
      outlined copy of CP_SystemEvent.OneOf_Event();
      *(_QWORD *)v4 = v10;
      *(_QWORD *)(v4 + 8) = v11;
      *(_BYTE *)(v4 + 16) = v9;
    }
    v12 = *(int *)(a3 + 20);
    v13 = v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return v4;
}

uint64_t destroy for CP_SystemEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(a1 + 16) != 255)
    outlined consume of CP_SystemEvent.OneOf_Event();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CP_SystemEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v7 = v6 & 1;
    v8 = *a2;
    v9 = a2[1];
    outlined copy of CP_SystemEvent.OneOf_Event();
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
  }
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for CP_SystemEvent(uint64_t a1, __int128 *a2, uint64_t a3)
{
  int v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v6 == 255)
    {
      v8 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v8;
    }
    else
    {
      v12 = v6 & 1;
      v13 = *(_QWORD *)a2;
      v14 = *((_QWORD *)a2 + 1);
      outlined copy of CP_SystemEvent.OneOf_Event();
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v12;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of CP_SystemEvent.OneOf_Event(a1);
    v7 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v7;
  }
  else
  {
    v9 = v6 & 1;
    v10 = *(_QWORD *)a2;
    v11 = *((_QWORD *)a2 + 1);
    outlined copy of CP_SystemEvent.OneOf_Event();
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = v9;
    outlined consume of CP_SystemEvent.OneOf_Event();
  }
  v15 = *(int *)(a3 + 20);
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t outlined destroy of CP_SystemEvent.OneOf_Event(uint64_t a1)
{
  outlined consume of CP_SystemEvent.OneOf_Event();
  return a1;
}

uint64_t initializeWithTake for CP_SystemEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_SystemEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 16);
    if (v6 != 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v6 & 1;
      outlined consume of CP_SystemEvent.OneOf_Event();
      goto LABEL_6;
    }
    outlined destroy of CP_SystemEvent.OneOf_Event(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
LABEL_6:
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SystemEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5501C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 <= 1)
      return 0;
    else
      return v4 ^ 0xFF;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SystemEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5509C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_SystemEvent()
{
  return type metadata completion function for CP_EncryptionID();
}

uint64_t destroy for CP_SystemEvent.OneOf_Event()
{
  return outlined consume of CP_SystemEvent.OneOf_Event();
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of CP_SystemEvent.OneOf_Event();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of CP_SystemEvent.OneOf_Event();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CP_SystemEvent.OneOf_Event();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CP_SystemEvent.OneOf_Event();
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SystemEvent.OneOf_Event(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CP_SystemEvent.OneOf_Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CP_SystemEvent.OneOf_Event(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for CP_SystemEvent.OneOf_Event(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CP_SystemEvent.OneOf_Event()
{
  return &type metadata for CP_SystemEvent.OneOf_Event;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        v11 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for UnknownStorage();
        v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        v15(v12, v13, v14);
      }
      else
      {
        v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        v17 = a2[3];
        a1[2] = a2[2];
        a1[3] = v17;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        v18 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
        v19 = *(int *)(v18 + 36);
        v35 = (char *)a2 + v19;
        v37 = (char *)a1 + v19;
        v20 = type metadata accessor for UnknownStorage();
        v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22 = v37;
        v38 = v21;
        v39 = v20;
        v21(v22, v35, v20);
        v23 = *(int *)(v18 + 40);
        v24 = (uint64_t *)((char *)a1 + v23);
        v25 = (uint64_t *)((char *)a2 + v23);
        v26 = type metadata accessor for CP_EncryptionID(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v29 = v25[1];
          v36 = *v25;
          outlined copy of Data._Representation(*v25, v29);
          *v24 = v36;
          v24[1] = v29;
          v38((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v39);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v30 = *(int *)(a3 + 20);
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  }
  return a1;
}

uint64_t destroy for CP_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      v5 = a1 + *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v6 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v8 = a1 + *(int *)(v7 + 36);
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v8, v9);
      v11 = a1 + *(int *)(v7 + 40);
      v12 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
      {
        outlined consume of Data._Representation(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
        v10(v11 + *(int *)(v12 + 20), v9);
      }
    }
  }
  v13 = a1 + *(int *)(a2 + 20);
  v14 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

_QWORD *initializeWithCopy for CP_SubscribeRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;

  v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    else
    {
      v35 = a3;
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      v15 = a2[3];
      a1[2] = a2[2];
      a1[3] = v15;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v16 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v17 = *(int *)(v16 + 36);
      v36 = (char *)a2 + v17;
      v38 = (char *)a1 + v17;
      v18 = type metadata accessor for UnknownStorage();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = v36;
      v20 = v38;
      v37 = v19;
      v39 = v18;
      v19(v20, v21, v18);
      v22 = *(int *)(v16 + 40);
      v23 = (_QWORD *)((char *)a1 + v22);
      v24 = (_QWORD *)((char *)a2 + v22);
      v25 = type metadata accessor for CP_EncryptionID(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v28 = *v24;
        v29 = v24[1];
        outlined copy of Data._Representation(*v24, v29);
        *v23 = v28;
        v23[1] = v29;
        v37((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      a3 = v35;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v30 = *(int *)(a3 + 20);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

_QWORD *assignWithCopy for CP_SubscribeRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        v11 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for UnknownStorage();
        v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        v15(v12, v13, v14);
      }
      else
      {
        v63 = a3;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        v22 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
        v23 = *(int *)(v22 + 36);
        v57 = (char *)a2 + v23;
        v59 = (char *)a1 + v23;
        v24 = type metadata accessor for UnknownStorage();
        v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v27 = v57;
        v26 = v59;
        v58 = v25;
        v60 = v24;
        v25(v26, v27, v24);
        v28 = *(int *)(v22 + 40);
        v29 = (_QWORD *)((char *)a1 + v28);
        v30 = (_QWORD *)((char *)a2 + v28);
        v31 = type metadata accessor for CP_EncryptionID(0);
        v32 = *(_QWORD *)(v31 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          v48 = *v30;
          v49 = v30[1];
          outlined copy of Data._Representation(*v30, v49);
          *v29 = v48;
          v29[1] = v49;
          v58((char *)v29 + *(int *)(v31 + 20), (char *)v30 + *(int *)(v31 + 20), v60);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
        }
        a3 = v63;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v17 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UnknownStorage();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v21(v18, v19, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v64 = a3;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      v34 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v35 = *(int *)(v34 + 36);
      v36 = (char *)a1 + v35;
      v61 = (char *)a2 + v35;
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39 = v61;
      v62 = v37;
      v40 = v37;
      v41 = v38;
      v38(v36, v39, v40);
      v42 = *(int *)(v34 + 40);
      v43 = (_QWORD *)((char *)a1 + v42);
      v44 = (_QWORD *)((char *)a2 + v42);
      v45 = type metadata accessor for CP_EncryptionID(0);
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        v55 = *v44;
        v56 = v44[1];
        outlined copy of Data._Representation(*v44, v56);
        *v43 = v55;
        v43[1] = v56;
        v41((char *)v43 + *(int *)(v45 + 20), (char *)v44 + *(int *)(v45 + 20), v62);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      a3 = v64;
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_18:
  v50 = *(int *)(a3 + 20);
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
  return a1;
}

_OWORD *initializeWithTake for CP_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);

  v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      v14 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v15 = *(int *)(v14 + 36);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for UnknownStorage();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v30(v16, v17, v18);
      v19 = *(int *)(v14 + 40);
      v20 = (_OWORD *)((char *)a1 + v19);
      v21 = (_OWORD *)((char *)a2 + v19);
      v22 = type metadata accessor for CP_EncryptionID(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *v20 = *v21;
        v30((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v18);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v25 = *(int *)(a3 + 20);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  return a1;
}

_OWORD *assignWithTake for CP_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v50)(char *, char *, uint64_t);

  v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v11 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      }
      else
      {
        v20 = a2[1];
        *a1 = *a2;
        a1[1] = v20;
        a1[2] = a2[2];
        v21 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
        v22 = *(int *)(v21 + 36);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for UnknownStorage();
        v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
        v50(v23, v24, v25);
        v26 = *(int *)(v21 + 40);
        v27 = (_OWORD *)((char *)a1 + v26);
        v28 = (_OWORD *)((char *)a2 + v26);
        v29 = type metadata accessor for CP_EncryptionID(0);
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          *v27 = *v28;
          v50((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v25);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_7:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v16 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v32 = a2[1];
      *a1 = *a2;
      a1[1] = v32;
      a1[2] = a2[2];
      v33 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v34 = *(int *)(v33 + 36);
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
      v38(v35, v36, v37);
      v39 = *(int *)(v33 + 40);
      v40 = (_OWORD *)((char *)a1 + v39);
      v41 = (_OWORD *)((char *)a2 + v39);
      v42 = type metadata accessor for CP_EncryptionID(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        *v40 = *v41;
        v38((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v37);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  v45 = *(int *)(a3 + 20);
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE56380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE56398(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

void type metadata completion function for CP_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *a2;
      v6 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v7 = a1 + v6;
      v8 = (uint64_t)a2 + v6;
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9);
    }
    else
    {
      v12 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v12;
      v13 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v13;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      v14 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v15 = *(int *)(v14 + 36);
      v16 = (char *)(a1 + v15);
      v28 = (char *)a2 + v15;
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v16, v28, v17);
      v19 = *(int *)(v14 + 40);
      v20 = (_QWORD *)(a1 + v19);
      v21 = (uint64_t *)((char *)a2 + v19);
      v22 = type metadata accessor for CP_EncryptionID(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v25 = *v21;
        v26 = v21[1];
        outlined copy of Data._Representation(*v21, v26);
        *v20 = v25;
        v20[1] = v26;
        v18((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    v2 = a1 + *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
    v3 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    v6 = a1 + *(int *)(v5 + 36);
    v7 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v10(v6, v7);
    v8 = a1 + *(int *)(v5 + 40);
    v9 = type metadata accessor for CP_EncryptionID(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8 + *(int *)(v9 + 20), v7);
    }
  }
  return result;
}

uint64_t initializeWithCopy for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
    v5 = a1 + v4;
    v6 = a2 + v4;
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    swift_bridgeObjectRetain();
    v8(v5, v6, v7);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v11 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    v12 = *(int *)(v11 + 36);
    v13 = (char *)(a1 + v12);
    v14 = (char *)(a2 + v12);
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    v17 = *(int *)(v11 + 40);
    v18 = (_QWORD *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    v20 = type metadata accessor for CP_EncryptionID(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = *v19;
      v24 = v19[1];
      outlined copy of Data._Representation(*v19, v24);
      *v18 = v23;
      v18[1] = v24;
      v16((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v15);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for CP_SubscribeRequest.OneOf_Operation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v5 = (char *)a1 + v4;
      v6 = (char *)a2 + v4;
      v7 = type metadata accessor for UnknownStorage();
      v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      swift_bridgeObjectRetain();
      v8(v5, v6, v7);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v10 = *(int *)(v9 + 36);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
      v15 = *(int *)(v9 + 40);
      v16 = (_QWORD *)((char *)a1 + v15);
      v17 = (_QWORD *)((char *)a2 + v15);
      v18 = type metadata accessor for CP_EncryptionID(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v21 = *v17;
        v22 = v17[1];
        outlined copy of Data._Representation(*v17, v22);
        *v16 = v21;
        v16[1] = v22;
        v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
    v5 = a1 + v4;
    v6 = a2 + v4;
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    v10 = *(int *)(v9 + 36);
    v11 = (char *)(a1 + v10);
    v12 = (char *)(a2 + v10);
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    v15 = *(int *)(v9 + 40);
    v16 = (_OWORD *)(a1 + v15);
    v17 = (_OWORD *)(a2 + v15);
    v18 = type metadata accessor for CP_EncryptionID(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v16 = *v17;
      v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      v5 = a1 + v4;
      v6 = a2 + v4;
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      v10 = *(int *)(v9 + 36);
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      v15 = *(int *)(v9 + 40);
      v16 = (_OWORD *)(a1 + v15);
      v17 = (_OWORD *)(a2 + v15);
      v18 = type metadata accessor for CP_EncryptionID(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *v16 = *v17;
        v14((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v13);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.RecordAck);
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(int *)(a3 + 36);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 40);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for CP_EncryptionID(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      outlined copy of Data._Representation(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v13((uint64_t)v15 + *(int *)(v17 + 20), (uint64_t)v16 + *(int *)(v17 + 20), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t destroy for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  v7 = type metadata accessor for CP_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 20), v5);
  }
  return result;
}

uint64_t initializeWithCopy for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v8 = *(int *)(a3 + 36);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 40);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = type metadata accessor for CP_EncryptionID(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    outlined copy of Data._Representation(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

_QWORD *assignWithCopy for CP_SubscribeRequest.Initialize(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for CP_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v23 = *v14;
      v24 = v14[1];
      outlined copy of Data._Representation(*v14, v24);
      v25 = *v13;
      v26 = v13[1];
      *v13 = v23;
      v13[1] = v24;
      outlined consume of Data._Representation(v25, v26);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v19 = *v14;
  v20 = v14[1];
  outlined copy of Data._Representation(*v14, v20);
  *v13 = v19;
  v13[1] = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for CP_SubscribeRequest.Initialize(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (_OWORD *)((char *)a1 + v12);
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for CP_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 40);
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = type metadata accessor for CP_EncryptionID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v22 = *v14;
      v23 = v14[1];
      *(_OWORD *)v14 = *(_OWORD *)v15;
      outlined consume of Data._Representation(v22, v23);
      v12((uint64_t)v14 + *(int *)(v16 + 20), (uint64_t)v15 + *(int *)(v16 + 20), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v10);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeRequest.Initialize()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE575C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeRequest.Initialize()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE57678(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CP_SubscribeRequest.Initialize()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for CP_EncryptionID?, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeRequest.RecordAck(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CP_SubscribeRequest.RecordAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for CP_SubscribeRequest.RecordAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for CP_SubscribeRequest.RecordAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for CP_SubscribeRequest.RecordAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeRequest.RecordAck()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE57A70(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeRequest.RecordAck()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACE57AF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_SubscribeRequest.RecordAck()
{
  return type metadata completion function for CP_EncryptionID();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v28 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = type metadata accessor for UnknownStorage();
        v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
        swift_bridgeObjectRetain();
        v32(v29, v30, v31);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        v13 = a2[2];
        v14 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v13, v14);
        a1[2] = v13;
        a1[3] = v14;
        v15 = a2[5];
        a1[4] = a2[4];
        a1[5] = v15;
        v16 = type metadata accessor for CP_Record(0);
        v17 = *(int *)(v16 + 32);
        v76 = (char *)a1 + v17;
        v18 = (char *)a2 + v17;
        v19 = type metadata accessor for UnknownStorage();
        v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        v74 = v20;
        v20(v76, v18, v19);
        v77 = v16;
        v21 = *(int *)(v16 + 36);
        v22 = (_OWORD *)((char *)a1 + v21);
        v23 = (_OWORD *)((char *)a2 + v21);
        v24 = type metadata accessor for CP_SequenceNumber(0);
        v25 = *(_QWORD *)(v24 - 8);
        v72 = v19;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          *v22 = *v23;
          v74((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v19);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        v46 = *(int *)(v77 + 40);
        v47 = (uint64_t *)((char *)a1 + v46);
        v48 = (uint64_t *)((char *)a2 + v46);
        v49 = type metadata accessor for CP_EncryptionID(0);
        v50 = *(_QWORD *)(v49 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        else
        {
          v79 = v8;
          v63 = *v48;
          v64 = v48[1];
          outlined copy of Data._Representation(*v48, v64);
          *v47 = v63;
          v47[1] = v64;
          v8 = v79;
          v74((char *)v47 + *(int *)(v49 + 20), (char *)v48 + *(int *)(v49 + 20), v72);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
        }
      }
      else
      {
        v78 = v8;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        v33 = a2[3];
        a1[2] = a2[2];
        a1[3] = v33;
        v34 = a2[5];
        a1[4] = a2[4];
        a1[5] = v34;
        v35 = a2[7];
        a1[6] = a2[6];
        a1[7] = v35;
        v36 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        v37 = v36[10];
        v70 = (char *)a2 + v37;
        v71 = (char *)a1 + v37;
        v38 = type metadata accessor for UnknownStorage();
        v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v73 = v38;
        v75(v71, v70, v38);
        v39 = v36[11];
        v40 = (uint64_t *)((char *)a1 + v39);
        v41 = (uint64_t *)((char *)a2 + v39);
        v42 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        v43 = *(_QWORD *)(v42 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          v8 = v78;
          v45 = v73;
        }
        else
        {
          v52 = v41[1];
          *v40 = *v41;
          v40[1] = v52;
          v53 = *(int *)(v42 + 24);
          v54 = (char *)v40 + v53;
          v55 = (char *)v41 + v53;
          swift_bridgeObjectRetain();
          v56 = v55;
          v45 = v73;
          v75(v54, v56, v73);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
          v8 = v78;
        }
        v57 = v36[12];
        v58 = (_OWORD *)((char *)a1 + v57);
        v59 = (_OWORD *)((char *)a2 + v57);
        v60 = type metadata accessor for CP_SequenceNumber(0);
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          *v58 = *v59;
          v75((char *)v58 + *(int *)(v60 + 24), (char *)v59 + *(int *)(v60 + 24), v45);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v65 = *(int *)(a3 + 20);
    v66 = (char *)a1 + v65;
    v67 = (char *)a2 + v65;
    v68 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  }
  return a1;
}

uint64_t destroy for CP_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
    goto LABEL_2;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      v18 = a1 + *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
      break;
    case 1:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease();
      v20 = (int *)type metadata accessor for CP_Record(0);
      v21 = a1 + v20[8];
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
      v12(v21, v11);
      v22 = a1 + v20[9];
      v23 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
        v12(v22 + *(int *)(v23 + 24), v11);
      v15 = a1 + v20[10];
      v24 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v15, 1, v24))
      {
        outlined consume of Data._Representation(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
        v17 = *(int *)(v24 + 20);
        goto LABEL_15;
      }
      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      v10 = a1 + v9[10];
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
      v12(v10, v11);
      v13 = a1 + v9[11];
      v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
      {
        swift_bridgeObjectRelease();
        v12(v13 + *(int *)(v14 + 24), v11);
      }
      v15 = a1 + v9[12];
      v16 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
      {
        v17 = *(int *)(v16 + 24);
LABEL_15:
        v12(v15 + v17, v11);
      }
      break;
  }
LABEL_2:
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for CP_SubscribeResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;

  v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      v26 = a2[3];
      a1[2] = a2[2];
      a1[3] = v26;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v27 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for UnknownStorage();
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
      swift_bridgeObjectRetain();
      v31(v28, v29, v30);
    }
    else
    {
      v75 = a3;
      v76 = v7;
      if (EnumCaseMultiPayload == 1)
      {
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        v11 = a2[2];
        v12 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v11, v12);
        a1[2] = v11;
        a1[3] = v12;
        v13 = a2[5];
        a1[4] = a2[4];
        a1[5] = v13;
        v14 = type metadata accessor for CP_Record(0);
        v15 = *(int *)(v14 + 32);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v16, v17, v18);
        v73 = v14;
        v20 = *(int *)(v14 + 36);
        v21 = (_OWORD *)((char *)a1 + v20);
        v22 = (_OWORD *)((char *)a2 + v20);
        v23 = type metadata accessor for CP_SequenceNumber(0);
        v24 = *(_QWORD *)(v23 - 8);
        v68 = v18;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          *v21 = *v22;
          v19((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v18);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v44 = *(int *)(v73 + 40);
        v45 = (_QWORD *)((char *)a1 + v44);
        v46 = (_QWORD *)((char *)a2 + v44);
        v47 = type metadata accessor for CP_EncryptionID(0);
        v48 = *(_QWORD *)(v47 - 8);
        v7 = v76;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          v50 = *v46;
          v51 = v46[1];
          outlined copy of Data._Representation(*v46, v51);
          *v45 = v50;
          v45[1] = v51;
          v7 = v76;
          v19((char *)v45 + *(int *)(v47 + 20), (char *)v46 + *(int *)(v47 + 20), v68);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        a3 = v75;
      }
      else
      {
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        v32 = a2[3];
        a1[2] = a2[2];
        a1[3] = v32;
        v33 = a2[5];
        a1[4] = a2[4];
        a1[5] = v33;
        v34 = a2[7];
        a1[6] = a2[6];
        a1[7] = v34;
        v35 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        v36 = *(int *)(v35 + 40);
        v69 = (char *)a2 + v36;
        v71 = (char *)a1 + v36;
        v37 = type metadata accessor for UnknownStorage();
        v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v74(v71, v69, v37);
        v72 = v35;
        v38 = *(int *)(v35 + 44);
        v39 = (_QWORD *)((char *)a1 + v38);
        v40 = (_QWORD *)((char *)a2 + v38);
        v41 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          v52 = v40[1];
          *v39 = *v40;
          v39[1] = v52;
          v53 = *(int *)(v41 + 24);
          v54 = (char *)v39 + v53;
          v70 = v37;
          v55 = (char *)v40 + v53;
          swift_bridgeObjectRetain();
          v56 = v55;
          v37 = v70;
          v74(v54, v56, v70);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        }
        a3 = v75;
        v7 = v76;
        v57 = *(int *)(v72 + 48);
        v58 = (_OWORD *)((char *)a1 + v57);
        v59 = (_OWORD *)((char *)a2 + v57);
        v60 = type metadata accessor for CP_SequenceNumber(0);
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          *v58 = *v59;
          v74((char *)v58 + *(int *)(v60 + 24), (char *)v59 + *(int *)(v60 + 24), v37);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v63 = *(int *)(a3 + 20);
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  uint64_t v134;

  v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8((uint64_t)a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v42 = *a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = v42;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
        v43 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
        v44 = a1 + v43;
        v45 = (uint64_t)a2 + v43;
        v46 = type metadata accessor for UnknownStorage();
        v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
        swift_bridgeObjectRetain();
        v47(v44, v45, v46);
      }
      else
      {
        v133 = a3;
        if (EnumCaseMultiPayload == 1)
        {
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a2[1];
          v12 = a2[2];
          v13 = a2[3];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v12, v13);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 24) = v13;
          *(_QWORD *)(a1 + 32) = a2[4];
          *(_QWORD *)(a1 + 40) = a2[5];
          v14 = type metadata accessor for CP_Record(0);
          v15 = *(int *)(v14 + 32);
          v16 = a1 + v15;
          v17 = (uint64_t)a2 + v15;
          v18 = type metadata accessor for UnknownStorage();
          v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
          swift_bridgeObjectRetain();
          v19(v16, v17, v18);
          v129 = v14;
          v20 = *(int *)(v14 + 36);
          v21 = (_QWORD *)(a1 + v20);
          v22 = (uint64_t *)((char *)a2 + v20);
          v23 = type metadata accessor for CP_SequenceNumber(0);
          v24 = *(_QWORD *)(v23 - 8);
          v121 = (void (*)(char *, char *, uint64_t))v19;
          v125 = v18;
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          {
            v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
          }
          else
          {
            *v21 = *v22;
            v21[1] = v22[1];
            v19((uint64_t)v21 + *(int *)(v23 + 24), (uint64_t)v22 + *(int *)(v23 + 24), v18);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
          }
          v59 = *(int *)(v129 + 40);
          v60 = (_QWORD *)(a1 + v59);
          v61 = (uint64_t *)((char *)a2 + v59);
          v62 = type metadata accessor for CP_EncryptionID(0);
          v63 = *(_QWORD *)(v62 - 8);
          a3 = v133;
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
          {
            v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
            memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
          }
          else
          {
            v91 = *v61;
            v92 = v61[1];
            outlined copy of Data._Representation(*v61, v92);
            *v60 = v91;
            v60[1] = v92;
            a3 = v133;
            v121((char *)v60 + *(int *)(v62 + 20), (char *)v61 + *(int *)(v62 + 20), v125);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
          }
        }
        else
        {
          v48 = *a2;
          *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
          *(_QWORD *)a1 = v48;
          *(_QWORD *)(a1 + 16) = a2[2];
          *(_QWORD *)(a1 + 24) = a2[3];
          *(_QWORD *)(a1 + 32) = a2[4];
          *(_QWORD *)(a1 + 40) = a2[5];
          *(_QWORD *)(a1 + 48) = a2[6];
          *(_QWORD *)(a1 + 56) = a2[7];
          v49 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
          v50 = *(int *)(v49 + 40);
          v119 = (uint64_t)a2 + v50;
          v122 = a1 + v50;
          v51 = type metadata accessor for UnknownStorage();
          v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v52(v122, v119, v51);
          v130 = v49;
          v53 = *(int *)(v49 + 44);
          v54 = (_QWORD *)(a1 + v53);
          v55 = (uint64_t *)((char *)a2 + v53);
          v56 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
          v57 = *(_QWORD *)(v56 - 8);
          v118 = (void (*)(char *, char *, uint64_t))v52;
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
          {
            v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
            memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          }
          else
          {
            *v54 = *v55;
            v54[1] = v55[1];
            v82 = *(int *)(v56 + 24);
            v124 = (char *)v54 + v82;
            v127 = v51;
            v83 = (char *)v55 + v82;
            swift_bridgeObjectRetain();
            v84 = v83;
            v51 = v127;
            v52((uint64_t)v124, (uint64_t)v84, v127);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
          }
          v85 = *(int *)(v130 + 48);
          v86 = (_QWORD *)(a1 + v85);
          v87 = (uint64_t *)((char *)a2 + v85);
          v88 = type metadata accessor for CP_SequenceNumber(0);
          v89 = *(_QWORD *)(v88 - 8);
          a3 = v133;
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
          {
            v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
          }
          else
          {
            *v86 = *v87;
            v86[1] = v87[1];
            v118((char *)v86 + *(int *)(v88 + 24), (char *)v87 + *(int *)(v88 + 24), v51);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
          }
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_30;
    }
LABEL_9:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_30;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_9;
  }
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    v27 = swift_getEnumCaseMultiPayload();
    if (v27 == 2)
    {
      v65 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v65;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      v66 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v67 = a1 + v66;
      v68 = (uint64_t)a2 + v66;
      v69 = type metadata accessor for UnknownStorage();
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
      swift_bridgeObjectRetain();
      v70(v67, v68, v69);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v134 = a3;
      if (v27 == 1)
      {
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a2[1];
        v28 = a2[2];
        v29 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v28, v29);
        *(_QWORD *)(a1 + 16) = v28;
        *(_QWORD *)(a1 + 24) = v29;
        *(_QWORD *)(a1 + 32) = a2[4];
        *(_QWORD *)(a1 + 40) = a2[5];
        v30 = (int *)type metadata accessor for CP_Record(0);
        v31 = v30[8];
        v32 = a1 + v31;
        v33 = (uint64_t)a2 + v31;
        v34 = type metadata accessor for UnknownStorage();
        v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
        swift_bridgeObjectRetain();
        v35(v32, v33, v34);
        v36 = v30[9];
        v37 = (_QWORD *)(a1 + v36);
        v38 = (uint64_t *)((char *)a2 + v36);
        v39 = type metadata accessor for CP_SequenceNumber(0);
        v40 = *(_QWORD *)(v39 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          *v37 = *v38;
          v37[1] = v38[1];
          v35((uint64_t)v37 + *(int *)(v39 + 24), (uint64_t)v38 + *(int *)(v39 + 24), v34);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
        }
        v98 = v30[10];
        v99 = (_QWORD *)(a1 + v98);
        v100 = (uint64_t *)((char *)a2 + v98);
        v101 = type metadata accessor for CP_EncryptionID(0);
        v102 = *(_QWORD *)(v101 - 8);
        a3 = v134;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
        {
          v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        }
        else
        {
          v132 = (void (*)(char *, char *, uint64_t))v35;
          v116 = *v100;
          v117 = v100[1];
          outlined copy of Data._Representation(*v100, v117);
          *v99 = v116;
          v99[1] = v117;
          a3 = v134;
          v132((char *)v99 + *(int *)(v101 + 20), (char *)v100 + *(int *)(v101 + 20), v34);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
        }
      }
      else
      {
        v71 = *a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = v71;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        *(_QWORD *)(a1 + 32) = a2[4];
        *(_QWORD *)(a1 + 40) = a2[5];
        *(_QWORD *)(a1 + 48) = a2[6];
        *(_QWORD *)(a1 + 56) = a2[7];
        v72 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        v73 = v72[10];
        v123 = (char *)a2 + v73;
        v126 = (char *)(a1 + v73);
        v74 = type metadata accessor for UnknownStorage();
        v131 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v75 = v131;
        swift_bridgeObjectRetain();
        v131(v126, v123, v74);
        v76 = v72[11];
        v77 = (_QWORD *)(a1 + v76);
        v78 = (uint64_t *)((char *)a2 + v76);
        v79 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        v80 = *(_QWORD *)(v79 - 8);
        v120 = v74;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
        {
          v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
          *v77 = *v78;
          v77[1] = v78[1];
          v104 = *(int *)(v79 + 24);
          v105 = v74;
          v106 = (char *)v77 + v104;
          v128 = v72;
          v107 = (char *)v78 + v104;
          swift_bridgeObjectRetain();
          v108 = v107;
          v109 = v105;
          v72 = v128;
          v75 = v131;
          v131(v106, v108, v109);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
        }
        v110 = v72[12];
        v111 = (_QWORD *)(a1 + v110);
        v112 = (uint64_t *)((char *)a2 + v110);
        v113 = type metadata accessor for CP_SequenceNumber(0);
        v114 = *(_QWORD *)(v113 - 8);
        a3 = v134;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
        {
          v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        }
        else
        {
          *v111 = *v112;
          v111[1] = v112[1];
          v75((char *)v111 + *(int *)(v113 + 24), (char *)v112 + *(int *)(v113 + 24), v120);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_30:
  v93 = *(int *)(a3 + 20);
  v94 = a1 + v93;
  v95 = (uint64_t)a2 + v93;
  v96 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 24))(v94, v95, v96);
  return a1;
}

_QWORD *initializeWithTake for CP_SubscribeResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v57)(char *, char *, uint64_t);
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v23 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v63 = v7;
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v10;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v11 = type metadata accessor for CP_Record(0);
      v12 = *(int *)(v11 + 32);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
      v16(v13, v14, v15);
      v61 = v11;
      v17 = *(int *)(v11 + 36);
      v18 = (_OWORD *)((char *)a1 + v17);
      v19 = (_OWORD *)((char *)a2 + v17);
      v20 = type metadata accessor for CP_SequenceNumber(0);
      v21 = *(_QWORD *)(v20 - 8);
      v57 = v16;
      v59 = v15;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        *v18 = *v19;
        v16((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v40 = *(int *)(v61 + 40);
      v41 = (_OWORD *)((char *)a1 + v40);
      v42 = (_OWORD *)((char *)a2 + v40);
      v43 = type metadata accessor for CP_EncryptionID(0);
      v44 = *(_QWORD *)(v43 - 8);
      v7 = v63;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        *v41 = *v42;
        v57((char *)v41 + *(int *)(v43 + 20), (char *)v42 + *(int *)(v43 + 20), v59);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
    }
    else
    {
      v64 = a3;
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      v27 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v27;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      v28 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      v29 = *(int *)(v28 + 40);
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = type metadata accessor for UnknownStorage();
      v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
      v33(v30, v31, v32);
      v62 = v28;
      v34 = *(int *)(v28 + 44);
      v35 = (_OWORD *)((char *)a1 + v34);
      v36 = (_OWORD *)((char *)a2 + v34);
      v37 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      v38 = *(_QWORD *)(v37 - 8);
      v58 = v33;
      v60 = v32;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        *v35 = *v36;
        v33((char *)v35 + *(int *)(v37 + 24), (char *)v36 + *(int *)(v37 + 24), v32);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      a3 = v64;
      v46 = *(int *)(v62 + 48);
      v47 = (_OWORD *)((char *)a1 + v46);
      v48 = (_OWORD *)((char *)a2 + v46);
      v49 = type metadata accessor for CP_SequenceNumber(0);
      v50 = *(_QWORD *)(v49 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        *v47 = *v48;
        v58((char *)v47 + *(int *)(v49 + 24), (char *)v48 + *(int *)(v49 + 24), v60);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v52 = *(int *)(a3 + 20);
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        v40 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
        v41 = a1 + v40;
        v42 = a2 + v40;
        v43 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
      }
      else
      {
        v113 = a3;
        if (EnumCaseMultiPayload == 1)
        {
          v12 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v13 = type metadata accessor for CP_Record(0);
          v14 = *(int *)(v13 + 32);
          v15 = (char *)(a1 + v14);
          v16 = (char *)(a2 + v14);
          v17 = type metadata accessor for UnknownStorage();
          v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
          v18(v15, v16, v17);
          v109 = v13;
          v19 = *(int *)(v13 + 36);
          v20 = (_OWORD *)(a1 + v19);
          v21 = (_OWORD *)(a2 + v19);
          v22 = type metadata accessor for CP_SequenceNumber(0);
          v23 = *(_QWORD *)(v22 - 8);
          v103 = v18;
          v107 = v17;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
          {
            v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
          }
          else
          {
            *v20 = *v21;
            v18((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v17);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
          }
          v57 = *(int *)(v109 + 40);
          v58 = (_OWORD *)(a1 + v57);
          v59 = (_OWORD *)(a2 + v57);
          v60 = type metadata accessor for CP_EncryptionID(0);
          v61 = *(_QWORD *)(v60 - 8);
          a3 = v113;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
          {
            v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
            memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
          }
          else
          {
            *v58 = *v59;
            v103((char *)v58 + *(int *)(v60 + 20), (char *)v59 + *(int *)(v60 + 20), v107);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
          }
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
          v44 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = v44;
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          v45 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
          v46 = *(int *)(v45 + 40);
          v47 = (char *)(a1 + v46);
          v48 = (char *)(a2 + v46);
          v49 = type metadata accessor for UnknownStorage();
          v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
          v50(v47, v48, v49);
          v111 = v45;
          v51 = *(int *)(v45 + 44);
          v52 = (_OWORD *)(a1 + v51);
          v53 = (_OWORD *)(a2 + v51);
          v54 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
          v55 = *(_QWORD *)(v54 - 8);
          v105 = v50;
          v108 = v49;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
          {
            v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
            memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          }
          else
          {
            *v52 = *v53;
            v50((char *)v52 + *(int *)(v54 + 24), (char *)v53 + *(int *)(v54 + 24), v49);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
          }
          v80 = *(int *)(v111 + 48);
          v81 = (_OWORD *)(a1 + v80);
          v82 = (_OWORD *)(a2 + v80);
          v83 = type metadata accessor for CP_SequenceNumber(0);
          v84 = *(_QWORD *)(v83 - 8);
          a3 = v113;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
          {
            v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
          }
          else
          {
            *v81 = *v82;
            v105((char *)v81 + *(int *)(v83 + 24), (char *)v82 + *(int *)(v83 + 24), v108);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
          }
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_30;
    }
LABEL_9:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_30;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    v26 = swift_getEnumCaseMultiPayload();
    if (v26 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v63 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v64 = a1 + v63;
      v65 = a2 + v63;
      v66 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v26 == 1)
      {
        v27 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v27;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        v28 = type metadata accessor for CP_Record(0);
        v29 = *(int *)(v28 + 32);
        v30 = a1 + v29;
        v31 = a2 + v29;
        v32 = type metadata accessor for UnknownStorage();
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
        v33(v30, v31, v32);
        v110 = v28;
        v34 = *(int *)(v28 + 36);
        v35 = (_OWORD *)(a1 + v34);
        v36 = (_OWORD *)(a2 + v34);
        v37 = type metadata accessor for CP_SequenceNumber(0);
        v38 = *(_QWORD *)(v37 - 8);
        v104 = v32;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          *v35 = *v36;
          v33((uint64_t)v35 + *(int *)(v37 + 24), (uint64_t)v36 + *(int *)(v37 + 24), v32);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        v91 = *(int *)(v110 + 40);
        v92 = (_OWORD *)(a1 + v91);
        v93 = (_OWORD *)(a2 + v91);
        v94 = type metadata accessor for CP_EncryptionID(0);
        v95 = *(_QWORD *)(v94 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        }
        else
        {
          *v92 = *v93;
          v33((uint64_t)v92 + *(int *)(v94 + 20), (uint64_t)v93 + *(int *)(v94 + 20), v104);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        }
      }
      else
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        v67 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v67;
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        v68 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        v69 = *(int *)(v68 + 40);
        v70 = a1 + v69;
        v71 = a2 + v69;
        v72 = type metadata accessor for UnknownStorage();
        v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 32);
        v73(v70, v71, v72);
        v112 = v68;
        v74 = *(int *)(v68 + 44);
        v75 = (_OWORD *)(a1 + v74);
        v76 = (_OWORD *)(a2 + v74);
        v77 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        v78 = *(_QWORD *)(v77 - 8);
        v106 = v72;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          *v75 = *v76;
          v73((uint64_t)v75 + *(int *)(v77 + 24), (uint64_t)v76 + *(int *)(v77 + 24), v72);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        v97 = *(int *)(v112 + 48);
        v98 = (_OWORD *)(a1 + v97);
        v99 = (_OWORD *)(a2 + v97);
        v100 = type metadata accessor for CP_SequenceNumber(0);
        v101 = *(_QWORD *)(v100 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
        {
          v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          *v98 = *v99;
          v73((uint64_t)v98 + *(int *)(v100 + 24), (uint64_t)v99 + *(int *)(v100 + 24), v106);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_30:
  v86 = *(int *)(a3 + 20);
  v87 = a1 + v86;
  v88 = a2 + v86;
  v89 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 40))(v87, v88, v89);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE59FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE59FBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

void type metadata completion function for CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      v24 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v24;
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      v25 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v26 = a1 + v25;
      v27 = (uint64_t)a2 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = a2[2];
      v9 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v9;
      v10 = a2[5];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v10;
      v11 = (int *)type metadata accessor for CP_Record(0);
      v12 = v11[8];
      v13 = a1 + v12;
      v14 = (uint64_t)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      v17 = v11[9];
      v18 = (_OWORD *)(a1 + v17);
      v19 = (_OWORD *)((char *)a2 + v17);
      v20 = type metadata accessor for CP_SequenceNumber(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        *v18 = *v19;
        v16((uint64_t)v18 + *(int *)(v20 + 24), (uint64_t)v19 + *(int *)(v20 + 24), v15);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v44 = v11[10];
      v45 = (_QWORD *)(a1 + v44);
      v46 = (uint64_t *)((char *)a2 + v44);
      v47 = type metadata accessor for CP_EncryptionID(0);
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        v50 = *v46;
        v51 = v46[1];
        outlined copy of Data._Representation(*v46, v51);
        *v45 = v50;
        v45[1] = v51;
        v16((uint64_t)v45 + *(int *)(v47 + 20), (uint64_t)v46 + *(int *)(v47 + 20), v15);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      v30 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v30;
      v31 = a2[5];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v31;
      v32 = a2[7];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v32;
      v33 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      v34 = *(int *)(v33 + 40);
      v64 = (uint64_t)a2 + v34;
      v66 = a1 + v34;
      v35 = type metadata accessor for UnknownStorage();
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = v33;
      swift_bridgeObjectRetain();
      v36(v66, v64, v35);
      v38 = *(int *)(v33 + 44);
      v39 = (_QWORD *)(a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v52 = v40[1];
        *v39 = *v40;
        v39[1] = v52;
        v53 = *(int *)(v41 + 24);
        v65 = v33;
        v54 = (char *)v39 + v53;
        v55 = (char *)v40 + v53;
        swift_bridgeObjectRetain();
        v56 = v54;
        v37 = v65;
        v36((uint64_t)v56, (uint64_t)v55, v35);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      v57 = *(int *)(v37 + 48);
      v58 = (_OWORD *)(a1 + v57);
      v59 = (_OWORD *)((char *)a2 + v57);
      v60 = type metadata accessor for CP_SequenceNumber(0);
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        *v58 = *v59;
        v36((uint64_t)v58 + *(int *)(v60 + 24), (uint64_t)v59 + *(int *)(v60 + 24), v35);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease();
      v11 = a1 + *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v12 = type metadata accessor for UnknownStorage();
      v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v14 = v11;
      return v13(v14, v12);
    case 1:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease();
      v15 = (int *)type metadata accessor for CP_Record(0);
      v16 = a1 + v15[8];
      v5 = type metadata accessor for UnknownStorage();
      v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v20(v16, v5);
      v17 = a1 + v15[9];
      v18 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
        v20(v17 + *(int *)(v18 + 24), v5);
      v8 = a1 + v15[10];
      v19 = type metadata accessor for CP_EncryptionID(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v8, 1, v19);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
        v10 = *(int *)(v19 + 20);
        goto LABEL_14;
      }
      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      v4 = a1 + v3[10];
      v5 = type metadata accessor for UnknownStorage();
      v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v20(v4, v5);
      v6 = a1 + v3[11];
      v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
      {
        swift_bridgeObjectRelease();
        v20(v6 + *(int *)(v7 + 24), v5);
      }
      v8 = a1 + v3[12];
      v9 = type metadata accessor for CP_SequenceNumber(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
      if (!(_DWORD)result)
      {
        v10 = *(int *)(v9 + 24);
LABEL_14:
        v14 = v8 + v10;
        v12 = v5;
        v13 = (uint64_t (*)(uint64_t, uint64_t))v20;
        return v13(v14, v12);
      }
      break;
  }
  return result;
}

uint64_t initializeWithCopy for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v62;
  char *v63;
  uint64_t v64;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v21 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v21;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v22 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
    v23 = a1 + v22;
    v24 = a2 + v22;
    v25 = type metadata accessor for UnknownStorage();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    swift_bridgeObjectRetain();
    v26(v23, v24, v25);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v6, v7);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v8;
    v9 = (int *)type metadata accessor for CP_Record(0);
    v10 = v9[8];
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v15 = v9[9];
    v16 = (_OWORD *)(a1 + v15);
    v17 = (_OWORD *)(a2 + v15);
    v18 = type metadata accessor for CP_SequenceNumber(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v16 = *v17;
      v14((uint64_t)v16 + *(int *)(v18 + 24), (uint64_t)v17 + *(int *)(v18 + 24), v13);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v43 = v9[10];
    v44 = (_QWORD *)(a1 + v43);
    v45 = (uint64_t *)(a2 + v43);
    v46 = type metadata accessor for CP_EncryptionID(0);
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v49 = *v45;
      v50 = v45[1];
      outlined copy of Data._Representation(*v45, v50);
      *v44 = v49;
      v44[1] = v50;
      v14((uint64_t)v44 + *(int *)(v46 + 20), (uint64_t)v45 + *(int *)(v46 + 20), v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v27 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v27;
    v28 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v28;
    v29 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v29;
    v30 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    v31 = *(int *)(v30 + 40);
    v62 = (char *)(a2 + v31);
    v63 = (char *)(a1 + v31);
    v32 = type metadata accessor for UnknownStorage();
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = v30;
    swift_bridgeObjectRetain();
    v35 = v63;
    v64 = v32;
    v33(v35, v62, v32);
    v36 = *(int *)(v30 + 44);
    v37 = (_QWORD *)(a1 + v36);
    v38 = (_QWORD *)(a2 + v36);
    v39 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      v42 = v33;
    }
    else
    {
      v51 = v38[1];
      *v37 = *v38;
      v37[1] = v51;
      v52 = *(int *)(v39 + 24);
      v42 = v33;
      v53 = (char *)v37 + v52;
      v54 = (char *)v38 + v52;
      swift_bridgeObjectRetain();
      v42(v53, v54, v64);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    v55 = *(int *)(v34 + 48);
    v56 = (_OWORD *)(a1 + v55);
    v57 = (_OWORD *)(a2 + v55);
    v58 = type metadata accessor for CP_SequenceNumber(0);
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      *v56 = *v57;
      v42((char *)v56 + *(int *)(v58 + 24), (char *)v57 + *(int *)(v58 + 24), v64);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v57;
  char *v58;
  uint64_t v59;

  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v19 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v19;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      v20 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v21 = a1 + v20;
      v22 = (uint64_t)a2 + v20;
      v23 = type metadata accessor for UnknownStorage();
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      v24(v21, v22, v23);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      v5 = a2[2];
      v6 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v5, v6);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = a2[5];
      v7 = (int *)type metadata accessor for CP_Record(0);
      v8 = v7[8];
      v9 = a1 + v8;
      v10 = (uint64_t)a2 + v8;
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
      v13 = v7[9];
      v14 = (_QWORD *)(a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      v16 = type metadata accessor for CP_SequenceNumber(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *v14 = *v15;
        v14[1] = v15[1];
        v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v39 = v7[10];
      v40 = (_QWORD *)(a1 + v39);
      v41 = (uint64_t *)((char *)a2 + v39);
      v42 = type metadata accessor for CP_EncryptionID(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v54 = *v41;
        v55 = v41[1];
        outlined copy of Data._Representation(*v41, v55);
        *v40 = v54;
        v40[1] = v55;
        v12((uint64_t)v40 + *(int *)(v42 + 20), (uint64_t)v41 + *(int *)(v42 + 20), v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
    }
    else
    {
      v25 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v25;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = a2[7];
      v26 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      v27 = *(int *)(v26 + 40);
      v57 = (char *)a2 + v27;
      v58 = (char *)(a1 + v27);
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = v26;
      swift_bridgeObjectRetain();
      v31 = v58;
      v59 = v28;
      v29(v31, v57, v28);
      v32 = *(int *)(v26 + 44);
      v33 = (_QWORD *)(a1 + v32);
      v34 = (uint64_t *)((char *)a2 + v32);
      v35 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        v38 = v29;
      }
      else
      {
        *v33 = *v34;
        v33[1] = v34[1];
        v45 = *(int *)(v35 + 24);
        v38 = v29;
        v46 = (char *)v33 + v45;
        v47 = (char *)v34 + v45;
        swift_bridgeObjectRetain();
        v38(v46, v47, v59);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v48 = *(int *)(v30 + 48);
      v49 = (_QWORD *)(a1 + v48);
      v50 = (uint64_t *)((char *)a2 + v48);
      v51 = type metadata accessor for CP_SequenceNumber(0);
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        *v49 = *v50;
        v49[1] = v50[1];
        v38((char *)v49 + *(int *)(v51 + 24), (char *)v50 + *(int *)(v51 + 24), v59);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v18 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v6 = (int *)type metadata accessor for CP_Record(0);
    v7 = v6[8];
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(v8, v9, v10);
    v12 = v6[9];
    v13 = (_OWORD *)(a1 + v12);
    v14 = (_OWORD *)(a2 + v12);
    v15 = type metadata accessor for CP_SequenceNumber(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v35 = v6[10];
    v36 = (_OWORD *)(a1 + v35);
    v37 = (_OWORD *)(a2 + v35);
    v38 = type metadata accessor for CP_EncryptionID(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      *v36 = *v37;
      v11((char *)v36 + *(int *)(v38 + 20), (char *)v37 + *(int *)(v38 + 20), v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v22 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    v23 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    v24 = v23[10];
    v25 = (char *)(a1 + v24);
    v26 = (char *)(a2 + v24);
    v27 = type metadata accessor for UnknownStorage();
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
    v28(v25, v26, v27);
    v29 = v23[11];
    v30 = (_OWORD *)(a1 + v29);
    v31 = (_OWORD *)(a2 + v29);
    v32 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v30 = *v31;
      v28((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v27);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v41 = v23[12];
    v42 = (_OWORD *)(a1 + v41);
    v43 = (_OWORD *)(a2 + v41);
    v44 = type metadata accessor for CP_SequenceNumber(0);
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      *v42 = *v43;
      v28((char *)v42 + *(int *)(v44 + 24), (char *)v43 + *(int *)(v44 + 24), v27);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v18 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v6 = (int *)type metadata accessor for CP_Record(0);
      v7 = v6[8];
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
      v11(v8, v9, v10);
      v12 = v6[9];
      v13 = (_OWORD *)(a1 + v12);
      v14 = (_OWORD *)(a2 + v12);
      v15 = type metadata accessor for CP_SequenceNumber(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        *v13 = *v14;
        v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v35 = v6[10];
      v36 = (_OWORD *)(a1 + v35);
      v37 = (_OWORD *)(a2 + v35);
      v38 = type metadata accessor for CP_EncryptionID(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *v36 = *v37;
        v11((uint64_t)v36 + *(int *)(v38 + 20), (uint64_t)v37 + *(int *)(v38 + 20), v10);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v22 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      v23 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      v24 = v23[10];
      v25 = a1 + v24;
      v26 = a2 + v24;
      v27 = type metadata accessor for UnknownStorage();
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      v29 = v23[11];
      v30 = (_OWORD *)(a1 + v29);
      v31 = (_OWORD *)(a2 + v29);
      v32 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        *v30 = *v31;
        v28((uint64_t)v30 + *(int *)(v32 + 24), (uint64_t)v31 + *(int *)(v32 + 24), v27);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v41 = v23[12];
      v42 = (_OWORD *)(a1 + v41);
      v43 = (_OWORD *)(a2 + v41);
      v44 = type metadata accessor for CP_SequenceNumber(0);
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        *v42 = *v43;
        v28((uint64_t)v42 + *(int *)(v44 + 24), (uint64_t)v43 + *(int *)(v44 + 24), v27);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_SubscribeResponse.OneOf_Operation()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for CP_SubscribeResponse.InitializeAck(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for CP_Record(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for CP_SubscribeResponse.TopicUpdate(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[7];
    v10 = a3[10];
    v31 = (uint64_t)a2 + v10;
    v32 = a1 + v10;
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v32, v31, v11);
    v13 = a3[11];
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = v15[1];
      *v14 = *v15;
      v14[1] = v20;
      v21 = *(int *)(v16 + 24);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v24 = a3[12];
    v25 = (_OWORD *)((char *)v4 + v24);
    v26 = (_OWORD *)((char *)a2 + v24);
    v27 = type metadata accessor for CP_SequenceNumber(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *v25 = *v26;
      v12((uint64_t)v25 + *(int *)(v27 + 24), (uint64_t)v26 + *(int *)(v27 + 24), v11);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t destroy for CP_SubscribeResponse.InitializeAck(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[10];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[11];
  v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 24), v5);
  }
  v8 = a1 + a2[12];
  v9 = type metadata accessor for CP_SequenceNumber(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 24), v5);
  return result;
}

uint64_t initializeWithCopy for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(int *)(a3 + 40);
  v30 = a2 + v9;
  v31 = a1 + v9;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = a3;
  swift_bridgeObjectRetain();
  v11(v31, v30, v10);
  v13 = *(int *)(a3 + 44);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = v15[1];
    *v14 = *v15;
    v14[1] = v19;
    v20 = *(int *)(v16 + 24);
    v21 = (char *)v14 + v20;
    v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v11((uint64_t)v21, (uint64_t)v22, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v23 = *(int *)(v12 + 48);
  v24 = (_OWORD *)(a1 + v23);
  v25 = (_OWORD *)(a2 + v23);
  v26 = type metadata accessor for CP_SequenceNumber(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *v24 = *v25;
    v11((uint64_t)v24 + *(int *)(v26 + 24), (uint64_t)v25 + *(int *)(v26 + 24), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v35 = *(_QWORD *)(v10 - 8);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 24);
  v34(v8, v9, v10);
  v11 = a3[11];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      v19 = *(int *)(v14 + 24);
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      v22 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v10);
LABEL_7:
  v24 = a3[12];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = type metadata accessor for CP_SequenceNumber(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *v25 = *v26;
      v25[1] = v26[1];
      v34((uint64_t)v25 + *(int *)(v27 + 24), (uint64_t)v26 + *(int *)(v27 + 24), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for CP_SequenceNumber);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  *v25 = *v26;
  v25[1] = v26[1];
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = a3[10];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[11];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[12];
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  v21 = type metadata accessor for CP_SequenceNumber(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v11((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_OWORD *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v32 = *(_QWORD *)(v10 - 8);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 40);
  v31(v8, v9, v10);
  v11 = a3[11];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v30 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v30;
  swift_bridgeObjectRelease();
  v31((uint64_t)&v12[*(int *)(v14 + 24)], (uint64_t)&v13[*(int *)(v14 + 24)], v10);
LABEL_7:
  v20 = a3[12];
  v21 = (_OWORD *)(a1 + v20);
  v22 = (_OWORD *)(a2 + v20);
  v23 = type metadata accessor for CP_SequenceNumber(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      *v21 = *v22;
      v31((uint64_t)v21 + *(int *)(v23 + 24), (uint64_t)v22 + *(int *)(v23 + 24), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for CP_SequenceNumber);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *v21 = *v22;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v10);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5C4D8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[10];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[11];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[12];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5C5B0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[10];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[11];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[12];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CP_SubscribeResponse.InitializeAck()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for CP_SequenceNumber?, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5C9BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for CP_EncryptionID(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = *v14;
      v20 = v14[1];
      outlined copy of Data._Representation(*v14, v20);
      *v13 = v19;
      v13[1] = v20;
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for CP_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CP_EncryptionID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = *v13;
    v18 = v13[1];
    outlined copy of Data._Representation(*v13, v18);
    *v12 = v17;
    v12[1] = v18;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for CP_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v23 = *v14;
      v24 = v14[1];
      outlined copy of Data._Representation(*v14, v24);
      v25 = *v13;
      v26 = v13[1];
      *v13 = v23;
      v13[1] = v24;
      outlined consume of Data._Representation(v25, v26);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v19 = *v14;
  v20 = v14[1];
  outlined copy of Data._Representation(*v14, v20);
  *v13 = v19;
  v13[1] = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CP_EncryptionID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for CP_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v21 = *v13;
      v22 = v13[1];
      *(_OWORD *)v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v21, v22);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5D150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5D1D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  type metadata completion function for CP_SubscribeResponse.InitializeAck.MissingEncryptionID();
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for CP_EncryptionID?, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 32);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.TopicUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5D580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.TopicUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5D608(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_SubscribeResponse.TopicUpdate()
{
  return type metadata completion function for CP_SubscribeResponse.TopicUpdate();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CP_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return &type metadata for CP_SubscribeResponse.TopicUpdate.UpdateEvent;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_PublishRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      if (EnumCaseMultiPayload == 1)
      {
        v13 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
        v14 = *(int *)(v13 + 20);
        v59 = (char *)a1 + v14;
        v15 = (char *)a2 + v14;
        v16 = type metadata accessor for UnknownStorage();
        v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        v18 = v59;
        v56 = v16;
        v60 = v17;
        v17(v18, v15, v16);
        v19 = *(int *)(v13 + 24);
        v20 = (uint64_t *)((char *)a1 + v19);
        v21 = (uint64_t *)((char *)a2 + v19);
        v22 = type metadata accessor for CP_EncryptionID(0);
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          v40 = *v21;
          v55 = v21[1];
          outlined copy of Data._Representation(*v21, v55);
          *v20 = v40;
          v20[1] = v55;
          v60((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v56);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
      }
      else
      {
        v61 = v8;
        v25 = a2[2];
        v26 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v25, v26);
        a1[2] = v25;
        a1[3] = v26;
        v27 = a2[5];
        a1[4] = a2[4];
        a1[5] = v27;
        v28 = type metadata accessor for CP_Record(0);
        v29 = *(int *)(v28 + 32);
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        v32 = type metadata accessor for UnknownStorage();
        v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
        swift_bridgeObjectRetain();
        v33(v30, v31, v32);
        v57 = v28;
        v34 = *(int *)(v28 + 36);
        v35 = (_OWORD *)((char *)a1 + v34);
        v36 = (_OWORD *)((char *)a2 + v34);
        v37 = type metadata accessor for CP_SequenceNumber(0);
        v38 = *(_QWORD *)(v37 - 8);
        v53 = v33;
        v54 = v32;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          *v35 = *v36;
          v33((char *)v35 + *(int *)(v37 + 24), (char *)v36 + *(int *)(v37 + 24), v32);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        v41 = *(int *)(v57 + 40);
        v42 = (uint64_t *)((char *)a1 + v41);
        v43 = (uint64_t *)((char *)a2 + v41);
        v44 = type metadata accessor for CP_EncryptionID(0);
        v45 = *(_QWORD *)(v44 - 8);
        v8 = v61;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          v47 = *v43;
          v58 = v43[1];
          outlined copy of Data._Representation(*v43, v58);
          *v42 = v47;
          v42[1] = v58;
          v53((char *)v42 + *(int *)(v44 + 20), (char *)v43 + *(int *)(v44 + 20), v54);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v48 = *(int *)(a3 + 20);
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
  }
  return a1;
}

uint64_t destroy for CP_PublishRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v10 = a1 + *(int *)(v9 + 20);
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
      v12(v10, v11);
      v13 = a1 + *(int *)(v9 + 24);
      v14 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
      {
        outlined consume of Data._Representation(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        v12(v13 + *(int *)(v14 + 20), v11);
      }
    }
    else
    {
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease();
      v15 = (int *)type metadata accessor for CP_Record(0);
      v16 = a1 + v15[8];
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v18(v16, v17);
      v19 = a1 + v15[9];
      v20 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
        v18(v19 + *(int *)(v20 + 24), v17);
      v21 = a1 + v15[10];
      v22 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
      {
        outlined consume of Data._Representation(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
        v18(v21 + *(int *)(v22 + 20), v17);
      }
    }
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for CP_PublishRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  void (*v54)(char *, char *, uint64_t);

  v5 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v11 = *(int *)(v10 + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
      v16 = *(int *)(v10 + 24);
      v17 = (_QWORD *)((char *)a1 + v16);
      v18 = (_QWORD *)((char *)a2 + v16);
      v19 = type metadata accessor for CP_EncryptionID(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v52 = *v18;
        v54 = v15;
        v37 = v18[1];
        outlined copy of Data._Representation(*v18, v37);
        *v17 = v52;
        v17[1] = v37;
        v54((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
    }
    else
    {
      v22 = a2[2];
      v23 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v22, v23);
      a1[2] = v22;
      a1[3] = v23;
      v24 = a2[5];
      a1[4] = a2[4];
      a1[5] = v24;
      v25 = (int *)type metadata accessor for CP_Record(0);
      v26 = v25[8];
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      v29 = type metadata accessor for UnknownStorage();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v53 = v30;
      v30(v27, v28, v29);
      v31 = v25[9];
      v32 = (_OWORD *)((char *)a1 + v31);
      v33 = (_OWORD *)((char *)a2 + v31);
      v34 = type metadata accessor for CP_SequenceNumber(0);
      v35 = *(_QWORD *)(v34 - 8);
      v51 = v29;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v32 = *v33;
        v53((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v29);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v38 = v25[10];
      v39 = (_QWORD *)((char *)a1 + v38);
      v40 = (_QWORD *)((char *)a2 + v38);
      v41 = type metadata accessor for CP_EncryptionID(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v44 = *v40;
        v45 = v40[1];
        outlined copy of Data._Representation(*v40, v45);
        *v39 = v44;
        v39[1] = v45;
        v53((char *)v39 + *(int *)(v41 + 20), (char *)v40 + *(int *)(v41 + 20), v51);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  v46 = *(int *)(a3 + 20);
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
  return a1;
}

_QWORD *assignWithCopy for CP_PublishRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  int v8;
  int v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  void (*v92)(char *, char *, uint64_t);
  void (*v93)(char *, char *, uint64_t);
  void (*v94)(char *, char *, uint64_t);

  v5 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      a1[1] = a2[1];
      if (EnumCaseMultiPayload == 1)
      {
        v11 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
        v12 = *(int *)(v11 + 20);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for UnknownStorage();
        v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
        swift_bridgeObjectRetain();
        v16(v13, v14, v15);
        v17 = *(int *)(v11 + 24);
        v18 = (_QWORD *)((char *)a1 + v17);
        v19 = (_QWORD *)((char *)a2 + v17);
        v20 = type metadata accessor for CP_EncryptionID(0);
        v21 = *(_QWORD *)(v20 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          v90 = *v19;
          v92 = v16;
          v51 = v19[1];
          outlined copy of Data._Representation(*v19, v51);
          *v18 = v90;
          v18[1] = v51;
          v92((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v15);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
      }
      else
      {
        v37 = a2[2];
        v38 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, v38);
        a1[2] = v37;
        a1[3] = v38;
        a1[4] = a2[4];
        a1[5] = a2[5];
        v39 = (int *)type metadata accessor for CP_Record(0);
        v40 = v39[8];
        v41 = (char *)a1 + v40;
        v42 = (char *)a2 + v40;
        v43 = type metadata accessor for UnknownStorage();
        v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
        swift_bridgeObjectRetain();
        v91 = v44;
        v44(v41, v42, v43);
        v45 = v39[9];
        v46 = (_QWORD *)((char *)a1 + v45);
        v47 = (_QWORD *)((char *)a2 + v45);
        v48 = type metadata accessor for CP_SequenceNumber(0);
        v49 = *(_QWORD *)(v48 - 8);
        v89 = v43;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          *v46 = *v47;
          v46[1] = v47[1];
          v91((char *)v46 + *(int *)(v48 + 24), (char *)v47 + *(int *)(v48 + 24), v43);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        v66 = v39[10];
        v67 = (_QWORD *)((char *)a1 + v66);
        v68 = (_QWORD *)((char *)a2 + v66);
        v69 = type metadata accessor for CP_EncryptionID(0);
        v70 = *(_QWORD *)(v69 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          v72 = *v68;
          v73 = v68[1];
          outlined copy of Data._Representation(*v68, v73);
          *v67 = v72;
          v67[1] = v73;
          v91((char *)v67 + *(int *)(v69 + 20), (char *)v68 + *(int *)(v69 + 20), v89);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_23;
    }
LABEL_8:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_23;
  }
  if (v9)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    v24 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (v24 == 1)
    {
      v25 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v26 = *(int *)(v25 + 20);
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      v29 = type metadata accessor for UnknownStorage();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v30(v27, v28, v29);
      v31 = *(int *)(v25 + 24);
      v32 = (_QWORD *)((char *)a1 + v31);
      v33 = (_QWORD *)((char *)a2 + v31);
      v34 = type metadata accessor for CP_EncryptionID(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v93 = v30;
        v79 = *v33;
        v80 = v33[1];
        outlined copy of Data._Representation(*v33, v80);
        *v32 = v79;
        v32[1] = v80;
        v93((char *)v32 + *(int *)(v34 + 20), (char *)v33 + *(int *)(v34 + 20), v29);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
    }
    else
    {
      v52 = a2[2];
      v53 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v52, v53);
      a1[2] = v52;
      a1[3] = v53;
      a1[4] = a2[4];
      a1[5] = a2[5];
      v54 = (int *)type metadata accessor for CP_Record(0);
      v55 = v54[8];
      v56 = (char *)a1 + v55;
      v57 = (char *)a2 + v55;
      v58 = type metadata accessor for UnknownStorage();
      v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
      swift_bridgeObjectRetain();
      v59(v56, v57, v58);
      v60 = v54[9];
      v61 = (_QWORD *)((char *)a1 + v60);
      v62 = (_QWORD *)((char *)a2 + v60);
      v63 = type metadata accessor for CP_SequenceNumber(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        *v61 = *v62;
        v61[1] = v62[1];
        v59((char *)v61 + *(int *)(v63 + 24), (char *)v62 + *(int *)(v63 + 24), v58);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      v81 = v54[10];
      v82 = (_QWORD *)((char *)a1 + v81);
      v83 = (_QWORD *)((char *)a2 + v81);
      v84 = type metadata accessor for CP_EncryptionID(0);
      v85 = *(_QWORD *)(v84 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        v94 = v59;
        v87 = *v83;
        v88 = v83[1];
        outlined copy of Data._Representation(*v83, v88);
        *v82 = v87;
        v82[1] = v88;
        v94((char *)v82 + *(int *)(v84 + 20), (char *)v83 + *(int *)(v84 + 20), v58);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_23:
  v74 = *(int *)(a3 + 20);
  v75 = (char *)a1 + v74;
  v76 = (char *)a2 + v74;
  v77 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 24))(v75, v76, v77);
  return a1;
}

_OWORD *initializeWithTake for CP_PublishRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v48 = a3;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v11 = *(int *)(v10 + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      v16 = *(int *)(v10 + 24);
      v17 = (_OWORD *)((char *)a1 + v16);
      v18 = (_OWORD *)((char *)a2 + v16);
      v19 = type metadata accessor for CP_EncryptionID(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        *v17 = *v18;
        v15((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v14);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
    }
    else
    {
      v22 = a2[2];
      a1[1] = a2[1];
      a1[2] = v22;
      v23 = type metadata accessor for CP_Record(0);
      v24 = *(int *)(v23 + 32);
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = type metadata accessor for UnknownStorage();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      v47 = v23;
      v29 = *(int *)(v23 + 36);
      v30 = (_OWORD *)((char *)a1 + v29);
      v31 = (_OWORD *)((char *)a2 + v29);
      v32 = type metadata accessor for CP_SequenceNumber(0);
      v33 = *(_QWORD *)(v32 - 8);
      v46 = v27;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        *v30 = *v31;
        v28((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v27);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v35 = *(int *)(v47 + 40);
      v36 = (_OWORD *)((char *)a1 + v35);
      v37 = (_OWORD *)((char *)a2 + v35);
      v38 = type metadata accessor for CP_EncryptionID(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *v36 = *v37;
        v28((char *)v36 + *(int *)(v38 + 20), (char *)v37 + *(int *)(v38 + 20), v46);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
    }
    a3 = v48;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v41 = *(int *)(a3 + 20);
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
  return a1;
}

_OWORD *assignWithTake for CP_PublishRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v6 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      v83 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        v12 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
        v13 = *(int *)(v12 + 20);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for UnknownStorage();
        v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
        v17(v14, v15, v16);
        v18 = *(int *)(v12 + 24);
        v19 = (_OWORD *)((char *)a1 + v18);
        v20 = (_OWORD *)((char *)a2 + v18);
        v21 = type metadata accessor for CP_EncryptionID(0);
        v22 = *(_QWORD *)(v21 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          *v19 = *v20;
          v17((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v16);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
      }
      else
      {
        v38 = a2[2];
        a1[1] = a2[1];
        a1[2] = v38;
        v39 = type metadata accessor for CP_Record(0);
        v40 = *(int *)(v39 + 32);
        v41 = (char *)a1 + v40;
        v42 = (char *)a2 + v40;
        v43 = type metadata accessor for UnknownStorage();
        v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32);
        v44(v41, v42, v43);
        v82 = v39;
        v45 = *(int *)(v39 + 36);
        v46 = (_OWORD *)((char *)a1 + v45);
        v47 = (_OWORD *)((char *)a2 + v45);
        v48 = type metadata accessor for CP_SequenceNumber(0);
        v49 = *(_QWORD *)(v48 - 8);
        v81 = v43;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          *v46 = *v47;
          v44((char *)v46 + *(int *)(v48 + 24), (char *)v47 + *(int *)(v48 + 24), v43);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        v64 = *(int *)(v82 + 40);
        v65 = (_OWORD *)((char *)a1 + v64);
        v66 = (_OWORD *)((char *)a2 + v64);
        v67 = type metadata accessor for CP_EncryptionID(0);
        v68 = *(_QWORD *)(v67 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          *v65 = *v66;
          v44((char *)v65 + *(int *)(v67 + 20), (char *)v66 + *(int *)(v67 + 20), v81);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        }
      }
      a3 = v83;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_30;
    }
LABEL_8:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_30;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    v84 = a3;
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    v25 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v25 == 1)
    {
      v26 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v27 = *(int *)(v26 + 20);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for UnknownStorage();
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v31(v28, v29, v30);
      v32 = *(int *)(v26 + 24);
      v33 = (_OWORD *)((char *)a1 + v32);
      v34 = (_OWORD *)((char *)a2 + v32);
      v35 = type metadata accessor for CP_EncryptionID(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        *v33 = *v34;
        v31((char *)v33 + *(int *)(v35 + 20), (char *)v34 + *(int *)(v35 + 20), v30);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
    }
    else
    {
      v51 = a2[2];
      a1[1] = a2[1];
      a1[2] = v51;
      v52 = (int *)type metadata accessor for CP_Record(0);
      v53 = v52[8];
      v54 = (char *)a1 + v53;
      v55 = (char *)a2 + v53;
      v56 = type metadata accessor for UnknownStorage();
      v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
      v57(v54, v55, v56);
      v58 = v52[9];
      v59 = (_OWORD *)((char *)a1 + v58);
      v60 = (_OWORD *)((char *)a2 + v58);
      v61 = type metadata accessor for CP_SequenceNumber(0);
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        *v59 = *v60;
        v57((char *)v59 + *(int *)(v61 + 24), (char *)v60 + *(int *)(v61 + 24), v56);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      }
      v70 = v52[10];
      v71 = (_OWORD *)((char *)a1 + v70);
      v72 = (_OWORD *)((char *)a2 + v70);
      v73 = type metadata accessor for CP_EncryptionID(0);
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        *v71 = *v72;
        v57((char *)v71 + *(int *)(v73 + 20), (char *)v72 + *(int *)(v73 + 20), v56);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
    }
    swift_storeEnumTagMultiPayload();
    a3 = v84;
  }
LABEL_30:
  v76 = *(int *)(a3 + 20);
  v77 = (char *)a1 + v76;
  v78 = (char *)a2 + v76;
  v79 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_PublishRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5F044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_PublishRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE5F05C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

void type metadata completion function for CP_PublishRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.OneOf_Operation);
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_PublishRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v9 = *(int *)(v8 + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      v14 = *(int *)(v8 + 24);
      v15 = (uint64_t *)((char *)a1 + v14);
      v16 = (uint64_t *)((char *)a2 + v14);
      v17 = type metadata accessor for CP_EncryptionID(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v36 = *v16;
        v37 = v16[1];
        outlined copy of Data._Representation(*v16, v37);
        *v15 = v36;
        v15[1] = v37;
        v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    else
    {
      v21 = a2[2];
      v22 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v21, v22);
      a1[2] = v21;
      a1[3] = v22;
      v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      v24 = (int *)type metadata accessor for CP_Record(0);
      v25 = v24[8];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
      v30 = v24[9];
      v31 = (_OWORD *)((char *)a1 + v30);
      v32 = (_OWORD *)((char *)a2 + v30);
      v33 = type metadata accessor for CP_SequenceNumber(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        *v31 = *v32;
        v29((char *)v31 + *(int *)(v33 + 24), (char *)v32 + *(int *)(v33 + 24), v28);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v38 = v24[10];
      v39 = (uint64_t *)((char *)a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = type metadata accessor for CP_EncryptionID(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v44 = *v40;
        v45 = v40[1];
        outlined copy of Data._Representation(*v40, v45);
        *v39 = v44;
        v39[1] = v45;
        v29((char *)v39 + *(int *)(v41 + 20), (char *)v40 + *(int *)(v41 + 20), v28);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_PublishRequest.OneOf_Operation(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void (*v14)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    v3 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    v4 = a1 + *(int *)(v3 + 20);
    v5 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v14(v4, v5);
    v6 = *(int *)(v3 + 24);
  }
  else
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    swift_bridgeObjectRelease();
    v7 = (int *)type metadata accessor for CP_Record(0);
    v8 = a1 + v7[8];
    v5 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v14(v8, v5);
    v9 = a1 + v7[9];
    v10 = type metadata accessor for CP_SequenceNumber(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      v14(v9 + *(int *)(v10 + 24), v5);
    v6 = v7[10];
  }
  v11 = a1 + v6;
  v12 = type metadata accessor for CP_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v11 + *(int *)(v12 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for CP_PublishRequest.OneOf_Operation(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    v7 = *(int *)(v6 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = *(int *)(v6 + 24);
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CP_EncryptionID(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v33 = *v14;
      v34 = v14[1];
      outlined copy of Data._Representation(*v14, v34);
      *v13 = v33;
      v13[1] = v34;
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  else
  {
    v18 = a2[2];
    v19 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v18, v19);
    a1[2] = v18;
    a1[3] = v19;
    v20 = a2[5];
    a1[4] = a2[4];
    a1[5] = v20;
    v21 = (int *)type metadata accessor for CP_Record(0);
    v22 = v21[8];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for UnknownStorage();
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    swift_bridgeObjectRetain();
    v26(v23, v24, v25);
    v27 = v21[9];
    v28 = (_OWORD *)((char *)a1 + v27);
    v29 = (_OWORD *)((char *)a2 + v27);
    v30 = type metadata accessor for CP_SequenceNumber(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *v28 = *v29;
      v26((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v25);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v35 = v21[10];
    v36 = (_QWORD *)((char *)a1 + v35);
    v37 = (_QWORD *)((char *)a2 + v35);
    v38 = type metadata accessor for CP_EncryptionID(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = *v37;
      v42 = v37[1];
      outlined copy of Data._Representation(*v37, v42);
      *v36 = v41;
      v36[1] = v42;
      v26((char *)v36 + *(int *)(v38 + 20), (char *)v37 + *(int *)(v38 + 20), v25);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for CP_PublishRequest.OneOf_Operation(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v6 = *(int *)(v5 + 20);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9);
      v11 = *(int *)(v5 + 24);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = type metadata accessor for CP_EncryptionID(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v31 = *v13;
        v32 = v13[1];
        outlined copy of Data._Representation(*v13, v32);
        *v12 = v31;
        v12[1] = v32;
        v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      v17 = a2[2];
      v18 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v17, v18);
      a1[2] = v17;
      a1[3] = v18;
      a1[4] = a2[4];
      a1[5] = a2[5];
      v19 = (int *)type metadata accessor for CP_Record(0);
      v20 = v19[8];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for UnknownStorage();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      v24(v21, v22, v23);
      v25 = v19[9];
      v26 = (_QWORD *)((char *)a1 + v25);
      v27 = (_QWORD *)((char *)a2 + v25);
      v28 = type metadata accessor for CP_SequenceNumber(0);
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        *v26 = *v27;
        v26[1] = v27[1];
        v24((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v23);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      v33 = v19[10];
      v34 = (_QWORD *)((char *)a1 + v33);
      v35 = (_QWORD *)((char *)a2 + v33);
      v36 = type metadata accessor for CP_EncryptionID(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v39 = *v35;
        v40 = v35[1];
        outlined copy of Data._Representation(*v35, v40);
        *v34 = v39;
        v34[1] = v40;
        v24((char *)v34 + *(int *)(v36 + 20), (char *)v35 + *(int *)(v36 + 20), v23);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for CP_PublishRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    v6 = *(int *)(v5 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(v7, v8, v9);
    v11 = *(int *)(v5 + 24);
    v12 = (_OWORD *)((char *)a1 + v11);
    v13 = (_OWORD *)((char *)a2 + v11);
    v14 = type metadata accessor for CP_EncryptionID(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      *v12 = *v13;
      v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  else
  {
    v17 = a2[2];
    a1[1] = a2[1];
    a1[2] = v17;
    v18 = (int *)type metadata accessor for CP_Record(0);
    v19 = v18[8];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for UnknownStorage();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
    v23(v20, v21, v22);
    v24 = v18[9];
    v25 = (_OWORD *)((char *)a1 + v24);
    v26 = (_OWORD *)((char *)a2 + v24);
    v27 = type metadata accessor for CP_SequenceNumber(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *v25 = *v26;
      v23((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v22);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v30 = v18[10];
    v31 = (_OWORD *)((char *)a1 + v30);
    v32 = (_OWORD *)((char *)a2 + v30);
    v33 = type metadata accessor for CP_EncryptionID(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      *v31 = *v32;
      v23((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v22);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for CP_PublishRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      v6 = *(int *)(v5 + 20);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      v11 = *(int *)(v5 + 24);
      v12 = (_OWORD *)((char *)a1 + v11);
      v13 = (_OWORD *)((char *)a2 + v11);
      v14 = type metadata accessor for CP_EncryptionID(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        *v12 = *v13;
        v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      v17 = a2[2];
      a1[1] = a2[1];
      a1[2] = v17;
      v18 = (int *)type metadata accessor for CP_Record(0);
      v19 = v18[8];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for UnknownStorage();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      v24 = v18[9];
      v25 = (_OWORD *)((char *)a1 + v24);
      v26 = (_OWORD *)((char *)a2 + v24);
      v27 = type metadata accessor for CP_SequenceNumber(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        *v25 = *v26;
        v23((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v22);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = v18[10];
      v31 = (_OWORD *)((char *)a1 + v30);
      v32 = (_OWORD *)((char *)a2 + v30);
      v33 = type metadata accessor for CP_EncryptionID(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        *v31 = *v32;
        v23((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v22);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_PublishRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for CP_Record, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_PublishRequest.UpdatedEncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for CP_EncryptionID(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = *v15;
      v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *v14 = v20;
      v14[1] = v21;
      v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for CP_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for CP_PublishRequest.UpdatedEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for CP_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = *v14;
    v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    *v13 = v18;
    v13[1] = v19;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for CP_PublishRequest.UpdatedEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for CP_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v23 = *v14;
      v24 = v14[1];
      outlined copy of Data._Representation(*v14, v24);
      v25 = *v13;
      v26 = v13[1];
      *v13 = v23;
      v13[1] = v24;
      outlined consume of Data._Representation(v25, v26);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v19 = *v14;
  v20 = v14[1];
  outlined copy of Data._Representation(*v14, v20);
  *v13 = v19;
  v13[1] = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for CP_PublishRequest.UpdatedEncryptionID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CP_EncryptionID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for CP_PublishRequest.UpdatedEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for CP_EncryptionID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v22 = *v14;
      v23 = v14[1];
      *(_OWORD *)v14 = *(_OWORD *)v15;
      outlined consume of Data._Representation(v22, v23);
      v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v10);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_PublishRequest.UpdatedEncryptionID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE607CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_PublishRequest.UpdatedEncryptionID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE6087C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CP_PublishRequest.UpdatedEncryptionID()
{
  type metadata completion function for CP_SubscribeResponse.InitializeAck.MissingEncryptionID();
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_PublishResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (_OWORD *)((char *)v4 + v13);
    v15 = (_OWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for CP_SequenceNumber(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v11);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for CP_PublishResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for CP_SequenceNumber(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  return result;
}

uint64_t initializeWithCopy for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for CP_SequenceNumber(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for CP_PublishResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for CP_SequenceNumber(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *v14 = *v15;
      v14[1] = v15[1];
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_SequenceNumber);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *v14 = *v15;
  v14[1] = v15[1];
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for CP_SequenceNumber(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_OWORD *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = type metadata accessor for CP_SequenceNumber(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *v14 = *v15;
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for CP_SequenceNumber);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *v14 = *v15;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v10);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_PublishResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE61104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_79Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t storeEnumTagSinglePayload for CP_PublishResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE6111C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_80Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

void type metadata completion function for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CP_PublishResponse(a1, a2, a3, &lazy cache variable for type metadata for CP_SequenceNumber?, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CP_TopicSubscribers.TopicSubscribersInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for CP_TopicSubscribers.TopicSubscribersInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for CP_TopicSubscribers.TopicSubscribersInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_UpsertTopicMetadataRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CP_UpsertTopicMetadataRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_UpsertTopicMetadataResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE616F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_UpsertTopicMetadataResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE6177C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_UpsertTopicMetadataResponse()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_CreateTopicRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(int *)(a3 + 32);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for CP_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 32);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_CreateTopicRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE61BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_CreateTopicRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE61C38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_CreateTopicRequest()
{
  return type metadata completion function for CP_SubscribeResponse.TopicUpdate();
}

ValueMetadata *type metadata accessor for CP_CreateTopicRequest.TopicCategory()
{
  return &type metadata for CP_CreateTopicRequest.TopicCategory;
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_CreateTopicResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t Topic;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (_OWORD *)((char *)v4 + v13);
    v15 = (_OWORD *)((char *)a2 + v13);
    Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
    v17 = *(_QWORD *)(Topic - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Topic))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)((char *)v14 + 24) = *(_OWORD *)((char *)v15 + 24);
      *((_DWORD *)v14 + 10) = *((_DWORD *)v15 + 10);
      v12((uint64_t)v14 + *(int *)(Topic + 48), (uint64_t)v15 + *(int *)(Topic + 48), v11);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Topic);
    }
  }
  return v4;
}

uint64_t destroy for CP_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Topic;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Topic - 8) + 48))(v6, 1, Topic);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(Topic + 48), v5);
  return result;
}

uint64_t initializeWithCopy for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t Topic;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v16 = *(_QWORD *)(Topic - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, Topic))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    *(_OWORD *)((char *)v13 + 24) = *(_OWORD *)((char *)v14 + 24);
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    v11((char *)v13 + *(int *)(Topic + 48), (char *)v14 + *(int *)(Topic + 48), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithCopy for CP_CreateTopicResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Topic;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v17 = *(_QWORD *)(Topic - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, Topic);
  v19 = v18(v15, 1, Topic);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 + 28);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
      *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 + 36);
      *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 + 40);
      v12(v14 + *(int *)(Topic + 48), v15 + *(int *)(Topic + 48), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 + 28);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 + 36);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14 + *(int *)(Topic + 48), v15 + *(int *)(Topic + 48), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Topic);
  return a1;
}

uint64_t initializeWithTake for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t Topic;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v15 = *(_QWORD *)(Topic - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Topic))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *(_OWORD *)((char *)v12 + 24) = *(_OWORD *)((char *)v13 + 24);
    *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
    v10((char *)v12 + *(int *)(Topic + 48), (char *)v13 + *(int *)(Topic + 48), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithTake for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Topic;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v17 = *(_QWORD *)(Topic - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, Topic);
  v19 = v18(v15, 1, Topic);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 + 40);
      v12(v14 + *(int *)(Topic + 48), v15 + *(int *)(Topic + 48), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + *(int *)(Topic + 48), v15 + *(int *)(Topic + 48), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Topic);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_CreateTopicResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE6256C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_79Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t __swift_get_extra_inhabitant_index_79Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CP_CreateTopicResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE62628(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_80Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t __swift_store_extra_inhabitant_index_80Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6 + v13, a2, a2, v12);
  }
  return result;
}

void type metadata completion function for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CP_PublishResponse(a1, a2, a3, &lazy cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

void type metadata completion function for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, a4, a5);
    if (v8 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    v5 = *(int *)(a3 + 48);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 48);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 48);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 48);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 48);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 48);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_CreateTopicResponse.ClientTopicConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE62A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CP_CreateTopicResponse.ClientTopicConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE62AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 48);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for CP_CreateTopicResponse.ClientTopicConfig()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for CP_FetchTopicsRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_FetchTopicsRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE62D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CP_FetchTopicsRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE62D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CP_FetchTopicsRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CP_FetchTopicsResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_FetchTopicsResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_FetchTopicsResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE63170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CP_FetchTopicsResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE631F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CP_FetchTopicsResponse()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void Publisher.waitUntilAvailable<A, B>(for:valueTimeout:scheduler:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v13 = v12;
  v42 = a8;
  v43 = a7;
  v37 = a2;
  v38 = a3;
  v41 = a9;
  v39 = a12;
  v40 = a11;
  v34[1] = a4;
  v34[2] = a10;
  v16 = *(_QWORD *)(a6 - 8);
  v35 = a1;
  v36 = v16;
  MEMORY[0x1E0C80A78](a1);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v23 = (char *)v34 - v22;
  v24 = *(_QWORD *)(a5 - 8);
  v25 = MEMORY[0x1E0C80A78](v21);
  v27 = (char *)v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)v34 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v13;
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v30 + 16))(v29, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v35, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v37, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v18, v38, a6);
  Publishers.WaitUntilAvailable.init(_:_:_:_:)((uint64_t)v29, v33, v41);
}

void Publishers.WaitUntilAvailable.init(_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.WaitUntilAvailable();
}

uint64_t sub_1ACE63688(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v2 + a1[21], v4, v3);
  v6 = v2 + a1[23];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v6, v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2 + a1[22], v10, v1);
}

void type metadata accessor for Publishers.WaitUntilAvailable()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t Publishers.WaitUntilAvailable.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.WaitUntilAvailable.available.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.WaitUntilAvailable.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.WaitUntilAvailable.valueTimeout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 92);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

void Publishers.WaitUntilAvailable.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[11];
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v14[6] = a3;
  v14[7] = a4;
  v5 = *(_QWORD *)(a2 + 32);
  v14[4] = *(_QWORD *)(v5 - 8);
  v14[5] = a1;
  MEMORY[0x1E0C80A78](a1);
  v14[3] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 56);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14[0] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14[1] = AssociatedTypeWitness;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = MEMORY[0x1E0C80A78](v10);
  v13 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](v12);
  v14[8] = v13;
  v14[9] = v11;
  v14[10] = v5;
  v15 = *(_OWORD *)(a2 + 40);
  v16 = v8;
  v17 = *(_OWORD *)(a2 + 64);
  type metadata accessor for Publishers.WaitUntilAvailable.Inner();
}

uint64_t sub_1ACE639F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v13 = *(_QWORD *)(v10 - 192);
  v12(v3, v13, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v9, v13 + v7[21], v4);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 - 208) + 16))(v8, v13 + v7[23], *(_QWORD *)(v10 - 200));
  v14 = *(_QWORD *)(v10 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 176) + 16))(v14, v13 + v7[22], v6);
  swift_allocObject();
  *(_QWORD *)(v10 - 144) = Publishers.WaitUntilAvailable.Inner.init(upstream:available:valueTimeout:scheduler:)(v3, v9, v8, v14);
  MEMORY[0x1AF44972C](&protocol conformance descriptor for Publishers.WaitUntilAvailable<A, B, C>.Inner, a1);
  Publisher.subscribe<A>(_:)();
  return swift_release();
}

void type metadata accessor for Publishers.WaitUntilAvailable.Inner()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t *Publishers.WaitUntilAvailable.Inner.__allocating_init(upstream:available:valueTimeout:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return Publishers.WaitUntilAvailable.Inner.init(upstream:available:valueTimeout:scheduler:)(a1, a2, a3, a4);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.WaitUntilAvailable<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.WaitUntilAvailable<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.WaitUntilAvailable.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t dispatch thunk of IDProviding.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata instantiation function for Publishers.WaitUntilAvailable()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.WaitUntilAvailable()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.WaitUntilAvailable(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v28 = a3[2];
  v3 = *(_QWORD *)(v28 - 8);
  v31 = a3[3];
  v4 = *(_QWORD *)(v31 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v26 = *(_QWORD *)(v3 + 64) + v5;
  v29 = v4;
  v6 = a3[4];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v27 = *(_QWORD *)(v4 + 64) + v8;
  v30 = v7;
  v9 = *(_QWORD *)(v7 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (v5 | *(_BYTE *)(v3 + 80) | v8 | *(_BYTE *)(v11 + 80));
  if (v14 <= 7
    && ((v9 + v12 + ((v27 + (v26 & ~(unint64_t)v5)) & ~(unint64_t)v8)) & ~v12)
     + *(_QWORD *)(v11 + 64) <= 0x18
    && ((v5 | *(_DWORD *)(v3 + 80) | v8 | *(_DWORD *)(v11 + 80)) & 0x100000) == 0)
  {
    v19 = AssociatedTypeWitness;
    v20 = ~(unint64_t)v8;
    v21 = ~v12;
    v18 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16))(a1, a2, v28);
    v22 = ((unint64_t)a1 + v26) & ~(unint64_t)v5;
    v23 = ((unint64_t)a2 + v26) & ~(unint64_t)v5;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))(v22, v23, v31);
    v24 = (v23 + v27) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 16))((v22 + v27) & v20, v24, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((((v22 + v27) & v20) + v13) & v21, (v24 + v13) & v21, v19);
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return v18;
}

uint64_t destroy for Publishers.WaitUntilAvailable(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(a2[4] - 8);
  v9 = (v7 + *(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, _QWORD))(v8 + 8))(v9, a2[4]);
  v10 = *(_QWORD *)(v8 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v9 + v10 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  v15 = (v14 + v10) & ~v13;
  v16 = (v14 + v11) & ~v13;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v12 + 16))(v15, v16, a3[4]);
  v17 = *(_QWORD *)(v12 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 16))((v17 + *(unsigned __int8 *)(v19 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v17 + *(unsigned __int8 *)(v19 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  v15 = (v14 + v10) & ~v13;
  v16 = (v14 + v11) & ~v13;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v12 + 24))(v15, v16, a3[4]);
  v17 = *(_QWORD *)(v12 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 24))((v17 + *(unsigned __int8 *)(v19 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v17 + *(unsigned __int8 *)(v19 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  v15 = (v14 + v10) & ~v13;
  v16 = (v14 + v11) & ~v13;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v12 + 32))(v15, v16, a3[4]);
  v17 = *(_QWORD *)(v12 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 32))((v17 + *(unsigned __int8 *)(v19 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v17 + *(unsigned __int8 *)(v19 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  v15 = (v14 + v10) & ~v13;
  v16 = (v14 + v11) & ~v13;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v12 + 40))(v15, v16, a3[4]);
  v17 = *(_QWORD *)(v12 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 40))((v17 + *(unsigned __int8 *)(v19 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v17 + *(unsigned __int8 *)(v19 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.WaitUntilAvailable(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v34 = a3[2];
  v4 = *(_QWORD *)(v34 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v32 = a3[3];
  v6 = *(_QWORD *)(v32 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v33 = v7;
  if (v7 <= v5)
    v7 = *(_DWORD *)(v4 + 84);
  v8 = a3[4];
  v9 = *(_QWORD *)(v8 - 8);
  v31 = *(_DWORD *)(v9 + 84);
  if (v31 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v9 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned int *)(v12 + 84);
  if (v13 <= v10)
    v14 = v10;
  else
    v14 = *(_DWORD *)(v12 + 84);
  if (!a2)
    return 0;
  v15 = AssociatedTypeWitness;
  v16 = *(unsigned __int8 *)(v6 + 80);
  v17 = *(_QWORD *)(v4 + 64) + v16;
  v18 = *(_QWORD *)(v6 + 64);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = *(_QWORD *)(v9 + 64);
  v21 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v14)
    goto LABEL_28;
  v22 = ((v20 + v21 + ((v18 + v19 + (v17 & ~v16)) & ~v19)) & ~v21) + *(_QWORD *)(v12 + 64);
  v23 = 8 * v22;
  if (v22 <= 3)
  {
    v25 = ((a2 - v14 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v25))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_28;
      goto LABEL_19;
    }
    if (v25 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_28;
      goto LABEL_19;
    }
    if (v25 < 2)
    {
LABEL_28:
      if (v14)
      {
        if ((_DWORD)v5 == v14)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v5, v34);
        v28 = (v17 + a1) & ~v16;
        if (v33 == v14)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(v28, v33, v32);
        v29 = (v28 + v18 + v19) & ~v19;
        if (v31 == v14)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(v29, v31, v8);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))((v29 + v20 + v21) & ~v21, v13, v15);
      }
      return 0;
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_28;
LABEL_19:
  v26 = (v24 - 1) << v23;
  if (v22 > 3)
    v26 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v27 = v22;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  return v14 + v26 + 1;
}

void storeEnumTagSinglePayload for Publishers.WaitUntilAvailable(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = ((*(_QWORD *)(v8 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(_QWORD *)(v6 + 64)
          + *(unsigned __int8 *)(v8 + 80)
          + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v15 = 0u;
    v13 = a1;
    v14 = a2;
  }
  else
  {
    v13 = a1;
    v14 = a2;
    if (v12 <= 3)
    {
      v17 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  if (v11 < v14)
  {
    v16 = ~v11 + v14;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v18 = v16 & ~(-1 << (8 * v12));
        bzero(v13, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)v13 = v18;
          v13[2] = BYTE2(v18);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)v13 = v18;
        }
        else
        {
          *v13 = v18;
        }
      }
    }
    else
    {
      bzero(v13, v12);
      *(_DWORD *)v13 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

uint64_t type metadata completion function for Publishers.WaitUntilAvailable.Inner()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  unint64_t v7;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      v3 = swift_checkMetadataState();
      if (v4 > 0x3F)
      {
        return v3;
      }
      else
      {
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        if (v6 > 0x3F)
        {
          return AssociatedTypeWitness;
        }
        else
        {
          swift_getAssociatedTypeWitness();
          v0 = type metadata accessor for Optional();
          if (v7 <= 0x3F)
            return swift_initClassMetadata2();
        }
      }
    }
  }
  return v0;
}

uint64_t *Publishers.WaitUntilAvailable.Inner.init(upstream:available:valueTimeout:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 176);
  v7 = *(_QWORD *)(*v4 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  *(uint64_t *)((char *)v4 + v6) = Dictionary.init()();
  v8 = *(_QWORD *)(*v4 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable);
  *(uint64_t *)((char *)v4 + v8) = Dictionary.init()();
  v9 = (uint64_t)v4 + *(_QWORD *)(*v4 + 192);
  v10 = *(_QWORD *)(v5 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
  v12 = *(_QWORD *)(*v4 + 200);
  type metadata accessor for Lock();
  v13 = swift_allocObject();
  v14 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v13 + 16) = v14;
  *(uint64_t *)((char *)v4 + v12) = v13;
  *v14 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 144), a1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 152), a2, v10);
  v15 = (uint64_t)v4 + *(_QWORD *)(*v4 + 168);
  v16 = *(_QWORD *)(v5 + 96);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v17 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, a3, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 160), a4, v16);
  return v4;
}

uint64_t Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t AssociatedConformanceWitness;

  v4 = v3;
  v94 = a2;
  v95 = a3;
  v89 = a1;
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 104);
  v8 = type metadata accessor for Publishers.Filter();
  v75 = v6;
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Array();
  MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF38], v9);
  v77 = v9;
  v88 = type metadata accessor for Publishers.Sequence();
  v93 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v87 = MEMORY[0x1AF44972C](MEMORY[0x1E0C95C10], v88);
  v106 = v88;
  v107 = AssociatedTypeWitness;
  v108 = v87;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v73 = AssociatedConformanceWitness;
  v11 = type metadata accessor for Publishers.SetFailureType();
  v12 = v5[14];
  v91 = v5[11];
  v92 = v12;
  v63 = v5;
  v13 = type metadata accessor for Publishers.SetFailureType();
  v14 = MEMORY[0x1E0C95850];
  v76 = MEMORY[0x1AF44972C](MEMORY[0x1E0C95850], v13);
  v65 = v13;
  v15 = type metadata accessor for Publishers.Map();
  MEMORY[0x1AF44972C](v14, v11);
  v82 = MEMORY[0x1AF44972C](MEMORY[0x1E0C95950], v15);
  v72 = v15;
  v16 = type metadata accessor for Publishers.FlatMap();
  v85 = MEMORY[0x1AF44972C](MEMORY[0x1E0C95AD0], v8);
  v84 = MEMORY[0x1AF44972C](MEMORY[0x1E0C95B78], v16);
  v106 = v8;
  v107 = v16;
  v71 = v8;
  v80 = v16;
  v108 = v85;
  AssociatedConformanceWitness = v84;
  v83 = type metadata accessor for Publishers.Merge();
  v86 = *(_QWORD *)(v83 - 8);
  v17 = MEMORY[0x1E0C80A78](v83);
  v81 = (char *)&v62 - v18;
  v67 = *(_QWORD *)(v13 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v64 = (char *)&v62 - v20;
  v78 = *(_QWORD *)(v15 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v90 = (char *)&v62 - v22;
  v79 = *(_QWORD *)(v16 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v74 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v68 = (char *)&v62 - v26;
  v70 = *(_QWORD *)(v8 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v69 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v66 = (char *)&v62 - v29;
  v30 = (_QWORD *)swift_allocObject();
  v31 = v94;
  v32 = v95;
  v30[2] = v94;
  v30[3] = v32;
  v30[4] = v4;
  swift_retain();
  v33 = v75;
  Publisher.filter(_:)();
  swift_release();
  v34 = v4;
  v35 = v64;
  v37 = v91;
  v36 = v92;
  Publisher<>.setFailureType<A>(to:)();
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = v31;
  v38[3] = v32;
  v39 = v32;
  v38[4] = v34;
  swift_retain();
  v40 = v65;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v35, v40);
  v41 = v33;
  v96 = v33;
  v97 = v37;
  v98 = v63[12];
  v42 = v98;
  v99 = v31;
  v43 = v93;
  v100 = v93;
  v101 = v36;
  v45 = v63[16];
  v102 = v63[15];
  v44 = v102;
  v103 = v39;
  v46 = v63[17];
  v104 = v45;
  v105 = v46;
  KeyPath = swift_getKeyPath();
  v48 = (_QWORD *)swift_allocObject();
  v49 = v91;
  v48[2] = v41;
  v48[3] = v49;
  v48[4] = v42;
  v48[5] = v31;
  v50 = v92;
  v48[6] = v43;
  v48[7] = v50;
  v48[8] = v44;
  v48[9] = v39;
  v48[10] = v45;
  v48[11] = v46;
  v48[12] = KeyPath;
  static Subscribers.Demand.unlimited.getter();
  v51 = v68;
  v52 = v72;
  v53 = v90;
  Publisher.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v53, v52);
  v54 = v70;
  v55 = v66;
  v56 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v69, v66, v71);
  v57 = v79;
  v58 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v74, v51, v80);
  v59 = v81;
  Publishers.Merge.init(_:_:)();
  v60 = v83;
  MEMORY[0x1AF44972C](MEMORY[0x1E0C95A60], v83);
  Publisher.subscribe<A>(_:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v59, v60);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v51, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v56);
}

uint64_t closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _BOOL8 v78;
  Swift::Int v79;
  char v80;
  Swift::Bool v81;
  uint64_t v82;
  char *v83;
  char v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  _QWORD *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, char *, uint64_t);
  uint64_t AssociatedConformanceWitness;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v103 = a4;
  v102 = a3;
  v106 = a1;
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v101 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v100 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v91 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v97 = (char *)&v87 - v8;
  v9 = v5[12];
  v113 = v5[15];
  v92 = v9;
  v98 = swift_getAssociatedTypeWitness();
  v93 = *(void (**)(uint64_t, char *, uint64_t))(v98 - 8);
  v10 = MEMORY[0x1E0C80A78](v98);
  v90 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v110 = (char *)&v87 - v12;
  v13 = v5[11];
  v99 = v5[14];
  v112 = v13;
  v14 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v88 = (char *)&v87 - v15;
  v96 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v18 = (char *)&v87 - v17;
  v19 = v5[16];
  v105 = swift_getAssociatedTypeWitness();
  v104 = *(_QWORD *)(v105 - 8);
  v20 = *(_QWORD *)(v104 + 64);
  v21 = MEMORY[0x1E0C80A78](v105);
  v109 = (uint64_t)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v89 = (char *)&v87 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v108 = (char *)&v87 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v87 - v26;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a2 + v5[25]) + 16));
  v28 = *(void (**)(uint64_t, uint64_t))(v19 + 24);
  v107 = AssociatedTypeWitness;
  v29 = AssociatedTypeWitness;
  v30 = AssociatedConformanceWitness;
  v28(v29, v19);
  v31 = *(_QWORD *)(*(_QWORD *)a2 + 192);
  v114 = a2;
  v32 = a2 + v31;
  swift_beginAccess();
  v33 = v32;
  v34 = v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v33, v96);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v18, 1, v14);
  v111 = v19;
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v34);
    v36 = v105;
    v37 = v27;
  }
  else
  {
    v38 = v88;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v88, v18, v14);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v34);
    v36 = v105;
    swift_getAssociatedConformanceWitness();
    v39 = Sequence<>.contains(_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v38, v14);
    v37 = v27;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v104 + 8))(v27, v36);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(v114 + *(_QWORD *)(*(_QWORD *)v114 + 200)) + 16));
      return 1;
    }
  }
  v87 = v5;
  v95 = v37;
  v41 = v114;
  AssociatedConformanceWitness = v41 + *(_QWORD *)(*(_QWORD *)v41 + 160);
  v42 = v90;
  v43 = v92;
  dispatch thunk of Scheduler.now.getter();
  v88 = (char *)(v41 + *(_QWORD *)(*(_QWORD *)v41 + 168));
  v44 = v43;
  v45 = v98;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Strideable.advanced(by:)();
  v90 = (char *)*((_QWORD *)v93 + 1);
  ((void (*)(char *, uint64_t))v90)(v42, v45);
  v46 = v104;
  v47 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v47(v108, v37, v36);
  v93 = (void (*)(uint64_t, char *, uint64_t))v47;
  v48 = swift_allocObject();
  swift_weakInit();
  v49 = v89;
  v47(v89, v37, v36);
  v50 = (*(unsigned __int8 *)(v46 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v51 = (char *)swift_allocObject();
  v53 = v111;
  v52 = v112;
  *((_QWORD *)v51 + 2) = v100;
  *((_QWORD *)v51 + 3) = v52;
  v54 = v102;
  *((_QWORD *)v51 + 4) = v44;
  *((_QWORD *)v51 + 5) = v54;
  v55 = v99;
  *((_QWORD *)v51 + 6) = v101;
  *((_QWORD *)v51 + 7) = v55;
  v56 = v103;
  *((_QWORD *)v51 + 8) = v113;
  *((_QWORD *)v51 + 9) = v56;
  *((_QWORD *)v51 + 10) = v53;
  v96 = v87[17];
  *((_QWORD *)v51 + 11) = v96;
  *((_QWORD *)v51 + 12) = v48;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v51[v50], v49, v36);
  swift_retain();
  Scheduler.schedule(after:interval:_:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Cancellable);
  v57 = v107;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  v93(v109, v95, v36);
  v58 = (_QWORD *)swift_allocObject();
  v59 = v100;
  v60 = v112;
  v61 = v113;
  v58[2] = v100;
  v58[3] = v60;
  v62 = v44;
  v63 = v102;
  v58[4] = v44;
  v58[5] = v63;
  v64 = v101;
  v65 = v99;
  v58[6] = v101;
  v58[7] = v65;
  v66 = v103;
  v58[8] = v61;
  v58[9] = v66;
  v67 = v96;
  v58[10] = v111;
  v58[11] = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v97, v106, v57);
  v68 = (uint64_t *)(v114 + *(_QWORD *)(*(_QWORD *)v114 + 176));
  swift_beginAccess();
  v69 = (_QWORD *)swift_allocObject();
  v70 = v112;
  v69[2] = v59;
  v69[3] = v70;
  v69[4] = v62;
  v69[5] = v63;
  v69[6] = v64;
  v69[7] = v65;
  v71 = v105;
  v69[8] = v61;
  v69[9] = v66;
  v72 = AssociatedConformanceWitness;
  v73 = v96;
  v69[10] = v111;
  v69[11] = v73;
  v69[12] = partial apply for implicit closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:);
  v69[13] = v58;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v115 = *v68;
  v75 = v115;
  *v68 = 0x8000000000000000;
  __RawDictionaryStorage.find<A>(_:)(v109, v71, v72);
  v77 = *(_QWORD *)(v75 + 16);
  v78 = (v76 & 1) == 0;
  v79 = v77 + v78;
  if (__OFADD__(v77, v78))
  {
    __break(1u);
LABEL_13:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v80 = v76;
  v113 = type metadata accessor for Array();
  type metadata accessor for _NativeDictionary();
  v81 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v79);
  v82 = v109;
  v83 = v95;
  if (v81)
  {
    __RawDictionaryStorage.find<A>(_:)(v109, v71, AssociatedConformanceWitness);
    if ((v80 & 1) != (v84 & 1))
      goto LABEL_13;
  }
  *v68 = v115;
  swift_bridgeObjectRelease();
  if ((v80 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v85 = swift_bridgeObjectRetain();
    v115 = ((uint64_t (*)(uint64_t))v69[12])(v85);
    v93((uint64_t)v108, (char *)v82, v71);
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  Array.append(_:)();
  v86 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
  v86(v82, v71);
  swift_endAccess();
  ((void (*)(char *, uint64_t))v90)(v110, v98);
  v86((uint64_t)v83, v71);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(v114 + *(_QWORD *)(*(_QWORD *)v114 + 200)) + 16));
  swift_release();
  swift_release();
  return 0;
}

uint64_t closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = *(_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 200));
    swift_retain();
    swift_release();
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
    closure #1 in closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, a2);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 16));
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  _BYTE v8[64];
  uint64_t v9;
  uint64_t v10;

  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = &v8[-v5];
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a2, AssociatedTypeWitness);
    v10 = 0;
    swift_beginAccess();
    type metadata accessor for Array();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    swift_release();
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a2, AssociatedTypeWitness);
    v9 = 0;
    memset(&v8[32], 0, 32);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Cancellable);
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

void closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v20 = a4;
  v21 = a5;
  v8 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v20 - v15;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(uint64_t *)((char *)a2 + *(_QWORD *)(v8 + 200)) + 16));
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, a1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v16, v10);
  v18 = (uint64_t)a2 + *(_QWORD *)(*a2 + 192);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v18, v14, v10);
  swift_endAccess();
  v22 = a3;
  v23 = v20;
  v24 = a2;
  swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for Array();
  MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF38], v19);
  *v21 = Sequence.flatMap<A>(_:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 + 200)) + 16));
}

uint64_t closure #1 in closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];
  uint64_t *v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v18 = a3;
  v5 = *a2;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17[0] = (char *)v17 - v8;
  v17[1] = a2;
  v9 = (uint64_t *)((char *)a2 + *(_QWORD *)(v5 + 176));
  swift_beginAccess();
  v10 = *v9;
  v11 = type metadata accessor for Array();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x1AF448034](v20, a1, v10, AssociatedTypeWitness, v11, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)&v20[0];
  if (*(_QWORD *)&v20[0])
  {
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v15 = v17[0];
    v14(v17[0], a1, AssociatedTypeWitness);
    v19 = 0;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    v14(v15, a1, AssociatedTypeWitness);
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Cancellable);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    result = swift_endAccess();
  }
  else
  {
    result = static Array._allocateUninitialized(_:)();
    v13 = result;
  }
  *v18 = v13;
  return result;
}

uint64_t key path getter for Sequence.publisher : <A, B, C><A1>[A.Output]()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = type metadata accessor for Array();
  MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF38], v0);
  return Sequence.publisher.getter();
}

uint64_t *Publishers.WaitUntilAvailable.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 144));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 152), *(_QWORD *)(v1 + 88));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 160), *(_QWORD *)(v1 + 96));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 168);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (uint64_t)v0 + *(_QWORD *)(*v0 + 192);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return v0;
}

uint64_t Publishers.WaitUntilAvailable.Inner.__deallocating_deinit()
{
  Publishers.WaitUntilAvailable.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.WaitUntilAvailable<A, B, C>.Inner()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.WaitUntilAvailable<A, B, C>.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t sub_1ACE66A60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, v1[4], v1[2], v1[3]);
}

void partial apply for closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_1ACE66A9C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  JUMPOUT(0x1AF44972CLL);
}

uint64_t sub_1ACE66AE8()
{
  return 80;
}

__n128 sub_1ACE66AF4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t sub_1ACE66B10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)()
{
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, *(uint64_t **)(v2 + 32), a2);
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  _QWORD v18[2];

  v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

uint64_t sub_1ACE66D08()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACE66D2C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)()
{
  uint64_t v0;
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  v1 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(*(_QWORD *)(v0 + 96), v0 + ((v1 + 104) & ~v1));
}

uint64_t sub_1ACE66EB0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_1ACE66EF8()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of static CustomEndpointProvider.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CustomEndpointProvider.customEndpoint(for:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

BOOL one-time initialization function for identity()
{
  _BOOL8 result;

  getpid();
  result = _cp_sandbox_check_0();
  static ConversationManagerInterface.identity = !result;
  return result;
}

uint64_t static ConversationManagerInterface.identity.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for identity != -1)
    result = swift_once();
  *a1 = static ConversationManagerInterface.identity;
  return result;
}

id closure #1 in variable initialization expression of static ConversationManagerInterface.hostObjectInterface()
{
  id v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EECDC860);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF5B430;
  v2 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSDictionary);
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  *(_QWORD *)(inited + 48) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_requestConversationContainersByGroupUUIDWithReply_, 0, 1);
  swift_setDeallocating();
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1ACF59E10;
  v4 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v3, (uint64_t)sel_addRemoteMembers_toConversationWithUUID_, 0, 0);
  swift_setDeallocating();
  v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationParticipantPresentationContext);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v5, (uint64_t)sel_updateConversationWith_participantPresentationContexts_, 1, 0);
  swift_setDeallocating();
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1ACF59E30;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v6 + 48) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v6 + 56) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, (uint64_t)sel_includeMetricsReport_onConversationWithUUID_, 0, 0);
  swift_setDeallocating();
  return v0;
}

id static ConversationManagerInterface.hostObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (id *)&static ConversationManagerInterface.hostObjectInterface);
}

id static ConversationManagerInterface.clientObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (id *)&static ConversationManagerInterface.clientObjectInterface);
}

id static ConversationManagerInterface.hostObjectInterface.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance ConversationManagerInterface@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for identity != -1)
    result = swift_once();
  *a1 = static ConversationManagerInterface.identity;
  return result;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for hostObjectInterface, (id *)&static ConversationManagerInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance ConversationManagerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for clientObjectInterface, (id *)&static ConversationManagerInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4)
{
  if (*a3 != -1)
    swift_once();
  return *a4;
}

BOOL _cp_sandbox_check_0()
{
  return sandbox_check() == 0;
}

uint64_t PeoplePickerClient.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for PeoplePickerClient.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PeoplePickerClient.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t PeoplePickerClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PeoplePickerClient.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for PeoplePickerClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

Swift::Void __swiftcall PeoplePickerClient.handleServerDisconnect()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = v0 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1AF449918](v1))
  {
    v2 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PeoplePickerClient.dismissViewController(success:)(Swift::Bool success)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v3 = v1 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1AF449918](v3))
  {
    v4 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(Swift::Bool, uint64_t, uint64_t))(v4 + 16))(success, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

uint64_t @objc PeoplePickerClient.dismissViewController(success:)(char *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  char *v10;

  v5 = &a1[direct field offset for PeoplePickerClient.delegate];
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v5);
  if (result)
  {
    v7 = *((_QWORD *)v5 + 1);
    ObjectType = swift_getObjectType();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v10 = a1;
    v9(a3, ObjectType, v7);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PeoplePickerClient.requestActivity(completionHandler:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = v2;
  swift_retain();
  v10 = v2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in PeoplePickerClient.requestActivity(completionHandler:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 56) + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  v2 = MEMORY[0x1AF449918](v1);
  *(_QWORD *)(v0 + 64) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v5;
    *v5 = v0;
    v5[1] = closure #1 in PeoplePickerClient.requestActivity(completionHandler:);
    return v7(ObjectType, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 40))();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(void *))(v0 + 40))(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 40))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_unknownObjectRelease();
  }
  else
  {
    *(_QWORD *)(v4 + 80) = a1;
  }
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in PeoplePickerClient.requestActivity(completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return swift_task_switch();
}

uint64_t @objc PeoplePickerClient.requestActivity(completionHandler:)(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _Block_copy(a3);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned TUConversationActivity?) -> ();
  v11[5] = v9;
  v11[6] = a1;
  v12 = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in PeoplePickerClient.requestActivity(completionHandler:)partial apply, (uint64_t)v11);

  swift_release();
  return swift_release();
}

id PeoplePickerClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id PeoplePickerClient.init()()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = v0;
  UUID.init()();
  *(_QWORD *)&v2[direct field offset for PeoplePickerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  v4.receiver = v2;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id @objc PeoplePickerClient.init()(void *a1)
{
  objc_class *ObjectType;
  char *v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = a1;
  UUID.init()();
  *(_QWORD *)&v3[direct field offset for PeoplePickerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  v5.receiver = v3;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t PeoplePickerClient.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + direct field offset for PeoplePickerClient.id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return outlined destroy of weak ActivitySessionManagerProtocol?(v0 + direct field offset for PeoplePickerClient.delegate);
}

id PeoplePickerClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1ACE67D68@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1ACE67DC0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of PeoplePickerClientDelegate.handleServerDisconnect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeoplePickerClientDelegate.dismissViewController(success:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PeoplePickerClientDelegate.requestActivity()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 24) + *(_QWORD *)(a2 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:);
  return v7(a1, a2);
}

uint64_t @objc PeoplePickerClient.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + direct field offset for PeoplePickerClient.id;
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return outlined destroy of weak ActivitySessionManagerProtocol?(a1 + direct field offset for PeoplePickerClient.delegate);
}

uint64_t type metadata accessor for PeoplePickerClient()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PeoplePickerClient;
  if (!type metadata singleton initialization cache for PeoplePickerClient)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PeoplePickerClient()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PeoplePickerClient()
{
  return type metadata accessor for PeoplePickerClient();
}

uint64_t sub_1ACE67FA4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned TUConversationActivity?) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return swift_task_switch();
}

uint64_t Date.sinceEpochMillis.getter()
{
  uint64_t result;
  double v1;
  double v2;

  result = Date.timeIntervalSince1970.getter();
  v2 = v1 * 1000.0;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.84467441e19)
    return (unint64_t)v2;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t CurrentSubject.wrappedValue.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t CurrentSubject.projectedValue.getter()
{
  protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.getter in conformance FastSyncAnalyticsReporter();
  return swift_retain();
}

uint64_t CurrentSubject.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t CurrentSubject.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentValueSubject();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  v9 = CurrentValueSubject.__allocating_init(_:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  return result;
}

void (*CurrentSubject.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *v5 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[1] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[2] = malloc(v8);
  v9 = malloc(v8);
  v10 = *v2;
  v5[3] = v9;
  v5[4] = v10;
  CurrentValueSubject.value.getter();
  return CurrentSubject.wrappedValue.modify;
}

void CurrentSubject.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[3];
  v5 = (*a1)[1];
  v4 = (void *)(*a1)[2];
  v6 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))((*a1)[2], v3, v6);
    CurrentValueSubject.send(_:)();
    v7 = *(void (**)(void *, uint64_t))(v5 + 8);
    v7(v4, v6);
  }
  else
  {
    CurrentValueSubject.send(_:)();
    v7 = *(void (**)(void *, uint64_t))(v5 + 8);
  }
  v7(v3, v6);
  free(v3);
  free(v4);
  free(v2);
}

uint64_t specialized CurrentSubject.wrappedValue.setter()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_1ACE68338()
{
  return CurrentSubject.wrappedValue.getter();
}

uint64_t sub_1ACE68368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CurrentSubject(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return specialized CurrentSubject.wrappedValue.setter();
}

uint64_t sub_1ACE683B8()
{
  return 8;
}

_QWORD *sub_1ACE683C4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for CurrentSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CurrentSubject);
}

uint64_t UserNotificationInstantiable.init(userNotification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

void IMUserNotification.init(identifier:timeout:alertLevel:displayFlags:displayInformation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  void *v13;
  void *v14;
  Class isa;
  id v16;
  _BYTE v17[8];
  __int128 v18;
  _OWORD v19[2];

  v13 = (void *)objc_opt_self();
  v14 = (void *)MEMORY[0x1AF4480F4](a1, a2);
  swift_bridgeObjectRelease();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(a5);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_userNotificationWithIdentifier_timeout_alertLevel_displayFlags_displayInformation_, v14, a3, a4, isa, a6);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v18, v19);
    swift_dynamicCast();
    (*(void (**)(_OWORD *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v19, v17, v6);
  }
  else
  {
    __break(1u);
  }
}

id static IMUserNotificationCenter.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return (id)static IMUserNotificationCenter.shared;
}

void static IMUserNotificationCenter.shared.setter(uint64_t a1)
{
  void *v2;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)static IMUserNotificationCenter.shared;
  static IMUserNotificationCenter.shared = a1;

}

uint64_t (*static IMUserNotificationCenter.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

void thunk for @escaping @callee_guaranteed (@guaranteed IMUserNotification?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)&v23, (uint64_t)v22, &demangling cache variable for type metadata for (key: String, value: Any)?);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void (*v16)(_OWORD *);
  uint64_t result;
  _OWORD v18[4];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of AnyHashable(*(_QWORD *)(v3 + 48) + 40 * v10, (uint64_t)v25);
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)&v25[2] + 8);
    goto LABEL_23;
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    v13 = *(_QWORD *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      v9 = (v13 - 1) & v13;
      v10 = __clz(__rbit64(v13)) + (v11 << 6);
      v7 = v11;
      goto LABEL_3;
    }
    v14 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      v13 = *(_QWORD *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        v11 = v14;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        v13 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          v11 = v5 + 3;
          goto LABEL_7;
        }
        v14 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          v13 = *(_QWORD *)(v4 + 8 * v14);
          if (v13)
            goto LABEL_10;
          v11 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            v13 = *(_QWORD *)(v4 + 8 * v11);
            if (v13)
              goto LABEL_7;
            v7 = v12 - 1;
            v15 = v5 + 6;
            while (v12 != v15)
            {
              v13 = *(_QWORD *)(v4 + 8 * v15++);
              if (v13)
              {
                v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v26 = 0;
  memset(v25, 0, sizeof(v25));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v16 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v25, (uint64_t)&v20, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
  if (*((_QWORD *)&v21 + 1))
  {
    v18[2] = v22;
    v18[3] = v23;
    v19 = v24;
    v18[0] = v20;
    v18[1] = v21;
    v16(v18);
    return outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void *specialized IMUserNotificationCenter.notification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t ObjCClassFromMetadata;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v28;

  if ((a6 & 1) != 0)
  {
    type metadata accessor for ActivityAuthorizationManager();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v12 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v13 = objc_msgSend(v12, sel_bundleForClass_, ObjCClassFromMetadata);
    v14 = (void *)MEMORY[0x1AF4480F4](0x737465737341, 0xE600000000000000);
    v15 = (void *)MEMORY[0x1AF4480F4](7496035, 0xE300000000000000);
    v16 = objc_msgSend(v13, sel_pathForResource_ofType_, v14, v15);

    if (v16)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
      *(_QWORD *)(inited + 32) = 0xD00000000000002DLL;
      *(_QWORD *)(inited + 40) = 0x80000001ACF824A0;
      v21 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = v17;
      *(_QWORD *)(inited + 56) = v19;
      *(_QWORD *)(inited + 72) = v21;
      *(_QWORD *)(inited + 80) = 0xD000000000000031;
      *(_QWORD *)(inited + 120) = v21;
      *(_QWORD *)(inited + 88) = 0x80000001ACF824D0;
      *(_QWORD *)(inited + 96) = 0x616C506572616853;
      *(_QWORD *)(inited + 104) = 0xE900000000000079;
      v22 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v28 = a5;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v22, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v28);
      a5 = v28;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotification);
  swift_bridgeObjectRetain();
  IMUserNotification.init(identifier:timeout:alertLevel:displayFlags:displayInformation:)(a1, a2, 3, 0, a5, 0.0);
  v25 = v24;
  objc_msgSend(v24, sel_setUsesNotificationCenter_, 0);
  v26 = (void *)MEMORY[0x1AF4480F4](a3, a4);
  objc_msgSend(v25, sel_setRepresentedApplicationBundle_, v26);

  return v25;
}

void specialized IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD aBlock[6];

  v10 = specialized IMUserNotificationCenter.notification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:)(a1, a2, a3, a4, a5, a6);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v11 = (void *)static IMUserNotificationCenter.shared;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a7;
  *(_QWORD *)(v12 + 24) = a8;
  aBlock[4] = partial apply for closure #1 in IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IMUserNotification?) -> ();
  aBlock[3] = &block_descriptor_20;
  v13 = _Block_copy(aBlock);
  v14 = v11;
  v15 = v10;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_addUserNotification_listener_completionHandler_, v15, 0, v13);
  _Block_release(v13);

}

uint64_t dispatch thunk of UserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 8))();
}

uint64_t sub_1ACE68F84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)(void *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  if (a1)
    v3 = (uint64_t)objc_msgSend(a1, sel_response);
  else
    v3 = 3;
  return v2(v3);
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t specialized Set.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_9:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return specialized _NativeSet.subtracting<A>(_:)(a1, v2);
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0)
    goto LABEL_9;
LABEL_3:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > __CocoaSet.count.getter() / 8)
  {
    swift_bridgeObjectRetain();
    v6 = __CocoaSet.count.getter();
    v7 = specialized _NativeSet.init(_:capacity:)(v5, v6);
    swift_bridgeObjectRelease();
    v2 = v7;
    return specialized _NativeSet.subtracting<A>(_:)(a1, v2);
  }
LABEL_11:
  specialized Set._subtract<A>(_:)(a1);
  return v2;
}

uint64_t specialized closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v8[16] = a8;
  v8[17] = v11;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  v9 = type metadata accessor for Date();
  v8[18] = v9;
  v8[19] = *(_QWORD *)(v9 - 8);
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v8[19] = a8;
  v8[20] = v11;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  v9 = type metadata accessor for Date();
  v8[21] = v9;
  v8[22] = *(_QWORD *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in Task<>.reportFailure(on:function:process:)()
{
  uint64_t v0;
  _QWORD *v1;

  Date.init()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  void (*v43)(uint64_t, uint64_t);
  _QWORD *v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v61;

  if (one-time initialization token for abcReporter != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)static Log.abcReporter);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 112);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v61 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Detected failure on function %s. Reporting!", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (*(_QWORD *)(v0 + 128))
  {
    v57 = *(_QWORD *)(v0 + 120);
    v58 = *(_QWORD *)(v0 + 128);
  }
  else
  {
    v9 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v10 = objc_msgSend(v9, sel_bundleIdentifier);

    if (!v10)
    {
      swift_bridgeObjectRetain_n();
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.error.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(void **)(v0 + 184);
      v49 = *(_QWORD *)(v0 + 168);
      v50 = *(_QWORD *)(v0 + 144);
      v51 = *(_QWORD *)(v0 + 152);
      v52 = *(_QWORD *)(v0 + 112);
      if (v47)
      {
        v59 = *(_QWORD *)(v0 + 168);
        v53 = *(_QWORD *)(v0 + 104);
        v54 = swift_slowAlloc();
        v55 = swift_slowAlloc();
        v61 = v55;
        *(_DWORD *)v54 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v52, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 12) = 2080;
        *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1ACCCC000, v45, v46, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v55, -1, -1);
        MEMORY[0x1AF44981C](v54, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v59, v50);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
      }
LABEL_16:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v11;

  }
  v12 = *(_QWORD **)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  v15 = v12[3];
  v16 = v12[4];
  v56 = v12;
  __swift_project_boxed_opaque_existential_1(v12, v15);
  swift_getErrorValue();
  swift_bridgeObjectRetain();
  v17 = Error.localizedDescription.getter();
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v13, v17, v18, v57, v58, v15, v16);
  *(_QWORD *)(v0 + 200) = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v19)
  {
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(void **)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 168);
    v32 = *(_QWORD *)(v0 + 144);
    v33 = *(_QWORD *)(v0 + 152);
    if (v29)
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1ACCCC000, v27, v28, "Failed to convert signature payload", v34, 2u);
      MEMORY[0x1AF44981C](v34, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v61 = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain();
    v24 = Dictionary.description.getter();
    v26 = v25;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v20, v21, "Reporting signature %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v23, -1, -1);
    MEMORY[0x1AF44981C](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v36 = *(_QWORD *)(v0 + 160);
  v37 = *(_QWORD *)(v0 + 144);
  v38 = *(_QWORD *)(v0 + 152);
  v39 = v56[3];
  v40 = v56[4];
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 136), v39);
  Date.init()();
  Date.timeIntervalSince(_:)();
  v42 = v41;
  v43 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  *(_QWORD *)(v0 + 208) = v43;
  v43(v36, v37);
  v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v40 + 24) + *(_QWORD *)(v40 + 24));
  v44 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v44;
  *v44 = v0;
  v44[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  return v60(v19, v39, v40, v42);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  swift_bridgeObjectRetain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 224);
    v4 = *(void **)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 168);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v14 = *(_QWORD *)(v0 + 144);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v17 = v6;
    *(_QWORD *)(v0 + 64) = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    v7 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Received reporting response: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

    v16(v15, v14);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v10 = *(void **)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 144);

    swift_bridgeObjectRelease_n();
    v9(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  Date.init()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  void (*v43)(uint64_t, uint64_t);
  _QWORD *v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v61;

  if (one-time initialization token for abcReporter != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 216) = __swift_project_value_buffer(v1, (uint64_t)static Log.abcReporter);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 136);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 128);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v61 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Detected failure on function %s. Reporting!", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (*(_QWORD *)(v0 + 152))
  {
    v57 = *(_QWORD *)(v0 + 144);
    v58 = *(_QWORD *)(v0 + 152);
  }
  else
  {
    v9 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v10 = objc_msgSend(v9, sel_bundleIdentifier);

    if (!v10)
    {
      swift_bridgeObjectRetain_n();
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.error.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(void **)(v0 + 208);
      v49 = *(_QWORD *)(v0 + 192);
      v50 = *(_QWORD *)(v0 + 168);
      v51 = *(_QWORD *)(v0 + 176);
      v52 = *(_QWORD *)(v0 + 136);
      if (v47)
      {
        v59 = *(_QWORD *)(v0 + 192);
        v53 = *(_QWORD *)(v0 + 128);
        v54 = swift_slowAlloc();
        v55 = swift_slowAlloc();
        v61 = v55;
        *(_DWORD *)v54 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v52, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 12) = 2080;
        *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1ACCCC000, v45, v46, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v55, -1, -1);
        MEMORY[0x1AF44981C](v54, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v59, v50);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
      }
LABEL_16:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v11;

  }
  v12 = *(_QWORD **)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 136);
  v15 = v12[3];
  v16 = v12[4];
  v56 = v12;
  __swift_project_boxed_opaque_existential_1(v12, v15);
  swift_getErrorValue();
  swift_bridgeObjectRetain();
  v17 = Error.localizedDescription.getter();
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v13, v17, v18, v57, v58, v15, v16);
  *(_QWORD *)(v0 + 224) = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v19)
  {
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(void **)(v0 + 208);
    v31 = *(_QWORD *)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 168);
    v33 = *(_QWORD *)(v0 + 176);
    if (v29)
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1ACCCC000, v27, v28, "Failed to convert signature payload", v34, 2u);
      MEMORY[0x1AF44981C](v34, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v61 = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain();
    v24 = Dictionary.description.getter();
    v26 = v25;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v20, v21, "Reporting signature %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v23, -1, -1);
    MEMORY[0x1AF44981C](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v36 = *(_QWORD *)(v0 + 184);
  v37 = *(_QWORD *)(v0 + 168);
  v38 = *(_QWORD *)(v0 + 176);
  v39 = v56[3];
  v40 = v56[4];
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 160), v39);
  Date.init()();
  Date.timeIntervalSince(_:)();
  v42 = v41;
  v43 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  *(_QWORD *)(v0 + 232) = v43;
  v43(v36, v37);
  v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v40 + 24) + *(_QWORD *)(v40 + 24));
  v44 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v44;
  *v44 = v0;
  v44[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  return v60(v19, v39, v40, v42);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  swift_bridgeObjectRetain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 248);
    v4 = *(void **)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
    v14 = *(_QWORD *)(v0 + 168);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v17 = v6;
    *(_QWORD *)(v0 + 88) = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    v7 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Received reporting response: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

    v16(v15, v14);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
    v10 = *(void **)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 168);

    swift_bridgeObjectRelease_n();
    v9(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t protocol witness for IDSServiceProtocol.accounts.getter in conformance IDSService()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_accounts);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type IDSAccount and conformance NSObject, &lazy cache variable for type metadata for IDSAccount);
  v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for IDSServiceProtocol.devices.getter in conformance IDSService()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_devices);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSDevice);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id protocol witness for IDSServiceProtocol.iCloudAccount.getter in conformance IDSService()
{
  id *v0;

  return objc_msgSend(*v0, sel_iCloudAccount);
}

uint64_t protocol witness for IDSServiceProtocol.serviceIdentifier.getter in conformance IDSService()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_serviceIdentifier);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

BOOL static IDSGroupSessionProvider.SessionState.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void IDSGroupSessionProvider.SessionState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t IDSGroupSessionProvider.Participant.id.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*IDSGroupSessionProvider.Participant.id.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t IDSGroupSessionProvider.Participant.handle.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t IDSGroupSessionProvider.Participant.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*IDSGroupSessionProvider.Participant.handle.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

id IDSGroupSessionProvider.Participant.tuConversationParticipant.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v6 = (void *)objc_opt_self();
  v7 = (void *)MEMORY[0x1AF4480F4](a2, a3);
  v8 = objc_msgSend(v6, sel_normalizedHandleWithDestinationID_, v7);

  if (!v8)
  {
    v9 = objc_allocWithZone(MEMORY[0x1E0DBD2F8]);
    swift_bridgeObjectRetain();
    v10 = (void *)MEMORY[0x1AF4480F4](a2, a3);
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v9, sel_initWithDestinationID_, v10);

  }
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD2B0]), sel_initWithIdentifier_handle_, a1, v8);

  return v11;
}

uint64_t IDSGroupSessionProvider.Participant.hash(into:)(int a1, Swift::UInt64 a2)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static IDSGroupSessionProvider.Participant.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4)
    return 0;
  if (a2 == a5 && a3 == a6)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int IDSGroupSessionProvider.Participant.hashValue.getter(Swift::UInt64 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IDSGroupSessionProvider.Participant()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IDSGroupSessionProvider.Participant()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IDSGroupSessionProvider.Participant()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IDSGroupSessionProvider.Participant(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t IDSGroupSessionProvider.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t IDSGroupSessionProvider.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*IDSGroupSessionProvider.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t IDSGroupSessionProvider.groupID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IDSGroupSessionProvider.members.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26[2];

  v2 = v1;
  v4 = OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members;
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  v6 = specialized Set.subtracting(_:)(v5, a1);
  swift_bridgeObjectRelease();
  if ((v6 & 0xC000000000000001) == 0)
  {
    v7 = (_QWORD *)&unk_1ED2FB000;
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v7 = &unk_1ED2FB000;
  if (!__CocoaSet.count.getter())
    goto LABEL_8;
LABEL_3:
  if (v7[209] != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v26[0] = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v26);
    v7 = (_QWORD *)&unk_1ED2FB000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "Removing members: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  IDSGroupSessionProvider.removeMembers(_:)(v6);
  swift_bridgeObjectRelease();
LABEL_11:
  v15 = *(_QWORD *)(v2 + v4);
  swift_bridgeObjectRetain();
  v16 = specialized Set.subtracting(_:)(a1, v15);
  v17 = v16;
  if ((v16 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter())
      goto LABEL_21;
  }
  else if (!*(_QWORD *)(v16 + 16))
  {
    goto LABEL_21;
  }
  if (v7[209] != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v26[0] = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    v23 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v19, v20, "Adding members: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  IDSGroupSessionProvider.addMembers(_:)(v17);
LABEL_21:
  swift_bridgeObjectRelease();
  return IDSGroupSessionProvider.recomputeUnknownParticipants()();
}

uint64_t IDSGroupSessionProvider.localMember.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t IDSGroupSessionProvider.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service, a1);
}

id IDSGroupSessionProvider.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
}

void *IDSGroupSessionProvider.groupSession.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupSession);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void IDSGroupSessionProvider.groupSession.setter(void *a1)
{
  IDSGroupSessionProvider.groupSession.setter(a1, &OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupSession);
}

uint64_t (*IDSGroupSessionProvider.groupSession.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t IDSGroupSessionProvider.participantIdentifier.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
    v3 = *(_QWORD *)(v1 + 16 * v2 + 24);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  return v3;
}

void IDSGroupSessionProvider.userDefaults.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v10)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v9, (uint64_t)a1);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
    v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v5 = objc_msgSend(v4, sel_bundleIdentifier);

    if (v5)
    {
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      static NSUserDefaults.classProtectedStorage(suiteName:)(v6, v8, a1);
      swift_bridgeObjectRelease();
      outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v9);
      swift_beginAccess();
      outlined assign with take of ProtectedStorage?((uint64_t)&v9, v3);
      swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t outlined assign with take of ProtectedStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t IDSGroupSessionProvider.userDefaults.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];

  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  v2 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*IDSGroupSessionProvider.userDefaults.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  IDSGroupSessionProvider.userDefaults.getter(v3);
  return IDSGroupSessionProvider.userDefaults.modify;
}

void IDSGroupSessionProvider.userDefaults.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    v6 = v5 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)*a1, (uint64_t)v3);
    v8 = v7 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

uint64_t IDSGroupSessionProvider.CurrentSessionInfo.currentParticipantIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t IDSGroupSessionProvider.currentPlugins.didset()
{
  char *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _QWORD v14[2];
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in IDSGroupSessionProvider.currentPlugins.didset;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_84;
  v11 = _Block_copy(aBlock);
  v12 = v0;
  static DispatchQoS.unspecified.getter();
  v14[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, v2, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t closure #1 in IDSGroupSessionProvider.currentPlugins.didset(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD v9[5];

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xC0))();
  if (result)
  {
    v4 = v3;
    ObjectType = swift_getObjectType();
    v9[3] = type metadata accessor for IDSGroupSessionProvider();
    v9[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v6, (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider, (uint64_t)&protocol conformance descriptor for IDSGroupSessionProvider);
    v9[0] = a1;
    v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 40);
    v8 = a1;
    v7(v9, ObjectType, v4);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
  }
  return result;
}

uint64_t IDSGroupSessionProvider.currentPlugins.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t IDSGroupSessionProvider.currentPlugins.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_currentPlugins);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  return IDSGroupSessionProvider.currentPlugins.didset();
}

uint64_t (*IDSGroupSessionProvider.currentPlugins.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return IDSGroupSessionProvider.currentPlugins.modify;
}

uint64_t IDSGroupSessionProvider.currentPlugins.modify(uint64_t a1, char a2)
{
  return IDSGroupSessionProvider.currentPlugins.modify(a1, a2, (uint64_t (*)(uint64_t))IDSGroupSessionProvider.currentPlugins.didset);
}

void *IDSGroupSessionProvider.virtualParticipant.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(void **)(v1 + 16 * v2 + 16);
    v4 = v3;
  }
  else
  {
    v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t IDSGroupSessionProvider.participants.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t IDSGroupSessionProvider.participants.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_participants);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  return IDSGroupSessionProvider.recomputeUnknownParticipants()();
}

uint64_t (*IDSGroupSessionProvider.participants.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return IDSGroupSessionProvider.participants.modify;
}

uint64_t IDSGroupSessionProvider.participants.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return IDSGroupSessionProvider.recomputeUnknownParticipants()();
  return result;
}

uint64_t IDSGroupSessionProvider.unknownParticipants.didset(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  _QWORD v16[2];
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(_QWORD *)&v1[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in IDSGroupSessionProvider.unknownParticipants.didset;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_78_0;
  v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v14 = v1;
  static DispatchQoS.unspecified.getter();
  v16[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, v4, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

void closure #1 in IDSGroupSessionProvider.unknownParticipants.didset(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  os_log_type_t type;
  _QWORD *v29;
  uint64_t v30;
  NSObject *oslog;
  uint64_t v32[5];

  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x160);
  v6 = v5();
  specialized static Set.== infix(_:_:)(a1, v6);
  v8 = v7;
  v9 = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.service);
    v11 = a2;
    swift_bridgeObjectRetain_n();
    v12 = v11;
    oslog = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = swift_slowAlloc();
      v29 = (_QWORD *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v32[0] = v30;
      *(_DWORD *)v14 = 138412802;
      type = v13;
      v15 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v29 = v12;

      *(_WORD *)(v14 + 12) = 2080;
      v5();
      type metadata accessor for AddressableMember();
      lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, 255, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
      v16 = Set.description.getter();
      v18 = v17;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v14 + 22) = 2080;
      swift_bridgeObjectRetain();
      v19 = Set.description.getter();
      v21 = v20;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, oslog, type, "%@ not notifying delegate of updated unknownParticipant list %s because it's the same as the oldValue: %s", (uint8_t *)v14, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v29, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v30, -1, -1);
      MEMORY[0x1AF44981C](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else if ((*(uint64_t (**)(uint64_t))((*v4 & *a2) + 0xC0))(v9))
  {
    v23 = v22;
    ObjectType = swift_getObjectType();
    v32[3] = type metadata accessor for IDSGroupSessionProvider();
    v32[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v25, (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider, (uint64_t)&protocol conformance descriptor for IDSGroupSessionProvider);
    v32[0] = (uint64_t)a2;
    v26 = a2;
    v27 = v5();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v23 + 32))(v32, v27, ObjectType, v23);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  }
}

uint64_t IDSGroupSessionProvider.unknownParticipants.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t IDSGroupSessionProvider.unknownParticipants.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_unknownParticipants);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  IDSGroupSessionProvider.unknownParticipants.didset(v4);
  return swift_bridgeObjectRelease();
}

void (*IDSGroupSessionProvider.unknownParticipants.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_unknownParticipants;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[3] = *v5;
  swift_bridgeObjectRetain();
  return IDSGroupSessionProvider.unknownParticipants.modify;
}

void IDSGroupSessionProvider.unknownParticipants.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(v4 + v3);
  *(_QWORD *)(v4 + v3) = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    IDSGroupSessionProvider.unknownParticipants.didset(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    IDSGroupSessionProvider.unknownParticipants.didset(v5);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t IDSGroupSessionProvider.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_abcReporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a1);
}

uint64_t IDSGroupSessionProvider.abcReporter.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_abcReporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3);
  return swift_endAccess();
}

uint64_t (*IDSGroupSessionProvider.abcReporter.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

void *IDSGroupSessionProvider.powerAssertion.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_powerAssertion);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void IDSGroupSessionProvider.powerAssertion.setter(void *a1)
{
  IDSGroupSessionProvider.groupSession.setter(a1, &OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_powerAssertion);
}

void IDSGroupSessionProvider.groupSession.setter(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;

}

uint64_t (*IDSGroupSessionProvider.powerAssertion.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t IDSGroupSessionProvider.state.didset()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v19 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state;
  swift_beginAccess();
  if (*v9 != 1)
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.service);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1ACCCC000, v11, v12, "IDSGroupSessionProvider getting rid of assertion", v13, 2u);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }

    (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x198))(0);
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v1;
  aBlock[4] = partial apply for closure #1 in IDSGroupSessionProvider.state.didset;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_72;
  v15 = _Block_copy(aBlock);
  v16 = v1;
  static DispatchQoS.unspecified.getter();
  v20 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v8, v4, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t closure #1 in IDSGroupSessionProvider.state.didset(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xC0))();
  if (result)
  {
    v5 = v4;
    ObjectType = swift_getObjectType();
    v11[3] = type metadata accessor for IDSGroupSessionProvider();
    v11[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v7, (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider, (uint64_t)&protocol conformance descriptor for IDSGroupSessionProvider);
    v11[0] = a1;
    v8 = *(uint64_t (**)(void))((*v2 & *a1) + 0x1A8);
    v9 = a1;
    v10 = v8();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v5 + 8))(v11, v10, ObjectType, v5);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  }
  return result;
}

uint64_t IDSGroupSessionProvider.state.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state);
  swift_beginAccess();
  return *v1;
}

uint64_t IDSGroupSessionProvider.state.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state);
  swift_beginAccess();
  *v3 = a1;
  return IDSGroupSessionProvider.state.didset();
}

uint64_t (*IDSGroupSessionProvider.state.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return IDSGroupSessionProvider.state.modify;
}

uint64_t IDSGroupSessionProvider.state.modify(uint64_t a1, char a2)
{
  return IDSGroupSessionProvider.currentPlugins.modify(a1, a2, (uint64_t (*)(uint64_t))IDSGroupSessionProvider.state.didset);
}

uint64_t IDSGroupSessionProvider.currentPlugins.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return a3(result);
  return result;
}

const char *IDSGroupSessionProvider.kPluginName.unsafeMutableAddressor()
{
  return "PubSub";
}

uint64_t static IDSGroupSessionProvider.kPluginName.getter()
{
  return 0x627553627550;
}

id IDSGroupSessionProvider.__allocating_init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  objc_class *v8;
  id v17;
  id v18;

  v17 = objc_allocWithZone(v8);
  v18 = specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_unknownObjectRelease();
  return v18;
}

id IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v9;

  v9 = specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_unknownObjectRelease();
  return v9;
}

id IDSGroupSessionProvider.__deallocating_deinit()
{
  char *v0;
  id *v1;
  objc_super v3;

  v1 = (id *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupSession];
  swift_beginAccess();
  if (*v1)
    objc_msgSend(*v1, sel_invalidate);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for IDSGroupSessionProvider();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t IDSGroupSessionProvider.recomputeUnknownParticipants()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  id v10;
  id v11;
  objc_class *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  objc_super v30;
  unint64_t v31;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v28 = v0;
    v31 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = specialized Set.startIndex.getter(v2);
    v6 = v5;
    v8 = v7 & 1;
    result = objc_opt_self();
    v29 = (id)result;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v2 + 32))
    {
      if (((*(_QWORD *)(v2 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(v2 + 36) != (_DWORD)v6)
        goto LABEL_15;
      v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 24 * v4);
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      swift_bridgeObjectRetain();
      v20 = (void *)MEMORY[0x1AF4480F4](v18, v19);
      v21 = objc_msgSend(v29, sel_normalizedHandleWithDestinationID_, v20);

      if (!v21)
      {
        v22 = objc_allocWithZone(MEMORY[0x1E0DBD2F8]);
        swift_bridgeObjectRetain();
        v23 = (void *)MEMORY[0x1AF4480F4](v18, v19);
        swift_bridgeObjectRelease();
        v21 = objc_msgSend(v22, sel_initWithDestinationID_, v23);

      }
      v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD2B0]), sel_initWithIdentifier_handle_, v17, v21);

      v11 = objc_msgSend(v10, sel_handle);
      v12 = (objc_class *)type metadata accessor for AddressableMember();
      v13 = (char *)objc_allocWithZone(v12);
      *(_QWORD *)&v13[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v11;
      v30.receiver = v13;
      v30.super_class = v12;
      objc_msgSendSuper2(&v30, sel_init);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      result = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v2);
      v4 = result;
      v6 = v14;
      v8 = v15 & 1;
      if (!--v3)
      {
        outlined consume of Set<AddressableMember>.Index._Variant(result, v14, v15 & 1);
        v24 = v31;
        swift_bridgeObjectRelease();
        v0 = v28;
        v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x1E0DEE9D8];
LABEL_12:
    v25 = specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    v26 = swift_bridgeObjectRetain();
    v27 = specialized Set.subtracting(_:)(v26, v25);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))((*v1 & *v0) + 0x168))(v27);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IDSGroupSessionProvider.start()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE *v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  Class isa;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  id v37;
  unsigned int v38;
  _QWORD *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t inited;
  id v44;
  Class v45;
  uint64_t v46;
  id v47;
  void *v48;
  Class v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  Class v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t (*v62)(void);
  NSObject *log;
  os_log_t loga;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v2 = IDSGroupSessionProvider.idsAccountForLocalMember()();
  if (!v1)
  {
    v3 = (void *)v2;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
    swift_unknownObjectRelease();
    if (v5)
    {
      IDSGroupSessionProvider.idsSessionCreationOptions()();
      if (one-time initialization token for service != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Log.service);
      v7 = v0;
      swift_bridgeObjectRetain_n();
      v8 = v7;
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        log = v9;
        v11 = swift_slowAlloc();
        v60 = swift_slowAlloc();
        v67 = v60;
        *(_DWORD *)v11 = 136315650;
        v66 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID + 8);
        swift_bridgeObjectRetain();
        v12 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v11 + 12) = 2080;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
        v14 = String.init<A>(reflecting:)();
        v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v11 + 22) = 2080;
        v17 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
        v16 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
        __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v17);
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v17, v16);
        if (v19)
        {
          v65 = v18;
          v66 = v19;
          v20 = String.init<A>(reflecting:)();
          v22 = v21;
        }
        else
        {
          v22 = 0xE300000000000000;
          v20 = 7104878;
        }
        v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, log, v10, "Creating IDSGroupSession as LW with UUID %s using options %s on service %s", (uint8_t *)v11, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v60, -1, -1);
        MEMORY[0x1AF44981C](v11, -1, -1);

        v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v28 = objc_allocWithZone(MEMORY[0x1E0D342F8]);
      v29 = v3;
      v30 = MEMORY[0x1E0DEA968];
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v32 = objc_msgSend(v28, sel_initWithAccount_options_, v29, isa);
      loga = v29;

      v33 = (*(uint64_t (**)(id))((*v4 & *v8) + 0xF8))(v32);
      v62 = *(uint64_t (**)(void))((*v4 & *v8) + 0xF0);
      v34 = (void *)((uint64_t (*)(uint64_t))v62)(v33);
      if (v34)
      {
        v35 = v34;
        objc_msgSend(v34, sel_setDelegate_queue_, v8, *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue));

      }
      v36 = IDSGroupSessionProvider.idsJoinSessionOptions()();
      v37 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
      v38 = objc_msgSend(v37, sel_wranglerEnabled);

      if (v38)
      {
        v61 = v36;
        v39 = v4;
        v40 = Logger.logObject.getter();
        v41 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v42 = 0;
          _os_log_impl(&dword_1ACCCC000, v40, v41, "Grabbing power assertion", v42, 2u);
          MEMORY[0x1AF44981C](v42, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        AnyHashable.init<A>(_:)();
        v44 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
        objc_msgSend(v44, sel_processIdentifier);

        v45 = Int32._bridgeToObjectiveC()().super.super.isa;
        *(_QWORD *)(inited + 96) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(_QWORD *)(inited + 72) = v45;
        v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v66 = v46;
        AnyHashable.init<A>(_:)();
        *(_QWORD *)(inited + 168) = v30;
        *(_QWORD *)(inited + 144) = 0xD000000000000022;
        *(_QWORD *)(inited + 152) = 0x80000001ACF82550;
        specialized Dictionary.init(dictionaryLiteral:)(inited);
        v47 = objc_allocWithZone(MEMORY[0x1E0D36AA0]);
        v48 = (void *)MEMORY[0x1AF4480F4](0xD000000000000018, 0x80000001ACF82530);
        v49 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v50 = objc_msgSend(v47, sel_initWithIdentifier_timeoutSec_properties_, v48, v49, 0.0);

        (*(void (**)(id))((*v39 & *v8) + 0x198))(v50);
        v36 = v61;
      }
      swift_bridgeObjectRetain_n();
      v51 = Logger.logObject.getter();
      v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc();
        v54 = swift_slowAlloc();
        *(_DWORD *)v53 = 136315138;
        v65 = v54;
        v67 = v36;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
        v55 = String.init<A>(reflecting:)();
        v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v51, v52, "Joining group session with options %s", v53, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v54, -1, -1);
        MEMORY[0x1AF44981C](v53, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v57 = v62();
      if (v57)
      {
        v58 = (void *)v57;
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v36);
        swift_bridgeObjectRelease();
        v59 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v58, sel_joinWithOptions_, v59);

      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (one-time initialization token for service != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Log.service);
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_1ACCCC000, v24, v25, "IDSGroupSessionProvider start called before setting delegate", v26, 2u);
        MEMORY[0x1AF44981C](v26, -1, -1);
      }

      lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
      swift_allocError();
      *v27 = 2;
      swift_willThrow();

    }
  }
}

Swift::Void __swiftcall IDSGroupSessionProvider.leave()()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    if ((*(uint64_t (**)(void))((*v6 & *v2) + 0xF0))())
    {
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
      v9 = String.init<A>(reflecting:)();
      v11 = v10;
    }
    else
    {
      v11 = 0xE300000000000000;
      v9 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Leaving IDSGroupSession %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);

  }
  else
  {

  }
  v13 = (void *)(*(uint64_t (**)(uint64_t))((*v6 & *v2) + 0xF0))(v12);
  objc_msgSend(v13, sel_leaveGroupSession);

}

void IDSGroupSessionProvider.addMembers(_:)(uint64_t a1)
{
  IDSGroupSessionProvider.addMembers(_:)(a1, 2u, "Unable to add members, no session for service %s");
}

uint64_t Set<>.idsDestinations.getter(uint64_t a1)
{
  return specialized Sequence.compactMap<A>(_:)(a1);
}

void IDSGroupSessionProvider.removeMembers(_:)(uint64_t a1)
{
  IDSGroupSessionProvider.addMembers(_:)(a1, 1u, "Unable to remove members, no session for service %s");
}

void IDSGroupSessionProvider.addMembers(_:)(uint64_t a1, unsigned __int16 a2, const char *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  Class isa;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;

  v8 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xF0))();
  if (v8)
  {
    v9 = (void *)v8;
    v10 = specialized Sequence.compactMap<A>(_:)(a1);
    if (!v4)
    {
      specialized _arrayForceCast<A, B>(_:)(v10);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_manageDesignatedMembers_withType_, isa, a2);

    }
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.service);
    v13 = v3;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
      v19 = *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v13 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v18);
      (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
      if (v20)
      {
        v21 = String.init<A>(reflecting:)();
        v23 = v22;
      }
      else
      {
        v23 = 0xE300000000000000;
        v21 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v14, v15, a3, v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v17, -1, -1);
      MEMORY[0x1AF44981C](v16, -1, -1);
    }
    else
    {

    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *v24 = 4;
    swift_willThrow();
  }
}

void IDSGroupSessionProvider.updateMembers(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Class isa;
  _BYTE *v23;
  uint64_t v24;

  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF0))();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members);
    *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members) = a1;
    swift_bridgeObjectRetain();
    IDSGroupSessionProvider.members.didset(v6);
    swift_bridgeObjectRelease();
    v7 = specialized Sequence.compactMap<A>(_:)(a1);
    if (!v2)
    {
      v8 = v7;
      v9 = IDSGroupSessionProvider.idsDestinationsForLocalMember()();
      if (!v9)
        v9 = MEMORY[0x1E0DEE9D8];
      specialized Array.append<A>(contentsOf:)(v9);
      specialized _arrayForceCast<A, B>(_:)(v8);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel_updateMembers_withContext_triggeredLocally_, isa, 0, 1);

    }
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.service);
    v11 = v1;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v24 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = *(_QWORD *)((char *)v11 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
      v17 = *(_QWORD *)((char *)v11 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v11 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v16);
      (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
      if (v18)
      {
        v19 = String.init<A>(reflecting:)();
        v21 = v20;
      }
      else
      {
        v21 = 0xE300000000000000;
        v19 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v12, v13, "Unable to update members, no session for service %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v15, -1, -1);
      MEMORY[0x1AF44981C](v14, -1, -1);
    }
    else
    {

    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *v23 = 4;
    swift_willThrow();
  }
}

void IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, id a4)
{
  _QWORD *v4;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  uint64_t aBlock;
  uint64_t v43;
  void (*v44)(uint64_t, void *);
  void *v45;
  void (*v46)(void *);
  _QWORD *v47;
  uint64_t v48;

  v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0xF0))();
  if (v9)
  {
    v10 = (void *)v9;
    if (one-time initialization token for service != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.service);
    v12 = v10;
    swift_bridgeObjectRetain_n();
    v13 = v12;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v40 = a4;
      v16 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v48 = v39;
      *(_DWORD *)v16 = 136315394;
      v17 = objc_msgSend(v13, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v18 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      v43 = a2;
      swift_bridgeObjectRetain();
      v20 = String.init<A>(reflecting:)();
      aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Session, %s, fetching data cryptor for topic: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v39, -1, -1);
      v22 = v16;
      a4 = v40;
      MEMORY[0x1AF44981C](v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v35 = (void *)MEMORY[0x1AF4480F4](a1, a2);
    v36 = (_QWORD *)swift_allocObject();
    v36[2] = a1;
    v36[3] = a2;
    v36[4] = v13;
    v36[5] = a3;
    v36[6] = a4;
    v46 = partial apply for closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:);
    v47 = v36;
    aBlock = MEMORY[0x1E0C809B0];
    v43 = 1107296256;
    v44 = thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ();
    v45 = &block_descriptor_21;
    v37 = _Block_copy(&aBlock);
    v38 = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v38, sel_requestDataCryptorForTopic_completionHandler_, v35, v37);
    _Block_release(v37);

  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.service);
    v41 = v4;
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v48 = v27;
      *(_DWORD *)v26 = 136315138;
      v28 = *(_QWORD *)((char *)v41 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
      v29 = *(_QWORD *)((char *)v41 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v41 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v28);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
      if (v31)
      {
        aBlock = v30;
        v43 = v31;
        v32 = String.init<A>(reflecting:)();
        v34 = v33;
      }
      else
      {
        v34 = 0xE300000000000000;
        v32 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v24, v25, "Unable to fetch data cryptor, no session for service %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v27, -1, -1);
      MEMORY[0x1AF44981C](v26, -1, -1);

    }
    else
    {

    }
  }
}

void closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34[2];

  v34[1] = (uint64_t)&unk_1EECD4550;
  v8 = swift_dynamicCastObjCProtocolConditional();
  v9 = one-time initialization token for service;
  if (v8)
  {
    v10 = v8;
    v33 = a1;
    if (v9 != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    v12 = a4;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v16 = swift_slowAlloc();
      v34[0] = v16;
      *(_DWORD *)v15 = 136315394;
      swift_bridgeObjectRetain();
      v17 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      v19 = objc_msgSend(v12, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v20 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v13, v14, "Successfully fetched data cryptor for topic %s on session %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v16, -1, -1);
      MEMORY[0x1AF44981C](v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a5(v10);

  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    v23 = a4;
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v34[0] = v27;
      *(_DWORD *)v26 = 136315394;
      swift_bridgeObjectRetain();
      v28 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      v30 = objc_msgSend(v23, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v31 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v24, v25, "Failed to fetch data cryptor for topic %s on session %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v27, -1, -1);
      MEMORY[0x1AF44981C](v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

Swift::Void __swiftcall IDSGroupSessionProvider.requestEncryptionKeysForParticipants(_:)(Swift::OpaquePointer_optional a1)
{
  _QWORD *v1;
  NSObject *rawValue;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  rawValue = a1.value._rawValue;
  v3 = (*(uint64_t (**)(void *, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF0))(a1.value._rawValue, *(_QWORD *)&a1.is_nil);
  if (v3)
  {
    v4 = (void *)v3;
    if (one-time initialization token for service != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    v6 = v4;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v28 = v10;
      *(_DWORD *)v9 = 136315394;
      v11 = objc_msgSend(v6, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v12 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      if (rawValue)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
        v14 = String.init<A>(reflecting:)();
        v16 = v15;
      }
      else
      {
        v14 = 7104878;
        v16 = 0xE300000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v7, v8, "Session, %s, requesting encryption keys for: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v10, -1, -1);
      MEMORY[0x1AF44981C](v9, -1, -1);

      if (!rawValue)
        goto LABEL_18;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!rawValue)
        goto LABEL_18;
    }
    specialized _arrayForceCast<A, B>(_:)((uint64_t)rawValue);
    rawValue = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
LABEL_18:
    objc_msgSend(v6, sel_requestEncryptionKeyForParticipants_, rawValue);

    goto LABEL_21;
  }
  if (one-time initialization token for service != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.service);
  v27 = v1;
  rawValue = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(rawValue, v18))
  {

    return;
  }
  v19 = (uint8_t *)swift_slowAlloc();
  v20 = swift_slowAlloc();
  v28 = v20;
  *(_DWORD *)v19 = 136315138;
  v21 = *(_QWORD *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
  v22 = *(_QWORD *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
  if (v23)
  {
    v24 = String.init<A>(reflecting:)();
    v26 = v25;
  }
  else
  {
    v24 = 7104878;
    v26 = 0xE300000000000000;
  }
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1ACCCC000, rawValue, v18, "Unable to request encryption keys, no session for service %s", v19, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1AF44981C](v20, -1, -1);
  MEMORY[0x1AF44981C](v19, -1, -1);
LABEL_21:

}

uint64_t IDSGroupSessionProvider.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  __int128 v7;

  BYTE8(v7) = 0;
  _StringGuts.grow(_:)(43);
  v1._object = (void *)0x80000001ACF825B0;
  v1._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v1);
  v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID + 8);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3A657461747320;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  *(_QWORD *)&v7 = (*(unsigned __int8 (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
  _print_unlocked<A, B>(_:_:)();
  return *(_QWORD *)((char *)&v7 + 1);
}

unint64_t IDSGroupSessionProvider.idsJoinSessionOptions()()
{
  _QWORD *v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0CB0338];
  *(_OWORD *)(inited + 48) = xmmword_1ACF5CB20;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1ACF59E20;
  *(_QWORD *)(v4 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v4 + 56) = v6;
  v7 = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(_QWORD *)(inited + 96) = v7;
  v8 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  (*(void (**)(__int128 *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))(&v19);
  v9 = v20;
  v10 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, v20);
  v11 = MEMORY[0x1E0DEAFA0];
  (*(void (**)(_OWORD *__return_ptr, _QWORD, unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v10 + 32))(v18, MEMORY[0x1E0DEAFA0], 0xD000000000000010, 0x80000001ACF82940, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFC0], MEMORY[0x1E0DEAFA8], v9, v10);
  v12 = v18[0];
  if (LOBYTE(v18[0]) == 2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
    if ((v12 & 1) != 0)
    {
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;
      v20 = v11;
      LOBYTE(v19) = 1;
      outlined init with take of Any(&v19, v18);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v13, v15, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v8;
}

uint64_t IDSGroupSessionProvider.idsSessionCreationOptions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  __int128 v40;
  uint64_t v41;
  unint64_t v42;

  result = IDSGroupSessionProvider.idsDestinationsForLocalMember()();
  if (v1)
    return result;
  if (result)
    v3 = result;
  else
    v3 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v5;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v6;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID + 8);
  *(_QWORD *)(inited + 120) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = v8;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 136) = v9;
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  v11 = specialized Sequence.compactMap<A>(_:)(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v40 = v11;
  v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  *(_QWORD *)(inited + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestinationProtocol]);
  *(_QWORD *)(inited + 144) = v11;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 184) = v13;
  *(_QWORD *)(inited + 216) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 192) = 1;
  v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v42 = v14;
  if (!(v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_9;
LABEL_22:
    swift_bridgeObjectRelease();
    return v42;
  }
  swift_bridgeObjectRetain();
  v38 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v38)
    goto LABEL_22;
LABEL_9:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v15 = (void *)MEMORY[0x1AF448904](0, v3);
LABEL_12:
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v15, sel_destinationURIs);
    v17 = MEMORY[0x1E0DEA968];
    v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = specialized Collection.first.getter(v18);
    v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v24 = v23;
      v25 = (void *)MEMORY[0x1AF4480F4](v19, v21);
      swift_bridgeObjectRelease();
      v26 = objc_msgSend(v25, sel__stripFZIDPrefix);

      if (v26)
      {
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v29 = v28;

        v41 = v17;
        *(_QWORD *)&v40 = v27;
        *((_QWORD *)&v40 + 1) = v29;
        outlined init with take of Any(&v40, v39);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v42 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v39, v22, v24, isUniquelyReferenced_nonNull_native);
        v42 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        specialized Dictionary._Variant.removeValue(forKey:)(v22, v24, v39);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      goto LABEL_19;
    }
    if (one-time initialization token for service == -1)
      goto LABEL_16;
    goto LABEL_25;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(void **)(v3 + 32);
    swift_unknownObjectRetain();
    goto LABEL_12;
  }
  __break(1u);
LABEL_25:
  swift_once();
LABEL_16:
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.service);
  swift_unknownObjectRetain_n();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    *(_QWORD *)&v40 = v35;
    *(_DWORD *)v34 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
    v36 = String.init<A>(reflecting:)();
    *(_QWORD *)&v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v32, v33, "Failed to find destinationURI for localMember's IDSDestination: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v35, -1, -1);
    MEMORY[0x1AF44981C](v34, -1, -1);

LABEL_19:
    swift_unknownObjectRelease();
    return v42;
  }
  swift_unknownObjectRelease_n();

  return v42;
}

uint64_t IDSGroupSessionProvider.idsDestinationsForLocalMember()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void *v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t result;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  _BOOL4 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Swift::String v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember];
  if (!v2)
    return 0;
  v3 = v0;
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember + 8];
  type metadata accessor for AddressableMember();
  v5 = swift_dynamicCastClass();
  if (v5)
  {
    v6 = v5;
    swift_unknownObjectRetain();
    v7 = AddressableMember.idsDestination.getter();
    if (!v1)
    {
      v8 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1ACF59E40;
      *(_QWORD *)(v9 + 32) = v8;
      v113 = v9;
      specialized Array._endMutation()();
      v6 = v113;
      swift_unknownObjectRelease();
      return (uint64_t)v6;
    }
LABEL_87:
    swift_unknownObjectRelease();
    return (uint64_t)v6;
  }
  type metadata accessor for AccountMember();
  if (!swift_dynamicCastClass())
  {
    v31 = one-time initialization token for service;
    swift_unknownObjectRetain();
    if (v31 != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.service);
    v33 = v0;
    v6 = Logger.logObject.getter();
    v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v112._countAndFlagsBits = v36;
      *(_DWORD *)v35 = 136315138;
      v113 = v2;
      v114 = v4;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
      v37 = String.init<A>(reflecting:)();
      v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v112._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v6, v34, "Unknown type for localMember: %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v36, -1, -1);
      MEMORY[0x1AF44981C](v35, -1, -1);
    }
    else
    {

    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    v52 = 5;
    goto LABEL_44;
  }
  v10 = &v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service];
  v11 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24];
  v12 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32];
  __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service], v11);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
  swift_unknownObjectRetain();
  v14 = (void *)v13(v11, v12);
  if (!v14)
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    v6 = __swift_project_value_buffer(v39, (uint64_t)static Log.service);
    v40 = v3;
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc();
      v110 = swift_slowAlloc();
      v112._countAndFlagsBits = v110;
      *(_DWORD *)v43 = 136315394;
      v44 = *((_QWORD *)v10 + 3);
      v45 = *((_QWORD *)v10 + 4);
      __swift_project_boxed_opaque_existential_1(v10, v44);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 32))(v44, v45);
      if (v47)
      {
        v113 = v46;
        v114 = v47;
        v48 = String.init<A>(reflecting:)();
        v50 = v49;
      }
      else
      {
        v50 = 0xE300000000000000;
        v48 = 7104878;
      }
      v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v112._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v43 + 12) = 2080;
      v64 = *((_QWORD *)v10 + 3);
      v65 = *((_QWORD *)v10 + 4);
      __swift_project_boxed_opaque_existential_1(v10, v64);
      v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v64, v65);
      if (v66)
      {
        v113 = v66;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<IDSAccount>);
        v67 = String.init<A>(reflecting:)();
        v6 = v68;
      }
      else
      {
        v6 = 0xE300000000000000;
        v67 = 7104878;
      }
      v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, (unint64_t)v6, &v112._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v41, v42, "No iCloudAccount found while starting IDS Service service %s accounts %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v110, -1, -1);
      MEMORY[0x1AF44981C](v43, -1, -1);

    }
    else
    {

    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    v52 = 1;
LABEL_44:
    *v51 = v52;
    swift_willThrow();
    goto LABEL_87;
  }
  v107 = v14;
  v15 = objc_msgSend(v14, sel_handles);
  if (!v15)
  {
    if (one-time initialization token for service == -1)
    {
LABEL_33:
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Log.service);
      v55 = v107;
      v6 = Logger.logObject.getter();
      v56 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v113 = v58;
        *(_DWORD *)v57 = 136315138;
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
        v59 = v55;
        v60 = String.init<A>(reflecting:)();
        v112._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, v6, v56, "No handles on iCloudAccount %s", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v58, -1, -1);
        MEMORY[0x1AF44981C](v57, -1, -1);
      }
      else
      {

      }
      lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
      swift_allocError();
      v63 = 6;
LABEL_86:
      *v62 = v63;
      swift_willThrow();

      goto LABEL_87;
    }
LABEL_90:
    swift_once();
    goto LABEL_33;
  }
  v16 = v15;
  v106 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSHandle);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = MEMORY[0x1E0DEE9D8];
  v115 = MEMORY[0x1E0DEE9D8];
  if (!(v17 >> 62))
  {
    v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19)
      goto LABEL_11;
LABEL_46:
    swift_bridgeObjectRelease();
    v53 = MEMORY[0x1E0DEE9D8];
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19)
    goto LABEL_46;
LABEL_11:
  if (v19 < 1)
  {
    __break(1u);
    goto LABEL_90;
  }
  v20 = 0;
  v109 = v17 & 0xC000000000000001;
  v21 = v17;
  v22 = v19;
  do
  {
    if (v109)
      v23 = (id)MEMORY[0x1AF448904](v20, v17);
    else
      v23 = *(id *)(v17 + 8 * v20 + 32);
    v24 = v23;
    v25 = objc_msgSend(v23, sel_URI, v106);
    v26 = objc_msgSend(v25, sel_prefixedURI);

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    v113 = v27;
    v114 = v29;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = String.lowercased()();
    swift_bridgeObjectRelease();
    v112 = v30;
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v26) = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v20;
    v17 = v21;
  }
  while (v22 != v20);
  swift_bridgeObjectRelease();
  v53 = v115;
  v18 = MEMORY[0x1E0DEE9D8];
LABEL_47:
  v113 = v18;
  v69 = v53 < 0 || (v53 & 0x4000000000000000) != 0;
  v111 = v53;
  v108 = v69;
  if (!v69)
  {
    v70 = *(_QWORD *)(v53 + 16);
    swift_retain();
    if (v70)
      goto LABEL_52;
LABEL_64:
    swift_release();
    v84 = MEMORY[0x1E0DEE9D8];
    goto LABEL_65;
  }
  swift_retain();
  v70 = _CocoaArrayWrapper.endIndex.getter();
  if (!v70)
    goto LABEL_64;
LABEL_52:
  result = objc_opt_self();
  if (v70 >= 1)
  {
    v72 = (void *)result;
    v73 = 0;
    v74 = v53 & 0xC000000000000001;
    do
    {
      if (v74)
        v75 = (id)MEMORY[0x1AF448904](v73, v53);
      else
        v75 = *(id *)(v53 + 8 * v73 + 32);
      v76 = v75;
      v77 = objc_msgSend(v75, sel_URI, v106);
      v78 = objc_msgSend(v77, sel_prefixedURI);

      v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v81 = v80;

      v82 = (void *)MEMORY[0x1AF4480F4](v79, v81);
      swift_bridgeObjectRelease();
      v83 = objc_msgSend(v72, sel_destinationWithStringURI_isLightWeight_, v82, 1);

      if (v83)
      {
        MEMORY[0x1AF448268]();
        if (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v53 = v111;
      }
      ++v73;
    }
    while (v70 != v73);
    swift_release();
    v84 = v113;
LABEL_65:
    if (one-time initialization token for service != -1)
      swift_once();
    v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    v86 = Logger.logObject.getter();
    v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc();
      v89 = swift_slowAlloc();
      v113 = v89;
      *(_DWORD *)v88 = 136315138;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestination]);
      v90 = String.init<A>(reflecting:)();
      v112._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)&v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v86, v87, "Filtered destinations: %s", v88, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v89, -1, -1);
      MEMORY[0x1AF44981C](v88, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (v84 >> 62)
    {
      swift_bridgeObjectRetain();
      v92 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v108)
        goto LABEL_72;
    }
    else
    {
      v92 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v108)
      {
LABEL_72:
        swift_bridgeObjectRetain();
        v93 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
LABEL_75:
        swift_release();
        if (v92 == v93)
        {
          swift_bridgeObjectRetain();
          if (v84 >> 62)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
            v6 = _bridgeCocoaArray<A>(_:)();
            swift_bridgeObjectRelease_n();

            swift_unknownObjectRelease();
          }
          else
          {
            dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            return v84;
          }
          return (uint64_t)v6;
        }
        v94 = v107;
        swift_bridgeObjectRetain();
        v55 = v94;
        v6 = Logger.logObject.getter();
        v95 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v6, v95))
        {
          v96 = swift_slowAlloc();
          v97 = swift_slowAlloc();
          v113 = v97;
          *(_DWORD *)v96 = 136315394;
          v98 = objc_msgSend(v55, sel_handles);
          if (v98)
          {
            v99 = v98;
            v100 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v112._countAndFlagsBits = v100;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSHandle]);
            v101 = String.init<A>(reflecting:)();
            v103 = v102;
          }
          else
          {
            v101 = 7104878;
            v103 = 0xE300000000000000;
          }
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v103, (uint64_t *)&v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v96 + 12) = 2080;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestination]);
          v104 = String.init<A>(reflecting:)();
          v112._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, (uint64_t *)&v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v6, v95, "Mismatch during conversion: %s vs %s", (uint8_t *)v96, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v97, -1, -1);
          MEMORY[0x1AF44981C](v96, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
        swift_allocError();
        v63 = 5;
        goto LABEL_86;
      }
    }
    v93 = *(_QWORD *)(v111 + 16);
    goto LABEL_75;
  }
  __break(1u);
  return result;
}

uint64_t AddressableMember.idsDestination.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v1 = (id)TUCopyIDSCanonicalAddressForHandle();
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    v6 = (void *)MEMORY[0x1AF4480F4](v3, v5);
    swift_bridgeObjectRelease();
    v7 = objc_msgSend((id)objc_opt_self(), sel_destinationWithStringURI_isLightWeight_, v6, 1);

    return (uint64_t)v7;
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.service);
    v10 = v0;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v19 = v14;
      *(_DWORD *)v13 = 136315138;
      type metadata accessor for AddressableMember();
      v15 = v10;
      v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v11, v12, "Failed to generate destination for %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v14, -1, -1);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }
    else
    {

    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *v18 = 5;
    return swift_willThrow();
  }
}

uint64_t IDSGroupSessionProvider.iCloudAccountForService()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = &v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24];
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32];
  __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service], v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  if (!result)
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.service);
    v6 = v0;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v25 = v10;
      *(_DWORD *)v9 = 136315394;
      v12 = *((_QWORD *)v1 + 3);
      v11 = *((_QWORD *)v1 + 4);
      __swift_project_boxed_opaque_existential_1(v1, v12);
      (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
      v24 = v10;
      if (v13)
      {
        v14 = String.init<A>(reflecting:)();
        v16 = v15;
      }
      else
      {
        v16 = 0xE300000000000000;
        v14 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v9 + 12) = 2080;
      v18 = *((_QWORD *)v1 + 3);
      v17 = *((_QWORD *)v1 + 4);
      __swift_project_boxed_opaque_existential_1(v1, v18);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v17))
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<IDSAccount>);
        v19 = String.init<A>(reflecting:)();
        v21 = v20;
        v22 = v24;
      }
      else
      {
        v21 = 0xE300000000000000;
        v22 = v24;
        v19 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v7, v8, "No iCloudAccount found while starting session on service: %s accounts: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v22, -1, -1);
      MEMORY[0x1AF44981C](v9, -1, -1);
    }
    else
    {

    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *v23 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t IDSGroupSessionProvider.idsAccountForLocalMember()()
{
  uint8_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unint64_t, uint64_t);
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t i;
  id v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint8_t *v66;
  uint8_t *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  uint8_t *v86;
  uint8_t *v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  id v95;
  id v96;
  uint64_t v97;
  char v98[40];
  _BYTE v99[40];
  __int128 v100;
  uint64_t v101;
  _QWORD v102[11];
  uint64_t v103;

  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember];
  if (!v2)
  {
    v11 = IDSGroupSessionProvider.iCloudAccountForService()();
    if (!v1)
      return v11;
    return (uint64_t)v0;
  }
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember + 8];
  type metadata accessor for AddressableMember();
  v90 = v2;
  v97 = swift_dynamicCastClass();
  if (v97)
  {
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24];
    v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32];
    v86 = v0;
    v87 = &v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service];
    __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service], v4);
    v6 = *(uint64_t (**)(unint64_t, uint64_t))(v5 + 8);
    swift_unknownObjectRetain_n();
    result = v6(v4, v5);
    if (result)
    {
      v8 = result;
      if ((result & 0xC000000000000001) != 0)
      {
        v4 = __CocoaSet.makeIterator()();
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
        lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type IDSAccount and conformance NSObject, &lazy cache variable for type metadata for IDSAccount);
        Set.Iterator.init(_cocoa:)();
        v8 = v102[5];
        v89 = v102[6];
        v9 = v102[7];
        v3 = v102[8];
        v10 = v102[9];
      }
      else
      {
        v3 = 0;
        v12 = -1 << *(_BYTE *)(result + 32);
        v89 = result + 56;
        v13 = ~v12;
        v14 = -v12;
        if (v14 < 64)
          v15 = ~(-1 << v14);
        else
          v15 = -1;
        v10 = v15 & *(_QWORD *)(result + 56);
        v9 = v13;
      }
      v88 = (unint64_t)(v9 + 64) >> 6;
      v16 = MEMORY[0x1E0DEE9D8];
      v91 = v8;
      while (1)
      {
        if (v8 < 0)
        {
          v19 = __CocoaSet.Iterator.next()();
          if (!v19)
            goto LABEL_82;
          *(_QWORD *)&v100 = v19;
          type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v20 = (id)v102[0];
          swift_unknownObjectRelease();
          v18 = v3;
          v93 = v10;
        }
        else
        {
          if (v10)
          {
            v93 = (v10 - 1) & v10;
            v17 = __clz(__rbit64(v10)) | (v3 << 6);
            v18 = v3;
          }
          else
          {
            v21 = v3 + 1;
            if (__OFADD__(v3, 1))
              goto LABEL_98;
            if (v21 >= v88)
              goto LABEL_82;
            v22 = *(_QWORD *)(v89 + 8 * v21);
            v18 = v3 + 1;
            if (!v22)
            {
              v18 = v3 + 2;
              if (v3 + 2 >= v88)
                goto LABEL_82;
              v22 = *(_QWORD *)(v89 + 8 * v18);
              if (!v22)
              {
                v18 = v3 + 3;
                if (v3 + 3 >= v88)
                  goto LABEL_82;
                v22 = *(_QWORD *)(v89 + 8 * v18);
                if (!v22)
                {
                  v18 = v3 + 4;
                  if (v3 + 4 >= v88)
                    goto LABEL_82;
                  v22 = *(_QWORD *)(v89 + 8 * v18);
                  if (!v22)
                  {
                    v23 = v3 + 5;
                    while (v88 != v23)
                    {
                      v22 = *(_QWORD *)(v89 + 8 * v23++);
                      if (v22)
                      {
                        v18 = v23 - 1;
                        goto LABEL_34;
                      }
                    }
LABEL_82:
                    outlined consume of [String : ()].Iterator._Variant();
                    if (one-time initialization token for service != -1)
                      swift_once();
                    v65 = type metadata accessor for Logger();
                    v0 = (uint8_t *)__swift_project_value_buffer(v65, (uint64_t)static Log.service);
                    v66 = v86;
                    swift_unknownObjectRetain_n();
                    v67 = v66;
                    v68 = Logger.logObject.getter();
                    v69 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v68, v69))
                    {
                      v70 = swift_slowAlloc();
                      v71 = swift_slowAlloc();
                      v103 = v71;
                      *(_DWORD *)v70 = 136315650;
                      outlined init with copy of UserNotificationCenter((uint64_t)v87, (uint64_t)v102);
                      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v102, (uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
                      v96 = (id)v71;
                      if (v101)
                      {
                        outlined init with take of BackgroundSessionManagerDataSource(&v100, (uint64_t)v99);
                        outlined init with copy of UserNotificationCenter((uint64_t)v99, (uint64_t)v98);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSServiceProtocol);
                        v72 = String.init<A>(reflecting:)();
                        v74 = v73;
                        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v99);
                      }
                      else
                      {
                        v74 = 0xE300000000000000;
                        v72 = 7104878;
                      }
                      outlined destroy of UUID?((uint64_t)v102, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
                      v102[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, &v103);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();

                      *(_WORD *)(v70 + 12) = 2080;
                      v76 = *((_QWORD *)v87 + 3);
                      v75 = *((_QWORD *)v87 + 4);
                      __swift_project_boxed_opaque_existential_1(v87, v76);
                      v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v76, v75);
                      if (v77)
                      {
                        v102[0] = v77;
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<IDSAccount>);
                        v78 = String.init<A>(reflecting:)();
                        v80 = v79;
                      }
                      else
                      {
                        v80 = 0xE300000000000000;
                        v78 = 7104878;
                      }
                      v102[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v80, &v103);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();

                      *(_WORD *)(v70 + 22) = 2080;
                      v102[0] = *(_QWORD *)(v97 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
                      v81 = (void *)v102[0];
                      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
                      v82 = v81;
                      v83 = String.init<A>(reflecting:)();
                      v0 = (uint8_t *)v84;
                      v102[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v103);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease_n();
                      _os_log_impl(&dword_1ACCCC000, v68, v69, "No iCloudAccount found while starting IDS Service service %s accounts %s idsDestination: %s", (uint8_t *)v70, 0x20u);
                      swift_arrayDestroy();
                      MEMORY[0x1AF44981C](v96, -1, -1);
                      MEMORY[0x1AF44981C](v70, -1, -1);
                    }
                    else
                    {

                      swift_unknownObjectRelease_n();
                    }

                    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
                    swift_allocError();
                    *v85 = 1;
                    swift_willThrow();
                    swift_unknownObjectRelease();
LABEL_94:
                    swift_unknownObjectRelease();
                    return (uint64_t)v0;
                  }
                }
              }
            }
LABEL_34:
            v93 = (v22 - 1) & v22;
            v17 = __clz(__rbit64(v22)) + (v18 << 6);
          }
          v20 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v17);
        }
        if (!v20)
          goto LABEL_82;
        v92 = v18;
        v95 = v20;
        result = (uint64_t)objc_msgSend(v20, sel_aliasStrings);
        if (!result)
        {
          __break(1u);
LABEL_101:
          __break(1u);
          break;
        }
        v24 = (void *)result;
        v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v102[0] = v16;
        v26 = *(_QWORD *)(v25 + 16);
        if (v26)
        {
          v27 = (void *)objc_opt_self();
          swift_bridgeObjectRetain();
          v28 = (uint64_t *)(v25 + 40);
          do
          {
            v30 = *(v28 - 1);
            v29 = *v28;
            swift_bridgeObjectRetain();
            v31 = (void *)MEMORY[0x1AF4480F4](v30, v29);
            v32 = objc_msgSend(v27, sel_normalizedHandleWithDestinationID_, v31);

            v33 = swift_bridgeObjectRelease();
            if (v32)
            {
              MEMORY[0x1AF448268](v33);
              if (*(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            v28 += 2;
            --v26;
          }
          while (v26);
          swift_bridgeObjectRelease();
          v34 = v102[0];
          v16 = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          v34 = v16;
        }
        swift_bridgeObjectRelease();
        result = (uint64_t)objc_msgSend(v95, sel_pseudonyms);
        if (!result)
          goto LABEL_101;
        v35 = (void *)result;
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSPseudonym);
        v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v102[0] = v16;
        if (v4 >> 62)
        {
          swift_bridgeObjectRetain();
          v36 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          v36 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        v94 = v34;
        if (v36)
        {
          v37 = objc_opt_self();
          if (v36 < 1)
            goto LABEL_97;
          v38 = (void *)v37;
          for (i = 0; i != v36; ++i)
          {
            if ((v4 & 0xC000000000000001) != 0)
              v40 = (id)MEMORY[0x1AF448904](i, v4);
            else
              v40 = *(id *)(v4 + 8 * i + 32);
            v41 = v40;
            v42 = objc_msgSend(v40, sel_URI);
            v43 = objc_msgSend(v42, sel_prefixedURI);

            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v46 = v45;

            v47 = (void *)MEMORY[0x1AF4480F4](v44, v46);
            swift_bridgeObjectRelease();
            v48 = objc_msgSend(v38, sel_normalizedHandleWithDestinationID_, v47);

            if (v48)
            {
              MEMORY[0x1AF448268]();
              if (*(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          swift_bridgeObjectRelease();
          v49 = v102[0];
          v2 = v90;
        }
        else
        {
          swift_bridgeObjectRelease();
          v49 = v16;
        }
        swift_bridgeObjectRelease();
        v102[0] = v94;
        specialized Array.append<A>(contentsOf:)(v49);
        v4 = v94;
        if (v94 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v50 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v50)
          {
LABEL_65:
            v51 = OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle;
            v3 = 4;
            while (1)
            {
              v52 = (v94 & 0xC000000000000001) != 0
                  ? (id)MEMORY[0x1AF448904](v3 - 4, v94)
                  : *(id *)(v94 + 8 * v3);
              v53 = v52;
              v54 = v3 - 3;
              if (__OFADD__(v3 - 4, 1))
                break;
              v55 = objc_msgSend(v52, sel_isEquivalentToHandle_, *(_QWORD *)(v97 + v51));

              if (v55)
              {
                swift_bridgeObjectRelease_n();
                swift_unknownObjectRelease_n();
                outlined consume of [String : ()].Iterator._Variant();
                return (uint64_t)v95;
              }
              ++v3;
              if (v54 == v50)
                goto LABEL_15;
            }
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
            goto LABEL_99;
          }
        }
        else
        {
          v50 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v50)
            goto LABEL_65;
        }
LABEL_15:

        swift_bridgeObjectRelease_n();
        v3 = v92;
        v10 = v93;
        v8 = v91;
        v16 = MEMORY[0x1E0DEE9D8];
      }
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for AccountMember();
    if (!swift_dynamicCastClass())
    {
      v4 = (unint64_t)v0;
      v56 = one-time initialization token for service;
      swift_unknownObjectRetain();
      if (v56 != -1)
LABEL_99:
        swift_once();
      v57 = type metadata accessor for Logger();
      v0 = (uint8_t *)__swift_project_value_buffer(v57, (uint64_t)static Log.service);
      v58 = (id)v4;
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v0 = (uint8_t *)swift_slowAlloc();
        v61 = swift_slowAlloc();
        *(_QWORD *)&v100 = v61;
        *(_DWORD *)v0 = 136315138;
        v102[0] = v2;
        v102[1] = v3;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
        v62 = String.init<A>(reflecting:)();
        v102[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, v59, v60, "Unknown type for localMember: %s", v0, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v61, -1, -1);
        MEMORY[0x1AF44981C](v0, -1, -1);
      }
      else
      {

      }
      lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
      swift_allocError();
      *v64 = 5;
      swift_willThrow();
      goto LABEL_94;
    }
    swift_unknownObjectRetain();
    v0 = (uint8_t *)IDSGroupSessionProvider.iCloudAccountForService()();
    swift_unknownObjectRelease();
    return (uint64_t)v0;
  }
  return result;
}

void IDSGroupSessionProvider.registerQRPlugin()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  NSObject *oslog;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();

  if (v2)
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.service);
    oslog = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ACCCC000, oslog, v4, "IDSGroupSessionProvider. We already have a virtual participant identifier. Not re-registering QR plugin", v5, 2u);
      MEMORY[0x1AF44981C](v5, -1, -1);
    }

  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.service);
    v7 = v0;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v28 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = (void *)(*(uint64_t (**)(void))((*v1 & *v7) + 0xF0))();
      if (v12)
      {
        v13 = v12;
        v14 = objc_msgSend(v12, sel_sessionID);

        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;

        v29 = v15;
        v30 = v17;
        v18 = String.init<A>(reflecting:)();
        v20 = v19;
      }
      else
      {
        v20 = 0xE300000000000000;
        v18 = 7104878;
      }
      v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v8, v9, "Registering QR plugin on %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v11, -1, -1);
      MEMORY[0x1AF44981C](v10, -1, -1);

    }
    else
    {

    }
    v21 = (*(uint64_t (**)(void))((*v1 & *v7) + 0xF0))();
    if (v21)
    {
      v22 = (void *)v21;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1ACF59E20;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v24;
      v25 = MEMORY[0x1E0DEA968];
      AnyHashable.init<A>(_:)();
      *(_QWORD *)(inited + 96) = v25;
      *(_QWORD *)(inited + 72) = 0x627553627550;
      *(_QWORD *)(inited + 80) = 0xE600000000000000;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v22, sel_registerPluginWithOptions_, isa);

    }
  }
}

uint64_t IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[28] = a1;
  v2[29] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t IDSGroupSessionProvider.requestParticipant(for:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  void *v17;
  uint8_t *v18;
  _QWORD *v19;
  id v20;
  _BYTE *v21;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 248) = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 224);
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v0 + 216) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "[Translation] Requested translated participant for id %llu", v5, 0xCu);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }

  v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 232)) + 0xF0))();
  *(_QWORD *)(v0 + 256) = v6;
  if (v6)
  {
    v7 = (void *)v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1ACF59E40;
    *(NSNumber *)(v8 + 32) = UInt64._bridgeToObjectiveC()();
    specialized Array._endMutation()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 264) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v0 + 208;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = IDSGroupSessionProvider.requestParticipant(for:);
    v10 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v11 = (_QWORD *)(v0 + 80);
    v11[1] = 0x40000000;
    v11[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [NSNumber : String];
    v11[3] = &block_descriptor_1;
    v11[4] = v10;
    objc_msgSend(v7, sel_requestURIsForParticipantIDs_completionHandler_, isa, v11);
    return swift_continuation_await();
  }
  else
  {
    v13 = *(id *)(v0 + 232);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.fault.getter();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(void **)(v0 + 232);
    if (v16)
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v18 = 138412290;
      *(_QWORD *)(v0 + 200) = v17;
      v20 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v17;

      _os_log_impl(&dword_1ACCCC000, v14, v15, "No current GroupSession found on %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v19, -1, -1);
      MEMORY[0x1AF44981C](v18, -1, -1);
    }
    else
    {

    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *v21 = 3;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 272) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 264);
  v2 = *(void **)(v0 + 256);
  swift_willThrow();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void IDSGroupSessionProvider.requestParticipant(for:)()
{
  uint64_t v0;
  uint64_t v1;
  NSNumber v2;
  Class isa;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;

  v1 = *(_QWORD *)(v0 + 208);

  v2.super.super.isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  isa = v2.super.super.isa;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2.super.super.isa);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v4);
      v7 = *v6;
      v8 = v6[1];
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      v9 = (void *)MEMORY[0x1AF4480F4](v7, v8);
      swift_bridgeObjectRelease();
      v10 = objc_msgSend(v9, sel__stripFZIDPrefix);

      if (!v10)
        goto LABEL_36;
      v11 = *(void **)(v0 + 256);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

LABEL_32:
      swift_task_dealloc();
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 224), v12, v14);
      return;
    }
  }

  swift_bridgeObjectRelease();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1ACCCC000, v15, v16, "[Translation] Checking against stored list of participants for participant incase it is present", v17, 2u);
    MEMORY[0x1AF44981C](v17, -1, -1);
  }
  v18 = *(_QWORD **)(v0 + 232);

  v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v20 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x148))();
  v21 = 0;
  v22 = v20 + 56;
  v23 = -1;
  v24 = -1 << *(_BYTE *)(v20 + 32);
  if (-v24 < 64)
    v23 = ~(-1 << -(char)v24);
  v25 = v23 & *(_QWORD *)(v20 + 56);
  v26 = (unint64_t)(63 - v24) >> 6;
  while (v25)
  {
    v27 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    v28 = v27 | (v21 << 6);
LABEL_11:
    v29 = *(_QWORD *)(v20 + 48);
    if (*(_QWORD *)(v29 + 24 * v28) == *(_QWORD *)(v0 + 224))
    {
      v33 = *(void **)(v0 + 256);
      v34 = *(_QWORD **)(v0 + 232);
      v35 = *(_QWORD *)(v0 + 240);
      v36 = v29 + 24 * v28;
      v12 = *(_QWORD *)(v36 + 8);
      v14 = *(_QWORD *)(v36 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      static TaskPriority.background.getter();
      v37 = type metadata accessor for TaskPriority();
      v38 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v35, 0, 1, v37);
      (*(void (**)(uint64_t))((*v19 & *v34) + 0x178))(v38);
      outlined init with take of BackgroundSessionManagerDataSource((__int128 *)(v0 + 160), v0 + 120);
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = 0;
      *(_QWORD *)(v39 + 24) = 0;
      outlined init with take of BackgroundSessionManagerDataSource((__int128 *)(v0 + 120), v39 + 32);
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #2 in IDSGroupSessionProvider.requestParticipant(for:), v39);
      swift_release();

      goto LABEL_32;
    }
  }
  v30 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v30 >= v26)
    goto LABEL_33;
  v31 = *(_QWORD *)(v22 + 8 * v30);
  ++v21;
  if (v31)
    goto LABEL_30;
  v21 = v30 + 1;
  if (v30 + 1 >= v26)
    goto LABEL_33;
  v31 = *(_QWORD *)(v22 + 8 * v21);
  if (v31)
    goto LABEL_30;
  v21 = v30 + 2;
  if (v30 + 2 >= v26)
    goto LABEL_33;
  v31 = *(_QWORD *)(v22 + 8 * v21);
  if (v31)
    goto LABEL_30;
  v21 = v30 + 3;
  if (v30 + 3 >= v26)
    goto LABEL_33;
  v31 = *(_QWORD *)(v22 + 8 * v21);
  if (v31)
    goto LABEL_30;
  v21 = v30 + 4;
  if (v30 + 4 >= v26)
    goto LABEL_33;
  v31 = *(_QWORD *)(v22 + 8 * v21);
  if (v31)
  {
LABEL_30:
    v25 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v21 << 6);
    goto LABEL_11;
  }
  v32 = v30 + 5;
  if (v32 >= v26)
  {
LABEL_33:
    v40 = *(void **)(v0 + 256);
    swift_release();
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *v41 = 7;
    swift_willThrow();

    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v31 = *(_QWORD *)(v22 + 8 * v32);
  if (v31)
  {
    v21 = v32;
    goto LABEL_30;
  }
  while (1)
  {
    v21 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v21 >= v26)
      goto LABEL_33;
    v31 = *(_QWORD *)(v22 + 8 * v21);
    ++v32;
    if (v31)
      goto LABEL_30;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t closure #2 in IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in IDSGroupSessionProvider.requestParticipant(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, double);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0xD00000000000001DLL;
    v8 = 0x80000001ACF7E840;
  }
  v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000016, 0x80000001ACF827D0, 0xD000000000000047, 0x80000001ACF828F0, v6, v8, v2, v3);
  *(_QWORD *)(v0 + 24) = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    v11 = v1[3];
    v10 = v1[4];
    __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 16), v11);
    v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v10 + 24) + *(_QWORD *)(v10 + 24));
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v12;
    *v12 = v0;
    v12[1] = closure #2 in IDSGroupSessionProvider.requestParticipant(for:);
    return v18(v9, v11, v10, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1ACCCC000, v15, v16, "[Translation] Failed to generate signature for Participant translation", v17, 2u);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

id IDSGroupSessionProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IDSGroupSessionProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.delegate.getter in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0xC0))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.delegate.setter in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0xC8))();
}

void (*protocol witness for IDSGroupSessionProviderProtocol.delegate.modify in conformance IDSGroupSessionProvider(_QWORD *a1))(_QWORD *a1)
{
  _QWORD **v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v1) + 0xD0))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.participantIdentifier.getter in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x108))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.virtualParticipant.getter in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x140))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.groupID.getter in conformance IDSGroupSessionProvider()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.init(groupID:members:localMember:service:targetQueue:abcReporter:) in conformance IDSGroupSessionProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 448))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.start() in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x1D0))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.leave() in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x1D8))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.updateMembers(_:) in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x1F0))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestDataCryptor(forTopic:completion:) in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x1F8))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestEncryptionKeysForParticipants(_:) in conformance IDSGroupSessionProvider()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x200))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestParticipant(for:) in conformance IDSGroupSessionProvider(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & **v1) + 0x238);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for IDSGroupSessionProviderProtocol.requestParticipant(for:) in conformance IDSGroupSessionProvider;
  return v7(a1);
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestParticipant(for:) in conformance IDSGroupSessionProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *v4;
  v9 = swift_task_dealloc();
  if (!v3)
  {
    v9 = a1;
    v10 = a2;
    v11 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v9, v10, v11);
}

void IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)(void *a1, void *a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  os_log_type_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  id v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE v52[12];
  int v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  __int128 v58[2];
  uint64_t v59[5];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v57 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v52[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(void **)&v4[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.service);
  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = v17;
  v21 = v18;
  v22 = a3;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    v53 = v24;
    v54 = v4;
    v25 = swift_slowAlloc();
    v26 = (_QWORD *)swift_slowAlloc();
    v56 = swift_slowAlloc();
    v59[0] = v56;
    *(_DWORD *)v25 = 138412802;
    *(_QWORD *)&v58[0] = v20;
    v27 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v55 = v26;
    *v26 = v20;

    *(_WORD *)(v25 + 12) = 2080;
    *(_QWORD *)&v58[0] = v21;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSGroupSessionParticipantUpdate);
    v28 = v21;
    v29 = String.init<A>(reflecting:)();
    *(_QWORD *)&v58[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    if (a3)
    {
      *(_QWORD *)&v58[0] = a3;
      v31 = a3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v32 = String.init<A>(reflecting:)();
      v34 = v33;
    }
    else
    {
      v34 = 0xE300000000000000;
      v32 = 7104878;
    }
    v4 = v54;
    v35 = v53;
    *(_QWORD *)&v58[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v23, v35, "IDSGroupSessionProvider: sessionDidJoinGroup %@ participantUpdate %s error %s", (uint8_t *)v25, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v36 = v55;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v36, -1, -1);
    v37 = v56;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v37, -1, -1);
    MEMORY[0x1AF44981C](v25, -1, -1);
  }
  else
  {

  }
  if (_TUIsInternalInstall())
  {
    v38 = objc_msgSend(v21, sel_participantDestinationURI);
    v39 = objc_msgSend(v38, sel_tokenFreeURI);

    v40 = objc_msgSend(v39, sel_unprefixedURI);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    v44 = type metadata accessor for TaskPriority();
    v45 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56);
    v46 = (uint64_t)v57;
    v45(v57, 1, 1, v44);
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = 0;
    v47[3] = 0;
    v47[4] = v4;
    v47[5] = v21;
    v47[6] = v41;
    v47[7] = v43;
    v48 = v21;
    v49 = v4;
    v50 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v46, (uint64_t)&async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:), (uint64_t)v47);
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v49) + 0x178))(v59);
    v45((_BYTE *)v46, 1, 1, v44);
    outlined init with copy of UserNotificationCenter((uint64_t)v59, (uint64_t)v58);
    v51 = (_QWORD *)swift_allocObject();
    v51[2] = 0;
    v51[3] = 0;
    v51[4] = v50;
    v51[5] = 0xD00000000000002FLL;
    v51[7] = 0;
    v51[8] = 0;
    v51[6] = 0x80000001ACF82640;
    outlined init with take of BackgroundSessionManagerDataSource(v58, (uint64_t)(v51 + 9));
    swift_retain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v46, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v51);
    swift_release();
    outlined destroy of UUID?(v46, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  }
  IDSGroupSessionProvider.registerQRPlugin()();
}

uint64_t closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(id);

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[8] = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1ACCCC000, v2, v3, "[ParticipantID Verification] Verifying that the participantDestinationURI matches the QRParticipantID we joined with", v4, 2u);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }
  v6 = (_QWORD *)v0[4];
  v5 = (void *)v0[5];

  v7 = objc_msgSend(v5, sel_participantIdentifier);
  v8 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x238);
  v11 = (uint64_t (*)(id))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:);
  return v11(v7);
}

{
  _QWORD *v0;
  BOOL v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17[2];

  v1 = v0[10] == v0[6] && v0[11] == v0[7];
  if (v1 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ACCCC000, v2, v3, "[ParticipantID Verification] Successfully matched.", v4, 2u);
      MEMORY[0x1AF44981C](v4, -1, -1);
    }

    v5 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.fault.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = v0[11];
    if (v8)
    {
      v10 = v0[10];
      v11 = v0[7];
      v16 = v0[6];
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v17[0] = v13;
      *(_DWORD *)v12 = 136315394;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v11, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v6, v7, "[ParticipantID Verification] Detected invalid participantID mismatch on local join. Joined with QRParticipantID for %s when trying to join with handle: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v13, -1, -1);
      MEMORY[0x1AF44981C](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *v14 = 8;
    swift_willThrow();
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v5 = *v4;
  *(_QWORD *)(v5 + 80) = a2;
  *(_QWORD *)(v5 + 88) = a3;
  swift_task_dealloc();
  if (v3)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return swift_task_switch();
}

void IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(uint64_t a1, uint64_t a2)
{
  specialized IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(a2, "IDSGroupSessionProvider: participantDidJoinGroupWithInfo %s");
}

void IDSGroupSessionProvider.session(_:participantDidLeaveGroupWithInfo:)(uint64_t a1, uint64_t a2)
{
  specialized IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(a2, "IDSGroupSessionProvider: participantDidLeaveGroupWithInfo %s");
}

uint64_t @objc IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(void *a1, uint64_t a2, void *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  id v9;
  id v10;

  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a3;
  v10 = a1;
  specialized IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(v8, a5);

  return swift_bridgeObjectRelease();
}

void IDSGroupSessionProvider.groupSessionDidTerminate(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.service);
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v18 = (uint64_t)v10;
    v19 = v14;
    *(_DWORD *)v13 = 136315138;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
    v15 = v10;
    v16 = String.init<A>(reflecting:)();
    v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v11, v12, "IDSGroupSessionProvider: groupSessionDidTerminate %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v14, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);

  }
  else
  {

  }
}

void IDSGroupSessionProvider.groupSessionEnded(_:with:error:)(void *a1, int a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.service);
  v15 = a1;
  v16 = a3;
  v17 = v15;
  v18 = a3;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v36 = (uint64_t)v17;
    v37 = v35;
    *(_DWORD *)v21 = 136315650;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
    v22 = v17;
    v23 = String.init<A>(reflecting:)();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    LODWORD(v36) = a2;
    type metadata accessor for IDSSessionEndedReason(0);
    v25 = String.init<A>(reflecting:)();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    if (a3)
    {
      v36 = (uint64_t)a3;
      v27 = a3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v28 = String.init<A>(reflecting:)();
      v30 = v29;
    }
    else
    {
      v30 = 0xE300000000000000;
      v28 = 7104878;
    }
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v19, v20, "IDSGroupSessionProvider: groupSessionEnded %s reason: %s error %s", (uint8_t *)v21, 0x20u);
    v31 = v35;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v31, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);
  }
  else
  {

  }
  v32 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x1B0);
  if (a3)
  {
    v33 = a3;
    v32(3);

  }
  else
  {
    v32(2);
  }
}

void IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2)
{
  specialized IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(a2);
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, double);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v8 = 0x80000001ACF7E840;
    v6 = 0xD00000000000001DLL;
  }
  v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000014, 0x80000001ACF82840, 0xD00000000000001DLL, 0x80000001ACF82860, v6, v8, v2, v3);
  *(_QWORD *)(v0 + 24) = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    v11 = v1[3];
    v10 = v1[4];
    __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 16), v11);
    v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v10 + 24) + *(_QWORD *)(v10 + 24));
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v12;
    *v12 = v0;
    v12[1] = closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    return v18(v9, v11, v10, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Failed to generate signature for VirtualParticipantID", v17, 2u);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, double);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0xD00000000000001DLL;
    v8 = 0x80000001ACF7E840;
  }
  v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000012, 0x80000001ACF828B0, 0xD00000000000001BLL, 0x80000001ACF828D0, v6, v8, v2, v3);
  *(_QWORD *)(v0 + 24) = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    v11 = v1[3];
    v10 = v1[4];
    __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 16), v11);
    v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v10 + 24) + *(_QWORD *)(v10 + 24));
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v12;
    *v12 = v0;
    v12[1] = closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    return v18(v9, v11, v10, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Failed to generate signature for LocalParticipantID", v17, 2u);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t @objc IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  id v9;
  id v10;

  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a3;
  v10 = a1;
  a5(v8);

  return swift_bridgeObjectRelease();
}

uint64_t IDSGroupSessionProvider.sessionDidLeaveGroup(_:error:)(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.service);
  v13 = a1;
  v14 = a2;
  v15 = v13;
  v16 = a2;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v29 = (uint64_t)v15;
    v30 = v20;
    *(_DWORD *)v19 = 136315394;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
    v21 = v15;
    v22 = String.init<A>(reflecting:)();
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    if (a2)
    {
      v29 = (uint64_t)a2;
      v24 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v25 = String.init<A>(reflecting:)();
      v27 = v26;
    }
    else
    {
      v27 = 0xE300000000000000;
      v25 = 7104878;
    }
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v17, v18, "IDSGroupSessionProvider: sessionDidLeaveGroup %s, error: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x1B0))(2);
}

void IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2)
{
  specialized IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)(a2);
}

uint64_t IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(a2, a3);
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;

  *(_DWORD *)(v5 + 60) = a5;
  *(_QWORD *)(v5 + 32) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, double);

  v1 = 0xD00000000000001DLL;
  v2 = *(_DWORD *)(v0 + 60);
  v3 = *(_QWORD **)(v0 + 32);
  v4 = v3[3];
  v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  _StringGuts.grow(_:)(44);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v6._countAndFlagsBits = 0xD00000000000002ALL;
  v6._object = (void *)0x80000001ACF82810;
  String.append(_:)(v6);
  *(_DWORD *)(v0 + 56) = v2;
  type metadata accessor for IDSGroupSessionEncryptionControllerRejectionReason(0);
  _print_unlocked<A, B>(_:_:)();
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v10 = objc_msgSend(v9, sel_bundleIdentifier);

  if (v10)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

  }
  else
  {
    v12 = 0x80000001ACF7E840;
  }
  v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 16))(0x766F63655279654BLL, 0xEB00000000797265, v7, v8, v1, v12, v4, v5);
  *(_QWORD *)(v0 + 40) = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    v15 = v3[3];
    v14 = v3[4];
    __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 32), v15);
    v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v14 + 24) + *(_QWORD *)(v14 + 24));
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v16;
    *v16 = v0;
    v16[1] = closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:);
    return v22(v13, v15, v14, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.abcReporter);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1ACCCC000, v19, v20, "[KeyRecovery] Failed to generate signature for key recovery", v21, 2u);
      MEMORY[0x1AF44981C](v21, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(uint64_t a1, unint64_t a2, char a3)
{
  return specialized IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(a2, a3);
}

void closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(void **a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  _QWORD *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD *v29;
  uint8_t *v30;
  __int128 v31[2];
  __int128 v32[2];
  _QWORD *v33;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = objc_msgSend(v9, sel_participantURI);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v9, sel_participantIdentifier);
    v13 = objc_msgSend(v11, sel__stripFZIDPrefix);

    if (v13)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

      *a3 = v12;
      a3[1] = v14;
      a3[2] = v16;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.service);
    v18 = v9;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v33 = a2;
      v21 = (uint8_t *)swift_slowAlloc();
      v29 = (_QWORD *)swift_slowAlloc();
      v30 = v21;
      *(_DWORD *)v21 = 138412290;
      v28[1] = v21 + 4;
      *(_QWORD *)&v32[0] = v18;
      v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v23 = v29;
      *v29 = v18;

      a2 = v33;
      v24 = v30;
      _os_log_impl(&dword_1ACCCC000, v19, v20, "Failed to fetch participantURI for %@", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v23, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);

    }
    else
    {

    }
    static TaskPriority.background.getter();
    v25 = type metadata accessor for TaskPriority();
    v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 0, 1, v25);
    (*(void (**)(__int128 *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x178))(v32, v26);
    outlined init with take of BackgroundSessionManagerDataSource(v32, (uint64_t)v31);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)(v27 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(v31, v27 + 32);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:), v27);
    swift_release();
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

uint64_t closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, double);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0xD00000000000001DLL;
    v8 = 0x80000001ACF7E840;
  }
  v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000016, 0x80000001ACF827D0, 0xD000000000000018, 0x80000001ACF827F0, v6, v8, v2, v3);
  *(_QWORD *)(v0 + 24) = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    v11 = v1[3];
    v10 = v1[4];
    __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 16), v11);
    v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))(**(int **)(v10 + 24) + *(_QWORD *)(v10 + 24));
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v12;
    *v12 = v0;
    v12[1] = closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    return v18(v9, v11, v10, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Failed to generate signature for Participant translation", v17, 2u);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt64 *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _BYTE v17[16];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v14 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v2;
    if (!v15)
    {
      v2 = v14 + 1;
      if (v14 + 1 >= v7)
        return swift_release();
      v15 = *(_QWORD *)(v3 + 8 * v2);
      if (!v15)
      {
        v2 = v14 + 2;
        if (v14 + 2 >= v7)
          return swift_release();
        v15 = *(_QWORD *)(v3 + 8 * v2);
        if (!v15)
        {
          v2 = v14 + 3;
          if (v14 + 3 >= v7)
            return swift_release();
          v15 = *(_QWORD *)(v3 + 8 * v2);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v15 - 1) & v15;
    v9 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_5:
    v10 = (Swift::UInt64 *)(*(_QWORD *)(v1 + 48) + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v17, v11, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v7)
    return swift_release();
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v2 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v2);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1AF448910](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1AF448910](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for UUID();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [IDSDestinationProtocol] and conformance [A], &demangling cache variable for type metadata for [IDSDestinationProtocol], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestinationProtocol]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [TUHandle] and conformance [A], &demangling cache variable for type metadata for [TUHandle], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUHandle]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  _QWORD *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;

  if (a1 >> 62)
    goto LABEL_19;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    for (i = 4; ; ++i)
    {
      v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1AF448904](i - 4, a1) : *(id *)(a1 + 8 * i);
      v9 = v8;
      v10 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v8;
      closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(&v19, a2, &v17);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }

      v11 = v18;
      if (v18)
      {
        v16 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v13 = v5[2];
        v12 = v5[3];
        if (v13 >= v12 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
        v5[2] = v13 + 1;
        v7 = &v5[3 * v13];
        *((_OWORD *)v7 + 2) = v16;
        v7[6] = v11;
      }
      if (v10 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

id specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  char *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  objc_class *v31;
  id v32;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  objc_super v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _UNKNOWN **v46;

  v39 = a8;
  v35 = a7;
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v37 = *(_QWORD *)(v15 - 8);
  v38 = v15;
  MEMORY[0x1E0C80A78](v15);
  v36 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v17);
  v18 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupSession] = 0;
  v19 = &v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults];
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((_QWORD *)v19 + 4) = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_currentPlugins] = MEMORY[0x1E0DEE9D8];
  v20 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_participants] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_unknownParticipants] = v20;
  *(_QWORD *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_powerAssertion] = 0;
  v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state] = 0;
  v21 = (uint64_t *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID];
  *v21 = a1;
  v21[1] = (uint64_t)a2;
  *(_QWORD *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members] = a3;
  v22 = &v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember];
  *v22 = a4;
  v22[1] = a5;
  outlined init with copy of UserNotificationCenter(a6, (uint64_t)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service]);
  v34 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = 0xE000000000000000;
  swift_unknownObjectRetain();
  v23 = v8;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(29);
  v24._countAndFlagsBits = 0xD000000000000018;
  v24._object = (void *)0x80000001ACF82960;
  String.append(_:)(v24);
  v25._countAndFlagsBits = a1;
  v25._object = a2;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 45;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSServiceProtocol);
  v40 = a6;
  _print_unlocked<A, B>(_:_:)();
  v27 = v35;
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)&v44 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  v28 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, *MEMORY[0x1E0DEF8D0], v38);
  *(_QWORD *)&v23[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v28, (uint64_t)&v42, &demangling cache variable for type metadata for ABCReporterProtocol?);
  if (v43)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v42, (uint64_t)&v44);
  }
  else
  {
    v29 = type metadata accessor for ABCReporter();
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init);
    v30[3] = 0x636E795374736146;
    v30[4] = 0xE800000000000000;
    v30[5] = 0xD000000000000017;
    v30[6] = 0x80000001ACF67BD0;
    v45 = v29;
    v46 = &protocol witness table for ABCReporter;
    *(_QWORD *)&v44 = v30;
    outlined destroy of UUID?((uint64_t)&v42, &demangling cache variable for type metadata for ABCReporterProtocol?);
  }
  outlined init with take of BackgroundSessionManagerDataSource(&v44, (uint64_t)&v23[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_abcReporter]);

  v31 = (objc_class *)type metadata accessor for IDSGroupSessionProvider();
  v41.receiver = v23;
  v41.super_class = v31;
  v32 = objc_msgSendSuper2(&v41, sel_init);
  outlined destroy of UUID?(v28, &demangling cache variable for type metadata for ABCReporterProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v40);
  return v32;
}

uint64_t type metadata accessor for IDSGroupSessionProvider()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for IDSGroupSessionProvider.IDSGroupSessionProviderError, &type metadata for IDSGroupSessionProvider.IDSGroupSessionProviderError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for IDSGroupSessionProvider.IDSGroupSessionProviderError, &type metadata for IDSGroupSessionProvider.IDSGroupSessionProviderError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError);
  }
  return result;
}

uint64_t sub_1ACE76FBC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(void *a1)
{
  uint64_t v1;

  closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t sub_1ACE77008()
{
  return objectdestroy_3Tm_0();
}

uint64_t partial apply for closure #2 in IDSGroupSessionProvider.requestParticipant(for:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v2[2] = v0 + 32;
  return swift_task_switch();
}

uint64_t sub_1ACE77070()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v4 + 48) = v2;
  *(_QWORD *)(v4 + 56) = v3;
  *(_OWORD *)(v4 + 32) = v5;
  return swift_task_switch();
}

uint64_t sub_1ACE7711C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in Task<>.reportFailure(on:function:process:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in Task<>.reportFailure(on:function:process:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

void specialized IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v18 = a1;
    v19 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
    v16 = String.init<A>(reflecting:)();
    v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v12, v13, a2, v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v15, -1, -1);
    MEMORY[0x1AF44981C](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void specialized IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1)
{
  uint8_t *v1;
  uint8_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  _QWORD *v45;
  uint64_t (*v46)(__int128 *);
  id v47;
  void (*v48)(__int128 *, _QWORD);
  _QWORD **v49;
  _QWORD *v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint8_t **)((char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)&v2[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v67 = v6;
  if (v18)
  {
    v66 = (uint8_t *)v15;
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    *(_QWORD *)&v72[0] = v20;
    *(_DWORD *)v19 = 136315138;
    *(_QWORD *)&v68 = a1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    v21 = String.init<A>(reflecting:)();
    *(_QWORD *)&v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v16, v17, "IDSGroupSessionProvider: didRegisterPluginAllocationInfo %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v71 = v23;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v72), (v25 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v24, (uint64_t)&v68);
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v72);
  if (!*((_QWORD *)&v69 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRetain_n();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      *(_QWORD *)&v72[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v66 = v2;
      swift_bridgeObjectRetain();
      v33 = Dictionary.description.getter();
      v35 = v34;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, (uint64_t *)v72);
      v2 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v29, v30, "Missing virtual participantID, read %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v32, -1, -1);
      MEMORY[0x1AF44981C](v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v36 = (uint64_t)v67;
    static TaskPriority.background.getter();
    v37 = type metadata accessor for TaskPriority();
    v38 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 0, 1, v37);
    (*(void (**)(__int128 *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2) + 0x178))(v72, v38);
    outlined init with take of BackgroundSessionManagerDataSource(v72, (uint64_t)&v68);
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)(v39 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(&v68, v39 + 32);
    v40 = &async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    goto LABEL_33;
  }
  v26 = v70;
  v70 = 0xD000000000000023;
  v71 = 0x80000001ACF82880;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v72), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v27, (uint64_t)&v68);
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v72);
  if (!*((_QWORD *)&v69 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      *(_QWORD *)&v72[0] = v59;
      *(_DWORD *)v58 = 136315138;
      v66 = v58 + 4;
      swift_bridgeObjectRetain();
      v60 = Dictionary.description.getter();
      v61 = v2;
      v63 = v62;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v63, (uint64_t *)v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v2 = v61;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v56, v57, "Missing local participantID, read %s", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v59, -1, -1);
      MEMORY[0x1AF44981C](v58, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v36 = (uint64_t)v67;
    static TaskPriority.background.getter();
    v64 = type metadata accessor for TaskPriority();
    v65 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v36, 0, 1, v64);
    (*(void (**)(__int128 *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2) + 0x178))(v72, v65);
    outlined init with take of BackgroundSessionManagerDataSource(v72, (uint64_t)&v68);
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)(v39 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(&v68, v39 + 32);
    v40 = &async function pointer to partial apply for closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
LABEL_33:
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v36, (uint64_t)v40, v39);
    swift_release();
    return;
  }
  v41 = v70;
  v42 = objc_allocWithZone(MEMORY[0x1E0DBD2D0]);
  v43 = (void *)MEMORY[0x1AF4480F4](0x627553627550, 0xE600000000000000);
  v44 = objc_msgSend(v42, sel_initWithIdentifier_pluginName_, v26, v43);

  v45 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v46 = *(uint64_t (**)(__int128 *))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2) + 0x138);
  v47 = v44;
  v48 = (void (*)(__int128 *, _QWORD))v46(v72);
  v50 = v49;
  v51 = *v49;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v50 = v51;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
    *v50 = v51;
  }
  v54 = v51[2];
  v53 = v51[3];
  if (v54 >= v53 >> 1)
  {
    v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v51);
    *v50 = v51;
  }
  v51[2] = v54 + 1;
  v55 = &v51[2 * v54];
  v55[4] = v47;
  v55[5] = v41;
  v48(v72, 0);
  (*(void (**)(uint64_t))((*v45 & *(_QWORD *)v2) + 0x1B0))(1);

}

void specialized IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  id v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t (*)(void))((char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    v62 = v6;
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v61 = v15;
    v20 = v2;
    v21 = v19;
    *(_QWORD *)&v67[0] = v19;
    *(_DWORD *)v18 = 136315138;
    *(_QWORD *)&v63 = a1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    v22 = String.init<A>(reflecting:)();
    *(_QWORD *)&v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v16, v17, "IDSGroupSessionProvider: didUnregisterPluginAllocationInfo %s", v18, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    v2 = v20;
    v15 = v61;
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v66 = v25;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v67), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v67);
  if (!*((_QWORD *)&v64 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    swift_bridgeObjectRetain_n();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      *(_QWORD *)&v67[0] = v43;
      *(_DWORD *)v42 = 136315138;
      swift_bridgeObjectRetain();
      v60 = v2;
      v44 = Dictionary.description.getter();
      v46 = v45;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v40, v41, "Missing virtual participantID, read %s", v42, 0xCu);
      v2 = v60;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v43, -1, -1);
      MEMORY[0x1AF44981C](v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v47 = (uint64_t)v62;
    static TaskPriority.background.getter();
    v48 = type metadata accessor for TaskPriority();
    v49 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 0, 1, v48);
    (*(void (**)(__int128 *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x178))(v67, v49);
    outlined init with take of BackgroundSessionManagerDataSource(v67, (uint64_t)&v63);
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = 0;
    *(_QWORD *)(v50 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(&v63, v50 + 32);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v47, (uint64_t)&async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:), v50);
    swift_release();
    return;
  }
  v28 = (id)v65;
  v29 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x128);
  v60 = v2;
  v30 = v29();
  v31 = *(_QWORD *)(v30 + 16);
  v61 = v15;
  v62 = v29;
  if (v31)
  {
    v32 = (uint64_t *)(v30 + 40);
    v33 = MEMORY[0x1E0DEE9D8];
    do
    {
      v34 = *v32;
      v35 = (id)*(v32 - 1);
      if (objc_msgSend(v35, sel_identifier) == v28)
      {

      }
      else
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v67[0] = v33;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
          v33 = *(_QWORD *)&v67[0];
        }
        v38 = *(_QWORD *)(v33 + 16);
        v37 = *(_QWORD *)(v33 + 24);
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
          v33 = *(_QWORD *)&v67[0];
        }
        *(_QWORD *)(v33 + 16) = v38 + 1;
        v39 = v33 + 16 * v38;
        *(_QWORD *)(v39 + 32) = v35;
        *(_QWORD *)(v39 + 40) = v34;
      }
      v32 += 2;
      --v31;
    }
    while (v31);
  }
  else
  {
    v33 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v51 = v60;
  v52 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v53 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v60) + 0x130))(v33);
  v54 = *(_QWORD *)(((uint64_t (*)(uint64_t))v62)(v53) + 16);
  v55 = swift_bridgeObjectRelease();
  if (!v54 && (*(unsigned __int8 (**)(uint64_t))((*v52 & *v51) + 0x1A8))(v55) == 1)
  {
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_1ACCCC000, v56, v57, "IDSGroupSessionProvider: Lost all virtualParticipants, re-registering plugin.", v58, 2u);
      MEMORY[0x1AF44981C](v58, -1, -1);
    }

    IDSGroupSessionProvider.registerQRPlugin()();
  }
}

uint64_t specialized IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  void (*v34)(__int128 *, id, uint64_t, uint64_t, uint64_t);
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  __int128 v38[2];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.service);
  v16 = a1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    *(_QWORD *)&v39 = v20;
    *(_DWORD *)v19 = 136315394;
    *(_QWORD *)&v38[0] = v16;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSURI);
    v37 = v8;
    v21 = v16;
    v22 = String.init<A>(reflecting:)();
    *(_QWORD *)&v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v8 = v37;
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 1024;
    LODWORD(v38[0]) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v17, v18, "IDSGroupSessionProvider: rejectedKeyRecoveryRequest from: %s, reason: %u", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);

  }
  else
  {

  }
  static TaskPriority.background.getter();
  v24 = type metadata accessor for TaskPriority();
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 0, 1, v24);
  v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(__int128 *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x178))(&v39, v25);
  outlined init with take of BackgroundSessionManagerDataSource(&v39, (uint64_t)v38);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  outlined init with take of BackgroundSessionManagerDataSource(v38, v27 + 32);
  *(_DWORD *)(v27 + 72) = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:), v27);
  v28 = swift_release();
  result = (*(uint64_t (**)(uint64_t))((*v26 & *v3) + 0xC0))(v28);
  if (result)
  {
    v31 = v30;
    ObjectType = swift_getObjectType();
    v40 = type metadata accessor for IDSGroupSessionProvider();
    v41 = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v33, (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider, (uint64_t)&protocol conformance descriptor for IDSGroupSessionProvider);
    *(_QWORD *)&v39 = v3;
    v34 = *(void (**)(__int128 *, id, uint64_t, uint64_t, uint64_t))(v31 + 24);
    v35 = v3;
    v34(&v39, v16, a2, ObjectType, v31);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v39);
  }
  return result;
}

uint64_t specialized IDSGroupSessionProvider.sessiondidReceiveKeyUpdate(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v18;
  _QWORD v20[5];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for service == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.service);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1ACCCC000, v9, v10, "IDSGroupSessionProvider: sessiondidReceiveKeyUpdate", v11, 2u);
    MEMORY[0x1AF44981C](v11, -1, -1);
  }

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xC0))();
  if (result)
  {
    v14 = v13;
    ObjectType = swift_getObjectType();
    v20[3] = type metadata accessor for IDSGroupSessionProvider();
    v20[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v16, (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider, (uint64_t)&protocol conformance descriptor for IDSGroupSessionProvider);
    v20[0] = v1;
    v17 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v14 + 16);
    v18 = v1;
    v17(v20, ObjectType, v14);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  }
  return result;
}

unint64_t specialized IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(unint64_t result, char a2)
{
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, _QWORD);
  _QWORD v14[5];

  if ((a2 & 1) != 0)
  {
    v3 = v2;
    v4 = result;
    v14[0] = MEMORY[0x1E0DEE9D8];
    if (result >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v5 = result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v5 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return result;
        }
        for (i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
            v7 = (id)MEMORY[0x1AF448904](i, v4);
          else
            v7 = *(id *)(v4 + 8 * i + 32);
          v8 = v7;
          if (objc_msgSend(v7, sel_isKnown))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v9 = v14[0];
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    v10 = v3;
    v11 = specialized Sequence.compactMap<A>(_:)(v9, v10);
    swift_release();

    v12 = specialized Set.init<A>(_:)((uint64_t)v11);
    swift_bridgeObjectRelease();
    v13 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v10)
                                                                                        + 0x158))(v14);
    specialized Set.formUnion<A>(_:)(v12);
    return v13(v14, 0);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for IDSGroupSessionProvider.SessionState, &type metadata for IDSGroupSessionProvider.SessionState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for IDSGroupSessionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance NSObject, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider, MEMORY[0x1E0CB2120]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1ACE78D24@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xC0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACE78D64(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xC8);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1ACE78DB4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xF0))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE78DF4(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xF8);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1ACE78E40(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x110))();
}

uint64_t sub_1ACE78E78(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x118))(v4);
}

uint64_t sub_1ACE78EC8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE78F08(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x130);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACE78F48@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x148))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE78F88(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x150);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACE78FC8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x160))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE79008(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x168);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACE79048(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x178))();
}

uint64_t sub_1ACE79080(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x180))(v4);
}

uint64_t sub_1ACE790D0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x190))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE79110(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x198);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1ACE7915C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1A8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACE7919C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1B0))(*a1);
}

uint64_t dispatch thunk of IDSServiceProtocol.accounts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IDSServiceProtocol.devices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IDSServiceProtocol.iCloudAccount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of IDSServiceProtocol.serviceIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didChangeState(sessionProvider:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didReceiveKeyUpdate(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didChangePlugins(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.participantIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.virtualParticipant.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.groupID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 64))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.leave()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.updateMembers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.requestDataCryptor(forTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.requestEncryptionKeysForParticipants(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.requestParticipant(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 112) + *(_QWORD *)(a3 + 112));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of IDSGroupSessionProviderProtocol.requestParticipant(for:);
  return v9(a1, a2, a3);
}

uint64_t method lookup function for IDSGroupSessionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.groupSession.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.groupSession.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.groupSession.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participantIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.userDefaults.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.userDefaults.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.userDefaults.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.currentPlugins.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.currentPlugins.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.currentPlugins.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.virtualParticipant.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participants.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participants.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participants.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.unknownParticipants.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.unknownParticipants.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.unknownParticipants.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.abcReporter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.abcReporter.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.abcReporter.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.powerAssertion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.powerAssertion.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.powerAssertion.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.state.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.state.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.__allocating_init(groupID:members:localMember:service:targetQueue:abcReporter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.start()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.leave()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.updateMembers(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestEncryptionKeysForParticipants(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x238);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of IDSGroupSessionProvider.requestParticipant(for:);
  return v7(a1);
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v8;

  v8 = *v3;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for IDSGroupSessionProvider.IDSGroupSessionProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1ACE79834 + 4 * byte_1ACF67985[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1ACE79868 + 4 * asc_1ACF67980[v4]))();
}

uint64_t sub_1ACE79868(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE79870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE79878);
  return result;
}

uint64_t sub_1ACE79884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE7988CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1ACE79890(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE79898(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.IDSGroupSessionProviderError()
{
  return &type metadata for IDSGroupSessionProvider.IDSGroupSessionProviderError;
}

uint64_t storeEnumTagSinglePayload for IDSGroupSessionProvider.SessionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACE79900 + 4 * byte_1ACF6798F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACE79934 + 4 * byte_1ACF6798A[v4]))();
}

uint64_t sub_1ACE79934(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE7993C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE79944);
  return result;
}

uint64_t sub_1ACE79950(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE79958);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACE7995C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE79964(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.SessionState()
{
  return &type metadata for IDSGroupSessionProvider.SessionState;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSGroupSessionProvider.Participant(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for IDSGroupSessionProvider.Participant()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for IDSGroupSessionProvider.Participant(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IDSGroupSessionProvider.Participant(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSGroupSessionProvider.Participant(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSGroupSessionProvider.Participant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.Participant()
{
  return &type metadata for IDSGroupSessionProvider.Participant;
}

_QWORD *initializeBufferWithCopyOfBuffer for IDSGroupSessionProvider.CurrentSessionInfo(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

void destroy for IDSGroupSessionProvider.CurrentSessionInfo(id *a1)
{

}

uint64_t assignWithCopy for IDSGroupSessionProvider.CurrentSessionInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for IDSGroupSessionProvider.CurrentSessionInfo(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.CurrentSessionInfo()
{
  return &type metadata for IDSGroupSessionProvider.CurrentSessionInfo;
}

uint64_t sub_1ACE79B9C()
{
  return objectdestroy_3Tm_0();
}

uint64_t partial apply for closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return swift_task_switch();
}

uint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1AF44972C](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1ACE79C44()
{
  return objectdestroy_3Tm_0();
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = v0 + 32;
  v3 = *(_DWORD *)(v0 + 72);
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_DWORD *)(v4 + 60) = v3;
  *(_QWORD *)(v4 + 32) = v2;
  return swift_task_switch();
}

uint64_t sub_1ACE79CB4()
{
  return objectdestroy_3Tm_0();
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return swift_task_switch();
}

uint64_t sub_1ACE79D1C()
{
  return objectdestroy_3Tm_0();
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return swift_task_switch();
}

uint64_t sub_1ACE79D84()
{
  return objectdestroy_3Tm_0();
}

uint64_t objectdestroy_3Tm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return swift_task_switch();
}

uint64_t sub_1ACE79E24()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.state.didset()
{
  uint64_t v0;

  return closure #1 in IDSGroupSessionProvider.state.didset(*(_QWORD **)(v0 + 16));
}

uint64_t sub_1ACE79E50()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in IDSGroupSessionProvider.unknownParticipants.didset()
{
  uint64_t v0;

  closure #1 in IDSGroupSessionProvider.unknownParticipants.didset(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.currentPlugins.didset()
{
  uint64_t v0;

  return closure #1 in IDSGroupSessionProvider.currentPlugins.didset(*(_QWORD **)(v0 + 16));
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t result;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t i;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  void (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t);
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;

  v77 = a2;
  v3 = type metadata accessor for UnencryptedAttachment(0);
  v75 = *(_QWORD *)(v3 - 8);
  v76 = v3;
  MEMORY[0x1E0C80A78](v3);
  v69 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v5 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v81 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v66 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment??);
  v14 = MEMORY[0x1E0C80A78](v13);
  v72 = (uint64_t)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v66 - v17;
  MEMORY[0x1E0C80A78](v16);
  v70 = (uint64_t)&v66 - v19;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment?);
  v20 = *(_QWORD *)(v90 - 8);
  v21 = MEMORY[0x1E0C80A78](v90);
  v68 = (uint64_t)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v87 = (uint64_t)&v66 - v24;
  MEMORY[0x1E0C80A78](v23);
  v73 = (char *)&v66 - v25;
  v26 = *a1;
  v80 = (void (*)(uint64_t))a1[1];
  v82 = a1[2];
  v83 = v26;
  v27 = a1[4];
  v86 = (uint64_t (*)(uint64_t))a1[3];
  v92 = v26;
  v28 = *(_QWORD *)(v26 + 64);
  v78 = v26 + 64;
  v29 = -1 << *(_BYTE *)(v26 + 32);
  v71 = ~v29;
  if (-v29 < 64)
    v30 = ~(-1 << -(char)v29);
  else
    v30 = -1;
  v31 = v30 & v28;
  v32 = (void (*)(uint64_t))a1[5];
  v33 = a1[6];
  v67 = v32;
  outlined retain of [UInt64 : AttachmentLedger_AttachmentEncryption].Values((uint64_t)&v92);
  v79 = (unint64_t)(63 - v29) >> 6;
  v66 = v79 - 1;
  swift_retain();
  v89 = v27;
  swift_retain();
  v74 = v33;
  result = swift_retain();
  v35 = 0;
  if (!v31)
    goto LABEL_7;
LABEL_5:
  v36 = __clz(__rbit64(v31));
  v31 &= v31 - 1;
  v91 = v35;
  v37 = v36 | (v35 << 6);
LABEL_6:
  outlined init with copy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v83 + 56) + *(_QWORD *)(v5 + 72) * v37, (uint64_t)v12, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  for (i = 0; ; i = 1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
LABEL_13:
          v41 = v88;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v12, i, 1, v88);
          outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v12, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v41) == 1)
          {
            v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
            v43 = v18;
            v44 = 1;
          }
          else
          {
            v45 = v81;
            outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v10, v81, type metadata accessor for AttachmentLedger_AttachmentEncryption);
            v80(v45);
            outlined destroy of ActivitySession.DomainAssertionWrapper(v45, type metadata accessor for AttachmentLedger_AttachmentEncryption);
            v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
            v43 = v18;
            v44 = 0;
          }
          v46 = v90;
          v42(v43, v44, 1, v90);
          v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
          if (v47((uint64_t)v18, 1, v46) == 1)
          {
            outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UnencryptedAttachment??);
            v51 = 1;
            v52 = v70;
LABEL_45:
            v42((char *)v52, v51, 1, v46);
            v53 = v52;
            v54 = v46;
            v55 = v72;
            outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v53, v72, &demangling cache variable for type metadata for UnencryptedAttachment??);
            v56 = v47(v55, 1, v54);
            v57 = v76;
            if (v56 == 1)
            {
              v58 = v75;
              v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
              v60 = v73;
              v59(v73, 1, 1, v76);
            }
            else
            {
              v61 = v68;
              outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v55, v68, &demangling cache variable for type metadata for UnencryptedAttachment?);
              v60 = v73;
              v67(v61);
              outlined destroy of UUID?(v61, &demangling cache variable for type metadata for UnencryptedAttachment?);
              v58 = v75;
              v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
              v59(v60, 0, 1, v57);
            }
            v62 = v77;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v60, 1, v57) == 1)
            {
              outlined consume of [String : ()].Iterator._Variant();
              swift_release();
              swift_release();
              swift_release();
              v63 = 1;
            }
            else
            {
              v64 = (uint64_t)v60;
              v65 = v69;
              outlined init with take of ActivitySession.DomainAssertionWrapper(v64, v69, type metadata accessor for UnencryptedAttachment);
              outlined consume of [String : ()].Iterator._Variant();
              swift_release();
              swift_release();
              swift_release();
              outlined init with take of ActivitySession.DomainAssertionWrapper(v65, v62, type metadata accessor for UnencryptedAttachment);
              v63 = 0;
            }
            return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v59)(v62, v63, 1, v57);
          }
          v84 = v47;
          v85 = v42;
          v48 = v87;
          outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v18, v87, &demangling cache variable for type metadata for UnencryptedAttachment?);
          if ((v86(v48) & 1) != 0)
          {
            v52 = v70;
            outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v48, v70, &demangling cache variable for type metadata for UnencryptedAttachment?);
            v51 = 0;
            v46 = v90;
            v47 = v84;
            v42 = v85;
            goto LABEL_45;
          }
          result = outlined destroy of UUID?(v48, &demangling cache variable for type metadata for UnencryptedAttachment?);
          v35 = v91;
          if (v31)
            goto LABEL_5;
LABEL_7:
          v39 = v35 + 1;
          if (__OFADD__(v35, 1))
          {
            __break(1u);
            goto LABEL_53;
          }
          if (v39 >= v79)
          {
            v91 = v35;
            goto LABEL_12;
          }
          v40 = *(_QWORD *)(v78 + 8 * v39);
          if (v40)
            goto LABEL_10;
          v49 = v35 + 2;
          if (v35 + 2 < v79)
            break;
          v31 = 0;
          i = 1;
          v91 = v35 + 1;
        }
        v40 = *(_QWORD *)(v78 + 8 * v49);
        if (v40)
          goto LABEL_22;
        v50 = v35 + 3;
        if (v39 + 2 >= v79)
        {
          v91 = v49;
          goto LABEL_12;
        }
        v40 = *(_QWORD *)(v78 + 8 * v50);
        if (v40)
          goto LABEL_26;
        if (v39 + 3 < v79)
          break;
        v31 = 0;
        i = 1;
        v91 = v50;
      }
      v40 = *(_QWORD *)(v78 + 8 * (v39 + 3));
      if (v40)
      {
        v39 += 3;
        goto LABEL_10;
      }
      v49 = v39 + 4;
      if (v39 + 4 < v79)
        break;
      v91 = v39 + 3;
LABEL_12:
      v31 = 0;
      i = 1;
    }
    v40 = *(_QWORD *)(v78 + 8 * v49);
    if (v40)
    {
LABEL_22:
      v39 = v49;
LABEL_10:
      v31 = (v40 - 1) & v40;
      v37 = __clz(__rbit64(v40)) + (v39 << 6);
      v91 = v39;
      goto LABEL_6;
    }
    v50 = v39 + 5;
    if (v39 + 5 < v79)
      break;
    v31 = 0;
    v91 = v39 + 4;
  }
  v40 = *(_QWORD *)(v78 + 8 * v50);
  if (v40)
  {
LABEL_26:
    v39 = v50;
    goto LABEL_10;
  }
  while (1)
  {
    v39 = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (v39 >= v79)
    {
      v31 = 0;
      i = 1;
      v91 = v66;
      goto LABEL_13;
    }
    v40 = *(_QWORD *)(v78 + 8 * v39);
    ++v50;
    if (v40)
      goto LABEL_10;
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t Attachment.unencryptedAttachment.getter()
{
  type metadata accessor for UnencryptedAttachment(0);
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t Attachment.encryptionSlots.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void default argument 2 of Attachment.MMCSMetadata.init(encryptedAssetSkeleton:assetSkeleton:status:ownerID:storageLocation:fileHash:refSignature:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xF000000000000000;
}

uint64_t Attachment.MMCSMetadata.init(encryptedAssetSkeleton:assetSkeleton:status:ownerID:storageLocation:fileHash:refSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;

  v30 = *a4;
  v19 = *((_QWORD *)a4 + 2);
  v20 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a9, a1, v20);
  v21 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  v22 = (_QWORD *)(a9 + v21[5]);
  *v22 = a2;
  v22[1] = a3;
  v23 = a9 + v21[6];
  *(_OWORD *)v23 = v30;
  *(_QWORD *)(v23 + 16) = v19;
  v24 = (_QWORD *)(a9 + v21[7]);
  *v24 = a5;
  v24[1] = a6;
  v25 = a9 + v21[8];
  v26 = type metadata accessor for URL();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a7, v26);
  v28 = (_QWORD *)(a9 + v21[9]);
  *v28 = a8;
  v28[1] = a10;
  v29 = (_QWORD *)(a9 + v21[10]);
  *v29 = a11;
  v29[1] = a12;
  return result;
}

uint64_t Attachment.Metadata.init(developerMetadata:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Attachment.__allocating_init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t Attachment.update(_:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (one-time initialization token for attachment != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.attachment);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    *(_DWORD *)v3 = 136315138;
    v9 = v4;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v5 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Attempting to update attachment %s's MMCSMetadata", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v4, -1, -1);
    MEMORY[0x1AF44981C](v3, -1, -1);

  }
  else
  {

    v7 = swift_release_n();
  }
  MEMORY[0x1E0C80A78](v7);
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t Attachment.$encryptionSlots.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t Attachment.update(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t result;
  uint64_t v60;
  int v61;
  os_log_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t aBlock[7];

  v2 = type metadata accessor for UUID();
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v63 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v64 = (char *)&v60 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v6);
  v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v66 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  MEMORY[0x1E0C80A78](v8);
  v70 = (uint64_t *)((char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v65 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v68 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v71 = (char *)&v60 - v19;
  v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  v74 = *(_QWORD *)(v20 - 8);
  v21 = *(_QWORD *)(v74 + 64);
  v22 = MEMORY[0x1E0C80A78](v20);
  v75 = (uint64_t)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v60 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v60 - v26;
  if (one-time initialization token for attachment != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.attachment);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v27, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  v76 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    v61 = v30;
    v62 = v29;
    v31 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    aBlock[0] = v60;
    *(_DWORD *)v31 = 134218242;
    v32 = *((_QWORD *)v27 + 2);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v27, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    v78 = v32;
    v33 = (uint64_t)v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 12) = 2080;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v25[*(int *)(v20 + 28)], (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v12, 1, v13) == 1)
    {
      *(_OWORD *)v15 = xmmword_1ACF5CB20;
      *((_QWORD *)v15 + 2) = 0;
      UnknownStorage.init()();
      v34 = v66;
      v35 = v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(&v15[*(int *)(v13 + 28)], 1, 1, v67);
      outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      v36 = (uint64_t)v69;
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      v36 = (uint64_t)v69;
      v34 = v66;
      v35 = v67;
    }
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v15[*(int *)(v13 + 28)], v36, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35);
    v38 = v77;
    v40 = (uint64_t)v71;
    v41 = v70;
    if (v39 == 1)
    {
      *(_OWORD *)v70 = xmmword_1ACF5CB20;
      UnknownStorage.init()();
      outlined destroy of UUID?(v36, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v36, (uint64_t)v70, type metadata accessor for AttachmentLedger_EncryptionID);
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    v42 = *v41;
    v43 = v41[1];
    outlined copy of Data._Representation(*v41, v43);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v41, type metadata accessor for AttachmentLedger_EncryptionID);
    UUID.init(data:)(v42, v43);
    v44 = v68;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v40, v68, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v46 = v72;
    v45 = v73;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v44, 1, v73) == 1)
    {
      v47 = 0xE300000000000000;
      v48 = 7104878;
    }
    else
    {
      v49 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v64, v44, v45);
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v63, v49, v45);
      v48 = String.init<A>(reflecting:)();
      v47 = v50;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
    }
    v37 = v76;
    outlined destroy of UUID?(v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v33, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    v51 = v62;
    _os_log_impl(&dword_1ACCCC000, v62, (os_log_type_t)v61, "Attempting to update attachment's encryption material for participant: %llu to SKI: %s", (uint8_t *)v31, 0x16u);
    v52 = v60;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v52, -1, -1);
    MEMORY[0x1AF44981C](v31, -1, -1);

  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v27, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);

    v37 = v76;
    v38 = v77;
  }
  v53 = *(NSObject **)(v38 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  v54 = v75;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v37, v75, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  v55 = (*(unsigned __int8 *)(v74 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = v38;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v54, v56 + v55, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = partial apply for closure #1 in Attachment.update(_:);
  *(_QWORD *)(v57 + 24) = v56;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v57;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_22;
  v58 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v53, v58);
  _Block_release(v58);
  LOBYTE(v53) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v53 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t UnencryptedAttachment.key.getter@<X0>(uint64_t a1@<X8>)
{
  return UnencryptedAttachment.key.getter((uint64_t (*)(_QWORD))MEMORY[0x1E0CA93C8], a1);
}

uint64_t UnencryptedAttachment.key.setter(uint64_t a1)
{
  return UnencryptedAttachment.key.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA93C8]);
}

uint64_t (*UnencryptedAttachment.key.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.metadata.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for UnencryptedAttachment(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return outlined copy of Data?(v4, v5);
}

uint64_t UnencryptedAttachment.metadata.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = v1 + *(int *)(type metadata accessor for UnencryptedAttachment(0) + 20);
  result = outlined consume of Data?(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = v3;
  return result;
}

uint64_t (*UnencryptedAttachment.metadata.modify())()
{
  type metadata accessor for UnencryptedAttachment(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.mmcsMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnencryptedAttachment(0);
  return outlined init with copy of ActivitySession.DomainAssertionWrapper(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Attachment.MMCSMetadata);
}

uint64_t UnencryptedAttachment.mmcsMetadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for UnencryptedAttachment(0) + 24);
  return outlined assign with take of Attachment.MMCSMetadata(a1, v3);
}

uint64_t (*UnencryptedAttachment.mmcsMetadata.modify())()
{
  type metadata accessor for UnencryptedAttachment(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.encryptionSlots.getter()
{
  type metadata accessor for UnencryptedAttachment(0);
  return swift_bridgeObjectRetain();
}

uint64_t UnencryptedAttachment.encryptionSlots.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for UnencryptedAttachment(0) + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*UnencryptedAttachment.encryptionSlots.modify())()
{
  type metadata accessor for UnencryptedAttachment(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.init(key:metadata:mmcsMetadata:encryptionSlots:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  _QWORD *v14;

  v9 = *a2;
  v10 = a2[1];
  v11 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a5, a1, v11);
  v12 = (int *)type metadata accessor for UnencryptedAttachment(0);
  result = outlined init with take of ActivitySession.DomainAssertionWrapper(a3, a5 + v12[6], type metadata accessor for Attachment.MMCSMetadata);
  v14 = (_QWORD *)(a5 + v12[5]);
  *v14 = v9;
  v14[1] = v10;
  *(_QWORD *)(a5 + v12[7]) = a4;
  return result;
}

BOOL static Attachment.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Attachment.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int Attachment.Errors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t Attachment.UpdatingBlob.version.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Attachment.UpdatingBlob.version.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Attachment.UpdatingBlob.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.UpdatingBlob.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t Attachment.UpdatingBlob.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*Attachment.UpdatingBlob.data.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.UpdatingBlob.init(data:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = result;
  a3[2] = a2;
  return result;
}

uint64_t Attachment.UpdatingBlob.init(version:data:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t Attachment.MMCSMetadata.encryptedAssetSkeleton.getter@<X0>(uint64_t a1@<X8>)
{
  return UnencryptedAttachment.key.getter((uint64_t (*)(_QWORD))MEMORY[0x1E0CA9538], a1);
}

uint64_t UnencryptedAttachment.key.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t Attachment.MMCSMetadata.encryptedAssetSkeleton.setter(uint64_t a1)
{
  return UnencryptedAttachment.key.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9538]);
}

uint64_t UnencryptedAttachment.key.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
}

uint64_t (*Attachment.MMCSMetadata.encryptedAssetSkeleton.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.assetSkeleton.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t Attachment.MMCSMetadata.assetSkeleton.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 20);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.assetSkeleton.modify())()
{
  type metadata accessor for Attachment.MMCSMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.status.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 24));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return outlined copy of Attachment.MMCSMetadata.UploadStatus(v4, v5, v6);
}

__n128 Attachment.MMCSMetadata.status.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 24);
  outlined consume of Attachment.MMCSMetadata.UploadStatus(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
  result = v5;
  *(__n128 *)v3 = v5;
  *(_QWORD *)(v3 + 16) = v2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.status.modify())()
{
  type metadata accessor for Attachment.MMCSMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.ownerID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.MMCSMetadata.ownerID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.ownerID.modify())()
{
  type metadata accessor for Attachment.MMCSMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.storageLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 32);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Attachment.MMCSMetadata.storageLocation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 32);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Attachment.MMCSMetadata.storageLocation.modify())()
{
  type metadata accessor for Attachment.MMCSMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.fileHash.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 36);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t Attachment.MMCSMetadata.fileHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 36);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.fileHash.modify())()
{
  type metadata accessor for Attachment.MMCSMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.refSignature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 40);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t Attachment.MMCSMetadata.refSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 40);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.refSignature.modify())()
{
  type metadata accessor for Attachment.MMCSMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.Metadata.developerMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data?(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t Attachment.Metadata.developerMetadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*Attachment.Metadata.developerMetadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double Attachment.Metadata.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1ACF5C480;
  return result;
}

uint64_t Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Attachment.key.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[2] = a1;
  type metadata accessor for UnencryptedAttachment(0);
  v2 = swift_task_alloc();
  v1[3] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v1[4] = v3;
  *v3 = v1;
  v3[1] = Attachment.key.getter;
  return Attachment.waitForDecryption()(v2);
}

uint64_t Attachment.key.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2, v3);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v2, type metadata accessor for UnencryptedAttachment);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Attachment.waitForDecryption()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.EncryptedAttachmentStatus?);
  v2[12] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>);
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Attachment.waitForDecryption()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[13];
  v4 = (_QWORD *)(v0[8] + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  v0[5] = *v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1AF447980](v5, v6);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[19] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v7 = (_QWORD *)swift_task_alloc();
  v0[20] = v7;
  *v7 = v0;
  v7[1] = Attachment.waitForDecryption();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _BYTE *v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v1 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[10] + 48))(v1, 1, v0[9]) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *v2 = 6;
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper(v1, v0[11], type metadata accessor for Attachment.EncryptedAttachmentStatus);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v0[11], type metadata accessor for AttachmentLedger_AttachmentMetadata);
    v7 = (_QWORD *)swift_task_alloc();
    v0[22] = v7;
    *v7 = v0;
    v7[1] = Attachment.waitForDecryption();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  if (EnumCaseMultiPayload != 1)
  {
    v10 = v0[17];
    v9 = v0[18];
    v11 = v0[16];
    v12 = v0[11];
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *v13 = 5;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v12, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    goto LABEL_8;
  }
  v4 = v0[11];
  v5 = v0[7];
  (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
  outlined init with take of ActivitySession.DomainAssertionWrapper(v4, v5, type metadata accessor for UnencryptedAttachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  return swift_task_switch();
}

uint64_t Attachment.mmcsMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation.BufferingPolicy);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Attachment.MMCSMetadata(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DF0A50], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in Attachment.mmcsMetadata.getter, (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[9] = a4;
  v5[10] = a5;
  type metadata accessor for Attachment.MMCSMetadata(0);
  v5[11] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation.YieldResult);
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = type metadata accessor for UnencryptedAttachment(0);
  v5[16] = swift_task_alloc();
  v7 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v5[17] = v7;
  v5[18] = *(_QWORD *)(v7 - 8);
  v5[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.EncryptedAttachmentStatus?);
  v5[20] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>);
  v5[21] = v8;
  v5[22] = *(_QWORD *)(v8 - 8);
  v5[23] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  v5[24] = v9;
  v5[25] = *(_QWORD *)(v9 - 8);
  v5[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in Attachment.mmcsMetadata.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[22];
  v1 = v0[23];
  v3 = v0[21];
  v4 = (_QWORD *)(v0[9] + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  v0[5] = *v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1AF447980](v5, v6);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[27] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v7 = (_QWORD *)swift_task_alloc();
  v0[28] = v7;
  *v7 = v0;
  v7[1] = closure #1 in closure #1 in Attachment.mmcsMetadata.getter;
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 232) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  v1 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 48))(v1, 1, *(_QWORD *)(v0 + 136)) != 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(v1, *(_QWORD *)(v0 + 152), type metadata accessor for Attachment.EncryptedAttachmentStatus);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        v14 = *(_QWORD *)(v0 + 200);
        v13 = *(_QWORD *)(v0 + 208);
        v15 = *(_QWORD *)(v0 + 192);
        v16 = *(_QWORD *)(v0 + 152);
        lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
        v17 = swift_allocError();
        *v18 = 5;
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v16, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        *(_QWORD *)(v0 + 64) = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
        goto LABEL_9;
      }
      v4 = *(_QWORD *)(v0 + 120);
      v3 = *(_QWORD *)(v0 + 128);
      v6 = *(_QWORD *)(v0 + 104);
      v5 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 88);
      v7 = *(_QWORD *)(v0 + 96);
      outlined init with take of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 152), v3, type metadata accessor for UnencryptedAttachment);
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v3 + *(int *)(v4 + 24), v8, type metadata accessor for Attachment.MMCSMetadata);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
      AsyncThrowingStream.Continuation.yield(_:)();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      v9 = v3;
      v10 = type metadata accessor for UnencryptedAttachment;
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 152);
      v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v9, v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v11;
    *v11 = v0;
    v11[1] = closure #1 in closure #1 in Attachment.mmcsMetadata.getter;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  *(_QWORD *)(v0 + 56) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
LABEL_9:
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 232);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 232) = v0;
  return swift_task_switch();
}

uint64_t Attachment.$status.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t Attachment.metadata.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[2] = a1;
  v1[3] = type metadata accessor for UnencryptedAttachment(0);
  v2 = swift_task_alloc();
  v1[4] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v1[5] = v3;
  *v3 = v1;
  v3[1] = Attachment.metadata.getter;
  return Attachment.waitForDecryption()(v2);
}

uint64_t Attachment.metadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(uint64_t **)(v0 + 16);
  v3 = (uint64_t *)(v1 + *(int *)(*(_QWORD *)(v0 + 24) + 20));
  v4 = *v3;
  v5 = v3[1];
  outlined copy of Data?(*v3, v5);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for UnencryptedAttachment);
  *v2 = v4;
  v2[1] = v5;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Attachment.unencryptedAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int EnumCaseMultiPayload;
  uint64_t (*v7)(uint64_t);
  _BYTE *v8;
  uint64_t v9;

  v2 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, a1, type metadata accessor for UnencryptedAttachment);
    v7 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
  }
  else
  {
    v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, v7);
  lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
  swift_allocError();
  *v8 = 3;
  return swift_willThrow();
}

uint64_t type metadata accessor for UnencryptedAttachment(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for UnencryptedAttachment);
}

uint64_t Attachment.status.getter()
{
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  return swift_release();
}

uint64_t key path getter for Attachment.encryptionSlots : Attachment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Attachment.encryptionSlots : Attachment()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Attachment.MMCSMetadata(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Attachment.MMCSMetadata);
}

uint64_t Attachment.encryptionSlots.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*Attachment.encryptionSlots.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t key path getter for Attachment.$encryptionSlots : Attachment()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for Attachment.$encryptionSlots : Attachment(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t Attachment.$encryptionSlots.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Attachment.$encryptionSlots.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

id Attachment.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
}

uint64_t key path getter for Attachment.status : Attachment()
{
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  return swift_release();
}

uint64_t key path setter for Attachment.status : Attachment(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v9 - v6, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v5, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_retain();
  CurrentValueSubject.send(_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  return swift_release();
}

uint64_t Attachment.status.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_retain();
  CurrentValueSubject.send(_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  return swift_release();
}

void (*Attachment.status.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Attachment.EncryptedAttachmentStatus(0) - 8) + 64);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  v3[5] = *v5;
  swift_retain();
  CurrentValueSubject.value.getter();
  return Attachment.status.modify;
}

void Attachment.status.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    CurrentValueSubject.send(_:)();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  }
  else
  {
    CurrentValueSubject.send(_:)();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t Attachment.dataCryptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor, a1);
}

uint64_t Attachment.localParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID);
}

__n128 Attachment.config.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v2 = v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config + 8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t Attachment.cryptorCancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t Attachment.cryptorCancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_cryptorCancellables);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Attachment.cryptorCancellables.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t Attachment.localEncryptionUpdateTask.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t Attachment.localEncryptionUpdateTask.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*Attachment.localEncryptionUpdateTask.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t Attachment.__allocating_init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t result;
  _QWORD v70[2];
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t aBlock;
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  void *v106;
  uint64_t (*v107)();
  uint64_t v108;
  __int128 v109;

  v6 = v5;
  v82 = a4;
  v101 = a3;
  v102 = a2;
  v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v98 = *(_QWORD *)(v9 - 8);
  v99 = v10;
  MEMORY[0x1E0C80A78](v9);
  v97 = (uint64_t)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v12);
  v93 = (char *)v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  v96 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v94 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  v91 = *(_QWORD *)(v92 - 8);
  v15 = MEMORY[0x1E0C80A78](v92);
  v87 = (char *)v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v84 = (char *)v70 - v17;
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>);
  v86 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v83 = (char *)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v19 = MEMORY[0x1E0C80A78](v79);
  v81 = (uint64_t)v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v80 = (uint64_t)v70 - v22;
  MEMORY[0x1E0C80A78](v21);
  v74 = (uint64_t)v70 - v23;
  v90 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v73 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v72 = (char *)v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v71);
  v70[1] = (char *)v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  v28 = *(_QWORD *)(v27 - 8);
  v78 = v27;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = *a5;
  v31 = a5[1];
  v75 = a5[2];
  v32 = a5[3];
  v33 = a5[4];
  v34 = v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  v35 = MEMORY[0x1E0DEE9D8];
  aBlock = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : AttachmentLedger_AttachmentEncryption]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v34, v30, v27);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_cryptorCancellables) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask) = 0;
  v100 = type metadata accessor for OS_dispatch_queue();
  aBlock = _typeName(_:qualified:)();
  v104 = v36;
  v37._countAndFlagsBits = 45;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38 = type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v89 = a1;
  v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  aBlock = v35;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, *MEMORY[0x1E0DEF8D0], v90);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v88 = v38;
  v90 = *(_QWORD *)(v38 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id, a1, v38);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID) = v82;
  outlined init with copy of UserNotificationCenter((uint64_t)v101, v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int))
               + 48);
  v41 = v74;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v102, v74, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  *(_QWORD *)(v41 + v40) = 0;
  swift_storeEnumTagMultiPayload();
  v42 = (uint64_t *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  v43 = v80;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v41, v80, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v43, v81, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  swift_allocObject();
  v44 = CurrentValueSubject.init(_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v43, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  *v42 = v44;
  outlined destroy of ActivitySession.DomainAssertionWrapper(v41, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_endAccess();
  v45 = (_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config);
  *v45 = v76;
  v45[1] = v31;
  v45[2] = v75;
  v45[3] = v32;
  v45[4] = v33;
  aBlock = *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, MEMORY[0x1E0C95FB8]);
  swift_retain();
  v46 = v83;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_beginAccess();
  v47 = v84;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>, MEMORY[0x1E0C95708]);
  v48 = v85;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v46, v48);
  v49 = v91;
  v50 = v92;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v87, v47, v92);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v50);
  v51 = v101;
  v52 = v101[3];
  v53 = v101[4];
  __swift_project_boxed_opaque_existential_1(v101, v52);
  aBlock = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(v52, v53);
  v54 = OBJC_IVAR____TtC14CopresenceCore10Attachment_queue;
  *(_QWORD *)&v109 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  v55 = (void *)v109;
  v56 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v57 = (uint64_t)v93;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v93, 1, 1, v56);
  v58 = v55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>, MEMORY[0x1E0C95D90]);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
  v59 = v94;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?(v57, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v60 = v95;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v59, v60);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v61 = *(NSObject **)(v6 + v54);
  v62 = v102;
  v63 = v97;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v102, v97, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  outlined init with copy of UserNotificationCenter((uint64_t)v51, (uint64_t)&v109);
  v64 = (*(unsigned __int8 *)(v98 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
  v65 = (v99 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  v66 = swift_allocObject();
  outlined init with take of ActivitySession.DomainAssertionWrapper(v63, v66 + v64, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  *(_QWORD *)(v66 + v65) = v6;
  outlined init with take of BackgroundSessionManagerDataSource(&v109, v66 + ((v65 + 15) & 0xFFFFFFFFFFFFFFF8));
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = partial apply for closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:);
  *(_QWORD *)(v67 + 24) = v66;
  v107 = thunk for @callee_guaranteed () -> ()partial apply;
  v108 = v67;
  aBlock = MEMORY[0x1E0C809B0];
  v104 = 1107296256;
  v105 = thunk for @escaping @callee_guaranteed () -> ();
  v106 = &block_descriptor_24_1;
  v68 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v61, v68);
  _Block_release(v68);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v62, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v88);
  LOBYTE(v61) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v61 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
    swift_release();
    return v6;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Attachment.updateLocalEncryption()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29[5];

  v2 = v0;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) != 0)
  {
    if (one-time initialization token for attachment == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.attachment);
  swift_retain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v28 = v1;
    v29[0] = v17;
    v18 = v17;
    v27 = v5;
    *(_DWORD *)v16 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v29[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v29);
    v5 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v14, v15, "Attempting to update local encryption for attachment %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask);
  swift_beginAccess();
  v22 = *v21;
  if (*v21)
  {
    swift_retain();
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1AF448418](v22, MEMORY[0x1E0DEE9C0] + 8, v23, MEMORY[0x1E0DEDB38]);
    swift_release();
    v22 = *v21;
  }
  v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v5, 1, 1, v24);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = v22;
  v25[5] = v2;
  swift_retain();
  swift_retain();
  *v21 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in Attachment.updateLocalEncryption(), (uint64_t)v25);
  swift_release();
}

void closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[5];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[5];

  v29 = a3;
  v31 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v4);
  v27[2] = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>);
  v27[4] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v27[3] = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v7 = MEMORY[0x1E0C80A78](v30);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v27 - v10;
  if (one-time initialization token for attachment != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachment);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v27[1] = v9;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v33[0] = v17;
    *(_DWORD *)v16 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
    v18 = Message.debugDescription.getter();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    _os_log_impl(&dword_1ACCCC000, v13, v14, "Attempting to unpack attachment %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }

  Attachment.unpack(attachment:)(a1);
  swift_retain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v33[0] = v23;
    *(_DWORD *)v22 = 136315138;
    swift_retain();
    v24 = Attachment.description.getter();
    v26 = v25;
    swift_release();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v20, v21, "Successfully unpacked attachment %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v23, -1, -1);
    MEMORY[0x1AF44981C](v22, -1, -1);
  }
  else
  {
    swift_release_n();
  }

}

uint64_t Attachment.unpack(attachment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];
  uint64_t v62[10];

  v60 = a1;
  v51 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v2 = MEMORY[0x1E0C80A78](v51);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v53 = (uint64_t)&v47 - v5;
  v6 = type metadata accessor for UnencryptedAttachment(0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  MEMORY[0x1E0C80A78](v6);
  v52 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v57 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v47 - v11;
  v50 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v55 = *(_QWORD *)(v50 - 8);
  v13 = *(_QWORD *)(v55 + 64);
  v14 = MEMORY[0x1E0C80A78](v50);
  v56 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v47 - v15;
  v17 = type metadata accessor for DispatchPredicate();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char **)((char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DEF740], v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    v54 = v1;
    if (one-time initialization token for attachment == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v23 = type metadata accessor for Logger();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.attachment);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v60, (uint64_t)v16, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v49 = v24;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v47 = v4;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc();
    v48 = v12;
    v30 = v29;
    v61[0] = v29;
    *(_DWORD *)v28 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
    v31 = Message.debugDescription.getter();
    v62[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    _os_log_impl(&dword_1ACCCC000, v25, v26, "Attempting to unpack attachment %s", v28, 0xCu);
    swift_arrayDestroy();
    v33 = v30;
    v12 = v48;
    MEMORY[0x1AF44981C](v33, -1, -1);
    v34 = v28;
    v4 = v47;
    MEMORY[0x1AF44981C](v34, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }

  v35 = *(_QWORD *)(v60 + 16);
  v36 = v56;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v60, v56, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v37 = (*(unsigned __int8 *)(v55 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v54;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v36, v38 + v37, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v62[0] = v35;
  v62[1] = (uint64_t)partial apply for closure #1 in Attachment.unpack(attachment:);
  v62[2] = v38;
  v62[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
  v62[4] = 0;
  v62[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
  v62[6] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Sequence.first(where:)(v62, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_release();
  v39 = v57;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, v57, &demangling cache variable for type metadata for UnencryptedAttachment?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v39, 1, v59) == 1)
  {
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for UnencryptedAttachment?);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1ACCCC000, v40, v41, "Failed to decrypt attachment", v42, 2u);
      MEMORY[0x1AF44981C](v42, -1, -1);
    }

    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *v43 = 0;
    swift_willThrow();
  }
  else
  {
    v44 = v52;
    outlined init with take of ActivitySession.DomainAssertionWrapper(v39, v52, type metadata accessor for UnencryptedAttachment);
    v45 = v53;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v44, v53, type metadata accessor for UnencryptedAttachment);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v45, (uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_retain();
    CurrentValueSubject.send(_:)();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v45, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v44, type metadata accessor for UnencryptedAttachment);
  }
  return outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for UnencryptedAttachment?);
}

uint64_t closure #1 in closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  void *v11;
  id v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  _BYTE v15[24];

  v0 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v15[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11 = *(void **)(result + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
    *v9 = v11;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
    v12 = v11;
    LOBYTE(v11) = _dispatchPreconditionTest(_:)();
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
    if ((v11 & 1) != 0)
    {
      swift_beginAccess();
      swift_retain();
      CurrentValueSubject.value.getter();
      swift_release();
      if (swift_getEnumCaseMultiPayload())
      {
        swift_release();
        v13 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
        v14 = (uint64_t)v5;
      }
      else
      {
        outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        Attachment.unpackAndRetry(attachment:)((uint64_t)v2);
        swift_release();
        v14 = (uint64_t)v2;
        v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
      }
      return outlined destroy of ActivitySession.DomainAssertionWrapper(v14, v13);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void Attachment.unpackAndRetry(attachment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  id v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t aBlock[6];
  uint64_t v73;

  v2 = v1;
  v66 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v6 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v65 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v64 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for DispatchTime();
  v61 = *(_QWORD *)(v69 - 8);
  v9 = MEMORY[0x1E0C80A78](v69);
  v60 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v63 = (char *)v56 - v11;
  v70 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v12 = MEMORY[0x1E0C80A78](v70);
  v67 = (uint64_t)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v68 = (uint64_t)v56 - v15;
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v56 - v16;
  v18 = type metadata accessor for DispatchPredicate();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (_QWORD *)((char *)v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0DEF740], v18);
  v62 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    Attachment.unpack(attachment:)(a1);
  }
  else
  {
    __break(1u);
    swift_once();
    v23 = type metadata accessor for Logger();
    v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.attachment);
    swift_retain();
    v25 = v21;
    swift_retain();
    v26 = v21;
    v56[0] = v24;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v58 = v4;
    v57 = v6;
    v59 = a1;
    if (v29)
    {
      v30 = swift_slowAlloc();
      v31 = swift_slowAlloc();
      aBlock[0] = v31;
      *(_DWORD *)v30 = 136315394;
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v30 + 12) = 2080;
      v73 = (uint64_t)v21;
      v34 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v35 = String.init<A>(reflecting:)();
      v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v27, v28, "Failed to unpack attachment %s, reason: %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    if (swift_getEnumCaseMultiPayload())
    {

      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    }
    else
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
      v38 = *(_QWORD *)&v17[*(int *)(v37 + 48)];
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v39 = v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config;
      if (v38 >= *(_QWORD *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config + 16))
      {
        v51 = Logger.logObject.getter();
        v52 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v53 = 0;
          _os_log_impl(&dword_1ACCCC000, v51, v52, "Exceeded retry attempts.", v53, 2u);
          MEMORY[0x1AF44981C](v53, -1, -1);
        }

        v54 = v68;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v59, v68, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        swift_storeEnumTagMultiPayload();
        v55 = v67;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v54, v67, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_retain();
        CurrentValueSubject.send(_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v55, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v54, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_release();

      }
      else
      {
        v40 = *(int *)(v37 + 48);
        v41 = v68;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v59, v68, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        *(_QWORD *)(v41 + v40) = v38 + 1;
        swift_storeEnumTagMultiPayload();
        v42 = v67;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v41, v67, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_retain();
        CurrentValueSubject.send(_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v42, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v41, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_release();
        v43 = v60;
        static DispatchTime.now()();
        v44 = v63;
        MEMORY[0x1AF447E84](v43, *(double *)(v39 + 24));
        v45 = *(void (**)(char *, uint64_t))(v61 + 8);
        v45(v43, v69);
        v46 = swift_allocObject();
        swift_weakInit();
        aBlock[4] = (uint64_t)partial apply for closure #1 in Attachment.unpackAndRetry(attachment:);
        aBlock[5] = v46;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = (uint64_t)&block_descriptor_35_0;
        v47 = _Block_copy(aBlock);
        swift_retain();
        v48 = v64;
        static DispatchQoS.unspecified.getter();
        v71 = MEMORY[0x1E0DEE9D8];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
        v49 = v57;
        v50 = v66;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1AF4485D4](v44, v48, v49, v47);
        _Block_release(v47);

        (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v50);
        (*(void (**)(char *, _QWORD))(v65 + 8))(v48, v56[1]);
        v45(v44, v69);
        swift_release();
        swift_release();
      }
    }
  }
}

_QWORD *Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t a6, unint64_t *a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  unint64_t v40;
  Swift::String v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  _BYTE *v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  unint64_t v77;
  uint64_t v78;
  int *v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  id v143;
  unint64_t v144;
  unint64_t v145;

  v8 = v7;
  v135 = a2;
  v136 = a6;
  v142 = a5;
  v138 = a3;
  v140 = a1;
  v11 = *v8;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v12);
  v118 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121);
  v119 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  v116 = *(_QWORD *)(v117 - 8);
  v15 = MEMORY[0x1E0C80A78](v117);
  v114 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v115 = (char *)&v102 - v17;
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>);
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113);
  v111 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Attachment.MMCSMetadata(0);
  MEMORY[0x1E0C80A78](v19);
  v130 = (uint64_t)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for SymmetricKey();
  v139 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v129 = (char *)&v102 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v22 = MEMORY[0x1E0C80A78](v106);
  v109 = (uint64_t)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v108 = (uint64_t)&v102 - v25;
  MEMORY[0x1E0C80A78](v24);
  v107 = (char *)&v102 - v26;
  v27 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v133 = *(_QWORD *)(v27 - 8);
  v134 = (_QWORD *)v27;
  MEMORY[0x1E0C80A78](v27);
  v131 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v123);
  v122 = (char *)&v102 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v30);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v102 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = *a4;
  v127 = a4[1];
  v125 = *a7;
  v35 = a7[1];
  v124 = (uint64_t *)a7[2];
  v36 = a7[3];
  v37 = a7[4];
  v38 = (char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  v144 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : AttachmentLedger_AttachmentEncryption]);
  Published.init(initialValue:)();
  v104 = v32;
  v39 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v103 = v38;
  v132 = v31;
  v39(v38, v34, v31);
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_cryptorCancellables) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask) = 0;
  v137 = type metadata accessor for OS_dispatch_queue();
  v110 = v11;
  v144 = _typeName(_:qualified:)();
  v145 = v40;
  v41._countAndFlagsBits = 45;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  v42 = type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v144 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, _QWORD *))(v133 + 104))(v131, *MEMORY[0x1E0DEF8D0], v134);
  v44 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v45 = OBJC_IVAR____TtC14CopresenceCore10Attachment_queue;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue) = v44;
  v131 = *(char **)(v42 - 8);
  v46 = (void (*)(void))*((_QWORD *)v131 + 2);
  v122 = (char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v133 = v42;
  v46();
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID) = v136;
  v47 = v142;
  v123 = (uint64_t)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor;
  outlined init with copy of UserNotificationCenter((uint64_t)v142, (uint64_t)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  v134 = v8;
  v48 = (_QWORD *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config);
  *v48 = v125;
  v48[1] = v35;
  v48[2] = v124;
  v48[3] = v36;
  v48[4] = v37;
  v49 = v47;
  v50 = v47[3];
  v51 = v49[4];
  __swift_project_boxed_opaque_existential_1(v49, v50);
  v52 = v135;
  v53 = v128;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v54 = v144;
  v55 = v145;
  v56 = (*(uint64_t (**)(unint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v144, v145, 0, v50, v51);
  v58 = v57;
  outlined consume of Data._Representation(v54, v55);
  if (v58 >> 60 == 15)
  {
    v60 = v139;
    v59 = v140;
    v61 = v52;
    v62 = v142;
    v63 = v134;
    outlined consume of Data?(v126, v127);
    if (one-time initialization token for attachment != -1)
      swift_once();
    v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Log.attachment);
    v65 = Logger.logObject.getter();
    v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      _os_log_impl(&dword_1ACCCC000, v65, v66, "Failed to encrypt the asset's key", v67, 2u);
      MEMORY[0x1AF44981C](v67, -1, -1);
    }

    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *v68 = 2;
    swift_willThrow();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v138, type metadata accessor for Attachment.MMCSMetadata);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v141);
    v69 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v131 + 1);
    v70 = v133;
    v69(v59, v133);
    v69((uint64_t)v122, v70);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v103, v132);

    __swift_destroy_boxed_opaque_existential_1Tm(v123);
    swift_bridgeObjectRelease();
    swift_release();
    swift_deallocPartialClassInstance();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v129, v52, v141);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v138, v130, type metadata accessor for Attachment.MMCSMetadata);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, AttachmentLedger_AttachmentEncryption)>);
    v128 = v56;
    v71 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, AttachmentLedger_AttachmentEncryption))
                                         - 8)
                             + 80);
    v72 = v58;
    v125 = v58;
    v73 = (v71 + 32) & ~v71;
    v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_1ACF59E20;
    *(_QWORD *)(v74 + v73) = v136;
    v75 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v124 = &v102;
    MEMORY[0x1E0C80A78](v75);
    *(&v102 - 4) = (uint64_t)v142;
    *(&v102 - 3) = v56;
    *(&v102 - 2) = v72;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, v76, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
    static Message.with(_:)();
    v136 = v53;
    v77 = specialized Dictionary.init(dictionaryLiteral:)(v74);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v78 = (uint64_t)v107;
    (*(void (**)(char *, char *, uint64_t))(v139 + 32))(v107, v129, v141);
    v79 = (int *)type metadata accessor for UnencryptedAttachment(0);
    outlined init with take of ActivitySession.DomainAssertionWrapper(v130, v78 + v79[6], type metadata accessor for Attachment.MMCSMetadata);
    v80 = (_QWORD *)(v78 + v79[5]);
    v81 = v127;
    *v80 = v126;
    v80[1] = v81;
    *(_QWORD *)(v78 + v79[7]) = v77;
    swift_storeEnumTagMultiPayload();
    v82 = v134;
    v83 = (_QWORD *)((char *)v134 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
    swift_beginAccess();
    v84 = v108;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v78, v108, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v84, v109, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
    swift_allocObject();
    v85 = CurrentValueSubject.init(_:)();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v84, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    *v83 = v85;
    outlined destroy of ActivitySession.DomainAssertionWrapper(v78, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_endAccess();
    v144 = *v83;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, MEMORY[0x1E0C95FB8]);
    swift_retain();
    v86 = v111;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_beginAccess();
    v87 = v115;
    Published.projectedValue.getter();
    swift_endAccess();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>, MEMORY[0x1E0C95708]);
    v88 = v113;
    Publisher<>.assign(to:)();
    (*(void (**)(char *, uint64_t))(v112 + 8))(v86, v88);
    v89 = v116;
    v90 = v117;
    (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v114, v87, v117);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v90);
    v91 = v142;
    v92 = v142[3];
    v93 = v142[4];
    __swift_project_boxed_opaque_existential_1(v142, v92);
    v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 16))(v92, v93);
    v143 = *(id *)((char *)v82 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
    v95 = v143;
    v144 = v94;
    v96 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    v97 = (uint64_t)v118;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v118, 1, 1, v96);
    v98 = v95;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
    v99 = v119;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v97, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
    v100 = v121;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v99, v100);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    outlined consume of Data?(v128, v125);
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v138, type metadata accessor for Attachment.MMCSMetadata);
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v135, v141);
    (*((void (**)(uint64_t, uint64_t))v131 + 1))(v140, v133);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v91);
    return v82;
  }
  return v63;
}

uint64_t closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  _BYTE v16[16];
  uint64_t v17;

  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = a2;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  static Message.with(_:)();
  v12 = (uint64_t)a1 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) + 28);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, v12, type metadata accessor for AttachmentLedger_EncryptionID);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
  v13 = *a1;
  v14 = a1[1];
  outlined copy of Data._Representation(a3, a4);
  result = outlined consume of Data._Representation(v13, v14);
  *a1 = a3;
  a1[1] = a4;
  return result;
}

uint64_t closure #1 in closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  v23 = UUID.uuid.getter();
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v20;
  return result;
}

uint64_t closure #1 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t result;
  uint64_t v17;

  v4 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v9, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v9, (uint64_t)v6, type metadata accessor for UnencryptedAttachment);
    v13 = *(_QWORD *)&v6[*(int *)(v4 + 28)];
    swift_bridgeObjectRetain();
    v14 = (uint64_t)v6;
    v15 = type metadata accessor for UnencryptedAttachment;
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v9, (uint64_t)v12, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    v13 = *((_QWORD *)v12 + 2);
    swift_bridgeObjectRetain();
    v14 = (uint64_t)v12;
    v15 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper(v14, v15);
  *a2 = v13;
  return result;
}

void closure #2 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  NSObject *v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  os_log_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v43 - v8;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v47 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v43 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v43 - v17;
  v49 = a2 + 16;
  if (one-time initialization token for attachment != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  v20 = __swift_project_value_buffer(v19, (uint64_t)static Log.attachment);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v21(v18, a1, v10);
  swift_retain_n();
  v22 = Logger.logObject.getter();
  v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, (os_log_type_t)v48))
  {
    v45 = v22;
    v46 = v20;
    v23 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v52[0] = v44;
    *(_DWORD *)v23 = 136315394;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v21(v9, Strong + OBJC_IVAR____TtC14CopresenceCore10Attachment_id, v10);
      swift_release();
      v25 = 0;
    }
    else
    {
      v25 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v25, 1, v10);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v9, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
    {
      v26 = 0xE300000000000000;
      v27 = 7104878;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v7, v10);
      v21(v47, (uint64_t)v16, v10);
      v27 = String.init<A>(reflecting:)();
      v26 = v28;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }
    outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v23 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v29 = dispatch thunk of CustomStringConvertible.description.getter();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    v31 = v45;
    _os_log_impl(&dword_1ACCCC000, v45, (os_log_type_t)v48, "%s observed local encryptionID updated to %s", (uint8_t *)v23, 0x16u);
    v32 = v44;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v32, -1, -1);
    MEMORY[0x1AF44981C](v23, -1, -1);

  }
  else
  {
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);

  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    Attachment.updateLocalEncryption()();
    if (v33)
    {
      swift_release();
      v34 = v33;
      v35 = v33;
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        v50 = (uint64_t)v33;
        v51 = v39;
        *(_DWORD *)v38 = 136315138;
        v40 = v33;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v41 = String.init<A>(reflecting:)();
        v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1ACCCC000, v36, v37, "Failed to update localEncryption, error=%s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v39, -1, -1);
        MEMORY[0x1AF44981C](v38, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t closure #1 in Attachment.unpackAndRetry(attachment:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v0 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v14[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = result;
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    if (swift_getEnumCaseMultiPayload())
    {
      swift_release();
      v8 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
      v9 = (uint64_t)v5;
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v10 = *(_QWORD *)(v7 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
      v11 = *(_QWORD *)(v7 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v10);
      v12 = swift_bridgeObjectRetain();
      v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v12);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 72))(v13, v10, v11);
      swift_release();
      swift_release();
      v9 = (uint64_t)v2;
      v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    }
    return outlined destroy of ActivitySession.DomainAssertionWrapper(v9, v8);
  }
  return result;
}

uint64_t closure #1 in Attachment.unpack(attachment:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  void *v88;
  _BYTE *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  NSObject *v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(_QWORD, _QWORD);
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  unint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int (*v144)(uint64_t, uint64_t, unint64_t);
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  id v165;
  id v166;
  NSObject *v167;
  os_log_type_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  id v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  uint8_t *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  unsigned int v196;
  char *v197;
  void (*v198)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  NSObject *v207;
  os_log_type_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  void (*v214)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  void (*v217)(char *, uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned int v221;
  _QWORD *v222;
  void (*v223)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  char **v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  void (*v232)(char *, uint64_t);
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  _QWORD *v238;
  void (*v239)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  _QWORD *v247;
  void (*v248)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  int *v256;
  _QWORD *v257;
  _QWORD *v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  _QWORD *v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t (*v275)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  NSObject *v282;
  os_log_type_t v283;
  uint8_t *v284;
  _BYTE *v285;
  void (*v286)(char *, uint64_t);
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void (*v292)(char *, uint64_t);
  uint64_t v293;
  uint64_t v294;
  int *v295;
  uint64_t v296;
  uint64_t *v297;
  unint64_t v298;
  _QWORD v299[2];
  _QWORD *v300;
  char *v301;
  _QWORD *v302;
  _QWORD *v303;
  char *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  void (*v327)(char *, uint64_t);
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  _QWORD *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  char *v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;

  v341 = a3;
  v347 = a2;
  v353 = a1;
  v354 = a4;
  v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v348 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v343 = (unint64_t)v299 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v344 = (uint64_t)v299 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v345 = (uint64_t)v299 - v10;
  MEMORY[0x1E0C80A78](v9);
  v352 = (char *)v299 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v327 = (void (*)(_QWORD, _QWORD))((char *)v299 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x1E0C80A78](v13);
  v342 = (uint64_t)v299 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v346 = (uint64_t)v299 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v351 = (uint64_t)v299 - v20;
  MEMORY[0x1E0C80A78](v19);
  v301 = (char *)v299 - v21;
  v22 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v22);
  v309 = (char *)v299 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  MEMORY[0x1E0C80A78](v310);
  v313 = (uint64_t)v299 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v308 = type metadata accessor for Attachment.MMCSMetadata(0);
  MEMORY[0x1E0C80A78](v308);
  v314 = (uint64_t)v299 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v335);
  v317 = (uint64_t)v299 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v27);
  v319 = (char *)v299 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = type metadata accessor for URL();
  v323 = *(_QWORD *)(v322 - 8);
  v29 = MEMORY[0x1E0C80A78](v322);
  v315 = (char *)v299 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v321 = (char *)v299 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v32);
  v333 = (unint64_t)v299 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v338 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v337 = *(_QWORD *)(v338 - 8);
  MEMORY[0x1E0C80A78](v338);
  v334 = (_QWORD *)((char *)v299 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v36 = MEMORY[0x1E0C80A78](v35);
  v312 = (uint64_t)v299 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v307 = (uint64_t)v299 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v304 = (char *)v299 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v306 = (uint64_t)v299 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v320 = (uint64_t)v299 - v45;
  MEMORY[0x1E0C80A78](v44);
  v331 = (uint64_t)v299 - v46;
  v339 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v330 = *(_QWORD *)(v339 - 8);
  v47 = MEMORY[0x1E0C80A78](v339);
  v311 = (_QWORD *)((char *)v299 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = MEMORY[0x1E0C80A78](v47);
  v305 = (_QWORD *)((char *)v299 - v50);
  v51 = MEMORY[0x1E0C80A78](v49);
  v303 = (_QWORD *)((char *)v299 - v52);
  v53 = MEMORY[0x1E0C80A78](v51);
  v302 = (_QWORD *)((char *)v299 - v54);
  v55 = MEMORY[0x1E0C80A78](v53);
  v318 = (char *)v299 - v56;
  MEMORY[0x1E0C80A78](v55);
  v332 = (_QWORD *)((char *)v299 - v57);
  v325 = type metadata accessor for AES.GCM.SealedBox();
  v326 = *(_QWORD *)(v325 - 8);
  v58 = MEMORY[0x1E0C80A78](v325);
  v316 = (char *)v299 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = MEMORY[0x1E0C80A78](v58);
  v324 = (char *)v299 - v61;
  MEMORY[0x1E0C80A78](v60);
  v340 = (char *)v299 - v62;
  v329 = type metadata accessor for SymmetricKey();
  v328 = *(_QWORD *)(v329 - 8);
  MEMORY[0x1E0C80A78](v329);
  v336 = (char *)v299 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v64);
  v66 = (char *)v299 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v68 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v70 = (_QWORD *)((char *)v299 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v71);
  v73 = (char *)v299 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v355 = type metadata accessor for UUID();
  v74 = *(_QWORD *)(v355 - 8);
  v75 = MEMORY[0x1E0C80A78](v355);
  v77 = (char *)v299 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = MEMORY[0x1E0C80A78](v75);
  v80 = (char *)v299 - v79;
  MEMORY[0x1E0C80A78](v78);
  v349 = v4;
  v350 = (char *)v299 - v81;
  v82 = *(int *)(v4 + 28);
  v83 = v353;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v353 + v82, (uint64_t)v66, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67) == 1)
  {
    *(_OWORD *)v70 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v66, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v66, (uint64_t)v70, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  v84 = *v70;
  v85 = v70[1];
  outlined copy of Data._Representation(*v70, v85);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v70, type metadata accessor for AttachmentLedger_EncryptionID);
  UUID.init(data:)(v84, v85);
  v86 = v355;
  v87 = &one-time initialization token for protoMessageName;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v73, 1, v355) == 1)
  {
    outlined destroy of UUID?((uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    v88 = (void *)swift_allocError();
    *v89 = 1;
    swift_willThrow();
    v90 = (uint64_t)v352;
LABEL_35:
    v117 = v354;
    goto LABEL_36;
  }
  v91 = v350;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v350, v73, v86);
  v92 = *(_QWORD *)(v347 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
  v93 = *(_QWORD *)(v347 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
  v300 = (_QWORD *)(v347 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v347 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v92);
  v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 24))(v92, v93);
  MEMORY[0x1E0C80A78](v94);
  v299[-2] = v91;
  v95 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (_BOOL8)&v299[-4], v94);
  swift_bridgeObjectRelease();
  if (!v95)
  {
    if (one-time initialization token for attachment != -1)
      swift_once();
    v106 = type metadata accessor for Logger();
    __swift_project_value_buffer(v106, (uint64_t)static Log.attachment);
    v107 = v355;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v77, v91, v355);
    v108 = Logger.logObject.getter();
    v109 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v108, v109))
    {
      v110 = (uint8_t *)swift_slowAlloc();
      v111 = v83;
      v112 = swift_slowAlloc();
      *(_QWORD *)&v356 = v112;
      *(_DWORD *)v110 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v113 = dispatch thunk of CustomStringConvertible.description.getter();
      v359 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, (uint64_t *)&v356);
      v107 = v355;
      v91 = v350;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v115 = *(void (**)(char *, uint64_t))(v74 + 8);
      v115(v77, v107);
      _os_log_impl(&dword_1ACCCC000, v108, v109, "remoteSKI %s is not known, skipping.", v110, 0xCu);
      swift_arrayDestroy();
      v116 = v112;
      v83 = v111;
      v117 = v354;
      MEMORY[0x1AF44981C](v116, -1, -1);
      MEMORY[0x1AF44981C](v110, -1, -1);

      v90 = (uint64_t)v352;
    }
    else
    {
      v115 = *(void (**)(char *, uint64_t))(v74 + 8);
      v115(v77, v107);

      v90 = (uint64_t)v352;
      v117 = v354;
    }
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    v88 = (void *)swift_allocError();
    *v136 = 0;
    swift_willThrow();
    v115(v91, v107);
    v87 = &one-time initialization token for protoMessageName;
    goto LABEL_36;
  }
  v299[0] = 0;
  if (one-time initialization token for attachment != -1)
    swift_once();
  v96 = type metadata accessor for Logger();
  v97 = __swift_project_value_buffer(v96, (uint64_t)static Log.attachment);
  v98 = v355;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v80, v91, v355);
  v299[1] = v97;
  v99 = Logger.logObject.getter();
  v100 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v99, v100))
  {
    v101 = (uint8_t *)swift_slowAlloc();
    v102 = swift_slowAlloc();
    *(_QWORD *)&v356 = v102;
    *(_DWORD *)v101 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v103 = dispatch thunk of CustomStringConvertible.description.getter();
    v359 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, (uint64_t *)&v356);
    v91 = v350;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v105 = *(void (**)(char *, uint64_t))(v74 + 8);
    v105(v80, v355);
    _os_log_impl(&dword_1ACCCC000, v99, v100, "Attempting to decrypt attachment with SKI: %s", v101, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v102, -1, -1);
    MEMORY[0x1AF44981C](v101, -1, -1);
  }
  else
  {
    v105 = *(void (**)(char *, uint64_t))(v74 + 8);
    v105(v80, v98);
  }

  v118 = v300[3];
  v119 = v300[4];
  __swift_project_boxed_opaque_existential_1(v300, v118);
  v120 = (void *)v299[0];
  v121 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD, uint64_t, uint64_t))(v119 + 64))(*v83, v83[1], v91, 0, v118, v119);
  v88 = v120;
  v90 = (uint64_t)v352;
  if (v120)
  {
    v123 = v343;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v83, v343, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    v124 = v120;
    v125 = v120;
    v126 = Logger.logObject.getter();
    v127 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = swift_slowAlloc();
      v347 = swift_slowAlloc();
      *(_QWORD *)&v356 = v347;
      *(_DWORD *)v128 = 136315394;
      v129 = v342;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v123, v342, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      v131 = v348;
      v130 = v349;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v348 + 56))(v129, 0, 1, v349);
      v132 = v129;
      v133 = v327;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v132, (uint64_t)v327, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      if ((*(unsigned int (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v131 + 48))(v133, 1, v130) == 1)
      {
        v134 = 7104878;
        v135 = 0xE300000000000000;
      }
      else
      {
        v155 = (void (*)(_QWORD, _QWORD))v105;
        v156 = v345;
        outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v133, v345, type metadata accessor for AttachmentLedger_AttachmentEncryption);
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v156, v344, type metadata accessor for AttachmentLedger_AttachmentEncryption);
        v134 = String.init<A>(reflecting:)();
        v135 = v157;
        v158 = v156;
        v105 = (void (*)(char *, uint64_t))v155;
        v123 = v343;
        outlined destroy of ActivitySession.DomainAssertionWrapper(v158, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      }
      outlined destroy of UUID?(v342, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      v359 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, (uint64_t *)&v356);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v123, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      *(_WORD *)(v128 + 12) = 2080;
      v359 = (uint64_t)v88;
      v159 = v88;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v160 = String.init<A>(reflecting:)();
      v359 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v161, (uint64_t *)&v356);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v126, v127, "Failed to decrypt symmetricKey with: %s, reason: %s", (uint8_t *)v128, 0x16u);
      v162 = v347;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v162, -1, -1);
      MEMORY[0x1AF44981C](v128, -1, -1);

      v83 = v353;
      v150 = v355;
      v91 = v350;
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v123, type metadata accessor for AttachmentLedger_AttachmentEncryption);

      v150 = v355;
    }
    swift_willThrow();
    v105(v91, v150);
    v87 = &one-time initialization token for protoMessageName;
    goto LABEL_35;
  }
  v137 = v121;
  v138 = v122;
  v327 = (void (*)(_QWORD, _QWORD))v105;
  outlined copy of Data._Representation(v121, v122);
  v139 = Logger.logObject.getter();
  v140 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v139, v140))
  {
    v141 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v141 = 0;
    _os_log_impl(&dword_1ACCCC000, v139, v140, "Attempting to create and unpack MMCSMetadata box", v141, 2u);
    MEMORY[0x1AF44981C](v141, -1, -1);
  }

  *(_QWORD *)&v356 = v137;
  *((_QWORD *)&v356 + 1) = v138;
  v342 = v137;
  v343 = v138;
  outlined copy of Data._Representation(v137, v138);
  SymmetricKey.init<A>(data:)();
  v142 = (uint64_t)v341 + *(int *)(v335 + 36);
  v143 = v331;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v142, v331, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v144 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v330 + 48);
  v145 = v339;
  if (v144(v143, 1, v339) == 1)
  {
    v146 = v332;
    *v332 = 0;
    v146[1] = 0xE000000000000000;
    v146[2] = 0;
    v146[3] = 0xE000000000000000;
    *((_OWORD *)v146 + 2) = xmmword_1ACF5CB20;
    *((_OWORD *)v146 + 3) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    v147 = v337;
    v148 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
    v149 = v338;
    v148((char *)v146 + *(int *)(v145 + 36), 1, 1, v338);
    v148((char *)v146 + *(int *)(v145 + 40), 1, 1, v149);
    outlined destroy of UUID?(v143, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  }
  else
  {
    v146 = v332;
    outlined init with take of ActivitySession.DomainAssertionWrapper(v143, (uint64_t)v332, type metadata accessor for AttachmentLedger_MMCSMetadata);
    v149 = v338;
    v147 = v337;
  }
  v151 = v333;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v146 + *(int *)(v145 + 36), v333, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v151, 1, v149) == 1)
  {
    v152 = v334;
    *v334 = 0;
    v152[1] = 0;
    v152[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of UUID?(v151, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  else
  {
    v152 = v334;
    outlined init with take of ActivitySession.DomainAssertionWrapper(v151, (uint64_t)v334, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v146, type metadata accessor for AttachmentLedger_MMCSMetadata);
  v153 = v152[1];
  v154 = v152[2];
  outlined copy of Data._Representation(v153, v154);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v152, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  specialized AES.GCM.SealedBox.init<A>(combined:)(v153, v154);
  v334 = (_QWORD *)static AES.GCM.open(_:using:)();
  v333 = v185;
  v186 = Logger.logObject.getter();
  v187 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v186, v187))
  {
    v188 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v188 = 0;
    _os_log_impl(&dword_1ACCCC000, v186, v187, "Attempting to create and unpack Attachment box", v188, 2u);
    MEMORY[0x1AF44981C](v188, -1, -1);
  }

  v189 = v341[5];
  v190 = v341[6];
  outlined copy of Data._Representation(v189, v190);
  specialized AES.GCM.SealedBox.init<A>(combined:)(v189, v190);
  v191 = static AES.GCM.open(_:using:)();
  v193 = v192;
  v331 = v191;
  v194 = v320;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v142, v320, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v195 = v339;
  v196 = v144(v194, 1, v339);
  v332 = v193;
  if (v196 == 1)
  {
    v197 = v318;
    *(_QWORD *)v318 = 0;
    v197[1] = 0xE000000000000000;
    v197[2] = 0;
    v197[3] = 0xE000000000000000;
    *((_OWORD *)v197 + 2) = xmmword_1ACF5CB20;
    *((_OWORD *)v197 + 3) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    v198 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
    v199 = v338;
    v198((char *)v197 + *(int *)(v195 + 36), 1, 1, v338);
    v200 = v199;
    v201 = (char *)v197;
    v198((char *)v197 + *(int *)(v195 + 40), 1, 1, v200);
    outlined destroy of UUID?(v194, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  }
  else
  {
    v201 = v318;
    outlined init with take of ActivitySession.DomainAssertionWrapper(v194, (uint64_t)v318, type metadata accessor for AttachmentLedger_MMCSMetadata);
  }
  v202 = v322;
  v203 = v323;
  v204 = (uint64_t)v319;
  swift_bridgeObjectRetain();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v201, type metadata accessor for AttachmentLedger_MMCSMetadata);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  v205 = v203;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v203 + 48))(v204, 1, v202) == 1)
  {
    outlined consume of Data._Representation(v342, v343);
    outlined destroy of UUID?(v204, &demangling cache variable for type metadata for URL?);
    v206 = v317;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v341, v317, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    v207 = Logger.logObject.getter();
    v208 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v207, v208))
    {
      v209 = (uint8_t *)swift_slowAlloc();
      v210 = swift_slowAlloc();
      *(_QWORD *)&v356 = v210;
      *(_DWORD *)v209 = 136315138;
      v211 = v312;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v206 + *(int *)(v335 + 36), v312, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      v212 = v339;
      if (v144(v211, 1, v339) == 1)
      {
        v213 = v311;
        *v311 = 0;
        v213[1] = 0xE000000000000000;
        v213[2] = 0;
        v213[3] = 0xE000000000000000;
        *((_OWORD *)v213 + 2) = xmmword_1ACF5CB20;
        *((_OWORD *)v213 + 3) = xmmword_1ACF5CB20;
        UnknownStorage.init()();
        v214 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
        v215 = v338;
        v214((char *)v213 + *(int *)(v212 + 36), 1, 1, v338);
        v214((char *)v213 + *(int *)(v212 + 40), 1, 1, v215);
        outlined destroy of UUID?(v211, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      }
      else
      {
        v213 = v311;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v211, (uint64_t)v311, type metadata accessor for AttachmentLedger_MMCSMetadata);
      }
      v226 = v213[2];
      v227 = v213[3];
      swift_bridgeObjectRetain();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v213, type metadata accessor for AttachmentLedger_MMCSMetadata);
      v359 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v226, v227, (uint64_t *)&v356);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v317, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      _os_log_impl(&dword_1ACCCC000, v207, v208, "Failed to convert %s to URL", v209, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v210, -1, -1);
      MEMORY[0x1AF44981C](v209, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v206, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    }

    v228 = v350;
    v87 = &one-time initialization token for protoMessageName;
    v229 = v329;
    v230 = v328;
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    v88 = (void *)swift_allocError();
    *v231 = 1;
    swift_willThrow();
    outlined consume of Data._Representation(v342, v343);
    outlined consume of Data._Representation(v331, (unint64_t)v332);
    outlined consume of Data._Representation((uint64_t)v334, v333);
    v232 = *(void (**)(char *, uint64_t))(v326 + 8);
    v233 = v325;
    v232(v324, v325);
    v232(v340, v233);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v336, v229);
    v327(v228, v355);
    v83 = v353;
    v117 = v354;
    v90 = (uint64_t)v352;
  }
  else
  {
    v216 = v202;
    v217 = *(void (**)(char *, uint64_t, uint64_t))(v205 + 32);
    v217(v321, v204, v216);
    (*(void (**)(char *, char *, uint64_t))(v326 + 16))(v316, v340, v325);
    AttachmentLedger_AttachmentMetadata.uploadStatus.getter((uint64_t)&v356);
    v335 = *((_QWORD *)&v356 + 1);
    v218 = v356;
    v330 = v357;
    v219 = v306;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v142, v306, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    v220 = v339;
    v221 = v144(v219, 1, v339);
    v320 = v218;
    if (v221 == 1)
    {
      v222 = v302;
      *v302 = 0;
      v222[1] = 0xE000000000000000;
      v222[2] = 0;
      v222[3] = 0xE000000000000000;
      *((_OWORD *)v222 + 2) = xmmword_1ACF5CB20;
      *((_OWORD *)v222 + 3) = xmmword_1ACF5CB20;
      UnknownStorage.init()();
      v223 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
      v224 = v338;
      v223((char *)v222 + *(int *)(v220 + 36), 1, 1, v338);
      v223((char *)v222 + *(int *)(v220 + 40), 1, 1, v224);
      v225 = (char **)v222;
      outlined destroy of UUID?(v219, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    }
    else
    {
      v225 = (char **)v302;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v219, (uint64_t)v302, type metadata accessor for AttachmentLedger_MMCSMetadata);
    }
    v234 = v323;
    v235 = v321;
    v236 = (uint64_t)v304;
    v237 = v225[1];
    v319 = *v225;
    v318 = v237;
    swift_bridgeObjectRetain();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v225, type metadata accessor for AttachmentLedger_MMCSMetadata);
    (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v315, v235, v216);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v142, v236, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    if (v144(v236, 1, v220) == 1)
    {
      v238 = v303;
      *v303 = 0;
      v238[1] = 0xE000000000000000;
      v238[2] = 0;
      v238[3] = 0xE000000000000000;
      *((_OWORD *)v238 + 2) = xmmword_1ACF5CB20;
      *((_OWORD *)v238 + 3) = xmmword_1ACF5CB20;
      UnknownStorage.init()();
      v239 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
      v240 = v338;
      v239((char *)v238 + *(int *)(v220 + 36), 1, 1, v338);
      v239((char *)v238 + *(int *)(v220 + 40), 1, 1, v240);
      outlined destroy of UUID?(v236, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    }
    else
    {
      v238 = v303;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v236, (uint64_t)v303, type metadata accessor for AttachmentLedger_MMCSMetadata);
    }
    v241 = v326;
    v243 = v238[4];
    v242 = v238[5];
    outlined copy of Data._Representation(v243, v242);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v238, type metadata accessor for AttachmentLedger_MMCSMetadata);
    v244 = v142;
    v245 = v307;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v244, v307, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    v246 = v144(v245, 1, v220);
    v317 = v243;
    if (v246 == 1)
    {
      v247 = v305;
      *v305 = 0;
      v247[1] = 0xE000000000000000;
      v247[2] = 0;
      v247[3] = 0xE000000000000000;
      *((_OWORD *)v247 + 2) = xmmword_1ACF5CB20;
      *((_OWORD *)v247 + 3) = xmmword_1ACF5CB20;
      UnknownStorage.init()();
      v248 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
      v249 = v338;
      v248((char *)v247 + *(int *)(v220 + 36), 1, 1, v338);
      v250 = *(int *)(v220 + 40);
      v251 = v247;
      v248((char *)v247 + v250, 1, 1, v249);
      outlined destroy of UUID?(v245, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    }
    else
    {
      v251 = v305;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v245, (uint64_t)v305, type metadata accessor for AttachmentLedger_MMCSMetadata);
    }
    v252 = v316;
    v253 = v251[6];
    v254 = v251[7];
    outlined copy of Data._Representation(v253, v254);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v251, type metadata accessor for AttachmentLedger_MMCSMetadata);
    v255 = v314;
    (*(void (**)(uint64_t, char *, uint64_t))(v241 + 32))(v314, v252, v325);
    v256 = (int *)v308;
    v257 = (_QWORD *)(v255 + *(int *)(v308 + 20));
    v258 = v334;
    v259 = v333;
    *v257 = v334;
    v257[1] = v259;
    v260 = (_QWORD *)(v255 + v256[6]);
    v261 = v335;
    *v260 = v320;
    v260[1] = v261;
    v260[2] = v330;
    v262 = (_QWORD *)(v255 + v256[7]);
    v263 = v318;
    *v262 = v319;
    v262[1] = v263;
    v217((char *)(v255 + v256[8]), (uint64_t)v315, v322);
    v264 = (_QWORD *)(v255 + v256[9]);
    *v264 = v317;
    v264[1] = v242;
    v265 = (uint64_t *)(v255 + v256[10]);
    *v265 = v253;
    v265[1] = v254;
    v358 = 0;
    v356 = 0u;
    v357 = 0u;
    outlined copy of Data._Representation((uint64_t)v258, v259);
    outlined copy of Data._Representation(v331, (unint64_t)v332);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (uint64_t (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedgerMetadata_AttachmentMetadata);
    v266 = v313;
    v267 = v310;
    Message.init(serializedData:extensions:partial:options:)();
    v268 = (uint64_t *)(v266 + *(int *)(v267 + 20));
    v269 = *v268;
    v270 = v268[1];
    if (v270 >> 60 == 15)
      v271 = 0;
    else
      v271 = *v268;
    v272 = 0xC000000000000000;
    if (v270 >> 60 != 15)
      v272 = v270;
    v339 = v272;
    v273 = v300[3];
    v274 = v300[4];
    __swift_project_boxed_opaque_existential_1(v300, v273);
    v275 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(v274 + 56);
    outlined copy of Data?(v269, v270);
    v277 = v342;
    v276 = v343;
    v278 = v275(v342, v343, 0, v273, v274);
    v280 = v279;
    v281 = outlined consume of Data._Representation(v277, v276);
    if (v280 >> 60 != 15)
    {
      *(_QWORD *)&v356 = v341[2];
      v288 = *(_QWORD *)(v347 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID);
      MEMORY[0x1E0C80A78](v281);
      v299[-4] = v289;
      v299[-3] = v278;
      v299[-2] = v280;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
      swift_bridgeObjectRetain();
      v290 = (uint64_t)v301;
      v291 = v349;
      static Message.with(_:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v348 + 56))(v290, 0, 1, v291);
      specialized Dictionary.subscript.setter(v290, v288);
      outlined consume of Data._Representation(v342, v343);
      outlined consume of Data?(v278, v280);
      outlined consume of Data._Representation(v331, (unint64_t)v332);
      outlined consume of Data._Representation((uint64_t)v334, v333);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v313, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
      (*(void (**)(char *, uint64_t))(v323 + 8))(v321, v322);
      v292 = *(void (**)(char *, uint64_t))(v326 + 8);
      v293 = v325;
      v292(v324, v325);
      v292(v340, v293);
      v327(v350, v355);
      v294 = v354;
      (*(void (**)(uint64_t, char *, uint64_t))(v328 + 32))(v354, v336, v329);
      v295 = (int *)type metadata accessor for UnencryptedAttachment(0);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v314, v294 + v295[6], type metadata accessor for Attachment.MMCSMetadata);
      v296 = v356;
      v297 = (uint64_t *)(v294 + v295[5]);
      v298 = v339;
      *v297 = v271;
      v297[1] = v298;
      *(_QWORD *)(v294 + v295[7]) = v296;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v295 - 1) + 56))(v294, 0, 1, v295);
    }
    v282 = Logger.logObject.getter();
    v283 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v282, v283))
    {
      v284 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v284 = 0;
      _os_log_impl(&dword_1ACCCC000, v282, v283, "Failed to encrypt the asset's key", v284, 2u);
      MEMORY[0x1AF44981C](v284, -1, -1);
    }

    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    v88 = (void *)swift_allocError();
    *v285 = 2;
    swift_willThrow();
    outlined consume of Data._Representation(v342, v343);
    outlined consume of Data._Representation(v271, v339);
    outlined consume of Data._Representation(v331, (unint64_t)v332);
    outlined consume of Data._Representation((uint64_t)v334, v333);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v313, (uint64_t (*)(_QWORD))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v314, type metadata accessor for Attachment.MMCSMetadata);
    (*(void (**)(char *, uint64_t))(v323 + 8))(v321, v322);
    v286 = *(void (**)(char *, uint64_t))(v326 + 8);
    v287 = v325;
    v286(v324, v325);
    v286(v340, v287);
    (*(void (**)(char *, uint64_t))(v328 + 8))(v336, v329);
    v327(v350, v355);
    v83 = v353;
    v117 = v354;
    v90 = (uint64_t)v352;
    v87 = &one-time initialization token for protoMessageName;
  }
LABEL_36:
  v163 = v88;
  if (v87[109] != -1)
    swift_once();
  v164 = type metadata accessor for Logger();
  __swift_project_value_buffer(v164, (uint64_t)static Log.attachment);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v83, v90, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  v165 = v88;
  v166 = v88;
  v167 = Logger.logObject.getter();
  v168 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v167, v168))
  {
    v169 = swift_slowAlloc();
    v170 = swift_slowAlloc();
    *(_QWORD *)&v356 = v170;
    *(_DWORD *)v169 = 136315394;
    v171 = v351;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v90, v351, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    v173 = v348;
    v172 = v349;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v348 + 56))(v171, 0, 1, v349);
    v174 = v171;
    v175 = v346;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v174, v346, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v175, 1, v172) == 1)
    {
      v176 = 7104878;
      v177 = 0xE300000000000000;
    }
    else
    {
      v178 = v345;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v175, v345, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v178, v344, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      v176 = String.init<A>(reflecting:)();
      v177 = v179;
      outlined destroy of ActivitySession.DomainAssertionWrapper(v178, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    }
    outlined destroy of UUID?(v351, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    v359 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v176, v177, (uint64_t *)&v356);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v90, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    *(_WORD *)(v169 + 12) = 2080;
    v359 = (uint64_t)v88;
    v180 = v88;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v181 = String.init<A>(reflecting:)();
    v359 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v181, v182, (uint64_t *)&v356);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v167, v168, "Failed to decrypt symmetricKey with: %s, reason: %s", (uint8_t *)v169, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v170, -1, -1);
    MEMORY[0x1AF44981C](v169, -1, -1);

    v117 = v354;
  }
  else
  {

    outlined destroy of ActivitySession.DomainAssertionWrapper(v90, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  v183 = type metadata accessor for UnencryptedAttachment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 56))(v117, 1, 1, v183);
}

void specialized AES.GCM.SealedBox.init<A>(combined:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ACE84530()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v0) > 0x1BuLL)
  {
    outlined copy of Data._Representation(v1, v0);
    specialized Data.init<A>(_:)(v1, v0);
    AES.GCM.SealedBox.init(combined:)();
  }
  else
  {
    v2 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA91E8], MEMORY[0x1E0CA91F0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x1E0CA91E0], v2);
    swift_willThrow();
  }
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t closure #1 in Attachment.updateLocalEncryption()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for UnencryptedAttachment(0);
  v5[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Attachment.updateLocalEncryption()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;

  if (v0[2])
  {
    v1 = (_QWORD *)swift_task_alloc();
    v0[5] = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v1 = v0;
    v1[1] = closure #1 in Attachment.updateLocalEncryption();
    return Task.value.getter();
  }
  else
  {
    static Task<>.checkCancellation()();
    v3 = (_QWORD *)swift_task_alloc();
    v0[7] = v3;
    *v3 = v0;
    v3[1] = closure #1 in Attachment.updateLocalEncryption();
    return Attachment.waitForDecryption()(v0[4]);
  }
}

{
  void *v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48);
  static Task<>.checkCancellation()();
  if (v1)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = closure #1 in Attachment.updateLocalEncryption();
    return Attachment.waitForDecryption()(*(_QWORD *)(v0 + 32));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v2 + 32), type metadata accessor for UnencryptedAttachment);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  static Task<>.checkCancellation()();
  if (!v1)
    OS_dispatch_queue.sync<A>(execute:)();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  static Task<>.checkCancellation()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = closure #1 in Attachment.updateLocalEncryption();
  return Attachment.waitForDecryption()(*(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in Attachment.updateLocalEncryption()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v29 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v26 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v26 - v15;
  result = static Task<>.checkCancellation()();
  if (!v1)
  {
    v26 = v14;
    v27 = v11;
    v28 = v7;
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v19 = (uint64_t)v28;
        outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v16, (uint64_t)v28, type metadata accessor for UnencryptedAttachment);
        v20 = *(_QWORD *)(v29 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID);
        Attachment.localEncryptionSlot.getter((uint64_t)v4);
        v23 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v4, 0, 1, v23);
        specialized Dictionary.subscript.setter((uint64_t)v4, v20);
        v24 = (uint64_t)v26;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v26, type metadata accessor for UnencryptedAttachment);
        swift_storeEnumTagMultiPayload();
        v25 = (uint64_t)v27;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)v27, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_retain();
        CurrentValueSubject.send(_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v25, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_release();
        return outlined destroy of ActivitySession.DomainAssertionWrapper(v19, type metadata accessor for UnencryptedAttachment);
      }
      v21 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
    }
    else
    {
      v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, v21);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *v22 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t Attachment.localEncryptionSlot.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE *v27;
  uint64_t (*v29)(uint64_t);
  _BYTE *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v2 = v1;
  v36 = a1;
  v3 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_6;
  }
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v29 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
LABEL_11:
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, v29);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *v30 = 3;
    return swift_willThrow();
  }
  if (EnumCaseMultiPayload != 1)
  {
    v29 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
    goto LABEL_11;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, (uint64_t)v5, type metadata accessor for UnencryptedAttachment);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v16);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v19 = v34;
  v18 = v35;
  v20 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v34, v35, 0, v16, v17);
  v22 = v21;
  outlined consume of Data._Representation(v19, v18);
  if (v22 >> 60 != 15)
  {
    v31 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    MEMORY[0x1E0C80A78](v31);
    *(&v33 - 4) = v2;
    *(&v33 - 3) = v20;
    *(&v33 - 2) = v22;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, v32, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
    static Message.with(_:)();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for UnencryptedAttachment);
    return outlined consume of Data?(v20, v22);
  }
  if (one-time initialization token for attachment != -1)
    goto LABEL_14;
LABEL_6:
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.attachment);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1ACCCC000, v24, v25, "Failed to encrypt the asset's key", v26, 2u);
    MEMORY[0x1AF44981C](v26, -1, -1);
  }

  lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
  swift_allocError();
  *v27 = 2;
  swift_willThrow();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for UnencryptedAttachment);
}

uint64_t closure #1 in closure #1 in Attachment.unpack(attachment:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;

  v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, v11, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  static Message.with(_:)();
  v12 = (uint64_t)a1 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) + 28);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v10, v12, type metadata accessor for AttachmentLedger_EncryptionID);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
  v13 = *a1;
  v14 = a1[1];
  outlined copy of Data._Representation(a3, a4);
  result = outlined consume of Data._Representation(v13, v14);
  *a1 = a3;
  a1[1] = a4;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Attachment.unpack(attachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
  v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  v23 = UUID.uuid.getter();
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v20;
  return result;
}

uint64_t closure #1 in Attachment.update(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v28)(uint64_t);
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v37 = a4;
  v35 = a2;
  v36 = a3;
  v5 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v30 - v15;
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v16, (uint64_t)v7, type metadata accessor for UnencryptedAttachment);
      v18 = *(int *)(v5 + 24);
      v19 = v18 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 24);
      v33 = v7;
      v34 = v4;
      v20 = (uint64_t *)&v7[v19];
      v21 = *(_QWORD *)&v7[v19];
      v22 = *(_QWORD *)&v7[v19 + 16];
      v31 = *(_QWORD *)&v7[v19 + 8];
      v32 = v21;
      v24 = v35;
      v23 = v36;
      v25 = v37;
      outlined copy of Attachment.MMCSMetadata.UploadStatus(v35, v36, v37);
      outlined consume of Attachment.MMCSMetadata.UploadStatus(v32, v31, v22);
      *v20 = v24;
      v20[1] = v23;
      v20[2] = v25;
      v26 = (uint64_t)v33;
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v14, type metadata accessor for UnencryptedAttachment);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t)v11, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_retain();
      CurrentValueSubject.send(_:)();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_release();
      return outlined destroy of ActivitySession.DomainAssertionWrapper(v26, type metadata accessor for UnencryptedAttachment);
    }
    v28 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
  }
  else
  {
    v28 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, v28);
  lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
  swift_allocError();
  *v29 = 3;
  return swift_willThrow();
}

uint64_t closure #1 in Attachment.update(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v55 = a2;
  v53 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1E0C80A78](v53);
  v54 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v53 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v53 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v53 - v14;
  v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v58 = (uint64_t)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v53 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v53 - v25;
  v27 = a1 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status;
  swift_beginAccess();
  v56 = v27;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v57 = v19;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v29 = v54;
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v26, v54, type metadata accessor for UnencryptedAttachment);
      v30 = v55;
      v31 = *(_QWORD *)(v55 + 16);
      v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v30 + *(int *)(v32 + 28), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      v33 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v7, 1, v33) == 1)
      {
        *(_OWORD *)v10 = xmmword_1ACF5CB20;
        *((_QWORD *)v10 + 2) = 0;
        UnknownStorage.init()();
        v35 = &v10[*(int *)(v33 + 28)];
        v36 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
        outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      }
      else
      {
        outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v10, 0, 1, v33);
      specialized Dictionary.subscript.setter((uint64_t)v10, v31);
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v29, (uint64_t)v24, type metadata accessor for UnencryptedAttachment);
      swift_storeEnumTagMultiPayload();
      v49 = v58;
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v24, v58, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_retain();
      CurrentValueSubject.send(_:)();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v49, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v24, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_release();
      v48 = v29;
      v47 = type metadata accessor for UnencryptedAttachment;
    }
    else
    {
      v47 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
      v48 = (uint64_t)v26;
    }
  }
  else
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
    v54 = *(_QWORD *)&v26[*(int *)(v37 + 48)];
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v26, (uint64_t)v18, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    v38 = v55;
    v39 = *(_QWORD *)(v55 + 16);
    v40 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v38 + *(int *)(v40 + 28), (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    v41 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v13, 1, v41) == 1)
    {
      *(_OWORD *)v15 = xmmword_1ACF5CB20;
      *((_QWORD *)v15 + 2) = 0;
      UnknownStorage.init()();
      v43 = v18;
      v44 = &v15[*(int *)(v41 + 28)];
      v45 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v46 = v44;
      v18 = v43;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v46, 1, 1, v45);
      outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v13, (uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v41);
    specialized Dictionary.subscript.setter((uint64_t)v15, v39);
    v50 = *(int *)(v37 + 48);
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v24, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    *(_QWORD *)&v24[v50] = v54;
    swift_storeEnumTagMultiPayload();
    v51 = v58;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v24, v58, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_retain();
    CurrentValueSubject.send(_:)();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v51, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v24, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
    Attachment.unpack(attachment:)((uint64_t)v18);
    v47 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    v48 = (uint64_t)v18;
  }
  return outlined destroy of ActivitySession.DomainAssertionWrapper(v48, v47);
}

uint64_t Attachment.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v13 = v11;
  v14 = v12;
  v4._object = (void *)0x80000001ACF82980;
  v4._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  v11 = v0;
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x203A6469202CLL;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x737574617473202CLL;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v13;
}

uint64_t Attachment.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t Attachment.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance Attachment@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Attachment()
{
  return Attachment.description.getter();
}

uint64_t partial apply for closure #1 in Attachment.update(_:)()
{
  uint64_t v0;

  return closure #1 in Attachment.update(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0)
                                      - 8)
                          + 80);
  return closure #1 in Attachment.update(_:)(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1ACE86198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  v3 = v0 + ((v2 + 24) & ~v2);
  outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
  v4 = v3 + *(int *)(v1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = v3 + *(int *)(v1 + 28);
  v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    outlined consume of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    v6(v7 + *(int *)(v8 + 24), v5);
    v9 = v7 + *(int *)(v8 + 28);
    v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    {
      outlined consume of Data._Representation(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
      v6(v9 + *(int *)(v10 + 20), v5);
    }
  }
  return swift_deallocObject();
}

uint64_t sub_1ACE862F8()
{
  return swift_deallocObject();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t outlined assign with take of Attachment.MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Attachment.MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Attachment.EncryptedAttachmentStatus(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Attachment.EncryptedAttachmentStatus);
}

unint64_t lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors;
  if (!lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Attachment.Errors, &type metadata for Attachment.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors;
  if (!lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Attachment.Errors, &type metadata for Attachment.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Attachment.mmcsMetadata.getter(a1, v1);
}

uint64_t specialized closure #1 in Sequence<>.contains(_:)()
{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnencryptedAttachment(0);
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2) != 1;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for UnencryptedAttachment?);
  v7 = type metadata accessor for UnencryptedAttachment(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if ((_DWORD)result != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for UnencryptedAttachment);
  __break(1u);
  return result;
}

uint64_t sub_1ACE86524()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(a1, v1);
}

uint64_t sub_1ACE86560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);
  unint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(unint64_t, uint64_t, uint64_t);
  unint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v3 + 40), *(_QWORD *)(v0 + v3 + 48));
  v5 = v0 + v3 + *(int *)(v1 + 32);
  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = v0 + v3 + *(int *)(v1 + 36);
  v9 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9))
  {
    v15 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56));
    v7(v8 + v9[8], v6);
    v10 = v8 + v9[9];
    v11 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v12 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
    if (!v12(v10, 1, v11))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16));
      v7(v10 + *(int *)(v11 + 24), v6);
    }
    v13 = v8 + v9[10];
    v4 = v15;
    if (!v12(v13, 1, v11))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
      v7(v13 + *(int *)(v11 + 24), v6);
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
  return swift_deallocObject();
}

void partial apply for closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(v0 + v2, *(_QWORD *)(v0 + v3), v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1ACE8676C()
{
  return swift_deallocObject();
}

uint64_t sub_1ACE8677C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Attachment.updateLocalEncryption()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in Attachment.updateLocalEncryption()(a1, v4, v5, v7, v6);
}

uint64_t sub_1ACE86828()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(unint64_t, uint64_t);
  unint64_t v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(unint64_t, uint64_t, uint64_t);
  unint64_t v11;

  v1 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v2 + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v2 + 40), *(_QWORD *)(v0 + v2 + 48));
  v3 = v0 + v2 + *(int *)(v1 + 32);
  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = v0 + v2 + *(int *)(v1 + 36);
  v7 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
    v5(v6 + v7[8], v4);
    v8 = v6 + v7[9];
    v9 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v10 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
    if (!v10(v8, 1, v9))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16));
      v5(v8 + *(int *)(v9 + 24), v4);
    }
    v11 = v6 + v7[10];
    if (!v10(v11, 1, v9))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
      v5(v11 + *(int *)(v9 + 24), v4);
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Attachment.unpack(attachment:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) - 8) + 80);
  return closure #1 in Attachment.unpack(attachment:)(a1, *(_QWORD *)(v2 + 16), (_QWORD *)(v2 + ((v5 + 24) & ~v5)), a2);
}

uint64_t partial apply for closure #1 in Attachment.unpackAndRetry(attachment:)()
{
  return closure #1 in Attachment.unpackAndRetry(attachment:)();
}

uint64_t partial apply for closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in Attachment.localEncryptionSlot.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Attachment.unpack(attachment:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

_QWORD *initializeBufferWithCopyOfBuffer for UnencryptedAttachment(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v50;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for AES.GCM.SealedBox();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
    v19 = v18[5];
    v20 = (uint64_t *)&v15[v19];
    v21 = (uint64_t *)&v16[v19];
    v22 = *v21;
    v23 = v21[1];
    outlined copy of Data._Representation(*v21, v23);
    *v20 = v22;
    v20[1] = v23;
    v24 = v18[6];
    v25 = &v15[v24];
    v26 = &v16[v24];
    v27 = *((_QWORD *)v26 + 2);
    if (v27 >> 60 == 15 || (v27 & 0xF000000000000000) == 0xB000000000000000)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
    }
    else
    {
      v29 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      outlined copy of Data._Representation(v29, v27);
      *((_QWORD *)v25 + 1) = v29;
      *((_QWORD *)v25 + 2) = v27;
    }
    v30 = v18[7];
    v31 = &v15[v30];
    v32 = &v16[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = v18[8];
    v35 = &v15[v34];
    v36 = &v16[v34];
    v37 = type metadata accessor for URL();
    v50 = a2;
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    swift_bridgeObjectRetain();
    v38(v35, v36, v37);
    v39 = v18[9];
    v40 = (uint64_t *)&v15[v39];
    v41 = (uint64_t *)&v16[v39];
    v42 = *v41;
    v43 = v41[1];
    outlined copy of Data._Representation(*v41, v43);
    *v40 = v42;
    v40[1] = v43;
    v44 = v18[10];
    v45 = (uint64_t *)&v15[v44];
    v46 = (uint64_t *)&v16[v44];
    v47 = *v46;
    v48 = v46[1];
    outlined copy of Data._Representation(*v46, v48);
    *v45 = v47;
    v45[1] = v48;
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)v50 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UnencryptedAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v6 = v5[1];
  if (v6 >> 60 != 15)
    outlined consume of Data._Representation(*v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  outlined consume of Data._Representation(*(_QWORD *)(v7 + v9[5]), *(_QWORD *)(v7 + v9[5] + 8));
  v10 = v7 + v9[6];
  v11 = *(_QWORD *)(v10 + 16);
  if (v11 >> 60 != 15 && (v11 & 0xF000000000000000) != 0xB000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(v10 + 8), v11);
  swift_bridgeObjectRelease();
  v13 = v7 + v9[8];
  v14 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  outlined consume of Data._Representation(*(_QWORD *)(v7 + v9[9]), *(_QWORD *)(v7 + v9[9] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(v7 + v9[10]), *(_QWORD *)(v7 + v9[10] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnencryptedAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  v17 = v16[5];
  v18 = (uint64_t *)(v13 + v17);
  v19 = (uint64_t *)(v14 + v17);
  v20 = *v19;
  v21 = v19[1];
  outlined copy of Data._Representation(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = v16[6];
  v23 = v13 + v22;
  v24 = v14 + v22;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = v25 >> 60 == 15 || (v25 & 0xF000000000000000) == 0xB000000000000000;
  v48 = a3;
  if (v26)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  }
  else
  {
    v27 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    outlined copy of Data._Representation(v27, v25);
    *(_QWORD *)(v23 + 8) = v27;
    *(_QWORD *)(v23 + 16) = v25;
  }
  v28 = v16[7];
  v29 = (_QWORD *)(v13 + v28);
  v30 = (_QWORD *)(v14 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = v16[8];
  v33 = v13 + v32;
  v34 = v14 + v32;
  v35 = type metadata accessor for URL();
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  swift_bridgeObjectRetain();
  v36(v33, v34, v35);
  v37 = v16[9];
  v38 = (uint64_t *)(v13 + v37);
  v39 = (uint64_t *)(v14 + v37);
  v40 = *v39;
  v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  *v38 = v40;
  v38[1] = v41;
  v42 = v16[10];
  v43 = (uint64_t *)(v13 + v42);
  v44 = (uint64_t *)(v14 + v42);
  v45 = *v44;
  v46 = v44[1];
  outlined copy of Data._Representation(*v44, v46);
  *v43 = v45;
  v43[1] = v46;
  *(_QWORD *)(a1 + *(int *)(v48 + 28)) = *(_QWORD *)(a2 + *(int *)(v48 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnencryptedAttachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  v20 = v19[5];
  v21 = (uint64_t *)(v16 + v20);
  v22 = (uint64_t *)(v17 + v20);
  v23 = *v22;
  v24 = v22[1];
  outlined copy of Data._Representation(*v22, v24);
  v25 = *v21;
  v26 = v21[1];
  *v21 = v23;
  v21[1] = v24;
  outlined consume of Data._Representation(v25, v26);
  v27 = v19[6];
  v28 = v16 + v27;
  v29 = (__int128 *)(v17 + v27);
  v30 = *(_QWORD *)(v16 + v27 + 16);
  v31 = *(_QWORD *)(v17 + v27 + 16) >> 60;
  v33 = v31 > 0xE || v31 == 11;
  if (v30 >> 60 == 15 || (v30 & 0xF000000000000000) == 0xB000000000000000)
  {
    if (v33)
    {
      v35 = *v29;
      *(_QWORD *)(v28 + 16) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v28 = v35;
    }
    else
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v40 = *((_QWORD *)v29 + 1);
      v41 = *((_QWORD *)v29 + 2);
      outlined copy of Data._Representation(v40, v41);
      *(_QWORD *)(v28 + 8) = v40;
      *(_QWORD *)(v28 + 16) = v41;
    }
  }
  else if (v33)
  {
    outlined destroy of Attachment.UpdatingBlob(v28);
    v34 = *((_QWORD *)v29 + 2);
    *(_OWORD *)v28 = *v29;
    *(_QWORD *)(v28 + 16) = v34;
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v36 = *((_QWORD *)v29 + 1);
    v37 = *((_QWORD *)v29 + 2);
    outlined copy of Data._Representation(v36, v37);
    v38 = *(_QWORD *)(v28 + 8);
    v39 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)(v28 + 8) = v36;
    *(_QWORD *)(v28 + 16) = v37;
    outlined consume of Data._Representation(v38, v39);
  }
  v42 = v19[7];
  v43 = (_QWORD *)(v16 + v42);
  v44 = (_QWORD *)(v17 + v42);
  *v43 = *v44;
  v43[1] = v44[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = v19[8];
  v46 = v16 + v45;
  v47 = v17 + v45;
  v48 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v46, v47, v48);
  v49 = v19[9];
  v50 = (uint64_t *)(v16 + v49);
  v51 = (uint64_t *)(v17 + v49);
  v52 = *v51;
  v53 = v51[1];
  outlined copy of Data._Representation(*v51, v53);
  v54 = *v50;
  v55 = v50[1];
  *v50 = v52;
  v50[1] = v53;
  outlined consume of Data._Representation(v54, v55);
  v56 = v19[10];
  v57 = (uint64_t *)(v16 + v56);
  v58 = (uint64_t *)(v17 + v56);
  v59 = *v58;
  v60 = v58[1];
  outlined copy of Data._Representation(*v58, v60);
  v61 = *v57;
  v62 = v57[1];
  *v57 = v59;
  v57[1] = v60;
  outlined consume of Data._Representation(v61, v62);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of Attachment.UpdatingBlob(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t initializeWithTake for UnencryptedAttachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  *(_OWORD *)(v8 + v11[5]) = *(_OWORD *)(v9 + v11[5]);
  v12 = v11[6];
  v13 = v8 + v12;
  v14 = v9 + v12;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
  v15 = v11[8];
  v16 = v8 + v15;
  v17 = v9 + v15;
  v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_OWORD *)(v8 + v11[9]) = *(_OWORD *)(v9 + v11[9]);
  *(_OWORD *)(v8 + v11[10]) = *(_OWORD *)(v9 + v11[10]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for UnencryptedAttachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  v18 = v17[5];
  v19 = *(_QWORD *)(v14 + v18);
  v20 = *(_QWORD *)(v14 + v18 + 8);
  *(_OWORD *)(v14 + v18) = *(_OWORD *)(v15 + v18);
  outlined consume of Data._Representation(v19, v20);
  v21 = v17[6];
  v22 = v14 + v21;
  v23 = v15 + v21;
  v24 = *(_QWORD *)(v14 + v21 + 16);
  if (v24 >> 60 == 15 || (v24 & 0xF000000000000000) == 0xB000000000000000)
    goto LABEL_16;
  v26 = *(_QWORD *)(v23 + 16);
  if (v26 >> 60 == 15 || (v26 & 0xF000000000000000) == 0xB000000000000000)
  {
    outlined destroy of Attachment.UpdatingBlob(v22);
LABEL_16:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    goto LABEL_17;
  }
  v28 = *(_QWORD *)(v22 + 8);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_QWORD *)(v22 + 16) = v26;
  outlined consume of Data._Representation(v28, v24);
LABEL_17:
  v29 = v17[7];
  v30 = (_QWORD *)(v14 + v29);
  v31 = (uint64_t *)(v15 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v34 = v17[8];
  v35 = v14 + v34;
  v36 = v15 + v34;
  v37 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  v38 = v17[9];
  v39 = *(_QWORD *)(v14 + v38);
  v40 = *(_QWORD *)(v14 + v38 + 8);
  *(_OWORD *)(v14 + v38) = *(_OWORD *)(v15 + v38);
  outlined consume of Data._Representation(v39, v40);
  v41 = v17[10];
  v42 = *(_QWORD *)(v14 + v41);
  v43 = *(_QWORD *)(v14 + v41 + 8);
  *(_OWORD *)(v14 + v41) = *(_OWORD *)(v15 + v41);
  outlined consume of Data._Representation(v42, v43);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnencryptedAttachment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE87660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Attachment.MMCSMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for UnencryptedAttachment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE87714(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Attachment.MMCSMetadata(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for UnencryptedAttachment()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Attachment.MMCSMetadata(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t ObjC metadata update function for Attachment()
{
  return type metadata accessor for Attachment(0);
}

uint64_t type metadata accessor for Attachment(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Attachment);
}

void type metadata completion function for Attachment()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for Attachment()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Attachment.__allocating_init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of Attachment.__allocating_init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t getEnumTagSinglePayload for Attachment.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Attachment.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1ACE87AA4 + 4 * byte_1ACF67C85[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1ACE87AD8 + 4 * asc_1ACF67C80[v4]))();
}

uint64_t sub_1ACE87AD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE87AE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE87AE8);
  return result;
}

uint64_t sub_1ACE87AF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE87AFCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1ACE87B00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE87B08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Attachment.Errors()
{
  return &type metadata for Attachment.Errors;
}

uint64_t destroy for Attachment.UpdatingBlob(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *initializeBufferWithCopyOfBuffer for Attachment.UpdatingBlob(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  outlined copy of Data._Representation(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for Attachment.UpdatingBlob(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  outlined copy of Data._Representation(v3, v4);
  v5 = a1[1];
  v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for Attachment.UpdatingBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.UpdatingBlob(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Attachment.UpdatingBlob(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.UpdatingBlob()
{
  return &type metadata for Attachment.UpdatingBlob;
}

uint64_t *initializeBufferWithCopyOfBuffer for Attachment.MMCSMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AES.GCM.SealedBox();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = *((_QWORD *)v15 + 2);
    if (v16 >> 60 == 15 || (v16 & 0xF000000000000000) == 0xB000000000000000)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    }
    else
    {
      v19 = *((_QWORD *)v15 + 1);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      outlined copy of Data._Representation(v19, v16);
      *((_QWORD *)v14 + 1) = v19;
      *((_QWORD *)v14 + 2) = v16;
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (char *)a1 + v21;
    v26 = (char *)a2 + v21;
    v27 = type metadata accessor for URL();
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain();
    v28(v25, v26, v27);
    v29 = a3[9];
    v30 = (uint64_t *)((char *)a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = *v31;
    v33 = v31[1];
    outlined copy of Data._Representation(*v31, v33);
    *v30 = v32;
    v30[1] = v33;
    v34 = a3[10];
    v35 = (uint64_t *)((char *)a1 + v34);
    v36 = (uint64_t *)((char *)a2 + v34);
    v37 = *v36;
    v38 = v36[1];
    outlined copy of Data._Representation(*v36, v38);
    *v35 = v37;
    v35[1] = v38;
  }
  return a1;
}

